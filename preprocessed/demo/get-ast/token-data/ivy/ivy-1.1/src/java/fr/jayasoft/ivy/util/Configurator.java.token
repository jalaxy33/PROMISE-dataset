package
fr
jayasoft
ivy
util
import
java
lang
reflect
Method
import
java
util
Arrays
import
java
util
HashMap
import
java
util
Iterator
import
java
util
List
import
java
util
Map
import
java
util
Stack
public
class
Configurator
private
static
class
ObjectDescriptor
private
Object
_obj
private
String
_objName
private
Map
_createMethods
new
HashMap
private
Map
_addMethods
new
HashMap
private
Map
_addConfiguredMethods
new
HashMap
private
Map
_setMethods
new
HashMap
private
Map
_typeAddMethods
new
HashMap
private
Map
_typeAddConfiguredMethods
new
HashMap
public
ObjectDescriptor
Object
object
String
objName
_obj
object
_objName
objName
Method
methods
object
getClass
getMethods
for
int
i
i
methods
length
i
Method
m
methods
i
if
m
getName
startsWith
m
getParameterTypes
length
Void
TYPE
equals
m
getReturnType
String
name
StringUtils
uncapitalize
m
getName
substring
length
if
name
length
continue
addCreateMethod
name
m
else
if
m
getName
startsWith
m
getParameterTypes
length
Void
TYPE
equals
m
getReturnType
String
name
StringUtils
uncapitalize
m
getName
substring
length
if
name
length
addAddConfiguredMethod
m
addAddConfiguredMethod
name
m
else
if
m
getName
startsWith
m
getName
startsWith
m
getParameterTypes
length
Void
TYPE
equals
m
getReturnType
String
name
StringUtils
uncapitalize
m
getName
substring
length
if
name
length
addAddMethod
m
addAddMethod
name
m
else
if
m
getName
startsWith
m
getParameterTypes
length
Void
TYPE
equals
m
getReturnType
String
name
StringUtils
uncapitalize
m
getName
substring
length
if
name
length
continue
addSetMethod
name
m
public
void
addCreateMethod
String
name
Method
m
_createMethods
put
name
m
public
void
addAddMethod
String
name
Method
m
_addMethods
put
name
m
public
void
addAddConfiguredMethod
String
name
Method
m
_addConfiguredMethods
put
name
m
private
void
addAddMethod
Method
m
_typeAddMethods
put
m
getParameterTypes
m
private
void
addAddConfiguredMethod
Method
m
_typeAddConfiguredMethods
put
m
getParameterTypes
m
public
void
addSetMethod
String
name
Method
m
_setMethods
put
name
m
public
Object
getObject
return
_obj
public
Method
getCreateMethod
String
name
return
Method
_createMethods
get
name
public
Method
getAddMethod
String
name
return
Method
_addMethods
get
name
public
Method
getAddConfiguredMethod
String
name
return
Method
_addConfiguredMethods
get
name
public
Method
getAddMethod
Class
type
return
getTypeMatchingMethod
type
_typeAddMethods
public
Method
getAddConfiguredMethod
Class
type
return
getTypeMatchingMethod
type
_typeAddConfiguredMethods
private
Method
getTypeMatchingMethod
Class
type
Map
typeMethods
Method
m
Method
typeMethods
get
type
if
m
return
m
for
Iterator
iter
typeMethods
keySet
iterator
iter
hasNext
Class
clss
Class
iter
next
if
clss
isAssignableFrom
type
return
Method
typeMethods
get
clss
return
public
Method
getSetMethod
String
name
return
Method
_setMethods
get
name
public
String
getObjectName
return
_objName
private
Map
_typedefs
new
HashMap
private
Stack
_objectStack
new
Stack
private
static
final
List
TRUE_VALUES
Arrays
asList
new
String
public
void
typeDef
String
name
String
className
throws
ClassNotFoundException
typeDef
name
Class
forName
className
public
void
typeDef
String
name
Class
clazz
_typedefs
put
name
clazz
public
void
setRoot
Object
root
if
root
throw
new
NullPointerException
_objectStack
clear
setCurrent
root
public
void
clear
_objectStack
clear
private
void
setCurrent
Object
object
String
name
_objectStack
push
new
ObjectDescriptor
object
name
public
Object
startCreateChild
String
name
if
_objectStack
isEmpty
throw
new
IllegalStateException
ObjectDescriptor
parentOD
ObjectDescriptor
_objectStack
peek
Object
parent
parentOD
getObject
Object
child
Class
childClass
Class
_typedefs
get
name
Method
addChild
try
if
childClass
addChild
parentOD
getAddMethod
childClass
if
addChild
child
childClass
newInstance
addChild
invoke
parent
new
Object
child
setCurrent
child
name
return
child
addChild
parentOD
getAddConfiguredMethod
childClass
if
addChild
child
childClass
newInstance
setCurrent
child
name
return
child
else
addChild
parentOD
getCreateMethod
name
if
addChild
child
addChild
invoke
parent
new
Object
setCurrent
child
name
return
child
addChild
parentOD
getAddMethod
name
if
addChild
childClass
addChild
getParameterTypes
child
childClass
newInstance
addChild
invoke
parent
new
Object
child
setCurrent
child
name
return
child
addChild
parentOD
getAddConfiguredMethod
name
if
addChild
childClass
addChild
getParameterTypes
child
childClass
newInstance
setCurrent
child
name
return
child
catch
InstantiationException
ex
throw
new
IllegalArgumentException
childClass
name
parent
getClass
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
name
parent
getClass
iae
initCause
ex
throw
iae
throw
new
IllegalArgumentException
name
parent
getClass
public
void
setAttribute
String
attributeName
String
value
if
_objectStack
isEmpty
throw
new
IllegalStateException
ObjectDescriptor
od
ObjectDescriptor
_objectStack
peek
Method
m
od
getSetMethod
attributeName
if
m
throw
new
IllegalArgumentException
attributeName
od
getObject
getClass
Object
convertedValue
Class
paramClass
m
getParameterTypes
try
if
paramClass
equals
String
class
convertedValue
value
else
if
paramClass
equals
Boolean
class
paramClass
equals
boolean
class
convertedValue
Boolean
valueOf
TRUE_VALUES
contains
value
else
if
paramClass
equals
Character
class
paramClass
equals
char
class
convertedValue
new
Character
value
length
value
charAt
else
if
paramClass
equals
Short
class
paramClass
equals
short
class
convertedValue
Short
valueOf
value
else
if
paramClass
equals
Integer
class
paramClass
equals
int
class
convertedValue
Integer
valueOf
value
else
if
paramClass
equals
Long
class
paramClass
equals
long
class
convertedValue
Long
valueOf
value
else
if
paramClass
equals
Class
class
convertedValue
Class
forName
value
else
convertedValue
paramClass
getConstructor
new
Class
String
class
newInstance
new
Object
value
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
value
paramClass
attributeName
od
getObject
getClass
iae
initCause
ex
throw
iae
try
m
invoke
od
getObject
new
Object
convertedValue
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
attributeName
convertedValue
od
getObject
getClass
iae
initCause
ex
throw
iae
public
void
addText
String
text
if
_objectStack
isEmpty
throw
new
IllegalStateException
ObjectDescriptor
od
ObjectDescriptor
_objectStack
peek
try
od
getObject
getClass
getMethod
new
Class
String
class
invoke
od
getObject
new
Object
text
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
od
getObject
getClass
iae
initCause
ex
throw
iae
public
Object
endCreateChild
if
_objectStack
isEmpty
throw
new
IllegalStateException
ObjectDescriptor
od
ObjectDescriptor
_objectStack
pop
if
_objectStack
isEmpty
_objectStack
push
od
throw
new
IllegalStateException
ObjectDescriptor
parentOD
ObjectDescriptor
_objectStack
peek
String
name
od
getObjectName
Class
childClass
Class
_typedefs
get
name
Method
m
if
childClass
m
parentOD
getAddConfiguredMethod
childClass
else
m
parentOD
getAddConfiguredMethod
name
try
if
m
m
invoke
parentOD
getObject
new
Object
od
getObject
return
od
getObject
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
name
parentOD
getObject
getClass
iae
initCause
ex
throw
iae
public
Object
getCurrent
return
_objectStack
isEmpty
ObjectDescriptor
_objectStack
peek
getObject
public
int
getDepth
return
_objectStack
size
