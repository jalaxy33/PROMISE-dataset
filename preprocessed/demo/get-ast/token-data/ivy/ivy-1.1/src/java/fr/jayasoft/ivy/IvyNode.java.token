package
fr
jayasoft
ivy
import
java
text
ParseException
import
java
util
ArrayList
import
java
util
Arrays
import
java
util
Collection
import
java
util
Collections
import
java
util
HashMap
import
java
util
HashSet
import
java
util
Iterator
import
java
util
LinkedHashSet
import
java
util
Map
import
java
util
Set
import
java
util
regex
Pattern
import
fr
jayasoft
ivy
util
Message
public
class
IvyNode
public
static
class
EvictionData
private
IvyNode
_node
private
ConflictManager
_conflictManager
private
Collection
_selected
private
String
_rootModuleConf
public
EvictionData
String
rootModuleConf
IvyNode
node
ConflictManager
conflictManager
Collection
selected
_rootModuleConf
rootModuleConf
_node
node
_conflictManager
conflictManager
_selected
selected
public
String
toString
return
_selected
_node
_conflictManager
_rootModuleConf
public
ConflictManager
getConflictManager
return
_conflictManager
public
IvyNode
getNode
return
_node
public
Collection
getSelected
return
_selected
public
String
getRootModuleConf
return
_rootModuleConf
public
static
class
Caller
private
ModuleRevisionId
_mrid
private
Map
_confs
new
HashMap
private
ModuleRevisionId
_askedDependencyId
public
Caller
ModuleRevisionId
mrid
ModuleRevisionId
askedDependencyId
_mrid
mrid
_askedDependencyId
askedDependencyId
public
void
addConfiguration
String
callerConf
String
dependencyConfs
String
prevDepConfs
String
_confs
get
callerConf
if
prevDepConfs
Set
newDepConfs
new
HashSet
Arrays
asList
prevDepConfs
newDepConfs
addAll
Arrays
asList
dependencyConfs
_confs
put
callerConf
String
newDepConfs
toArray
new
String
newDepConfs
size
else
_confs
put
callerConf
dependencyConfs
public
String
getCallerConfigurations
return
String
_confs
keySet
toArray
new
String
_confs
keySet
size
public
ModuleRevisionId
getModuleRevisionId
return
_mrid
public
boolean
equals
Object
obj
if
obj
instanceof
Caller
return
Caller
other
Caller
obj
return
other
_confs
equals
_confs
_mrid
equals
other
_mrid
public
int
hashCode
int
hash
hash
hash
_confs
hashCode
hash
hash
_mrid
hashCode
return
hash
public
String
toString
return
_mrid
toString
public
ModuleRevisionId
getAskedDependencyId
return
_askedDependencyId
private
static
final
class
NodeConf
private
IvyNode
_node
private
String
_conf
public
NodeConf
IvyNode
node
String
conf
_node
node
_conf
conf
public
final
String
getConf
return
_conf
public
final
IvyNode
getNode
return
_node
public
boolean
equals
Object
obj
if
obj
instanceof
NodeConf
return
return
getNode
equals
NodeConf
obj
getNode
getConf
equals
NodeConf
obj
getConf
public
int
hashCode
int
hash
hash
getNode
hashCode
hash
getConf
hashCode
return
hash
private
static
final
class
ModuleIdConf
private
ModuleId
_moduleId
private
String
_conf
public
ModuleIdConf
ModuleId
mid
String
conf
_moduleId
mid
_conf
conf
public
final
String
getConf
return
_conf
public
final
ModuleId
getModuleId
return
_moduleId
public
boolean
equals
Object
obj
if
obj
instanceof
ModuleIdConf
return
return
getModuleId
equals
ModuleIdConf
obj
getModuleId
getConf
equals
ModuleIdConf
obj
getConf
public
int
hashCode
int
hash
hash
getModuleId
hashCode
hash
getConf
hashCode
return
hash
private
ModuleRevisionId
_id
private
IvyNode
_parent
private
String
_parentConf
private
String
_rootModuleConf
private
Map
_selected
new
HashMap
private
Map
_evicted
new
HashMap
private
Map
_callersByRootConf
new
HashMap
private
Map
_rootModuleConfs
new
HashMap
private
Map
_dependencyArtifactsIncludes
new
HashMap
private
Map
_dependencyArtifactsExcludes
new
HashMap
private
ResolveData
_data
private
Collection
_confsToFetch
new
HashSet
private
Collection
_fetchedConfigurations
new
HashSet
private
DependencyDescriptor
_dd
private
ModuleDescriptor
_md
private
ResolvedModuleRevision
_module
private
Exception
_problem
private
boolean
_downloaded
private
boolean
_searched
private
Map
_requiredConfs
new
HashMap
public
IvyNode
ResolveData
data
DependencyDescriptor
dd
_id
dd
getDependencyRevisionId
_dd
dd
init
data
public
IvyNode
ResolveData
data
ModuleDescriptor
md
String
conf
_id
md
getModuleRevisionId
_md
md
_confsToFetch
add
conf
init
data
private
void
init
ResolveData
data
boolean
register
_data
data
if
register
_data
register
this
public
ConflictManager
getConflictManager
ModuleId
mid
if
_md
throw
new
IllegalStateException
ConflictManager
cm
_md
getConflictManager
mid
return
cm
_data
getIvy
getDefaultConflictManager
cm
public
Collection
getResolvedNodes
ModuleId
mid
String
rootModuleConf
Collection
resolved
Collection
_selected
get
new
ModuleIdConf
mid
rootModuleConf
Set
ret
new
HashSet
if
resolved
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
ret
add
node
getRealNode
return
ret
public
Collection
getResolvedRevisions
ModuleId
mid
String
rootModuleConf
Collection
resolved
Collection
_selected
get
new
ModuleIdConf
mid
rootModuleConf
if
resolved
return
new
HashSet
else
Collection
ret
new
HashSet
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
ret
add
node
getRealNode
getId
return
ret
public
void
setResolvedNodes
ModuleId
moduleId
String
rootModuleConf
Collection
resolved
_selected
put
new
ModuleIdConf
moduleId
rootModuleConf
new
HashSet
resolved
public
boolean
isEvicted
String
rootModuleConf
cleanEvicted
return
_evicted
containsKey
rootModuleConf
private
void
cleanEvicted
for
Iterator
iter
_evicted
keySet
iterator
iter
hasNext
String
rootModuleConf
String
iter
next
EvictionData
ed
EvictionData
_evicted
get
rootModuleConf
Collection
sel
ed
getSelected
for
Iterator
iterator
sel
iterator
iterator
hasNext
IvyNode
n
IvyNode
iterator
next
if
n
getRealNode
equals
this
iter
remove
public
void
markSelected
String
rootModuleConf
_evicted
remove
rootModuleConf
public
void
markEvicted
String
rootModuleConf
IvyNode
node
ConflictManager
conflictManager
Collection
resolved
_evicted
put
rootModuleConf
new
EvictionData
rootModuleConf
node
conflictManager
resolved
if
_rootModuleConfs
keySet
contains
rootModuleConf
_rootModuleConfs
put
rootModuleConf
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
selected
IvyNode
iter
next
selected
updateDataFrom
this
rootModuleConf
private
void
updateDataFrom
IvyNode
node
String
rootModuleConf
Map
nodecallers
Map
node
_callersByRootConf
get
rootModuleConf
if
nodecallers
Map
thiscallers
Map
_callersByRootConf
get
rootModuleConf
if
thiscallers
thiscallers
new
HashMap
_callersByRootConf
put
rootModuleConf
thiscallers
for
Iterator
iter
nodecallers
values
iterator
iter
hasNext
Caller
caller
Caller
iter
next
if
thiscallers
containsKey
caller
getModuleRevisionId
thiscallers
put
caller
getModuleRevisionId
caller
updateMapOfSet
node
_requiredConfs
_requiredConfs
updateMapOfSetForKey
node
_rootModuleConfs
_rootModuleConfs
rootModuleConf
updateMapOfSetForKey
node
_dependencyArtifactsIncludes
_dependencyArtifactsIncludes
rootModuleConf
updateMapOfSetForKey
node
_dependencyArtifactsExcludes
_dependencyArtifactsExcludes
rootModuleConf
updateConfsToFetch
node
_fetchedConfigurations
updateConfsToFetch
node
_confsToFetch
private
void
updateMapOfSet
Map
from
Map
to
for
Iterator
iter
from
keySet
iterator
iter
hasNext
Object
key
iter
next
updateMapOfSetForKey
from
to
key
private
void
updateMapOfSetForKey
Map
from
Map
to
Object
key
Set
set
Set
from
get
key
if
set
Set
toupdate
Set
to
get
key
if
toupdate
toupdate
addAll
set
else
to
put
key
new
HashSet
set
public
EvictionData
getEvictedData
String
rootModuleConf
cleanEvicted
return
EvictionData
_evicted
get
rootModuleConf
public
String
getEvictedConfs
cleanEvicted
return
String
_evicted
keySet
toArray
new
String
_evicted
keySet
size
public
boolean
isCompletelyEvicted
cleanEvicted
return
_evicted
keySet
containsAll
_rootModuleConfs
keySet
public
Collection
getAllEvictingNodes
Collection
allEvictingNodes
new
HashSet
for
Iterator
iter
_evicted
values
iterator
iter
hasNext
EvictionData
ed
EvictionData
iter
next
allEvictingNodes
addAll
ed
getSelected
return
allEvictingNodes
public
IvyNode
getParent
return
_parent
public
void
setParent
IvyNode
parent
_parent
parent
public
String
getParentConf
return
_parentConf
public
void
setParentConf
String
parentConf
_parentConf
parentConf
public
boolean
hasConfigurationsToLoad
return
_confsToFetch
isEmpty
public
boolean
loadData
String
conf
boolean
loaded
_md
if
isEvicted
_rootModuleConf
hasConfigurationsToLoad
hasProblem
if
_md
DependencyResolver
resolver
_data
getIvy
getResolver
getModuleId
try
Message
debug
resolver
getId
_module
resolver
getDependency
_dd
_data
if
_module
if
getId
isExactRevision
IvyNode
resolved
_data
getNode
_module
getId
if
resolved
resolved
_downloaded
_module
isDownloaded
resolved
_searched
_module
isSearched
resolved
markSelected
_rootModuleConf
resolved
updateDataFrom
this
_rootModuleConf
resolved
loadData
conf
if
_dd
resolved
addDependencyArtifactsIncludes
_rootModuleConf
_dd
getDependencyArtifactsIncludes
getParentConf
resolved
addDependencyArtifactsExcludes
_rootModuleConf
_dd
getDependencyArtifactsExcludes
getParentConf
_data
register
getId
resolved
return
_downloaded
_module
isDownloaded
_searched
_module
isSearched
else
Message
warn
getId
resolver
reportFailure
_problem
new
RuntimeException
catch
ParseException
e
_problem
e
if
_module
_data
getReport
addDependency
this
return
else
loaded
if
getId
isExactRevision
Message
info
_module
getId
getRevision
getId
_md
_module
getDescriptor
if
getId
isExactRevision
_data
register
_module
getId
this
_confsToFetch
remove
updateConfsToFetch
Arrays
asList
resolveSpecialConfigurations
getRequiredConfigurations
getParent
getParentConf
this
if
hasProblem
_data
getReport
addDependency
this
return
loaded
if
equals
conf
if
_md
_fetchedConfigurations
addAll
Arrays
asList
_md
getConfigurationsNames
_confsToFetch
clear
addRootModuleConfigurations
_rootModuleConf
_md
getConfigurationsNames
else
if
loaded
_fetchedConfigurations
add
conf
_confsToFetch
remove
conf
addRootModuleConfigurations
_rootModuleConf
new
String
conf
if
_dd
addDependencyArtifactsIncludes
_rootModuleConf
_dd
getDependencyArtifactsIncludes
getParentConf
addDependencyArtifactsExcludes
_rootModuleConf
_dd
getDependencyArtifactsExcludes
getParentConf
return
loaded
public
IvyNode
getRealNode
IvyNode
node
_data
getNode
getId
return
node
this
node
public
Collection
getDependencies
String
confs
if
_md
throw
new
IllegalStateException
if
Arrays
asList
confs
contains
confs
_md
getConfigurationsNames
Collection
deps
new
HashSet
for
int
i
i
confs
length
i
deps
addAll
getDependencies
confs
i
return
deps
public
Collection
getDependencies
String
conf
boolean
traverse
if
_md
throw
new
IllegalStateException
DependencyDescriptor
dds
_md
getDependencies
Collection
dependencies
new
LinkedHashSet
for
int
i
i
dds
length
i
DependencyDescriptor
dd
dds
i
String
dependencyConfigurations
dd
getDependencyConfigurations
conf
if
dependencyConfigurations
length
continue
IvyNode
depNode
_data
getNode
dd
getDependencyRevisionId
if
depNode
depNode
new
IvyNode
_data
dd
else
if
depNode
hasProblem
Collection
confs
Arrays
asList
resolveSpecialConfigurations
dependencyConfigurations
depNode
depNode
updateConfsToFetch
confs
depNode
setRequiredConfs
this
conf
confs
depNode
addCaller
_rootModuleConf
_md
getModuleRevisionId
conf
dependencyConfigurations
dd
getDependencyRevisionId
dependencies
add
depNode
if
traverse
depNode
setParent
this
depNode
setParentConf
conf
depNode
setRootModuleConf
getRootModuleConf
depNode
_data
_data
return
dependencies
public
ModuleRevisionId
getId
return
_id
public
void
updateConfsToFetch
Collection
confs
_confsToFetch
addAll
confs
_confsToFetch
removeAll
_fetchedConfigurations
public
ModuleId
getModuleId
return
_id
getModuleId
private
String
resolveSpecialConfigurations
String
dependencyConfigurations
IvyNode
node
if
dependencyConfigurations
length
equals
dependencyConfigurations
node
node
isLoaded
return
node
getDescriptor
getConfigurationsNames
return
dependencyConfigurations
public
boolean
isLoaded
return
_md
public
ModuleDescriptor
getDescriptor
return
_md
public
String
getRequiredConfigurations
IvyNode
in
String
inConf
Collection
req
Collection
_requiredConfs
get
new
NodeConf
in
inConf
return
req
new
String
String
req
toArray
new
String
req
size
public
String
getRequiredConfigurations
Collection
required
new
ArrayList
_confsToFetch
size
_fetchedConfigurations
size
required
addAll
_fetchedConfigurations
required
addAll
_confsToFetch
return
String
required
toArray
new
String
required
size
private
void
setRequiredConfs
IvyNode
parent
String
parentConf
Collection
confs
_requiredConfs
put
new
NodeConf
parent
parentConf
new
HashSet
confs
public
Configuration
getConfiguration
String
conf
if
_md
throw
new
IllegalStateException
return
_md
getConfiguration
conf
public
ResolvedModuleRevision
getModuleRevision
return
_module
public
void
addCaller
String
rootModuleConf
ModuleRevisionId
mrid
String
callerConf
String
dependencyConfs
ModuleRevisionId
askedDependencyId
Map
callers
Map
_callersByRootConf
get
rootModuleConf
if
callers
callers
new
HashMap
_callersByRootConf
put
rootModuleConf
callers
Caller
caller
Caller
callers
get
mrid
if
caller
caller
new
Caller
mrid
askedDependencyId
callers
put
mrid
caller
caller
addConfiguration
callerConf
dependencyConfs
public
Caller
getCallers
String
rootModuleConf
Map
callers
Map
_callersByRootConf
get
rootModuleConf
if
callers
return
new
Caller
return
Caller
callers
values
toArray
new
Caller
callers
values
size
public
String
toString
return
getResolvedId
toString
public
boolean
equals
Object
obj
if
obj
instanceof
IvyNode
return
IvyNode
node
IvyNode
obj
return
node
getId
equals
getId
public
int
hashCode
return
getId
hashCode
public
String
getConfigurations
String
rootModuleConf
Set
depConfs
Set
_rootModuleConfs
get
rootModuleConf
if
depConfs
return
new
String
return
String
depConfs
toArray
new
String
depConfs
size
private
void
addRootModuleConfigurations
String
rootModuleConf
String
dependencyConfs
Set
depConfs
Set
_rootModuleConfs
get
rootModuleConf
if
depConfs
depConfs
new
HashSet
_rootModuleConfs
put
rootModuleConf
depConfs
if
_md
for
int
i
i
dependencyConfs
length
i
Configuration
conf
_md
getConfiguration
dependencyConfs
i
if
conf
String
exts
conf
getExtends
addRootModuleConfigurations
rootModuleConf
exts
depConfs
add
conf
getName
else
Message
warn
getId
dependencyConfs
i
else
for
int
i
i
dependencyConfs
length
i
depConfs
add
dependencyConfs
i
public
String
getRootModuleConfigurations
return
String
_rootModuleConfs
keySet
toArray
new
String
_rootModuleConfs
size
public
Artifact
getAllArtifacts
Set
ret
new
HashSet
for
Iterator
it
_rootModuleConfs
keySet
iterator
it
hasNext
String
rootModuleConf
String
it
next
ret
addAll
Arrays
asList
getArtifacts
rootModuleConf
return
Artifact
ret
toArray
new
Artifact
ret
size
public
Artifact
getSelectedArtifacts
Set
ret
new
HashSet
for
Iterator
it
_rootModuleConfs
keySet
iterator
it
hasNext
String
rootModuleConf
String
it
next
if
isEvicted
rootModuleConf
ret
addAll
Arrays
asList
getArtifacts
rootModuleConf
return
Artifact
ret
toArray
new
Artifact
ret
size
public
Artifact
getArtifacts
String
rootModuleConf
Set
confs
Set
_rootModuleConfs
get
rootModuleConf
if
confs
return
new
Artifact
Set
artifacts
new
HashSet
Set
includes
Set
_dependencyArtifactsIncludes
get
rootModuleConf
if
_md
isDefault
includes
includes
isEmpty
for
Iterator
it
includes
iterator
it
hasNext
DependencyArtifactDescriptor
dad
DependencyArtifactDescriptor
it
next
artifacts
add
new
MDArtifact
_md
dad
getName
dad
getType
dad
getExt
else
if
includes
includes
isEmpty
for
Iterator
iter
confs
iterator
iter
hasNext
String
conf
String
iter
next
artifacts
addAll
Arrays
asList
_md
getArtifacts
conf
else
Map
allArtifacts
new
HashMap
for
Iterator
iter
confs
iterator
iter
hasNext
String
conf
String
iter
next
Artifact
arts
_md
getArtifacts
conf
for
int
i
i
arts
length
i
allArtifacts
put
arts
i
getId
getArtifactId
arts
i
for
Iterator
it
includes
iterator
it
hasNext
DependencyArtifactDescriptor
dad
DependencyArtifactDescriptor
it
next
Collection
arts
findArtifactsMatching
dad
getId
allArtifacts
if
arts
isEmpty
Message
error
dad
getId
it
remove
else
Message
debug
this
rootModuleConf
arts
artifacts
addAll
arts
Set
excludes
Set
_dependencyArtifactsExcludes
get
rootModuleConf
if
excludes
for
Iterator
it
excludes
iterator
it
hasNext
DependencyArtifactDescriptor
dad
DependencyArtifactDescriptor
it
next
for
Iterator
iter
artifacts
iterator
iter
hasNext
Artifact
artifact
Artifact
iter
next
if
artifactIdMatch
dad
getId
artifact
getId
getArtifactId
Message
debug
this
rootModuleConf
artifact
iter
remove
return
Artifact
artifacts
toArray
new
Artifact
artifacts
size
private
Collection
findArtifactsMatching
ArtifactId
id
Map
allArtifacts
Artifact
art
Artifact
allArtifacts
get
id
if
art
return
Collections
singleton
art
Collection
ret
new
ArrayList
for
Iterator
iter
allArtifacts
keySet
iterator
iter
hasNext
ArtifactId
aid
ArtifactId
iter
next
if
artifactIdMatch
id
aid
ret
add
allArtifacts
get
aid
return
ret
private
boolean
artifactIdMatch
ArtifactId
id
ArtifactId
aid
if
aid
equals
id
return
return
stringMatch
id
getModuleId
getOrganisation
aid
getModuleId
getOrganisation
stringMatch
id
getModuleId
getName
aid
getModuleId
getName
stringMatch
id
getName
aid
getName
stringMatch
id
getExt
aid
getExt
stringMatch
id
getType
aid
getType
private
boolean
stringMatch
String
pattern
String
test
if
test
equals
pattern
return
return
Pattern
matches
pattern
test
private
void
addDependencyArtifactsIncludes
String
rootModuleConf
DependencyArtifactDescriptor
dependencyArtifacts
addDependencyArtifacts
rootModuleConf
dependencyArtifacts
_dependencyArtifactsIncludes
private
void
addDependencyArtifactsExcludes
String
rootModuleConf
DependencyArtifactDescriptor
dependencyArtifacts
addDependencyArtifacts
rootModuleConf
dependencyArtifacts
_dependencyArtifactsExcludes
private
void
addDependencyArtifacts
String
rootModuleConf
DependencyArtifactDescriptor
dependencyArtifacts
Map
artifactsMap
Set
depArtifacts
Set
artifactsMap
get
rootModuleConf
if
depArtifacts
depArtifacts
new
HashSet
artifactsMap
put
rootModuleConf
depArtifacts
depArtifacts
addAll
Arrays
asList
dependencyArtifacts
public
long
getPublication
if
_module
return
_module
getPublicationDate
getTime
return
public
DependencyDescriptor
getDependencyDescriptor
return
_dd
public
boolean
hasProblem
return
_problem
public
ModuleRevisionId
getResolvedId
if
_md
_md
getResolvedModuleRevisionId
getRevision
return
_md
getResolvedModuleRevisionId
else
if
_module
return
_module
getId
else
return
getId
public
Exception
getProblem
return
_problem
public
boolean
isDownloaded
return
_downloaded
public
boolean
isSearched
return
_searched
public
String
getRootModuleConf
return
_rootModuleConf
public
void
setRootModuleConf
String
rootModuleConf
if
rootModuleConf
rootModuleConf
equals
_rootModuleConf
_selected
put
new
ModuleIdConf
_id
getModuleId
rootModuleConf
Collections
singleton
this
_rootModuleConf
rootModuleConf
public
String
getConfsToFetch
return
String
_confsToFetch
toArray
new
String
_confsToFetch
size
public
boolean
isCircular
return
isCircular
this
private
boolean
isCircular
IvyNode
node
boolean
isCircular
IvyNode
Caller
callers
node
getCallers
getRootModuleConf
for
int
i
i
callers
length
isCircular
i
ModuleRevisionId
mrid
callers
i
getModuleRevisionId
if
getId
equals
mrid
return
IvyNode
parent
_data
getNode
mrid
if
parent
isCircular
isCircular
parent
return
isCircular
