package
fr
jayasoft
ivy
ant
import
java
io
File
import
java
util
ArrayList
import
java
util
Collection
import
java
util
Collections
import
java
util
HashMap
import
java
util
HashSet
import
java
util
Iterator
import
java
util
List
import
java
util
ListIterator
import
java
util
Map
import
java
util
Set
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
DirectoryScanner
import
org
apache
tools
ant
types
FileList
import
org
apache
tools
ant
types
FileSet
import
org
apache
tools
ant
types
Path
import
fr
jayasoft
ivy
DependencyDescriptor
import
fr
jayasoft
ivy
Ivy
import
fr
jayasoft
ivy
ModuleDescriptor
import
fr
jayasoft
ivy
ModuleId
import
fr
jayasoft
ivy
parser
ModuleDescriptorParserRegistry
import
fr
jayasoft
ivy
util
Message
public
class
IvyBuildList
extends
IvyTask
private
List
_buildFiles
new
ArrayList
private
String
_reference
private
boolean
_haltOnError
private
boolean
_skipBuildWithoutIvy
private
boolean
_reverse
private
String
_ivyFilePath
private
String
_root
private
boolean
_excludeRoot
private
String
_leaf
private
boolean
_excludeLeaf
public
void
addFileset
FileSet
buildFiles
_buildFiles
add
buildFiles
public
String
getReference
return
_reference
public
void
setReference
String
reference
_reference
reference
public
String
getRoot
return
_root
public
void
setRoot
String
root
_root
root
public
boolean
isExcludeRoot
return
_excludeRoot
public
void
setExcludeRoot
boolean
root
_excludeRoot
root
public
String
getLeaf
return
_leaf
public
void
setLeaf
String
leaf
_leaf
leaf
public
boolean
isExcludeLeaf
return
_excludeLeaf
public
void
setExcludeLeaf
boolean
excludeLeaf
_excludeLeaf
excludeLeaf
public
void
execute
throws
BuildException
if
_reference
throw
new
BuildException
if
_buildFiles
isEmpty
throw
new
BuildException
Ivy
ivy
getIvyInstance
_ivyFilePath
getProperty
_ivyFilePath
ivy
Path
path
new
Path
getProject
Map
buildFiles
new
HashMap
Collection
mds
new
ArrayList
List
independent
new
ArrayList
ModuleDescriptor
rootModuleDescriptor
ModuleDescriptor
leafModuleDescriptor
for
ListIterator
iter
_buildFiles
listIterator
iter
hasNext
FileSet
fs
FileSet
iter
next
DirectoryScanner
ds
fs
getDirectoryScanner
getProject
String
builds
ds
getIncludedFiles
for
int
i
i
builds
length
i
File
buildFile
new
File
ds
getBasedir
builds
i
File
ivyFile
getIvyFileFor
buildFile
if
ivyFile
exists
if
_skipBuildWithoutIvy
Message
debug
buildFile
ivyFile
else
Message
verbose
buildFile
ivyFile
Message
verbose
independent
add
buildFile
else
try
ModuleDescriptor
md
ModuleDescriptorParserRegistry
getInstance
parseDescriptor
ivy
ivyFile
toURL
doValidate
ivy
buildFiles
put
md
buildFile
mds
add
md
if
_root
equals
md
getModuleRevisionId
getName
rootModuleDescriptor
md
if
_leaf
equals
md
getModuleRevisionId
getName
leafModuleDescriptor
md
catch
Exception
ex
if
_haltOnError
throw
new
BuildException
buildFile
ivyFile
ex
ex
else
Message
warn
buildFile
ivyFile
ex
getMessage
Message
info
independent
add
buildFile
if
equals
_root
rootModuleDescriptor
throw
new
BuildException
_root
if
equals
_leaf
leafModuleDescriptor
throw
new
BuildException
_leaf
if
rootModuleDescriptor
Message
info
rootModuleDescriptor
getModuleRevisionId
getName
mds
filterModulesFromRoot
mds
rootModuleDescriptor
if
leafModuleDescriptor
Message
info
leafModuleDescriptor
getModuleRevisionId
getName
mds
filterModulesFromLeaf
mds
leafModuleDescriptor
List
sortedModules
ivy
sortModuleDescriptors
mds
for
ListIterator
iter
independent
listIterator
iter
hasNext
File
buildFile
File
iter
next
addBuildFile
path
buildFile
if
isReverse
Collections
reverse
sortedModules
StringBuffer
order
new
StringBuffer
for
ListIterator
iter
sortedModules
listIterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
order
append
md
getModuleRevisionId
getModuleId
if
iter
hasNext
order
append
File
buildFile
File
buildFiles
get
md
addBuildFile
path
buildFile
getProject
addReference
getReference
path
getProject
setProperty
order
toString
private
Collection
filterModulesFromRoot
Collection
mds
ModuleDescriptor
rootmd
Map
moduleIdMap
new
HashMap
for
Iterator
iter
mds
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
moduleIdMap
put
md
getModuleRevisionId
getModuleId
md
Set
toKeep
new
HashSet
processFilterNodeFromRoot
rootmd
toKeep
moduleIdMap
if
_excludeRoot
Message
verbose
rootmd
getModuleRevisionId
getModuleId
getName
toKeep
remove
rootmd
for
Iterator
iter
toKeep
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
Message
verbose
md
getModuleRevisionId
getModuleId
getName
return
toKeep
private
void
processFilterNodeFromRoot
ModuleDescriptor
node
Set
toKeep
Map
moduleIdMap
toKeep
add
node
DependencyDescriptor
deps
node
getDependencies
for
int
i
i
deps
length
i
ModuleId
id
deps
i
getDependencyId
if
moduleIdMap
get
id
processFilterNodeFromRoot
ModuleDescriptor
moduleIdMap
get
id
toKeep
moduleIdMap
private
Collection
filterModulesFromLeaf
Collection
mds
ModuleDescriptor
leafmd
Map
moduleIdMap
new
HashMap
for
Iterator
iter
mds
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
moduleIdMap
put
md
getModuleRevisionId
getModuleId
md
Set
toKeep
new
HashSet
if
_excludeLeaf
Message
verbose
leafmd
getModuleRevisionId
getModuleId
getName
else
toKeep
add
leafmd
processFilterNodeFromLeaf
leafmd
toKeep
moduleIdMap
for
Iterator
iter
toKeep
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
Message
verbose
md
getModuleRevisionId
getModuleId
getName
return
toKeep
private
void
processFilterNodeFromLeaf
ModuleDescriptor
node
Set
toKeep
Map
moduleIdMap
for
Iterator
iter
moduleIdMap
values
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
DependencyDescriptor
deps
md
getDependencies
for
int
i
i
deps
length
i
ModuleId
id
deps
i
getDependencyId
if
node
getModuleRevisionId
getModuleId
equals
id
toKeep
contains
md
toKeep
add
md
processFilterNodeFromLeaf
md
toKeep
moduleIdMap
private
void
addBuildFile
Path
path
File
buildFile
FileList
fl
new
FileList
fl
setDir
buildFile
getParentFile
FileList
FileName
fileName
new
FileList
FileName
fileName
setName
buildFile
getName
fl
addConfiguredFile
fileName
path
addFilelist
fl
private
File
getIvyFileFor
File
buildFile
return
new
File
buildFile
getParentFile
_ivyFilePath
public
boolean
isHaltonerror
return
_haltOnError
public
void
setHaltonerror
boolean
haltOnError
_haltOnError
haltOnError
public
String
getIvyfilepath
return
_ivyFilePath
public
void
setIvyfilepath
String
ivyFilePath
_ivyFilePath
ivyFilePath
public
boolean
isSkipbuildwithoutivy
return
_skipBuildWithoutIvy
public
void
setSkipbuildwithoutivy
boolean
skipBuildFilesWithoutIvy
_skipBuildWithoutIvy
skipBuildFilesWithoutIvy
public
boolean
isReverse
return
_reverse
public
void
setReverse
boolean
reverse
_reverse
reverse
