package
fr
jayasoft
ivy
import
java
util
ArrayList
import
java
util
Arrays
import
java
util
Collection
import
java
util
Collections
import
java
util
HashMap
import
java
util
HashSet
import
java
util
Iterator
import
java
util
LinkedHashSet
import
java
util
LinkedList
import
java
util
List
import
java
util
Map
import
java
util
Set
import
java
util
Stack
import
java
util
regex
Matcher
import
java
util
regex
Pattern
import
fr
jayasoft
ivy
event
resolve
EndResolveDependencyEvent
import
fr
jayasoft
ivy
event
resolve
StartResolveDependencyEvent
import
fr
jayasoft
ivy
filter
Filter
import
fr
jayasoft
ivy
filter
FilterHelper
import
fr
jayasoft
ivy
matcher
MatcherHelper
import
fr
jayasoft
ivy
util
Message
public
class
IvyNode
private
static
final
Pattern
FALLBACK_CONF_PATTERN
Pattern
compile
public
static
class
EvictionData
private
IvyNode
_node
private
ConflictManager
_conflictManager
private
Collection
_selected
private
String
_rootModuleConf
public
EvictionData
String
rootModuleConf
IvyNode
node
ConflictManager
conflictManager
Collection
selected
_rootModuleConf
rootModuleConf
_node
node
_conflictManager
conflictManager
_selected
selected
public
String
toString
if
_selected
return
_selected
_node
_conflictManager
_rootModuleConf
else
return
_rootModuleConf
public
ConflictManager
getConflictManager
return
_conflictManager
public
IvyNode
getNode
return
_node
public
Collection
getSelected
return
_selected
public
String
getRootModuleConf
return
_rootModuleConf
public
class
Caller
private
ModuleDescriptor
_md
private
ModuleRevisionId
_mrid
private
Map
_confs
new
HashMap
private
DependencyDescriptor
_dd
private
boolean
_callerCanExclude
public
Caller
ModuleDescriptor
md
ModuleRevisionId
mrid
DependencyDescriptor
dd
boolean
callerCanExclude
_md
md
_mrid
mrid
_dd
dd
_callerCanExclude
callerCanExclude
public
void
addConfiguration
String
callerConf
String
dependencyConfs
String
prevDepConfs
String
_confs
get
callerConf
if
prevDepConfs
Set
newDepConfs
new
HashSet
Arrays
asList
prevDepConfs
newDepConfs
addAll
Arrays
asList
dependencyConfs
_confs
put
callerConf
String
newDepConfs
toArray
new
String
newDepConfs
size
else
_confs
put
callerConf
dependencyConfs
public
String
getCallerConfigurations
return
String
_confs
keySet
toArray
new
String
_confs
keySet
size
public
ModuleRevisionId
getModuleRevisionId
return
_mrid
public
boolean
equals
Object
obj
if
obj
instanceof
Caller
return
Caller
other
Caller
obj
return
other
_confs
equals
_confs
_mrid
equals
other
_mrid
public
int
hashCode
int
hash
hash
hash
_confs
hashCode
hash
hash
_mrid
hashCode
return
hash
public
String
toString
return
_mrid
toString
public
ModuleRevisionId
getAskedDependencyId
return
_dd
getDependencyRevisionId
public
ModuleDescriptor
getModuleDescriptor
return
_md
public
boolean
canExclude
return
_callerCanExclude
_dd
canExclude
public
DependencyDescriptor
getDependencyDescriptor
return
_dd
private
static
final
class
NodeConf
private
IvyNode
_node
private
String
_conf
public
NodeConf
IvyNode
node
String
conf
_node
node
_conf
conf
public
final
String
getConf
return
_conf
public
final
IvyNode
getNode
return
_node
public
boolean
equals
Object
obj
if
obj
instanceof
NodeConf
return
return
getNode
equals
NodeConf
obj
getNode
getConf
equals
NodeConf
obj
getConf
public
int
hashCode
int
hash
hash
getNode
hashCode
hash
getConf
hashCode
return
hash
private
static
final
class
ModuleIdConf
private
ModuleId
_moduleId
private
String
_conf
public
ModuleIdConf
ModuleId
mid
String
conf
_moduleId
mid
_conf
conf
public
final
String
getConf
return
_conf
public
final
ModuleId
getModuleId
return
_moduleId
public
boolean
equals
Object
obj
if
obj
instanceof
ModuleIdConf
return
return
getModuleId
equals
ModuleIdConf
obj
getModuleId
getConf
equals
ModuleIdConf
obj
getConf
public
int
hashCode
int
hash
hash
getModuleId
hashCode
hash
getConf
hashCode
return
hash
private
ModuleRevisionId
_id
private
IvyNode
_parent
private
IvyNode
_root
private
Collection
_path
private
String
_parentConf
private
String
_rootModuleConf
private
Map
_selectedDeps
new
HashMap
private
Map
_evictedDeps
new
HashMap
private
Map
_evictedRevs
new
HashMap
private
Map
_evicted
new
HashMap
private
Map
_callersByRootConf
new
HashMap
private
Map
_rootModuleConfs
new
HashMap
private
Map
_dependencyArtifactsIncludes
new
HashMap
private
ResolveData
_data
private
Collection
_confsToFetch
new
HashSet
private
Collection
_fetchedConfigurations
new
HashSet
private
Map
_dds
new
HashMap
private
ModuleDescriptor
_md
private
ResolvedModuleRevision
_module
private
Exception
_problem
private
boolean
_downloaded
private
boolean
_searched
private
Map
_requiredConfs
new
HashMap
private
boolean
_isRoot
private
Map
_allCallers
new
HashMap
private
boolean
_isCircular
private
Collection
_loadedRootModuleConfs
new
HashSet
private
Map
_requestedConf
new
HashMap
public
IvyNode
ResolveData
data
IvyNode
parent
DependencyDescriptor
dd
_id
dd
getDependencyRevisionId
_dds
put
parent
dd
_isRoot
init
data
public
IvyNode
ResolveData
data
ModuleDescriptor
md
_id
md
getModuleRevisionId
_md
md
_isRoot
_root
this
init
data
private
void
init
ResolveData
data
boolean
register
_data
data
if
register
_data
register
this
public
ConflictManager
getConflictManager
ModuleId
mid
if
_md
throw
new
IllegalStateException
ConflictManager
cm
_md
getConflictManager
mid
return
cm
_data
getIvy
getDefaultConflictManager
cm
public
Collection
getResolvedNodes
ModuleId
mid
String
rootModuleConf
Collection
resolved
Collection
_selectedDeps
get
new
ModuleIdConf
mid
rootModuleConf
Set
ret
new
HashSet
if
resolved
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
ret
add
node
getRealNode
return
ret
public
Collection
getResolvedRevisions
ModuleId
mid
String
rootModuleConf
Collection
resolved
Collection
_selectedDeps
get
new
ModuleIdConf
mid
rootModuleConf
if
resolved
return
new
HashSet
else
Collection
resolvedRevs
new
HashSet
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
resolvedRevs
add
node
getId
resolvedRevs
add
node
getResolvedId
return
resolvedRevs
public
void
setResolvedNodes
ModuleId
moduleId
String
rootModuleConf
Collection
resolved
ModuleIdConf
moduleIdConf
new
ModuleIdConf
moduleId
rootModuleConf
_selectedDeps
put
moduleIdConf
new
HashSet
resolved
public
Collection
getEvictedNodes
ModuleId
mid
String
rootModuleConf
Collection
resolved
Collection
_evictedDeps
get
new
ModuleIdConf
mid
rootModuleConf
Set
ret
new
HashSet
if
resolved
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
ret
add
node
getRealNode
return
ret
public
Collection
getEvictedRevisions
ModuleId
mid
String
rootModuleConf
Collection
evicted
Collection
_evictedRevs
get
new
ModuleIdConf
mid
rootModuleConf
if
evicted
return
new
HashSet
else
return
new
HashSet
evicted
public
void
setEvictedNodes
ModuleId
moduleId
String
rootModuleConf
Collection
evicted
ModuleIdConf
moduleIdConf
new
ModuleIdConf
moduleId
rootModuleConf
_evictedDeps
put
moduleIdConf
new
HashSet
evicted
Collection
evictedRevs
new
HashSet
for
Iterator
iter
evicted
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
evictedRevs
add
node
getId
evictedRevs
add
node
getResolvedId
_evictedRevs
put
moduleIdConf
evictedRevs
public
boolean
isEvicted
String
rootModuleConf
cleanEvicted
return
getRoot
this
getRoot
getResolvedRevisions
getId
getModuleId
rootModuleConf
contains
getResolvedId
public
boolean
isCompletelyEvicted
cleanEvicted
if
getRoot
this
return
for
Iterator
iter
_rootModuleConfs
keySet
iterator
iter
hasNext
String
conf
String
iter
next
if
isEvicted
conf
return
return
private
void
cleanEvicted
for
Iterator
iter
_evicted
keySet
iterator
iter
hasNext
String
rootModuleConf
String
iter
next
EvictionData
ed
EvictionData
_evicted
get
rootModuleConf
Collection
sel
ed
getSelected
if
sel
for
Iterator
iterator
sel
iterator
iterator
hasNext
IvyNode
n
IvyNode
iterator
next
if
n
getRealNode
equals
this
iter
remove
public
void
markEvicted
String
rootModuleConf
IvyNode
node
ConflictManager
conflictManager
Collection
resolved
EvictionData
evictionData
new
EvictionData
rootModuleConf
node
conflictManager
resolved
markEvicted
evictionData
public
void
markEvicted
EvictionData
evictionData
_evicted
put
evictionData
getRootModuleConf
evictionData
if
_rootModuleConfs
keySet
contains
evictionData
getRootModuleConf
_rootModuleConfs
put
evictionData
getRootModuleConf
if
evictionData
getSelected
for
Iterator
iter
evictionData
getSelected
iterator
iter
hasNext
IvyNode
selected
IvyNode
iter
next
selected
updateDataFrom
this
evictionData
getRootModuleConf
private
void
updateDataFrom
IvyNode
node
String
rootModuleConf
Map
nodecallers
Map
node
_callersByRootConf
get
rootModuleConf
if
nodecallers
Map
thiscallers
Map
_callersByRootConf
get
rootModuleConf
if
thiscallers
thiscallers
new
HashMap
_callersByRootConf
put
rootModuleConf
thiscallers
for
Iterator
iter
nodecallers
values
iterator
iter
hasNext
Caller
caller
Caller
iter
next
if
thiscallers
containsKey
caller
getModuleRevisionId
thiscallers
put
caller
getModuleRevisionId
caller
updateMapOfSet
node
_requiredConfs
_requiredConfs
updateMapOfSetForKey
node
_rootModuleConfs
_rootModuleConfs
rootModuleConf
updateMapOfSetForKey
node
_dependencyArtifactsIncludes
_dependencyArtifactsIncludes
rootModuleConf
updateConfsToFetch
node
_fetchedConfigurations
updateConfsToFetch
node
_confsToFetch
private
void
updateMapOfSet
Map
from
Map
to
for
Iterator
iter
from
keySet
iterator
iter
hasNext
Object
key
iter
next
updateMapOfSetForKey
from
to
key
private
void
updateMapOfSetForKey
Map
from
Map
to
Object
key
Set
set
Set
from
get
key
if
set
Set
toupdate
Set
to
get
key
if
toupdate
toupdate
addAll
set
else
to
put
key
new
HashSet
set
public
EvictionData
getEvictedData
String
rootModuleConf
cleanEvicted
return
EvictionData
_evicted
get
rootModuleConf
public
String
getEvictedConfs
cleanEvicted
return
String
_evicted
keySet
toArray
new
String
_evicted
keySet
size
public
Collection
getAllEvictingNodes
Collection
allEvictingNodes
for
Iterator
iter
_evicted
values
iterator
iter
hasNext
EvictionData
ed
EvictionData
iter
next
Collection
selected
ed
getSelected
if
selected
if
allEvictingNodes
allEvictingNodes
new
HashSet
allEvictingNodes
addAll
selected
return
allEvictingNodes
public
Collection
getAllEvictingConflictManagers
Collection
ret
new
HashSet
for
Iterator
iter
_evicted
values
iterator
iter
hasNext
EvictionData
ed
EvictionData
iter
next
ret
add
ed
getConflictManager
return
ret
public
IvyNode
getParent
return
_parent
public
void
setParent
IvyNode
parent
_parent
parent
_root
_path
public
IvyNode
getRoot
if
_root
_root
computeRoot
return
_root
public
Collection
getPath
if
_path
_path
computePath
return
_path
private
Collection
computePath
if
_parent
Collection
p
new
LinkedHashSet
_parent
getPath
p
add
this
return
p
else
return
Collections
singletonList
this
private
IvyNode
computeRoot
if
isRoot
return
this
else
if
_parent
return
_parent
getRoot
else
return
public
String
getParentConf
return
_parentConf
public
void
setParentConf
String
parentConf
_parentConf
parentConf
public
boolean
hasConfigurationsToLoad
return
_confsToFetch
isEmpty
public
boolean
loadData
String
conf
boolean
shouldBePublic
boolean
loaded
if
isEvicted
_rootModuleConf
hasConfigurationsToLoad
isRootModuleConfLoaded
hasProblem
markRootModuleConfLoaded
if
_md
DependencyResolver
resolver
_data
getIvy
getResolver
getModuleId
if
resolver
Message
error
getModuleId
_problem
new
RuntimeException
getModuleId
_data
getReport
addDependency
this
return
try
Message
debug
resolver
getId
DependencyDescriptor
dependencyDescriptor
getDependencyDescriptor
getParent
_data
getIvy
fireIvyEvent
new
StartResolveDependencyEvent
_data
getIvy
resolver
dependencyDescriptor
_module
resolver
getDependency
dependencyDescriptor
_data
_data
getIvy
fireIvyEvent
new
EndResolveDependencyEvent
_data
getIvy
resolver
dependencyDescriptor
_module
if
_module
_data
getIvy
saveResolver
_data
getCache
_module
getDescriptor
_module
getResolver
getName
_data
getIvy
saveArtResolver
_data
getCache
_module
getDescriptor
_module
getArtifactResolver
getName
if
_data
getIvy
logModuleWhenFound
Message
info
_module
getId
_module
getResolver
getName
else
Message
verbose
_module
getId
_module
getResolver
getName
if
_data
getIvy
getVersionMatcher
isDynamic
getId
if
_data
getIvy
getVersionMatcher
isDynamic
_module
getId
Message
error
getId
_problem
new
RuntimeException
_data
getReport
addDependency
this
return
IvyNode
resolved
_data
getNode
_module
getId
if
resolved
_md
_module
getDescriptor
if
handleConfiguration
loaded
conf
shouldBePublic
return
if
resolved
_md
resolved
_md
_md
if
resolved
_module
resolved
_module
_module
resolved
_downloaded
_module
isDownloaded
resolved
_searched
_module
isSearched
resolved
_dds
putAll
_dds
resolved
updateDataFrom
this
_rootModuleConf
resolved
loadData
conf
shouldBePublic
DependencyDescriptor
dd
dependencyDescriptor
if
dd
resolved
addDependencyArtifactsIncludes
_rootModuleConf
dd
getDependencyArtifactsIncludes
getParentConf
_data
register
getId
resolved
if
_data
getIvy
logResolvedRevision
Message
info
_module
getId
getRevision
getId
else
Message
verbose
_module
getId
getRevision
getId
return
_downloaded
_module
isDownloaded
_searched
_module
isSearched
else
Message
warn
getId
resolver
reportFailure
_problem
new
RuntimeException
catch
Exception
e
_problem
e
if
_module
_data
getReport
addDependency
this
return
else
loaded
if
_data
getIvy
getVersionMatcher
isDynamic
getId
if
_data
getIvy
logResolvedRevision
Message
info
_module
getId
getRevision
getId
else
Message
verbose
_module
getId
getRevision
getId
_md
_module
getDescriptor
if
_data
getIvy
getVersionMatcher
isDynamic
getId
_data
register
_module
getId
this
_confsToFetch
remove
updateConfsToFetch
Arrays
asList
resolveSpecialConfigurations
getRequiredConfigurations
getParent
getParentConf
this
else
loaded
if
hasProblem
_data
getReport
addDependency
this
return
handleConfiguration
loaded
conf
shouldBePublic
loaded
if
handleConfiguration
loaded
conf
shouldBePublic
return
DependencyDescriptor
dd
getDependencyDescriptor
getParent
if
dd
addDependencyArtifactsIncludes
_rootModuleConf
dd
getDependencyArtifactsIncludes
getParentConf
return
loaded
private
boolean
markRootModuleConfLoaded
return
_loadedRootModuleConfs
add
_rootModuleConf
private
boolean
isRootModuleConfLoaded
return
_loadedRootModuleConfs
contains
_rootModuleConf
private
boolean
handleConfiguration
boolean
loaded
String
conf
boolean
shouldBePublic
if
_md
String
confs
getRealConfs
conf
for
int
i
i
confs
length
i
Configuration
c
_md
getConfiguration
confs
i
if
c
_confsToFetch
remove
conf
if
conf
equals
confs
i
_problem
new
RuntimeException
this
conf
confs
i
getParent
getParentConf
else
_problem
new
RuntimeException
this
confs
i
getParent
getParentConf
_data
getReport
addDependency
this
return
else
if
shouldBePublic
isRoot
c
getVisibility
Configuration
Visibility
PUBLIC
_confsToFetch
remove
conf
_problem
new
RuntimeException
this
c
getParent
getParentConf
_data
getReport
addDependency
this
return
if
loaded
_fetchedConfigurations
add
conf
_confsToFetch
removeAll
Arrays
asList
confs
_confsToFetch
remove
conf
addRootModuleConfigurations
_rootModuleConf
confs
return
private
String
getDefaultConf
String
conf
Matcher
m
FALLBACK_CONF_PATTERN
matcher
conf
if
m
matches
return
m
group
else
return
conf
private
String
getMainConf
String
conf
Matcher
m
FALLBACK_CONF_PATTERN
matcher
conf
if
m
matches
return
m
group
else
return
private
boolean
isRoot
return
_isRoot
public
IvyNode
getRealNode
return
getRealNode
public
IvyNode
getRealNode
boolean
traverse
IvyNode
node
_data
getNode
getId
if
node
if
traverse
node
setParent
getParent
node
setParentConf
getParentConf
node
setRootModuleConf
getRootModuleConf
node
setRequestedConf
getRequestedConf
node
_data
_data
return
node
else
return
this
public
Collection
getDependencies
String
confs
if
_md
throw
new
IllegalStateException
if
Arrays
asList
confs
contains
confs
_md
getConfigurationsNames
Collection
deps
new
HashSet
for
int
i
i
confs
length
i
deps
addAll
getDependencies
confs
i
return
deps
public
Collection
getDependencies
String
conf
boolean
traverse
if
_md
throw
new
IllegalStateException
DependencyDescriptor
dds
_md
getDependencies
Collection
dependencies
new
LinkedHashSet
for
int
i
i
dds
length
i
DependencyDescriptor
dd
dds
i
String
dependencyConfigurations
dd
getDependencyConfigurations
conf
getRequestedConf
if
dependencyConfigurations
length
continue
if
isDependencyModuleExcluded
dd
getDependencyRevisionId
conf
Message
verbose
dd
getDependencyRevisionId
conf
continue
IvyNode
depNode
_data
getNode
dd
getDependencyRevisionId
if
depNode
depNode
new
IvyNode
_data
this
dd
else
depNode
addDependencyDescriptor
this
dd
if
depNode
hasProblem
Collection
confs
Arrays
asList
resolveSpecialConfigurations
dependencyConfigurations
depNode
depNode
updateConfsToFetch
confs
depNode
setRequiredConfs
this
conf
confs
depNode
addCaller
_rootModuleConf
this
conf
dependencyConfigurations
dd
dependencies
add
depNode
if
traverse
traverse
conf
depNode
return
dependencies
public
void
traverse
String
conf
IvyNode
depNode
if
getPath
contains
depNode
IvyContext
getContext
getCircularDependencyStrategy
handleCircularDependency
toMrids
getPath
depNode
else
depNode
setParent
this
depNode
setParentConf
conf
depNode
setRootModuleConf
getRootModuleConf
depNode
_data
_data
private
ModuleRevisionId
toMrids
Collection
path
IvyNode
depNode
ModuleRevisionId
ret
new
ModuleRevisionId
path
size
int
i
for
Iterator
iter
path
iterator
iter
hasNext
i
IvyNode
node
IvyNode
iter
next
ret
i
node
getId
ret
ret
length
depNode
getId
return
ret
public
final
String
getRequestedConf
return
String
_requestedConf
get
getRootModuleConf
public
final
void
setRequestedConf
String
requestedConf
_requestedConf
put
getRootModuleConf
requestedConf
private
void
addDependencyDescriptor
IvyNode
parent
DependencyDescriptor
dd
_dds
put
parent
dd
private
boolean
isDependencyModuleExcluded
ModuleRevisionId
dependencyRevisionId
String
conf
return
doesCallersExclude
getRootModuleConf
DefaultArtifact
newIvyArtifact
dependencyRevisionId
public
ModuleRevisionId
getId
return
_id
public
void
updateConfsToFetch
Collection
confs
_confsToFetch
addAll
confs
_confsToFetch
removeAll
_fetchedConfigurations
public
ModuleId
getModuleId
return
_id
getModuleId
private
String
resolveSpecialConfigurations
String
dependencyConfigurations
IvyNode
node
if
dependencyConfigurations
length
dependencyConfigurations
startsWith
node
node
isLoaded
String
conf
dependencyConfigurations
if
equals
conf
return
node
getDescriptor
getPublicConfigurationsNames
List
exclusions
Arrays
asList
conf
substring
split
List
ret
new
ArrayList
Arrays
asList
node
getDescriptor
getPublicConfigurationsNames
ret
removeAll
exclusions
return
String
ret
toArray
new
String
ret
size
return
dependencyConfigurations
public
boolean
isLoaded
return
_md
public
ModuleDescriptor
getDescriptor
return
_md
public
String
getRequiredConfigurations
IvyNode
in
String
inConf
Collection
req
Collection
_requiredConfs
get
new
NodeConf
in
inConf
return
req
new
String
String
req
toArray
new
String
req
size
public
String
getRequiredConfigurations
Collection
required
new
ArrayList
_confsToFetch
size
_fetchedConfigurations
size
required
addAll
_fetchedConfigurations
required
addAll
_confsToFetch
return
String
required
toArray
new
String
required
size
private
void
setRequiredConfs
IvyNode
parent
String
parentConf
Collection
confs
_requiredConfs
put
new
NodeConf
parent
parentConf
new
HashSet
confs
public
Configuration
getConfiguration
String
conf
if
_md
throw
new
IllegalStateException
String
defaultConf
getDefaultConf
conf
conf
getMainConf
conf
Configuration
configuration
_md
getConfiguration
conf
if
configuration
configuration
_md
getConfiguration
defaultConf
return
configuration
public
ResolvedModuleRevision
getModuleRevision
return
_module
public
void
addCaller
String
rootModuleConf
IvyNode
node
String
callerConf
String
dependencyConfs
DependencyDescriptor
dd
ModuleDescriptor
md
node
getDescriptor
ModuleRevisionId
mrid
node
getId
if
mrid
getModuleId
equals
getId
getModuleId
throw
new
IllegalArgumentException
getId
Map
callers
Map
_callersByRootConf
get
rootModuleConf
if
callers
callers
new
HashMap
_callersByRootConf
put
rootModuleConf
callers
Caller
caller
Caller
callers
get
mrid
if
caller
caller
new
Caller
md
mrid
dd
node
canExclude
rootModuleConf
callers
put
mrid
caller
caller
addConfiguration
callerConf
dependencyConfs
IvyNode
parent
node
getRealNode
for
Iterator
iter
parent
_allCallers
keySet
iterator
iter
hasNext
ModuleId
mid
ModuleId
iter
next
_allCallers
put
mid
parent
_allCallers
put
mrid
getModuleId
node
_isCircular
_allCallers
keySet
contains
getId
getModuleId
if
_isCircular
IvyContext
getContext
getCircularDependencyStrategy
handleCircularDependency
toMrids
findPath
getId
getModuleId
this
private
Collection
findPath
ModuleId
from
return
findPath
from
this
new
LinkedList
private
Collection
findPath
ModuleId
from
IvyNode
node
List
path
IvyNode
parent
IvyNode
node
_allCallers
get
from
if
parent
throw
new
IllegalArgumentException
from
getId
if
path
contains
parent
path
add
parent
Message
verbose
from
path
get
path
size
return
path
path
add
parent
if
parent
getId
getModuleId
equals
from
return
path
return
findPath
from
parent
path
private
boolean
canExclude
String
rootModuleConf
DependencyDescriptor
dd
getDependencyDescriptor
getParent
if
dd
dd
canExclude
return
Caller
callers
getCallers
rootModuleConf
for
int
i
i
callers
length
i
if
callers
i
canExclude
return
return
public
Caller
getCallers
String
rootModuleConf
Map
callers
Map
_callersByRootConf
get
rootModuleConf
if
callers
return
new
Caller
return
Caller
callers
values
toArray
new
Caller
callers
values
size
public
Caller
getAllCallers
Set
all
new
HashSet
for
Iterator
iter
_callersByRootConf
values
iterator
iter
hasNext
Map
callers
Map
iter
next
all
addAll
callers
values
return
Caller
all
toArray
new
Caller
all
size
public
String
toString
return
getResolvedId
toString
public
boolean
equals
Object
obj
if
obj
instanceof
IvyNode
return
IvyNode
node
IvyNode
obj
return
node
getId
equals
getId
public
int
hashCode
return
getId
hashCode
public
String
getConfigurations
String
rootModuleConf
Set
depConfs
Set
_rootModuleConfs
get
rootModuleConf
if
depConfs
return
new
String
return
String
depConfs
toArray
new
String
depConfs
size
public
void
discardConf
String
conf
discardConf
_rootModuleConf
conf
public
void
discardConf
String
rootModuleConf
String
conf
Set
depConfs
Set
_rootModuleConfs
get
rootModuleConf
if
depConfs
depConfs
new
HashSet
_rootModuleConfs
put
rootModuleConf
depConfs
if
_md
Configuration
c
_md
getConfiguration
conf
if
conf
String
exts
c
getExtends
for
int
i
i
exts
length
i
discardConf
rootModuleConf
exts
i
depConfs
remove
c
getName
else
Message
warn
getId
conf
else
depConfs
remove
conf
private
void
addRootModuleConfigurations
String
rootModuleConf
String
dependencyConfs
Set
depConfs
Set
_rootModuleConfs
get
rootModuleConf
if
depConfs
depConfs
new
HashSet
_rootModuleConfs
put
rootModuleConf
depConfs
if
_md
for
int
i
i
dependencyConfs
length
i
Configuration
conf
_md
getConfiguration
dependencyConfs
i
if
conf
String
exts
conf
getExtends
addRootModuleConfigurations
rootModuleConf
exts
depConfs
add
conf
getName
else
Message
warn
getId
dependencyConfs
i
else
for
int
i
i
dependencyConfs
length
i
depConfs
add
dependencyConfs
i
public
String
getRootModuleConfigurations
return
String
_rootModuleConfs
keySet
toArray
new
String
_rootModuleConfs
size
public
Artifact
getAllArtifacts
Set
ret
new
HashSet
for
Iterator
it
_rootModuleConfs
keySet
iterator
it
hasNext
String
rootModuleConf
String
it
next
ret
addAll
Arrays
asList
getArtifacts
rootModuleConf
return
Artifact
ret
toArray
new
Artifact
ret
size
public
Artifact
getSelectedArtifacts
Filter
artifactFilter
Collection
ret
new
HashSet
for
Iterator
it
_rootModuleConfs
keySet
iterator
it
hasNext
String
rootModuleConf
String
it
next
if
isEvicted
rootModuleConf
ret
addAll
Arrays
asList
getArtifacts
rootModuleConf
ret
FilterHelper
filter
ret
artifactFilter
return
Artifact
ret
toArray
new
Artifact
ret
size
public
Artifact
getArtifacts
String
rootModuleConf
Set
confs
Set
_rootModuleConfs
get
rootModuleConf
if
confs
return
new
Artifact
Set
artifacts
new
HashSet
Set
includes
Set
_dependencyArtifactsIncludes
get
rootModuleConf
if
_md
isDefault
includes
includes
isEmpty
for
Iterator
it
includes
iterator
it
hasNext
DependencyArtifactDescriptor
dad
DependencyArtifactDescriptor
it
next
artifacts
add
new
MDArtifact
_md
dad
getName
dad
getType
dad
getExt
dad
getUrl
else
if
includes
includes
isEmpty
for
Iterator
iter
confs
iterator
iter
hasNext
String
conf
String
iter
next
artifacts
addAll
Arrays
asList
_md
getArtifacts
conf
else
Map
allArtifacts
new
HashMap
for
Iterator
iter
confs
iterator
iter
hasNext
String
conf
String
iter
next
Artifact
arts
_md
getArtifacts
conf
for
int
i
i
arts
length
i
allArtifacts
put
arts
i
getId
getArtifactId
arts
i
for
Iterator
it
includes
iterator
it
hasNext
DependencyArtifactDescriptor
dad
DependencyArtifactDescriptor
it
next
Collection
arts
findArtifactsMatching
dad
allArtifacts
if
arts
isEmpty
Message
error
dad
getId
it
remove
else
Message
debug
this
rootModuleConf
arts
artifacts
addAll
arts
for
Iterator
iter
artifacts
iterator
iter
hasNext
Artifact
artifact
Artifact
iter
next
boolean
excluded
doesCallersExclude
rootModuleConf
artifact
if
excluded
Message
debug
this
rootModuleConf
artifact
iter
remove
return
Artifact
artifacts
toArray
new
Artifact
artifacts
size
private
boolean
doesCallersExclude
String
rootModuleConf
Artifact
artifact
return
doesCallersExclude
rootModuleConf
artifact
new
Stack
private
boolean
doesCallersExclude
String
rootModuleConf
Artifact
artifact
Stack
callersStack
if
callersStack
contains
getId
return
callersStack
push
getId
try
Caller
callers
getCallers
rootModuleConf
if
callers
length
return
Collection
callersNodes
new
ArrayList
for
int
i
i
callers
length
i
if
callers
i
canExclude
return
ModuleDescriptor
md
callers
i
getModuleDescriptor
if
doesExclude
md
rootModuleConf
callers
i
getCallerConfigurations
this
callers
i
getDependencyDescriptor
artifact
callersStack
return
return
finally
callersStack
pop
private
boolean
doesExclude
ModuleDescriptor
md
String
rootModuleConf
String
moduleConfs
IvyNode
dependency
DependencyDescriptor
dd
Artifact
artifact
Stack
callersStack
if
dd
if
dd
doesExclude
moduleConfs
artifact
getId
getArtifactId
return
IvyNode
c
_data
getNode
md
getModuleRevisionId
if
c
return
c
doesCallersExclude
rootModuleConf
artifact
callersStack
else
return
private
static
DependencyDescriptor
getDependencyDescriptor
ModuleDescriptor
md
IvyNode
dependency
if
md
DependencyDescriptor
dds
md
getDependencies
for
int
i
i
dds
length
i
if
dds
i
getDependencyId
equals
dependency
getModuleId
return
dds
i
return
private
static
Collection
findArtifactsMatching
DependencyArtifactDescriptor
dad
Map
allArtifacts
Collection
ret
new
ArrayList
for
Iterator
iter
allArtifacts
keySet
iterator
iter
hasNext
ArtifactId
aid
ArtifactId
iter
next
if
MatcherHelper
matches
dad
getMatcher
dad
getId
aid
ret
add
allArtifacts
get
aid
return
ret
private
void
addDependencyArtifactsIncludes
String
rootModuleConf
DependencyArtifactDescriptor
dependencyArtifacts
addDependencyArtifacts
rootModuleConf
dependencyArtifacts
_dependencyArtifactsIncludes
private
void
addDependencyArtifacts
String
rootModuleConf
DependencyArtifactDescriptor
dependencyArtifacts
Map
artifactsMap
Set
depArtifacts
Set
artifactsMap
get
rootModuleConf
if
depArtifacts
depArtifacts
new
HashSet
artifactsMap
put
rootModuleConf
depArtifacts
depArtifacts
addAll
Arrays
asList
dependencyArtifacts
public
long
getPublication
if
_module
return
_module
getPublicationDate
getTime
return
public
DependencyDescriptor
getDependencyDescriptor
IvyNode
parent
return
DependencyDescriptor
_dds
get
parent
public
boolean
hasProblem
return
_problem
public
ModuleRevisionId
getResolvedId
if
_md
_md
getResolvedModuleRevisionId
getRevision
return
_md
getResolvedModuleRevisionId
else
if
_module
return
_module
getId
else
return
getId
public
Exception
getProblem
return
_problem
public
boolean
isDownloaded
return
_downloaded
public
boolean
isSearched
return
_searched
public
String
getRootModuleConf
return
_rootModuleConf
public
void
setRootModuleConf
String
rootModuleConf
if
_rootModuleConf
_rootModuleConf
equals
rootModuleConf
_confsToFetch
clear
if
rootModuleConf
rootModuleConf
equals
_rootModuleConf
_selectedDeps
put
new
ModuleIdConf
_id
getModuleId
rootModuleConf
Collections
singleton
this
_rootModuleConf
rootModuleConf
public
String
getConfsToFetch
return
String
_confsToFetch
toArray
new
String
_confsToFetch
size
public
boolean
isCircular
return
_isCircular
public
boolean
isFetched
String
conf
return
_fetchedConfigurations
contains
conf
public
EvictionData
getEvictionDataInRoot
String
rootModuleConf
IvyNode
parent
IvyNode
root
parent
getRoot
Collection
selectedNodes
root
getResolvedNodes
getModuleId
rootModuleConf
for
Iterator
iter
selectedNodes
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
if
node
getResolvedId
equals
getResolvedId
return
return
new
EvictionData
rootModuleConf
parent
root
getConflictManager
getModuleId
selectedNodes
public
static
IvyNode
getRoot
IvyNode
parent
IvyNode
root
parent
Collection
path
new
HashSet
path
add
root
while
root
getParent
root
isRoot
if
path
contains
root
getParent
return
root
root
root
getParent
path
add
root
return
root
public
IvyNode
findNode
ModuleRevisionId
mrid
return
_data
getNode
mrid
public
String
getRealConfs
String
conf
if
_md
return
new
String
conf
String
defaultConf
getDefaultConf
conf
conf
getMainConf
conf
if
_md
getConfiguration
conf
if
equals
defaultConf
return
new
String
conf
defaultConf
if
conf
startsWith
return
resolveSpecialConfigurations
new
String
conf
this
else
if
conf
indexOf
String
confs
conf
split
for
int
i
i
confs
length
i
confs
i
confs
i
trim
return
new
String
conf
protected
boolean
isTransitive
return
_data
isTransitive
getDependencyDescriptor
getParent
isTransitive
isParentConfTransitive
protected
boolean
isParentConfTransitive
String
conf
getParent
getRequestedConf
if
conf
return
Configuration
parentConf
getParent
getConfiguration
conf
return
parentConf
isTransitive
public
ResolveData
getResolveData
return
_data
