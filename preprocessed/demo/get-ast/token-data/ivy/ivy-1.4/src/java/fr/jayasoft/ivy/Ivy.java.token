package
fr
jayasoft
ivy
import
java
io
File
import
java
io
FileInputStream
import
java
io
FileNotFoundException
import
java
io
FileOutputStream
import
java
io
IOException
import
java
io
InputStream
import
java
net
InetAddress
import
java
net
MalformedURLException
import
java
net
URL
import
java
net
URLClassLoader
import
java
net
UnknownHostException
import
java
text
ParseException
import
java
text
SimpleDateFormat
import
java
util
ArrayList
import
java
util
Arrays
import
java
util
Collection
import
java
util
Collections
import
java
util
Comparator
import
java
util
Date
import
java
util
HashMap
import
java
util
HashSet
import
java
util
Iterator
import
java
util
LinkedHashMap
import
java
util
LinkedHashSet
import
java
util
List
import
java
util
ListIterator
import
java
util
Map
import
java
util
Properties
import
java
util
Set
import
java
util
StringTokenizer
import
javax
swing
event
EventListenerList
import
org
xml
sax
SAXException
import
fr
jayasoft
ivy
IvyNode
EvictionData
import
fr
jayasoft
ivy
circular
CircularDependencyStrategy
import
fr
jayasoft
ivy
circular
ErrorCircularDependencyStrategy
import
fr
jayasoft
ivy
circular
IgnoreCircularDependencyStrategy
import
fr
jayasoft
ivy
circular
WarnCircularDependencyStrategy
import
fr
jayasoft
ivy
conflict
LatestConflictManager
import
fr
jayasoft
ivy
conflict
NoConflictManager
import
fr
jayasoft
ivy
conflict
StrictConflictManager
import
fr
jayasoft
ivy
event
FilteredIvyListener
import
fr
jayasoft
ivy
event
IvyEvent
import
fr
jayasoft
ivy
event
IvyEventFilter
import
fr
jayasoft
ivy
event
IvyListener
import
fr
jayasoft
ivy
event
Trigger
import
fr
jayasoft
ivy
event
download
PrepareDownloadEvent
import
fr
jayasoft
ivy
event
resolve
EndResolveEvent
import
fr
jayasoft
ivy
event
resolve
StartResolveEvent
import
fr
jayasoft
ivy
filter
Filter
import
fr
jayasoft
ivy
filter
FilterHelper
import
fr
jayasoft
ivy
latest
LatestLexicographicStrategy
import
fr
jayasoft
ivy
latest
LatestRevisionStrategy
import
fr
jayasoft
ivy
latest
LatestTimeStrategy
import
fr
jayasoft
ivy
matcher
ExactOrRegexpPatternMatcher
import
fr
jayasoft
ivy
matcher
ExactPatternMatcher
import
fr
jayasoft
ivy
matcher
GlobPatternMatcher
import
fr
jayasoft
ivy
matcher
Matcher
import
fr
jayasoft
ivy
matcher
MatcherHelper
import
fr
jayasoft
ivy
matcher
ModuleIdMatcher
import
fr
jayasoft
ivy
matcher
PatternMatcher
import
fr
jayasoft
ivy
matcher
RegexpPatternMatcher
import
fr
jayasoft
ivy
namespace
NameSpaceHelper
import
fr
jayasoft
ivy
namespace
Namespace
import
fr
jayasoft
ivy
parser
ModuleDescriptorParser
import
fr
jayasoft
ivy
parser
ModuleDescriptorParserRegistry
import
fr
jayasoft
ivy
report
ArtifactDownloadReport
import
fr
jayasoft
ivy
report
ConfigurationResolveReport
import
fr
jayasoft
ivy
report
DownloadReport
import
fr
jayasoft
ivy
report
DownloadStatus
import
fr
jayasoft
ivy
report
LogReportOutputter
import
fr
jayasoft
ivy
report
ReportOutputter
import
fr
jayasoft
ivy
report
ResolveReport
import
fr
jayasoft
ivy
report
XmlReportOutputter
import
fr
jayasoft
ivy
repository
TransferEvent
import
fr
jayasoft
ivy
repository
TransferListener
import
fr
jayasoft
ivy
repository
url
URLResource
import
fr
jayasoft
ivy
resolver
AbstractResolver
import
fr
jayasoft
ivy
resolver
CacheResolver
import
fr
jayasoft
ivy
resolver
ChainResolver
import
fr
jayasoft
ivy
resolver
DualResolver
import
fr
jayasoft
ivy
resolver
ModuleEntry
import
fr
jayasoft
ivy
resolver
OrganisationEntry
import
fr
jayasoft
ivy
resolver
RevisionEntry
import
fr
jayasoft
ivy
status
StatusManager
import
fr
jayasoft
ivy
url
URLHandlerRegistry
import
fr
jayasoft
ivy
util
FileUtil
import
fr
jayasoft
ivy
util
IvyPatternHelper
import
fr
jayasoft
ivy
util
Message
import
fr
jayasoft
ivy
util
PropertiesFile
import
fr
jayasoft
ivy
version
ChainVersionMatcher
import
fr
jayasoft
ivy
version
ExactVersionMatcher
import
fr
jayasoft
ivy
version
LatestVersionMatcher
import
fr
jayasoft
ivy
version
SubVersionMatcher
import
fr
jayasoft
ivy
version
VersionMatcher
import
fr
jayasoft
ivy
version
VersionRangeMatcher
import
fr
jayasoft
ivy
xml
XmlIvyConfigurationParser
import
fr
jayasoft
ivy
xml
XmlModuleDescriptorParser
import
fr
jayasoft
ivy
xml
XmlModuleDescriptorUpdater
import
fr
jayasoft
ivy
xml
XmlReportParser
public
class
Ivy
implements
TransferListener
public
static
Ivy
getCurrent
Ivy
cur
IvyContext
getContext
getIvy
if
cur
cur
new
Ivy
IvyContext
getContext
setIvy
cur
return
cur
public
static
final
SimpleDateFormat
DATE_FORMAT
new
SimpleDateFormat
private
static
final
String
DEFAULT_CACHE_ARTIFACT_PATTERN
private
static
final
String
DEFAULT_CACHE_DATA_FILE_PATTERN
private
static
final
String
DEFAULT_CACHE_IVY_PATTERN
private
static
final
String
DEFAULT_CACHE_RESOLVED_IVY_PATTERN
private
static
final
String
DEFAULT_CACHE_RESOLVED_IVY_PROPERTIES_PATTERN
private
Map
_typeDefs
new
HashMap
private
Map
_resolversMap
new
HashMap
private
DependencyResolver
_defaultResolver
private
DependencyResolver
_dictatorResolver
private
String
_defaultResolverName
private
File
_defaultCache
private
String
_defaultBranch
private
boolean
_checkUpToDate
private
Map
_moduleConfigurations
new
LinkedHashMap
private
Map
_conflictsManager
new
HashMap
private
Map
_latestStrategies
new
HashMap
private
Map
_namespaces
new
HashMap
private
Map
_matchers
new
HashMap
private
Map
_reportOutputters
new
HashMap
private
Map
_versionMatchers
new
HashMap
private
Map
_circularDependencyStrategies
new
HashMap
private
Map
_variables
new
HashMap
private
String
_cacheIvyPattern
DEFAULT_CACHE_IVY_PATTERN
private
String
_cacheResolvedIvyPattern
DEFAULT_CACHE_RESOLVED_IVY_PATTERN
private
String
_cacheResolvedIvyPropertiesPattern
DEFAULT_CACHE_RESOLVED_IVY_PROPERTIES_PATTERN
private
String
_cacheArtifactPattern
DEFAULT_CACHE_ARTIFACT_PATTERN
private
String
_cacheDataFilePattern
DEFAULT_CACHE_DATA_FILE_PATTERN
private
boolean
_validate
private
LatestStrategy
_defaultLatestStrategy
private
ConflictManager
_defaultConflictManager
private
CircularDependencyStrategy
_circularDependencyStrategy
private
List
_listingIgnore
new
ArrayList
private
boolean
_repositoriesConfigured
private
boolean
_useRemoteConfig
private
File
_defaultUserDir
private
Set
_fetchedSet
new
HashSet
private
List
_classpathURLs
new
ArrayList
private
ClassLoader
_classloader
private
StatusManager
_statusManager
private
long
_interruptTimeout
private
boolean
_interrupted
public
Ivy
setVariable
Ivy
class
getResource
toExternalForm
String
ivyTypeDefs
System
getProperty
if
ivyTypeDefs
String
files
ivyTypeDefs
split
for
int
i
i
files
length
i
try
typeDefs
new
FileInputStream
new
File
files
i
trim
catch
FileNotFoundException
e
Message
warn
files
i
trim
catch
IOException
e
Message
warn
files
i
trim
e
getMessage
else
try
typeDefs
Ivy
class
getResourceAsStream
catch
IOException
e
Message
warn
LatestLexicographicStrategy
latestLexicographicStrategy
new
LatestLexicographicStrategy
LatestRevisionStrategy
latestRevisionStrategy
new
LatestRevisionStrategy
LatestTimeStrategy
latestTimeStrategy
new
LatestTimeStrategy
addLatestStrategy
latestRevisionStrategy
addLatestStrategy
latestLexicographicStrategy
addLatestStrategy
latestTimeStrategy
addConflictManager
new
LatestConflictManager
latestRevisionStrategy
addConflictManager
new
LatestConflictManager
latestTimeStrategy
addConflictManager
new
NoConflictManager
addConflictManager
new
StrictConflictManager
addMatcher
ExactPatternMatcher
getInstance
addMatcher
RegexpPatternMatcher
getInstance
addMatcher
ExactOrRegexpPatternMatcher
getInstance
addMatcher
GlobPatternMatcher
getInstance
addReportOutputter
new
XmlReportOutputter
addReportOutputter
new
LogReportOutputter
configureDefaultCircularDependencyStrategies
_listingIgnore
add
_listingIgnore
add
_listingIgnore
add
addSystemProperties
addTransferListener
new
TransferListener
public
void
transferProgress
TransferEvent
evt
switch
evt
getEventType
case
TransferEvent
TRANSFER_PROGRESS
Message
progress
break
case
TransferEvent
TRANSFER_COMPLETED
Message
endProgress
evt
getTotalLength
break
default
break
IvyContext
getContext
setIvy
this
private
void
addSystemProperties
addAllVariables
System
getProperties
public
void
configureRepositories
boolean
remote
IvyContext
getContext
setIvy
this
if
_repositoriesConfigured
Properties
props
new
Properties
boolean
configured
if
_useRemoteConfig
remote
try
URL
url
new
URL
Message
verbose
url
props
load
URLHandlerRegistry
getDefault
openStream
url
configured
catch
Exception
ex
Message
verbose
ex
getMessage
props
new
Properties
if
configured
try
props
load
Ivy
class
getResourceAsStream
catch
IOException
e
Message
error
e
getMessage
addAllVariables
props
_repositoriesConfigured
public
void
typeDefs
InputStream
stream
throws
IOException
typeDefs
stream
public
void
typeDefs
InputStream
stream
boolean
silentFail
throws
IOException
IvyContext
getContext
setIvy
this
try
Properties
p
new
Properties
p
load
stream
typeDefs
p
silentFail
finally
stream
close
public
void
typeDefs
Properties
p
typeDefs
p
public
void
typeDefs
Properties
p
boolean
silentFail
IvyContext
getContext
setIvy
this
for
Iterator
iter
p
keySet
iterator
iter
hasNext
String
name
String
iter
next
typeDef
name
p
getProperty
name
silentFail
public
void
configure
File
configurationFile
throws
ParseException
IOException
IvyContext
getContext
setIvy
this
Message
info
configurationFile
long
start
System
currentTimeMillis
setConfigurationVariables
configurationFile
if
getVariable
setDefaultIvyUserDir
new
File
getVariable
else
getDefaultIvyUserDir
getDefaultCache
loadDefaultProperties
try
new
XmlIvyConfigurationParser
this
parse
configurationFile
toURL
catch
MalformedURLException
e
IllegalArgumentException
iae
new
IllegalArgumentException
configurationFile
iae
initCause
e
throw
iae
setVariable
getDefaultIvyUserDir
getAbsolutePath
Message
verbose
System
currentTimeMillis
start
dumpConfig
public
void
configure
URL
configurationURL
throws
ParseException
IOException
IvyContext
getContext
setIvy
this
Message
info
configurationURL
long
start
System
currentTimeMillis
setConfigurationVariables
configurationURL
if
getVariable
setDefaultIvyUserDir
new
File
getVariable
else
getDefaultIvyUserDir
getDefaultCache
loadDefaultProperties
new
XmlIvyConfigurationParser
this
parse
configurationURL
setVariable
getDefaultIvyUserDir
getAbsolutePath
Message
verbose
System
currentTimeMillis
start
dumpConfig
private
void
loadDefaultProperties
throws
IOException
loadProperties
Ivy
class
getResource
public
void
configureDefault
throws
ParseException
IOException
configure
getDefaultConfigurationURL
public
void
setConfigurationVariables
File
configurationFile
IvyContext
getContext
setIvy
this
try
setVariable
new
File
configurationFile
getAbsolutePath
getParent
setVariable
configurationFile
getAbsolutePath
setVariable
configurationFile
toURL
toExternalForm
catch
MalformedURLException
e
IllegalArgumentException
iae
new
IllegalArgumentException
configurationFile
iae
initCause
e
throw
iae
public
void
setConfigurationVariables
URL
configurationURL
IvyContext
getContext
setIvy
this
String
confURL
configurationURL
toExternalForm
setVariable
confURL
int
slashIndex
confURL
lastIndexOf
if
slashIndex
setVariable
confURL
substring
slashIndex
else
Message
warn
private
void
dumpConfig
Message
verbose
getDefaultCache
Message
verbose
getDefaultResolver
Message
debug
getDefaultLatestStrategy
Message
debug
getDefaultConflictManager
Message
debug
getCircularDependencyStrategy
Message
debug
doValidate
Message
debug
isCheckUpToDate
Message
debug
getCacheIvyPattern
Message
debug
getCacheArtifactPattern
if
_classpathURLs
isEmpty
Message
verbose
_classpathURLs
size
for
Iterator
iter
_classpathURLs
iterator
iter
hasNext
Message
debug
iter
next
Message
verbose
_resolversMap
size
for
Iterator
iter
_resolversMap
values
iterator
iter
hasNext
DependencyResolver
resolver
DependencyResolver
iter
next
resolver
dumpConfig
if
_moduleConfigurations
isEmpty
Message
debug
for
Iterator
iter
_moduleConfigurations
keySet
iterator
iter
hasNext
ModuleIdMatcher
midm
ModuleIdMatcher
iter
next
ModuleSettings
s
ModuleSettings
_moduleConfigurations
get
midm
Message
debug
midm
s
public
void
loadProperties
URL
url
throws
IOException
loadProperties
url
public
void
loadProperties
URL
url
boolean
overwrite
throws
IOException
loadProperties
url
openStream
overwrite
public
void
loadProperties
File
file
throws
IOException
loadProperties
file
public
void
loadProperties
File
file
boolean
overwrite
throws
IOException
loadProperties
new
FileInputStream
file
overwrite
private
void
loadProperties
InputStream
stream
boolean
overwrite
throws
IOException
try
Properties
properties
new
Properties
properties
load
stream
addAllVariables
properties
overwrite
finally
if
stream
try
stream
close
catch
IOException
e
public
void
setVariable
String
varName
String
value
setVariable
varName
value
public
void
setVariable
String
varName
String
value
boolean
overwrite
if
overwrite
_variables
containsKey
varName
Message
debug
varName
value
_variables
put
varName
substitute
value
else
Message
debug
varName
value
public
void
addAllVariables
Map
variables
addAllVariables
variables
public
void
addAllVariables
Map
variables
boolean
overwrite
for
Iterator
iter
variables
keySet
iterator
iter
hasNext
String
key
String
iter
next
String
val
String
variables
get
key
setVariable
key
val
overwrite
public
String
substitute
String
str
return
IvyPatternHelper
substituteVariables
str
getVariables
public
Map
getVariables
return
_variables
public
Class
typeDef
String
name
String
className
return
typeDef
name
className
public
Class
typeDef
String
name
String
className
boolean
silentFail
Class
clazz
classForName
className
silentFail
if
clazz
_typeDefs
put
name
clazz
return
clazz
private
Class
classForName
String
className
boolean
silentFail
try
return
getClassLoader
loadClass
className
catch
ClassNotFoundException
e
if
silentFail
Message
info
className
_classpathURLs
return
else
throw
new
RuntimeException
className
_classpathURLs
private
ClassLoader
getClassLoader
if
_classloader
if
_classpathURLs
isEmpty
_classloader
Ivy
class
getClassLoader
else
_classloader
new
URLClassLoader
URL
_classpathURLs
toArray
new
URL
_classpathURLs
size
Ivy
class
getClassLoader
return
_classloader
public
void
addClasspathURL
URL
url
_classpathURLs
add
url
_classloader
public
Map
getTypeDefs
return
_typeDefs
public
Class
getTypeDef
String
name
return
Class
_typeDefs
get
name
public
void
addConfigured
DependencyResolver
resolver
addResolver
resolver
public
void
addConfigured
ModuleDescriptorParser
parser
ModuleDescriptorParserRegistry
getInstance
addParser
parser
public
void
addResolver
DependencyResolver
resolver
if
resolver
throw
new
NullPointerException
if
resolver
instanceof
IvyAware
IvyAware
resolver
setIvy
this
_resolversMap
put
resolver
getName
resolver
if
resolver
instanceof
ChainResolver
List
subresolvers
ChainResolver
resolver
getResolvers
for
Iterator
iter
subresolvers
iterator
iter
hasNext
DependencyResolver
dr
DependencyResolver
iter
next
addResolver
dr
else
if
resolver
instanceof
DualResolver
DependencyResolver
ivyResolver
DualResolver
resolver
getIvyResolver
if
ivyResolver
addResolver
ivyResolver
DependencyResolver
artifactResolver
DualResolver
resolver
getArtifactResolver
if
artifactResolver
addResolver
artifactResolver
public
void
setDefaultCache
File
cacheDirectory
_defaultCache
cacheDirectory
public
void
setDefaultResolver
String
resolverName
checkResolverName
resolverName
_defaultResolverName
resolverName
private
void
checkResolverName
String
resolverName
if
resolverName
_resolversMap
containsKey
resolverName
throw
new
IllegalArgumentException
resolverName
public
void
addModuleConfiguration
ModuleId
mid
PatternMatcher
matcher
String
resolverName
String
branch
String
conflictManager
checkResolverName
resolverName
_moduleConfigurations
put
new
ModuleIdMatcher
mid
matcher
new
ModuleSettings
resolverName
branch
conflictManager
public
File
getDefaultIvyUserDir
if
_defaultUserDir
if
getVariable
setDefaultIvyUserDir
new
File
getVariable
Message
verbose
_defaultUserDir
else
setDefaultIvyUserDir
new
File
System
getProperty
Message
verbose
_defaultUserDir
return
_defaultUserDir
public
void
setDefaultIvyUserDir
File
defaultUserDir
_defaultUserDir
defaultUserDir
setVariable
_defaultUserDir
getAbsolutePath
setVariable
_defaultUserDir
getAbsolutePath
public
File
getDefaultCache
if
_defaultCache
_defaultCache
new
File
getDefaultIvyUserDir
Message
verbose
_defaultCache
return
_defaultCache
public
DependencyResolver
getResolver
ModuleId
moduleId
if
_dictatorResolver
return
_dictatorResolver
String
resolverName
getResolverName
moduleId
return
getResolver
resolverName
public
DependencyResolver
getResolver
String
resolverName
if
_dictatorResolver
return
_dictatorResolver
DependencyResolver
resolver
DependencyResolver
_resolversMap
get
resolverName
if
resolver
Message
error
resolverName
return
resolver
public
DependencyResolver
getDefaultResolver
if
_dictatorResolver
return
_dictatorResolver
if
_defaultResolver
_defaultResolver
DependencyResolver
_resolversMap
get
_defaultResolverName
return
_defaultResolver
public
String
getResolverName
ModuleId
moduleId
for
Iterator
iter
_moduleConfigurations
keySet
iterator
iter
hasNext
ModuleIdMatcher
midm
ModuleIdMatcher
iter
next
if
midm
matches
moduleId
ModuleSettings
ms
ModuleSettings
_moduleConfigurations
get
midm
if
ms
getResolverName
return
ms
getResolverName
return
_defaultResolverName
public
String
getDefaultBranch
ModuleId
moduleId
for
Iterator
iter
_moduleConfigurations
keySet
iterator
iter
hasNext
ModuleIdMatcher
midm
ModuleIdMatcher
iter
next
if
midm
matches
moduleId
ModuleSettings
ms
ModuleSettings
_moduleConfigurations
get
midm
if
ms
getBranch
return
ms
getBranch
return
getDefaultBranch
public
String
getDefaultBranch
return
_defaultBranch
public
void
setDefaultBranch
String
defaultBranch
_defaultBranch
defaultBranch
public
ConflictManager
getConflictManager
ModuleId
moduleId
for
Iterator
iter
_moduleConfigurations
keySet
iterator
iter
hasNext
ModuleIdMatcher
midm
ModuleIdMatcher
iter
next
if
midm
matches
moduleId
ModuleSettings
ms
ModuleSettings
_moduleConfigurations
get
midm
if
ms
getConflictManager
ConflictManager
cm
getConflictManager
ms
getConflictManager
if
cm
throw
new
IllegalStateException
ms
getConflictManager
return
cm
return
getDefaultConflictManager
public
void
addConfigured
ConflictManager
cm
addConflictManager
cm
getName
cm
public
ConflictManager
getConflictManager
String
name
if
equals
name
return
getDefaultConflictManager
return
ConflictManager
_conflictsManager
get
name
public
void
addConflictManager
String
name
ConflictManager
cm
if
cm
instanceof
IvyAware
IvyAware
cm
setIvy
this
_conflictsManager
put
name
cm
public
void
addConfigured
LatestStrategy
latest
addLatestStrategy
latest
getName
latest
public
LatestStrategy
getLatestStrategy
String
name
if
equals
name
return
getDefaultLatestStrategy
return
LatestStrategy
_latestStrategies
get
name
public
void
addLatestStrategy
String
name
LatestStrategy
latest
if
latest
instanceof
IvyAware
IvyAware
latest
setIvy
this
_latestStrategies
put
name
latest
public
void
addConfigured
Namespace
ns
addNamespace
ns
public
Namespace
getNamespace
String
name
if
equals
name
return
getSystemNamespace
return
Namespace
_namespaces
get
name
public
Namespace
getSystemNamespace
return
Namespace
SYSTEM_NAMESPACE
public
void
addNamespace
Namespace
ns
if
ns
instanceof
IvyAware
IvyAware
ns
setIvy
this
_namespaces
put
ns
getName
ns
public
void
addConfigured
PatternMatcher
m
addMatcher
m
public
PatternMatcher
getMatcher
String
name
return
PatternMatcher
_matchers
get
name
public
void
addMatcher
PatternMatcher
m
if
m
instanceof
IvyAware
IvyAware
m
setIvy
this
_matchers
put
m
getName
m
public
void
addConfigured
ReportOutputter
outputter
addReportOutputter
outputter
public
ReportOutputter
getReportOutputter
String
name
return
ReportOutputter
_reportOutputters
get
name
public
void
addReportOutputter
ReportOutputter
outputter
if
outputter
instanceof
IvyAware
IvyAware
outputter
setIvy
this
_reportOutputters
put
outputter
getName
outputter
public
ReportOutputter
getReportOutputters
return
ReportOutputter
_reportOutputters
values
toArray
new
ReportOutputter
_reportOutputters
size
public
void
addConfigured
VersionMatcher
vmatcher
addVersionMatcher
vmatcher
public
VersionMatcher
getVersionMatcher
String
name
return
VersionMatcher
_versionMatchers
get
name
public
void
addVersionMatcher
VersionMatcher
vmatcher
if
vmatcher
instanceof
IvyAware
IvyAware
vmatcher
setIvy
this
_versionMatchers
put
vmatcher
getName
vmatcher
if
_versionMatcher
_versionMatcher
new
ChainVersionMatcher
addVersionMatcher
new
ExactVersionMatcher
if
_versionMatcher
instanceof
ChainVersionMatcher
ChainVersionMatcher
chain
ChainVersionMatcher
_versionMatcher
chain
add
vmatcher
public
VersionMatcher
getVersionMatchers
return
VersionMatcher
_versionMatchers
values
toArray
new
VersionMatcher
_versionMatchers
size
public
VersionMatcher
getVersionMatcher
if
_versionMatcher
configureDefaultVersionMatcher
return
_versionMatcher
public
void
configureDefaultVersionMatcher
addVersionMatcher
new
LatestVersionMatcher
addVersionMatcher
new
SubVersionMatcher
addVersionMatcher
new
VersionRangeMatcher
public
CircularDependencyStrategy
getCircularDependencyStrategy
if
_circularDependencyStrategy
_circularDependencyStrategy
getCircularDependencyStrategy
return
_circularDependencyStrategy
public
CircularDependencyStrategy
getCircularDependencyStrategy
String
name
if
equals
name
name
return
CircularDependencyStrategy
_circularDependencyStrategies
get
name
public
void
setCircularDependencyStrategy
CircularDependencyStrategy
strategy
_circularDependencyStrategy
strategy
public
void
addConfigured
CircularDependencyStrategy
strategy
addCircularDependencyStrategy
strategy
private
void
addCircularDependencyStrategy
CircularDependencyStrategy
strategy
_circularDependencyStrategies
put
strategy
getName
strategy
private
void
configureDefaultCircularDependencyStrategies
addCircularDependencyStrategy
WarnCircularDependencyStrategy
getInstance
addCircularDependencyStrategy
ErrorCircularDependencyStrategy
getInstance
addCircularDependencyStrategy
IgnoreCircularDependencyStrategy
getInstance
public
boolean
check
URL
ivyFile
String
resolvername
try
IvyContext
getContext
setIvy
this
boolean
result
ModuleDescriptor
md
ModuleDescriptorParserRegistry
getInstance
parseDescriptor
this
ivyFile
doValidate
if
resolvername
DependencyResolver
resolver
getResolver
resolvername
String
confs
md
getConfigurationsNames
Set
artifacts
new
HashSet
for
int
i
i
confs
length
i
artifacts
addAll
Arrays
asList
md
getArtifacts
confs
i
for
Iterator
iter
artifacts
iterator
iter
hasNext
Artifact
art
Artifact
iter
next
if
resolver
exists
art
Message
info
art
result
DependencyDescriptor
dds
md
getDependencies
ResolveData
data
new
ResolveData
this
getDefaultCache
new
Date
for
int
i
i
dds
length
i
String
masterConfs
dds
i
getModuleConfigurations
for
int
j
j
masterConfs
length
j
if
equals
masterConfs
j
trim
md
getConfiguration
masterConfs
j
Message
info
ivyFile
dds
i
getDependencyRevisionId
masterConfs
j
result
DependencyResolver
resolver
getResolver
dds
i
getDependencyId
ResolvedModuleRevision
rmr
resolver
getDependency
dds
i
data
if
rmr
Message
info
ivyFile
dds
i
result
else
String
depConfs
dds
i
getDependencyConfigurations
md
getConfigurationsNames
for
int
j
j
depConfs
length
j
if
Arrays
asList
rmr
getDescriptor
getConfigurationsNames
contains
depConfs
j
Message
info
ivyFile
dds
i
getDependencyRevisionId
depConfs
j
result
Artifact
arts
rmr
getDescriptor
getArtifacts
depConfs
j
for
int
k
k
arts
length
k
if
resolver
exists
arts
k
Message
info
ivyFile
dds
i
getDependencyRevisionId
arts
k
result
return
result
catch
ParseException
e
Message
info
ivyFile
e
return
catch
IOException
e
Message
info
ivyFile
e
return
catch
Exception
e
Message
info
ivyFile
e
return
public
ResolvedModuleRevision
findModule
ModuleRevisionId
id
DependencyResolver
r
getResolver
id
getModuleId
if
r
throw
new
IllegalStateException
id
getModuleId
DefaultModuleDescriptor
md
DefaultModuleDescriptor
newCallerInstance
id
new
String
try
return
r
getDependency
new
DefaultDependencyDescriptor
id
new
ResolveData
this
getDefaultCache
new
ConfigurationResolveReport
this
md
getDefaultCache
catch
ParseException
e
throw
new
RuntimeException
id
e
e
public
ResolveReport
resolve
File
ivySource
throws
ParseException
IOException
return
resolve
ivySource
toURL
public
ResolveReport
resolve
URL
ivySource
throws
ParseException
IOException
return
resolve
ivySource
new
String
public
ResolveReport
resolve
URL
ivySource
String
revision
String
confs
File
cache
Date
date
boolean
validate
throws
ParseException
IOException
return
resolve
ivySource
revision
confs
cache
date
validate
public
ResolveReport
resolve
URL
ivySource
String
revision
String
confs
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
throws
ParseException
IOException
return
resolve
ivySource
revision
confs
cache
date
validate
useCacheOnly
FilterHelper
NO_FILTER
public
ResolveReport
resolve
ModuleRevisionId
mrid
String
confs
throws
ParseException
IOException
return
resolve
mrid
confs
FilterHelper
NO_FILTER
public
ResolveReport
resolve
final
ModuleRevisionId
mrid
String
confs
boolean
transitive
boolean
changing
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
Filter
artifactFilter
throws
ParseException
IOException
return
resolve
mrid
confs
transitive
changing
cache
date
validate
useCacheOnly
artifactFilter
public
ResolveReport
resolve
final
ModuleRevisionId
mrid
String
confs
boolean
transitive
boolean
changing
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
boolean
useOrigin
Filter
artifactFilter
throws
ParseException
IOException
DefaultModuleDescriptor
md
if
confs
length
confs
equals
ResolvedModuleRevision
rmr
findModule
mrid
if
rmr
md
DefaultModuleDescriptor
newCallerInstance
mrid
confs
transitive
changing
return
new
ResolveReport
md
public
boolean
hasError
return
public
List
getProblemMessages
return
Arrays
asList
new
String
mrid
else
confs
rmr
getDescriptor
getConfigurationsNames
md
DefaultModuleDescriptor
newCallerInstance
ModuleRevisionId
newInstance
mrid
rmr
getId
getRevision
confs
transitive
changing
else
md
DefaultModuleDescriptor
newCallerInstance
mrid
confs
transitive
changing
return
resolve
md
new
String
cache
date
validate
useCacheOnly
useOrigin
artifactFilter
public
ResolveReport
resolve
URL
ivySource
String
revision
String
confs
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
Filter
artifactFilter
throws
ParseException
IOException
return
resolve
ivySource
revision
confs
cache
date
validate
useCacheOnly
artifactFilter
public
ResolveReport
resolve
URL
ivySource
String
revision
String
confs
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
boolean
transitive
Filter
artifactFilter
throws
ParseException
IOException
return
resolve
ivySource
revision
confs
cache
date
validate
useCacheOnly
transitive
artifactFilter
public
ResolveReport
resolve
URL
ivySource
String
revision
String
confs
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
boolean
transitive
boolean
useOrigin
Filter
artifactFilter
throws
ParseException
IOException
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
URLResource
res
new
URLResource
ivySource
ModuleDescriptorParser
parser
ModuleDescriptorParserRegistry
getInstance
getParser
res
Message
verbose
parser
ivySource
ModuleDescriptor
md
parser
parseDescriptor
this
ivySource
validate
if
revision
md
getResolvedModuleRevisionId
getRevision
revision
getLocalHostName
if
revision
md
setResolvedModuleRevisionId
ModuleRevisionId
newInstance
md
getModuleRevisionId
revision
return
resolve
md
confs
cache
date
validate
useCacheOnly
transitive
useOrigin
artifactFilter
public
ResolveReport
resolve
ModuleDescriptor
md
String
confs
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
Filter
artifactFilter
throws
ParseException
IOException
FileNotFoundException
return
resolve
md
confs
cache
date
validate
useCacheOnly
artifactFilter
public
ResolveReport
resolve
ModuleDescriptor
md
String
confs
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
boolean
transitive
Filter
artifactFilter
throws
ParseException
IOException
FileNotFoundException
return
resolve
md
confs
cache
date
validate
useCacheOnly
transitive
artifactFilter
public
ResolveReport
resolve
ModuleDescriptor
md
String
confs
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
boolean
transitive
boolean
download
boolean
outputReport
Filter
artifactFilter
throws
ParseException
IOException
FileNotFoundException
return
resolve
md
confs
cache
date
validate
useCacheOnly
transitive
download
outputReport
artifactFilter
public
ResolveReport
resolve
ModuleDescriptor
md
String
confs
File
cache
Date
date
boolean
validate
boolean
useCacheOnly
boolean
transitive
boolean
useOrigin
boolean
download
boolean
outputReport
Filter
artifactFilter
throws
ParseException
IOException
FileNotFoundException
IvyContext
getContext
setIvy
this
DependencyResolver
oldDictator
getDictatorResolver
if
useCacheOnly
setDictatorResolver
new
CacheResolver
this
try
if
cache
cache
getDefaultCache
IvyContext
getContext
setCache
cache
if
artifactFilter
artifactFilter
FilterHelper
NO_FILTER
if
confs
length
confs
equals
confs
md
getConfigurationsNames
fireIvyEvent
new
StartResolveEvent
this
md
confs
long
start
System
currentTimeMillis
Message
info
md
getResolvedModuleRevisionId
transitive
Message
info
Arrays
asList
confs
Message
verbose
validate
ResolveReport
report
new
ResolveReport
md
IvyNode
dependencies
getDependencies
md
confs
cache
date
report
validate
transitive
report
setDependencies
Arrays
asList
dependencies
artifactFilter
File
ivyFileInCache
getResolvedIvyFileInCache
cache
md
getResolvedModuleRevisionId
md
toIvyFile
ivyFileInCache
File
ivyPropertiesInCache
getResolvedIvyPropertiesInCache
cache
md
getResolvedModuleRevisionId
Properties
props
new
Properties
if
dependencies
length
IvyNode
root
dependencies
getRoot
for
int
i
i
dependencies
length
i
if
dependencies
i
isCompletelyEvicted
dependencies
i
hasProblem
DependencyDescriptor
dd
dependencies
i
getDependencyDescriptor
root
if
dd
String
rev
dependencies
i
getResolvedId
getRevision
String
status
dependencies
i
getDescriptor
getStatus
props
put
dd
getDependencyRevisionId
encodeToString
rev
status
props
store
new
FileOutputStream
ivyPropertiesInCache
md
getResolvedModuleRevisionId
Message
verbose
ivyFileInCache
report
setResolveTime
System
currentTimeMillis
start
if
download
Message
verbose
downloadArtifacts
report
cache
useOrigin
artifactFilter
if
outputReport
outputReport
report
cache
fireIvyEvent
new
EndResolveEvent
this
md
confs
report
return
report
finally
setDictatorResolver
oldDictator
public
void
outputReport
ResolveReport
report
File
cache
Message
info
report
setProblemMessages
Message
getProblems
report
output
getReportOutputters
cache
Message
verbose
report
getResolveTime
report
getDownloadTime
Message
sumupProblems
public
void
downloadArtifacts
ResolveReport
report
File
cache
boolean
useOrigin
Filter
artifactFilter
long
start
System
currentTimeMillis
IvyNode
dependencies
IvyNode
report
getDependencies
toArray
new
IvyNode
report
getDependencies
size
fireIvyEvent
new
PrepareDownloadEvent
this
Artifact
report
getArtifacts
toArray
new
Artifact
report
getArtifacts
size
for
int
i
i
dependencies
length
i
checkInterrupted
if
dependencies
i
isCompletelyEvicted
dependencies
i
hasProblem
DependencyResolver
resolver
dependencies
i
getModuleRevision
getArtifactResolver
Artifact
selectedArtifacts
dependencies
i
getSelectedArtifacts
artifactFilter
DownloadReport
dReport
resolver
download
selectedArtifacts
this
cache
useOrigin
ArtifactDownloadReport
adrs
dReport
getArtifactsReports
for
int
j
j
adrs
length
j
if
adrs
j
getDownloadStatus
DownloadStatus
FAILED
Message
warn
adrs
j
getArtifact
resolver
reportFailure
adrs
j
getArtifact
String
dconfs
dependencies
i
getRootModuleConfigurations
for
int
j
j
dconfs
length
j
if
dependencies
i
isEvicted
dconfs
j
report
getConfigurationReport
dconfs
j
addDependency
dependencies
i
else
report
getConfigurationReport
dconfs
j
addDependency
dependencies
i
dReport
report
setDownloadTime
System
currentTimeMillis
start
public
void
checkInterrupted
if
isInterrupted
Message
info
throw
new
RuntimeException
public
ArtifactDownloadReport
download
Artifact
artifact
File
cache
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
if
cache
cache
getDefaultCache
DependencyResolver
resolver
getResolver
artifact
getModuleRevisionId
getModuleId
DownloadReport
r
resolver
download
new
Artifact
artifact
this
cache
return
r
getArtifactReport
artifact
public
IvyNode
getDependencies
URL
ivySource
String
confs
File
cache
Date
date
boolean
validate
throws
ParseException
IOException
return
getDependencies
ModuleDescriptorParserRegistry
getInstance
parseDescriptor
this
ivySource
validate
confs
cache
date
validate
public
IvyNode
getDependencies
ModuleDescriptor
md
String
confs
File
cache
Date
date
ResolveReport
report
boolean
validate
return
getDependencies
md
confs
cache
date
report
validate
public
IvyNode
getDependencies
ModuleDescriptor
md
String
confs
File
cache
Date
date
ResolveReport
report
boolean
validate
boolean
transitive
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
if
md
throw
new
NullPointerException
if
cache
cache
getDefaultCache
if
confs
length
confs
equals
confs
md
getConfigurationsNames
Map
dependenciesMap
new
LinkedHashMap
Date
reportDate
new
Date
ResolveData
data
new
ResolveData
this
cache
date
validate
transitive
dependenciesMap
IvyNode
rootNode
new
IvyNode
data
md
for
int
i
i
confs
length
i
_fetchedSet
clear
Configuration
configuration
md
getConfiguration
confs
i
if
configuration
Message
error
md
getModuleRevisionId
confs
i
else
ConfigurationResolveReport
confReport
if
report
confReport
report
getConfigurationReport
confs
i
if
confReport
confReport
new
ConfigurationResolveReport
this
md
confs
i
reportDate
cache
report
addReport
confs
i
confReport
data
setReport
confReport
rootNode
setRootModuleConf
confs
i
rootNode
setRequestedConf
confs
i
rootNode
updateConfsToFetch
Collections
singleton
confs
i
fetchDependencies
rootNode
confs
i
Collection
dependencies
new
LinkedHashSet
dependenciesMap
size
for
Iterator
iter
dependenciesMap
values
iterator
iter
hasNext
IvyNode
dep
IvyNode
iter
next
if
dep
dependencies
add
dep
List
sortedDependencies
sortNodes
dependencies
Collections
reverse
sortedDependencies
for
ListIterator
iter
sortedDependencies
listIterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
if
node
isCompletelyEvicted
for
int
i
i
confs
length
i
IvyNode
Caller
callers
node
getCallers
confs
i
if
debugConflictResolution
Message
debug
node
getId
confs
i
boolean
allEvicted
callers
length
for
int
j
j
callers
length
j
if
callers
j
getModuleRevisionId
equals
md
getModuleRevisionId
allEvicted
break
else
IvyNode
callerNode
IvyNode
dependenciesMap
get
callers
j
getModuleRevisionId
if
callerNode
Message
warn
callers
j
getModuleRevisionId
dependenciesMap
keySet
md
getModuleRevisionId
else
if
callerNode
isEvicted
confs
i
allEvicted
break
else
if
debugConflictResolution
Message
debug
callerNode
getId
node
getId
if
allEvicted
Message
verbose
node
node
markEvicted
confs
i
else
if
debugConflictResolution
Message
debug
node
getId
return
IvyNode
dependencies
toArray
new
IvyNode
dependencies
size
private
void
fetchDependencies
IvyNode
node
String
conf
boolean
shouldBePublic
checkInterrupted
long
start
System
currentTimeMillis
if
debugConflictResolution
Message
debug
node
getId
conf
resolveConflict
node
node
getParent
if
node
loadData
conf
shouldBePublic
node
node
getRealNode
resolveConflict
node
node
getParent
if
node
isEvicted
node
getRootModuleConf
String
confs
node
getRealConfs
conf
for
int
i
i
confs
length
i
doFetchDependencies
node
confs
i
else
if
node
hasProblem
if
node
isEvicted
node
getRootModuleConf
String
confs
node
getRealConfs
conf
for
int
i
i
confs
length
i
doFetchDependencies
node
confs
i
if
node
isEvicted
node
getRootModuleConf
IvyNode
EvictionData
ed
node
getEvictedData
node
getRootModuleConf
if
ed
getSelected
for
Iterator
iter
ed
getSelected
iterator
iter
hasNext
IvyNode
selected
IvyNode
iter
next
fetchDependencies
selected
conf
if
debugConflictResolution
Message
debug
node
getId
conf
System
currentTimeMillis
start
private
void
doFetchDependencies
IvyNode
node
String
conf
Configuration
c
node
getConfiguration
conf
if
c
Message
warn
conf
node
getResolvedId
if
node
getParent
Message
warn
node
getParent
getResolvedId
return
boolean
requestedConfSet
if
node
getRequestedConf
node
setRequestedConf
conf
requestedConfSet
String
extendedConfs
c
getExtends
if
extendedConfs
length
node
updateConfsToFetch
Arrays
asList
extendedConfs
for
int
i
i
extendedConfs
length
i
fetchDependencies
node
extendedConfs
i
DependencyDescriptor
dd
node
getDependencyDescriptor
node
getParent
if
isDependenciesFetched
node
conf
dd
node
isTransitive
Collection
dependencies
node
getDependencies
conf
for
Iterator
iter
dependencies
iterator
iter
hasNext
IvyNode
dep
IvyNode
iter
next
dep
dep
getRealNode
node
traverse
conf
dep
if
dep
isCircular
continue
String
confs
dep
getRequiredConfigurations
node
conf
for
int
i
i
confs
length
i
fetchDependencies
dep
confs
i
confs
dep
getConfsToFetch
for
int
i
i
confs
length
i
fetchDependencies
dep
confs
i
if
requestedConfSet
node
setRequestedConf
private
boolean
isDependenciesFetched
IvyNode
node
String
conf
ModuleId
moduleId
node
getModuleId
ModuleRevisionId
moduleRevisionId
node
getResolvedId
String
key
moduleId
getOrganisation
moduleId
getName
moduleRevisionId
getRevision
conf
if
_fetchedSet
contains
key
return
_fetchedSet
add
key
return
private
void
resolveConflict
IvyNode
node
IvyNode
parent
resolveConflict
node
parent
Collections
EMPTY_SET
private
void
resolveConflict
IvyNode
node
IvyNode
parent
Collection
toevict
if
parent
node
parent
return
if
checkConflictSolved
node
parent
return
Collection
resolvedNodes
new
HashSet
parent
getResolvedNodes
node
getModuleId
node
getRootModuleConf
Collection
conflicts
computeConflicts
node
parent
toevict
resolvedNodes
if
debugConflictResolution
Message
debug
node
parent
conflicts
Collection
resolved
parent
getConflictManager
node
getModuleId
resolveConflicts
parent
conflicts
if
debugConflictResolution
Message
debug
node
parent
resolved
if
resolved
contains
node
toevict
resolvedNodes
toevict
removeAll
resolved
for
Iterator
iter
toevict
iterator
iter
hasNext
IvyNode
te
IvyNode
iter
next
te
markEvicted
node
getRootModuleConf
parent
parent
getConflictManager
node
getModuleId
resolved
if
debugConflictResolution
Message
debug
te
te
getEvictedData
node
getRootModuleConf
parent
setResolvedNodes
node
getModuleId
node
getRootModuleConf
resolved
Collection
evicted
new
HashSet
parent
getEvictedNodes
node
getModuleId
node
getRootModuleConf
evicted
removeAll
resolved
evicted
addAll
toevict
parent
setEvictedNodes
node
getModuleId
node
getRootModuleConf
evicted
resolveConflict
node
parent
getParent
toevict
else
if
resolved
isEmpty
if
debugConflictResolution
Message
verbose
parent
getConflictManager
node
getModuleId
conflicts
Collection
evicted
new
HashSet
parent
getEvictedNodes
node
getModuleId
node
getRootModuleConf
toevict
removeAll
resolved
evicted
removeAll
resolved
evicted
addAll
toevict
evicted
add
node
parent
setEvictedNodes
node
getModuleId
node
getRootModuleConf
evicted
node
markEvicted
node
getRootModuleConf
parent
parent
getConflictManager
node
getModuleId
resolved
if
debugConflictResolution
Message
debug
node
node
getEvictedData
node
getRootModuleConf
Collection
prevResolved
parent
getResolvedNodes
node
getModuleId
node
getRootModuleConf
if
prevResolved
equals
resolved
parent
setResolvedNodes
node
getModuleId
node
getRootModuleConf
resolved
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
sel
IvyNode
iter
next
if
prevResolved
contains
sel
resolveConflict
sel
parent
getParent
toevict
private
Collection
computeConflicts
IvyNode
node
IvyNode
parent
Collection
toevict
Collection
resolvedNodes
Collection
conflicts
new
HashSet
if
resolvedNodes
removeAll
toevict
conflicts
add
node
Collection
deps
parent
getDependencies
parent
getRequiredConfigurations
for
Iterator
iter
deps
iterator
iter
hasNext
IvyNode
dep
IvyNode
iter
next
conflicts
addAll
dep
getResolvedNodes
node
getModuleId
node
getRootModuleConf
else
if
resolvedNodes
isEmpty
node
getParent
parent
conflicts
add
node
DependencyDescriptor
dds
parent
getDescriptor
getDependencies
for
int
i
i
dds
length
i
if
dds
i
getDependencyId
equals
node
getModuleId
IvyNode
n
node
findNode
dds
i
getDependencyRevisionId
if
n
conflicts
add
n
break
else
conflicts
add
node
conflicts
addAll
resolvedNodes
return
conflicts
private
boolean
checkConflictSolved
IvyNode
node
IvyNode
parent
if
parent
getResolvedRevisions
node
getModuleId
node
getRootModuleConf
contains
node
getResolvedId
if
debugConflictResolution
Message
debug
node
parent
EvictionData
evictionData
node
getEvictionDataInRoot
node
getRootModuleConf
parent
if
evictionData
if
debugConflictResolution
Message
debug
node
node
getRootModuleConf
node
markEvicted
evictionData
if
debugConflictResolution
Message
debug
node
evictionData
return
else
if
parent
getEvictedRevisions
node
getModuleId
node
getRootModuleConf
contains
node
getResolvedId
if
debugConflictResolution
Message
debug
node
parent
return
return
public
ResolvedModuleRevision
findModuleInCache
ModuleRevisionId
mrid
File
cache
boolean
validate
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
if
getVersionMatcher
isDynamic
mrid
File
ivyFile
getIvyFileInCache
cache
mrid
if
ivyFile
exists
try
ModuleDescriptor
depMD
XmlModuleDescriptorParser
getInstance
parseDescriptor
this
ivyFile
toURL
validate
String
resolverName
getSavedResolverName
cache
depMD
String
artResolverName
getSavedArtResolverName
cache
depMD
DependencyResolver
resolver
DependencyResolver
_resolversMap
get
resolverName
if
resolver
Message
debug
resolverName
mrid
resolver
getResolver
depMD
getResolvedModuleRevisionId
getModuleId
if
resolver
Message
debug
depMD
getResolvedModuleRevisionId
resolver
getName
saveResolver
cache
depMD
resolver
getName
DependencyResolver
artResolver
DependencyResolver
_resolversMap
get
artResolverName
if
artResolver
artResolver
resolver
if
resolver
Message
debug
mrid
resolver
getName
ivyFile
return
new
DefaultModuleRevision
resolver
artResolver
depMD
ivyFile
toURL
else
Message
debug
resolverName
mrid
catch
Exception
e
Message
debug
mrid
e
getMessage
else
Message
debug
mrid
ivyFile
return
public
ResolveReport
install
ModuleRevisionId
mrid
String
from
String
to
boolean
transitive
boolean
validate
boolean
overwrite
Filter
artifactFilter
File
cache
String
matcherName
throws
IOException
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
if
cache
cache
getDefaultCache
if
artifactFilter
artifactFilter
FilterHelper
NO_FILTER
DependencyResolver
fromResolver
getResolver
from
DependencyResolver
toResolver
getResolver
to
if
fromResolver
throw
new
IllegalArgumentException
from
_resolversMap
keySet
if
toResolver
throw
new
IllegalArgumentException
to
_resolversMap
keySet
PatternMatcher
matcher
getMatcher
matcherName
if
matcher
throw
new
IllegalArgumentException
matcherName
_matchers
keySet
Message
info
mrid
DependencyResolver
oldDicator
getDictatorResolver
boolean
log
logNotConvertedExclusionRule
try
setLogNotConvertedExclusionRule
setDictatorResolver
fromResolver
DefaultModuleDescriptor
md
new
DefaultModuleDescriptor
ModuleRevisionId
newInstance
getStatusManager
getDefaultStatus
new
Date
md
addConfiguration
new
Configuration
md
addConflictManager
new
ModuleId
ExactPatternMatcher
ANY_EXPRESSION
ExactPatternMatcher
ANY_EXPRESSION
ExactPatternMatcher
getInstance
new
NoConflictManager
if
MatcherHelper
isExact
matcher
mrid
DefaultDependencyDescriptor
dd
new
DefaultDependencyDescriptor
md
mrid
transitive
dd
addDependencyConfiguration
md
addDependency
dd
else
Collection
mrids
findModuleRevisionIds
fromResolver
mrid
matcher
for
Iterator
iter
mrids
iterator
iter
hasNext
ModuleRevisionId
foundMrid
ModuleRevisionId
iter
next
Message
info
foundMrid
DefaultDependencyDescriptor
dd
new
DefaultDependencyDescriptor
md
foundMrid
transitive
dd
addDependencyConfiguration
md
addDependency
dd
ResolveReport
report
new
ResolveReport
md
Message
info
IvyNode
dependencies
getDependencies
md
new
String
cache
report
validate
report
setDependencies
Arrays
asList
dependencies
artifactFilter
Message
info
downloadArtifacts
report
cache
artifactFilter
Message
info
to
for
int
i
i
dependencies
length
i
ModuleDescriptor
depmd
dependencies
i
getDescriptor
if
depmd
Message
verbose
depmd
getModuleRevisionId
publish
depmd
toResolver
Collections
singleton
cache
getAbsolutePath
getCacheArtifactPattern
cache
getAbsolutePath
getCacheIvyPattern
overwrite
Message
info
report
output
getReportOutputters
cache
return
report
finally
setDictatorResolver
oldDicator
setLogNotConvertedExclusionRule
log
public
Collection
findModuleRevisionIds
DependencyResolver
resolver
ModuleRevisionId
pattern
PatternMatcher
matcher
IvyContext
getContext
setIvy
this
Collection
mrids
new
ArrayList
String
resolverName
resolver
getName
Message
verbose
pattern
matcher
getName
Namespace
fromNamespace
resolver
instanceof
AbstractResolver
AbstractResolver
resolver
getNamespace
Collection
modules
new
ArrayList
OrganisationEntry
orgs
resolver
listOrganisations
if
orgs
orgs
length
String
org
pattern
getOrganisation
if
fromNamespace
org
NameSpaceHelper
transform
pattern
getModuleId
fromNamespace
getFromSystemTransformer
getOrganisation
modules
addAll
Arrays
asList
resolver
listModules
new
OrganisationEntry
resolver
org
else
Matcher
orgMatcher
matcher
getMatcher
pattern
getOrganisation
for
int
i
i
orgs
length
i
String
org
orgs
i
getOrganisation
String
systemOrg
org
if
fromNamespace
systemOrg
NameSpaceHelper
transformOrganisation
org
fromNamespace
getToSystemTransformer
if
orgMatcher
matches
systemOrg
modules
addAll
Arrays
asList
resolver
listModules
new
OrganisationEntry
resolver
org
Message
debug
modules
size
pattern
getOrganisation
resolverName
boolean
foundModule
for
Iterator
iter
modules
iterator
iter
hasNext
ModuleEntry
mEntry
ModuleEntry
iter
next
ModuleId
foundMid
new
ModuleId
mEntry
getOrganisation
mEntry
getModule
ModuleId
systemMid
foundMid
if
fromNamespace
systemMid
NameSpaceHelper
transform
foundMid
fromNamespace
getToSystemTransformer
if
MatcherHelper
matches
matcher
pattern
getModuleId
systemMid
foundModule
RevisionEntry
rEntries
resolver
listRevisions
mEntry
Message
debug
rEntries
length
mEntry
getOrganisation
mEntry
getModule
resolverName
boolean
foundRevision
for
int
j
j
rEntries
length
j
RevisionEntry
rEntry
rEntries
j
ModuleRevisionId
foundMrid
ModuleRevisionId
newInstance
mEntry
getOrganisation
mEntry
getModule
rEntry
getRevision
ModuleRevisionId
systemMrid
foundMrid
if
fromNamespace
systemMrid
fromNamespace
getToSystemTransformer
transform
foundMrid
if
MatcherHelper
matches
matcher
pattern
systemMrid
foundRevision
mrids
add
systemMrid
if
foundRevision
Message
debug
pattern
mEntry
getOrganisation
mEntry
getModule
resolverName
if
foundModule
Message
debug
pattern
resolverName
return
mrids
public
int
retrieve
ModuleId
moduleId
String
confs
final
File
cache
String
destFilePattern
return
retrieve
moduleId
confs
cache
destFilePattern
public
int
retrieve
ModuleId
moduleId
String
confs
final
File
cache
String
destFilePattern
String
destIvyPattern
return
retrieve
moduleId
confs
cache
destFilePattern
destIvyPattern
FilterHelper
NO_FILTER
public
int
retrieve
ModuleId
moduleId
String
confs
final
File
cache
String
destFilePattern
String
destIvyPattern
Filter
artifactFilter
return
retrieve
moduleId
confs
cache
destFilePattern
destIvyPattern
artifactFilter
public
int
retrieve
ModuleId
moduleId
String
confs
final
File
cache
String
destFilePattern
String
destIvyPattern
Filter
artifactFilter
boolean
sync
boolean
useOrigin
if
artifactFilter
artifactFilter
FilterHelper
NO_FILTER
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
Message
info
moduleId
sync
Message
info
Arrays
asList
confs
long
start
System
currentTimeMillis
destFilePattern
IvyPatternHelper
substituteVariables
destFilePattern
getVariables
destIvyPattern
IvyPatternHelper
substituteVariables
destIvyPattern
getVariables
try
Map
artifactsToCopy
determineArtifactsToCopy
moduleId
confs
cache
destFilePattern
destIvyPattern
artifactFilter
File
fileRetrieveRoot
new
File
IvyPatternHelper
getTokenRoot
destFilePattern
File
ivyRetrieveRoot
destIvyPattern
new
File
IvyPatternHelper
getTokenRoot
destIvyPattern
Collection
targetArtifactsStructure
new
HashSet
Collection
targetIvysStructure
new
HashSet
int
targetsCopied
int
targetsUpToDate
for
Iterator
iter
artifactsToCopy
keySet
iterator
iter
hasNext
Artifact
artifact
Artifact
iter
next
File
archive
if
equals
artifact
getType
archive
getIvyFileInCache
cache
artifact
getModuleRevisionId
else
archive
getArchiveFileInCache
cache
artifact
getSavedArtifactOrigin
cache
artifact
useOrigin
if
useOrigin
archive
exists
archive
getArchiveFileInCache
cache
artifact
getSavedArtifactOrigin
cache
artifact
Set
dest
Set
artifactsToCopy
get
artifact
Message
verbose
archive
for
Iterator
it2
dest
iterator
it2
hasNext
checkInterrupted
File
destFile
new
File
String
it2
next
if
_checkUpToDate
upToDate
archive
destFile
Message
verbose
destFile
FileUtil
copy
archive
destFile
targetsCopied
else
Message
verbose
destFile
targetsUpToDate
if
equals
artifact
getType
targetIvysStructure
addAll
FileUtil
getPathFiles
ivyRetrieveRoot
destFile
else
targetArtifactsStructure
addAll
FileUtil
getPathFiles
fileRetrieveRoot
destFile
if
sync
Message
verbose
Collection
existingArtifacts
FileUtil
listAll
fileRetrieveRoot
Collection
existingIvys
ivyRetrieveRoot
FileUtil
listAll
ivyRetrieveRoot
if
fileRetrieveRoot
equals
ivyRetrieveRoot
Collection
target
targetArtifactsStructure
target
addAll
targetIvysStructure
Collection
existing
existingArtifacts
existing
addAll
existingIvys
sync
target
existing
else
sync
targetArtifactsStructure
existingArtifacts
if
existingIvys
sync
targetIvysStructure
existingIvys
Message
info
targetsCopied
targetsUpToDate
Message
verbose
System
currentTimeMillis
start
return
targetsCopied
catch
Exception
ex
throw
new
RuntimeException
moduleId
ex
ex
private
void
sync
Collection
target
Collection
existing
Collection
toRemove
new
HashSet
for
Iterator
iter
existing
iterator
iter
hasNext
File
file
File
iter
next
toRemove
add
file
getAbsoluteFile
for
Iterator
iter
target
iterator
iter
hasNext
File
file
File
iter
next
toRemove
remove
file
getAbsoluteFile
for
Iterator
iter
toRemove
iterator
iter
hasNext
File
file
File
iter
next
if
file
exists
Message
verbose
file
FileUtil
forceDelete
file
public
Map
determineArtifactsToCopy
ModuleId
moduleId
String
confs
final
File
cache
String
destFilePattern
String
destIvyPattern
throws
ParseException
IOException
return
determineArtifactsToCopy
moduleId
confs
cache
destFilePattern
destIvyPattern
FilterHelper
NO_FILTER
public
Map
determineArtifactsToCopy
ModuleId
moduleId
String
confs
final
File
cache
String
destFilePattern
String
destIvyPattern
Filter
artifactFilter
throws
ParseException
IOException
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
if
artifactFilter
artifactFilter
FilterHelper
NO_FILTER
final
Map
artifactsToCopy
new
HashMap
final
Map
conflictsMap
new
HashMap
final
Map
conflictsConfMap
new
HashMap
XmlReportParser
parser
new
XmlReportParser
for
int
i
i
confs
length
i
final
String
conf
confs
i
Collection
artifacts
new
ArrayList
Arrays
asList
parser
getArtifacts
moduleId
conf
cache
if
destIvyPattern
ModuleRevisionId
mrids
parser
getRealDependencyRevisionIds
moduleId
conf
cache
for
int
j
j
mrids
length
j
artifacts
add
DefaultArtifact
newIvyArtifact
mrids
j
for
Iterator
iter
artifacts
iterator
iter
hasNext
Artifact
artifact
Artifact
iter
next
String
destPattern
equals
artifact
getType
destIvyPattern
destFilePattern
if
equals
artifact
getType
artifactFilter
accept
artifact
continue
String
destFileName
IvyPatternHelper
substitute
destPattern
artifact
conf
Set
dest
Set
artifactsToCopy
get
artifact
if
dest
dest
new
HashSet
artifactsToCopy
put
artifact
dest
String
copyDest
new
File
destFileName
getAbsolutePath
dest
add
copyDest
Set
conflicts
Set
conflictsMap
get
copyDest
Set
conflictsConf
Set
conflictsConfMap
get
copyDest
if
conflicts
conflicts
new
HashSet
conflictsMap
put
copyDest
conflicts
if
conflictsConf
conflictsConf
new
HashSet
conflictsConfMap
put
copyDest
conflictsConf
conflicts
add
artifact
conflictsConf
add
conf
for
Iterator
iter
conflictsMap
keySet
iterator
iter
hasNext
String
copyDest
String
iter
next
Set
artifacts
Set
conflictsMap
get
copyDest
Set
conflictsConfs
Set
conflictsConfMap
get
copyDest
if
artifacts
size
List
artifactsList
new
ArrayList
artifacts
Collections
sort
artifactsList
getConflictResolvingPolicy
Message
info
copyDest
conflictsConfs
Artifact
artifactsList
get
artifactsList
size
getModuleRevisionId
getRevision
for
int
i
artifactsList
size
i
i
Artifact
looser
Artifact
artifactsList
get
i
Message
verbose
looser
Set
dest
Set
artifactsToCopy
get
looser
dest
remove
copyDest
if
dest
isEmpty
artifactsToCopy
remove
looser
return
artifactsToCopy
private
boolean
upToDate
File
source
File
target
if
target
exists
return
return
source
lastModified
target
lastModified
private
Comparator
getConflictResolvingPolicy
return
new
Comparator
public
int
compare
Object
o1
Object
o2
Artifact
a1
Artifact
o1
Artifact
a2
Artifact
o2
if
a1
getPublicationDate
after
a2
getPublicationDate
return
else
if
a1
getPublicationDate
before
a2
getPublicationDate
return
else
return
public
void
deliver
ModuleRevisionId
mrid
String
revision
File
cache
String
destIvyPattern
String
status
Date
pubdate
PublishingDependencyRevisionResolver
pdrResolver
boolean
validate
throws
IOException
ParseException
deliver
mrid
revision
cache
destIvyPattern
status
pubdate
pdrResolver
validate
public
void
deliver
ModuleRevisionId
mrid
String
revision
File
cache
String
destIvyPattern
String
status
Date
pubdate
PublishingDependencyRevisionResolver
pdrResolver
boolean
validate
boolean
resolveDynamicRevisions
throws
IOException
ParseException
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
Message
info
mrid
revision
status
pubdate
Message
verbose
validate
long
start
System
currentTimeMillis
destIvyPattern
substitute
destIvyPattern
File
ivyFile
getResolvedIvyFileInCache
cache
mrid
if
ivyFile
exists
throw
new
IllegalStateException
mrid
ivyFile
ModuleDescriptor
md
URL
ivyFileURL
try
ivyFileURL
ivyFile
toURL
md
XmlModuleDescriptorParser
getInstance
parseDescriptor
this
ivyFileURL
validate
md
setResolvedModuleRevisionId
ModuleRevisionId
newInstance
mrid
revision
md
setResolvedPublicationDate
pubdate
catch
MalformedURLException
e
throw
new
RuntimeException
ivyFile
catch
ParseException
e
throw
new
IllegalStateException
mrid
Map
resolvedRevisions
new
HashMap
Map
dependenciesStatus
new
HashMap
File
ivyProperties
getResolvedIvyPropertiesInCache
cache
mrid
if
ivyProperties
exists
throw
new
IllegalStateException
mrid
ivyFile
Properties
props
new
Properties
props
load
new
FileInputStream
ivyProperties
for
Iterator
iter
props
keySet
iterator
iter
hasNext
String
depMridStr
String
iter
next
String
parts
props
getProperty
depMridStr
split
ModuleRevisionId
decodedMrid
ModuleRevisionId
decode
depMridStr
if
resolveDynamicRevisions
resolvedRevisions
put
decodedMrid
parts
dependenciesStatus
put
decodedMrid
parts
Map
resolvedDependencies
new
HashMap
DependencyDescriptor
dependencies
md
getDependencies
for
int
i
i
dependencies
length
i
String
rev
String
resolvedRevisions
get
dependencies
i
getDependencyRevisionId
if
rev
rev
dependencies
i
getDependencyRevisionId
getRevision
String
depStatus
String
dependenciesStatus
get
dependencies
i
getDependencyRevisionId
resolvedDependencies
put
dependencies
i
getDependencyRevisionId
pdrResolver
resolve
md
status
ModuleRevisionId
newInstance
dependencies
i
getDependencyRevisionId
rev
depStatus
String
publishedIvy
IvyPatternHelper
substitute
destIvyPattern
md
getResolvedModuleRevisionId
Message
info
publishedIvy
try
XmlModuleDescriptorUpdater
update
this
ivyFileURL
new
File
publishedIvy
resolvedDependencies
status
revision
pubdate
catch
SAXException
ex
throw
new
IllegalStateException
mrid
Message
verbose
System
currentTimeMillis
start
public
Collection
publish
ModuleRevisionId
mrid
String
pubrevision
File
cache
String
srcArtifactPattern
String
resolverName
String
srcIvyPattern
boolean
validate
throws
IOException
return
publish
mrid
pubrevision
cache
srcArtifactPattern
resolverName
srcIvyPattern
validate
public
Collection
publish
ModuleRevisionId
mrid
String
pubrevision
File
cache
String
srcArtifactPattern
String
resolverName
String
srcIvyPattern
boolean
validate
boolean
overwrite
throws
IOException
return
publish
mrid
pubrevision
cache
srcArtifactPattern
resolverName
srcIvyPattern
validate
overwrite
public
Collection
publish
ModuleRevisionId
mrid
String
pubrevision
File
cache
String
srcArtifactPattern
String
resolverName
String
srcIvyPattern
String
status
Date
pubdate
Artifact
extraArtifacts
boolean
validate
boolean
overwrite
boolean
update
String
conf
throws
IOException
return
publish
mrid
pubrevision
cache
Collections
singleton
srcArtifactPattern
resolverName
srcIvyPattern
status
pubdate
extraArtifacts
validate
overwrite
update
conf
public
Collection
publish
ModuleRevisionId
mrid
String
pubrevision
File
cache
Collection
srcArtifactPattern
String
resolverName
String
srcIvyPattern
String
status
Date
pubdate
Artifact
extraArtifacts
boolean
validate
boolean
overwrite
boolean
update
String
conf
throws
IOException
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
Message
info
mrid
getModuleId
Message
verbose
validate
long
start
System
currentTimeMillis
srcIvyPattern
substitute
srcIvyPattern
ModuleRevisionId
pubmrid
ModuleRevisionId
newInstance
mrid
pubrevision
File
ivyFile
if
srcIvyPattern
ivyFile
new
File
IvyPatternHelper
substitute
srcIvyPattern
DefaultArtifact
newIvyArtifact
pubmrid
new
Date
if
ivyFile
exists
throw
new
IllegalArgumentException
mrid
ivyFile
else
ivyFile
getResolvedIvyFileInCache
cache
mrid
if
ivyFile
exists
throw
new
IllegalStateException
mrid
ivyFile
ModuleDescriptor
md
URL
ivyFileURL
try
ivyFileURL
ivyFile
toURL
md
XmlModuleDescriptorParser
getInstance
parseDescriptor
this
ivyFileURL
if
srcIvyPattern
if
pubrevision
equals
md
getModuleRevisionId
getRevision
if
update
File
tmp
File
createTempFile
tmp
deleteOnExit
try
XmlModuleDescriptorUpdater
update
this
ivyFileURL
tmp
new
HashMap
status
md
getStatus
status
pubrevision
pubdate
new
Date
pubdate
ivyFile
tmp
md
XmlModuleDescriptorParser
getInstance
parseDescriptor
this
ivyFile
toURL
srcIvyPattern
ivyFile
getAbsolutePath
catch
SAXException
e
throw
new
IllegalStateException
mrid
ivyFile
e
else
throw
new
IllegalArgumentException
ivyFile
pubrevision
else
md
setResolvedModuleRevisionId
pubmrid
catch
MalformedURLException
e
throw
new
RuntimeException
ivyFile
catch
ParseException
e
throw
new
IllegalStateException
mrid
ivyFile
e
DependencyResolver
resolver
getResolver
resolverName
if
resolver
throw
new
IllegalArgumentException
resolverName
Collection
missing
publish
md
resolver
srcArtifactPattern
srcIvyPattern
extraArtifacts
overwrite
conf
Message
verbose
System
currentTimeMillis
start
return
missing
private
Collection
publish
ModuleDescriptor
md
DependencyResolver
resolver
Collection
srcArtifactPattern
String
srcIvyPattern
Artifact
extraArtifacts
boolean
overwrite
String
conf
throws
IOException
Collection
missing
new
ArrayList
Set
artifactsSet
new
HashSet
String
confs
if
conf
equals
conf
confs
md
getConfigurationsNames
else
StringTokenizer
st
new
StringTokenizer
conf
confs
new
String
st
countTokens
int
counter
while
st
hasMoreTokens
confs
counter
st
nextToken
trim
counter
for
int
i
i
confs
length
i
Artifact
artifacts
md
getArtifacts
confs
i
for
int
j
j
artifacts
length
j
artifactsSet
add
artifacts
j
if
extraArtifacts
for
int
i
i
extraArtifacts
length
i
artifactsSet
add
new
MDArtifact
md
extraArtifacts
i
getName
extraArtifacts
i
getType
extraArtifacts
i
getExt
extraArtifacts
i
getUrl
extraArtifacts
i
getExtraAttributes
for
Iterator
iter
artifactsSet
iterator
iter
hasNext
Artifact
artifact
Artifact
iter
next
boolean
published
for
Iterator
iterator
srcArtifactPattern
iterator
iterator
hasNext
published
String
pattern
String
iterator
next
published
publish
artifact
substitute
pattern
resolver
overwrite
if
published
Message
info
artifact
for
Iterator
iterator
srcArtifactPattern
iterator
iterator
hasNext
String
pattern
String
iterator
next
Message
info
new
File
IvyPatternHelper
substitute
pattern
artifact
missing
add
artifact
if
srcIvyPattern
Artifact
artifact
MDArtifact
newIvyArtifact
md
if
publish
artifact
srcIvyPattern
resolver
overwrite
Message
info
md
getModuleRevisionId
new
File
IvyPatternHelper
substitute
srcIvyPattern
artifact
missing
add
artifact
return
missing
private
boolean
publish
Artifact
artifact
String
srcArtifactPattern
DependencyResolver
resolver
boolean
overwrite
throws
IOException
checkInterrupted
File
src
new
File
IvyPatternHelper
substitute
srcArtifactPattern
artifact
if
src
exists
resolver
publish
artifact
src
overwrite
return
else
return
public
List
sortNodes
Collection
nodes
IvyContext
getContext
setIvy
this
return
ModuleDescriptorSorter
sortNodes
getVersionMatcher
nodes
public
List
sortModuleDescriptors
Collection
moduleDescriptors
IvyContext
getContext
setIvy
this
return
ModuleDescriptorSorter
sortModuleDescriptors
getVersionMatcher
moduleDescriptors
public
File
getResolvedIvyFileInCache
File
cache
ModuleRevisionId
mrid
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
return
new
File
cache
IvyPatternHelper
substitute
_cacheResolvedIvyPattern
mrid
getOrganisation
mrid
getName
mrid
getRevision
public
File
getResolvedIvyPropertiesInCache
File
cache
ModuleRevisionId
mrid
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
return
new
File
cache
IvyPatternHelper
substitute
_cacheResolvedIvyPropertiesPattern
mrid
getOrganisation
mrid
getName
mrid
getRevision
public
File
getIvyFileInCache
File
cache
ModuleRevisionId
mrid
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
return
new
File
cache
IvyPatternHelper
substitute
_cacheIvyPattern
DefaultArtifact
newIvyArtifact
mrid
public
File
getArchiveFileInCache
File
cache
Artifact
artifact
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
ArtifactOrigin
origin
getSavedArtifactOrigin
cache
artifact
return
getArchiveFileInCache
cache
artifact
origin
public
File
getArchiveFileInCache
File
cache
Artifact
artifact
ArtifactOrigin
origin
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
File
archive
new
File
cache
getArchivePathInCache
artifact
origin
if
archive
exists
origin
origin
isLocal
File
original
new
File
origin
getLocation
if
original
exists
return
original
return
archive
public
File
getArchiveFileInCache
File
cache
Artifact
artifact
ArtifactOrigin
origin
boolean
useOrigin
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
if
useOrigin
origin
origin
isLocal
return
new
File
origin
getLocation
else
return
new
File
cache
getArchivePathInCache
artifact
origin
public
File
getArchiveFileInCache
File
cache
String
organisation
String
module
String
revision
String
artifact
String
type
String
ext
IvyContext
getContext
setIvy
this
IvyContext
getContext
setCache
cache
return
new
File
cache
getArchivePathInCache
organisation
module
revision
artifact
type
ext
public
String
getArchivePathInCache
Artifact
artifact
IvyContext
getContext
setIvy
this
return
IvyPatternHelper
substitute
_cacheArtifactPattern
artifact
public
String
getArchivePathInCache
Artifact
artifact
ArtifactOrigin
origin
IvyContext
getContext
setIvy
this
return
IvyPatternHelper
substitute
_cacheArtifactPattern
artifact
origin
public
String
getArchivePathInCache
String
organisation
String
module
String
revision
String
artifact
String
type
String
ext
IvyContext
getContext
setIvy
this
return
getArchivePathInCache
new
DefaultArtifact
ModuleRevisionId
newInstance
organisation
module
revision
new
Date
artifact
type
ext
public
void
interrupt
Thread
operatingThread
IvyContext
getContext
getOperatingThread
interrupt
operatingThread
public
void
interrupt
Thread
operatingThread
if
operatingThread
operatingThread
isAlive
if
operatingThread
Thread
currentThread
throw
new
IllegalStateException
Message
verbose
operatingThread
interrupt
synchronized
this
_interrupted
try
Message
verbose
operatingThread
join
_interruptTimeout
catch
InterruptedException
e
if
operatingThread
isAlive
Message
warn
operatingThread
stop
synchronized
this
_interrupted
public
static
String
getLocalHostName
try
return
InetAddress
getLocalHost
getHostName
catch
UnknownHostException
e
return
public
String
listTokenValues
String
token
Map
otherTokenValues
List
r
new
ArrayList
for
Iterator
iter
_resolversMap
values
iterator
iter
hasNext
DependencyResolver
resolver
DependencyResolver
iter
next
r
addAll
Arrays
asList
resolver
listTokenValues
token
otherTokenValues
return
String
r
toArray
new
String
r
size
public
OrganisationEntry
listOrganisationEntries
List
entries
new
ArrayList
for
Iterator
iter
_resolversMap
values
iterator
iter
hasNext
DependencyResolver
resolver
DependencyResolver
iter
next
entries
addAll
Arrays
asList
resolver
listOrganisations
return
OrganisationEntry
entries
toArray
new
OrganisationEntry
entries
size
public
String
listOrganisations
Collection
orgs
new
HashSet
for
Iterator
iter
_resolversMap
values
iterator
iter
hasNext
DependencyResolver
resolver
DependencyResolver
iter
next
OrganisationEntry
entries
resolver
listOrganisations
if
entries
for
int
i
i
entries
length
i
if
entries
i
orgs
add
entries
i
getOrganisation
return
String
orgs
toArray
new
String
orgs
size
public
ModuleEntry
listModuleEntries
OrganisationEntry
org
List
entries
new
ArrayList
for
Iterator
iter
_resolversMap
values
iterator
iter
hasNext
DependencyResolver
resolver
DependencyResolver
iter
next
entries
addAll
Arrays
asList
resolver
listModules
org
return
ModuleEntry
entries
toArray
new
ModuleEntry
entries
size
public
String
listModules
String
org
List
mods
new
ArrayList
for
Iterator
iter
_resolversMap
values
iterator
iter
hasNext
DependencyResolver
resolver
DependencyResolver
iter
next
ModuleEntry
entries
resolver
listModules
new
OrganisationEntry
resolver
org
if
entries
for
int
i
i
entries
length
i
if
entries
i
mods
add
entries
i
getModule
return
String
mods
toArray
new
String
mods
size
public
RevisionEntry
listRevisionEntries
ModuleEntry
module
List
entries
new
ArrayList
for
Iterator
iter
_resolversMap
values
iterator
iter
hasNext
DependencyResolver
resolver
DependencyResolver
iter
next
entries
addAll
Arrays
asList
resolver
listRevisions
module
return
RevisionEntry
entries
toArray
new
RevisionEntry
entries
size
public
String
listRevisions
String
org
String
module
List
revs
new
ArrayList
for
Iterator
iter
_resolversMap
values
iterator
iter
hasNext
DependencyResolver
resolver
DependencyResolver
iter
next
RevisionEntry
entries
resolver
listRevisions
new
ModuleEntry
new
OrganisationEntry
resolver
org
module
if
entries
for
int
i
i
entries
length
i
if
entries
i
revs
add
entries
i
getRevision
return
String
revs
toArray
new
String
revs
size
public
boolean
listingIgnore
String
name
return
_listingIgnore
contains
name
public
void
filterIgnore
Collection
names
names
removeAll
_listingIgnore
public
boolean
isCheckUpToDate
return
_checkUpToDate
public
void
setCheckUpToDate
boolean
checkUpToDate
_checkUpToDate
checkUpToDate
public
String
getCacheArtifactPattern
return
_cacheArtifactPattern
public
void
setCacheArtifactPattern
String
cacheArtifactPattern
_cacheArtifactPattern
cacheArtifactPattern
public
String
getCacheIvyPattern
return
_cacheIvyPattern
public
void
setCacheIvyPattern
String
cacheIvyPattern
_cacheIvyPattern
cacheIvyPattern
public
boolean
doValidate
return
_validate
public
void
setValidate
boolean
validate
_validate
validate
public
String
getVariable
String
name
String
val
String
_variables
get
name
return
val
val
substitute
val
public
ConflictManager
getDefaultConflictManager
if
_defaultConflictManager
_defaultConflictManager
new
LatestConflictManager
getDefaultLatestStrategy
return
_defaultConflictManager
public
void
setDefaultConflictManager
ConflictManager
defaultConflictManager
_defaultConflictManager
defaultConflictManager
public
LatestStrategy
getDefaultLatestStrategy
if
_defaultLatestStrategy
_defaultLatestStrategy
new
LatestRevisionStrategy
return
_defaultLatestStrategy
public
void
setDefaultLatestStrategy
LatestStrategy
defaultLatestStrategy
_defaultLatestStrategy
defaultLatestStrategy
private
EventListenerList
_listeners
new
EventListenerList
private
boolean
_logNotConvertedExclusionRule
private
Boolean
_debugConflictResolution
private
VersionMatcher
_versionMatcher
public
void
addTransferListener
TransferListener
listener
_listeners
add
TransferListener
class
listener
public
void
removeTransferListener
TransferListener
listener
_listeners
remove
TransferListener
class
listener
public
boolean
hasTransferListener
TransferListener
listener
return
Arrays
asList
_listeners
getListeners
TransferListener
class
contains
listener
protected
void
fireTransferEvent
TransferEvent
evt
Object
listeners
_listeners
getListenerList
for
int
i
listeners
length
i
i
if
listeners
i
TransferListener
class
TransferListener
listeners
i
transferProgress
evt
public
void
addTrigger
Trigger
trigger
addIvyListener
trigger
trigger
getEventFilter
public
void
addConfigured
Trigger
trigger
addTrigger
trigger
public
void
addIvyListener
IvyListener
listener
_listeners
add
IvyListener
class
listener
public
void
addIvyListener
IvyListener
listener
String
eventName
addIvyListener
listener
new
IvyEventFilter
eventName
public
void
addIvyListener
IvyListener
listener
Filter
filter
_listeners
add
IvyListener
class
new
FilteredIvyListener
listener
filter
public
void
removeIvyListener
IvyListener
listener
_listeners
remove
IvyListener
class
listener
IvyListener
listeners
IvyListener
_listeners
getListeners
IvyListener
class
for
int
i
i
listeners
length
i
if
listeners
i
instanceof
FilteredIvyListener
if
listener
equals
FilteredIvyListener
listeners
i
getIvyListener
_listeners
remove
IvyListener
class
listeners
i
public
boolean
hasIvyListener
IvyListener
listener
return
Arrays
asList
_listeners
getListeners
IvyListener
class
contains
listener
public
void
fireIvyEvent
IvyEvent
evt
Object
listeners
_listeners
getListenerList
for
int
i
listeners
length
i
i
if
listeners
i
IvyListener
class
IvyListener
listeners
i
progress
evt
public
void
transferProgress
TransferEvent
evt
fireTransferEvent
evt
fireIvyEvent
evt
public
boolean
isUseRemoteConfig
return
_useRemoteConfig
public
void
setUseRemoteConfig
boolean
useRemoteConfig
_useRemoteConfig
useRemoteConfig
public
DependencyResolver
getDictatorResolver
return
_dictatorResolver
public
void
setDictatorResolver
DependencyResolver
dictatorResolver
_dictatorResolver
dictatorResolver
public
void
setVariables
Map
variables
if
variables
throw
new
NullPointerException
_variables
variables
public
static
URL
getDefaultConfigurationURL
return
Ivy
class
getResource
public
void
saveResolver
File
cache
ModuleDescriptor
md
String
name
PropertiesFile
cdf
getCachedDataFile
cache
md
cdf
setProperty
name
cdf
save
public
void
saveArtResolver
File
cache
ModuleDescriptor
md
String
name
PropertiesFile
cdf
getCachedDataFile
cache
md
cdf
setProperty
name
cdf
save
public
void
saveArtifactOrigin
File
cache
Artifact
artifact
ArtifactOrigin
origin
PropertiesFile
cdf
getCachedDataFile
cache
artifact
getModuleRevisionId
cdf
setProperty
artifact
getName
artifact
getExt
String
valueOf
origin
isLocal
cdf
setProperty
artifact
getName
artifact
getExt
origin
getLocation
cdf
save
public
ArtifactOrigin
getSavedArtifactOrigin
File
cache
Artifact
artifact
PropertiesFile
cdf
getCachedDataFile
cache
artifact
getModuleRevisionId
String
location
cdf
getProperty
artifact
getName
artifact
getExt
boolean
isLocal
Boolean
valueOf
cdf
getProperty
artifact
getName
artifact
getExt
booleanValue
if
location
return
return
new
ArtifactOrigin
isLocal
location
public
void
removeSavedArtifactOrigin
File
cache
Artifact
artifact
PropertiesFile
cdf
getCachedDataFile
cache
artifact
getModuleRevisionId
cdf
remove
artifact
getName
artifact
getExt
cdf
remove
artifact
getName
artifact
getExt
cdf
save
private
String
getSavedResolverName
File
cache
ModuleDescriptor
md
PropertiesFile
cdf
getCachedDataFile
cache
md
return
cdf
getProperty
private
String
getSavedArtResolverName
File
cache
ModuleDescriptor
md
PropertiesFile
cdf
getCachedDataFile
cache
md
return
cdf
getProperty
private
PropertiesFile
getCachedDataFile
File
cache
ModuleDescriptor
md
return
getCachedDataFile
cache
md
getResolvedModuleRevisionId
private
PropertiesFile
getCachedDataFile
File
cache
ModuleRevisionId
mRevId
return
new
PropertiesFile
new
File
cache
IvyPatternHelper
substitute
getCacheDataFilePattern
mRevId
mRevId
public
String
getCacheDataFilePattern
return
_cacheDataFilePattern
public
boolean
logModuleWhenFound
String
var
getVariable
return
var
Boolean
valueOf
var
booleanValue
public
boolean
logResolvedRevision
String
var
getVariable
return
var
Boolean
valueOf
var
booleanValue
public
boolean
debugConflictResolution
if
_debugConflictResolution
String
var
getVariable
_debugConflictResolution
Boolean
valueOf
var
Boolean
valueOf
var
booleanValue
return
_debugConflictResolution
booleanValue
public
boolean
logNotConvertedExclusionRule
return
_logNotConvertedExclusionRule
public
void
setLogNotConvertedExclusionRule
boolean
logNotConvertedExclusionRule
_logNotConvertedExclusionRule
logNotConvertedExclusionRule
public
StatusManager
getStatusManager
if
_statusManager
_statusManager
StatusManager
newDefaultInstance
return
_statusManager
public
void
setStatusManager
StatusManager
statusManager
_statusManager
statusManager
private
static
class
ModuleSettings
private
String
_resolverName
private
String
_branch
private
String
_conflictManager
public
ModuleSettings
String
resolverName
String
branch
String
conflictManager
_resolverName
resolverName
_branch
branch
_conflictManager
conflictManager
public
String
toString
return
_resolverName
_resolverName
_branch
_branch
public
String
getBranch
return
_branch
public
String
getResolverName
return
_resolverName
protected
String
getConflictManager
return
_conflictManager
public
synchronized
boolean
isInterrupted
return
_interrupted
public
ModuleId
listModules
ModuleId
criteria
PatternMatcher
matcher
List
ret
new
ArrayList
Matcher
orgMatcher
matcher
getMatcher
criteria
getOrganisation
Matcher
modMatcher
matcher
getMatcher
criteria
getName
Map
tokenValues
new
HashMap
String
orgs
listTokenValues
IvyPatternHelper
ORGANISATION_KEY
tokenValues
for
int
i
i
orgs
length
i
if
orgMatcher
matches
orgs
i
tokenValues
put
IvyPatternHelper
ORGANISATION_KEY
orgs
i
String
mods
listTokenValues
IvyPatternHelper
MODULE_KEY
tokenValues
for
int
j
j
mods
length
j
if
modMatcher
matches
mods
j
ret
add
new
ModuleId
orgs
i
mods
j
return
ModuleId
ret
toArray
new
ModuleId
ret
size
public
ModuleRevisionId
listModules
ModuleRevisionId
criteria
PatternMatcher
matcher
List
ret
new
ArrayList
Matcher
orgMatcher
matcher
getMatcher
criteria
getOrganisation
Matcher
modMatcher
matcher
getMatcher
criteria
getName
Matcher
branchMatcher
matcher
getMatcher
criteria
getBranch
Matcher
revMatcher
matcher
getMatcher
criteria
getRevision
Map
tokenValues
new
HashMap
String
orgs
listTokenValues
IvyPatternHelper
ORGANISATION_KEY
tokenValues
for
int
i
i
orgs
length
i
if
orgMatcher
matches
orgs
i
tokenValues
put
IvyPatternHelper
ORGANISATION_KEY
orgs
i
String
mods
listTokenValues
IvyPatternHelper
MODULE_KEY
tokenValues
for
int
j
j
mods
length
j
if
modMatcher
matches
mods
j
tokenValues
put
IvyPatternHelper
MODULE_KEY
mods
j
String
branches
listTokenValues
IvyPatternHelper
BRANCH_KEY
tokenValues
if
branches
branches
length
branches
new
String
getDefaultBranch
new
ModuleId
orgs
i
mods
j
for
int
k
k
branches
length
k
if
branchMatcher
matches
branches
k
tokenValues
put
IvyPatternHelper
BRANCH_KEY
tokenValues
String
revs
listTokenValues
IvyPatternHelper
REVISION_KEY
tokenValues
for
int
l
l
revs
length
l
if
revMatcher
matches
revs
l
ret
add
ModuleRevisionId
newInstance
orgs
i
mods
j
branches
k
revs
l
return
ModuleRevisionId
ret
toArray
new
ModuleRevisionId
ret
size
