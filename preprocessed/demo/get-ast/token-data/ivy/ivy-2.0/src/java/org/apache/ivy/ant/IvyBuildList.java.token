package
org
apache
ivy
ant
import
java
io
File
import
java
util
ArrayList
import
java
util
Collection
import
java
util
Collections
import
java
util
HashMap
import
java
util
HashSet
import
java
util
Iterator
import
java
util
LinkedHashSet
import
java
util
List
import
java
util
ListIterator
import
java
util
Map
import
java
util
Set
import
java
util
StringTokenizer
import
org
apache
ivy
Ivy
import
org
apache
ivy
core
module
descriptor
DependencyDescriptor
import
org
apache
ivy
core
module
descriptor
ModuleDescriptor
import
org
apache
ivy
core
module
id
ModuleId
import
org
apache
ivy
core
settings
IvySettings
import
org
apache
ivy
core
sort
SortOptions
import
org
apache
ivy
plugins
parser
ModuleDescriptorParserRegistry
import
org
apache
ivy
util
Message
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
DirectoryScanner
import
org
apache
tools
ant
types
FileSet
import
org
apache
tools
ant
types
Path
public
class
IvyBuildList
extends
IvyTask
public
static
final
class
OnMissingDescriptor
public
static
final
String
HEAD
public
static
final
String
TAIL
public
static
final
String
SKIP
public
static
final
String
FAIL
public
static
final
String
WARN
private
OnMissingDescriptor
public
static
final
String
DESCRIPTOR_REQUIRED
private
List
buildFileSets
new
ArrayList
private
String
reference
private
boolean
haltOnError
private
String
onMissingDescriptor
OnMissingDescriptor
HEAD
private
boolean
reverse
private
String
ivyFilePath
private
String
root
private
boolean
excludeRoot
private
String
leaf
private
String
delimiter
private
boolean
excludeLeaf
private
boolean
onlydirectdep
private
String
restartFrom
public
void
addFileset
FileSet
buildFiles
buildFileSets
add
buildFiles
public
String
getReference
return
reference
public
void
setReference
String
reference
this
reference
reference
public
String
getRoot
return
root
public
void
setRoot
String
root
this
root
root
public
boolean
isExcludeRoot
return
excludeRoot
public
void
setExcludeRoot
boolean
root
excludeRoot
root
public
String
getLeaf
return
leaf
public
void
setLeaf
String
leaf
this
leaf
leaf
public
boolean
isExcludeLeaf
return
excludeLeaf
public
void
setExcludeLeaf
boolean
excludeLeaf
this
excludeLeaf
excludeLeaf
public
String
getDelimiter
return
delimiter
public
void
setDelimiter
String
delimiter
this
delimiter
delimiter
public
boolean
getOnlydirectdep
return
onlydirectdep
public
void
setOnlydirectdep
boolean
onlydirectdep
this
onlydirectdep
onlydirectdep
public
void
doExecute
throws
BuildException
if
reference
throw
new
BuildException
if
buildFileSets
isEmpty
throw
new
BuildException
Ivy
ivy
getIvyInstance
IvySettings
settings
ivy
getSettings
ivyFilePath
getProperty
ivyFilePath
settings
Path
path
new
Path
getProject
Map
buildFiles
new
HashMap
List
independent
new
ArrayList
List
noDescriptor
new
ArrayList
Collection
mds
new
ArrayList
Set
rootModuleNames
new
LinkedHashSet
if
equals
root
StringTokenizer
st
new
StringTokenizer
root
delimiter
while
st
hasMoreTokens
rootModuleNames
add
st
nextToken
Set
leafModuleNames
new
LinkedHashSet
if
equals
leaf
StringTokenizer
st
new
StringTokenizer
leaf
delimiter
while
st
hasMoreTokens
leafModuleNames
add
st
nextToken
Set
restartFromModuleNames
new
LinkedHashSet
if
equals
restartFrom
StringTokenizer
st
new
StringTokenizer
restartFrom
delimiter
restartFromModuleNames
add
st
nextToken
for
ListIterator
iter
buildFileSets
listIterator
iter
hasNext
FileSet
fs
FileSet
iter
next
DirectoryScanner
ds
fs
getDirectoryScanner
getProject
String
builds
ds
getIncludedFiles
for
int
i
i
builds
length
i
File
buildFile
new
File
ds
getBasedir
builds
i
File
ivyFile
getIvyFileFor
buildFile
if
ivyFile
exists
onMissingDescriptor
buildFile
ivyFile
noDescriptor
else
try
ModuleDescriptor
md
ModuleDescriptorParserRegistry
getInstance
parseDescriptor
settings
ivyFile
toURI
toURL
doValidate
settings
buildFiles
put
md
buildFile
mds
add
md
Message
debug
md
getModuleRevisionId
getModuleId
catch
Exception
ex
if
haltOnError
throw
new
BuildException
buildFile
ivyFile
ex
ex
else
Message
warn
buildFile
ivyFile
ex
getMessage
Message
info
independent
add
buildFile
List
leafModuleDescriptors
convertModuleNamesToModuleDescriptors
mds
leafModuleNames
List
rootModuleDescriptors
convertModuleNamesToModuleDescriptors
mds
rootModuleNames
List
restartFromModuleDescriptors
convertModuleNamesToModuleDescriptors
mds
restartFromModuleNames
if
rootModuleDescriptors
isEmpty
Message
info
rootModuleNames
mds
filterModulesFromRoot
mds
rootModuleDescriptors
if
leafModuleDescriptors
isEmpty
Message
info
leafModuleNames
mds
filterModulesFromLeaf
mds
leafModuleDescriptors
List
sortedModules
ivy
sortModuleDescriptors
mds
SortOptions
DEFAULT
if
OnMissingDescriptor
TAIL
equals
onMissingDescriptor
for
ListIterator
iter
noDescriptor
listIterator
iter
hasNext
File
buildFile
File
iter
next
addBuildFile
path
buildFile
for
ListIterator
iter
independent
listIterator
iter
hasNext
File
buildFile
File
iter
next
addBuildFile
path
buildFile
if
isReverse
Collections
reverse
sortedModules
if
restartFromModuleDescriptors
isEmpty
boolean
foundRestartFrom
List
keptModules
new
ArrayList
ModuleDescriptor
restartFromModuleDescriptor
ModuleDescriptor
restartFromModuleDescriptors
get
for
ListIterator
iter
sortedModules
listIterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
if
md
equals
restartFromModuleDescriptor
foundRestartFrom
if
foundRestartFrom
keptModules
add
md
sortedModules
keptModules
StringBuffer
order
new
StringBuffer
for
ListIterator
iter
sortedModules
listIterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
order
append
md
getModuleRevisionId
getModuleId
if
iter
hasNext
order
append
File
buildFile
File
buildFiles
get
md
addBuildFile
path
buildFile
if
OnMissingDescriptor
TAIL
equals
onMissingDescriptor
for
ListIterator
iter
noDescriptor
listIterator
iter
hasNext
File
buildFile
File
iter
next
addBuildFile
path
buildFile
getProject
addReference
getReference
path
getProject
setProperty
order
toString
private
void
onMissingDescriptor
File
buildFile
File
ivyFile
List
noDescriptor
if
OnMissingDescriptor
SKIP
equals
onMissingDescriptor
Message
debug
buildFile
ivyFile
else
if
OnMissingDescriptor
FAIL
equals
onMissingDescriptor
throw
new
BuildException
buildFile
ivyFile
else
if
OnMissingDescriptor
WARN
equals
onMissingDescriptor
Message
warn
buildFile
ivyFile
Message
verbose
buildFile
ivyFile
OnMissingDescriptor
TAIL
equals
onMissingDescriptor
Message
verbose
noDescriptor
add
buildFile
private
List
convertModuleNamesToModuleDescriptors
Collection
mds
Set
moduleNames
String
kind
List
result
new
ArrayList
Set
foundModuleNames
new
HashSet
for
Iterator
it
mds
iterator
it
hasNext
ModuleDescriptor
md
ModuleDescriptor
it
next
String
name
md
getModuleRevisionId
getModuleId
getName
if
moduleNames
contains
name
foundModuleNames
add
name
result
add
md
if
foundModuleNames
size
moduleNames
size
Set
missingModules
new
HashSet
moduleNames
missingModules
removeAll
foundModuleNames
StringBuffer
missingNames
new
StringBuffer
String
sep
for
Iterator
it
missingModules
iterator
it
hasNext
missingNames
append
sep
missingNames
append
it
next
sep
throw
new
BuildException
kind
missingNames
toString
return
result
private
Collection
filterModulesFromRoot
Collection
mds
List
rootmds
Map
moduleIdMap
new
HashMap
for
Iterator
iter
mds
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
moduleIdMap
put
md
getModuleRevisionId
getModuleId
md
Set
toKeep
new
LinkedHashSet
Iterator
it
rootmds
iterator
while
it
hasNext
ModuleDescriptor
rootmd
ModuleDescriptor
it
next
processFilterNodeFromRoot
rootmd
toKeep
moduleIdMap
if
excludeRoot
Message
verbose
rootmd
getModuleRevisionId
getModuleId
getName
else
toKeep
add
rootmd
for
Iterator
iter
toKeep
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
Message
verbose
md
getModuleRevisionId
getModuleId
getName
return
toKeep
private
void
processFilterNodeFromRoot
ModuleDescriptor
node
Set
toKeep
Map
moduleIdMap
DependencyDescriptor
deps
node
getDependencies
for
int
i
i
deps
length
i
ModuleId
id
deps
i
getDependencyId
ModuleDescriptor
md
ModuleDescriptor
moduleIdMap
get
id
if
md
toKeep
contains
md
toKeep
add
md
if
getOnlydirectdep
processFilterNodeFromRoot
md
toKeep
moduleIdMap
private
Collection
filterModulesFromLeaf
Collection
mds
List
leafmds
Map
moduleIdMap
new
HashMap
for
Iterator
iter
mds
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
moduleIdMap
put
md
getModuleRevisionId
getModuleId
md
Set
toKeep
new
LinkedHashSet
Iterator
it
leafmds
iterator
while
it
hasNext
ModuleDescriptor
leafmd
ModuleDescriptor
it
next
if
excludeLeaf
Message
verbose
leafmd
getModuleRevisionId
getModuleId
getName
else
toKeep
add
leafmd
processFilterNodeFromLeaf
leafmd
toKeep
moduleIdMap
for
Iterator
iter
toKeep
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
Message
verbose
md
getModuleRevisionId
getModuleId
getName
return
toKeep
private
void
processFilterNodeFromLeaf
ModuleDescriptor
node
Set
toKeep
Map
moduleIdMap
for
Iterator
iter
moduleIdMap
values
iterator
iter
hasNext
ModuleDescriptor
md
ModuleDescriptor
iter
next
DependencyDescriptor
deps
md
getDependencies
for
int
i
i
deps
length
i
ModuleId
id
deps
i
getDependencyId
if
node
getModuleRevisionId
getModuleId
equals
id
toKeep
contains
md
toKeep
add
md
if
getOnlydirectdep
processFilterNodeFromLeaf
md
toKeep
moduleIdMap
private
void
addBuildFile
Path
path
File
buildFile
FileSet
fs
new
FileSet
fs
setFile
buildFile
path
addFileset
fs
private
File
getIvyFileFor
File
buildFile
return
new
File
buildFile
getParentFile
ivyFilePath
public
boolean
isHaltonerror
return
haltOnError
public
void
setHaltonerror
boolean
haltOnError
this
haltOnError
haltOnError
public
String
getIvyfilepath
return
ivyFilePath
public
void
setIvyfilepath
String
ivyFilePath
this
ivyFilePath
ivyFilePath
public
String
getOnMissingDescriptor
return
onMissingDescriptor
public
void
setOnMissingDescriptor
String
onMissingDescriptor
this
onMissingDescriptor
onMissingDescriptor
public
boolean
isSkipbuildwithoutivy
return
onMissingDescriptor
OnMissingDescriptor
SKIP
public
void
setSkipbuildwithoutivy
boolean
skipBuildFilesWithoutIvy
Message
deprecated
this
onMissingDescriptor
skipBuildFilesWithoutIvy
OnMissingDescriptor
SKIP
OnMissingDescriptor
FAIL
public
boolean
isReverse
return
reverse
public
void
setReverse
boolean
reverse
this
reverse
reverse
public
String
getRestartFrom
return
restartFrom
public
void
setRestartFrom
String
restartFrom
this
restartFrom
restartFrom
