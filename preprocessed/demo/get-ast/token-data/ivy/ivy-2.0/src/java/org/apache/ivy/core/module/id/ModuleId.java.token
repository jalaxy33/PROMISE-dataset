package
org
apache
ivy
core
module
id
import
java
util
HashMap
import
java
util
Map
import
java
util
WeakHashMap
import
java
util
regex
Matcher
import
java
util
regex
Pattern
import
org
apache
ivy
core
IvyPatternHelper
public
class
ModuleId
implements
Comparable
static
final
String
ENCODE_SEPARATOR
private
static
final
Map
CACHE
new
WeakHashMap
public
static
ModuleId
newInstance
String
org
String
name
return
intern
new
ModuleId
org
name
public
static
ModuleId
intern
ModuleId
moduleId
ModuleId
r
ModuleId
CACHE
get
moduleId
if
r
r
moduleId
CACHE
put
r
r
return
r
private
String
organisation
private
String
name
private
int
hash
private
Map
attributes
new
HashMap
public
ModuleId
String
organisation
String
name
if
name
throw
new
IllegalArgumentException
this
organisation
organisation
this
name
name
attributes
put
IvyPatternHelper
ORGANISATION_KEY
organisation
attributes
put
IvyPatternHelper
MODULE_KEY
name
public
String
getName
return
name
public
String
getOrganisation
return
organisation
public
boolean
equals
Object
obj
if
obj
instanceof
ModuleId
return
ModuleId
other
ModuleId
obj
if
other
organisation
return
organisation
other
name
equals
name
else
return
other
organisation
equals
organisation
other
name
equals
name
public
int
hashCode
if
hash
hash
hash
hash
organisation
organisation
hashCode
hash
hash
name
hashCode
return
hash
public
String
toString
return
organisation
name
public
int
compareTo
Object
obj
ModuleId
that
ModuleId
obj
int
result
organisation
compareTo
that
organisation
if
result
result
name
compareTo
that
name
return
result
public
String
encodeToString
return
getOrganisation
ENCODE_SEPARATOR
getName
public
Map
getAttributes
return
attributes
public
static
ModuleId
decode
String
encoded
String
parts
encoded
split
ENCODE_SEPARATOR
if
parts
length
throw
new
IllegalArgumentException
encoded
return
new
ModuleId
parts
parts
public
static
final
Pattern
MID_PATTERN
Pattern
compile
ModuleRevisionId
STRICT_CHARS_PATTERN
ModuleRevisionId
STRICT_CHARS_PATTERN
public
static
ModuleId
parse
String
mid
Matcher
m
MID_PATTERN
matcher
mid
if
m
matches
throw
new
IllegalArgumentException
mid
MID_PATTERN
pattern
return
newInstance
m
group
m
group
