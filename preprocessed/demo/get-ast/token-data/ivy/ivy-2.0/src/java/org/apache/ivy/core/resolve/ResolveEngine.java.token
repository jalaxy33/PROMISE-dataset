package
org
apache
ivy
core
resolve
import
java
io
File
import
java
io
FileOutputStream
import
java
io
IOException
import
java
net
URL
import
java
text
ParseException
import
java
util
ArrayList
import
java
util
Arrays
import
java
util
Collection
import
java
util
Collections
import
java
util
Date
import
java
util
HashSet
import
java
util
Iterator
import
java
util
LinkedHashSet
import
java
util
List
import
java
util
ListIterator
import
java
util
Properties
import
java
util
Set
import
org
apache
ivy
Ivy
import
org
apache
ivy
core
IvyContext
import
org
apache
ivy
core
LogOptions
import
org
apache
ivy
core
cache
ArtifactOrigin
import
org
apache
ivy
core
cache
ResolutionCacheManager
import
org
apache
ivy
core
event
EventManager
import
org
apache
ivy
core
event
download
PrepareDownloadEvent
import
org
apache
ivy
core
event
resolve
EndResolveEvent
import
org
apache
ivy
core
event
resolve
StartResolveEvent
import
org
apache
ivy
core
module
descriptor
Artifact
import
org
apache
ivy
core
module
descriptor
Configuration
import
org
apache
ivy
core
module
descriptor
DefaultDependencyDescriptor
import
org
apache
ivy
core
module
descriptor
DefaultModuleDescriptor
import
org
apache
ivy
core
module
descriptor
DependencyDescriptor
import
org
apache
ivy
core
module
descriptor
ModuleDescriptor
import
org
apache
ivy
core
module
id
ModuleRevisionId
import
org
apache
ivy
core
report
ArtifactDownloadReport
import
org
apache
ivy
core
report
ConfigurationResolveReport
import
org
apache
ivy
core
report
DownloadReport
import
org
apache
ivy
core
report
DownloadStatus
import
org
apache
ivy
core
report
ResolveReport
import
org
apache
ivy
core
resolve
IvyNodeEviction
EvictionData
import
org
apache
ivy
core
sort
SortEngine
import
org
apache
ivy
core
sort
SortOptions
import
org
apache
ivy
plugins
conflict
ConflictManager
import
org
apache
ivy
plugins
parser
ModuleDescriptorParser
import
org
apache
ivy
plugins
parser
ModuleDescriptorParserRegistry
import
org
apache
ivy
plugins
repository
url
URLResource
import
org
apache
ivy
plugins
resolver
CacheResolver
import
org
apache
ivy
plugins
resolver
DependencyResolver
import
org
apache
ivy
plugins
version
VersionMatcher
import
org
apache
ivy
util
Message
import
org
apache
ivy
util
filter
Filter
public
class
ResolveEngine
private
ResolveEngineSettings
settings
private
EventManager
eventManager
private
SortEngine
sortEngine
private
Set
fetchedSet
new
HashSet
private
DependencyResolver
dictatorResolver
public
ResolveEngine
ResolveEngineSettings
settings
EventManager
eventManager
SortEngine
sortEngine
this
settings
settings
this
eventManager
eventManager
this
sortEngine
sortEngine
public
DependencyResolver
getDictatorResolver
return
dictatorResolver
public
void
setDictatorResolver
DependencyResolver
dictatorResolver
this
dictatorResolver
dictatorResolver
settings
setDictatorResolver
dictatorResolver
public
ResolveReport
resolve
File
ivySource
throws
ParseException
IOException
return
resolve
ivySource
toURI
toURL
public
ResolveReport
resolve
URL
ivySource
throws
ParseException
IOException
return
resolve
ivySource
new
ResolveOptions
public
ResolveReport
resolve
final
ModuleRevisionId
mrid
ResolveOptions
options
boolean
changing
throws
ParseException
IOException
DefaultModuleDescriptor
md
ResolveOptions
optionsToUse
new
ResolveOptions
options
if
options
useSpecialConfs
ResolvedModuleRevision
rmr
findModule
mrid
new
ResolveOptions
options
if
rmr
Message
verbose
mrid
optionsToUse
setLog
LogOptions
LOG_DOWNLOAD_ONLY
md
DefaultModuleDescriptor
newCallerInstance
mrid
new
String
options
isTransitive
changing
else
String
confs
options
getConfs
rmr
getDescriptor
md
DefaultModuleDescriptor
newCallerInstance
ModuleRevisionId
newInstance
mrid
rmr
getId
getRevision
confs
options
isTransitive
changing
else
md
DefaultModuleDescriptor
newCallerInstance
mrid
options
getConfs
options
isTransitive
changing
return
resolve
md
optionsToUse
public
ResolveReport
resolve
URL
ivySource
ResolveOptions
options
throws
ParseException
IOException
URLResource
res
new
URLResource
ivySource
ModuleDescriptorParser
parser
ModuleDescriptorParserRegistry
getInstance
getParser
res
Message
verbose
parser
ivySource
ModuleDescriptor
md
parser
parseDescriptor
settings
ivySource
options
isValidate
String
revision
options
getRevision
if
revision
md
getResolvedModuleRevisionId
getRevision
revision
Ivy
getWorkingRevision
if
revision
md
setResolvedModuleRevisionId
ModuleRevisionId
newInstance
md
getModuleRevisionId
revision
return
resolve
md
options
public
ResolveReport
resolve
ModuleDescriptor
md
ResolveOptions
options
throws
ParseException
IOException
DependencyResolver
oldDictator
getDictatorResolver
IvyContext
context
IvyContext
getContext
if
options
isUseCacheOnly
setDictatorResolver
new
CacheResolver
settings
try
String
confs
options
getConfs
md
options
setConfs
confs
if
options
getResolveId
options
setResolveId
ResolveOptions
getDefaultResolveId
md
eventManager
fireIvyEvent
new
StartResolveEvent
md
confs
long
start
System
currentTimeMillis
if
ResolveOptions
LOG_DEFAULT
equals
options
getLog
Message
info
md
getResolvedModuleRevisionId
options
isTransitive
Message
info
Arrays
asList
confs
else
Message
verbose
md
getResolvedModuleRevisionId
options
isTransitive
Message
verbose
Arrays
asList
confs
Message
verbose
options
isValidate
Message
verbose
options
isRefresh
ResolveReport
report
new
ResolveReport
md
options
getResolveId
ResolveData
data
new
ResolveData
this
options
context
setResolveData
data
IvyNode
dependencies
getDependencies
md
options
report
report
setDependencies
Arrays
asList
dependencies
options
getArtifactFilter
if
options
getCheckIfChanged
report
checkIfChanged
ResolutionCacheManager
cacheManager
settings
getResolutionCacheManager
File
ivyFileInCache
cacheManager
getResolvedIvyFileInCache
md
getResolvedModuleRevisionId
md
toIvyFile
ivyFileInCache
File
ivyPropertiesInCache
cacheManager
getResolvedIvyPropertiesInCache
md
getResolvedModuleRevisionId
Properties
props
new
Properties
if
dependencies
length
IvyNode
root
dependencies
getRoot
for
int
i
i
dependencies
length
i
if
dependencies
i
hasProblem
DependencyDescriptor
dd
dependencies
i
getDependencyDescriptor
root
if
dd
ModuleRevisionId
depResolvedId
dependencies
i
getResolvedId
ModuleDescriptor
depDescriptor
dependencies
i
getDescriptor
ModuleRevisionId
depRevisionId
dd
getDependencyRevisionId
if
depResolvedId
throw
new
NullPointerException
dependencies
i
toString
if
depRevisionId
throw
new
NullPointerException
dd
toString
String
rev
depResolvedId
getRevision
String
status
depDescriptor
depDescriptor
getStatus
props
put
depRevisionId
encodeToString
rev
status
FileOutputStream
out
new
FileOutputStream
ivyPropertiesInCache
props
store
out
md
getResolvedModuleRevisionId
out
close
Message
verbose
ivyFileInCache
report
setResolveTime
System
currentTimeMillis
start
if
options
isDownload
Message
verbose
downloadArtifacts
report
options
getArtifactFilter
DownloadOptions
new
DownloadOptions
setLog
options
getLog
if
options
isOutputReport
outputReport
report
cacheManager
options
Message
verbose
report
getResolveTime
report
getDownloadTime
Message
sumupProblems
eventManager
fireIvyEvent
new
EndResolveEvent
md
confs
report
return
report
catch
RuntimeException
ex
Message
error
ex
getMessage
Message
sumupProblems
throw
ex
finally
context
setResolveData
setDictatorResolver
oldDictator
public
void
outputReport
ResolveReport
report
ResolutionCacheManager
cacheMgr
ResolveOptions
options
throws
IOException
if
ResolveOptions
LOG_DEFAULT
equals
options
getLog
Message
info
report
getResolveTime
report
getDownloadTime
else
Message
verbose
report
getResolveTime
report
getDownloadTime
report
setProblemMessages
Message
getProblems
report
output
settings
getReportOutputters
cacheMgr
options
public
void
downloadArtifacts
ResolveReport
report
Filter
artifactFilter
DownloadOptions
options
long
start
System
currentTimeMillis
IvyNode
dependencies
IvyNode
report
getDependencies
toArray
new
IvyNode
report
getDependencies
size
eventManager
fireIvyEvent
new
PrepareDownloadEvent
Artifact
report
getArtifacts
toArray
new
Artifact
report
getArtifacts
size
long
totalSize
for
int
i
i
dependencies
length
i
checkInterrupted
if
dependencies
i
isCompletelyEvicted
dependencies
i
hasProblem
dependencies
i
getModuleRevision
DependencyResolver
resolver
dependencies
i
getModuleRevision
getArtifactResolver
Artifact
selectedArtifacts
dependencies
i
getSelectedArtifacts
artifactFilter
DownloadReport
dReport
resolver
download
selectedArtifacts
options
ArtifactDownloadReport
adrs
dReport
getArtifactsReports
for
int
j
j
adrs
length
j
if
adrs
j
getDownloadStatus
DownloadStatus
FAILED
if
adrs
j
getArtifact
getExtraAttribute
Message
warn
adrs
j
getArtifact
adrs
j
getArtifact
getExtraAttribute
else
Message
warn
adrs
j
resolver
reportFailure
adrs
j
getArtifact
else
if
adrs
j
getDownloadStatus
DownloadStatus
SUCCESSFUL
totalSize
adrs
j
getSize
String
dconfs
dependencies
i
getRootModuleConfigurations
for
int
j
j
dconfs
length
j
if
dependencies
i
isEvicted
dconfs
j
dependencies
i
isBlacklisted
dconfs
j
report
getConfigurationReport
dconfs
j
addDependency
dependencies
i
else
report
getConfigurationReport
dconfs
j
addDependency
dependencies
i
dReport
report
setDownloadTime
System
currentTimeMillis
start
report
setDownloadSize
totalSize
public
ArtifactDownloadReport
download
Artifact
artifact
DownloadOptions
options
DependencyResolver
resolver
settings
getResolver
artifact
getModuleRevisionId
DownloadReport
r
resolver
download
new
Artifact
artifact
options
return
r
getArtifactReport
artifact
public
ArtifactOrigin
locate
Artifact
artifact
DependencyResolver
resolver
settings
getResolver
artifact
getModuleRevisionId
return
resolver
locate
artifact
public
ArtifactDownloadReport
download
ArtifactOrigin
origin
DownloadOptions
options
DependencyResolver
resolver
settings
getResolver
origin
getArtifact
getModuleRevisionId
return
resolver
download
origin
options
public
IvyNode
getDependencies
URL
ivySource
ResolveOptions
options
throws
ParseException
IOException
return
getDependencies
ModuleDescriptorParserRegistry
getInstance
parseDescriptor
settings
ivySource
options
isValidate
options
public
IvyNode
getDependencies
ModuleDescriptor
md
ResolveOptions
options
ResolveReport
report
if
md
throw
new
NullPointerException
String
confs
options
getConfs
md
Collection
missingConfs
new
ArrayList
for
int
i
i
confs
length
i
if
confs
i
throw
new
NullPointerException
Arrays
asList
confs
if
md
getConfiguration
confs
i
missingConfs
add
confs
i
if
missingConfs
isEmpty
throw
new
IllegalArgumentException
missingConfs
size
md
getModuleRevisionId
missingConfs
IvyContext
context
IvyContext
pushNewCopyContext
try
options
setConfs
confs
Date
reportDate
new
Date
ResolveData
data
context
getResolveData
if
data
data
new
ResolveData
this
options
context
setResolveData
data
IvyNode
rootNode
new
IvyNode
data
md
for
int
i
i
confs
length
i
Message
verbose
confs
i
fetchedSet
clear
ConfigurationResolveReport
confReport
if
report
confReport
report
getConfigurationReport
confs
i
if
confReport
confReport
new
ConfigurationResolveReport
this
md
confs
i
reportDate
options
report
addReport
confs
i
confReport
data
setReport
confReport
VisitNode
root
new
VisitNode
data
rootNode
confs
i
root
setRequestedConf
confs
i
rootNode
updateConfsToFetch
Collections
singleton
confs
i
boolean
fetched
while
fetched
try
fetchDependencies
root
confs
i
fetched
catch
RestartResolveProcess
restart
Message
verbose
Message
verbose
Message
verbose
restart
getMessage
Message
verbose
fetchedSet
clear
for
Iterator
iter
data
getNodes
iterator
iter
hasNext
IvyNode
dep
IvyNode
iter
next
dep
clean
Collection
nodes
data
getNodes
Collection
dependencies
new
LinkedHashSet
nodes
size
for
Iterator
iter
nodes
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
if
node
node
isRoot
node
isCompletelyBlacklisted
dependencies
add
node
List
sortedDependencies
sortEngine
sortNodes
dependencies
SortOptions
SILENT
Collections
reverse
sortedDependencies
handleTransiviteEviction
md
confs
data
sortedDependencies
return
IvyNode
dependencies
toArray
new
IvyNode
dependencies
size
finally
IvyContext
popContext
private
void
handleTransiviteEviction
ModuleDescriptor
md
String
confs
ResolveData
data
List
sortedDependencies
for
ListIterator
iter
sortedDependencies
listIterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
if
node
isCompletelyEvicted
for
int
i
i
confs
length
i
IvyNodeCallers
Caller
callers
node
getCallers
confs
i
if
settings
debugConflictResolution
Message
debug
node
getId
confs
i
boolean
allEvicted
callers
length
for
int
j
j
callers
length
j
if
callers
j
getModuleRevisionId
equals
md
getModuleRevisionId
allEvicted
break
else
IvyNode
callerNode
data
getNode
callers
j
getModuleRevisionId
if
callerNode
Message
warn
callers
j
getModuleRevisionId
data
getNodeIds
md
getModuleRevisionId
else
if
callerNode
isEvicted
confs
i
allEvicted
break
else
if
settings
debugConflictResolution
Message
debug
callerNode
getId
node
getId
if
allEvicted
Message
verbose
node
node
markEvicted
confs
i
else
if
settings
debugConflictResolution
Message
debug
node
getId
private
void
fetchDependencies
VisitNode
node
String
conf
boolean
shouldBePublic
checkInterrupted
long
start
System
currentTimeMillis
if
node
getParent
Message
verbose
node
getParent
getId
node
getId
node
getParentConf
conf
else
Message
verbose
node
getId
conf
ResolveData
data
node
getNode
getData
VisitNode
parentVisitNode
data
getCurrentVisitNode
data
setCurrentVisitNode
node
DependencyDescriptor
dd
node
getDependencyDescriptor
VersionMatcher
versionMatcher
node
getNode
getData
getSettings
getVersionMatcher
if
dd
node
getRoot
node
getParent
versionMatcher
isDynamic
dd
getDependencyRevisionId
resolveConflict
node
conf
if
node
loadData
conf
shouldBePublic
resolveConflict
node
conf
if
node
isEvicted
node
isCircular
String
confs
node
getRealConfs
conf
for
int
i
i
confs
length
i
doFetchDependencies
node
confs
i
else
if
node
hasProblem
if
node
isEvicted
node
isCircular
String
confs
node
getRealConfs
conf
for
int
i
i
confs
length
i
doFetchDependencies
node
confs
i
if
node
isEvicted
EvictionData
ed
node
getEvictedData
if
ed
getSelected
for
Iterator
iter
ed
getSelected
iterator
iter
hasNext
IvyNode
selected
IvyNode
iter
next
if
selected
isLoaded
selected
updateConfsToFetch
Collections
singleton
conf
else
fetchDependencies
node
gotoNode
selected
conf
if
settings
debugConflictResolution
Message
debug
node
getId
conf
System
currentTimeMillis
start
data
setCurrentVisitNode
parentVisitNode
private
void
doFetchDependencies
VisitNode
node
String
conf
Configuration
c
node
getConfiguration
conf
if
c
if
node
isConfRequiredByMergedUsageOnly
conf
Message
warn
conf
node
getResolvedId
if
node
getParent
Message
warn
node
getParent
getResolvedId
return
boolean
requestedConfSet
if
node
getRequestedConf
node
setRequestedConf
conf
requestedConfSet
String
extendedConfs
c
getExtends
if
extendedConfs
length
node
updateConfsToFetch
Arrays
asList
extendedConfs
for
int
i
i
extendedConfs
length
i
fetchDependencies
node
extendedConfs
i
DependencyDescriptor
dd
node
getDependencyDescriptor
if
isDependenciesFetched
node
getNode
conf
dd
node
isTransitive
Collection
dependencies
node
getDependencies
conf
for
Iterator
iter
dependencies
iterator
iter
hasNext
VisitNode
dep
VisitNode
iter
next
dep
useRealNode
String
confs
dep
getRequiredConfigurations
node
conf
for
int
i
i
confs
length
i
fetchDependencies
dep
confs
i
if
dep
isEvicted
dep
hasProblem
confs
dep
getConfsToFetch
for
int
i
i
confs
length
i
fetchDependencies
dep
confs
i
markDependenciesFetched
node
getNode
conf
if
requestedConfSet
node
setRequestedConf
private
boolean
isDependenciesFetched
IvyNode
node
String
conf
String
key
getDependenciesFetchedKey
node
conf
return
fetchedSet
contains
key
private
void
markDependenciesFetched
IvyNode
node
String
conf
String
key
getDependenciesFetchedKey
node
conf
fetchedSet
add
key
private
String
getDependenciesFetchedKey
IvyNode
node
String
conf
ModuleRevisionId
moduleRevisionId
node
getResolvedId
String
key
moduleRevisionId
getOrganisation
moduleRevisionId
getName
moduleRevisionId
getRevision
conf
return
key
private
void
resolveConflict
VisitNode
node
String
conf
resolveConflict
node
node
getParent
conf
Collections
EMPTY_SET
private
boolean
resolveConflict
VisitNode
node
VisitNode
ancestor
String
conf
Collection
toevict
if
ancestor
node
ancestor
return
if
checkConflictSolvedEvicted
node
ancestor
return
boolean
debugConflictResolution
settings
debugConflictResolution
if
checkConflictSolvedSelected
node
ancestor
if
resolveConflict
node
ancestor
getParent
conf
toevict
EvictionData
evictionData
node
getEvictionDataInRoot
node
getRootModuleConf
ancestor
if
evictionData
if
debugConflictResolution
Message
debug
node
node
getRootModuleConf
node
markEvicted
evictionData
if
debugConflictResolution
Message
debug
node
evictionData
return
else
return
Set
resolvedNodes
ancestor
getNode
getResolvedNodes
node
getModuleId
node
getRootModuleConf
resolvedNodes
addAll
ancestor
getNode
getPendingConflicts
node
getRootModuleConf
node
getModuleId
Collection
conflicts
computeConflicts
node
ancestor
conf
toevict
resolvedNodes
ConflictManager
conflictManager
ancestor
getNode
getConflictManager
node
getModuleId
Collection
resolved
resolveConflicts
node
ancestor
conflicts
conflictManager
if
resolved
if
debugConflictResolution
Message
debug
node
ancestor
Message
debug
conflicts
ancestor
getNode
setPendingConflicts
node
getModuleId
node
getRootModuleConf
conflicts
return
if
debugConflictResolution
Message
debug
node
ancestor
resolved
if
resolved
contains
node
getNode
toevict
resolvedNodes
toevict
removeAll
resolved
for
Iterator
iter
toevict
iterator
iter
hasNext
IvyNode
te
IvyNode
iter
next
te
markEvicted
node
getRootModuleConf
ancestor
getNode
conflictManager
resolved
if
debugConflictResolution
Message
debug
te
te
getEvictedData
node
getRootModuleConf
ancestor
getNode
setResolvedNodes
node
getModuleId
node
getRootModuleConf
resolved
Collection
evicted
new
HashSet
ancestor
getNode
getEvictedNodes
node
getModuleId
node
getRootModuleConf
evicted
removeAll
resolved
evicted
addAll
toevict
ancestor
getNode
setEvictedNodes
node
getModuleId
node
getRootModuleConf
evicted
ancestor
getNode
setPendingConflicts
node
getModuleId
node
getRootModuleConf
Collections
EMPTY_SET
return
resolveConflict
node
ancestor
getParent
conf
toevict
else
if
resolved
isEmpty
if
debugConflictResolution
Message
verbose
conflictManager
conflicts
Collection
evicted
new
HashSet
ancestor
getNode
getEvictedNodes
node
getModuleId
node
getRootModuleConf
toevict
removeAll
resolved
evicted
removeAll
resolved
evicted
addAll
toevict
evicted
add
node
getNode
ancestor
getNode
setEvictedNodes
node
getModuleId
node
getRootModuleConf
evicted
ancestor
getNode
setPendingConflicts
node
getModuleId
node
getRootModuleConf
Collections
EMPTY_SET
node
markEvicted
ancestor
conflictManager
resolved
if
debugConflictResolution
Message
debug
node
node
getEvictedData
Collection
prevResolved
ancestor
getNode
getResolvedNodes
node
getModuleId
node
getRootModuleConf
boolean
solved
if
prevResolved
equals
resolved
ancestor
getNode
setResolvedNodes
node
getModuleId
node
getRootModuleConf
resolved
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
sel
IvyNode
iter
next
if
prevResolved
contains
sel
solved
resolveConflict
node
gotoNode
sel
ancestor
getParent
conf
toevict
return
solved
private
Collection
resolveConflicts
VisitNode
node
VisitNode
ancestor
Collection
conflicts
ConflictManager
conflictManager
if
node
getParent
ancestor
conflictManager
settings
getConflictManager
node
getModuleId
node
getParent
getNode
getResolvedNodes
node
getModuleId
node
getRootModuleConf
equals
conflicts
if
settings
debugConflictResolution
Message
debug
node
ancestor
conflicts
return
conflicts
else
if
settings
debugConflictResolution
Message
debug
node
ancestor
conflicts
return
conflictManager
resolveConflicts
ancestor
getNode
conflicts
private
Collection
computeConflicts
VisitNode
node
VisitNode
ancestor
String
conf
Collection
toevict
Collection
selectedNodes
Collection
conflicts
new
LinkedHashSet
conflicts
add
node
getNode
if
selectedNodes
removeAll
toevict
selectedNodes
isEmpty
node
getParent
getNode
equals
ancestor
getNode
Collection
deps
ancestor
getNode
getDependencies
node
getRootModuleConf
ancestor
getNode
getConfigurations
node
getRootModuleConf
for
Iterator
iter
deps
iterator
iter
hasNext
IvyNode
dep
IvyNode
iter
next
if
dep
getModuleId
equals
node
getModuleId
conflicts
add
dep
conflicts
addAll
dep
getResolvedNodes
node
getModuleId
node
getRootModuleConf
else
if
selectedNodes
isEmpty
Collection
parentDepIvyNodes
node
getParent
getNode
getDependencies
node
getRootModuleConf
new
String
node
getParentConf
for
Iterator
it
parentDepIvyNodes
iterator
it
hasNext
IvyNode
parentDep
IvyNode
it
next
if
parentDep
getModuleId
equals
node
getModuleId
conflicts
add
parentDep
else
conflicts
addAll
selectedNodes
return
conflicts
private
boolean
checkConflictSolvedSelected
VisitNode
node
VisitNode
ancestor
if
ancestor
getResolvedRevisions
node
getModuleId
contains
node
getResolvedId
if
settings
debugConflictResolution
Message
debug
node
ancestor
return
return
private
boolean
checkConflictSolvedEvicted
VisitNode
node
VisitNode
ancestor
if
ancestor
getEvictedRevisions
node
getModuleId
contains
node
getResolvedId
if
settings
debugConflictResolution
Message
debug
node
ancestor
return
return
public
ResolvedModuleRevision
findModule
ModuleRevisionId
id
ResolveOptions
options
DependencyResolver
r
settings
getResolver
id
if
r
throw
new
IllegalStateException
id
getModuleId
DefaultModuleDescriptor
md
DefaultModuleDescriptor
newCallerInstance
id
new
String
if
options
getResolveId
options
setResolveId
ResolveOptions
getDefaultResolveId
md
try
return
r
getDependency
new
DefaultDependencyDescriptor
id
new
ResolveData
this
options
new
ConfigurationResolveReport
this
md
options
catch
ParseException
e
throw
new
RuntimeException
id
e
e
public
DependencyDescriptor
mediate
DependencyDescriptor
dd
ResolveOptions
options
if
dd
return
String
resolveMode
options
getResolveMode
settings
getResolveMode
dd
getDependencyId
options
getResolveMode
if
ResolveOptions
RESOLVEMODE_DYNAMIC
equals
resolveMode
dd
getDynamicConstraintDependencyRevisionId
equals
dd
getDependencyRevisionId
return
dd
clone
dd
getDynamicConstraintDependencyRevisionId
else
return
dd
public
EventManager
getEventManager
return
eventManager
public
ResolveEngineSettings
getSettings
return
settings
public
SortEngine
getSortEngine
return
sortEngine
private
void
checkInterrupted
IvyContext
getContext
getIvy
checkInterrupted
