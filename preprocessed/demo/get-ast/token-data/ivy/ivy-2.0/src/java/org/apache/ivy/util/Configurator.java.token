package
org
apache
ivy
util
import
java
io
File
import
java
lang
reflect
InvocationTargetException
import
java
lang
reflect
Method
import
java
util
ArrayList
import
java
util
Arrays
import
java
util
Collections
import
java
util
HashMap
import
java
util
Iterator
import
java
util
LinkedHashMap
import
java
util
List
import
java
util
Map
import
java
util
Stack
import
org
apache
ivy
core
IvyPatternHelper
public
class
Configurator
public
static
class
Macro
private
MacroDef
macrodef
private
Map
attValues
new
HashMap
private
Map
macroRecords
new
HashMap
public
Macro
MacroDef
def
macrodef
def
public
void
defineAttribute
String
attributeName
String
value
if
macrodef
getAttribute
attributeName
throw
new
IllegalArgumentException
attributeName
macrodef
getName
attValues
put
attributeName
value
public
MacroRecord
recordCreateChild
String
name
MacroRecord
macroRecord
new
MacroRecord
name
List
records
List
macroRecords
get
name
if
records
records
new
ArrayList
macroRecords
put
name
records
records
add
macroRecord
return
macroRecord
public
Object
play
Configurator
conf
return
macrodef
play
conf
attValues
macroRecords
public
static
class
Attribute
private
String
name
private
String
defaultValue
public
String
getDefault
return
defaultValue
public
void
setDefault
String
default1
defaultValue
default1
public
String
getName
return
name
public
void
setName
String
name
this
name
name
public
static
class
Element
private
String
name
private
boolean
optional
public
String
getName
return
name
public
void
setName
String
name
this
name
name
public
boolean
isOptional
return
optional
public
void
setOptional
boolean
optional
this
optional
optional
public
static
class
MacroRecord
private
String
name
private
Map
attributes
new
LinkedHashMap
private
List
children
new
ArrayList
private
Object
object
public
MacroRecord
String
name
this
name
name
public
String
getName
return
name
public
void
recordAttribute
String
name
String
value
attributes
put
name
value
public
MacroRecord
recordChild
String
name
MacroRecord
child
new
MacroRecord
name
children
add
child
return
child
public
MacroRecord
recordChild
String
name
Object
object
MacroRecord
child
recordChild
name
child
object
object
return
child
public
Map
getAttributes
return
attributes
public
List
getChildren
return
children
public
Object
getObject
return
object
public
static
class
MacroDef
private
String
name
private
Map
attributes
new
HashMap
private
Map
elements
new
HashMap
private
MacroRecord
macroRecord
public
MacroDef
String
macroName
name
macroName
public
Attribute
getAttribute
String
attributeName
return
Attribute
attributes
get
attributeName
public
Object
play
Configurator
conf
Map
attValues
Map
macroRecords
for
Iterator
iter
attributes
values
iterator
iter
hasNext
Attribute
att
Attribute
iter
next
String
val
String
attValues
get
att
getName
if
val
if
att
getDefault
throw
new
IllegalArgumentException
att
getName
getName
else
attValues
put
att
getName
att
getDefault
return
play
conf
macroRecord
attValues
macroRecords
private
Object
play
Configurator
conf
MacroRecord
macroRecord
Map
attValues
Map
childrenRecords
if
macroRecord
getObject
conf
addChild
macroRecord
getName
macroRecord
getObject
conf
endCreateChild
return
macroRecord
getObject
conf
startCreateChild
macroRecord
getName
Map
attributes
macroRecord
getAttributes
for
Iterator
iter
attributes
keySet
iterator
iter
hasNext
String
attName
String
iter
next
String
attValue
replaceParam
String
attributes
get
attName
attValues
conf
setAttribute
attName
attValue
for
Iterator
iter
macroRecord
getChildren
iterator
iter
hasNext
MacroRecord
child
MacroRecord
iter
next
Element
elt
Element
elements
get
child
getName
if
elt
List
elements
List
childrenRecords
get
child
getName
if
elements
for
Iterator
iterator
elements
iterator
iterator
hasNext
MacroRecord
element
MacroRecord
iterator
next
for
Iterator
it2
element
getChildren
iterator
it2
hasNext
MacroRecord
r
MacroRecord
it2
next
play
conf
r
attValues
Collections
EMPTY_MAP
else
if
elt
isOptional
throw
new
IllegalArgumentException
elt
getName
getName
continue
play
conf
child
attValues
childrenRecords
return
conf
endCreateChild
private
String
replaceParam
String
string
Map
attValues
return
IvyPatternHelper
substituteParams
string
attValues
public
String
getName
return
name
public
void
addConfiguredAttribute
Attribute
att
attributes
put
att
getName
att
public
void
addConfiguredElement
Element
elt
elements
put
elt
getName
elt
public
Macro
createMacro
return
new
Macro
this
public
void
addAttribute
String
attName
String
attDefaultValue
Attribute
att
new
Attribute
att
setName
attName
att
setDefault
attDefaultValue
addConfiguredAttribute
att
public
void
addElement
String
elementName
boolean
optional
Element
elt
new
Element
elt
setName
elementName
elt
setOptional
optional
addConfiguredElement
elt
public
MacroRecord
recordCreateChild
String
name
macroRecord
new
MacroRecord
name
return
macroRecord
private
static
class
ObjectDescriptor
private
Object
obj
private
String
objName
private
Map
createMethods
new
HashMap
private
Map
addMethods
new
HashMap
private
Map
addConfiguredMethods
new
HashMap
private
Map
setMethods
new
HashMap
private
Map
typeAddMethods
new
HashMap
private
Map
typeAddConfiguredMethods
new
HashMap
public
ObjectDescriptor
Object
object
String
objName
obj
object
this
objName
objName
Method
methods
object
getClass
getMethods
for
int
i
i
methods
length
i
Method
m
methods
i
if
m
getName
startsWith
m
getParameterTypes
length
Void
TYPE
equals
m
getReturnType
String
name
StringUtils
uncapitalize
m
getName
substring
length
if
name
length
continue
addCreateMethod
name
m
else
if
m
getName
startsWith
m
getParameterTypes
length
Void
TYPE
equals
m
getReturnType
String
name
StringUtils
uncapitalize
m
getName
substring
length
if
name
length
addAddConfiguredMethod
m
addAddConfiguredMethod
name
m
else
if
m
getName
startsWith
m
getName
startsWith
m
getParameterTypes
length
Void
TYPE
equals
m
getReturnType
String
name
StringUtils
uncapitalize
m
getName
substring
length
if
name
length
addAddMethod
m
addAddMethod
name
m
else
if
m
getName
startsWith
m
getParameterTypes
length
Void
TYPE
equals
m
getReturnType
String
name
StringUtils
uncapitalize
m
getName
substring
length
if
name
length
continue
addSetMethod
name
m
public
void
addCreateMethod
String
name
Method
m
createMethods
put
name
m
public
void
addAddMethod
String
name
Method
m
addMethods
put
name
m
public
void
addAddConfiguredMethod
String
name
Method
m
addConfiguredMethods
put
name
m
private
void
addAddMethod
Method
m
typeAddMethods
put
m
getParameterTypes
m
private
void
addAddConfiguredMethod
Method
m
typeAddConfiguredMethods
put
m
getParameterTypes
m
public
void
addSetMethod
String
name
Method
m
Method
current
Method
setMethods
get
name
if
current
current
getParameterTypes
String
class
return
setMethods
put
name
m
public
Object
getObject
return
obj
public
Method
getCreateMethod
String
name
return
Method
createMethods
get
name
public
Method
getAddMethod
String
name
return
Method
addMethods
get
name
public
Method
getAddConfiguredMethod
String
name
return
Method
addConfiguredMethods
get
name
public
Method
getAddMethod
Class
type
return
getTypeMatchingMethod
type
typeAddMethods
public
Method
getAddConfiguredMethod
Class
type
return
getTypeMatchingMethod
type
typeAddConfiguredMethods
private
Method
getTypeMatchingMethod
Class
type
Map
typeMethods
Method
m
Method
typeMethods
get
type
if
m
return
m
for
Iterator
iter
typeMethods
keySet
iterator
iter
hasNext
Class
clss
Class
iter
next
if
clss
isAssignableFrom
type
return
Method
typeMethods
get
clss
return
public
Method
getSetMethod
String
name
return
Method
setMethods
get
name
public
String
getObjectName
return
objName
private
FileResolver
fileResolver
FileResolver
DEFAULT
private
Map
typedefs
new
HashMap
private
Map
macrodefs
new
HashMap
private
Stack
objectStack
new
Stack
private
static
final
List
TRUE_VALUES
Arrays
asList
new
String
public
void
typeDef
String
name
String
className
throws
ClassNotFoundException
typeDef
name
Class
forName
className
public
void
typeDef
String
name
Class
clazz
typedefs
put
name
clazz
public
void
setRoot
Object
root
if
root
throw
new
NullPointerException
objectStack
clear
setCurrent
root
public
void
clear
objectStack
clear
private
void
setCurrent
Object
object
String
name
objectStack
push
new
ObjectDescriptor
object
name
public
Object
startCreateChild
String
name
if
objectStack
isEmpty
throw
new
IllegalStateException
ObjectDescriptor
parentOD
ObjectDescriptor
objectStack
peek
Object
parent
parentOD
getObject
if
parent
instanceof
MacroDef
if
equals
name
equals
name
MacroRecord
record
MacroDef
parent
recordCreateChild
name
setCurrent
record
name
return
record
if
parent
instanceof
Macro
MacroRecord
record
Macro
parent
recordCreateChild
name
setCurrent
record
name
return
record
if
parent
instanceof
MacroRecord
MacroRecord
record
MacroRecord
parent
recordChild
name
setCurrent
record
name
return
record
Object
child
MacroDef
macrodef
MacroDef
macrodefs
get
name
if
macrodef
Macro
macro
macrodef
createMacro
setCurrent
macro
name
return
macro
Class
childClass
Class
typedefs
get
name
Method
addChild
try
if
childClass
return
addChild
parentOD
childClass
name
else
addChild
parentOD
getCreateMethod
name
if
addChild
child
addChild
invoke
parent
new
Object
setCurrent
child
name
return
child
addChild
parentOD
getAddMethod
name
if
addChild
childClass
addChild
getParameterTypes
child
childClass
newInstance
addChild
invoke
parent
new
Object
child
setCurrent
child
name
return
child
addChild
parentOD
getAddConfiguredMethod
name
if
addChild
childClass
addChild
getParameterTypes
if
Map
class
childClass
child
new
HashMap
else
child
childClass
newInstance
setCurrent
child
name
return
child
catch
InstantiationException
ex
throw
new
IllegalArgumentException
childClass
name
parent
getClass
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
name
parent
getClass
iae
initCause
ex
throw
iae
throw
new
IllegalArgumentException
name
parent
getClass
public
void
addChild
String
name
Object
child
if
objectStack
isEmpty
throw
new
IllegalStateException
ObjectDescriptor
parentOD
ObjectDescriptor
objectStack
peek
try
addChild
parentOD
child
getClass
name
child
catch
InstantiationException
ex
throw
new
IllegalArgumentException
child
getClass
name
parentOD
getObject
getClass
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
name
parentOD
getObject
getClass
iae
initCause
ex
throw
iae
private
Object
addChild
ObjectDescriptor
parentOD
Class
childClass
String
name
Object
child
throws
InstantiationException
IllegalAccessException
InvocationTargetException
Object
parent
parentOD
getObject
if
parent
instanceof
MacroRecord
MacroRecord
record
MacroRecord
parent
MacroRecord
recordChild
record
recordChild
name
child
setCurrent
recordChild
name
return
recordChild
Method
addChild
parentOD
getAddMethod
childClass
if
addChild
if
child
child
childClass
newInstance
addChild
invoke
parent
new
Object
child
setCurrent
child
name
return
child
addChild
parentOD
getAddConfiguredMethod
childClass
if
addChild
if
child
if
Map
class
childClass
child
new
HashMap
else
child
childClass
newInstance
setCurrent
child
name
return
child
throw
new
IllegalArgumentException
name
parent
getClass
public
boolean
isTopLevelMacroRecord
if
objectStack
isEmpty
return
ObjectDescriptor
od
ObjectDescriptor
objectStack
peek
return
od
getObject
instanceof
MacroDef
public
void
setAttribute
String
attributeName
String
value
if
objectStack
isEmpty
throw
new
IllegalStateException
ObjectDescriptor
od
ObjectDescriptor
objectStack
peek
if
od
getObject
instanceof
Macro
Macro
od
getObject
defineAttribute
attributeName
value
return
if
od
getObject
instanceof
MacroRecord
MacroRecord
od
getObject
recordAttribute
attributeName
value
return
Method
m
od
getSetMethod
attributeName
if
m
if
od
getObject
instanceof
Map
Map
od
getObject
put
attributeName
value
return
throw
new
IllegalArgumentException
attributeName
od
getObject
getClass
Object
convertedValue
Class
paramClass
m
getParameterTypes
try
if
paramClass
equals
String
class
convertedValue
value
else
if
paramClass
equals
Boolean
class
paramClass
equals
boolean
class
convertedValue
Boolean
valueOf
TRUE_VALUES
contains
value
else
if
paramClass
equals
Character
class
paramClass
equals
char
class
convertedValue
new
Character
value
length
value
charAt
else
if
paramClass
equals
Short
class
paramClass
equals
short
class
convertedValue
Short
valueOf
value
else
if
paramClass
equals
Integer
class
paramClass
equals
int
class
convertedValue
Integer
valueOf
value
else
if
paramClass
equals
Long
class
paramClass
equals
long
class
convertedValue
Long
valueOf
value
else
if
paramClass
equals
Class
class
convertedValue
Class
forName
value
else
if
paramClass
equals
File
class
convertedValue
fileResolver
resolveFile
value
od
getObjectName
attributeName
else
convertedValue
paramClass
getConstructor
new
Class
String
class
newInstance
new
Object
value
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
value
paramClass
attributeName
od
getObject
getClass
ex
getMessage
iae
initCause
ex
throw
iae
try
m
invoke
od
getObject
new
Object
convertedValue
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
attributeName
convertedValue
od
getObject
getClass
iae
initCause
ex
throw
iae
public
void
addText
String
text
if
objectStack
isEmpty
throw
new
IllegalStateException
ObjectDescriptor
od
ObjectDescriptor
objectStack
peek
try
od
getObject
getClass
getMethod
new
Class
String
class
invoke
od
getObject
new
Object
text
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
od
getObject
getClass
iae
initCause
ex
throw
iae
public
Object
endCreateChild
if
objectStack
isEmpty
throw
new
IllegalStateException
ObjectDescriptor
od
ObjectDescriptor
objectStack
pop
if
objectStack
isEmpty
objectStack
push
od
throw
new
IllegalStateException
if
od
getObject
instanceof
Macro
return
Macro
od
getObject
play
this
ObjectDescriptor
parentOD
ObjectDescriptor
objectStack
peek
String
name
od
getObjectName
Class
childClass
Class
typedefs
get
name
Method
m
if
childClass
m
parentOD
getAddConfiguredMethod
childClass
else
m
parentOD
getAddConfiguredMethod
name
try
if
m
m
invoke
parentOD
getObject
new
Object
od
getObject
return
od
getObject
catch
Exception
ex
IllegalArgumentException
iae
new
IllegalArgumentException
name
parentOD
getObject
getClass
StringUtils
getErrorMessage
ex
iae
initCause
ex
throw
iae
public
Object
getCurrent
return
objectStack
isEmpty
ObjectDescriptor
objectStack
peek
getObject
public
int
getDepth
return
objectStack
size
public
MacroDef
startMacroDef
String
macroName
MacroDef
macroDef
new
MacroDef
macroName
setCurrent
macroDef
macroName
return
macroDef
public
void
addMacroAttribute
String
attName
String
attDefaultValue
MacroDef
getCurrent
addAttribute
attName
attDefaultValue
public
void
addMacroElement
String
elementName
boolean
optional
MacroDef
getCurrent
addElement
elementName
optional
public
void
endMacroDef
addConfiguredMacrodef
MacroDef
getCurrent
objectStack
pop
public
void
addConfiguredMacrodef
MacroDef
macrodef
macrodefs
put
macrodef
getName
macrodef
public
Class
getTypeDef
String
name
return
Class
typedefs
get
name
public
FileResolver
getFileResolver
return
fileResolver
public
void
setFileResolver
FileResolver
fileResolver
Checks
checkNotNull
fileResolver
this
fileResolver
fileResolver
