package
org
apache
ivy
core
resolve
import
java
util
Collection
import
java
util
HashMap
import
java
util
HashSet
import
java
util
Iterator
import
java
util
Map
import
java
util
Set
import
org
apache
ivy
core
module
id
ModuleId
import
org
apache
ivy
plugins
conflict
ConflictManager
public
class
IvyNodeEviction
public
static
class
EvictionData
private
IvyNode
parent
private
ConflictManager
conflictManager
private
Collection
selected
private
String
rootModuleConf
private
String
detail
public
EvictionData
String
rootModuleConf
IvyNode
parent
ConflictManager
conflictManager
Collection
selected
this
rootModuleConf
parent
conflictManager
selected
public
EvictionData
String
rootModuleConf
IvyNode
parent
ConflictManager
conflictManager
Collection
selected
String
detail
this
rootModuleConf
rootModuleConf
this
parent
parent
this
conflictManager
conflictManager
this
selected
selected
this
detail
detail
public
String
toString
if
selected
return
selected
parent
detail
detail
conflictManager
rootModuleConf
else
return
rootModuleConf
public
ConflictManager
getConflictManager
return
conflictManager
public
IvyNode
getParent
return
parent
public
Collection
getSelected
return
selected
public
String
getRootModuleConf
return
rootModuleConf
public
boolean
isTransitivelyEvicted
return
parent
public
String
getDetail
return
detail
private
static
final
class
ModuleIdConf
private
ModuleId
moduleId
private
String
conf
public
ModuleIdConf
ModuleId
mid
String
conf
if
mid
throw
new
NullPointerException
if
conf
throw
new
NullPointerException
moduleId
mid
this
conf
conf
public
final
String
getConf
return
conf
public
final
ModuleId
getModuleId
return
moduleId
public
boolean
equals
Object
obj
if
obj
instanceof
ModuleIdConf
return
return
getModuleId
equals
ModuleIdConf
obj
getModuleId
getConf
equals
ModuleIdConf
obj
getConf
public
int
hashCode
int
hash
hash
getModuleId
hashCode
hash
getConf
hashCode
return
hash
private
IvyNode
node
private
Map
selectedDeps
new
HashMap
private
Map
pendingConflicts
new
HashMap
private
Map
evictedDeps
new
HashMap
private
Map
evictedRevs
new
HashMap
private
Map
evicted
new
HashMap
public
IvyNodeEviction
IvyNode
node
if
node
throw
new
NullPointerException
this
node
node
public
Set
getResolvedNodes
ModuleId
mid
String
rootModuleConf
Collection
resolved
Collection
selectedDeps
get
new
ModuleIdConf
mid
rootModuleConf
Set
ret
new
HashSet
if
resolved
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
ret
add
node
getRealNode
return
ret
public
Collection
getResolvedRevisions
ModuleId
mid
String
rootModuleConf
Collection
resolved
Collection
selectedDeps
get
new
ModuleIdConf
mid
rootModuleConf
if
resolved
return
new
HashSet
else
Collection
resolvedRevs
new
HashSet
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
resolvedRevs
add
node
getId
resolvedRevs
add
node
getResolvedId
return
resolvedRevs
public
void
setResolvedNodes
ModuleId
moduleId
String
rootModuleConf
Collection
resolved
ModuleIdConf
moduleIdConf
new
ModuleIdConf
moduleId
rootModuleConf
selectedDeps
put
moduleIdConf
new
HashSet
resolved
public
Collection
getEvictedNodes
ModuleId
mid
String
rootModuleConf
Collection
resolved
Collection
evictedDeps
get
new
ModuleIdConf
mid
rootModuleConf
Set
ret
new
HashSet
if
resolved
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
ret
add
node
getRealNode
return
ret
public
Collection
getEvictedRevisions
ModuleId
mid
String
rootModuleConf
Collection
evicted
Collection
evictedRevs
get
new
ModuleIdConf
mid
rootModuleConf
if
evicted
return
new
HashSet
else
return
new
HashSet
evicted
public
void
setEvictedNodes
ModuleId
moduleId
String
rootModuleConf
Collection
evicted
ModuleIdConf
moduleIdConf
new
ModuleIdConf
moduleId
rootModuleConf
evictedDeps
put
moduleIdConf
new
HashSet
evicted
Collection
evictedRevs
new
HashSet
for
Iterator
iter
evicted
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
evictedRevs
add
node
getId
evictedRevs
add
node
getResolvedId
this
evictedRevs
put
moduleIdConf
evictedRevs
public
boolean
isEvicted
String
rootModuleConf
cleanEvicted
IvyNode
root
node
getRoot
ModuleId
moduleId
node
getId
getModuleId
Collection
resolvedRevisions
root
getResolvedRevisions
moduleId
rootModuleConf
EvictionData
evictedData
getEvictedData
rootModuleConf
return
root
node
evictedData
resolvedRevisions
contains
node
getResolvedId
evictedData
isTransitivelyEvicted
public
boolean
isCompletelyEvicted
cleanEvicted
if
node
isRoot
return
String
rootModuleConfigurations
node
getRootModuleConfigurations
for
int
i
i
rootModuleConfigurations
length
i
if
isEvicted
rootModuleConfigurations
i
return
return
private
void
cleanEvicted
for
Iterator
iter
evicted
keySet
iterator
iter
hasNext
String
rootModuleConf
String
iter
next
EvictionData
ed
EvictionData
evicted
get
rootModuleConf
Collection
sel
ed
getSelected
if
sel
for
Iterator
iterator
sel
iterator
iterator
hasNext
IvyNode
n
IvyNode
iterator
next
if
n
getRealNode
equals
this
iter
remove
public
void
markEvicted
EvictionData
evictionData
evicted
put
evictionData
getRootModuleConf
evictionData
public
EvictionData
getEvictedData
String
rootModuleConf
cleanEvicted
return
EvictionData
evicted
get
rootModuleConf
public
String
getEvictedConfs
cleanEvicted
return
String
evicted
keySet
toArray
new
String
evicted
keySet
size
public
Collection
getAllEvictingNodes
Collection
allEvictingNodes
for
Iterator
iter
evicted
values
iterator
iter
hasNext
EvictionData
ed
EvictionData
iter
next
Collection
selected
ed
getSelected
if
selected
if
allEvictingNodes
allEvictingNodes
new
HashSet
allEvictingNodes
addAll
selected
return
allEvictingNodes
public
Collection
getAllEvictingNodesDetails
Collection
ret
for
Iterator
iter
evicted
values
iterator
iter
hasNext
EvictionData
ed
EvictionData
iter
next
Collection
selected
ed
getSelected
if
selected
if
ret
ret
new
HashSet
if
selected
size
ret
add
selected
iterator
next
ed
getDetail
ed
getDetail
else
if
selected
size
ret
add
selected
ed
getDetail
ed
getDetail
return
ret
public
Collection
getAllEvictingConflictManagers
Collection
ret
new
HashSet
for
Iterator
iter
evicted
values
iterator
iter
hasNext
EvictionData
ed
EvictionData
iter
next
ret
add
ed
getConflictManager
return
ret
public
EvictionData
getEvictionDataInRoot
String
rootModuleConf
IvyNode
ancestor
Collection
selectedNodes
node
getRoot
getResolvedNodes
node
getModuleId
rootModuleConf
for
Iterator
iter
selectedNodes
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
if
node
getResolvedId
equals
this
node
getResolvedId
return
return
new
EvictionData
rootModuleConf
ancestor
node
getRoot
getConflictManager
node
getModuleId
selectedNodes
public
Collection
getPendingConflicts
String
rootModuleConf
ModuleId
mid
Collection
resolved
Collection
pendingConflicts
get
new
ModuleIdConf
mid
rootModuleConf
Set
ret
new
HashSet
if
resolved
for
Iterator
iter
resolved
iterator
iter
hasNext
IvyNode
node
IvyNode
iter
next
ret
add
node
getRealNode
return
ret
public
void
setPendingConflicts
ModuleId
moduleId
String
rootModuleConf
Collection
conflicts
ModuleIdConf
moduleIdConf
new
ModuleIdConf
moduleId
rootModuleConf
pendingConflicts
put
moduleIdConf
new
HashSet
conflicts
