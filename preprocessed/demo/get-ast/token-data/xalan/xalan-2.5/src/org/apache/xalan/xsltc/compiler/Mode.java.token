package
org
apache
xalan
xsltc
compiler
import
java
util
Enumeration
import
java
util
Hashtable
import
java
util
Iterator
import
java
util
Vector
import
org
apache
bcel
generic
BranchHandle
import
org
apache
bcel
generic
ConstantPoolGen
import
org
apache
bcel
generic
DUP
import
org
apache
bcel
generic
GOTO_W
import
org
apache
bcel
generic
IFLT
import
org
apache
bcel
generic
ILOAD
import
org
apache
bcel
generic
INVOKEINTERFACE
import
org
apache
bcel
generic
INVOKEVIRTUAL
import
org
apache
bcel
generic
ISTORE
import
org
apache
bcel
generic
InstructionHandle
import
org
apache
bcel
generic
InstructionList
import
org
apache
bcel
generic
LocalVariableGen
import
org
apache
bcel
generic
SWITCH
import
org
apache
bcel
generic
TargetLostException
import
org
apache
bcel
util
InstructionFinder
import
org
apache
xalan
xsltc
DOM
import
org
apache
xalan
xsltc
compiler
util
ClassGenerator
import
org
apache
xalan
xsltc
compiler
util
MethodGenerator
import
org
apache
xalan
xsltc
compiler
util
NamedMethodGenerator
import
org
apache
xalan
xsltc
compiler
util
Util
import
org
apache
xalan
xsltc
dom
Axis
import
org
apache
xml
dtm
DTM
final
class
Mode
implements
Constants
private
final
QName
_name
private
final
Stylesheet
_stylesheet
private
final
String
_methodName
private
Vector
_templates
private
Vector
_childNodeGroup
private
TestSeq
_childNodeTestSeq
private
Vector
_attribNodeGroup
private
TestSeq
_attribNodeTestSeq
private
Vector
_idxGroup
private
TestSeq
_idxTestSeq
private
Vector
_patternGroups
private
TestSeq
_testSeq
private
Hashtable
_preCompiled
new
Hashtable
private
Hashtable
_neededTemplates
new
Hashtable
private
Hashtable
_namedTemplates
new
Hashtable
private
Hashtable
_templateIHs
new
Hashtable
private
Hashtable
_templateILs
new
Hashtable
private
LocationPathPattern
_rootPattern
private
Hashtable
_importLevels
private
Hashtable
_keys
private
int
_currentIndex
public
Mode
QName
name
Stylesheet
stylesheet
String
suffix
_name
name
_stylesheet
stylesheet
_methodName
APPLY_TEMPLATES
suffix
_templates
new
Vector
_patternGroups
new
Vector
public
String
functionName
return
_methodName
public
String
functionName
int
min
int
max
if
_importLevels
_importLevels
new
Hashtable
_importLevels
put
new
Integer
max
new
Integer
min
return
_methodName
max
public
void
addInstructionList
Pattern
pattern
InstructionList
ilist
_preCompiled
put
pattern
ilist
public
InstructionList
getInstructionList
Pattern
pattern
return
InstructionList
_preCompiled
get
pattern
private
String
getClassName
return
_stylesheet
getClassName
public
Stylesheet
getStylesheet
return
_stylesheet
public
void
addTemplate
Template
template
_templates
addElement
template
private
Vector
quicksort
Vector
templates
int
p
int
r
if
p
r
final
int
q
partition
templates
p
r
quicksort
templates
p
q
quicksort
templates
q
r
return
templates
private
int
partition
Vector
templates
int
p
int
r
final
Template
x
Template
templates
elementAt
p
int
i
p
int
j
r
while
while
x
compareTo
Template
templates
elementAt
j
while
x
compareTo
Template
templates
elementAt
i
if
i
j
templates
set
j
templates
set
i
templates
elementAt
j
else
return
j
public
void
processPatterns
Hashtable
keys
_keys
keys
_templates
quicksort
_templates
_templates
size
final
Enumeration
templates
_templates
elements
while
templates
hasMoreElements
final
Template
template
Template
templates
nextElement
if
template
isNamed
template
disabled
_namedTemplates
put
template
this
final
Pattern
pattern
template
getPattern
if
pattern
flattenAlternative
pattern
template
keys
prepareTestSequences
private
void
flattenAlternative
Pattern
pattern
Template
template
Hashtable
keys
if
pattern
instanceof
IdKeyPattern
final
IdKeyPattern
idkey
IdKeyPattern
pattern
idkey
setTemplate
template
if
_idxGroup
_idxGroup
new
Vector
_idxGroup
add
pattern
else
if
pattern
instanceof
AlternativePattern
final
AlternativePattern
alt
AlternativePattern
pattern
flattenAlternative
alt
getLeft
template
keys
flattenAlternative
alt
getRight
template
keys
else
if
pattern
instanceof
LocationPathPattern
final
LocationPathPattern
lpp
LocationPathPattern
pattern
lpp
setTemplate
template
addPatternToGroup
lpp
private
void
addPatternToGroup
final
LocationPathPattern
lpp
if
lpp
instanceof
IdKeyPattern
addPattern
lpp
else
final
StepPattern
kernel
lpp
getKernelPattern
if
kernel
addPattern
kernel
getNodeType
lpp
else
if
_rootPattern
lpp
noSmallerThan
_rootPattern
_rootPattern
lpp
private
void
addPattern
int
kernelType
LocationPathPattern
pattern
final
int
oldLength
_patternGroups
length
if
kernelType
oldLength
Vector
newGroups
new
Vector
kernelType
System
arraycopy
_patternGroups
newGroups
oldLength
_patternGroups
newGroups
Vector
patterns
if
kernelType
DOM
NO_TYPE
if
pattern
getAxis
Axis
ATTRIBUTE
patterns
_attribNodeGroup
_attribNodeGroup
new
Vector
_attribNodeGroup
else
patterns
_childNodeGroup
_childNodeGroup
new
Vector
_childNodeGroup
else
patterns
_patternGroups
kernelType
_patternGroups
kernelType
new
Vector
_patternGroups
kernelType
if
patterns
size
patterns
addElement
pattern
else
boolean
inserted
for
int
i
i
patterns
size
i
final
LocationPathPattern
lppToCompare
LocationPathPattern
patterns
elementAt
i
if
pattern
noSmallerThan
lppToCompare
inserted
patterns
insertElementAt
pattern
i
break
if
inserted
patterns
addElement
pattern
private
void
completeTestSequences
int
nodeType
Vector
patterns
if
patterns
if
_patternGroups
nodeType
_patternGroups
nodeType
patterns
else
final
int
m
patterns
size
for
int
j
j
m
j
addPattern
nodeType
LocationPathPattern
patterns
elementAt
j
private
void
prepareTestSequences
final
Vector
starGroup
_patternGroups
DTM
ELEMENT_NODE
final
Vector
atStarGroup
_patternGroups
DTM
ATTRIBUTE_NODE
completeTestSequences
DTM
TEXT_NODE
_childNodeGroup
completeTestSequences
DTM
ELEMENT_NODE
_childNodeGroup
completeTestSequences
DTM
PROCESSING_INSTRUCTION_NODE
_childNodeGroup
completeTestSequences
DTM
COMMENT_NODE
_childNodeGroup
completeTestSequences
DTM
ATTRIBUTE_NODE
_attribNodeGroup
final
Vector
names
_stylesheet
getXSLTC
getNamesIndex
if
starGroup
atStarGroup
_childNodeGroup
_attribNodeGroup
final
int
n
_patternGroups
length
for
int
i
DTM
NTYPES
i
n
i
if
_patternGroups
i
continue
final
String
name
String
names
elementAt
i
DTM
NTYPES
if
isAttributeName
name
completeTestSequences
i
atStarGroup
completeTestSequences
i
_attribNodeGroup
else
completeTestSequences
i
starGroup
completeTestSequences
i
_childNodeGroup
_testSeq
new
TestSeq
DTM
NTYPES
names
size
final
int
n
_patternGroups
length
for
int
i
i
n
i
final
Vector
patterns
_patternGroups
i
if
patterns
final
TestSeq
testSeq
new
TestSeq
patterns
i
this
testSeq
reduce
_testSeq
i
testSeq
testSeq
findTemplates
_neededTemplates
if
_childNodeGroup
_childNodeGroup
size
_childNodeTestSeq
new
TestSeq
_childNodeGroup
this
_childNodeTestSeq
reduce
_childNodeTestSeq
findTemplates
_neededTemplates
if
_idxGroup
_idxGroup
size
_idxTestSeq
new
TestSeq
_idxGroup
this
_idxTestSeq
reduce
_idxTestSeq
findTemplates
_neededTemplates
if
_rootPattern
_neededTemplates
put
_rootPattern
getTemplate
this
private
void
compileNamedTemplate
Template
template
ClassGenerator
classGen
final
ConstantPoolGen
cpg
classGen
getConstantPool
final
InstructionList
il
new
InstructionList
String
methodName
Util
escape
template
getName
toString
final
NamedMethodGenerator
methodGen
new
NamedMethodGenerator
ACC_PUBLIC
org
apache
bcel
generic
Type
VOID
new
org
apache
bcel
generic
Type
Util
getJCRefType
DOM_INTF_SIG
Util
getJCRefType
NODE_ITERATOR_SIG
Util
getJCRefType
TRANSLET_OUTPUT_SIG
org
apache
bcel
generic
Type
INT
new
String
DOCUMENT_PNAME
ITERATOR_PNAME
TRANSLET_OUTPUT_PNAME
NODE_PNAME
methodName
getClassName
il
cpg
il
append
template
compile
classGen
methodGen
il
append
RETURN
methodGen
stripAttributes
methodGen
setMaxLocals
methodGen
setMaxStack
methodGen
removeNOPs
classGen
addMethod
methodGen
getMethod
private
void
compileTemplates
ClassGenerator
classGen
MethodGenerator
methodGen
InstructionHandle
next
Enumeration
templates
_namedTemplates
keys
while
templates
hasMoreElements
final
Template
template
Template
templates
nextElement
compileNamedTemplate
template
classGen
templates
_neededTemplates
keys
while
templates
hasMoreElements
final
Template
template
Template
templates
nextElement
if
template
hasContents
InstructionList
til
template
compile
classGen
methodGen
til
append
new
GOTO_W
next
_templateILs
put
template
til
_templateIHs
put
template
til
getStart
else
_templateIHs
put
template
next
private
void
appendTemplateCode
InstructionList
body
final
Enumeration
templates
_neededTemplates
keys
while
templates
hasMoreElements
final
Object
iList
_templateILs
get
templates
nextElement
if
iList
body
append
InstructionList
iList
private
void
appendTestSequences
InstructionList
body
final
int
n
_testSeq
length
for
int
i
i
n
i
final
TestSeq
testSeq
_testSeq
i
if
testSeq
InstructionList
il
testSeq
getInstructionList
if
il
body
append
il
public
static
void
compileGetChildren
ClassGenerator
classGen
MethodGenerator
methodGen
int
node
final
ConstantPoolGen
cpg
classGen
getConstantPool
final
InstructionList
il
methodGen
getInstructionList
final
int
git
cpg
addInterfaceMethodref
DOM_INTF
GET_CHILDREN
GET_CHILDREN_SIG
il
append
methodGen
loadDOM
il
append
new
ILOAD
node
il
append
new
INVOKEINTERFACE
git
private
InstructionList
compileDefaultRecursion
ClassGenerator
classGen
MethodGenerator
methodGen
InstructionHandle
next
final
ConstantPoolGen
cpg
classGen
getConstantPool
final
InstructionList
il
new
InstructionList
final
String
applyTemplatesSig
classGen
getApplyTemplatesSig
final
int
git
cpg
addInterfaceMethodref
DOM_INTF
GET_CHILDREN
GET_CHILDREN_SIG
final
int
applyTemplates
cpg
addMethodref
getClassName
functionName
applyTemplatesSig
il
append
classGen
loadTranslet
il
append
methodGen
loadDOM
il
append
methodGen
loadDOM
il
append
new
ILOAD
_currentIndex
il
append
new
INVOKEINTERFACE
git
il
append
methodGen
loadHandler
il
append
new
INVOKEVIRTUAL
applyTemplates
il
append
new
GOTO_W
next
return
il
private
InstructionList
compileDefaultText
ClassGenerator
classGen
MethodGenerator
methodGen
InstructionHandle
next
final
ConstantPoolGen
cpg
classGen
getConstantPool
final
InstructionList
il
new
InstructionList
final
int
chars
cpg
addInterfaceMethodref
DOM_INTF
CHARACTERS
CHARACTERS_SIG
il
append
methodGen
loadDOM
il
append
new
ILOAD
_currentIndex
il
append
methodGen
loadHandler
il
append
new
INVOKEINTERFACE
chars
il
append
new
GOTO_W
next
return
il
private
InstructionList
compileNamespaces
ClassGenerator
classGen
MethodGenerator
methodGen
boolean
isNamespace
boolean
isAttribute
boolean
attrFlag
InstructionHandle
defaultTarget
final
XSLTC
xsltc
classGen
getParser
getXSLTC
final
ConstantPoolGen
cpg
classGen
getConstantPool
final
Vector
namespaces
xsltc
getNamespaceIndex
final
Vector
names
xsltc
getNamesIndex
final
int
namespaceCount
namespaces
size
final
int
namesCount
names
size
final
InstructionList
il
new
InstructionList
final
int
types
new
int
namespaceCount
final
InstructionHandle
targets
new
InstructionHandle
types
length
if
namespaceCount
boolean
compiled
for
int
i
i
namespaceCount
i
targets
i
defaultTarget
types
i
i
for
int
i
DTM
NTYPES
i
DTM
NTYPES
namesCount
i
if
isNamespace
i
isAttribute
i
attrFlag
String
name
String
names
elementAt
i
DTM
NTYPES
String
namespace
name
substring
name
lastIndexOf
final
int
type
xsltc
registerNamespace
namespace
if
i
_testSeq
length
_testSeq
i
targets
type
_testSeq
i
compile
classGen
methodGen
defaultTarget
compiled
if
compiled
return
final
int
getNS
cpg
addInterfaceMethodref
DOM_INTF
il
append
methodGen
loadDOM
il
append
new
ILOAD
_currentIndex
il
append
new
INVOKEINTERFACE
getNS
il
append
new
SWITCH
types
targets
defaultTarget
return
il
else
return
public
void
compileApplyTemplates
ClassGenerator
classGen
final
XSLTC
xsltc
classGen
getParser
getXSLTC
final
ConstantPoolGen
cpg
classGen
getConstantPool
final
Vector
names
xsltc
getNamesIndex
final
org
apache
bcel
generic
Type
argTypes
new
org
apache
bcel
generic
Type
argTypes
Util
getJCRefType
DOM_INTF_SIG
argTypes
Util
getJCRefType
NODE_ITERATOR_SIG
argTypes
Util
getJCRefType
TRANSLET_OUTPUT_SIG
final
String
argNames
new
String
argNames
DOCUMENT_PNAME
argNames
ITERATOR_PNAME
argNames
TRANSLET_OUTPUT_PNAME
final
InstructionList
mainIL
new
InstructionList
final
MethodGenerator
methodGen
new
MethodGenerator
ACC_PUBLIC
ACC_FINAL
org
apache
bcel
generic
Type
VOID
argTypes
argNames
functionName
getClassName
mainIL
classGen
getConstantPool
methodGen
addException
final
LocalVariableGen
current
current
methodGen
addLocalVariable2
org
apache
bcel
generic
Type
INT
mainIL
getEnd
_currentIndex
current
getIndex
final
InstructionList
body
new
InstructionList
body
append
NOP
final
InstructionList
ilLoop
new
InstructionList
ilLoop
append
methodGen
loadIterator
ilLoop
append
methodGen
nextNode
ilLoop
append
DUP
ilLoop
append
new
ISTORE
_currentIndex
final
BranchHandle
ifeq
ilLoop
append
new
IFLT
final
BranchHandle
loop
ilLoop
append
new
GOTO_W
ifeq
setTarget
ilLoop
append
RETURN
final
InstructionHandle
ihLoop
ilLoop
getStart
InstructionList
ilRecurse
compileDefaultRecursion
classGen
methodGen
ihLoop
InstructionHandle
ihRecurse
ilRecurse
getStart
InstructionList
ilText
compileDefaultText
classGen
methodGen
ihLoop
InstructionHandle
ihText
ilText
getStart
final
int
types
new
int
DTM
NTYPES
names
size
for
int
i
i
types
length
i
types
i
i
final
boolean
isAttribute
new
boolean
types
length
final
boolean
isNamespace
new
boolean
types
length
for
int
i
i
names
size
i
final
String
name
String
names
elementAt
i
isAttribute
i
DTM
NTYPES
isAttributeName
name
isNamespace
i
DTM
NTYPES
isNamespaceName
name
compileTemplates
classGen
methodGen
ihLoop
final
TestSeq
elemTest
_testSeq
DTM
ELEMENT_NODE
InstructionHandle
ihElem
ihRecurse
if
elemTest
ihElem
elemTest
compile
classGen
methodGen
ihRecurse
final
TestSeq
attrTest
_testSeq
DTM
ATTRIBUTE_NODE
InstructionHandle
ihAttr
ihText
if
attrTest
ihAttr
attrTest
compile
classGen
methodGen
ihAttr
InstructionList
ilKey
if
_idxTestSeq
loop
setTarget
_idxTestSeq
compile
classGen
methodGen
body
getStart
ilKey
_idxTestSeq
getInstructionList
else
loop
setTarget
body
getStart
if
_childNodeTestSeq
double
nodePrio
_childNodeTestSeq
getPriority
int
nodePos
_childNodeTestSeq
getPosition
double
elemPrio
Double
MAX_VALUE
int
elemPos
Integer
MIN_VALUE
if
elemTest
elemPrio
elemTest
getPriority
elemPos
elemTest
getPosition
if
elemPrio
Double
NaN
elemPrio
nodePrio
elemPrio
nodePrio
elemPos
nodePos
ihElem
_childNodeTestSeq
compile
classGen
methodGen
ihLoop
final
TestSeq
textTest
_testSeq
DTM
TEXT_NODE
double
textPrio
Double
MAX_VALUE
int
textPos
Integer
MIN_VALUE
if
textTest
textPrio
textTest
getPriority
textPos
textTest
getPosition
if
textPrio
Double
NaN
textPrio
nodePrio
textPrio
nodePrio
textPos
nodePos
ihText
_childNodeTestSeq
compile
classGen
methodGen
ihLoop
_testSeq
DTM
TEXT_NODE
_childNodeTestSeq
InstructionHandle
elemNamespaceHandle
ihElem
InstructionList
nsElem
compileNamespaces
classGen
methodGen
isNamespace
isAttribute
ihElem
if
nsElem
elemNamespaceHandle
nsElem
getStart
InstructionHandle
attrNamespaceHandle
ihAttr
InstructionList
nsAttr
compileNamespaces
classGen
methodGen
isNamespace
isAttribute
ihAttr
if
nsAttr
attrNamespaceHandle
nsAttr
getStart
final
InstructionHandle
targets
new
InstructionHandle
types
length
for
int
i
DTM
NTYPES
i
targets
length
i
final
TestSeq
testSeq
_testSeq
i
if
isNamespace
i
if
isAttribute
i
targets
i
attrNamespaceHandle
else
targets
i
elemNamespaceHandle
else
if
testSeq
if
isAttribute
i
targets
i
testSeq
compile
classGen
methodGen
attrNamespaceHandle
else
targets
i
testSeq
compile
classGen
methodGen
elemNamespaceHandle
else
targets
i
ihLoop
targets
DTM
ROOT_NODE
_rootPattern
getTemplateInstructionHandle
_rootPattern
getTemplate
ihRecurse
targets
DTM
DOCUMENT_NODE
_rootPattern
getTemplateInstructionHandle
_rootPattern
getTemplate
ihRecurse
targets
DTM
TEXT_NODE
_testSeq
DTM
TEXT_NODE
_testSeq
DTM
TEXT_NODE
compile
classGen
methodGen
ihText
ihText
targets
DTM
NAMESPACE_NODE
ihLoop
targets
DTM
ELEMENT_NODE
elemNamespaceHandle
targets
DTM
ATTRIBUTE_NODE
attrNamespaceHandle
InstructionHandle
ihPI
ihLoop
if
_childNodeTestSeq
ihPI
ihElem
if
_testSeq
DTM
PROCESSING_INSTRUCTION_NODE
targets
DTM
PROCESSING_INSTRUCTION_NODE
_testSeq
DTM
PROCESSING_INSTRUCTION_NODE
compile
classGen
methodGen
ihPI
else
targets
DTM
PROCESSING_INSTRUCTION_NODE
ihPI
InstructionHandle
ihComment
ihLoop
if
_childNodeTestSeq
ihComment
ihElem
targets
DTM
COMMENT_NODE
_testSeq
DTM
COMMENT_NODE
_testSeq
DTM
COMMENT_NODE
compile
classGen
methodGen
ihComment
ihComment
targets
DTM
CDATA_SECTION_NODE
ihLoop
targets
DTM
DOCUMENT_FRAGMENT_NODE
ihLoop
targets
DTM
DOCUMENT_TYPE_NODE
ihLoop
targets
DTM
ENTITY_NODE
ihLoop
targets
DTM
ENTITY_REFERENCE_NODE
ihLoop
targets
DTM
NOTATION_NODE
ihLoop
for
int
i
DTM
NTYPES
i
targets
length
i
final
TestSeq
testSeq
_testSeq
i
if
testSeq
isNamespace
i
if
isAttribute
i
targets
i
attrNamespaceHandle
else
targets
i
elemNamespaceHandle
else
if
isAttribute
i
targets
i
testSeq
compile
classGen
methodGen
attrNamespaceHandle
else
targets
i
testSeq
compile
classGen
methodGen
elemNamespaceHandle
if
ilKey
body
insert
ilKey
final
int
getType
cpg
addInterfaceMethodref
DOM_INTF
body
append
methodGen
loadDOM
body
append
new
ILOAD
_currentIndex
body
append
new
INVOKEINTERFACE
getType
InstructionHandle
disp
body
append
new
SWITCH
types
targets
ihLoop
appendTestSequences
body
appendTemplateCode
body
if
nsElem
body
append
nsElem
if
nsAttr
body
append
nsAttr
body
append
ilRecurse
body
append
ilText
mainIL
append
new
GOTO_W
ihLoop
mainIL
append
body
mainIL
append
ilLoop
peepHoleOptimization
methodGen
methodGen
stripAttributes
methodGen
setMaxLocals
methodGen
setMaxStack
methodGen
removeNOPs
classGen
addMethod
methodGen
getMethod
if
_importLevels
Enumeration
levels
_importLevels
keys
while
levels
hasMoreElements
Integer
max
Integer
levels
nextElement
Integer
min
Integer
_importLevels
get
max
compileApplyImports
classGen
min
intValue
max
intValue
private
void
compileTemplateCalls
ClassGenerator
classGen
MethodGenerator
methodGen
InstructionHandle
next
int
min
int
max
Enumeration
templates
_neededTemplates
keys
while
templates
hasMoreElements
final
Template
template
Template
templates
nextElement
final
int
prec
template
getImportPrecedence
if
prec
min
prec
max
if
template
hasContents
InstructionList
til
template
compile
classGen
methodGen
til
append
new
GOTO_W
next
_templateILs
put
template
til
_templateIHs
put
template
til
getStart
else
_templateIHs
put
template
next
public
void
compileApplyImports
ClassGenerator
classGen
int
min
int
max
final
XSLTC
xsltc
classGen
getParser
getXSLTC
final
ConstantPoolGen
cpg
classGen
getConstantPool
final
Vector
names
xsltc
getNamesIndex
_namedTemplates
new
Hashtable
_neededTemplates
new
Hashtable
_templateIHs
new
Hashtable
_templateILs
new
Hashtable
_patternGroups
new
Vector
_rootPattern
Vector
oldTemplates
_templates
_templates
new
Vector
final
Enumeration
templates
oldTemplates
elements
while
templates
hasMoreElements
final
Template
template
Template
templates
nextElement
final
int
prec
template
getImportPrecedence
if
prec
min
prec
max
addTemplate
template
processPatterns
_keys
final
org
apache
bcel
generic
Type
argTypes
new
org
apache
bcel
generic
Type
argTypes
Util
getJCRefType
DOM_INTF_SIG
argTypes
Util
getJCRefType
NODE_ITERATOR_SIG
argTypes
Util
getJCRefType
TRANSLET_OUTPUT_SIG
final
String
argNames
new
String
argNames
DOCUMENT_PNAME
argNames
ITERATOR_PNAME
argNames
TRANSLET_OUTPUT_PNAME
final
InstructionList
mainIL
new
InstructionList
final
MethodGenerator
methodGen
new
MethodGenerator
ACC_PUBLIC
ACC_FINAL
org
apache
bcel
generic
Type
VOID
argTypes
argNames
functionName
max
getClassName
mainIL
classGen
getConstantPool
methodGen
addException
final
LocalVariableGen
current
current
methodGen
addLocalVariable2
org
apache
bcel
generic
Type
INT
mainIL
getEnd
_currentIndex
current
getIndex
final
InstructionList
body
new
InstructionList
body
append
NOP
final
InstructionList
ilLoop
new
InstructionList
ilLoop
append
methodGen
loadIterator
ilLoop
append
methodGen
nextNode
ilLoop
append
DUP
ilLoop
append
new
ISTORE
_currentIndex
final
BranchHandle
ifeq
ilLoop
append
new
IFLT
final
BranchHandle
loop
ilLoop
append
new
GOTO_W
ifeq
setTarget
ilLoop
append
RETURN
final
InstructionHandle
ihLoop
ilLoop
getStart
InstructionList
ilRecurse
compileDefaultRecursion
classGen
methodGen
ihLoop
InstructionHandle
ihRecurse
ilRecurse
getStart
InstructionList
ilText
compileDefaultText
classGen
methodGen
ihLoop
InstructionHandle
ihText
ilText
getStart
final
int
types
new
int
DTM
NTYPES
names
size
for
int
i
i
types
length
i
types
i
i
final
boolean
isAttribute
new
boolean
types
length
final
boolean
isNamespace
new
boolean
types
length
for
int
i
i
names
size
i
final
String
name
String
names
elementAt
i
isAttribute
i
DTM
NTYPES
isAttributeName
name
isNamespace
i
DTM
NTYPES
isNamespaceName
name
compileTemplateCalls
classGen
methodGen
ihLoop
min
max
final
TestSeq
elemTest
_testSeq
DTM
ELEMENT_NODE
InstructionHandle
ihElem
ihRecurse
if
elemTest
ihElem
elemTest
compile
classGen
methodGen
ihLoop
final
TestSeq
attrTest
_testSeq
DTM
ATTRIBUTE_NODE
InstructionHandle
ihAttr
ihLoop
if
attrTest
ihAttr
attrTest
compile
classGen
methodGen
ihAttr
InstructionList
ilKey
if
_idxTestSeq
loop
setTarget
_idxTestSeq
compile
classGen
methodGen
body
getStart
ilKey
_idxTestSeq
getInstructionList
else
loop
setTarget
body
getStart
if
_childNodeTestSeq
double
nodePrio
_childNodeTestSeq
getPriority
int
nodePos
_childNodeTestSeq
getPosition
double
elemPrio
Double
MAX_VALUE
int
elemPos
Integer
MIN_VALUE
if
elemTest
elemPrio
elemTest
getPriority
elemPos
elemTest
getPosition
if
elemPrio
Double
NaN
elemPrio
nodePrio
elemPrio
nodePrio
elemPos
nodePos
ihElem
_childNodeTestSeq
compile
classGen
methodGen
ihLoop
final
TestSeq
textTest
_testSeq
DTM
TEXT_NODE
double
textPrio
Double
MAX_VALUE
int
textPos
Integer
MIN_VALUE
if
textTest
textPrio
textTest
getPriority
textPos
textTest
getPosition
if
textPrio
Double
NaN
textPrio
nodePrio
textPrio
nodePrio
textPos
nodePos
ihText
_childNodeTestSeq
compile
classGen
methodGen
ihLoop
_testSeq
DTM
TEXT_NODE
_childNodeTestSeq
InstructionHandle
elemNamespaceHandle
ihElem
InstructionList
nsElem
compileNamespaces
classGen
methodGen
isNamespace
isAttribute
ihElem
if
nsElem
elemNamespaceHandle
nsElem
getStart
InstructionList
nsAttr
compileNamespaces
classGen
methodGen
isNamespace
isAttribute
ihAttr
InstructionHandle
attrNamespaceHandle
ihAttr
if
nsAttr
attrNamespaceHandle
nsAttr
getStart
final
InstructionHandle
targets
new
InstructionHandle
types
length
for
int
i
DTM
NTYPES
i
targets
length
i
final
TestSeq
testSeq
_testSeq
i
if
isNamespace
i
if
isAttribute
i
targets
i
attrNamespaceHandle
else
targets
i
elemNamespaceHandle
else
if
testSeq
if
isAttribute
i
targets
i
testSeq
compile
classGen
methodGen
attrNamespaceHandle
else
targets
i
testSeq
compile
classGen
methodGen
elemNamespaceHandle
else
targets
i
ihLoop
targets
DTM
ROOT_NODE
_rootPattern
getTemplateInstructionHandle
_rootPattern
getTemplate
ihRecurse
targets
DTM
DOCUMENT_NODE
_rootPattern
getTemplateInstructionHandle
_rootPattern
getTemplate
ihRecurse
targets
DTM
TEXT_NODE
_testSeq
DTM
TEXT_NODE
_testSeq
DTM
TEXT_NODE
compile
classGen
methodGen
ihText
ihText
targets
DTM
NAMESPACE_NODE
ihLoop
targets
DTM
ELEMENT_NODE
elemNamespaceHandle
targets
DTM
ATTRIBUTE_NODE
attrNamespaceHandle
InstructionHandle
ihPI
ihLoop
if
_childNodeTestSeq
ihPI
ihElem
if
_testSeq
DTM
PROCESSING_INSTRUCTION_NODE
targets
DTM
PROCESSING_INSTRUCTION_NODE
_testSeq
DTM
PROCESSING_INSTRUCTION_NODE
compile
classGen
methodGen
ihPI
else
targets
DTM
PROCESSING_INSTRUCTION_NODE
ihPI
InstructionHandle
ihComment
ihLoop
if
_childNodeTestSeq
ihComment
ihElem
targets
DTM
COMMENT_NODE
_testSeq
DTM
COMMENT_NODE
_testSeq
DTM
COMMENT_NODE
compile
classGen
methodGen
ihComment
ihComment
targets
DTM
CDATA_SECTION_NODE
ihLoop
targets
DTM
DOCUMENT_FRAGMENT_NODE
ihLoop
targets
DTM
DOCUMENT_TYPE_NODE
ihLoop
targets
DTM
ENTITY_NODE
ihLoop
targets
DTM
ENTITY_REFERENCE_NODE
ihLoop
targets
DTM
NOTATION_NODE
ihLoop
for
int
i
DTM
NTYPES
i
targets
length
i
final
TestSeq
testSeq
_testSeq
i
if
testSeq
isNamespace
i
if
isAttribute
i
targets
i
attrNamespaceHandle
else
targets
i
elemNamespaceHandle
else
if
isAttribute
i
targets
i
testSeq
compile
classGen
methodGen
attrNamespaceHandle
else
targets
i
testSeq
compile
classGen
methodGen
elemNamespaceHandle
if
ilKey
body
insert
ilKey
final
int
getType
cpg
addInterfaceMethodref
DOM_INTF
body
append
methodGen
loadDOM
body
append
new
ILOAD
_currentIndex
body
append
new
INVOKEINTERFACE
getType
InstructionHandle
disp
body
append
new
SWITCH
types
targets
ihLoop
appendTestSequences
body
appendTemplateCode
body
if
nsElem
body
append
nsElem
if
nsAttr
body
append
nsAttr
body
append
ilRecurse
body
append
ilText
mainIL
append
new
GOTO_W
ihLoop
mainIL
append
body
mainIL
append
ilLoop
peepHoleOptimization
methodGen
methodGen
stripAttributes
methodGen
setMaxLocals
methodGen
setMaxStack
methodGen
removeNOPs
classGen
addMethod
methodGen
getMethod
_templates
oldTemplates
private
void
peepHoleOptimization
MethodGenerator
methodGen
InstructionList
il
methodGen
getInstructionList
InstructionFinder
find
new
InstructionFinder
il
InstructionHandle
ih
String
pattern
pattern
for
Iterator
iter
find
search
pattern
iter
hasNext
InstructionHandle
match
InstructionHandle
iter
next
try
if
match
hasTargeters
match
hasTargeters
il
delete
match
match
catch
TargetLostException
e
pattern
for
Iterator
iter
find
search
pattern
iter
hasNext
InstructionHandle
match
InstructionHandle
iter
next
try
org
apache
bcel
generic
Instruction
iload
org
apache
bcel
generic
Instruction
aload
if
match
hasTargeters
match
hasTargeters
match
hasTargeters
iload
match
getInstruction
aload
match
getInstruction
il
insert
match
aload
il
insert
match
iload
il
delete
match
match
catch
TargetLostException
e
pattern
for
Iterator
iter
find
search
pattern
iter
hasNext
InstructionHandle
match
InstructionHandle
iter
next
try
org
apache
bcel
generic
Instruction
iload
org
apache
bcel
generic
Instruction
aload
if
match
hasTargeters
match
hasTargeters
il
insert
match
new
DUP
il
delete
match
catch
TargetLostException
e
public
InstructionHandle
getTemplateInstructionHandle
Template
template
return
InstructionHandle
_templateIHs
get
template
private
static
boolean
isAttributeName
String
qname
final
int
col
qname
lastIndexOf
return
qname
charAt
col
private
static
boolean
isNamespaceName
String
qname
final
int
col
qname
lastIndexOf
return
col
qname
charAt
qname
length
