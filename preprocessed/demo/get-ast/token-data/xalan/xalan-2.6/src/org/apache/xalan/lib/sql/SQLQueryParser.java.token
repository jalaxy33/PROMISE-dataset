package
org
apache
xalan
lib
sql
import
java
util
import
java
sql
import
org
apache
xpath
objects
import
org
apache
xalan
extensions
ExpressionContext
import
org
apache
xml
utils
QName
import
javax
xml
transform
TransformerException
public
class
SQLQueryParser
private
boolean
m_InlineVariables
private
boolean
m_IsCallable
private
String
m_OrigQuery
private
StringBuffer
m_ParsedQuery
private
Vector
m_Parameters
private
boolean
m_hasOutput
private
boolean
m_HasParameters
public
static
final
int
NO_OVERRIDE
public
static
final
int
NO_INLINE_PARSER
public
static
final
int
INLINE_PARSER
public
SQLQueryParser
init
private
SQLQueryParser
String
query
m_OrigQuery
query
private
void
init
public
SQLQueryParser
parse
XConnection
xconn
String
query
int
override
SQLQueryParser
parser
new
SQLQueryParser
query
parser
parse
xconn
override
return
parser
private
void
parse
XConnection
xconn
int
override
m_InlineVariables
equals
xconn
getFeature
if
override
NO_INLINE_PARSER
m_InlineVariables
else
if
override
INLINE_PARSER
m_InlineVariables
if
m_InlineVariables
inlineParser
public
boolean
hasParameters
return
m_HasParameters
public
boolean
isCallable
return
m_IsCallable
public
Vector
getParameters
return
m_Parameters
public
void
setParameters
Vector
p
m_HasParameters
m_Parameters
p
public
String
getSQLQuery
if
m_InlineVariables
return
m_ParsedQuery
toString
else
return
m_OrigQuery
public
void
populateStatement
PreparedStatement
stmt
ExpressionContext
ctx
for
int
indx
indx
m_Parameters
size
indx
QueryParameter
parm
QueryParameter
m_Parameters
elementAt
indx
try
if
m_InlineVariables
XObject
value
XObject
ctx
getVariableOrParam
new
QName
parm
getName
if
value
stmt
setObject
indx
value
object
parm
getType
else
stmt
setNull
indx
parm
getType
else
String
value
parm
getValue
if
value
stmt
setObject
indx
value
parm
getType
else
stmt
setNull
indx
parm
getType
catch
Exception
tx
public
void
registerOutputParameters
CallableStatement
cstmt
throws
SQLException
if
m_IsCallable
m_hasOutput
for
int
indx
indx
m_Parameters
size
indx
QueryParameter
parm
QueryParameter
m_Parameters
elementAt
indx
if
parm
isOutput
cstmt
registerOutParameter
indx
parm
getType
protected
void
inlineParser
QueryParameter
curParm
int
state
StringBuffer
tok
new
StringBuffer
boolean
firstword
if
m_Parameters
m_Parameters
new
Vector
if
m_ParsedQuery
m_ParsedQuery
new
StringBuffer
for
int
idx
idx
m_OrigQuery
length
idx
char
ch
m_OrigQuery
charAt
idx
switch
state
case
if
ch
state
else
if
ch
state
else
if
firstword
Character
isLetterOrDigit
ch
ch
tok
append
ch
state
m_ParsedQuery
append
ch
break
case
if
ch
state
else
if
ch
state
m_ParsedQuery
append
ch
break
case
state
m_ParsedQuery
append
ch
break
case
if
Character
isLetterOrDigit
ch
ch
ch
tok
append
ch
else
if
tok
toString
equalsIgnoreCase
m_IsCallable
if
curParm
curParm
setIsOutput
firstword
tok
new
StringBuffer
if
ch
state
else
if
ch
state
else
state
m_ParsedQuery
append
ch
break
case
if
ch
state
break
case
if
Character
isWhitespace
ch
ch
tok
append
Character
toUpperCase
ch
else
if
tok
length
m_HasParameters
curParm
new
QueryParameter
curParm
setTypeName
tok
toString
m_Parameters
addElement
curParm
tok
new
StringBuffer
if
ch
state
else
state
break
case
if
ch
state
break
case
if
Character
isWhitespace
ch
ch
tok
append
ch
else
if
tok
length
curParm
setName
tok
toString
tok
new
StringBuffer
if
ch
state
else
state
break
case
if
Character
isWhitespace
ch
ch
tok
append
ch
else
if
tok
length
tok
setLength
if
tok
toString
equalsIgnoreCase
curParm
setIsOutput
m_hasOutput
tok
new
StringBuffer
if
ch
state
break
if
m_IsCallable
m_ParsedQuery
insert
m_ParsedQuery
append
