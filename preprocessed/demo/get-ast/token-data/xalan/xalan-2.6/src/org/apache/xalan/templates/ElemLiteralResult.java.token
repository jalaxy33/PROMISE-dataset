package
org
apache
xalan
templates
import
java
util
Enumeration
import
java
util
Vector
import
javax
xml
transform
TransformerException
import
org
apache
xalan
transformer
TransformerImpl
import
org
apache
xml
serializer
SerializationHandler
import
org
apache
xml
utils
StringVector
import
org
apache
xpath
XPathContext
import
org
xml
sax
SAXException
public
class
ElemLiteralResult
extends
ElemUse
private
boolean
isLiteralResultAsStylesheet
public
void
setIsLiteralResultAsStylesheet
boolean
b
isLiteralResultAsStylesheet
b
public
boolean
getIsLiteralResultAsStylesheet
return
isLiteralResultAsStylesheet
public
void
compose
StylesheetRoot
sroot
throws
TransformerException
super
compose
sroot
StylesheetRoot
ComposeState
cstate
sroot
getComposeState
java
util
Vector
vnames
cstate
getVariableNames
if
m_avts
int
nAttrs
m_avts
size
for
int
i
nAttrs
i
i
AVT
avt
AVT
m_avts
elementAt
i
avt
fixupVariables
vnames
cstate
getGlobalsSize
private
Vector
m_avts
private
Vector
m_xslAttr
public
void
addLiteralResultAttribute
AVT
avt
if
m_avts
m_avts
new
Vector
m_avts
addElement
avt
public
void
addLiteralResultAttribute
String
att
if
m_xslAttr
m_xslAttr
new
Vector
m_xslAttr
addElement
att
public
void
setXmlSpace
AVT
avt
addLiteralResultAttribute
avt
String
val
avt
getSimpleString
if
val
equals
super
setXmlSpace
Constants
ATTRVAL_STRIP
else
if
val
equals
super
setXmlSpace
Constants
ATTRVAL_PRESERVE
public
AVT
getLiteralResultAttribute
String
name
if
m_avts
int
nAttrs
m_avts
size
for
int
i
nAttrs
i
i
AVT
avt
AVT
m_avts
elementAt
i
if
avt
getRawName
equals
name
return
avt
return
public
boolean
containsExcludeResultPrefix
String
prefix
String
uri
if
uri
m_excludeResultPrefixes
m_ExtensionElementURIs
return
super
containsExcludeResultPrefix
prefix
uri
if
prefix
length
prefix
Constants
ATTRVAL_DEFAULT_PREFIX
if
m_excludeResultPrefixes
for
int
i
i
m_excludeResultPrefixes
size
i
if
uri
equals
getNamespaceForPrefix
m_excludeResultPrefixes
elementAt
i
return
if
m_ExtensionElementURIs
m_ExtensionElementURIs
contains
uri
return
return
super
containsExcludeResultPrefix
prefix
uri
public
void
resolvePrefixTables
throws
TransformerException
super
resolvePrefixTables
StylesheetRoot
stylesheet
getStylesheetRoot
if
m_namespace
m_namespace
length
NamespaceAlias
nsa
stylesheet
getNamespaceAliasComposed
m_namespace
if
nsa
m_namespace
nsa
getResultNamespace
String
resultPrefix
nsa
getStylesheetPrefix
if
resultPrefix
resultPrefix
length
m_rawName
resultPrefix
m_localName
else
m_rawName
m_localName
if
m_avts
int
n
m_avts
size
for
int
i
i
n
i
AVT
avt
AVT
m_avts
elementAt
i
String
ns
avt
getURI
if
ns
ns
length
NamespaceAlias
nsa
stylesheet
getNamespaceAliasComposed
m_namespace
if
nsa
String
namespace
nsa
getResultNamespace
String
resultPrefix
nsa
getStylesheetPrefix
String
rawName
avt
getName
if
resultPrefix
resultPrefix
length
rawName
resultPrefix
rawName
avt
setURI
namespace
avt
setRawName
rawName
boolean
needToCheckExclude
if
m_excludeResultPrefixes
m_prefixTable
m_ExtensionElementURIs
return
else
if
m_prefixTable
m_prefixTable
new
Vector
return
private
String
m_namespace
public
void
setNamespace
String
ns
if
ns
ns
m_namespace
ns
public
String
getNamespace
return
m_namespace
private
String
m_localName
public
void
setLocalName
String
localName
m_localName
localName
public
String
getLocalName
return
m_localName
private
String
m_rawName
public
void
setRawName
String
rawName
m_rawName
rawName
public
String
getRawName
return
m_rawName
public
String
getPrefix
int
len
m_rawName
length
m_localName
length
return
len
m_rawName
substring
len
private
StringVector
m_ExtensionElementURIs
public
void
setExtensionElementPrefixes
StringVector
v
m_ExtensionElementURIs
v
public
String
getExtensionElementPrefix
int
i
throws
ArrayIndexOutOfBoundsException
if
m_ExtensionElementURIs
throw
new
ArrayIndexOutOfBoundsException
return
m_ExtensionElementURIs
elementAt
i
public
int
getExtensionElementPrefixCount
return
m_ExtensionElementURIs
m_ExtensionElementURIs
size
public
boolean
containsExtensionElementURI
String
uri
if
m_ExtensionElementURIs
return
return
m_ExtensionElementURIs
contains
uri
public
int
getXSLToken
return
Constants
ELEMNAME_LITERALRESULT
public
String
getNodeName
return
m_rawName
private
String
m_version
public
void
setVersion
String
v
m_version
v
public
String
getVersion
return
m_version
private
StringVector
m_excludeResultPrefixes
public
void
setExcludeResultPrefixes
StringVector
v
m_excludeResultPrefixes
v
private
boolean
excludeResultNSDecl
String
prefix
String
uri
throws
TransformerException
if
m_excludeResultPrefixes
return
containsExcludeResultPrefix
prefix
uri
return
public
void
execute
TransformerImpl
transformer
throws
TransformerException
SerializationHandler
rhandler
transformer
getSerializationHandler
try
if
TransformerImpl
S_DEBUG
rhandler
flushPending
transformer
getTraceManager
fireTraceEvent
this
rhandler
startPrefixMapping
getPrefix
getNamespace
executeNSDecls
transformer
rhandler
startElement
getNamespace
getLocalName
getRawName
catch
SAXException
se
throw
new
TransformerException
se
TransformerException
tException
try
super
execute
transformer
if
m_avts
int
nAttrs
m_avts
size
for
int
i
nAttrs
i
i
AVT
avt
AVT
m_avts
elementAt
i
XPathContext
xctxt
transformer
getXPathContext
int
sourceNode
xctxt
getCurrentNode
String
stringedValue
avt
evaluate
xctxt
sourceNode
this
if
stringedValue
rhandler
addAttribute
avt
getURI
avt
getName
avt
getRawName
stringedValue
transformer
executeChildTemplates
this
catch
TransformerException
te
tException
te
catch
SAXException
se
tException
new
TransformerException
se
try
if
TransformerImpl
S_DEBUG
transformer
getTraceManager
fireTraceEndEvent
this
rhandler
endElement
getNamespace
getLocalName
getRawName
catch
SAXException
se
if
tException
throw
tException
else
throw
new
TransformerException
se
if
tException
throw
tException
unexecuteNSDecls
transformer
try
rhandler
endPrefixMapping
getPrefix
catch
SAXException
se
throw
new
TransformerException
se
public
Enumeration
enumerateLiteralResultAttributes
return
m_avts
m_avts
elements
protected
boolean
accept
XSLTVisitor
visitor
return
visitor
visitLiteralResultElement
this
protected
void
callChildVisitors
XSLTVisitor
visitor
boolean
callAttrs
if
callAttrs
m_avts
int
nAttrs
m_avts
size
for
int
i
nAttrs
i
i
AVT
avt
AVT
m_avts
elementAt
i
avt
callVisitors
visitor
super
callChildVisitors
visitor
callAttrs
