package
org
apache
xml
utils
import
java
io
Serializable
import
org
apache
xml
dtm
DTM
public
class
NodeVector
implements
Serializable
Cloneable
private
int
m_blocksize
private
int
m_map
protected
int
m_firstFree
private
int
m_mapSize
public
NodeVector
m_blocksize
m_mapSize
public
NodeVector
int
blocksize
m_blocksize
blocksize
m_mapSize
public
Object
clone
throws
CloneNotSupportedException
NodeVector
clone
NodeVector
super
clone
if
this
m_map
this
m_map
clone
m_map
clone
m_map
new
int
this
m_map
length
System
arraycopy
this
m_map
clone
m_map
this
m_map
length
return
clone
public
int
size
return
m_firstFree
public
void
addElement
int
value
if
m_firstFree
m_mapSize
if
m_map
m_map
new
int
m_blocksize
m_mapSize
m_blocksize
else
m_mapSize
m_blocksize
int
newMap
new
int
m_mapSize
System
arraycopy
m_map
newMap
m_firstFree
m_map
newMap
m_map
m_firstFree
value
m_firstFree
public
final
void
push
int
value
int
ff
m_firstFree
if
ff
m_mapSize
if
m_map
m_map
new
int
m_blocksize
m_mapSize
m_blocksize
else
m_mapSize
m_blocksize
int
newMap
new
int
m_mapSize
System
arraycopy
m_map
newMap
ff
m_map
newMap
m_map
ff
value
ff
m_firstFree
ff
public
final
int
pop
m_firstFree
int
n
m_map
m_firstFree
m_map
m_firstFree
DTM
NULL
return
n
public
final
int
popAndTop
m_firstFree
m_map
m_firstFree
DTM
NULL
return
m_firstFree
DTM
NULL
m_map
m_firstFree
public
final
void
popQuick
m_firstFree
m_map
m_firstFree
DTM
NULL
public
final
int
peepOrNull
return
m_map
m_firstFree
m_map
m_firstFree
DTM
NULL
public
final
void
pushPair
int
v1
int
v2
if
m_map
m_map
new
int
m_blocksize
m_mapSize
m_blocksize
else
if
m_firstFree
m_mapSize
m_mapSize
m_blocksize
int
newMap
new
int
m_mapSize
System
arraycopy
m_map
newMap
m_firstFree
m_map
newMap
m_map
m_firstFree
v1
m_map
m_firstFree
v2
m_firstFree
public
final
void
popPair
m_firstFree
m_map
m_firstFree
DTM
NULL
m_map
m_firstFree
DTM
NULL
public
final
void
setTail
int
n
m_map
m_firstFree
n
public
final
void
setTailSub1
int
n
m_map
m_firstFree
n
public
final
int
peepTail
return
m_map
m_firstFree
public
final
int
peepTailSub1
return
m_map
m_firstFree
public
void
insertInOrder
int
value
for
int
i
i
m_firstFree
i
if
value
m_map
i
insertElementAt
value
i
return
addElement
value
public
void
insertElementAt
int
value
int
at
if
m_map
m_map
new
int
m_blocksize
m_mapSize
m_blocksize
else
if
m_firstFree
m_mapSize
m_mapSize
m_blocksize
int
newMap
new
int
m_mapSize
System
arraycopy
m_map
newMap
m_firstFree
m_map
newMap
if
at
m_firstFree
System
arraycopy
m_map
at
m_map
at
m_firstFree
at
m_map
at
value
m_firstFree
public
void
appendNodes
NodeVector
nodes
int
nNodes
nodes
size
if
m_map
m_mapSize
nNodes
m_blocksize
m_map
new
int
m_mapSize
else
if
m_firstFree
nNodes
m_mapSize
m_mapSize
nNodes
m_blocksize
int
newMap
new
int
m_mapSize
System
arraycopy
m_map
newMap
m_firstFree
nNodes
m_map
newMap
System
arraycopy
nodes
m_map
m_map
m_firstFree
nNodes
m_firstFree
nNodes
public
void
removeAllElements
if
m_map
return
for
int
i
i
m_firstFree
i
m_map
i
DTM
NULL
m_firstFree
public
void
RemoveAllNoClear
if
m_map
return
m_firstFree
public
boolean
removeElement
int
s
if
m_map
return
for
int
i
i
m_firstFree
i
int
node
m_map
i
if
node
s
if
i
m_firstFree
System
arraycopy
m_map
i
m_map
i
m_firstFree
i
else
m_map
i
DTM
NULL
m_firstFree
return
return
public
void
removeElementAt
int
i
if
m_map
return
if
i
m_firstFree
System
arraycopy
m_map
i
m_map
i
m_firstFree
i
else
m_map
i
DTM
NULL
public
void
setElementAt
int
node
int
index
if
m_map
m_map
new
int
m_blocksize
m_mapSize
m_blocksize
if
index
addElement
node
m_map
index
node
public
int
elementAt
int
i
if
m_map
return
DTM
NULL
return
m_map
i
public
boolean
contains
int
s
if
m_map
return
for
int
i
i
m_firstFree
i
int
node
m_map
i
if
node
s
return
return
public
int
indexOf
int
elem
int
index
if
m_map
return
for
int
i
index
i
m_firstFree
i
int
node
m_map
i
if
node
elem
return
i
return
public
int
indexOf
int
elem
if
m_map
return
for
int
i
i
m_firstFree
i
int
node
m_map
i
if
node
elem
return
i
return
public
void
sort
int
a
int
lo0
int
hi0
throws
Exception
int
lo
lo0
int
hi
hi0
if
lo
hi
return
else
if
lo
hi
if
a
lo
a
hi
int
T
a
lo
a
lo
a
hi
a
hi
T
return
int
pivot
a
lo
hi
a
lo
hi
a
hi
a
hi
pivot
while
lo
hi
while
a
lo
pivot
lo
hi
lo
while
pivot
a
hi
lo
hi
hi
if
lo
hi
int
T
a
lo
a
lo
a
hi
a
hi
T
a
hi0
a
hi
a
hi
pivot
sort
a
lo0
lo
sort
a
hi
hi0
public
void
sort
throws
Exception
sort
m_map
m_firstFree
