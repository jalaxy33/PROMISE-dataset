package
org
apache
xalan
templates
import
java
util
Vector
import
org
apache
xalan
res
XSLMessages
import
org
apache
xalan
res
XSLTErrorResources
import
org
apache
xml
utils
QName
import
org
apache
xml
utils
WrappedRuntimeException
import
org
apache
xpath
Expression
import
org
apache
xpath
ExpressionNode
import
org
apache
xpath
ExpressionOwner
import
org
apache
xpath
XPath
import
org
apache
xpath
axes
AxesWalker
import
org
apache
xpath
axes
FilterExprIteratorSimple
import
org
apache
xpath
axes
FilterExprWalker
import
org
apache
xpath
axes
LocPathIterator
import
org
apache
xpath
axes
SelfIteratorNoPredicate
import
org
apache
xpath
axes
WalkerFactory
import
org
apache
xpath
axes
WalkingIterator
import
org
apache
xpath
operations
Variable
import
org
apache
xpath
operations
VariableSafeAbsRef
public
class
RedundentExprEliminator
extends
XSLTVisitor
Vector
m_paths
Vector
m_absPaths
boolean
m_isSameContext
AbsPathChecker
m_absPathChecker
new
AbsPathChecker
static
int
m_uniquePsuedoVarID
static
final
String
PSUEDOVARNAMESPACE
Constants
S_VENDORURL
public
static
boolean
DEBUG
public
static
boolean
DIAGNOSE_NUM_PATHS_REDUCED
public
static
boolean
DIAGNOSE_MULTISTEPLIST
VarNameCollector
m_varNameCollector
new
VarNameCollector
public
RedundentExprEliminator
m_isSameContext
m_absPaths
new
Vector
m_paths
public
void
eleminateRedundentLocals
ElemTemplateElement
psuedoVarRecipient
eleminateRedundent
psuedoVarRecipient
m_paths
public
void
eleminateRedundentGlobals
StylesheetRoot
stylesheet
eleminateRedundent
stylesheet
m_absPaths
protected
void
eleminateRedundent
ElemTemplateElement
psuedoVarRecipient
Vector
paths
int
n
paths
size
int
numPathsEliminated
int
numUniquePathsEliminated
for
int
i
i
n
i
ExpressionOwner
owner
ExpressionOwner
paths
elementAt
i
if
owner
int
found
findAndEliminateRedundant
i
i
owner
psuedoVarRecipient
paths
if
found
numUniquePathsEliminated
numPathsEliminated
found
eleminateSharedPartialPaths
psuedoVarRecipient
paths
if
DIAGNOSE_NUM_PATHS_REDUCED
diagnoseNumPaths
paths
numPathsEliminated
numUniquePathsEliminated
protected
void
eleminateSharedPartialPaths
ElemTemplateElement
psuedoVarRecipient
Vector
paths
MultistepExprHolder
list
createMultistepExprList
paths
if
list
if
DIAGNOSE_MULTISTEPLIST
list
diagnose
boolean
isGlobal
paths
m_absPaths
int
longestStepsCount
list
m_stepCount
for
int
i
longestStepsCount
i
i
MultistepExprHolder
next
list
while
next
if
next
m_stepCount
i
break
list
matchAndEliminatePartialPaths
next
list
isGlobal
i
psuedoVarRecipient
next
next
m_next
protected
MultistepExprHolder
matchAndEliminatePartialPaths
MultistepExprHolder
testee
MultistepExprHolder
head
boolean
isGlobal
int
lengthToTest
ElemTemplateElement
varScope
if
testee
m_exprOwner
return
head
WalkingIterator
iter1
WalkingIterator
testee
m_exprOwner
getExpression
if
partialIsVariable
testee
lengthToTest
return
head
MultistepExprHolder
matchedPaths
MultistepExprHolder
matchedPathsTail
MultistepExprHolder
meh
head
while
meh
if
meh
testee
meh
m_exprOwner
WalkingIterator
iter2
WalkingIterator
meh
m_exprOwner
getExpression
if
stepsEqual
iter1
iter2
lengthToTest
if
matchedPaths
try
matchedPaths
MultistepExprHolder
testee
clone
testee
m_exprOwner
catch
CloneNotSupportedException
cnse
matchedPathsTail
matchedPaths
matchedPathsTail
m_next
try
matchedPathsTail
m_next
MultistepExprHolder
meh
clone
meh
m_exprOwner
catch
CloneNotSupportedException
cnse
matchedPathsTail
matchedPathsTail
m_next
matchedPathsTail
m_next
meh
meh
m_next
int
matchCount
if
matchedPaths
ElemTemplateElement
root
isGlobal
varScope
findCommonAncestor
matchedPaths
WalkingIterator
sharedIter
WalkingIterator
matchedPaths
m_exprOwner
getExpression
WalkingIterator
newIter
createIteratorFromSteps
sharedIter
lengthToTest
ElemVariable
var
createPsuedoVarDecl
root
newIter
isGlobal
if
DIAGNOSE_MULTISTEPLIST
System
err
println
var
getName
isGlobal
while
matchedPaths
ExpressionOwner
owner
matchedPaths
m_exprOwner
WalkingIterator
iter
WalkingIterator
owner
getExpression
if
DIAGNOSE_MULTISTEPLIST
diagnoseLineNumber
iter
LocPathIterator
newIter2
changePartToRef
var
getName
iter
lengthToTest
isGlobal
owner
setExpression
newIter2
matchedPaths
matchedPaths
m_next
if
DIAGNOSE_MULTISTEPLIST
diagnoseMultistepList
matchCount
lengthToTest
isGlobal
return
head
boolean
partialIsVariable
MultistepExprHolder
testee
int
lengthToTest
if
lengthToTest
WalkingIterator
wi
WalkingIterator
testee
m_exprOwner
getExpression
if
wi
getFirstWalker
instanceof
FilterExprWalker
return
return
protected
void
diagnoseLineNumber
Expression
expr
ElemTemplateElement
e
getElemFromExpression
expr
System
err
println
e
getSystemId
e
getLineNumber
protected
ElemTemplateElement
findCommonAncestor
MultistepExprHolder
head
int
numExprs
head
getLength
ElemTemplateElement
elems
new
ElemTemplateElement
numExprs
int
ancestorCounts
new
int
numExprs
MultistepExprHolder
next
head
int
shortestAncestorCount
for
int
i
i
numExprs
i
ElemTemplateElement
elem
getElemFromExpression
next
m_exprOwner
getExpression
elems
i
elem
int
numAncestors
countAncestors
elem
ancestorCounts
i
numAncestors
if
numAncestors
shortestAncestorCount
shortestAncestorCount
numAncestors
next
next
m_next
for
int
i
i
numExprs
i
if
ancestorCounts
i
shortestAncestorCount
int
numStepCorrection
ancestorCounts
i
shortestAncestorCount
for
int
j
j
numStepCorrection
j
elems
i
elems
i
getParentElem
ElemTemplateElement
first
while
shortestAncestorCount
boolean
areEqual
first
elems
for
int
i
i
numExprs
i
if
first
elems
i
areEqual
break
if
areEqual
isNotSameAsOwner
head
first
first
canAcceptVariables
if
DIAGNOSE_MULTISTEPLIST
System
err
print
first
getClass
getName
System
err
println
first
getSystemId
first
getLineNumber
return
first
for
int
i
i
numExprs
i
elems
i
elems
i
getParentElem
assertion
return
protected
boolean
isNotSameAsOwner
MultistepExprHolder
head
ElemTemplateElement
ete
MultistepExprHolder
next
head
while
next
ElemTemplateElement
elemOwner
getElemFromExpression
next
m_exprOwner
getExpression
if
elemOwner
ete
return
next
next
m_next
return
protected
int
countAncestors
ElemTemplateElement
elem
int
count
while
elem
count
elem
elem
getParentElem
return
count
protected
void
diagnoseMultistepList
int
matchCount
int
lengthToTest
boolean
isGlobal
if
matchCount
System
err
print
matchCount
lengthToTest
if
isGlobal
System
err
println
else
System
err
println
protected
LocPathIterator
changePartToRef
final
QName
uniquePsuedoVarName
WalkingIterator
wi
final
int
numSteps
final
boolean
isGlobal
Variable
var
new
Variable
var
setQName
uniquePsuedoVarName
var
setIsGlobal
isGlobal
if
isGlobal
ElemTemplateElement
elem
getElemFromExpression
wi
StylesheetRoot
root
elem
getStylesheetRoot
Vector
vars
root
getVariablesAndParamsComposed
var
setIndex
vars
size
AxesWalker
walker
wi
getFirstWalker
for
int
i
i
numSteps
i
assertion
walker
walker
walker
getNextWalker
if
walker
FilterExprWalker
few
new
FilterExprWalker
wi
few
setInnerExpression
var
few
exprSetParent
wi
few
setNextWalker
walker
walker
setPrevWalker
few
wi
setFirstWalker
few
return
wi
else
FilterExprIteratorSimple
feis
new
FilterExprIteratorSimple
var
feis
exprSetParent
wi
exprGetParent
return
feis
protected
WalkingIterator
createIteratorFromSteps
final
WalkingIterator
wi
int
numSteps
WalkingIterator
newIter
new
WalkingIterator
wi
getPrefixResolver
try
AxesWalker
walker
AxesWalker
wi
getFirstWalker
clone
newIter
setFirstWalker
walker
walker
setLocPathIterator
newIter
for
int
i
i
numSteps
i
AxesWalker
next
AxesWalker
walker
getNextWalker
clone
walker
setNextWalker
next
next
setLocPathIterator
newIter
walker
next
walker
setNextWalker
catch
CloneNotSupportedException
cnse
throw
new
WrappedRuntimeException
cnse
return
newIter
protected
boolean
stepsEqual
WalkingIterator
iter1
WalkingIterator
iter2
int
numSteps
AxesWalker
aw1
iter1
getFirstWalker
AxesWalker
aw2
iter2
getFirstWalker
for
int
i
i
numSteps
i
if
aw1
aw2
return
if
aw1
deepEquals
aw2
return
aw1
aw1
getNextWalker
aw2
aw2
getNextWalker
assertion
aw1
aw2
return
protected
MultistepExprHolder
createMultistepExprList
Vector
paths
MultistepExprHolder
first
int
n
paths
size
for
int
i
i
n
i
ExpressionOwner
eo
ExpressionOwner
paths
elementAt
i
if
eo
continue
LocPathIterator
lpi
LocPathIterator
eo
getExpression
int
numPaths
countSteps
lpi
if
numPaths
if
first
first
new
MultistepExprHolder
eo
numPaths
else
first
first
addInSortedOrder
eo
numPaths
if
first
first
getLength
return
else
return
first
protected
int
findAndEliminateRedundant
int
start
int
firstOccuranceIndex
ExpressionOwner
firstOccuranceOwner
ElemTemplateElement
psuedoVarRecipient
Vector
paths
throws
org
w3c
dom
DOMException
MultistepExprHolder
head
MultistepExprHolder
tail
int
numPathsFound
int
n
paths
size
Expression
expr1
firstOccuranceOwner
getExpression
if
DEBUG
assertIsLocPathIterator
expr1
firstOccuranceOwner
boolean
isGlobal
paths
m_absPaths
LocPathIterator
lpi
LocPathIterator
expr1
int
stepCount
countSteps
lpi
for
int
j
start
j
n
j
ExpressionOwner
owner2
ExpressionOwner
paths
elementAt
j
if
owner2
Expression
expr2
owner2
getExpression
boolean
isEqual
expr2
deepEquals
lpi
if
isEqual
LocPathIterator
lpi2
LocPathIterator
expr2
if
head
head
new
MultistepExprHolder
firstOccuranceOwner
stepCount
tail
head
numPathsFound
tail
m_next
new
MultistepExprHolder
owner2
stepCount
tail
tail
m_next
paths
setElementAt
j
numPathsFound
if
numPathsFound
isGlobal
head
new
MultistepExprHolder
firstOccuranceOwner
stepCount
numPathsFound
if
head
ElemTemplateElement
root
isGlobal
psuedoVarRecipient
findCommonAncestor
head
LocPathIterator
sharedIter
LocPathIterator
head
m_exprOwner
getExpression
ElemVariable
var
createPsuedoVarDecl
root
sharedIter
isGlobal
if
DIAGNOSE_MULTISTEPLIST
System
err
println
var
getName
isGlobal
QName
uniquePsuedoVarName
var
getName
while
head
ExpressionOwner
owner
head
m_exprOwner
if
DIAGNOSE_MULTISTEPLIST
diagnoseLineNumber
owner
getExpression
changeToVarRef
uniquePsuedoVarName
owner
paths
root
head
head
m_next
paths
setElementAt
var
getSelect
firstOccuranceIndex
return
numPathsFound
protected
int
oldFindAndEliminateRedundant
int
start
int
firstOccuranceIndex
ExpressionOwner
firstOccuranceOwner
ElemTemplateElement
psuedoVarRecipient
Vector
paths
throws
org
w3c
dom
DOMException
QName
uniquePsuedoVarName
boolean
foundFirst
int
numPathsFound
int
n
paths
size
Expression
expr1
firstOccuranceOwner
getExpression
if
DEBUG
assertIsLocPathIterator
expr1
firstOccuranceOwner
boolean
isGlobal
paths
m_absPaths
LocPathIterator
lpi
LocPathIterator
expr1
for
int
j
start
j
n
j
ExpressionOwner
owner2
ExpressionOwner
paths
elementAt
j
if
owner2
Expression
expr2
owner2
getExpression
boolean
isEqual
expr2
deepEquals
lpi
if
isEqual
LocPathIterator
lpi2
LocPathIterator
expr2
if
foundFirst
foundFirst
ElemVariable
var
createPsuedoVarDecl
psuedoVarRecipient
lpi
isGlobal
if
var
return
uniquePsuedoVarName
var
getName
changeToVarRef
uniquePsuedoVarName
firstOccuranceOwner
paths
psuedoVarRecipient
paths
setElementAt
var
getSelect
firstOccuranceIndex
numPathsFound
changeToVarRef
uniquePsuedoVarName
owner2
paths
psuedoVarRecipient
paths
setElementAt
j
numPathsFound
if
numPathsFound
paths
m_absPaths
ElemVariable
var
createPsuedoVarDecl
psuedoVarRecipient
lpi
if
var
return
uniquePsuedoVarName
var
getName
changeToVarRef
uniquePsuedoVarName
firstOccuranceOwner
paths
psuedoVarRecipient
paths
setElementAt
var
getSelect
firstOccuranceIndex
numPathsFound
return
numPathsFound
protected
int
countSteps
LocPathIterator
lpi
if
lpi
instanceof
WalkingIterator
WalkingIterator
wi
WalkingIterator
lpi
AxesWalker
aw
wi
getFirstWalker
int
count
while
aw
count
aw
aw
getNextWalker
return
count
else
return
protected
void
changeToVarRef
QName
varName
ExpressionOwner
owner
Vector
paths
ElemTemplateElement
psuedoVarRecipient
Variable
varRef
paths
m_absPaths
new
VariableSafeAbsRef
new
Variable
varRef
setQName
varName
if
paths
m_absPaths
StylesheetRoot
root
StylesheetRoot
psuedoVarRecipient
Vector
globalVars
root
getVariablesAndParamsComposed
varRef
setIndex
globalVars
size
varRef
setIsGlobal
owner
setExpression
varRef
protected
ElemVariable
createPsuedoVarDecl
ElemTemplateElement
psuedoVarRecipient
LocPathIterator
lpi
boolean
isGlobal
throws
org
w3c
dom
DOMException
QName
uniquePsuedoVarName
new
QName
PSUEDOVARNAMESPACE
m_uniquePsuedoVarID
m_uniquePsuedoVarID
if
isGlobal
return
createGlobalPsuedoVarDecl
uniquePsuedoVarName
StylesheetRoot
psuedoVarRecipient
lpi
else
return
createLocalPsuedoVarDecl
uniquePsuedoVarName
psuedoVarRecipient
lpi
protected
ElemVariable
createGlobalPsuedoVarDecl
QName
uniquePsuedoVarName
StylesheetRoot
stylesheetRoot
LocPathIterator
lpi
throws
org
w3c
dom
DOMException
ElemVariable
psuedoVar
new
ElemVariable
psuedoVar
setIsTopLevel
XPath
xpath
new
XPath
lpi
psuedoVar
setSelect
xpath
psuedoVar
setName
uniquePsuedoVarName
Vector
globalVars
stylesheetRoot
getVariablesAndParamsComposed
psuedoVar
setIndex
globalVars
size
globalVars
addElement
psuedoVar
return
psuedoVar
protected
ElemVariable
createLocalPsuedoVarDecl
QName
uniquePsuedoVarName
ElemTemplateElement
psuedoVarRecipient
LocPathIterator
lpi
throws
org
w3c
dom
DOMException
ElemVariable
psuedoVar
new
ElemVariablePsuedo
XPath
xpath
new
XPath
lpi
psuedoVar
setSelect
xpath
psuedoVar
setName
uniquePsuedoVarName
ElemVariable
var
addVarDeclToElem
psuedoVarRecipient
lpi
psuedoVar
lpi
exprSetParent
var
return
var
protected
ElemVariable
addVarDeclToElem
ElemTemplateElement
psuedoVarRecipient
LocPathIterator
lpi
ElemVariable
psuedoVar
throws
org
w3c
dom
DOMException
ElemTemplateElement
ete
psuedoVarRecipient
getFirstChildElem
lpi
callVisitors
m_varNameCollector
if
m_varNameCollector
getVarCount
ElemTemplateElement
baseElem
getElemFromExpression
lpi
ElemVariable
varElem
getPrevVariableElem
baseElem
while
varElem
if
m_varNameCollector
doesOccur
varElem
getName
psuedoVarRecipient
varElem
getParentElem
ete
varElem
getNextSiblingElem
break
varElem
getPrevVariableElem
varElem
if
ete
Constants
ELEMNAME_PARAMVARIABLE
ete
getXSLToken
if
isParam
lpi
return
while
ete
ete
ete
getNextSiblingElem
if
ete
Constants
ELEMNAME_PARAMVARIABLE
ete
getXSLToken
break
psuedoVarRecipient
insertBefore
psuedoVar
ete
m_varNameCollector
reset
return
psuedoVar
protected
boolean
isParam
ExpressionNode
expr
while
expr
if
expr
instanceof
ElemTemplateElement
break
expr
expr
exprGetParent
if
expr
ElemTemplateElement
ete
ElemTemplateElement
expr
while
ete
int
type
ete
getXSLToken
switch
type
case
Constants
ELEMNAME_PARAMVARIABLE
return
case
Constants
ELEMNAME_TEMPLATE
case
Constants
ELEMNAME_STYLESHEET
return
ete
ete
getParentElem
return
protected
ElemVariable
getPrevVariableElem
ElemTemplateElement
elem
while
elem
getPrevElementWithinContext
elem
int
type
elem
getXSLToken
if
Constants
ELEMNAME_VARIABLE
type
Constants
ELEMNAME_PARAMVARIABLE
type
return
ElemVariable
elem
return
protected
ElemTemplateElement
getPrevElementWithinContext
ElemTemplateElement
elem
ElemTemplateElement
prev
elem
getPreviousSiblingElem
if
prev
prev
elem
getParentElem
if
prev
int
type
prev
getXSLToken
if
Constants
ELEMNAME_FOREACH
type
Constants
ELEMNAME_TEMPLATE
type
Constants
ELEMNAME_STYLESHEET
type
prev
return
prev
protected
ElemTemplateElement
getElemFromExpression
Expression
expr
ExpressionNode
parent
expr
exprGetParent
while
parent
if
parent
instanceof
ElemTemplateElement
return
ElemTemplateElement
parent
parent
parent
exprGetParent
throw
new
RuntimeException
XSLMessages
createMessage
XSLTErrorResources
ER_ASSERT_NO_TEMPLATE_PARENT
public
boolean
isAbsolute
LocPathIterator
path
int
analysis
path
getAnalysisBits
boolean
isAbs
WalkerFactory
isSet
analysis
WalkerFactory
BIT_ROOT
WalkerFactory
isSet
analysis
WalkerFactory
BIT_ANY_DESCENDANT_FROM_ROOT
if
isAbs
isAbs
m_absPathChecker
checkAbsolute
path
return
isAbs
public
boolean
visitLocationPath
ExpressionOwner
owner
LocPathIterator
path
if
path
instanceof
SelfIteratorNoPredicate
return
else
if
path
instanceof
WalkingIterator
WalkingIterator
wi
WalkingIterator
path
AxesWalker
aw
wi
getFirstWalker
if
aw
instanceof
FilterExprWalker
aw
getNextWalker
FilterExprWalker
few
FilterExprWalker
aw
Expression
exp
few
getInnerExpression
if
exp
instanceof
Variable
return
if
isAbsolute
path
m_absPaths
if
DEBUG
validateNewAddition
m_absPaths
owner
path
m_absPaths
addElement
owner
else
if
m_isSameContext
m_paths
if
DEBUG
validateNewAddition
m_paths
owner
path
m_paths
addElement
owner
return
public
boolean
visitPredicate
ExpressionOwner
owner
Expression
pred
boolean
savedIsSame
m_isSameContext
m_isSameContext
pred
callVisitors
owner
this
m_isSameContext
savedIsSame
return
public
boolean
visitTopLevelInstruction
ElemTemplateElement
elem
int
type
elem
getXSLToken
switch
type
case
Constants
ELEMNAME_TEMPLATE
return
visitInstruction
elem
default
return
public
boolean
visitInstruction
ElemTemplateElement
elem
int
type
elem
getXSLToken
switch
type
case
Constants
ELEMNAME_CALLTEMPLATE
case
Constants
ELEMNAME_TEMPLATE
case
Constants
ELEMNAME_FOREACH
if
type
Constants
ELEMNAME_FOREACH
ElemForEach
efe
ElemForEach
elem
Expression
select
efe
getSelect
select
callVisitors
efe
this
Vector
savedPaths
m_paths
m_paths
new
Vector
elem
callChildVisitors
this
eleminateRedundentLocals
elem
m_paths
savedPaths
return
case
Constants
ELEMNAME_NUMBER
case
Constants
ELEMNAME_SORT
boolean
savedIsSame
m_isSameContext
m_isSameContext
elem
callChildVisitors
this
m_isSameContext
savedIsSame
return
default
return
protected
void
diagnoseNumPaths
Vector
paths
int
numPathsEliminated
int
numUniquePathsEliminated
if
numPathsEliminated
if
paths
m_paths
System
err
println
numPathsEliminated
System
err
println
numUniquePathsEliminated
else
System
err
println
numPathsEliminated
System
err
println
numUniquePathsEliminated
private
final
void
assertIsLocPathIterator
Expression
expr1
ExpressionOwner
eo
throws
RuntimeException
if
expr1
instanceof
LocPathIterator
String
errMsg
if
expr1
instanceof
Variable
errMsg
Variable
expr1
getQName
else
errMsg
expr1
getClass
getName
throw
new
RuntimeException
errMsg
eo
getClass
getName
expr1
exprGetParent
private
static
void
validateNewAddition
Vector
paths
ExpressionOwner
owner
LocPathIterator
path
throws
RuntimeException
assertion
owner
getExpression
path
int
n
paths
size
for
int
i
i
n
i
ExpressionOwner
ew
ExpressionOwner
paths
elementAt
i
assertion
ew
owner
assertion
ew
getExpression
path
protected
static
void
assertion
boolean
b
String
msg
if
b
throw
new
RuntimeException
XSLMessages
createMessage
XSLTErrorResources
ER_ASSERT_REDUNDENT_EXPR_ELIMINATOR
new
Object
msg
class
MultistepExprHolder
implements
Cloneable
ExpressionOwner
m_exprOwner
final
int
m_stepCount
MultistepExprHolder
m_next
public
Object
clone
throws
CloneNotSupportedException
return
super
clone
MultistepExprHolder
ExpressionOwner
exprOwner
int
stepCount
MultistepExprHolder
next
m_exprOwner
exprOwner
assertion
m_exprOwner
m_stepCount
stepCount
m_next
next
MultistepExprHolder
addInSortedOrder
ExpressionOwner
exprOwner
int
stepCount
MultistepExprHolder
first
this
MultistepExprHolder
next
this
MultistepExprHolder
prev
while
next
if
stepCount
next
m_stepCount
MultistepExprHolder
newholder
new
MultistepExprHolder
exprOwner
stepCount
next
if
prev
first
newholder
else
prev
m_next
newholder
return
first
prev
next
next
next
m_next
prev
m_next
new
MultistepExprHolder
exprOwner
stepCount
return
first
MultistepExprHolder
unlink
MultistepExprHolder
itemToRemove
MultistepExprHolder
first
this
MultistepExprHolder
next
this
MultistepExprHolder
prev
while
next
if
next
itemToRemove
if
prev
first
next
m_next
else
prev
m_next
next
m_next
next
m_next
return
first
prev
next
next
next
m_next
assertion
return
int
getLength
int
count
MultistepExprHolder
next
this
while
next
count
next
next
m_next
return
count
protected
void
diagnose
System
err
print
this
getLength
MultistepExprHolder
next
this
while
next
System
err
print
next
m_stepCount
next
next
m_next
if
next
System
err
print
System
err
println
