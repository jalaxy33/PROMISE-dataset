package
org
apache
xalan
xsltc
compiler
import
java
util
Hashtable
import
java
util
Enumeration
import
java
util
Vector
import
javax
xml
parsers
import
org
xml
sax
import
org
apache
xalan
xsltc
compiler
util
Type
import
org
apache
bcel
generic
import
org
apache
xalan
xsltc
compiler
util
final
class
LiteralElement
extends
Instruction
private
String
_name
private
LiteralElement
_literalElemParent
private
Vector
_attributeElements
private
Hashtable
_accessedPrefixes
private
final
static
String
XMLNS_STRING
public
QName
getName
return
_qname
public
void
display
int
indent
indent
indent
Util
println
_name
displayContents
indent
IndentIncrement
private
String
accessedNamespace
String
prefix
if
_accessedPrefixes
return
else
return
String
_accessedPrefixes
get
prefix
public
void
registerNamespace
String
prefix
String
uri
SymbolTable
stable
boolean
declared
if
_literalElemParent
final
String
parentUri
_literalElemParent
accessedNamespace
prefix
if
parentUri
_literalElemParent
registerNamespace
prefix
uri
stable
declared
return
if
parentUri
equals
uri
return
if
_accessedPrefixes
_accessedPrefixes
new
Hashtable
else
if
declared
final
String
old
String
_accessedPrefixes
get
prefix
if
old
if
old
equals
uri
return
else
prefix
stable
generateNamespacePrefix
if
prefix
equals
_accessedPrefixes
put
prefix
uri
private
String
translateQName
QName
qname
SymbolTable
stable
String
localname
qname
getLocalPart
String
prefix
qname
getPrefix
if
prefix
prefix
Constants
EMPTYSTRING
else
if
prefix
equals
XMLNS_STRING
return
XMLNS_STRING
final
String
alternative
stable
lookupPrefixAlias
prefix
if
alternative
stable
excludeNamespaces
prefix
prefix
alternative
String
uri
lookupNamespace
prefix
if
uri
return
localname
registerNamespace
prefix
uri
stable
if
prefix
Constants
EMPTYSTRING
return
prefix
localname
else
return
localname
public
void
addAttribute
SyntaxTreeNode
attribute
if
_attributeElements
_attributeElements
new
Vector
_attributeElements
add
attribute
public
void
setFirstAttribute
SyntaxTreeNode
attribute
if
_attributeElements
_attributeElements
new
Vector
_attributeElements
insertElementAt
attribute
public
Type
typeCheck
SymbolTable
stable
throws
TypeCheckError
if
_attributeElements
final
int
count
_attributeElements
size
for
int
i
i
count
i
SyntaxTreeNode
node
SyntaxTreeNode
_attributeElements
elementAt
i
node
typeCheck
stable
typeCheckContents
stable
return
Type
Void
public
Enumeration
getNamespaceScope
SyntaxTreeNode
node
Hashtable
all
new
Hashtable
while
node
Hashtable
mapping
node
getPrefixMapping
if
mapping
Enumeration
prefixes
mapping
keys
while
prefixes
hasMoreElements
String
prefix
String
prefixes
nextElement
if
all
containsKey
prefix
all
put
prefix
mapping
get
prefix
node
node
getParent
return
all
keys
public
void
parseContents
Parser
parser
final
SymbolTable
stable
parser
getSymbolTable
stable
setCurrentNode
this
SyntaxTreeNode
_literalElemParent
getParent
while
_literalElemParent
_literalElemParent
instanceof
LiteralElement
_literalElemParent
_literalElemParent
getParent
if
_literalElemParent
instanceof
LiteralElement
_literalElemParent
_name
translateQName
_qname
stable
final
int
count
_attributes
getLength
for
int
i
i
count
i
final
QName
qname
parser
getQName
_attributes
getQName
i
final
String
uri
qname
getNamespace
final
String
val
_attributes
getValue
i
if
qname
parser
getUseAttributeSets
setFirstAttribute
new
UseAttributeSets
val
parser
else
if
qname
parser
getExtensionElementPrefixes
stable
excludeNamespaces
val
else
if
qname
parser
getExcludeResultPrefixes
stable
excludeNamespaces
val
else
final
String
prefix
qname
getPrefix
if
prefix
prefix
equals
XMLNS_PREFIX
prefix
qname
getLocalPart
equals
uri
uri
equals
XSLT_URI
continue
final
String
name
translateQName
qname
stable
LiteralAttribute
attr
new
LiteralAttribute
name
val
parser
addAttribute
attr
attr
setParent
this
attr
parseContents
parser
final
Enumeration
include
getNamespaceScope
this
while
include
hasMoreElements
final
String
prefix
String
include
nextElement
if
prefix
equals
final
String
uri
lookupNamespace
prefix
if
uri
stable
isExcludedNamespace
uri
registerNamespace
prefix
uri
stable
parseChildren
parser
for
int
i
i
count
i
final
QName
qname
parser
getQName
_attributes
getQName
i
final
String
val
_attributes
getValue
i
if
qname
parser
getExtensionElementPrefixes
stable
unExcludeNamespaces
val
else
if
qname
parser
getExcludeResultPrefixes
stable
unExcludeNamespaces
val
protected
boolean
contextDependent
return
dependentContents
public
void
translate
ClassGenerator
classGen
MethodGenerator
methodGen
final
ConstantPoolGen
cpg
classGen
getConstantPool
final
InstructionList
il
methodGen
getInstructionList
il
append
methodGen
loadHandler
il
append
new
PUSH
cpg
_name
il
append
DUP2
il
append
methodGen
startElement
for
int
i
i
elementCount
i
final
SyntaxTreeNode
item
SyntaxTreeNode
elementAt
i
if
item
instanceof
Variable
item
translate
classGen
methodGen
removeElement
item
if
_accessedPrefixes
boolean
declaresDefaultNS
Enumeration
e
_accessedPrefixes
keys
while
e
hasMoreElements
final
String
prefix
String
e
nextElement
final
String
uri
String
_accessedPrefixes
get
prefix
if
uri
Constants
EMPTYSTRING
prefix
Constants
EMPTYSTRING
if
prefix
Constants
EMPTYSTRING
declaresDefaultNS
il
append
methodGen
loadHandler
il
append
new
PUSH
cpg
prefix
il
append
new
PUSH
cpg
uri
il
append
methodGen
namespace
if
declaresDefaultNS
_parent
instanceof
XslElement
XslElement
_parent
declaresDefaultNS
il
append
methodGen
loadHandler
il
append
new
PUSH
cpg
Constants
EMPTYSTRING
il
append
new
PUSH
cpg
Constants
EMPTYSTRING
il
append
methodGen
namespace
if
_attributeElements
final
int
count
_attributeElements
size
for
int
i
i
count
i
SyntaxTreeNode
node
SyntaxTreeNode
_attributeElements
elementAt
i
node
translate
classGen
methodGen
translateContents
classGen
methodGen
il
append
methodGen
endElement
