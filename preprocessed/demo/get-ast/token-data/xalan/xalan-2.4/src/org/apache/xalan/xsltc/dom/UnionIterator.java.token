package
org
apache
xalan
xsltc
dom
import
org
apache
xalan
xsltc
DOM
import
org
apache
xalan
xsltc
NodeIterator
import
org
apache
xalan
xsltc
runtime
BasisLibrary
public
final
class
UnionIterator
extends
NodeIteratorBase
final
private
DOM
_dom
private
final
static
class
LookAheadIterator
public
int
node
markedNode
public
final
NodeIterator
iterator
public
LookAheadIterator
NodeIterator
iterator
this
iterator
iterator
public
int
step
node
iterator
next
return
node
public
void
setMark
markedNode
node
iterator
setMark
public
void
gotoMark
node
markedNode
iterator
gotoMark
private
static
final
int
InitSize
private
int
_heapSize
private
int
_size
InitSize
private
LookAheadIterator
_heap
new
LookAheadIterator
InitSize
private
int
_free
private
int
_returnedLast
public
UnionIterator
DOM
dom
_dom
dom
public
NodeIterator
cloneIterator
final
LookAheadIterator
heapCopy
new
LookAheadIterator
_heap
length
try
final
UnionIterator
clone
UnionIterator
super
clone
System
arraycopy
_heap
heapCopy
_heap
length
clone
setRestartable
clone
_heap
heapCopy
return
clone
reset
catch
CloneNotSupportedException
e
BasisLibrary
runTimeError
BasisLibrary
ITERATOR_CLONE_ERR
e
toString
return
public
UnionIterator
addIterator
NodeIterator
iterator
if
_free
_size
LookAheadIterator
newArray
new
LookAheadIterator
_size
System
arraycopy
_heap
newArray
_free
_heap
newArray
_heapSize
_heap
_free
new
LookAheadIterator
iterator
return
this
public
int
next
while
_heapSize
final
int
smallest
_heap
node
if
smallest
END
if
_heapSize
final
LookAheadIterator
temp
_heap
_heap
_heap
_heapSize
_heap
_heapSize
temp
else
return
END
else
if
smallest
_returnedLast
_heap
step
else
_heap
step
heapify
return
returnNode
_returnedLast
smallest
heapify
return
END
public
NodeIterator
setStartNode
int
node
if
_isRestartable
_startNode
node
for
int
i
i
_free
i
_heap
i
iterator
setStartNode
node
_heap
i
step
for
int
i
_heapSize
_free
i
i
heapify
i
_returnedLast
END
return
resetPosition
return
this
private
void
heapify
int
i
for
int
r
l
smallest
r
i
l
r
smallest
l
_heapSize
_dom
lessThan
_heap
l
node
_heap
i
node
l
i
if
r
_heapSize
_dom
lessThan
_heap
r
node
_heap
smallest
node
smallest
r
if
smallest
i
final
LookAheadIterator
temp
_heap
smallest
_heap
smallest
_heap
i
_heap
i
temp
i
smallest
else
break
public
void
setMark
for
int
i
i
_free
i
_heap
i
setMark
public
void
gotoMark
for
int
i
i
_free
i
_heap
i
gotoMark
public
NodeIterator
reset
super
reset
for
int
i
i
_free
i
_heap
i
iterator
reset
return
resetPosition
