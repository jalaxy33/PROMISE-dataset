package
org
apache
xalan
xsltc
compiler
import
org
apache
xalan
xsltc
compiler
util
Type
import
org
apache
bcel
generic
import
org
apache
xalan
xsltc
compiler
util
final
class
LogicalExpr
extends
Expression
public
static
final
int
OR
public
static
final
int
AND
private
final
int
_op
private
Expression
_left
private
Expression
_right
private
static
final
String
Ops
public
LogicalExpr
int
op
Expression
left
Expression
right
_op
op
_left
left
setParent
this
_right
right
setParent
this
public
boolean
hasPositionCall
return
_left
hasPositionCall
_right
hasPositionCall
public
Object
evaluateAtCompileTime
final
Object
leftb
_left
evaluateAtCompileTime
final
Object
rightb
_right
evaluateAtCompileTime
if
leftb
rightb
return
if
_op
AND
return
leftb
Boolean
TRUE
rightb
Boolean
TRUE
Boolean
TRUE
Boolean
FALSE
else
return
leftb
Boolean
TRUE
rightb
Boolean
TRUE
Boolean
TRUE
Boolean
FALSE
public
int
getOp
return
_op
public
void
setParser
Parser
parser
super
setParser
parser
_left
setParser
parser
_right
setParser
parser
public
String
toString
return
Ops
_op
_left
_right
public
Type
typeCheck
SymbolTable
stable
throws
TypeCheckError
Type
tleft
_left
typeCheck
stable
Type
tright
_right
typeCheck
stable
MethodType
wantType
new
MethodType
Type
Void
tleft
tright
MethodType
haveType
lookupPrimop
stable
Ops
_op
wantType
if
haveType
Type
arg1
Type
haveType
argsType
elementAt
if
arg1
identicalTo
tleft
_left
new
CastExpr
_left
arg1
Type
arg2
Type
haveType
argsType
elementAt
if
arg2
identicalTo
tright
_right
new
CastExpr
_right
arg1
return
_type
haveType
resultType
throw
new
TypeCheckError
this
public
void
translate
ClassGenerator
classGen
MethodGenerator
methodGen
translateDesynthesized
classGen
methodGen
synthesize
classGen
methodGen
public
void
translateDesynthesized
ClassGenerator
classGen
MethodGenerator
methodGen
final
InstructionList
il
methodGen
getInstructionList
final
SyntaxTreeNode
parent
getParent
if
_op
AND
_left
translateDesynthesized
classGen
methodGen
InstructionHandle
middle
il
append
NOP
_right
translateDesynthesized
classGen
methodGen
InstructionHandle
after
il
append
NOP
_falseList
append
_right
_falseList
append
_left
_falseList
if
_left
instanceof
LogicalExpr
LogicalExpr
_left
getOp
OR
_left
backPatchTrueList
middle
else
if
_left
instanceof
NotCall
_left
backPatchTrueList
middle
else
_trueList
append
_left
_trueList
if
_right
instanceof
LogicalExpr
LogicalExpr
_right
getOp
OR
_right
backPatchTrueList
after
else
if
_right
instanceof
NotCall
_right
backPatchTrueList
after
else
_trueList
append
_right
_trueList
else
_left
translateDesynthesized
classGen
methodGen
InstructionHandle
ih
il
append
new
GOTO
_right
translateDesynthesized
classGen
methodGen
_left
_trueList
backPatch
ih
_left
_falseList
backPatch
ih
getNext
_falseList
append
_right
_falseList
_trueList
add
ih
append
_right
_trueList
