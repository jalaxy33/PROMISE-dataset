package
org
apache
tools
ant
import
java
io
import
java
util
public
class
DirectoryScanner
implements
FileScanner
protected
final
static
String
DEFAULTEXCLUDES
protected
File
basedir
protected
String
includes
protected
String
excludes
protected
Vector
filesIncluded
protected
Vector
filesNotIncluded
protected
Vector
filesExcluded
protected
Vector
dirsIncluded
protected
Vector
dirsNotIncluded
protected
Vector
dirsExcluded
protected
boolean
haveSlowResults
public
DirectoryScanner
protected
static
boolean
matchPatternStart
String
pattern
String
str
if
str
startsWith
File
separator
pattern
startsWith
File
separator
return
Vector
patDirs
new
Vector
StringTokenizer
st
new
StringTokenizer
pattern
File
separator
while
st
hasMoreTokens
patDirs
addElement
st
nextToken
Vector
strDirs
new
Vector
st
new
StringTokenizer
str
File
separator
while
st
hasMoreTokens
strDirs
addElement
st
nextToken
int
patIdxStart
int
patIdxEnd
patDirs
size
int
strIdxStart
int
strIdxEnd
strDirs
size
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
String
patDir
String
patDirs
elementAt
patIdxStart
if
patDir
equals
break
if
match
patDir
String
strDirs
elementAt
strIdxStart
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
return
else
if
patIdxStart
patIdxEnd
return
else
return
protected
static
boolean
matchPath
String
pattern
String
str
if
str
startsWith
File
separator
pattern
startsWith
File
separator
return
Vector
patDirs
new
Vector
StringTokenizer
st
new
StringTokenizer
pattern
File
separator
while
st
hasMoreTokens
patDirs
addElement
st
nextToken
Vector
strDirs
new
Vector
st
new
StringTokenizer
str
File
separator
while
st
hasMoreTokens
strDirs
addElement
st
nextToken
int
patIdxStart
int
patIdxEnd
patDirs
size
int
strIdxStart
int
strIdxEnd
strDirs
size
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
String
patDir
String
patDirs
elementAt
patIdxStart
if
patDir
equals
break
if
match
patDir
String
strDirs
elementAt
strIdxStart
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
elementAt
i
equals
return
return
else
if
patIdxStart
patIdxEnd
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
String
patDir
String
patDirs
elementAt
patIdxEnd
if
patDir
equals
break
if
match
patDir
String
strDirs
elementAt
strIdxEnd
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
elementAt
i
equals
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
int
patIdxTmp
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
elementAt
i
equals
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
strLoop
for
int
i
i
strLength
patLength
i
for
int
j
j
patLength
j
String
subPat
String
patDirs
elementAt
patIdxStart
j
String
subStr
String
strDirs
elementAt
strIdxStart
i
j
if
match
subPat
subStr
continue
strLoop
foundIdx
strIdxStart
i
break
if
foundIdx
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
elementAt
i
equals
return
return
protected
static
boolean
match
String
pattern
String
str
char
patArr
pattern
toCharArray
char
strArr
str
toCharArray
int
patIdxStart
int
patIdxEnd
patArr
length
int
strIdxStart
int
strIdxEnd
strArr
length
char
ch
boolean
containsStar
for
int
i
i
patArr
length
i
if
patArr
i
containsStar
break
if
containsStar
if
patIdxEnd
strIdxEnd
return
for
int
i
i
patIdxEnd
i
ch
patArr
i
if
ch
ch
strArr
i
return
return
if
patIdxEnd
return
while
ch
patArr
patIdxStart
strIdxStart
strIdxEnd
if
ch
ch
strArr
strIdxStart
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
return
return
while
ch
patArr
patIdxEnd
strIdxStart
strIdxEnd
if
ch
ch
strArr
strIdxEnd
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
int
patIdxTmp
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
strLoop
for
int
i
i
strLength
patLength
i
for
int
j
j
patLength
j
ch
patArr
patIdxStart
j
if
ch
ch
strArr
strIdxStart
i
j
continue
strLoop
foundIdx
strIdxStart
i
break
if
foundIdx
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
return
return
public
void
setBasedir
String
basedir
setBasedir
new
File
basedir
replace
File
separatorChar
replace
File
separatorChar
public
void
setBasedir
File
basedir
this
basedir
basedir
public
File
getBasedir
return
basedir
public
void
setIncludes
String
includes
if
includes
this
includes
else
this
includes
new
String
includes
length
for
int
i
i
includes
length
i
String
pattern
pattern
includes
i
replace
File
separatorChar
replace
File
separatorChar
if
pattern
endsWith
File
separator
pattern
this
includes
i
pattern
public
void
setExcludes
String
excludes
if
excludes
this
excludes
else
this
excludes
new
String
excludes
length
for
int
i
i
excludes
length
i
String
pattern
pattern
excludes
i
replace
File
separatorChar
replace
File
separatorChar
if
pattern
endsWith
File
separator
pattern
this
excludes
i
pattern
public
void
scan
if
basedir
throw
new
IllegalStateException
if
basedir
exists
throw
new
IllegalStateException
basedir
if
basedir
isDirectory
throw
new
IllegalStateException
basedir
if
includes
includes
new
String
includes
if
excludes
excludes
new
String
filesIncluded
new
Vector
filesNotIncluded
new
Vector
filesExcluded
new
Vector
dirsIncluded
new
Vector
dirsNotIncluded
new
Vector
dirsExcluded
new
Vector
if
isIncluded
if
isExcluded
dirsIncluded
addElement
else
dirsExcluded
addElement
else
dirsNotIncluded
addElement
scandir
basedir
protected
void
slowScan
if
haveSlowResults
return
String
excl
new
String
dirsExcluded
size
dirsExcluded
copyInto
excl
String
notIncl
new
String
dirsNotIncluded
size
dirsNotIncluded
copyInto
notIncl
for
int
i
i
excl
length
i
if
couldHoldIncluded
excl
i
scandir
new
File
basedir
excl
i
excl
i
File
separator
for
int
i
i
notIncl
length
i
if
couldHoldIncluded
notIncl
i
scandir
new
File
basedir
notIncl
i
notIncl
i
File
separator
haveSlowResults
protected
void
scandir
File
dir
String
vpath
boolean
fast
String
newfiles
dir
list
if
newfiles
throw
new
BuildException
dir
getAbsolutePath
for
int
i
i
newfiles
length
i
String
name
vpath
newfiles
i
File
file
new
File
dir
newfiles
i
if
file
isDirectory
if
isIncluded
name
if
isExcluded
name
dirsIncluded
addElement
name
if
fast
scandir
file
name
File
separator
fast
else
dirsExcluded
addElement
name
if
fast
couldHoldIncluded
name
scandir
file
name
File
separator
fast
else
dirsNotIncluded
addElement
name
if
fast
couldHoldIncluded
name
scandir
file
name
File
separator
fast
if
fast
scandir
file
name
File
separator
fast
else
if
file
isFile
if
isIncluded
name
if
isExcluded
name
filesIncluded
addElement
name
else
filesExcluded
addElement
name
else
filesNotIncluded
addElement
name
protected
boolean
isIncluded
String
name
for
int
i
i
includes
length
i
if
matchPath
includes
i
name
return
return
protected
boolean
couldHoldIncluded
String
name
for
int
i
i
includes
length
i
if
matchPatternStart
includes
i
name
return
return
protected
boolean
isExcluded
String
name
for
int
i
i
excludes
length
i
if
matchPath
excludes
i
name
return
return
public
String
getIncludedFiles
int
count
filesIncluded
size
String
files
new
String
count
for
int
i
i
count
i
files
i
String
filesIncluded
elementAt
i
return
files
public
String
getNotIncludedFiles
slowScan
int
count
filesNotIncluded
size
String
files
new
String
count
for
int
i
i
count
i
files
i
String
filesNotIncluded
elementAt
i
return
files
public
String
getExcludedFiles
slowScan
int
count
filesExcluded
size
String
files
new
String
count
for
int
i
i
count
i
files
i
String
filesExcluded
elementAt
i
return
files
public
String
getIncludedDirectories
int
count
dirsIncluded
size
String
directories
new
String
count
for
int
i
i
count
i
directories
i
String
dirsIncluded
elementAt
i
return
directories
public
String
getNotIncludedDirectories
slowScan
int
count
dirsNotIncluded
size
String
directories
new
String
count
for
int
i
i
count
i
directories
i
String
dirsNotIncluded
elementAt
i
return
directories
public
String
getExcludedDirectories
slowScan
int
count
dirsExcluded
size
String
directories
new
String
count
for
int
i
i
count
i
directories
i
String
dirsExcluded
elementAt
i
return
directories
public
void
addDefaultExcludes
int
excludesLength
excludes
excludes
length
String
newExcludes
newExcludes
new
String
excludesLength
DEFAULTEXCLUDES
length
if
excludesLength
System
arraycopy
excludes
newExcludes
excludesLength
for
int
i
i
DEFAULTEXCLUDES
length
i
newExcludes
i
excludesLength
DEFAULTEXCLUDES
i
replace
File
separatorChar
replace
File
separatorChar
excludes
newExcludes
