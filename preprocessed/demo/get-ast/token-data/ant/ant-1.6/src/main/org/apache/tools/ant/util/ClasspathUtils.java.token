package
org
apache
tools
ant
util
import
org
apache
tools
ant
AntClassLoader
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
Project
import
org
apache
tools
ant
ProjectComponent
import
org
apache
tools
ant
types
Path
import
org
apache
tools
ant
types
Reference
public
class
ClasspathUtils
private
static
final
String
LOADER_ID_PREFIX
public
static
final
String
REUSE_LOADER_REF
public
static
ClassLoader
getClassLoaderForPath
Project
p
Reference
ref
return
getClassLoaderForPath
p
ref
public
static
ClassLoader
getClassLoaderForPath
Project
p
Reference
ref
boolean
reverseLoader
String
pathId
ref
getRefId
Object
path
p
getReference
pathId
if
path
instanceof
Path
throw
new
BuildException
pathId
String
loaderId
LOADER_ID_PREFIX
pathId
return
getClassLoaderForPath
p
Path
path
loaderId
reverseLoader
public
static
ClassLoader
getClassLoaderForPath
Project
p
Path
path
String
loaderId
return
getClassLoaderForPath
p
path
loaderId
public
static
ClassLoader
getClassLoaderForPath
Project
p
Path
path
String
loaderId
boolean
reverseLoader
return
getClassLoaderForPath
p
path
loaderId
reverseLoader
isMagicPropertySet
p
public
static
ClassLoader
getClassLoaderForPath
Project
p
Path
path
String
loaderId
boolean
reverseLoader
boolean
reuseLoader
ClassLoader
cl
if
loaderId
reuseLoader
Object
reusedLoader
p
getReference
loaderId
if
reusedLoader
reusedLoader
instanceof
ClassLoader
throw
new
BuildException
loaderId
cl
ClassLoader
reusedLoader
if
cl
cl
getUniqueClassLoaderForPath
p
path
reverseLoader
if
loaderId
reuseLoader
p
addReference
loaderId
cl
return
cl
public
static
ClassLoader
getUniqueClassLoaderForPath
Project
p
Path
path
boolean
reverseLoader
AntClassLoader
acl
p
createClassLoader
path
path
Path
systemClasspath
if
reverseLoader
acl
setParentFirst
acl
addJavaLibraries
return
acl
public
static
Object
newInstance
String
className
ClassLoader
userDefinedLoader
try
Class
clazz
userDefinedLoader
loadClass
className
Object
o
clazz
newInstance
return
o
catch
ClassNotFoundException
e
throw
new
BuildException
className
e
catch
InstantiationException
e
throw
new
BuildException
className
e
catch
IllegalAccessException
e
throw
new
BuildException
className
e
public
static
Delegate
getDelegate
ProjectComponent
component
return
new
Delegate
component
private
static
boolean
isMagicPropertySet
Project
p
return
p
getProperty
REUSE_LOADER_REF
public
static
class
Delegate
private
final
ProjectComponent
component
private
Path
classpath
private
String
classpathId
private
String
className
private
String
loaderId
private
boolean
reverseLoader
Delegate
ProjectComponent
component
this
component
component
public
void
setClasspath
Path
classpath
if
this
classpath
this
classpath
classpath
else
this
classpath
append
classpath
public
Path
createClasspath
if
this
classpath
this
classpath
new
Path
component
getProject
return
this
classpath
createPath
public
void
setClassname
String
fcqn
this
className
fcqn
public
void
setClasspathref
Reference
r
this
classpathId
r
getRefId
createClasspath
setRefid
r
public
void
setReverseLoader
boolean
reverseLoader
this
reverseLoader
reverseLoader
public
void
setLoaderRef
Reference
r
this
loaderId
r
getRefId
public
ClassLoader
getClassLoader
ClassLoader
cl
cl
ClasspathUtils
getClassLoaderForPath
getContextProject
this
classpath
getClassLoadId
this
reverseLoader
loaderId
isMagicPropertySet
getContextProject
return
cl
private
Project
getContextProject
return
this
component
getProject
public
String
getClassLoadId
if
this
loaderId
this
classpathId
return
ClasspathUtils
LOADER_ID_PREFIX
this
classpathId
else
return
this
loaderId
public
Object
newInstance
ClassLoader
cl
getClassLoader
return
ClasspathUtils
newInstance
this
className
cl
public
Path
getClasspath
return
classpath
public
boolean
isReverseLoader
return
reverseLoader
