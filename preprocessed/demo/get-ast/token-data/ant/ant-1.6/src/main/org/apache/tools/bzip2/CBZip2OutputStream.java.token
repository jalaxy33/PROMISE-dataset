package
org
apache
tools
bzip2
import
java
io
OutputStream
import
java
io
IOException
public
class
CBZip2OutputStream
extends
OutputStream
implements
BZip2Constants
protected
static
final
int
SETMASK
protected
static
final
int
CLEARMASK
SETMASK
protected
static
final
int
GREATER_ICOST
protected
static
final
int
LESSER_ICOST
protected
static
final
int
SMALL_THRESH
protected
static
final
int
DEPTH_THRESH
protected
static
final
int
QSORT_STACK_SIZE
private
static
void
panic
System
out
println
private
void
makeMaps
int
i
nInUse
for
i
i
i
if
inUse
i
seqToUnseq
nInUse
char
i
unseqToSeq
i
char
nInUse
nInUse
protected
static
void
hbMakeCodeLengths
char
len
int
freq
int
alphaSize
int
maxLen
int
nNodes
nHeap
n1
n2
i
j
k
boolean
tooLong
int
heap
new
int
MAX_ALPHA_SIZE
int
weight
new
int
MAX_ALPHA_SIZE
int
parent
new
int
MAX_ALPHA_SIZE
for
i
i
alphaSize
i
weight
i
freq
i
freq
i
while
nNodes
alphaSize
nHeap
heap
weight
parent
for
i
i
alphaSize
i
parent
i
nHeap
heap
nHeap
i
int
zz
tmp
zz
nHeap
tmp
heap
zz
while
weight
tmp
weight
heap
zz
heap
zz
heap
zz
zz
heap
zz
tmp
if
nHeap
MAX_ALPHA_SIZE
panic
while
nHeap
n1
heap
heap
heap
nHeap
nHeap
int
zz
yy
tmp
zz
tmp
heap
zz
while
yy
zz
if
yy
nHeap
break
if
yy
nHeap
weight
heap
yy
weight
heap
yy
yy
if
weight
tmp
weight
heap
yy
break
heap
zz
heap
yy
zz
yy
heap
zz
tmp
n2
heap
heap
heap
nHeap
nHeap
int
zz
yy
tmp
zz
tmp
heap
zz
while
yy
zz
if
yy
nHeap
break
if
yy
nHeap
weight
heap
yy
weight
heap
yy
yy
if
weight
tmp
weight
heap
yy
break
heap
zz
heap
yy
zz
yy
heap
zz
tmp
nNodes
parent
n1
parent
n2
nNodes
weight
nNodes
weight
n1
weight
n2
weight
n1
weight
n2
weight
n1
weight
n2
parent
nNodes
nHeap
heap
nHeap
nNodes
int
zz
tmp
zz
nHeap
tmp
heap
zz
while
weight
tmp
weight
heap
zz
heap
zz
heap
zz
zz
heap
zz
tmp
if
nNodes
MAX_ALPHA_SIZE
panic
tooLong
for
i
i
alphaSize
i
j
k
i
while
parent
k
k
parent
k
j
len
i
char
j
if
j
maxLen
tooLong
if
tooLong
break
for
i
i
alphaSize
i
j
weight
i
j
j
weight
i
j
int
last
int
origPtr
int
blockSize100k
boolean
blockRandomised
int
bytesOut
int
bsBuff
int
bsLive
CRC
mCrc
new
CRC
private
boolean
inUse
new
boolean
private
int
nInUse
private
char
seqToUnseq
new
char
private
char
unseqToSeq
new
char
private
char
selector
new
char
MAX_SELECTORS
private
char
selectorMtf
new
char
MAX_SELECTORS
private
char
block
private
int
quadrant
private
int
zptr
private
short
szptr
private
int
ftab
private
int
nMTF
private
int
mtfFreq
new
int
MAX_ALPHA_SIZE
private
int
workFactor
private
int
workDone
private
int
workLimit
private
boolean
firstAttempt
private
int
nBlocksRandomised
private
int
currentChar
private
int
runLength
public
CBZip2OutputStream
OutputStream
inStream
throws
IOException
this
inStream
public
CBZip2OutputStream
OutputStream
inStream
int
inBlockSize
throws
IOException
block
quadrant
zptr
ftab
bsSetStream
inStream
workFactor
if
inBlockSize
inBlockSize
if
inBlockSize
inBlockSize
blockSize100k
inBlockSize
allocateCompressStructures
initialize
initBlock
public
void
write
int
bv
throws
IOException
int
b
bv
if
currentChar
if
currentChar
b
runLength
if
runLength
writeRun
currentChar
runLength
else
writeRun
runLength
currentChar
b
else
currentChar
b
runLength
private
void
writeRun
throws
IOException
if
last
allowableBlockSize
inUse
currentChar
for
int
i
i
runLength
i
mCrc
updateCRC
char
currentChar
switch
runLength
case
last
block
last
char
currentChar
break
case
last
block
last
char
currentChar
last
block
last
char
currentChar
break
case
last
block
last
char
currentChar
last
block
last
char
currentChar
last
block
last
char
currentChar
break
default
inUse
runLength
last
block
last
char
currentChar
last
block
last
char
currentChar
last
block
last
char
currentChar
last
block
last
char
currentChar
last
block
last
char
runLength
break
else
endBlock
initBlock
writeRun
boolean
closed
protected
void
finalize
throws
Throwable
close
super
finalize
public
void
close
throws
IOException
if
closed
return
if
runLength
writeRun
currentChar
endBlock
endCompression
closed
super
close
bsStream
close
public
void
flush
throws
IOException
super
flush
bsStream
flush
private
int
blockCRC
combinedCRC
private
void
initialize
throws
IOException
bytesOut
nBlocksRandomised
bsPutUChar
bsPutUChar
blockSize100k
combinedCRC
private
int
allowableBlockSize
private
void
initBlock
mCrc
initialiseCRC
last
for
int
i
i
i
inUse
i
allowableBlockSize
baseBlockSize
blockSize100k
private
void
endBlock
throws
IOException
blockCRC
mCrc
getFinalCRC
combinedCRC
combinedCRC
combinedCRC
combinedCRC
blockCRC
doReversibleTransformation
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutint
blockCRC
if
blockRandomised
bsW
nBlocksRandomised
else
bsW
moveToFrontCodeAndSend
private
void
endCompression
throws
IOException
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutint
combinedCRC
bsFinishedWithStream
private
void
hbAssignCodes
int
code
char
length
int
minLen
int
maxLen
int
alphaSize
int
n
vec
i
vec
for
n
minLen
n
maxLen
n
for
i
i
alphaSize
i
if
length
i
n
code
i
vec
vec
vec
private
void
bsSetStream
OutputStream
f
bsStream
f
bsLive
bsBuff
bytesOut
private
void
bsFinishedWithStream
throws
IOException
while
bsLive
int
ch
bsBuff
try
bsStream
write
ch
catch
IOException
e
throw
e
bsBuff
bsLive
bytesOut
private
void
bsW
int
n
int
v
throws
IOException
while
bsLive
int
ch
bsBuff
try
bsStream
write
ch
catch
IOException
e
throw
e
bsBuff
bsLive
bytesOut
bsBuff
v
bsLive
n
bsLive
n
private
void
bsPutUChar
int
c
throws
IOException
bsW
c
private
void
bsPutint
int
u
throws
IOException
bsW
u
bsW
u
bsW
u
bsW
u
private
void
bsPutIntVS
int
numBits
int
c
throws
IOException
bsW
numBits
c
private
void
sendMTFValues
throws
IOException
char
len
new
char
N_GROUPS
MAX_ALPHA_SIZE
int
v
t
i
j
gs
ge
totc
bt
bc
iter
int
nSelectors
alphaSize
minLen
maxLen
selCtr
int
nGroups
nBytes
alphaSize
nInUse
for
t
t
N_GROUPS
t
for
v
v
alphaSize
v
len
t
v
char
GREATER_ICOST
if
nMTF
panic
if
nMTF
nGroups
else
if
nMTF
nGroups
else
if
nMTF
nGroups
else
if
nMTF
nGroups
else
nGroups
int
nPart
remF
tFreq
aFreq
nPart
nGroups
remF
nMTF
gs
while
nPart
tFreq
remF
nPart
ge
gs
aFreq
while
aFreq
tFreq
ge
alphaSize
ge
aFreq
mtfFreq
ge
if
ge
gs
nPart
nGroups
nPart
nGroups
nPart
aFreq
mtfFreq
ge
ge
for
v
v
alphaSize
v
if
v
gs
v
ge
len
nPart
v
char
LESSER_ICOST
else
len
nPart
v
char
GREATER_ICOST
nPart
gs
ge
remF
aFreq
int
rfreq
new
int
N_GROUPS
MAX_ALPHA_SIZE
int
fave
new
int
N_GROUPS
short
cost
new
short
N_GROUPS
for
iter
iter
N_ITERS
iter
for
t
t
nGroups
t
fave
t
for
t
t
nGroups
t
for
v
v
alphaSize
v
rfreq
t
v
nSelectors
totc
gs
while
if
gs
nMTF
break
ge
gs
G_SIZE
if
ge
nMTF
ge
nMTF
for
t
t
nGroups
t
cost
t
if
nGroups
short
cost0
cost1
cost2
cost3
cost4
cost5
cost0
cost1
cost2
cost3
cost4
cost5
for
i
gs
i
ge
i
short
icv
szptr
i
cost0
len
icv
cost1
len
icv
cost2
len
icv
cost3
len
icv
cost4
len
icv
cost5
len
icv
cost
cost0
cost
cost1
cost
cost2
cost
cost3
cost
cost4
cost
cost5
else
for
i
gs
i
ge
i
short
icv
szptr
i
for
t
t
nGroups
t
cost
t
len
t
icv
bc
bt
for
t
t
nGroups
t
if
cost
t
bc
bc
cost
t
bt
t
totc
bc
fave
bt
selector
nSelectors
char
bt
nSelectors
for
i
gs
i
ge
i
rfreq
bt
szptr
i
gs
ge
for
t
t
nGroups
t
hbMakeCodeLengths
len
t
rfreq
t
alphaSize
rfreq
fave
cost
if
nGroups
panic
if
nSelectors
nSelectors
G_SIZE
panic
char
pos
new
char
N_GROUPS
char
ll_i
tmp2
tmp
for
i
i
nGroups
i
pos
i
char
i
for
i
i
nSelectors
i
ll_i
selector
i
j
tmp
pos
j
while
ll_i
tmp
j
tmp2
tmp
tmp
pos
j
pos
j
tmp2
pos
tmp
selectorMtf
i
char
j
int
code
new
int
N_GROUPS
MAX_ALPHA_SIZE
for
t
t
nGroups
t
minLen
maxLen
for
i
i
alphaSize
i
if
len
t
i
maxLen
maxLen
len
t
i
if
len
t
i
minLen
minLen
len
t
i
if
maxLen
panic
if
minLen
panic
hbAssignCodes
code
t
len
t
minLen
maxLen
alphaSize
boolean
inUse16
new
boolean
for
i
i
i
inUse16
i
for
j
j
j
if
inUse
i
j
inUse16
i
nBytes
bytesOut
for
i
i
i
if
inUse16
i
bsW
else
bsW
for
i
i
i
if
inUse16
i
for
j
j
j
if
inUse
i
j
bsW
else
bsW
nBytes
bytesOut
bsW
nGroups
bsW
nSelectors
for
i
i
nSelectors
i
for
j
j
selectorMtf
i
j
bsW
bsW
nBytes
bytesOut
for
t
t
nGroups
t
int
curr
len
t
bsW
curr
for
i
i
alphaSize
i
while
curr
len
t
i
bsW
curr
while
curr
len
t
i
bsW
curr
bsW
nBytes
bytesOut
selCtr
gs
while
if
gs
nMTF
break
ge
gs
G_SIZE
if
ge
nMTF
ge
nMTF
for
i
gs
i
ge
i
bsW
len
selector
selCtr
szptr
i
code
selector
selCtr
szptr
i
gs
ge
selCtr
if
selCtr
nSelectors
panic
private
void
moveToFrontCodeAndSend
throws
IOException
bsPutIntVS
origPtr
generateMTFValues
sendMTFValues
private
OutputStream
bsStream
private
void
simpleSort
int
lo
int
hi
int
d
int
i
j
h
bigN
hp
int
v
bigN
hi
lo
if
bigN
return
hp
while
incs
hp
bigN
hp
hp
for
hp
hp
h
incs
hp
i
lo
h
while
if
i
hi
break
v
zptr
i
j
i
while
fullGtU
zptr
j
h
d
v
d
zptr
j
zptr
j
h
j
j
h
if
j
lo
h
break
zptr
j
v
i
if
i
hi
break
v
zptr
i
j
i
while
fullGtU
zptr
j
h
d
v
d
zptr
j
zptr
j
h
j
j
h
if
j
lo
h
break
zptr
j
v
i
if
i
hi
break
v
zptr
i
j
i
while
fullGtU
zptr
j
h
d
v
d
zptr
j
zptr
j
h
j
j
h
if
j
lo
h
break
zptr
j
v
i
if
workDone
workLimit
firstAttempt
return
private
void
vswap
int
p1
int
p2
int
n
int
temp
while
n
temp
zptr
p1
zptr
p1
zptr
p2
zptr
p2
temp
p1
p2
n
private
char
med3
char
a
char
b
char
c
char
t
if
a
b
t
a
a
b
b
t
if
b
c
t
b
b
c
c
t
if
a
b
b
a
return
b
private
static
class
StackElem
int
ll
int
hh
int
dd
private
void
qSort3
int
loSt
int
hiSt
int
dSt
int
unLo
unHi
ltLo
gtHi
med
n
m
int
sp
lo
hi
d
StackElem
stack
new
StackElem
QSORT_STACK_SIZE
for
int
count
count
QSORT_STACK_SIZE
count
stack
count
new
StackElem
sp
stack
sp
ll
loSt
stack
sp
hh
hiSt
stack
sp
dd
dSt
sp
while
sp
if
sp
QSORT_STACK_SIZE
panic
sp
lo
stack
sp
ll
hi
stack
sp
hh
d
stack
sp
dd
if
hi
lo
SMALL_THRESH
d
DEPTH_THRESH
simpleSort
lo
hi
d
if
workDone
workLimit
firstAttempt
return
continue
med
med3
block
zptr
lo
d
block
zptr
hi
d
block
zptr
lo
hi
d
unLo
ltLo
lo
unHi
gtHi
hi
while
while
if
unLo
unHi
break
n
int
block
zptr
unLo
d
med
if
n
int
temp
temp
zptr
unLo
zptr
unLo
zptr
ltLo
zptr
ltLo
temp
ltLo
unLo
continue
if
n
break
unLo
while
if
unLo
unHi
break
n
int
block
zptr
unHi
d
med
if
n
int
temp
temp
zptr
unHi
zptr
unHi
zptr
gtHi
zptr
gtHi
temp
gtHi
unHi
continue
if
n
break
unHi
if
unLo
unHi
break
int
temp
temp
zptr
unLo
zptr
unLo
zptr
unHi
zptr
unHi
temp
unLo
unHi
if
gtHi
ltLo
stack
sp
ll
lo
stack
sp
hh
hi
stack
sp
dd
d
sp
continue
n
ltLo
lo
unLo
ltLo
ltLo
lo
unLo
ltLo
vswap
lo
unLo
n
n
m
hi
gtHi
gtHi
unHi
hi
gtHi
gtHi
unHi
vswap
unLo
hi
m
m
n
lo
unLo
ltLo
m
hi
gtHi
unHi
stack
sp
ll
lo
stack
sp
hh
n
stack
sp
dd
d
sp
stack
sp
ll
n
stack
sp
hh
m
stack
sp
dd
d
sp
stack
sp
ll
m
stack
sp
hh
hi
stack
sp
dd
d
sp
private
void
mainSort
int
i
j
ss
sb
int
runningOrder
new
int
int
copy
new
int
boolean
bigDone
new
boolean
int
c1
c2
int
numQSorted
for
i
i
NUM_OVERSHOOT_BYTES
i
block
last
i
block
i
last
for
i
i
last
NUM_OVERSHOOT_BYTES
i
quadrant
i
block
char
block
last
if
last
for
i
i
last
i
zptr
i
i
firstAttempt
workDone
workLimit
simpleSort
last
else
numQSorted
for
i
i
i
bigDone
i
for
i
i
i
ftab
i
c1
block
for
i
i
last
i
c2
block
i
ftab
c1
c2
c1
c2
for
i
i
i
ftab
i
ftab
i
c1
block
for
i
i
last
i
c2
block
i
j
c1
c2
c1
c2
ftab
j
zptr
ftab
j
i
j
block
last
block
ftab
j
zptr
ftab
j
last
for
i
i
i
runningOrder
i
i
int
vv
int
h
do
h
h
while
h
do
h
h
for
i
h
i
i
vv
runningOrder
i
j
i
while
ftab
runningOrder
j
h
ftab
runningOrder
j
h
ftab
vv
ftab
vv
runningOrder
j
runningOrder
j
h
j
j
h
if
j
h
break
runningOrder
j
vv
while
h
for
i
i
i
ss
runningOrder
i
for
j
j
j
sb
ss
j
if
ftab
sb
SETMASK
SETMASK
int
lo
ftab
sb
CLEARMASK
int
hi
ftab
sb
CLEARMASK
if
hi
lo
qSort3
lo
hi
numQSorted
hi
lo
if
workDone
workLimit
firstAttempt
return
ftab
sb
SETMASK
bigDone
ss
if
i
int
bbStart
ftab
ss
CLEARMASK
int
bbSize
ftab
ss
CLEARMASK
bbStart
int
shifts
while
bbSize
shifts
shifts
for
j
j
bbSize
j
int
a2update
zptr
bbStart
j
int
qVal
j
shifts
quadrant
a2update
qVal
if
a2update
NUM_OVERSHOOT_BYTES
quadrant
a2update
last
qVal
if
bbSize
shifts
panic
for
j
j
j
copy
j
ftab
j
ss
CLEARMASK
for
j
ftab
ss
CLEARMASK
j
ftab
ss
CLEARMASK
j
c1
block
zptr
j
if
bigDone
c1
zptr
copy
c1
zptr
j
last
zptr
j
copy
c1
for
j
j
j
ftab
j
ss
SETMASK
private
void
randomiseBlock
int
i
int
rNToGo
int
rTPos
for
i
i
i
inUse
i
for
i
i
last
i
if
rNToGo
rNToGo
char
rNums
rTPos
rTPos
if
rTPos
rTPos
rNToGo
block
i
rNToGo
block
i
inUse
block
i
private
void
doReversibleTransformation
int
i
workLimit
workFactor
last
workDone
blockRandomised
firstAttempt
mainSort
if
workDone
workLimit
firstAttempt
randomiseBlock
workLimit
workDone
blockRandomised
firstAttempt
mainSort
origPtr
for
i
i
last
i
if
zptr
i
origPtr
i
break
if
origPtr
panic
private
boolean
fullGtU
int
i1
int
i2
int
k
char
c1
c2
int
s1
s2
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
i1
i2
k
last
do
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
s1
quadrant
i1
s2
quadrant
i2
if
s1
s2
return
s1
s2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
s1
quadrant
i1
s2
quadrant
i2
if
s1
s2
return
s1
s2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
s1
quadrant
i1
s2
quadrant
i2
if
s1
s2
return
s1
s2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
return
c1
c2
s1
quadrant
i1
s2
quadrant
i2
if
s1
s2
return
s1
s2
i1
i2
if
i1
last
i1
last
i1
if
i2
last
i2
last
i2
k
workDone
while
k
return
private
int
incs
private
void
allocateCompressStructures
int
n
baseBlockSize
blockSize100k
block
new
char
n
NUM_OVERSHOOT_BYTES
quadrant
new
int
n
NUM_OVERSHOOT_BYTES
zptr
new
int
n
ftab
new
int
if
block
quadrant
zptr
ftab
szptr
new
short
n
private
void
generateMTFValues
char
yy
new
char
int
i
j
char
tmp
char
tmp2
int
zPend
int
wr
int
EOB
makeMaps
EOB
nInUse
for
i
i
EOB
i
mtfFreq
i
wr
zPend
for
i
i
nInUse
i
yy
i
char
i
for
i
i
last
i
char
ll_i
ll_i
unseqToSeq
block
zptr
i
j
tmp
yy
j
while
ll_i
tmp
j
tmp2
tmp
tmp
yy
j
yy
j
tmp2
yy
tmp
if
j
zPend
else
if
zPend
zPend
while
switch
zPend
case
szptr
wr
short
RUNA
wr
mtfFreq
RUNA
break
case
szptr
wr
short
RUNB
wr
mtfFreq
RUNB
break
if
zPend
break
zPend
zPend
zPend
szptr
wr
short
j
wr
mtfFreq
j
if
zPend
zPend
while
switch
zPend
case
szptr
wr
short
RUNA
wr
mtfFreq
RUNA
break
case
szptr
wr
short
RUNB
wr
mtfFreq
RUNB
break
if
zPend
break
zPend
zPend
szptr
wr
short
EOB
wr
mtfFreq
EOB
nMTF
wr
