package
org
apache
tools
ant
taskdefs
import
java
io
File
import
java
io
IOException
import
java
util
Vector
import
java
util
Enumeration
import
org
apache
tools
ant
Task
import
org
apache
tools
ant
Project
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
types
Path
import
org
apache
tools
ant
types
DirSet
import
org
apache
tools
ant
types
FileSet
import
org
apache
tools
ant
types
FileList
import
org
apache
tools
ant
types
PropertySet
import
org
apache
tools
ant
types
Reference
import
org
apache
tools
ant
types
ResourceCollection
import
org
apache
tools
ant
taskdefs
Ant
TargetElement
public
class
SubAnt
extends
Task
private
Path
buildpath
private
Ant
ant
private
String
subTarget
private
String
antfile
private
File
genericantfile
private
boolean
verbose
private
boolean
inheritAll
private
boolean
inheritRefs
private
boolean
failOnError
private
String
output
private
Vector
properties
new
Vector
private
Vector
references
new
Vector
private
Vector
propertySets
new
Vector
private
Vector
targets
new
Vector
public
void
handleOutput
String
output
if
ant
ant
handleOutput
output
else
super
handleOutput
output
public
int
handleInput
byte
buffer
int
offset
int
length
throws
IOException
if
ant
return
ant
handleInput
buffer
offset
length
else
return
super
handleInput
buffer
offset
length
public
void
handleFlush
String
output
if
ant
ant
handleFlush
output
else
super
handleFlush
output
public
void
handleErrorOutput
String
output
if
ant
ant
handleErrorOutput
output
else
super
handleErrorOutput
output
public
void
handleErrorFlush
String
output
if
ant
ant
handleErrorFlush
output
else
super
handleErrorFlush
output
public
void
execute
if
buildpath
throw
new
BuildException
final
String
filenames
buildpath
list
final
int
count
filenames
length
if
count
log
Project
MSG_WARN
return
BuildException
buildException
for
int
i
i
count
i
File
file
String
subdirPath
Throwable
thrownException
try
File
directory
file
new
File
filenames
i
if
file
isDirectory
if
verbose
subdirPath
file
getPath
log
subdirPath
Project
MSG_INFO
if
genericantfile
directory
file
file
genericantfile
else
file
new
File
file
antfile
execute
file
directory
if
verbose
subdirPath
log
subdirPath
Project
MSG_INFO
catch
RuntimeException
ex
if
getProject
isKeepGoingMode
if
verbose
subdirPath
log
subdirPath
Project
MSG_INFO
throw
ex
thrownException
ex
catch
Throwable
ex
if
getProject
isKeepGoingMode
if
verbose
subdirPath
log
subdirPath
Project
MSG_INFO
throw
new
BuildException
ex
thrownException
ex
if
thrownException
if
thrownException
instanceof
BuildException
log
file
thrownException
getMessage
Project
MSG_ERR
if
buildException
buildException
BuildException
thrownException
else
log
file
thrownException
getMessage
Project
MSG_ERR
thrownException
printStackTrace
System
err
if
buildException
buildException
new
BuildException
thrownException
if
verbose
subdirPath
log
subdirPath
Project
MSG_INFO
if
buildException
throw
buildException
private
void
execute
File
file
File
directory
throws
BuildException
if
file
exists
file
isDirectory
file
canRead
String
msg
file
if
failOnError
throw
new
BuildException
msg
log
msg
Project
MSG_WARN
return
ant
createAntTask
directory
String
antfilename
file
getAbsolutePath
ant
setAntfile
antfilename
for
int
i
i
targets
size
i
TargetElement
targetElement
TargetElement
targets
get
i
ant
addConfiguredTarget
targetElement
try
ant
execute
catch
BuildException
e
if
failOnError
throw
e
log
subTarget
antfilename
e
getMessage
Project
MSG_WARN
catch
Throwable
e
if
failOnError
throw
new
BuildException
e
log
subTarget
antfilename
e
toString
Project
MSG_WARN
finally
ant
public
void
setAntfile
String
antfile
this
antfile
antfile
public
void
setGenericAntfile
File
afile
this
genericantfile
afile
public
void
setFailonerror
boolean
failOnError
this
failOnError
failOnError
public
void
setTarget
String
target
this
subTarget
target
public
void
addConfiguredTarget
TargetElement
t
String
name
t
getName
if
equals
name
throw
new
BuildException
targets
add
t
public
void
setVerbose
boolean
on
this
verbose
on
public
void
setOutput
String
s
this
output
s
public
void
setInheritall
boolean
b
this
inheritAll
b
public
void
setInheritrefs
boolean
b
this
inheritRefs
b
public
void
addProperty
Property
p
properties
addElement
p
public
void
addReference
Ant
Reference
r
references
addElement
r
public
void
addPropertyset
PropertySet
ps
propertySets
addElement
ps
public
void
addDirset
DirSet
set
add
set
public
void
addFileset
FileSet
set
add
set
public
void
addFilelist
FileList
list
add
list
public
void
add
ResourceCollection
rc
getBuildpath
add
rc
public
void
setBuildpath
Path
s
getBuildpath
append
s
public
Path
createBuildpath
return
getBuildpath
createPath
public
Path
PathElement
createBuildpathElement
return
getBuildpath
createPathElement
private
Path
getBuildpath
if
buildpath
buildpath
new
Path
getProject
return
buildpath
public
void
setBuildpathRef
Reference
r
createBuildpath
setRefid
r
private
Ant
createAntTask
File
directory
Ant
antTask
new
Ant
this
antTask
init
if
subTarget
subTarget
length
antTask
setTarget
subTarget
if
output
antTask
setOutput
output
if
directory
antTask
setDir
directory
antTask
setInheritAll
inheritAll
for
Enumeration
i
properties
elements
i
hasMoreElements
copyProperty
antTask
createProperty
Property
i
nextElement
for
Enumeration
i
propertySets
elements
i
hasMoreElements
antTask
addPropertyset
PropertySet
i
nextElement
antTask
setInheritRefs
inheritRefs
for
Enumeration
i
references
elements
i
hasMoreElements
antTask
addReference
Ant
Reference
i
nextElement
return
antTask
private
static
void
copyProperty
Property
to
Property
from
to
setName
from
getName
if
from
getValue
to
setValue
from
getValue
if
from
getFile
to
setFile
from
getFile
if
from
getResource
to
setResource
from
getResource
if
from
getPrefix
to
setPrefix
from
getPrefix
if
from
getRefid
to
setRefid
from
getRefid
if
from
getEnvironment
to
setEnvironment
from
getEnvironment
if
from
getClasspath
to
setClasspath
from
getClasspath
