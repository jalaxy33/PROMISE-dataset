package
org
apache
tools
ant
taskdefs
optional
ejb
import
java
io
File
import
java
io
IOException
import
java
util
Enumeration
import
java
util
Hashtable
import
javax
xml
parsers
SAXParser
import
org
apache
tools
ant
AntClassLoader
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
Project
import
org
apache
tools
ant
taskdefs
Java
import
org
apache
tools
ant
types
Path
public
class
JonasDeploymentTool
extends
GenericDeploymentTool
protected
static
final
String
EJB_JAR_1_1_PUBLIC_ID
protected
static
final
String
EJB_JAR_2_0_PUBLIC_ID
protected
static
final
String
JONAS_EJB_JAR_2_4_PUBLIC_ID
protected
static
final
String
JONAS_EJB_JAR_2_5_PUBLIC_ID
protected
static
final
String
RMI_ORB
protected
static
final
String
JEREMIE_ORB
protected
static
final
String
DAVID_ORB
protected
static
final
String
EJB_JAR_1_1_DTD
protected
static
final
String
EJB_JAR_2_0_DTD
protected
static
final
String
JONAS_EJB_JAR_2_4_DTD
protected
static
final
String
JONAS_EJB_JAR_2_5_DTD
protected
static
final
String
JONAS_DD
protected
static
final
String
GENIC_CLASS
protected
static
final
String
OLD_GENIC_CLASS_1
protected
static
final
String
OLD_GENIC_CLASS_2
private
String
descriptorName
private
String
jonasDescriptorName
private
File
outputdir
private
boolean
keepgenerated
private
boolean
nocompil
private
boolean
novalidation
private
String
javac
private
String
javacopts
private
String
rmicopts
private
boolean
secpropag
private
boolean
verbose
private
String
additionalargs
private
File
jonasroot
private
boolean
keepgeneric
private
String
suffix
private
String
orb
private
boolean
nogenic
public
void
setKeepgenerated
boolean
aBoolean
keepgenerated
aBoolean
public
void
setAdditionalargs
String
aString
additionalargs
aString
public
void
setNocompil
boolean
aBoolean
nocompil
aBoolean
public
void
setNovalidation
boolean
aBoolean
novalidation
aBoolean
public
void
setJavac
String
aString
javac
aString
public
void
setJavacopts
String
aString
javacopts
aString
public
void
setRmicopts
String
aString
rmicopts
aString
public
void
setSecpropag
boolean
aBoolean
secpropag
aBoolean
public
void
setVerbose
boolean
aBoolean
verbose
aBoolean
public
void
setJonasroot
File
aFile
jonasroot
aFile
public
void
setKeepgeneric
boolean
aBoolean
keepgeneric
aBoolean
public
void
setJarsuffix
String
aString
suffix
aString
public
void
setOrb
String
aString
orb
aString
public
void
setNogenic
boolean
aBoolean
nogenic
aBoolean
public
void
processDescriptor
String
aDescriptorName
SAXParser
saxParser
descriptorName
aDescriptorName
log
descriptorName
Project
MSG_VERBOSE
super
processDescriptor
descriptorName
saxParser
if
outputdir
log
outputdir
Project
MSG_VERBOSE
deleteAllFiles
outputdir
protected
void
writeJar
String
baseName
File
jarfile
Hashtable
ejbFiles
String
publicId
throws
BuildException
File
genericJarFile
super
getVendorOutputJarFile
baseName
super
writeJar
baseName
genericJarFile
ejbFiles
publicId
addGenICGeneratedFiles
genericJarFile
ejbFiles
super
writeJar
baseName
getVendorOutputJarFile
baseName
ejbFiles
publicId
if
keepgeneric
log
genericJarFile
toString
Project
MSG_VERBOSE
genericJarFile
delete
protected
void
addVendorFiles
Hashtable
ejbFiles
String
ddPrefix
jonasDescriptorName
getJonasDescriptorName
File
jonasDD
new
File
getConfig
descriptorDir
jonasDescriptorName
if
jonasDD
exists
ejbFiles
put
META_DIR
JONAS_DD
jonasDD
else
log
jonasDD
getPath
Project
MSG_WARN
protected
File
getVendorOutputJarFile
String
baseName
return
new
File
getDestDir
baseName
suffix
private
String
getJonasDescriptorName
String
jonasDN
boolean
jonasConvention
String
path
String
fileName
String
baseName
String
remainder
int
startOfFileName
descriptorName
lastIndexOf
File
separatorChar
if
startOfFileName
path
descriptorName
substring
startOfFileName
fileName
descriptorName
substring
startOfFileName
else
path
fileName
descriptorName
if
fileName
startsWith
EJB_DD
return
path
JONAS_DD
int
endOfBaseName
descriptorName
indexOf
getConfig
baseNameTerminator
startOfFileName
if
endOfBaseName
endOfBaseName
descriptorName
lastIndexOf
if
endOfBaseName
endOfBaseName
descriptorName
length
jonasConvention
baseName
descriptorName
substring
startOfFileName
endOfBaseName
remainder
descriptorName
substring
endOfBaseName
if
jonasConvention
jonasDN
path
baseName
else
jonasDN
path
baseName
remainder
log
descriptorName
Project
MSG_VERBOSE
log
jonasDN
Project
MSG_VERBOSE
return
jonasDN
protected
String
getJarBaseName
String
descriptorFileName
String
baseName
if
getConfig
namingScheme
getValue
equals
EjbJar
NamingScheme
DESCRIPTOR
if
descriptorFileName
indexOf
getConfig
baseNameTerminator
String
aCanonicalDescriptor
descriptorFileName
replace
int
lastSeparatorIndex
aCanonicalDescriptor
lastIndexOf
int
endOfBaseName
if
lastSeparatorIndex
endOfBaseName
descriptorFileName
indexOf
lastSeparatorIndex
else
endOfBaseName
descriptorFileName
indexOf
if
endOfBaseName
baseName
descriptorFileName
substring
endOfBaseName
if
baseName
baseName
super
getJarBaseName
descriptorFileName
log
baseName
Project
MSG_VERBOSE
return
baseName
protected
void
registerKnownDTDs
DescriptorHandler
handler
handler
registerDTD
EJB_JAR_1_1_PUBLIC_ID
jonasroot
File
separator
File
separator
EJB_JAR_1_1_DTD
handler
registerDTD
EJB_JAR_2_0_PUBLIC_ID
jonasroot
File
separator
File
separator
EJB_JAR_2_0_DTD
handler
registerDTD
JONAS_EJB_JAR_2_4_PUBLIC_ID
jonasroot
File
separator
File
separator
JONAS_EJB_JAR_2_4_DTD
handler
registerDTD
JONAS_EJB_JAR_2_5_PUBLIC_ID
jonasroot
File
separator
File
separator
JONAS_EJB_JAR_2_5_DTD
private
void
addGenICGeneratedFiles
File
genericJarFile
Hashtable
ejbFiles
Java
genicTask
String
genicClass
if
nogenic
return
genicTask
new
Java
getTask
genicTask
setTaskName
genicTask
setFork
genicTask
createJvmarg
setValue
jonasroot
String
jonasConfigDir
jonasroot
File
separator
File
javaPolicyFile
new
File
jonasConfigDir
if
javaPolicyFile
exists
genicTask
createJvmarg
setValue
javaPolicyFile
toString
try
outputdir
createTempDir
catch
IOException
aIOException
String
msg
aIOException
getMessage
throw
new
BuildException
msg
aIOException
log
outputdir
Project
MSG_VERBOSE
genicTask
createArg
setValue
genicTask
createArg
setFile
outputdir
String
key
File
f
Enumeration
keys
ejbFiles
keys
while
keys
hasMoreElements
key
String
keys
nextElement
f
new
File
outputdir
File
separator
key
f
getParentFile
mkdirs
log
Project
MSG_VERBOSE
Path
classpath
getCombinedClasspath
if
classpath
classpath
new
Path
getTask
getProject
classpath
append
new
Path
classpath
getProject
jonasConfigDir
classpath
append
new
Path
classpath
getProject
outputdir
toString
if
orb
String
orbJar
jonasroot
File
separator
File
separator
orb
classpath
append
new
Path
classpath
getProject
orbJar
log
classpath
toString
Project
MSG_VERBOSE
genicTask
setClasspath
classpath
genicClass
getGenicClassName
classpath
if
genicClass
log
Project
MSG_ERR
throw
new
BuildException
else
log
genicClass
Project
MSG_VERBOSE
genicTask
setClassname
genicClass
if
keepgenerated
genicTask
createArg
setValue
if
nocompil
genicTask
createArg
setValue
if
novalidation
genicTask
createArg
setValue
if
javac
genicTask
createArg
setValue
genicTask
createArg
setLine
javac
if
javacopts
javacopts
equals
genicTask
createArg
setValue
genicTask
createArg
setLine
javacopts
if
rmicopts
rmicopts
equals
genicTask
createArg
setValue
genicTask
createArg
setLine
rmicopts
if
secpropag
genicTask
createArg
setValue
if
verbose
genicTask
createArg
setValue
if
additionalargs
genicTask
createArg
setValue
additionalargs
genicTask
createArg
setValue
genicTask
createArg
setValue
genericJarFile
getPath
log
genicClass
getConfig
descriptorDir
File
separator
descriptorName
Project
MSG_VERBOSE
if
genicTask
executeJava
log
outputdir
Project
MSG_VERBOSE
deleteAllFiles
outputdir
if
keepgeneric
log
genericJarFile
toString
Project
MSG_VERBOSE
genericJarFile
delete
throw
new
BuildException
addAllFiles
outputdir
ejbFiles
String
getGenicClassName
Path
classpath
log
classpath
toString
Project
MSG_VERBOSE
AntClassLoader
cl
classpath
getProject
createClassLoader
classpath
try
cl
loadClass
JonasDeploymentTool
GENIC_CLASS
log
JonasDeploymentTool
GENIC_CLASS
Project
MSG_VERBOSE
return
JonasDeploymentTool
GENIC_CLASS
catch
ClassNotFoundException
cnf1
log
JonasDeploymentTool
GENIC_CLASS
Project
MSG_VERBOSE
try
cl
loadClass
JonasDeploymentTool
OLD_GENIC_CLASS_1
log
JonasDeploymentTool
OLD_GENIC_CLASS_1
Project
MSG_VERBOSE
return
JonasDeploymentTool
OLD_GENIC_CLASS_1
catch
ClassNotFoundException
cnf2
log
JonasDeploymentTool
OLD_GENIC_CLASS_1
Project
MSG_VERBOSE
try
cl
loadClass
JonasDeploymentTool
OLD_GENIC_CLASS_2
log
JonasDeploymentTool
OLD_GENIC_CLASS_2
Project
MSG_VERBOSE
return
JonasDeploymentTool
OLD_GENIC_CLASS_2
catch
ClassNotFoundException
cnf3
log
JonasDeploymentTool
OLD_GENIC_CLASS_2
Project
MSG_VERBOSE
return
protected
void
checkConfiguration
String
descriptorFileName
SAXParser
saxParser
throws
BuildException
if
jonasroot
throw
new
BuildException
else
if
jonasroot
isDirectory
throw
new
BuildException
jonasroot
if
orb
orb
equals
RMI_ORB
orb
equals
JEREMIE_ORB
orb
equals
DAVID_ORB
throw
new
BuildException
orb
RMI_ORB
JEREMIE_ORB
DAVID_ORB
if
additionalargs
additionalargs
equals
throw
new
BuildException
if
javac
javac
equals
throw
new
BuildException
private
File
createTempDir
throws
IOException
File
tmpDir
File
createTempFile
tmpDir
delete
if
tmpDir
mkdir
throw
new
IOException
tmpDir
return
tmpDir
private
void
deleteAllFiles
File
aFile
if
aFile
isDirectory
File
someFiles
aFile
listFiles
for
int
i
i
someFiles
length
i
deleteAllFiles
someFiles
i
aFile
delete
private
void
addAllFiles
File
file
String
rootDir
Hashtable
hashtable
if
file
exists
throw
new
IllegalArgumentException
String
newRootDir
if
file
isDirectory
File
files
file
listFiles
for
int
i
i
files
length
i
if
rootDir
length
newRootDir
rootDir
File
separator
files
i
getName
else
newRootDir
files
i
getName
addAllFiles
files
i
newRootDir
hashtable
else
hashtable
put
rootDir
file
