package
org
apache
tools
ant
taskdefs
import
java
io
BufferedReader
import
java
io
ByteArrayOutputStream
import
java
io
File
import
java
io
FileWriter
import
java
io
IOException
import
java
io
OutputStream
import
java
io
PrintWriter
import
java
io
StringReader
import
java
lang
reflect
InvocationTargetException
import
java
lang
reflect
Method
import
java
util
HashMap
import
java
util
Iterator
import
java
util
Vector
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
MagicNames
import
org
apache
tools
ant
Project
import
org
apache
tools
ant
Task
import
org
apache
tools
ant
taskdefs
condition
Os
import
org
apache
tools
ant
types
Commandline
import
org
apache
tools
ant
util
FileUtils
import
org
apache
tools
ant
util
StringUtils
public
class
Execute
public
static
final
int
INVALID
Integer
MAX_VALUE
private
static
final
FileUtils
FILE_UTILS
FileUtils
getFileUtils
private
String
cmdl
private
String
env
private
int
exitValue
INVALID
private
ExecuteStreamHandler
streamHandler
private
ExecuteWatchdog
watchdog
private
File
workingDirectory
private
Project
project
private
boolean
newEnvironment
private
boolean
spawn
private
boolean
useVMLauncher
private
static
String
antWorkingDirectory
System
getProperty
private
static
CommandLauncher
vmLauncher
private
static
CommandLauncher
shellLauncher
private
static
Vector
procEnvironment
private
static
ProcessDestroyer
processDestroyer
new
ProcessDestroyer
private
static
boolean
environmentCaseInSensitive
static
try
if
Os
isFamily
vmLauncher
new
Java13CommandLauncher
catch
NoSuchMethodException
exc
if
Os
isFamily
Os
isFamily
shellLauncher
new
MacCommandLauncher
new
CommandLauncher
else
if
Os
isFamily
shellLauncher
new
OS2CommandLauncher
new
CommandLauncher
else
if
Os
isFamily
environmentCaseInSensitive
CommandLauncher
baseLauncher
new
CommandLauncher
if
Os
isFamily
shellLauncher
new
WinNTCommandLauncher
baseLauncher
else
shellLauncher
new
ScriptCommandLauncher
baseLauncher
else
if
Os
isFamily
CommandLauncher
baseLauncher
new
CommandLauncher
shellLauncher
new
PerlScriptCommandLauncher
baseLauncher
else
if
Os
isFamily
try
shellLauncher
new
VmsCommandLauncher
catch
NoSuchMethodException
exc
else
shellLauncher
new
ScriptCommandLauncher
new
CommandLauncher
public
void
setSpawn
boolean
spawn
this
spawn
spawn
public
static
synchronized
Vector
getProcEnvironment
if
procEnvironment
return
procEnvironment
procEnvironment
new
Vector
try
ByteArrayOutputStream
out
new
ByteArrayOutputStream
Execute
exe
new
Execute
new
PumpStreamHandler
out
exe
setCommandline
getProcEnvCommand
exe
setNewenvironment
int
retval
exe
execute
if
retval
BufferedReader
in
new
BufferedReader
new
StringReader
toString
out
if
Os
isFamily
procEnvironment
addVMSLogicals
procEnvironment
in
return
procEnvironment
String
var
String
line
lineSep
StringUtils
LINE_SEP
while
line
in
readLine
if
line
indexOf
if
var
var
lineSep
line
else
var
lineSep
line
else
if
var
procEnvironment
addElement
var
var
line
if
var
procEnvironment
addElement
var
catch
java
io
IOException
exc
exc
printStackTrace
return
procEnvironment
private
static
String
getProcEnvCommand
if
Os
isFamily
return
new
String
else
if
Os
isFamily
if
Os
isFamily
return
new
String
else
return
new
String
else
if
Os
isFamily
Os
isFamily
String
cmd
new
String
if
new
File
canRead
cmd
else
if
new
File
canRead
cmd
else
cmd
return
cmd
else
if
Os
isFamily
Os
isFamily
return
new
String
else
if
Os
isFamily
return
new
String
else
return
public
static
String
toString
ByteArrayOutputStream
bos
if
Os
isFamily
try
return
bos
toString
catch
java
io
UnsupportedEncodingException
e
else
if
Os
isFamily
try
return
bos
toString
catch
java
io
UnsupportedEncodingException
e
return
bos
toString
public
Execute
this
new
PumpStreamHandler
public
Execute
ExecuteStreamHandler
streamHandler
this
streamHandler
public
Execute
ExecuteStreamHandler
streamHandler
ExecuteWatchdog
watchdog
setStreamHandler
streamHandler
this
watchdog
watchdog
if
Os
isFamily
useVMLauncher
public
void
setStreamHandler
ExecuteStreamHandler
streamHandler
this
streamHandler
streamHandler
public
String
getCommandline
return
cmdl
public
void
setCommandline
String
commandline
cmdl
commandline
public
void
setNewenvironment
boolean
newenv
newEnvironment
newenv
public
String
getEnvironment
return
env
newEnvironment
env
patchEnvironment
public
void
setEnvironment
String
env
this
env
env
public
void
setWorkingDirectory
File
wd
workingDirectory
wd
wd
getAbsolutePath
equals
antWorkingDirectory
wd
public
File
getWorkingDirectory
return
workingDirectory
new
File
antWorkingDirectory
workingDirectory
public
void
setAntRun
Project
project
throws
BuildException
this
project
project
public
void
setVMLauncher
boolean
useVMLauncher
this
useVMLauncher
useVMLauncher
public
static
Process
launch
Project
project
String
command
String
env
File
dir
boolean
useVM
throws
IOException
if
dir
dir
exists
throw
new
BuildException
dir
CommandLauncher
launcher
useVM
vmLauncher
vmLauncher
shellLauncher
return
launcher
exec
project
command
env
dir
public
int
execute
throws
IOException
if
workingDirectory
workingDirectory
exists
throw
new
BuildException
workingDirectory
final
Process
process
launch
project
getCommandline
getEnvironment
workingDirectory
useVMLauncher
try
streamHandler
setProcessInputStream
process
getOutputStream
streamHandler
setProcessOutputStream
process
getInputStream
streamHandler
setProcessErrorStream
process
getErrorStream
catch
IOException
e
process
destroy
throw
e
streamHandler
start
try
processDestroyer
add
process
if
watchdog
watchdog
start
process
waitFor
process
if
watchdog
watchdog
stop
streamHandler
stop
closeStreams
process
if
watchdog
watchdog
checkException
return
getExitValue
catch
ThreadDeath
t
process
destroy
throw
t
finally
processDestroyer
remove
process
public
void
spawn
throws
IOException
if
workingDirectory
workingDirectory
exists
throw
new
BuildException
workingDirectory
final
Process
process
launch
project
getCommandline
getEnvironment
workingDirectory
useVMLauncher
if
Os
isFamily
try
Thread
sleep
catch
InterruptedException
e
project
log
Project
MSG_VERBOSE
OutputStream
dummyOut
new
OutputStream
public
void
write
int
b
throws
IOException
ExecuteStreamHandler
handler
new
PumpStreamHandler
dummyOut
handler
setProcessErrorStream
process
getErrorStream
handler
setProcessOutputStream
process
getInputStream
handler
start
process
getOutputStream
close
project
log
process
toString
Project
MSG_VERBOSE
protected
void
waitFor
Process
process
try
process
waitFor
setExitValue
process
exitValue
catch
InterruptedException
e
process
destroy
protected
void
setExitValue
int
value
exitValue
value
public
int
getExitValue
return
exitValue
public
static
boolean
isFailure
int
exitValue
return
Os
isFamily
exitValue
exitValue
public
boolean
isFailure
return
isFailure
getExitValue
public
boolean
killedProcess
return
watchdog
watchdog
killedProcess
private
String
patchEnvironment
if
Os
isFamily
return
env
Vector
osEnv
Vector
getProcEnvironment
clone
for
int
i
i
env
length
i
String
keyValue
env
i
String
key
keyValue
substring
keyValue
indexOf
if
environmentCaseInSensitive
key
key
toLowerCase
int
size
osEnv
size
for
int
j
j
size
j
String
osEnvItem
String
osEnv
elementAt
j
String
convertedItem
environmentCaseInSensitive
osEnvItem
toLowerCase
osEnvItem
if
convertedItem
startsWith
key
osEnv
removeElementAt
j
if
environmentCaseInSensitive
keyValue
osEnvItem
substring
key
length
keyValue
substring
key
length
break
osEnv
addElement
keyValue
return
String
osEnv
toArray
new
String
osEnv
size
public
static
void
runCommand
Task
task
String
cmdline
throws
BuildException
try
task
log
Commandline
describeCommand
cmdline
Project
MSG_VERBOSE
Execute
exe
new
Execute
new
LogStreamHandler
task
Project
MSG_INFO
Project
MSG_ERR
exe
setAntRun
task
getProject
exe
setCommandline
cmdline
int
retval
exe
execute
if
isFailure
retval
throw
new
BuildException
cmdline
retval
task
getLocation
catch
java
io
IOException
exc
throw
new
BuildException
cmdline
exc
task
getLocation
public
static
void
closeStreams
Process
process
FileUtils
close
process
getInputStream
FileUtils
close
process
getOutputStream
FileUtils
close
process
getErrorStream
private
static
Vector
addVMSLogicals
Vector
environment
BufferedReader
in
throws
IOException
HashMap
logicals
new
HashMap
String
logName
logValue
newLogName
String
line
while
line
in
readLine
if
line
startsWith
if
logName
logValue
line
substring
line
length
else
if
line
startsWith
if
logName
logicals
put
logName
logValue
int
eqIndex
line
indexOf
newLogName
line
substring
eqIndex
if
logicals
containsKey
newLogName
logName
else
logName
newLogName
logValue
line
substring
eqIndex
line
length
if
logName
logicals
put
logName
logValue
for
Iterator
i
logicals
keySet
iterator
i
hasNext
String
logical
String
i
next
environment
add
logical
logicals
get
logical
return
environment
private
static
class
CommandLauncher
public
Process
exec
Project
project
String
cmd
String
env
throws
IOException
if
project
project
log
Commandline
describeCommand
cmd
Project
MSG_DEBUG
return
Runtime
getRuntime
exec
cmd
env
public
Process
exec
Project
project
String
cmd
String
env
File
workingDir
throws
IOException
if
workingDir
return
exec
project
cmd
env
throw
new
IOException
private
static
class
Java13CommandLauncher
extends
CommandLauncher
private
Method
myExecWithCWD
public
Java13CommandLauncher
throws
NoSuchMethodException
myExecWithCWD
Runtime
class
getMethod
new
Class
String
class
String
class
File
class
public
Process
exec
Project
project
String
cmd
String
env
File
workingDir
throws
IOException
try
if
project
project
log
Commandline
describeCommand
cmd
Project
MSG_DEBUG
return
Process
myExecWithCWD
invoke
Runtime
getRuntime
new
Object
cmd
env
workingDir
catch
InvocationTargetException
exc
Throwable
realexc
exc
getTargetException
if
realexc
instanceof
ThreadDeath
throw
ThreadDeath
realexc
else
if
realexc
instanceof
IOException
throw
IOException
realexc
else
throw
new
BuildException
realexc
catch
Exception
exc
throw
new
BuildException
exc
private
static
class
CommandLauncherProxy
extends
CommandLauncher
private
CommandLauncher
myLauncher
CommandLauncherProxy
CommandLauncher
launcher
myLauncher
launcher
public
Process
exec
Project
project
String
cmd
String
env
throws
IOException
return
myLauncher
exec
project
cmd
env
private
static
class
OS2CommandLauncher
extends
CommandLauncherProxy
OS2CommandLauncher
CommandLauncher
launcher
super
launcher
public
Process
exec
Project
project
String
cmd
String
env
File
workingDir
throws
IOException
File
commandDir
workingDir
if
workingDir
if
project
commandDir
project
getBaseDir
else
return
exec
project
cmd
env
final
int
preCmdLength
final
String
cmdDir
commandDir
getAbsolutePath
String
newcmd
new
String
cmd
length
preCmdLength
newcmd
newcmd
newcmd
cmdDir
substring
newcmd
newcmd
newcmd
cmdDir
substring
newcmd
System
arraycopy
cmd
newcmd
preCmdLength
cmd
length
return
exec
project
newcmd
env
private
static
class
WinNTCommandLauncher
extends
CommandLauncherProxy
WinNTCommandLauncher
CommandLauncher
launcher
super
launcher
public
Process
exec
Project
project
String
cmd
String
env
File
workingDir
throws
IOException
File
commandDir
workingDir
if
workingDir
if
project
commandDir
project
getBaseDir
else
return
exec
project
cmd
env
final
int
preCmdLength
String
newcmd
new
String
cmd
length
preCmdLength
newcmd
newcmd
newcmd
newcmd
newcmd
commandDir
getAbsolutePath
newcmd
System
arraycopy
cmd
newcmd
preCmdLength
cmd
length
return
exec
project
newcmd
env
private
static
class
MacCommandLauncher
extends
CommandLauncherProxy
MacCommandLauncher
CommandLauncher
launcher
super
launcher
public
Process
exec
Project
project
String
cmd
String
env
File
workingDir
throws
IOException
if
workingDir
return
exec
project
cmd
env
System
getProperties
put
workingDir
getAbsolutePath
try
return
exec
project
cmd
env
finally
System
getProperties
put
antWorkingDirectory
private
static
class
ScriptCommandLauncher
extends
CommandLauncherProxy
ScriptCommandLauncher
String
script
CommandLauncher
launcher
super
launcher
myScript
script
public
Process
exec
Project
project
String
cmd
String
env
File
workingDir
throws
IOException
if
project
if
workingDir
return
exec
project
cmd
env
throw
new
IOException
String
antHome
project
getProperty
MagicNames
ANT_HOME
if
antHome
throw
new
IOException
MagicNames
ANT_HOME
String
antRun
FILE_UTILS
resolveFile
project
getBaseDir
antHome
File
separator
myScript
toString
File
commandDir
workingDir
if
workingDir
project
commandDir
project
getBaseDir
String
newcmd
new
String
cmd
length
newcmd
antRun
newcmd
commandDir
getAbsolutePath
System
arraycopy
cmd
newcmd
cmd
length
return
exec
project
newcmd
env
private
String
myScript
private
static
class
PerlScriptCommandLauncher
extends
CommandLauncherProxy
private
String
myScript
PerlScriptCommandLauncher
String
script
CommandLauncher
launcher
super
launcher
myScript
script
public
Process
exec
Project
project
String
cmd
String
env
File
workingDir
throws
IOException
if
project
if
workingDir
return
exec
project
cmd
env
throw
new
IOException
String
antHome
project
getProperty
MagicNames
ANT_HOME
if
antHome
throw
new
IOException
MagicNames
ANT_HOME
String
antRun
FILE_UTILS
resolveFile
project
getBaseDir
antHome
File
separator
myScript
toString
File
commandDir
workingDir
if
workingDir
project
commandDir
project
getBaseDir
String
newcmd
new
String
cmd
length
newcmd
newcmd
antRun
newcmd
commandDir
getAbsolutePath
System
arraycopy
cmd
newcmd
cmd
length
return
exec
project
newcmd
env
private
static
class
VmsCommandLauncher
extends
Java13CommandLauncher
public
VmsCommandLauncher
throws
NoSuchMethodException
super
public
Process
exec
Project
project
String
cmd
String
env
throws
IOException
File
cmdFile
createCommandFile
cmd
env
Process
p
super
exec
project
new
String
cmdFile
getPath
env
deleteAfter
cmdFile
p
return
p
public
Process
exec
Project
project
String
cmd
String
env
File
workingDir
throws
IOException
File
cmdFile
createCommandFile
cmd
env
Process
p
super
exec
project
new
String
cmdFile
getPath
env
workingDir
deleteAfter
cmdFile
p
return
p
private
File
createCommandFile
String
cmd
String
env
throws
IOException
File
script
FILE_UTILS
createTempFile
script
deleteOnExit
PrintWriter
out
try
out
new
PrintWriter
new
FileWriter
script
if
env
int
eqIndex
for
int
i
i
env
length
i
eqIndex
env
i
indexOf
if
eqIndex
out
print
out
print
env
i
substring
eqIndex
out
print
out
print
env
i
substring
eqIndex
out
println
out
print
cmd
for
int
i
i
cmd
length
i
out
println
out
print
cmd
i
finally
if
out
out
close
return
script
private
void
deleteAfter
final
File
f
final
Process
p
new
Thread
public
void
run
try
p
waitFor
catch
InterruptedException
e
FileUtils
delete
f
start
