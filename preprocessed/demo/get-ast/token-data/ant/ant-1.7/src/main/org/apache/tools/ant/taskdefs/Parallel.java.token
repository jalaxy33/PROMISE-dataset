package
org
apache
tools
ant
taskdefs
import
java
lang
reflect
Method
import
java
util
Enumeration
import
java
util
Vector
import
java
util
List
import
java
util
ArrayList
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
Location
import
org
apache
tools
ant
Task
import
org
apache
tools
ant
TaskContainer
import
org
apache
tools
ant
util
StringUtils
public
class
Parallel
extends
Task
implements
TaskContainer
public
static
class
TaskList
implements
TaskContainer
private
List
tasks
new
ArrayList
public
void
addTask
Task
nestedTask
tasks
add
nestedTask
private
Vector
nestedTasks
new
Vector
private
final
Object
semaphore
new
Object
private
int
numThreads
private
int
numThreadsPerProcessor
private
long
timeout
private
volatile
boolean
stillRunning
private
boolean
timedOut
private
boolean
failOnAny
private
TaskList
daemonTasks
private
StringBuffer
exceptionMessage
private
int
numExceptions
private
Throwable
firstException
private
Location
firstLocation
public
void
addDaemons
TaskList
daemonTasks
if
this
daemonTasks
throw
new
BuildException
this
daemonTasks
daemonTasks
public
void
setPollInterval
int
pollInterval
public
void
setFailOnAny
boolean
failOnAny
this
failOnAny
failOnAny
public
void
addTask
Task
nestedTask
nestedTasks
addElement
nestedTask
public
void
setThreadsPerProcessor
int
numThreadsPerProcessor
this
numThreadsPerProcessor
numThreadsPerProcessor
public
void
setThreadCount
int
numThreads
this
numThreads
numThreads
public
void
setTimeout
long
timeout
this
timeout
timeout
public
void
execute
throws
BuildException
updateThreadCounts
if
numThreads
numThreads
nestedTasks
size
spinThreads
private
void
updateThreadCounts
if
numThreadsPerProcessor
int
numProcessors
getNumProcessors
if
numProcessors
numThreads
numProcessors
numThreadsPerProcessor
private
void
processExceptions
TaskRunnable
runnables
if
runnables
return
for
int
i
i
runnables
length
i
Throwable
t
runnables
i
getException
if
t
numExceptions
if
firstException
firstException
t
if
t
instanceof
BuildException
firstLocation
Location
UNKNOWN_LOCATION
firstLocation
BuildException
t
getLocation
exceptionMessage
append
StringUtils
LINE_SEP
exceptionMessage
append
t
getMessage
private
void
spinThreads
throws
BuildException
final
int
numTasks
nestedTasks
size
TaskRunnable
runnables
new
TaskRunnable
numTasks
stillRunning
timedOut
int
threadNumber
for
Enumeration
e
nestedTasks
elements
e
hasMoreElements
threadNumber
Task
nestedTask
Task
e
nextElement
runnables
threadNumber
new
TaskRunnable
nestedTask
final
int
maxRunning
numTasks
numThreads
numTasks
numThreads
TaskRunnable
running
new
TaskRunnable
maxRunning
threadNumber
ThreadGroup
group
new
ThreadGroup
TaskRunnable
daemons
if
daemonTasks
daemonTasks
tasks
size
daemons
new
TaskRunnable
daemonTasks
tasks
size
synchronized
semaphore
synchronized
semaphore
if
daemons
for
int
i
i
daemons
length
i
daemons
i
new
TaskRunnable
Task
daemonTasks
tasks
get
i
Thread
daemonThread
new
Thread
group
daemons
i
daemonThread
setDaemon
daemonThread
start
for
int
i
i
maxRunning
i
running
i
runnables
threadNumber
Thread
thread
new
Thread
group
running
i
thread
start
if
timeout
Thread
timeoutThread
new
Thread
public
synchronized
void
run
try
wait
timeout
synchronized
semaphore
stillRunning
timedOut
semaphore
notifyAll
catch
InterruptedException
e
timeoutThread
start
outer
while
threadNumber
numTasks
stillRunning
for
int
i
i
maxRunning
i
if
running
i
running
i
isFinished
running
i
runnables
threadNumber
Thread
thread
new
Thread
group
running
i
thread
start
continue
outer
try
semaphore
wait
catch
InterruptedException
ie
outer2
while
stillRunning
for
int
i
i
maxRunning
i
if
running
i
running
i
isFinished
try
semaphore
wait
catch
InterruptedException
ie
continue
outer2
stillRunning
if
timedOut
throw
new
BuildException
exceptionMessage
new
StringBuffer
numExceptions
firstException
firstLocation
Location
UNKNOWN_LOCATION
processExceptions
daemons
processExceptions
runnables
if
numExceptions
if
firstException
instanceof
BuildException
throw
BuildException
firstException
else
throw
new
BuildException
firstException
else
if
numExceptions
throw
new
BuildException
exceptionMessage
toString
firstLocation
private
int
getNumProcessors
try
Class
paramTypes
Method
availableProcessors
Runtime
class
getMethod
paramTypes
Object
args
Integer
ret
Integer
availableProcessors
invoke
Runtime
getRuntime
args
return
ret
intValue
catch
Exception
e
return
private
class
TaskRunnable
implements
Runnable
private
Throwable
exception
private
Task
task
private
boolean
finished
TaskRunnable
Task
task
this
task
task
public
void
run
try
task
perform
catch
Throwable
t
exception
t
if
failOnAny
stillRunning
finally
synchronized
semaphore
finished
semaphore
notifyAll
public
Throwable
getException
return
exception
boolean
isFinished
return
finished
