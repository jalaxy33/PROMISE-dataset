package
org
apache
tools
bzip2
import
java
io
InputStream
import
java
io
IOException
public
class
CBZip2InputStream
extends
InputStream
implements
BZip2Constants
private
static
void
reportCRCError
throws
IOException
System
err
println
private
void
makeMaps
final
boolean
inUse
this
data
inUse
final
byte
seqToUnseq
this
data
seqToUnseq
int
nInUseShadow
for
int
i
i
i
if
inUse
i
seqToUnseq
nInUseShadow
byte
i
this
nInUse
nInUseShadow
private
int
last
private
int
origPtr
private
int
blockSize100k
private
boolean
blockRandomised
private
int
bsBuff
private
int
bsLive
private
final
CRC
crc
new
CRC
private
int
nInUse
private
InputStream
in
private
int
currentChar
private
static
final
int
EOF
private
static
final
int
START_BLOCK_STATE
private
static
final
int
RAND_PART_A_STATE
private
static
final
int
RAND_PART_B_STATE
private
static
final
int
RAND_PART_C_STATE
private
static
final
int
NO_RAND_PART_A_STATE
private
static
final
int
NO_RAND_PART_B_STATE
private
static
final
int
NO_RAND_PART_C_STATE
private
int
currentState
START_BLOCK_STATE
private
int
storedBlockCRC
storedCombinedCRC
private
int
computedBlockCRC
computedCombinedCRC
private
int
su_count
private
int
su_ch2
private
int
su_chPrev
private
int
su_i2
private
int
su_j2
private
int
su_rNToGo
private
int
su_rTPos
private
int
su_tPos
private
char
su_z
private
CBZip2InputStream
Data
data
public
CBZip2InputStream
final
InputStream
in
throws
IOException
super
this
in
in
init
public
int
read
throws
IOException
if
this
in
return
read0
else
throw
new
IOException
public
int
read
final
byte
dest
final
int
offs
final
int
len
throws
IOException
if
offs
throw
new
IndexOutOfBoundsException
offs
if
len
throw
new
IndexOutOfBoundsException
len
if
offs
len
dest
length
throw
new
IndexOutOfBoundsException
offs
len
dest
length
if
this
in
throw
new
IOException
final
int
hi
offs
len
int
destOffs
offs
for
int
b
destOffs
hi
b
read0
dest
destOffs
byte
b
return
destOffs
offs
destOffs
offs
private
int
read0
throws
IOException
final
int
retChar
this
currentChar
switch
this
currentState
case
EOF
return
case
START_BLOCK_STATE
throw
new
IllegalStateException
case
RAND_PART_A_STATE
throw
new
IllegalStateException
case
RAND_PART_B_STATE
setupRandPartB
break
case
RAND_PART_C_STATE
setupRandPartC
break
case
NO_RAND_PART_A_STATE
throw
new
IllegalStateException
case
NO_RAND_PART_B_STATE
setupNoRandPartB
break
case
NO_RAND_PART_C_STATE
setupNoRandPartC
break
default
throw
new
IllegalStateException
return
retChar
private
void
init
throws
IOException
int
magic2
this
in
read
if
magic2
throw
new
IOException
char
magic2
int
blockSize
this
in
read
if
blockSize
blockSize
throw
new
IOException
char
blockSize
this
blockSize100k
blockSize
initBlock
setupBlock
private
void
initBlock
throws
IOException
char
magic0
bsGetUByte
char
magic1
bsGetUByte
char
magic2
bsGetUByte
char
magic3
bsGetUByte
char
magic4
bsGetUByte
char
magic5
bsGetUByte
if
magic0
magic1
magic2
magic3
magic4
magic5
complete
else
if
magic0
magic1
magic2
magic3
magic4
magic5
this
currentState
EOF
throw
new
IOException
else
this
storedBlockCRC
bsGetInt
this
blockRandomised
bsR
if
this
data
this
data
new
Data
this
blockSize100k
getAndMoveToFrontDecode
this
crc
initialiseCRC
this
currentState
START_BLOCK_STATE
private
void
endBlock
throws
IOException
this
computedBlockCRC
this
crc
getFinalCRC
if
this
storedBlockCRC
this
computedBlockCRC
this
computedCombinedCRC
this
storedCombinedCRC
this
storedCombinedCRC
this
computedCombinedCRC
this
storedBlockCRC
reportCRCError
this
computedCombinedCRC
this
computedCombinedCRC
this
computedCombinedCRC
this
computedCombinedCRC
this
computedBlockCRC
private
void
complete
throws
IOException
this
storedCombinedCRC
bsGetInt
this
currentState
EOF
this
data
if
this
storedCombinedCRC
this
computedCombinedCRC
reportCRCError
public
void
close
throws
IOException
InputStream
inShadow
this
in
if
inShadow
try
if
inShadow
System
in
inShadow
close
finally
this
data
this
in
private
int
bsR
final
int
n
throws
IOException
int
bsLiveShadow
this
bsLive
int
bsBuffShadow
this
bsBuff
if
bsLiveShadow
n
final
InputStream
inShadow
this
in
do
int
thech
inShadow
read
if
thech
throw
new
IOException
bsBuffShadow
bsBuffShadow
thech
bsLiveShadow
while
bsLiveShadow
n
this
bsBuff
bsBuffShadow
this
bsLive
bsLiveShadow
n
return
bsBuffShadow
bsLiveShadow
n
n
private
boolean
bsGetBit
throws
IOException
int
bsLiveShadow
this
bsLive
int
bsBuffShadow
this
bsBuff
if
bsLiveShadow
int
thech
this
in
read
if
thech
throw
new
IOException
bsBuffShadow
bsBuffShadow
thech
bsLiveShadow
this
bsBuff
bsBuffShadow
this
bsLive
bsLiveShadow
return
bsBuffShadow
bsLiveShadow
private
char
bsGetUByte
throws
IOException
return
char
bsR
private
int
bsGetInt
throws
IOException
return
bsR
bsR
bsR
bsR
private
static
void
hbCreateDecodeTables
final
int
limit
final
int
base
final
int
perm
final
char
length
final
int
minLen
final
int
maxLen
final
int
alphaSize
for
int
i
minLen
pp
i
maxLen
i
for
int
j
j
alphaSize
j
if
length
j
i
perm
pp
j
for
int
i
MAX_CODE_LEN
i
base
i
limit
i
for
int
i
i
alphaSize
i
base
length
i
for
int
i
b
base
i
MAX_CODE_LEN
i
b
base
i
base
i
b
for
int
i
minLen
vec
b
base
i
i
maxLen
i
final
int
nb
base
i
vec
nb
b
b
nb
limit
i
vec
vec
for
int
i
minLen
i
maxLen
i
base
i
limit
i
base
i
private
void
recvDecodingTables
throws
IOException
final
Data
dataShadow
this
data
final
boolean
inUse
dataShadow
inUse
final
byte
pos
dataShadow
recvDecodingTables_pos
final
byte
selector
dataShadow
selector
final
byte
selectorMtf
dataShadow
selectorMtf
int
inUse16
for
int
i
i
i
if
bsGetBit
inUse16
i
for
int
i
i
inUse
i
for
int
i
i
i
if
inUse16
i
final
int
i16
i
for
int
j
j
j
if
bsGetBit
inUse
i16
j
makeMaps
final
int
alphaSize
this
nInUse
final
int
nGroups
bsR
final
int
nSelectors
bsR
for
int
i
i
nSelectors
i
int
j
while
bsGetBit
j
selectorMtf
i
byte
j
for
int
v
nGroups
v
pos
v
byte
v
for
int
i
i
nSelectors
i
int
v
selectorMtf
i
final
byte
tmp
pos
v
while
v
pos
v
pos
v
v
pos
tmp
selector
i
tmp
final
char
len
dataShadow
temp_charArray2d
for
int
t
t
nGroups
t
int
curr
bsR
final
char
len_t
len
t
for
int
i
i
alphaSize
i
while
bsGetBit
curr
bsGetBit
len_t
i
char
curr
createHuffmanDecodingTables
alphaSize
nGroups
private
void
createHuffmanDecodingTables
final
int
alphaSize
final
int
nGroups
final
Data
dataShadow
this
data
final
char
len
dataShadow
temp_charArray2d
final
int
minLens
dataShadow
minLens
final
int
limit
dataShadow
limit
final
int
base
dataShadow
base
final
int
perm
dataShadow
perm
for
int
t
t
nGroups
t
int
minLen
int
maxLen
final
char
len_t
len
t
for
int
i
alphaSize
i
final
char
lent
len_t
i
if
lent
maxLen
maxLen
lent
if
lent
minLen
minLen
lent
hbCreateDecodeTables
limit
t
base
t
perm
t
len
t
minLen
maxLen
alphaSize
minLens
t
minLen
private
void
getAndMoveToFrontDecode
throws
IOException
this
origPtr
bsR
recvDecodingTables
final
InputStream
inShadow
this
in
final
Data
dataShadow
this
data
final
byte
ll8
dataShadow
ll8
final
int
unzftab
dataShadow
unzftab
final
byte
selector
dataShadow
selector
final
byte
seqToUnseq
dataShadow
seqToUnseq
final
char
yy
dataShadow
getAndMoveToFrontDecode_yy
final
int
minLens
dataShadow
minLens
final
int
limit
dataShadow
limit
final
int
base
dataShadow
base
final
int
perm
dataShadow
perm
final
int
limitLast
this
blockSize100k
for
int
i
i
yy
i
char
i
unzftab
i
int
groupNo
int
groupPos
G_SIZE
final
int
eob
this
nInUse
int
nextSym
getAndMoveToFrontDecode0
int
bsBuffShadow
this
bsBuff
int
bsLiveShadow
this
bsLive
int
lastShadow
int
zt
selector
groupNo
int
base_zt
base
zt
int
limit_zt
limit
zt
int
perm_zt
perm
zt
int
minLens_zt
minLens
zt
while
nextSym
eob
if
nextSym
RUNA
nextSym
RUNB
int
s
for
int
n
n
if
nextSym
RUNA
s
n
else
if
nextSym
RUNB
s
n
else
break
if
groupPos
groupPos
G_SIZE
zt
selector
groupNo
base_zt
base
zt
limit_zt
limit
zt
perm_zt
perm
zt
minLens_zt
minLens
zt
else
groupPos
int
zn
minLens_zt
while
bsLiveShadow
zn
final
int
thech
inShadow
read
if
thech
bsBuffShadow
bsBuffShadow
thech
bsLiveShadow
continue
else
throw
new
IOException
int
zvec
bsBuffShadow
bsLiveShadow
zn
zn
bsLiveShadow
zn
while
zvec
limit_zt
zn
zn
while
bsLiveShadow
final
int
thech
inShadow
read
if
thech
bsBuffShadow
bsBuffShadow
thech
bsLiveShadow
continue
else
throw
new
IOException
bsLiveShadow
zvec
zvec
bsBuffShadow
bsLiveShadow
nextSym
perm_zt
zvec
base_zt
zn
final
byte
ch
seqToUnseq
yy
unzftab
ch
s
while
s
ll8
lastShadow
ch
if
lastShadow
limitLast
throw
new
IOException
else
if
lastShadow
limitLast
throw
new
IOException
final
char
tmp
yy
nextSym
unzftab
seqToUnseq
tmp
ll8
lastShadow
seqToUnseq
tmp
if
nextSym
for
int
j
nextSym
j
yy
j
yy
j
else
System
arraycopy
yy
yy
nextSym
yy
tmp
if
groupPos
groupPos
G_SIZE
zt
selector
groupNo
base_zt
base
zt
limit_zt
limit
zt
perm_zt
perm
zt
minLens_zt
minLens
zt
else
groupPos
int
zn
minLens_zt
while
bsLiveShadow
zn
final
int
thech
inShadow
read
if
thech
bsBuffShadow
bsBuffShadow
thech
bsLiveShadow
continue
else
throw
new
IOException
int
zvec
bsBuffShadow
bsLiveShadow
zn
zn
bsLiveShadow
zn
while
zvec
limit_zt
zn
zn
while
bsLiveShadow
final
int
thech
inShadow
read
if
thech
bsBuffShadow
bsBuffShadow
thech
bsLiveShadow
continue
else
throw
new
IOException
bsLiveShadow
zvec
zvec
bsBuffShadow
bsLiveShadow
nextSym
perm_zt
zvec
base_zt
zn
this
last
lastShadow
this
bsLive
bsLiveShadow
this
bsBuff
bsBuffShadow
private
int
getAndMoveToFrontDecode0
final
int
groupNo
throws
IOException
final
InputStream
inShadow
this
in
final
Data
dataShadow
this
data
final
int
zt
dataShadow
selector
groupNo
final
int
limit_zt
dataShadow
limit
zt
int
zn
dataShadow
minLens
zt
int
zvec
bsR
zn
int
bsLiveShadow
this
bsLive
int
bsBuffShadow
this
bsBuff
while
zvec
limit_zt
zn
zn
while
bsLiveShadow
final
int
thech
inShadow
read
if
thech
bsBuffShadow
bsBuffShadow
thech
bsLiveShadow
continue
else
throw
new
IOException
bsLiveShadow
zvec
zvec
bsBuffShadow
bsLiveShadow
this
bsLive
bsLiveShadow
this
bsBuff
bsBuffShadow
return
dataShadow
perm
zt
zvec
dataShadow
base
zt
zn
private
void
setupBlock
throws
IOException
if
this
data
return
final
int
cftab
this
data
cftab
final
int
tt
this
data
initTT
this
last
final
byte
ll8
this
data
ll8
cftab
System
arraycopy
this
data
unzftab
cftab
for
int
i
c
cftab
i
i
c
cftab
i
cftab
i
c
for
int
i
lastShadow
this
last
i
lastShadow
i
tt
cftab
ll8
i
i
if
this
origPtr
this
origPtr
tt
length
throw
new
IOException
this
su_tPos
tt
this
origPtr
this
su_count
this
su_i2
this
su_ch2
if
this
blockRandomised
this
su_rNToGo
this
su_rTPos
setupRandPartA
else
setupNoRandPartA
private
void
setupRandPartA
throws
IOException
if
this
su_i2
this
last
this
su_chPrev
this
su_ch2
int
su_ch2Shadow
this
data
ll8
this
su_tPos
this
su_tPos
this
data
tt
this
su_tPos
if
this
su_rNToGo
this
su_rNToGo
BZip2Constants
rNums
this
su_rTPos
if
this
su_rTPos
this
su_rTPos
else
this
su_rNToGo
this
su_ch2
su_ch2Shadow
this
su_rNToGo
this
su_i2
this
currentChar
su_ch2Shadow
this
currentState
RAND_PART_B_STATE
this
crc
updateCRC
su_ch2Shadow
else
endBlock
initBlock
setupBlock
private
void
setupNoRandPartA
throws
IOException
if
this
su_i2
this
last
this
su_chPrev
this
su_ch2
int
su_ch2Shadow
this
data
ll8
this
su_tPos
this
su_ch2
su_ch2Shadow
this
su_tPos
this
data
tt
this
su_tPos
this
su_i2
this
currentChar
su_ch2Shadow
this
currentState
NO_RAND_PART_B_STATE
this
crc
updateCRC
su_ch2Shadow
else
this
currentState
NO_RAND_PART_A_STATE
endBlock
initBlock
setupBlock
private
void
setupRandPartB
throws
IOException
if
this
su_ch2
this
su_chPrev
this
currentState
RAND_PART_A_STATE
this
su_count
setupRandPartA
else
if
this
su_count
this
su_z
char
this
data
ll8
this
su_tPos
this
su_tPos
this
data
tt
this
su_tPos
if
this
su_rNToGo
this
su_rNToGo
BZip2Constants
rNums
this
su_rTPos
if
this
su_rTPos
this
su_rTPos
else
this
su_rNToGo
this
su_j2
this
currentState
RAND_PART_C_STATE
if
this
su_rNToGo
this
su_z
setupRandPartC
else
this
currentState
RAND_PART_A_STATE
setupRandPartA
private
void
setupRandPartC
throws
IOException
if
this
su_j2
this
su_z
this
currentChar
this
su_ch2
this
crc
updateCRC
this
su_ch2
this
su_j2
else
this
currentState
RAND_PART_A_STATE
this
su_i2
this
su_count
setupRandPartA
private
void
setupNoRandPartB
throws
IOException
if
this
su_ch2
this
su_chPrev
this
su_count
setupNoRandPartA
else
if
this
su_count
this
su_z
char
this
data
ll8
this
su_tPos
this
su_tPos
this
data
tt
this
su_tPos
this
su_j2
setupNoRandPartC
else
setupNoRandPartA
private
void
setupNoRandPartC
throws
IOException
if
this
su_j2
this
su_z
int
su_ch2Shadow
this
su_ch2
this
currentChar
su_ch2Shadow
this
crc
updateCRC
su_ch2Shadow
this
su_j2
this
currentState
NO_RAND_PART_C_STATE
else
this
su_i2
this
su_count
setupNoRandPartA
private
static
final
class
Data
extends
Object
final
boolean
inUse
new
boolean
final
byte
seqToUnseq
new
byte
final
byte
selector
new
byte
MAX_SELECTORS
final
byte
selectorMtf
new
byte
MAX_SELECTORS
final
int
unzftab
new
int
final
int
limit
new
int
N_GROUPS
MAX_ALPHA_SIZE
final
int
base
new
int
N_GROUPS
MAX_ALPHA_SIZE
final
int
perm
new
int
N_GROUPS
MAX_ALPHA_SIZE
final
int
minLens
new
int
N_GROUPS
final
int
cftab
new
int
final
char
getAndMoveToFrontDecode_yy
new
char
final
char
temp_charArray2d
new
char
N_GROUPS
MAX_ALPHA_SIZE
final
byte
recvDecodingTables_pos
new
byte
N_GROUPS
int
tt
byte
ll8
Data
int
blockSize100k
super
this
ll8
new
byte
blockSize100k
BZip2Constants
baseBlockSize
final
int
initTT
int
length
int
ttShadow
this
tt
if
ttShadow
ttShadow
length
length
this
tt
ttShadow
new
int
length
return
ttShadow
