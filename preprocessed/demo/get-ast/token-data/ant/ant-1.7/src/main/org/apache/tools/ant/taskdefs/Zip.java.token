package
org
apache
tools
ant
taskdefs
import
java
io
ByteArrayInputStream
import
java
io
ByteArrayOutputStream
import
java
io
File
import
java
io
FileInputStream
import
java
io
FileOutputStream
import
java
io
IOException
import
java
io
InputStream
import
java
io
OutputStream
import
java
util
ArrayList
import
java
util
Enumeration
import
java
util
Hashtable
import
java
util
Iterator
import
java
util
Stack
import
java
util
Vector
import
java
util
zip
CRC32
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
DirectoryScanner
import
org
apache
tools
ant
FileScanner
import
org
apache
tools
ant
Project
import
org
apache
tools
ant
types
ArchiveFileSet
import
org
apache
tools
ant
types
EnumeratedAttribute
import
org
apache
tools
ant
types
FileSet
import
org
apache
tools
ant
types
PatternSet
import
org
apache
tools
ant
types
Resource
import
org
apache
tools
ant
types
ResourceCollection
import
org
apache
tools
ant
types
ZipFileSet
import
org
apache
tools
ant
types
ZipScanner
import
org
apache
tools
ant
types
resources
ArchiveResource
import
org
apache
tools
ant
types
resources
FileResource
import
org
apache
tools
ant
util
FileNameMapper
import
org
apache
tools
ant
util
FileUtils
import
org
apache
tools
ant
util
GlobPatternMapper
import
org
apache
tools
ant
util
IdentityMapper
import
org
apache
tools
ant
util
MergingMapper
import
org
apache
tools
ant
util
ResourceUtils
import
org
apache
tools
zip
ZipEntry
import
org
apache
tools
zip
ZipExtraField
import
org
apache
tools
zip
ZipFile
import
org
apache
tools
zip
ZipOutputStream
public
class
Zip
extends
MatchingTask
protected
File
zipFile
private
ZipScanner
zs
private
File
baseDir
protected
Hashtable
entries
new
Hashtable
private
Vector
groupfilesets
new
Vector
private
Vector
filesetsFromGroupfilesets
new
Vector
protected
String
duplicate
private
boolean
doCompress
private
boolean
doUpdate
private
boolean
savedDoUpdate
private
boolean
doFilesonly
protected
String
archiveType
private
static
final
long
EMPTY_CRC
new
CRC32
getValue
protected
String
emptyBehavior
private
Vector
resources
new
Vector
protected
Hashtable
addedDirs
new
Hashtable
private
Vector
addedFiles
new
Vector
protected
boolean
doubleFilePass
protected
boolean
skipWriting
private
static
final
FileUtils
FILE_UTILS
FileUtils
getFileUtils
private
boolean
addingNewFiles
private
String
encoding
private
boolean
keepCompression
private
boolean
roundUp
private
String
comment
private
int
level
ZipOutputStream
DEFAULT_COMPRESSION
public
void
setZipfile
File
zipFile
setDestFile
zipFile
public
void
setFile
File
file
setDestFile
file
public
void
setDestFile
File
destFile
this
zipFile
destFile
public
File
getDestFile
return
zipFile
public
void
setBasedir
File
baseDir
this
baseDir
baseDir
public
void
setCompress
boolean
c
doCompress
c
public
boolean
isCompress
return
doCompress
public
void
setFilesonly
boolean
f
doFilesonly
f
public
void
setUpdate
boolean
c
doUpdate
c
savedDoUpdate
c
public
boolean
isInUpdateMode
return
doUpdate
public
void
addFileset
FileSet
set
add
set
public
void
addZipfileset
ZipFileSet
set
add
set
public
void
add
ResourceCollection
a
resources
add
a
public
void
addZipGroupFileset
FileSet
set
groupfilesets
addElement
set
public
void
setDuplicate
Duplicate
df
duplicate
df
getValue
public
static
class
WhenEmpty
extends
EnumeratedAttribute
public
String
getValues
return
new
String
public
void
setWhenempty
WhenEmpty
we
emptyBehavior
we
getValue
public
void
setEncoding
String
encoding
this
encoding
encoding
public
String
getEncoding
return
encoding
public
void
setKeepCompression
boolean
keep
keepCompression
keep
public
void
setComment
String
comment
this
comment
comment
public
String
getComment
return
comment
public
void
setLevel
int
level
this
level
level
public
int
getLevel
return
level
public
void
setRoundUp
boolean
r
roundUp
r
public
void
execute
throws
BuildException
if
doubleFilePass
skipWriting
executeMain
skipWriting
executeMain
else
executeMain
public
void
executeMain
throws
BuildException
if
baseDir
resources
size
groupfilesets
size
equals
archiveType
throw
new
BuildException
if
zipFile
throw
new
BuildException
archiveType
if
zipFile
exists
zipFile
isFile
throw
new
BuildException
zipFile
if
zipFile
exists
zipFile
canWrite
throw
new
BuildException
zipFile
File
renamedFile
addingNewFiles
if
doUpdate
zipFile
exists
doUpdate
log
archiveType
Project
MSG_DEBUG
for
int
i
i
groupfilesets
size
i
log
Project
MSG_VERBOSE
FileSet
fs
FileSet
groupfilesets
elementAt
i
FileScanner
scanner
fs
getDirectoryScanner
getProject
String
files
scanner
getIncludedFiles
File
basedir
scanner
getBasedir
for
int
j
j
files
length
j
log
files
j
Project
MSG_VERBOSE
ZipFileSet
zf
new
ZipFileSet
zf
setProject
getProject
zf
setSrc
new
File
basedir
files
j
add
zf
filesetsFromGroupfilesets
addElement
zf
Vector
vfss
new
Vector
if
baseDir
FileSet
fs
FileSet
getImplicitFileSet
clone
fs
setDir
baseDir
vfss
addElement
fs
for
int
i
i
resources
size
i
ResourceCollection
rc
ResourceCollection
resources
elementAt
i
vfss
addElement
rc
ResourceCollection
fss
new
ResourceCollection
vfss
size
vfss
copyInto
fss
boolean
success
try
ArchiveState
state
getResourcesToAdd
fss
zipFile
if
state
isOutOfDate
return
if
zipFile
exists
state
isWithoutAnyResources
createEmptyZip
zipFile
return
Resource
addThem
state
getResourcesToAdd
if
doUpdate
renamedFile
FILE_UTILS
createTempFile
zipFile
getParentFile
renamedFile
deleteOnExit
try
FILE_UTILS
rename
zipFile
renamedFile
catch
SecurityException
e
throw
new
BuildException
zipFile
getAbsolutePath
catch
IOException
e
throw
new
BuildException
zipFile
getAbsolutePath
String
action
doUpdate
log
action
archiveType
zipFile
getAbsolutePath
ZipOutputStream
zOut
try
if
skipWriting
zOut
new
ZipOutputStream
zipFile
zOut
setEncoding
encoding
zOut
setMethod
doCompress
ZipOutputStream
DEFLATED
ZipOutputStream
STORED
zOut
setLevel
level
initZipOutputStream
zOut
for
int
i
i
fss
length
i
if
addThem
i
length
addResources
fss
i
addThem
i
zOut
if
doUpdate
addingNewFiles
ZipFileSet
oldFiles
new
ZipFileSet
oldFiles
setProject
getProject
oldFiles
setSrc
renamedFile
oldFiles
setDefaultexcludes
for
int
i
i
addedFiles
size
i
PatternSet
NameEntry
ne
oldFiles
createExclude
ne
setName
String
addedFiles
elementAt
i
DirectoryScanner
ds
oldFiles
getDirectoryScanner
getProject
ZipScanner
ds
setEncoding
encoding
String
f
ds
getIncludedFiles
Resource
r
new
Resource
f
length
for
int
i
i
f
length
i
r
i
ds
getResource
f
i
if
doFilesonly
String
d
ds
getIncludedDirectories
Resource
dr
new
Resource
d
length
for
int
i
i
d
length
i
dr
i
ds
getResource
d
i
Resource
tmp
r
r
new
Resource
tmp
length
dr
length
System
arraycopy
dr
r
dr
length
System
arraycopy
tmp
r
dr
length
tmp
length
addResources
oldFiles
r
zOut
if
zOut
zOut
setComment
comment
finalizeZipOutputStream
zOut
if
doUpdate
if
renamedFile
delete
log
renamedFile
getName
Project
MSG_WARN
success
finally
try
if
zOut
zOut
close
catch
IOException
ex
if
success
throw
ex
catch
IOException
ioe
String
msg
archiveType
ioe
getMessage
if
doUpdate
renamedFile
zipFile
delete
msg
if
doUpdate
renamedFile
try
FILE_UTILS
rename
renamedFile
zipFile
catch
IOException
e
msg
renamedFile
getName
throw
new
BuildException
msg
ioe
getLocation
finally
cleanUp
protected
final
boolean
isAddingNewFiles
return
addingNewFiles
protected
final
void
addResources
FileSet
fileset
Resource
resources
ZipOutputStream
zOut
throws
IOException
String
prefix
String
fullpath
int
dirMode
ArchiveFileSet
DEFAULT_DIR_MODE
int
fileMode
ArchiveFileSet
DEFAULT_FILE_MODE
ArchiveFileSet
zfs
if
fileset
instanceof
ArchiveFileSet
zfs
ArchiveFileSet
fileset
prefix
zfs
getPrefix
getProject
fullpath
zfs
getFullpath
getProject
dirMode
zfs
getDirMode
getProject
fileMode
zfs
getFileMode
getProject
if
prefix
length
fullpath
length
throw
new
BuildException
if
resources
length
fullpath
length
throw
new
BuildException
if
prefix
length
if
prefix
endsWith
prefix
endsWith
prefix
addParentDirs
prefix
zOut
dirMode
ZipFile
zf
try
boolean
dealingWithFiles
File
base
if
zfs
zfs
getSrc
getProject
dealingWithFiles
base
fileset
getDir
getProject
else
if
zfs
instanceof
ZipFileSet
zf
new
ZipFile
zfs
getSrc
getProject
encoding
for
int
i
i
resources
length
i
String
name
if
fullpath
length
name
fullpath
else
name
resources
i
getName
name
name
replace
File
separatorChar
if
equals
name
continue
if
resources
i
isDirectory
name
endsWith
name
name
if
doFilesonly
dealingWithFiles
resources
i
isDirectory
zfs
hasDirModeBeenSet
int
nextToLastSlash
name
lastIndexOf
name
length
if
nextToLastSlash
addParentDirs
base
name
substring
nextToLastSlash
zOut
prefix
dirMode
if
zf
ZipEntry
ze
zf
getEntry
resources
i
getName
addParentDirs
base
name
zOut
prefix
ze
getUnixMode
else
ArchiveResource
tr
ArchiveResource
resources
i
addParentDirs
base
name
zOut
prefix
tr
getMode
else
addParentDirs
base
name
zOut
prefix
dirMode
if
resources
i
isDirectory
dealingWithFiles
File
f
FILE_UTILS
resolveFile
base
resources
i
getName
zipFile
f
zOut
prefix
name
fileMode
else
if
resources
i
isDirectory
if
zf
ZipEntry
ze
zf
getEntry
resources
i
getName
if
ze
boolean
oldCompress
doCompress
if
keepCompression
doCompress
ze
getMethod
ZipEntry
DEFLATED
try
zipFile
zf
getInputStream
ze
zOut
prefix
name
ze
getTime
zfs
getSrc
getProject
zfs
hasFileModeBeenSet
fileMode
ze
getUnixMode
finally
doCompress
oldCompress
else
ArchiveResource
tr
ArchiveResource
resources
i
InputStream
is
try
is
tr
getInputStream
zipFile
is
zOut
prefix
name
resources
i
getLastModified
zfs
getSrc
getProject
zfs
hasFileModeBeenSet
fileMode
tr
getMode
finally
FileUtils
close
is
finally
if
zf
zf
close
protected
final
void
addResources
ResourceCollection
rc
Resource
resources
ZipOutputStream
zOut
throws
IOException
if
rc
instanceof
FileSet
addResources
FileSet
rc
resources
zOut
return
for
int
i
i
resources
length
i
String
name
resources
i
getName
replace
File
separatorChar
if
equals
name
continue
if
resources
i
isDirectory
doFilesonly
continue
File
base
if
resources
i
instanceof
FileResource
base
FileResource
resources
i
getBaseDir
if
resources
i
isDirectory
if
name
endsWith
name
name
addParentDirs
base
name
zOut
ArchiveFileSet
DEFAULT_DIR_MODE
if
resources
i
isDirectory
if
resources
i
instanceof
FileResource
File
f
FileResource
resources
i
getFile
zipFile
f
zOut
name
ArchiveFileSet
DEFAULT_FILE_MODE
else
InputStream
is
try
is
resources
i
getInputStream
zipFile
is
zOut
name
resources
i
getLastModified
ArchiveFileSet
DEFAULT_FILE_MODE
finally
FileUtils
close
is
protected
void
initZipOutputStream
ZipOutputStream
zOut
throws
IOException
BuildException
protected
void
finalizeZipOutputStream
ZipOutputStream
zOut
throws
IOException
BuildException
protected
boolean
createEmptyZip
File
zipFile
throws
BuildException
log
archiveType
zipFile
Project
MSG_INFO
OutputStream
os
try
os
new
FileOutputStream
zipFile
byte
empty
new
byte
empty
empty
empty
empty
os
write
empty
catch
IOException
ioe
throw
new
BuildException
ioe
getMessage
ioe
getLocation
finally
if
os
try
os
close
catch
IOException
e
return
private
synchronized
ZipScanner
getZipScanner
if
zs
zs
new
ZipScanner
zs
setEncoding
encoding
zs
setSrc
zipFile
return
zs
protected
ArchiveState
getResourcesToAdd
ResourceCollection
rcs
File
zipFile
boolean
needsUpdate
throws
BuildException
ArrayList
filesets
new
ArrayList
ArrayList
rest
new
ArrayList
for
int
i
i
rcs
length
i
if
rcs
i
instanceof
FileSet
filesets
add
rcs
i
else
rest
add
rcs
i
ResourceCollection
rc
ResourceCollection
rest
toArray
new
ResourceCollection
rest
size
ArchiveState
as
getNonFileSetResourcesToAdd
rc
zipFile
needsUpdate
FileSet
fs
FileSet
filesets
toArray
new
FileSet
filesets
size
ArchiveState
as2
getResourcesToAdd
fs
zipFile
as
isOutOfDate
if
as
isOutOfDate
as2
isOutOfDate
as
getNonFileSetResourcesToAdd
rc
zipFile
Resource
toAdd
new
Resource
rcs
length
int
fsIndex
int
restIndex
for
int
i
i
rcs
length
i
if
rcs
i
instanceof
FileSet
toAdd
i
as2
getResourcesToAdd
fsIndex
else
toAdd
i
as
getResourcesToAdd
restIndex
return
new
ArchiveState
as2
isOutOfDate
toAdd
protected
ArchiveState
getResourcesToAdd
FileSet
filesets
File
zipFile
boolean
needsUpdate
throws
BuildException
Resource
initialResources
grabResources
filesets
if
isEmpty
initialResources
if
needsUpdate
doUpdate
return
new
ArchiveState
initialResources
if
emptyBehavior
equals
if
doUpdate
log
archiveType
zipFile
Project
MSG_VERBOSE
else
log
archiveType
zipFile
Project
MSG_WARN
else
if
emptyBehavior
equals
throw
new
BuildException
archiveType
zipFile
getLocation
else
if
zipFile
exists
needsUpdate
return
new
ArchiveState
needsUpdate
initialResources
if
zipFile
exists
return
new
ArchiveState
initialResources
if
needsUpdate
doUpdate
return
new
ArchiveState
initialResources
Resource
newerResources
new
Resource
filesets
length
for
int
i
i
filesets
length
i
if
fileset
instanceof
ZipFileSet
ZipFileSet
fileset
getSrc
getProject
File
base
filesets
i
getDir
getProject
for
int
j
j
initialResources
i
length
j
File
resourceAsFile
FILE_UTILS
resolveFile
base
initialResources
i
j
getName
if
resourceAsFile
equals
zipFile
throw
new
BuildException
getLocation
for
int
i
i
filesets
length
i
if
initialResources
i
length
newerResources
i
new
Resource
continue
FileNameMapper
myMapper
new
IdentityMapper
if
filesets
i
instanceof
ZipFileSet
ZipFileSet
zfs
ZipFileSet
filesets
i
if
zfs
getFullpath
getProject
zfs
getFullpath
getProject
equals
MergingMapper
fm
new
MergingMapper
fm
setTo
zfs
getFullpath
getProject
myMapper
fm
else
if
zfs
getPrefix
getProject
zfs
getPrefix
getProject
equals
GlobPatternMapper
gm
new
GlobPatternMapper
gm
setFrom
String
prefix
zfs
getPrefix
getProject
if
prefix
endsWith
prefix
endsWith
prefix
gm
setTo
prefix
myMapper
gm
Resource
resources
initialResources
i
if
doFilesonly
resources
selectFileResources
resources
newerResources
i
ResourceUtils
selectOutOfDateSources
this
resources
myMapper
getZipScanner
needsUpdate
needsUpdate
newerResources
i
length
if
needsUpdate
doUpdate
break
if
needsUpdate
doUpdate
return
new
ArchiveState
initialResources
return
new
ArchiveState
needsUpdate
newerResources
protected
ArchiveState
getNonFileSetResourcesToAdd
ResourceCollection
rcs
File
zipFile
boolean
needsUpdate
throws
BuildException
Resource
initialResources
grabNonFileSetResources
rcs
if
isEmpty
initialResources
return
new
ArchiveState
needsUpdate
initialResources
if
zipFile
exists
return
new
ArchiveState
initialResources
if
needsUpdate
doUpdate
return
new
ArchiveState
initialResources
Resource
newerResources
new
Resource
rcs
length
for
int
i
i
rcs
length
i
if
initialResources
i
length
newerResources
i
new
Resource
continue
for
int
j
j
initialResources
i
length
j
if
initialResources
i
j
instanceof
FileResource
zipFile
equals
FileResource
initialResources
i
j
getFile
throw
new
BuildException
getLocation
Resource
rs
initialResources
i
if
doFilesonly
rs
selectFileResources
rs
newerResources
i
ResourceUtils
selectOutOfDateSources
this
rs
new
IdentityMapper
getZipScanner
needsUpdate
needsUpdate
newerResources
i
length
if
needsUpdate
doUpdate
break
if
needsUpdate
doUpdate
return
new
ArchiveState
initialResources
return
new
ArchiveState
needsUpdate
newerResources
protected
Resource
grabResources
FileSet
filesets
Resource
result
new
Resource
filesets
length
for
int
i
i
filesets
length
i
boolean
skipEmptyNames
if
filesets
i
instanceof
ZipFileSet
ZipFileSet
zfs
ZipFileSet
filesets
i
skipEmptyNames
zfs
getPrefix
getProject
equals
zfs
getFullpath
getProject
equals
DirectoryScanner
rs
filesets
i
getDirectoryScanner
getProject
if
rs
instanceof
ZipScanner
ZipScanner
rs
setEncoding
encoding
Vector
resources
new
Vector
if
doFilesonly
String
directories
rs
getIncludedDirectories
for
int
j
j
directories
length
j
if
equals
directories
j
skipEmptyNames
resources
addElement
rs
getResource
directories
j
String
files
rs
getIncludedFiles
for
int
j
j
files
length
j
if
equals
files
j
skipEmptyNames
resources
addElement
rs
getResource
files
j
result
i
new
Resource
resources
size
resources
copyInto
result
i
return
result
protected
Resource
grabNonFileSetResources
ResourceCollection
rcs
Resource
result
new
Resource
rcs
length
for
int
i
i
rcs
length
i
Iterator
iter
rcs
i
iterator
ArrayList
rs
new
ArrayList
int
lastDir
while
iter
hasNext
Resource
r
Resource
iter
next
if
r
isExists
if
r
isDirectory
rs
add
lastDir
r
else
rs
add
r
result
i
Resource
rs
toArray
new
Resource
rs
size
return
result
protected
void
zipDir
File
dir
ZipOutputStream
zOut
String
vPath
int
mode
throws
IOException
zipDir
dir
zOut
vPath
mode
protected
void
zipDir
File
dir
ZipOutputStream
zOut
String
vPath
int
mode
ZipExtraField
extra
throws
IOException
if
doFilesonly
log
vPath
Project
MSG_VERBOSE
return
if
addedDirs
get
vPath
return
log
vPath
Project
MSG_VERBOSE
addedDirs
put
vPath
vPath
if
skipWriting
ZipEntry
ze
new
ZipEntry
vPath
if
dir
dir
exists
ze
setTime
dir
lastModified
roundUp
else
ze
setTime
System
currentTimeMillis
roundUp
ze
setSize
ze
setMethod
ZipEntry
STORED
ze
setCrc
EMPTY_CRC
ze
setUnixMode
mode
if
extra
ze
setExtraFields
extra
zOut
putNextEntry
ze
protected
void
zipFile
InputStream
in
ZipOutputStream
zOut
String
vPath
long
lastModified
File
fromArchive
int
mode
throws
IOException
if
entries
contains
vPath
if
duplicate
equals
log
vPath
Project
MSG_INFO
return
else
if
duplicate
equals
throw
new
BuildException
vPath
else
log
vPath
Project
MSG_VERBOSE
else
log
vPath
Project
MSG_VERBOSE
entries
put
vPath
vPath
if
skipWriting
ZipEntry
ze
new
ZipEntry
vPath
ze
setTime
lastModified
ze
setMethod
doCompress
ZipEntry
DEFLATED
ZipEntry
STORED
if
zOut
isSeekable
doCompress
long
size
CRC32
cal
new
CRC32
if
in
markSupported
ByteArrayOutputStream
bos
new
ByteArrayOutputStream
byte
buffer
new
byte
int
count
do
size
count
cal
update
buffer
count
bos
write
buffer
count
count
in
read
buffer
buffer
length
while
count
in
new
ByteArrayInputStream
bos
toByteArray
else
in
mark
Integer
MAX_VALUE
byte
buffer
new
byte
int
count
do
size
count
cal
update
buffer
count
count
in
read
buffer
buffer
length
while
count
in
reset
ze
setSize
size
ze
setCrc
cal
getValue
ze
setUnixMode
mode
zOut
putNextEntry
ze
byte
buffer
new
byte
int
count
do
if
count
zOut
write
buffer
count
count
in
read
buffer
buffer
length
while
count
addedFiles
addElement
vPath
protected
void
zipFile
File
file
ZipOutputStream
zOut
String
vPath
int
mode
throws
IOException
if
file
equals
zipFile
throw
new
BuildException
getLocation
FileInputStream
fIn
new
FileInputStream
file
try
zipFile
fIn
zOut
vPath
file
lastModified
roundUp
mode
finally
fIn
close
protected
final
void
addParentDirs
File
baseDir
String
entry
ZipOutputStream
zOut
String
prefix
int
dirMode
throws
IOException
if
doFilesonly
Stack
directories
new
Stack
int
slashPos
entry
length
while
slashPos
entry
lastIndexOf
slashPos
String
dir
entry
substring
slashPos
if
addedDirs
get
prefix
dir
break
directories
push
dir
while
directories
isEmpty
String
dir
String
directories
pop
File
f
if
baseDir
f
new
File
baseDir
dir
else
f
new
File
dir
zipDir
f
zOut
prefix
dir
dirMode
protected
void
cleanUp
addedDirs
clear
addedFiles
removeAllElements
entries
clear
addingNewFiles
doUpdate
savedDoUpdate
Enumeration
e
filesetsFromGroupfilesets
elements
while
e
hasMoreElements
ZipFileSet
zf
ZipFileSet
e
nextElement
resources
removeElement
zf
filesetsFromGroupfilesets
removeAllElements
public
void
reset
resources
removeAllElements
zipFile
baseDir
groupfilesets
removeAllElements
duplicate
archiveType
doCompress
emptyBehavior
doUpdate
doFilesonly
encoding
protected
static
final
boolean
isEmpty
Resource
r
for
int
i
i
r
length
i
if
r
i
length
return
return
protected
Resource
selectFileResources
Resource
orig
if
orig
length
return
orig
Vector
v
new
Vector
orig
length
for
int
i
i
orig
length
i
if
orig
i
isDirectory
v
addElement
orig
i
else
log
orig
i
getName
Project
MSG_VERBOSE
if
v
size
orig
length
Resource
r
new
Resource
v
size
v
copyInto
r
return
r
return
orig
public
static
class
Duplicate
extends
EnumeratedAttribute
public
String
getValues
return
new
String
public
static
class
ArchiveState
private
boolean
outOfDate
private
Resource
resourcesToAdd
ArchiveState
boolean
state
Resource
r
outOfDate
state
resourcesToAdd
r
public
boolean
isOutOfDate
return
outOfDate
public
Resource
getResourcesToAdd
return
resourcesToAdd
public
boolean
isWithoutAnyResources
if
resourcesToAdd
return
for
int
counter
counter
resourcesToAdd
length
counter
if
resourcesToAdd
counter
if
resourcesToAdd
counter
length
return
return
