package
org
apache
tools
ant
types
selectors
import
java
io
File
import
java
util
StringTokenizer
import
java
util
Vector
import
org
apache
tools
ant
types
Resource
import
org
apache
tools
ant
util
FileUtils
public
final
class
SelectorUtils
private
static
SelectorUtils
instance
new
SelectorUtils
private
static
final
FileUtils
FILE_UTILS
FileUtils
getFileUtils
private
SelectorUtils
public
static
SelectorUtils
getInstance
return
instance
public
static
boolean
matchPatternStart
String
pattern
String
str
return
matchPatternStart
pattern
str
public
static
boolean
matchPatternStart
String
pattern
String
str
boolean
isCaseSensitive
if
str
startsWith
File
separator
pattern
startsWith
File
separator
return
String
patDirs
tokenizePathAsArray
pattern
String
strDirs
tokenizePathAsArray
str
int
patIdxStart
int
patIdxEnd
patDirs
length
int
strIdxStart
int
strIdxEnd
strDirs
length
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
String
patDir
patDirs
patIdxStart
if
patDir
equals
break
if
match
patDir
strDirs
strIdxStart
isCaseSensitive
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
return
else
if
patIdxStart
patIdxEnd
return
else
return
public
static
boolean
matchPath
String
pattern
String
str
return
matchPath
pattern
str
public
static
boolean
matchPath
String
pattern
String
str
boolean
isCaseSensitive
String
patDirs
tokenizePathAsArray
pattern
String
strDirs
tokenizePathAsArray
str
int
patIdxStart
int
patIdxEnd
patDirs
length
int
strIdxStart
int
strIdxEnd
strDirs
length
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
String
patDir
patDirs
patIdxStart
if
patDir
equals
break
if
match
patDir
strDirs
strIdxStart
isCaseSensitive
patDirs
strDirs
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
i
equals
patDirs
strDirs
return
return
else
if
patIdxStart
patIdxEnd
patDirs
strDirs
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
String
patDir
patDirs
patIdxEnd
if
patDir
equals
break
if
match
patDir
strDirs
strIdxEnd
isCaseSensitive
patDirs
strDirs
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
i
equals
patDirs
strDirs
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
int
patIdxTmp
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
i
equals
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
strLoop
for
int
i
i
strLength
patLength
i
for
int
j
j
patLength
j
String
subPat
patDirs
patIdxStart
j
String
subStr
strDirs
strIdxStart
i
j
if
match
subPat
subStr
isCaseSensitive
continue
strLoop
foundIdx
strIdxStart
i
break
if
foundIdx
patDirs
strDirs
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
i
equals
patDirs
strDirs
return
return
public
static
boolean
match
String
pattern
String
str
return
match
pattern
str
public
static
boolean
match
String
pattern
String
str
boolean
isCaseSensitive
char
patArr
pattern
toCharArray
char
strArr
str
toCharArray
int
patIdxStart
int
patIdxEnd
patArr
length
int
strIdxStart
int
strIdxEnd
strArr
length
char
ch
boolean
containsStar
for
int
i
i
patArr
length
i
if
patArr
i
containsStar
break
if
containsStar
if
patIdxEnd
strIdxEnd
return
for
int
i
i
patIdxEnd
i
ch
patArr
i
if
ch
if
isCaseSensitive
ch
strArr
i
return
if
isCaseSensitive
Character
toUpperCase
ch
Character
toUpperCase
strArr
i
return
return
if
patIdxEnd
return
while
ch
patArr
patIdxStart
strIdxStart
strIdxEnd
if
ch
if
isCaseSensitive
ch
strArr
strIdxStart
return
if
isCaseSensitive
Character
toUpperCase
ch
Character
toUpperCase
strArr
strIdxStart
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
return
return
while
ch
patArr
patIdxEnd
strIdxStart
strIdxEnd
if
ch
if
isCaseSensitive
ch
strArr
strIdxEnd
return
if
isCaseSensitive
Character
toUpperCase
ch
Character
toUpperCase
strArr
strIdxEnd
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
int
patIdxTmp
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
strLoop
for
int
i
i
strLength
patLength
i
for
int
j
j
patLength
j
ch
patArr
patIdxStart
j
if
ch
if
isCaseSensitive
ch
strArr
strIdxStart
i
j
continue
strLoop
if
isCaseSensitive
Character
toUpperCase
ch
Character
toUpperCase
strArr
strIdxStart
i
j
continue
strLoop
foundIdx
strIdxStart
i
break
if
foundIdx
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
return
return
public
static
Vector
tokenizePath
String
path
return
tokenizePath
path
File
separator
public
static
Vector
tokenizePath
String
path
String
separator
Vector
ret
new
Vector
if
FileUtils
isAbsolutePath
path
String
s
FILE_UTILS
dissect
path
ret
add
s
path
s
StringTokenizer
st
new
StringTokenizer
path
separator
while
st
hasMoreTokens
ret
addElement
st
nextToken
return
ret
private
static
String
tokenizePathAsArray
String
path
String
root
if
FileUtils
isAbsolutePath
path
String
s
FILE_UTILS
dissect
path
root
s
path
s
char
sep
File
separatorChar
int
start
int
len
path
length
int
count
for
int
pos
pos
len
pos
if
path
charAt
pos
sep
if
pos
start
count
start
pos
if
len
start
count
String
l
new
String
count
root
if
root
l
root
count
else
count
start
for
int
pos
pos
len
pos
if
path
charAt
pos
sep
if
pos
start
String
tok
path
substring
start
pos
l
count
tok
start
pos
if
len
start
String
tok
path
substring
start
l
count
tok
return
l
public
static
boolean
isOutOfDate
File
src
File
target
int
granularity
if
src
exists
return
if
target
exists
return
if
src
lastModified
granularity
target
lastModified
return
return
public
static
boolean
isOutOfDate
Resource
src
Resource
target
int
granularity
return
isOutOfDate
src
target
long
granularity
public
static
boolean
isOutOfDate
Resource
src
Resource
target
long
granularity
if
src
isExists
return
if
target
isExists
return
if
src
getLastModified
granularity
target
getLastModified
return
return
public
static
String
removeWhitespace
String
input
StringBuffer
result
new
StringBuffer
if
input
StringTokenizer
st
new
StringTokenizer
input
while
st
hasMoreTokens
result
append
st
nextToken
return
result
toString
public
static
boolean
hasWildcards
String
input
return
input
indexOf
input
indexOf
public
static
String
rtrimWildcardTokens
String
input
String
tokens
tokenizePathAsArray
input
StringBuffer
sb
new
StringBuffer
for
int
i
i
tokens
length
i
if
hasWildcards
tokens
i
break
if
i
sb
charAt
sb
length
File
separatorChar
sb
append
File
separator
sb
append
tokens
i
return
sb
toString
