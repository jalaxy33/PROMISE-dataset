package
org
apache
tools
ant
taskdefs
optional
dotnet
import
java
io
File
import
java
io
IOException
import
java
io
FileOutputStream
import
java
io
PrintWriter
import
java
io
BufferedOutputStream
import
java
util
Hashtable
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
Project
import
org
apache
tools
ant
Task
import
org
apache
tools
ant
DirectoryScanner
import
org
apache
tools
ant
util
FileUtils
import
org
apache
tools
ant
taskdefs
Execute
import
org
apache
tools
ant
taskdefs
ExecuteStreamHandler
import
org
apache
tools
ant
taskdefs
LogStreamHandler
import
org
apache
tools
ant
types
Commandline
public
class
NetCommand
private
static
final
FileUtils
FILE_UTILS
FileUtils
getFileUtils
protected
Task
owner
protected
Execute
executable
protected
Commandline
commandLine
protected
String
title
protected
String
program
protected
boolean
traceCommandLine
protected
boolean
failOnError
private
File
directory
private
boolean
useResponseFile
private
File
temporaryCommandFile
private
int
automaticResponseFileThreshold
public
NetCommand
Task
owner
String
title
String
program
this
owner
owner
this
title
title
this
program
program
commandLine
new
Commandline
commandLine
setExecutable
program
public
void
setTraceCommandLine
boolean
b
traceCommandLine
b
public
void
setFailOnError
boolean
b
failOnError
b
public
boolean
getFailFailOnError
return
failOnError
public
void
setDirectory
File
directory
this
directory
directory
protected
void
logVerbose
String
msg
owner
getProject
log
msg
Project
MSG_VERBOSE
protected
void
logError
String
msg
owner
getProject
log
msg
Project
MSG_ERR
public
void
addArgument
String
argument
if
argument
argument
length
commandLine
createArgument
setValue
argument
public
void
addArguments
String
arguments
if
arguments
arguments
length
for
int
i
i
arguments
length
i
addArgument
arguments
i
public
void
addArgument
String
argument1
String
argument2
if
argument2
argument2
length
commandLine
createArgument
setValue
argument1
argument2
public
boolean
isUseResponseFile
return
useResponseFile
public
void
setUseResponseFile
boolean
useResponseFile
this
useResponseFile
useResponseFile
public
int
getAutomaticResponseFileThreshold
return
automaticResponseFileThreshold
public
void
setAutomaticResponseFileThreshold
int
automaticResponseFileThreshold
this
automaticResponseFileThreshold
automaticResponseFileThreshold
protected
void
prepareExecutor
if
owner
throw
new
RuntimeException
if
owner
getProject
throw
new
RuntimeException
File
dir
owner
getProject
getBaseDir
if
directory
dir
directory
ExecuteStreamHandler
handler
new
LogStreamHandler
owner
Project
MSG_INFO
Project
MSG_WARN
executable
new
Execute
handler
executable
setAntRun
owner
getProject
executable
setWorkingDirectory
dir
public
void
runCommand
throws
BuildException
prepareExecutor
int
err
try
if
traceCommandLine
owner
log
executable
getWorkingDirectory
owner
log
commandLine
describeCommand
else
logVerbose
executable
getWorkingDirectory
logVerbose
commandLine
describeCommand
setExecutableCommandLine
err
executable
execute
if
Execute
isFailure
err
if
failOnError
throw
new
BuildException
title
err
owner
getLocation
else
owner
log
title
err
Project
MSG_ERR
catch
IOException
e
throw
new
BuildException
title
e
e
owner
getLocation
finally
if
temporaryCommandFile
temporaryCommandFile
delete
private
void
setExecutableCommandLine
String
commands
commandLine
getCommandline
if
automaticResponseFileThreshold
commands
length
automaticResponseFileThreshold
useResponseFile
if
useResponseFile
commands
length
executable
setCommandline
commands
else
FileOutputStream
fos
temporaryCommandFile
FILE_UTILS
createTempFile
owner
log
temporaryCommandFile
Project
MSG_VERBOSE
try
fos
new
FileOutputStream
temporaryCommandFile
PrintWriter
out
new
PrintWriter
new
BufferedOutputStream
fos
for
int
i
i
commands
length
i
out
println
commands
i
out
flush
out
close
catch
IOException
ex
throw
new
BuildException
temporaryCommandFile
ex
String
newCommandLine
new
String
newCommandLine
commands
newCommandLine
temporaryCommandFile
getAbsolutePath
logVerbose
Commandline
describeCommand
newCommandLine
executable
setCommandline
newCommandLine
public
int
scanOneFileset
DirectoryScanner
scanner
Hashtable
filesToBuild
long
outputTimestamp
int
filesOutOfDate
String
dependencies
scanner
getIncludedFiles
File
base
scanner
getBasedir
for
int
i
i
dependencies
length
i
File
targetFile
new
File
base
dependencies
i
if
filesToBuild
get
targetFile
filesToBuild
put
targetFile
targetFile
if
targetFile
lastModified
outputTimestamp
filesOutOfDate
owner
log
targetFile
toString
Project
MSG_VERBOSE
else
owner
log
targetFile
toString
Project
MSG_VERBOSE
return
filesOutOfDate
