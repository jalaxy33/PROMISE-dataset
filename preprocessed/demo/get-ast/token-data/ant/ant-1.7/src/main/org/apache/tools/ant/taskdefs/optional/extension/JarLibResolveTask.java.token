package
org
apache
tools
ant
taskdefs
optional
extension
import
java
io
File
import
java
util
ArrayList
import
java
util
jar
Manifest
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
Project
import
org
apache
tools
ant
Task
import
org
apache
tools
ant
taskdefs
optional
extension
resolvers
AntResolver
import
org
apache
tools
ant
taskdefs
optional
extension
resolvers
LocationResolver
import
org
apache
tools
ant
taskdefs
optional
extension
resolvers
URLResolver
public
class
JarLibResolveTask
extends
Task
private
String
propertyName
private
Extension
requiredExtension
private
final
ArrayList
resolvers
new
ArrayList
private
boolean
checkExtension
private
boolean
failOnError
public
void
setProperty
final
String
property
this
propertyName
property
public
void
setCheckExtension
final
boolean
checkExtension
this
checkExtension
checkExtension
public
void
setFailOnError
final
boolean
failOnError
this
failOnError
failOnError
public
void
addConfiguredLocation
final
LocationResolver
loc
resolvers
add
loc
public
void
addConfiguredUrl
final
URLResolver
url
resolvers
add
url
public
void
addConfiguredAnt
final
AntResolver
ant
resolvers
add
ant
public
void
addConfiguredExtension
final
ExtensionAdapter
extension
if
requiredExtension
final
String
message
throw
new
BuildException
message
requiredExtension
extension
toExtension
public
void
execute
throws
BuildException
validate
getProject
log
requiredExtension
Project
MSG_VERBOSE
String
candidate
getProject
getProperty
propertyName
if
candidate
final
String
message
candidate
if
failOnError
throw
new
BuildException
message
getProject
log
message
Project
MSG_ERR
return
final
int
size
resolvers
size
for
int
i
i
size
i
final
ExtensionResolver
resolver
ExtensionResolver
resolvers
get
i
getProject
log
resolver
Project
MSG_VERBOSE
try
final
File
file
resolver
resolve
requiredExtension
getProject
try
checkExtension
file
return
catch
final
BuildException
be
final
String
message
file
be
getMessage
getProject
log
message
Project
MSG_WARN
catch
final
BuildException
be
final
String
message
resolver
be
getProject
log
message
Project
MSG_WARN
missingExtension
private
void
missingExtension
final
String
message
if
failOnError
throw
new
BuildException
message
getProject
log
message
Project
MSG_ERR
private
void
checkExtension
final
File
file
if
file
exists
final
String
message
file
throw
new
BuildException
message
if
file
isFile
final
String
message
file
throw
new
BuildException
message
if
checkExtension
final
String
message
file
getProject
log
message
Project
MSG_VERBOSE
setLibraryProperty
file
else
getProject
log
file
Project
MSG_VERBOSE
final
Manifest
manifest
ExtensionUtil
getManifest
file
final
Extension
extensions
Extension
getAvailable
manifest
for
int
i
i
extensions
length
i
final
Extension
extension
extensions
i
if
extension
isCompatibleWith
requiredExtension
setLibraryProperty
file
return
getProject
log
file
Project
MSG_VERBOSE
final
String
message
file
throw
new
BuildException
message
private
void
setLibraryProperty
final
File
file
getProject
setNewProperty
propertyName
file
getAbsolutePath
private
void
validate
throws
BuildException
if
propertyName
final
String
message
throw
new
BuildException
message
if
requiredExtension
final
String
message
throw
new
BuildException
message
