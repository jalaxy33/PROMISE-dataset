package
org
apache
tools
ant
taskdefs
import
java
io
BufferedOutputStream
import
java
io
File
import
java
io
FileOutputStream
import
java
io
IOException
import
java
io
OutputStream
import
java
io
PrintStream
import
java
util
Vector
import
org
apache
tools
ant
BuildException
import
org
apache
tools
ant
Project
import
org
apache
tools
ant
Task
import
org
apache
tools
ant
types
Commandline
import
org
apache
tools
ant
types
Environment
import
org
apache
tools
ant
util
StringUtils
import
org
apache
tools
ant
util
FileUtils
public
abstract
class
AbstractCvsTask
extends
Task
public
static
final
int
DEFAULT_COMPRESSION_LEVEL
private
static
final
int
MAXIMUM_COMRESSION_LEVEL
private
Commandline
cmd
new
Commandline
private
Vector
vecCommandlines
new
Vector
private
String
cvsRoot
private
String
cvsRsh
private
String
cvsPackage
private
String
tag
private
static
final
String
DEFAULT_COMMAND
private
String
command
private
boolean
quiet
private
boolean
reallyquiet
private
int
compression
private
boolean
noexec
private
int
port
private
File
passFile
private
File
dest
private
boolean
append
private
File
output
private
File
error
private
boolean
failOnError
private
ExecuteStreamHandler
executeStreamHandler
private
OutputStream
outputStream
private
OutputStream
errorStream
public
AbstractCvsTask
super
public
void
setExecuteStreamHandler
ExecuteStreamHandler
handler
this
executeStreamHandler
handler
protected
ExecuteStreamHandler
getExecuteStreamHandler
if
this
executeStreamHandler
setExecuteStreamHandler
new
PumpStreamHandler
getOutputStream
getErrorStream
return
this
executeStreamHandler
protected
void
setOutputStream
OutputStream
outputStream
this
outputStream
outputStream
protected
OutputStream
getOutputStream
if
this
outputStream
if
output
try
setOutputStream
new
PrintStream
new
BufferedOutputStream
new
FileOutputStream
output
getPath
append
catch
IOException
e
throw
new
BuildException
e
getLocation
else
setOutputStream
new
LogOutputStream
this
Project
MSG_INFO
return
this
outputStream
protected
void
setErrorStream
OutputStream
errorStream
this
errorStream
errorStream
protected
OutputStream
getErrorStream
if
this
errorStream
if
error
try
setErrorStream
new
PrintStream
new
BufferedOutputStream
new
FileOutputStream
error
getPath
append
catch
IOException
e
throw
new
BuildException
e
getLocation
else
setErrorStream
new
LogOutputStream
this
Project
MSG_WARN
return
this
errorStream
protected
void
runCommand
Commandline
toExecute
throws
BuildException
Environment
env
new
Environment
if
port
Environment
Variable
var
new
Environment
Variable
var
setKey
var
setValue
String
valueOf
port
env
addVariable
var
if
passFile
File
defaultPassFile
new
File
System
getProperty
System
getProperty
File
separatorChar
if
defaultPassFile
exists
this
setPassfile
defaultPassFile
if
passFile
if
passFile
isFile
passFile
canRead
Environment
Variable
var
new
Environment
Variable
var
setKey
var
setValue
String
valueOf
passFile
env
addVariable
var
log
String
valueOf
passFile
Project
MSG_VERBOSE
else
if
passFile
canRead
log
String
valueOf
passFile
Project
MSG_WARN
else
log
String
valueOf
passFile
Project
MSG_WARN
if
cvsRsh
Environment
Variable
var
new
Environment
Variable
var
setKey
var
setValue
String
valueOf
cvsRsh
env
addVariable
var
Execute
exe
new
Execute
getExecuteStreamHandler
exe
setAntRun
getProject
if
dest
dest
getProject
getBaseDir
if
dest
exists
dest
mkdirs
exe
setWorkingDirectory
dest
exe
setCommandline
toExecute
getCommandline
exe
setEnvironment
env
getVariables
try
String
actualCommandLine
executeToString
exe
log
actualCommandLine
Project
MSG_VERBOSE
int
retCode
exe
execute
log
retCode
Project
MSG_DEBUG
if
failOnError
Execute
isFailure
retCode
throw
new
BuildException
retCode
StringUtils
LINE_SEP
actualCommandLine
getLocation
catch
IOException
e
if
failOnError
throw
new
BuildException
e
getLocation
log
e
getMessage
Project
MSG_WARN
catch
BuildException
e
if
failOnError
throw
e
Throwable
t
e
getException
if
t
t
e
log
t
getMessage
Project
MSG_WARN
catch
Exception
e
if
failOnError
throw
new
BuildException
e
getLocation
log
e
getMessage
Project
MSG_WARN
public
void
execute
throws
BuildException
String
savedCommand
getCommand
if
this
getCommand
vecCommandlines
size
this
setCommand
AbstractCvsTask
DEFAULT_COMMAND
String
c
this
getCommand
Commandline
cloned
if
c
cloned
Commandline
cmd
clone
cloned
createArgument
setLine
c
this
addConfiguredCommandline
cloned
try
for
int
i
i
vecCommandlines
size
i
this
runCommand
Commandline
vecCommandlines
elementAt
i
finally
if
cloned
removeCommandline
cloned
setCommand
savedCommand
FileUtils
close
outputStream
FileUtils
close
errorStream
private
String
executeToString
Execute
execute
StringBuffer
stringBuffer
new
StringBuffer
Commandline
describeCommand
execute
getCommandline
String
newLine
StringUtils
LINE_SEP
String
variableArray
execute
getEnvironment
if
variableArray
stringBuffer
append
newLine
stringBuffer
append
newLine
stringBuffer
append
stringBuffer
append
newLine
for
int
z
z
variableArray
length
z
stringBuffer
append
newLine
stringBuffer
append
stringBuffer
append
variableArray
z
return
stringBuffer
toString
public
void
setCvsRoot
String
root
if
root
if
root
trim
equals
root
this
cvsRoot
root
public
String
getCvsRoot
return
this
cvsRoot
public
void
setCvsRsh
String
rsh
if
rsh
if
rsh
trim
equals
rsh
this
cvsRsh
rsh
public
String
getCvsRsh
return
this
cvsRsh
public
void
setPort
int
port
this
port
port
public
int
getPort
return
this
port
public
void
setPassfile
File
passFile
this
passFile
passFile
public
File
getPassFile
return
this
passFile
public
void
setDest
File
dest
this
dest
dest
public
File
getDest
return
this
dest
public
void
setPackage
String
p
this
cvsPackage
p
public
String
getPackage
return
this
cvsPackage
public
String
getTag
return
tag
public
void
setTag
String
p
if
p
p
trim
length
tag
p
addCommandArgument
p
public
void
addCommandArgument
String
arg
this
addCommandArgument
cmd
arg
public
void
addCommandArgument
Commandline
c
String
arg
c
createArgument
setValue
arg
public
void
setDate
String
p
if
p
p
trim
length
addCommandArgument
addCommandArgument
p
public
void
setCommand
String
c
this
command
c
public
String
getCommand
return
this
command
public
void
setQuiet
boolean
q
quiet
q
public
void
setReallyquiet
boolean
q
reallyquiet
q
public
void
setNoexec
boolean
ne
noexec
ne
public
void
setOutput
File
output
this
output
output
public
void
setError
File
error
this
error
error
public
void
setAppend
boolean
value
this
append
value
public
void
setFailOnError
boolean
failOnError
this
failOnError
failOnError
protected
void
configureCommandline
Commandline
c
if
c
return
c
setExecutable
if
cvsPackage
c
createArgument
setLine
cvsPackage
if
this
compression
this
compression
MAXIMUM_COMRESSION_LEVEL
c
createArgument
setValue
this
compression
if
quiet
reallyquiet
c
createArgument
setValue
if
reallyquiet
c
createArgument
setValue
if
noexec
c
createArgument
setValue
if
cvsRoot
c
createArgument
setLine
cvsRoot
protected
void
removeCommandline
Commandline
c
vecCommandlines
removeElement
c
public
void
addConfiguredCommandline
Commandline
c
this
addConfiguredCommandline
c
public
void
addConfiguredCommandline
Commandline
c
boolean
insertAtStart
if
c
return
this
configureCommandline
c
if
insertAtStart
vecCommandlines
insertElementAt
c
else
vecCommandlines
addElement
c
public
void
setCompressionLevel
int
level
this
compression
level
public
void
setCompression
boolean
usecomp
setCompressionLevel
usecomp
AbstractCvsTask
DEFAULT_COMPRESSION_LEVEL
