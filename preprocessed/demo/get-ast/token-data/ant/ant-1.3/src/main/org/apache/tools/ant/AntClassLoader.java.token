package
org
apache
tools
ant
import
java
lang
reflect
import
java
util
import
java
util
zip
import
java
io
import
org
apache
tools
ant
types
Path
public
class
AntClassLoader
extends
ClassLoader
static
private
final
int
BUFFER_SIZE
private
Path
classpath
private
Project
project
private
boolean
systemFirst
private
Vector
systemPackages
new
Vector
private
Vector
loaderPackages
new
Vector
private
boolean
ignoreBase
private
static
Method
getProtectionDomain
private
static
Method
defineClassProtectionDomain
static
try
getProtectionDomain
Class
class
getMethod
new
Class
Class
protectionDomain
Class
forName
Class
args
new
Class
String
class
byte
class
Integer
TYPE
Integer
TYPE
protectionDomain
defineClassProtectionDomain
ClassLoader
class
getDeclaredMethod
args
catch
Exception
e
public
AntClassLoader
Project
project
Path
classpath
this
project
project
this
classpath
classpath
concatSystemClasspath
addSystemPackageRoot
addSystemPackageRoot
public
AntClassLoader
Project
project
Path
classpath
boolean
systemFirst
this
project
classpath
this
systemFirst
systemFirst
public
void
setIsolated
boolean
isolated
ignoreBase
isolated
public
void
addSystemPackageRoot
String
packageRoot
systemPackages
addElement
packageRoot
public
void
addLoaderPackageRoot
String
packageRoot
loaderPackages
addElement
packageRoot
public
Class
forceLoadClass
String
classname
throws
ClassNotFoundException
project
log
classname
Project
MSG_DEBUG
Class
theClass
findLoadedClass
classname
if
theClass
theClass
findClass
classname
return
theClass
public
Class
forceLoadSystemClass
String
classname
throws
ClassNotFoundException
project
log
classname
Project
MSG_DEBUG
Class
theClass
findLoadedClass
classname
if
theClass
theClass
findBaseClass
classname
return
theClass
public
InputStream
getResourceAsStream
String
name
InputStream
stream
String
pathElements
classpath
list
for
int
i
i
pathElements
length
stream
i
File
pathComponent
project
resolveFile
String
pathElements
i
stream
getResourceStream
pathComponent
name
return
stream
private
InputStream
getResourceStream
File
file
String
resourceName
try
if
file
exists
return
if
file
isDirectory
File
resource
new
File
file
resourceName
if
resource
exists
return
new
FileInputStream
resource
else
ZipFile
zipFile
try
zipFile
new
ZipFile
file
ZipEntry
entry
zipFile
getEntry
resourceName
if
entry
ByteArrayOutputStream
baos
new
ByteArrayOutputStream
byte
buffer
new
byte
BUFFER_SIZE
int
bytesRead
InputStream
stream
zipFile
getInputStream
entry
while
bytesRead
stream
read
buffer
BUFFER_SIZE
baos
write
buffer
bytesRead
return
new
ByteArrayInputStream
baos
toByteArray
finally
if
zipFile
zipFile
close
catch
Exception
e
e
printStackTrace
return
protected
Class
loadClass
String
classname
boolean
resolve
throws
ClassNotFoundException
boolean
useSystemFirst
systemFirst
for
Enumeration
e
systemPackages
elements
e
hasMoreElements
String
packageName
String
e
nextElement
if
classname
startsWith
packageName
useSystemFirst
break
for
Enumeration
e
loaderPackages
elements
e
hasMoreElements
String
packageName
String
e
nextElement
if
classname
startsWith
packageName
useSystemFirst
break
Class
theClass
findLoadedClass
classname
if
theClass
if
useSystemFirst
try
theClass
findBaseClass
classname
project
log
classname
Project
MSG_DEBUG
catch
ClassNotFoundException
cnfe
theClass
findClass
classname
project
log
classname
Project
MSG_DEBUG
else
try
theClass
findClass
classname
project
log
classname
Project
MSG_DEBUG
catch
ClassNotFoundException
cnfe
if
ignoreBase
throw
cnfe
theClass
findBaseClass
classname
project
log
classname
Project
MSG_DEBUG
if
resolve
resolveClass
theClass
return
theClass
private
String
getClassFilename
String
classname
return
classname
replace
private
Class
getClassFromStream
InputStream
stream
String
classname
throws
IOException
ByteArrayOutputStream
baos
new
ByteArrayOutputStream
int
bytesRead
byte
buffer
new
byte
while
bytesRead
stream
read
buffer
baos
write
buffer
bytesRead
byte
classData
baos
toByteArray
if
defineClassProtectionDomain
try
Object
domain
getProtectionDomain
invoke
Project
class
new
Object
Object
args
new
Object
classname
classData
new
Integer
new
Integer
classData
length
domain
return
Class
defineClassProtectionDomain
invoke
this
args
catch
InvocationTargetException
ite
Throwable
t
ite
getTargetException
if
t
instanceof
ClassFormatError
throw
ClassFormatError
t
else
throw
new
IOException
t
toString
catch
Exception
e
throw
new
IOException
e
toString
else
return
defineClass
classname
classData
classData
length
public
Class
findClass
String
name
throws
ClassNotFoundException
project
log
name
Project
MSG_DEBUG
try
return
findClass
name
classpath
catch
ClassNotFoundException
e
throw
e
private
Class
findClass
String
name
Path
path
throws
ClassNotFoundException
InputStream
stream
String
classFilename
getClassFilename
name
try
String
pathElements
path
list
for
int
i
i
pathElements
length
stream
i
File
pathComponent
project
resolveFile
String
pathElements
i
stream
getResourceStream
pathComponent
classFilename
if
stream
throw
new
ClassNotFoundException
return
getClassFromStream
stream
name
catch
IOException
ioe
ioe
printStackTrace
throw
new
ClassNotFoundException
finally
try
if
stream
stream
close
catch
IOException
e
private
Class
findBaseClass
String
name
throws
ClassNotFoundException
ClassLoader
base
AntClassLoader
class
getClassLoader
if
base
return
findSystemClass
name
else
return
base
loadClass
name
