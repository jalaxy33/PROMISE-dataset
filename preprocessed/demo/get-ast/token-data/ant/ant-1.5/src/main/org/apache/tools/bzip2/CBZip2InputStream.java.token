package
org
apache
tools
bzip2
import
java
io
InputStream
import
java
io
IOException
public
class
CBZip2InputStream
extends
InputStream
implements
BZip2Constants
private
static
void
cadvise
System
out
println
private
static
void
badBGLengths
cadvise
private
static
void
bitStreamEOF
cadvise
private
static
void
compressedStreamEOF
cadvise
private
void
makeMaps
int
i
nInUse
for
i
i
i
if
inUse
i
seqToUnseq
nInUse
char
i
unseqToSeq
i
char
nInUse
nInUse
private
int
last
private
int
origPtr
private
int
blockSize100k
private
boolean
blockRandomised
private
int
bytesIn
private
int
bytesOut
private
int
bsBuff
private
int
bsLive
private
CRC
mCrc
new
CRC
private
boolean
inUse
new
boolean
private
int
nInUse
private
char
seqToUnseq
new
char
private
char
unseqToSeq
new
char
private
char
selector
new
char
MAX_SELECTORS
private
char
selectorMtf
new
char
MAX_SELECTORS
private
int
tt
private
char
ll8
private
int
unzftab
new
int
private
int
limit
new
int
N_GROUPS
MAX_ALPHA_SIZE
private
int
base
new
int
N_GROUPS
MAX_ALPHA_SIZE
private
int
perm
new
int
N_GROUPS
MAX_ALPHA_SIZE
private
int
minLens
new
int
N_GROUPS
private
InputStream
bsStream
private
boolean
streamEnd
private
int
currentChar
private
static
final
int
START_BLOCK_STATE
private
static
final
int
RAND_PART_A_STATE
private
static
final
int
RAND_PART_B_STATE
private
static
final
int
RAND_PART_C_STATE
private
static
final
int
NO_RAND_PART_A_STATE
private
static
final
int
NO_RAND_PART_B_STATE
private
static
final
int
NO_RAND_PART_C_STATE
private
int
currentState
START_BLOCK_STATE
private
int
storedBlockCRC
storedCombinedCRC
private
int
computedBlockCRC
computedCombinedCRC
int
i2
count
chPrev
ch2
int
i
tPos
int
rNToGo
int
rTPos
int
j2
char
z
public
CBZip2InputStream
InputStream
zStream
ll8
tt
bsSetStream
zStream
initialize
initBlock
setupBlock
public
int
read
if
streamEnd
return
else
int
retChar
currentChar
switch
currentState
case
START_BLOCK_STATE
break
case
RAND_PART_A_STATE
break
case
RAND_PART_B_STATE
setupRandPartB
break
case
RAND_PART_C_STATE
setupRandPartC
break
case
NO_RAND_PART_A_STATE
break
case
NO_RAND_PART_B_STATE
setupNoRandPartB
break
case
NO_RAND_PART_C_STATE
setupNoRandPartC
break
default
break
return
retChar
private
void
initialize
char
magic3
magic4
magic3
bsGetUChar
magic4
bsGetUChar
if
magic3
magic4
magic4
bsFinishedWithStream
streamEnd
return
setDecompressStructureSizes
magic4
computedCombinedCRC
private
void
initBlock
char
magic1
magic2
magic3
magic4
char
magic5
magic6
magic1
bsGetUChar
magic2
bsGetUChar
magic3
bsGetUChar
magic4
bsGetUChar
magic5
bsGetUChar
magic6
bsGetUChar
if
magic1
magic2
magic3
magic4
magic5
magic6
complete
return
if
magic1
magic2
magic3
magic4
magic5
magic6
badBlockHeader
streamEnd
return
storedBlockCRC
bsGetInt32
if
bsR
blockRandomised
else
blockRandomised
getAndMoveToFrontDecode
mCrc
initialiseCRC
currentState
START_BLOCK_STATE
private
void
endBlock
computedBlockCRC
mCrc
getFinalCRC
if
storedBlockCRC
computedBlockCRC
crcError
computedCombinedCRC
computedCombinedCRC
computedCombinedCRC
computedCombinedCRC
computedBlockCRC
private
void
complete
storedCombinedCRC
bsGetInt32
if
storedCombinedCRC
computedCombinedCRC
crcError
bsFinishedWithStream
streamEnd
private
static
void
blockOverrun
cadvise
private
static
void
badBlockHeader
cadvise
private
static
void
crcError
cadvise
private
void
bsFinishedWithStream
try
if
this
bsStream
if
this
bsStream
System
in
this
bsStream
close
this
bsStream
catch
IOException
ioe
private
void
bsSetStream
InputStream
f
bsStream
f
bsLive
bsBuff
bytesOut
bytesIn
private
int
bsR
int
n
int
v
while
bsLive
n
int
zzi
char
thech
try
thech
char
bsStream
read
catch
IOException
e
compressedStreamEOF
if
thech
compressedStreamEOF
zzi
thech
bsBuff
bsBuff
zzi
bsLive
v
bsBuff
bsLive
n
n
bsLive
n
return
v
private
char
bsGetUChar
return
char
bsR
private
int
bsGetint
int
u
u
u
bsR
u
u
bsR
u
u
bsR
u
u
bsR
return
u
private
int
bsGetIntVS
int
numBits
return
int
bsR
numBits
private
int
bsGetInt32
return
int
bsGetint
private
void
hbCreateDecodeTables
int
limit
int
base
int
perm
char
length
int
minLen
int
maxLen
int
alphaSize
int
pp
i
j
vec
pp
for
i
minLen
i
maxLen
i
for
j
j
alphaSize
j
if
length
j
i
perm
pp
j
pp
for
i
i
MAX_CODE_LEN
i
base
i
for
i
i
alphaSize
i
base
length
i
for
i
i
MAX_CODE_LEN
i
base
i
base
i
for
i
i
MAX_CODE_LEN
i
limit
i
vec
for
i
minLen
i
maxLen
i
vec
base
i
base
i
limit
i
vec
vec
for
i
minLen
i
maxLen
i
base
i
limit
i
base
i
private
void
recvDecodingTables
char
len
new
char
N_GROUPS
MAX_ALPHA_SIZE
int
i
j
t
nGroups
nSelectors
alphaSize
int
minLen
maxLen
boolean
inUse16
new
boolean
for
i
i
i
if
bsR
inUse16
i
else
inUse16
i
for
i
i
i
inUse
i
for
i
i
i
if
inUse16
i
for
j
j
j
if
bsR
inUse
i
j
makeMaps
alphaSize
nInUse
nGroups
bsR
nSelectors
bsR
for
i
i
nSelectors
i
j
while
bsR
j
selectorMtf
i
char
j
char
pos
new
char
N_GROUPS
char
tmp
v
for
v
v
nGroups
v
pos
v
v
for
i
i
nSelectors
i
v
selectorMtf
i
tmp
pos
v
while
v
pos
v
pos
v
v
pos
tmp
selector
i
tmp
for
t
t
nGroups
t
int
curr
bsR
for
i
i
alphaSize
i
while
bsR
if
bsR
curr
else
curr
len
t
i
char
curr
for
t
t
nGroups
t
minLen
maxLen
for
i
i
alphaSize
i
if
len
t
i
maxLen
maxLen
len
t
i
if
len
t
i
minLen
minLen
len
t
i
hbCreateDecodeTables
limit
t
base
t
perm
t
len
t
minLen
maxLen
alphaSize
minLens
t
minLen
private
void
getAndMoveToFrontDecode
char
yy
new
char
int
i
j
nextSym
limitLast
int
EOB
groupNo
groupPos
limitLast
baseBlockSize
blockSize100k
origPtr
bsGetIntVS
recvDecodingTables
EOB
nInUse
groupNo
groupPos
for
i
i
i
unzftab
i
for
i
i
i
yy
i
char
i
last
int
zt
zn
zvec
zj
if
groupPos
groupNo
groupPos
G_SIZE
groupPos
zt
selector
groupNo
zn
minLens
zt
zvec
bsR
zn
while
zvec
limit
zt
zn
zn
while
bsLive
int
zzi
char
thech
try
thech
char
bsStream
read
catch
IOException
e
compressedStreamEOF
if
thech
compressedStreamEOF
zzi
thech
bsBuff
bsBuff
zzi
bsLive
zj
bsBuff
bsLive
bsLive
zvec
zvec
zj
nextSym
perm
zt
zvec
base
zt
zn
while
if
nextSym
EOB
break
if
nextSym
RUNA
nextSym
RUNB
char
ch
int
s
int
N
do
if
nextSym
RUNA
s
s
N
else
if
nextSym
RUNB
s
s
N
N
N
int
zt
zn
zvec
zj
if
groupPos
groupNo
groupPos
G_SIZE
groupPos
zt
selector
groupNo
zn
minLens
zt
zvec
bsR
zn
while
zvec
limit
zt
zn
zn
while
bsLive
int
zzi
char
thech
try
thech
char
bsStream
read
catch
IOException
e
compressedStreamEOF
if
thech
compressedStreamEOF
zzi
thech
bsBuff
bsBuff
zzi
bsLive
zj
bsBuff
bsLive
bsLive
zvec
zvec
zj
nextSym
perm
zt
zvec
base
zt
zn
while
nextSym
RUNA
nextSym
RUNB
s
ch
seqToUnseq
yy
unzftab
ch
s
while
s
last
ll8
last
ch
s
if
last
limitLast
blockOverrun
continue
else
char
tmp
last
if
last
limitLast
blockOverrun
tmp
yy
nextSym
unzftab
seqToUnseq
tmp
ll8
last
seqToUnseq
tmp
j
nextSym
for
j
j
yy
j
yy
j
yy
j
yy
j
yy
j
yy
j
yy
j
yy
j
for
j
j
yy
j
yy
j
yy
tmp
int
zt
zn
zvec
zj
if
groupPos
groupNo
groupPos
G_SIZE
groupPos
zt
selector
groupNo
zn
minLens
zt
zvec
bsR
zn
while
zvec
limit
zt
zn
zn
while
bsLive
int
zzi
char
thech
try
thech
char
bsStream
read
catch
IOException
e
compressedStreamEOF
zzi
thech
bsBuff
bsBuff
zzi
bsLive
zj
bsBuff
bsLive
bsLive
zvec
zvec
zj
nextSym
perm
zt
zvec
base
zt
zn
continue
private
void
setupBlock
int
cftab
new
int
char
ch
cftab
for
i
i
i
cftab
i
unzftab
i
for
i
i
i
cftab
i
cftab
i
for
i
i
last
i
ch
char
ll8
i
tt
cftab
ch
i
cftab
ch
cftab
tPos
tt
origPtr
count
i2
ch2
if
blockRandomised
rNToGo
rTPos
setupRandPartA
else
setupNoRandPartA
private
void
setupRandPartA
if
i2
last
chPrev
ch2
ch2
ll8
tPos
tPos
tt
tPos
if
rNToGo
rNToGo
rNums
rTPos
rTPos
if
rTPos
rTPos
rNToGo
ch2
int
rNToGo
i2
currentChar
ch2
currentState
RAND_PART_B_STATE
mCrc
updateCRC
ch2
else
endBlock
initBlock
setupBlock
private
void
setupNoRandPartA
if
i2
last
chPrev
ch2
ch2
ll8
tPos
tPos
tt
tPos
i2
currentChar
ch2
currentState
NO_RAND_PART_B_STATE
mCrc
updateCRC
ch2
else
endBlock
initBlock
setupBlock
private
void
setupRandPartB
if
ch2
chPrev
currentState
RAND_PART_A_STATE
count
setupRandPartA
else
count
if
count
z
ll8
tPos
tPos
tt
tPos
if
rNToGo
rNToGo
rNums
rTPos
rTPos
if
rTPos
rTPos
rNToGo
z
rNToGo
j2
currentState
RAND_PART_C_STATE
setupRandPartC
else
currentState
RAND_PART_A_STATE
setupRandPartA
private
void
setupRandPartC
if
j2
int
z
currentChar
ch2
mCrc
updateCRC
ch2
j2
else
currentState
RAND_PART_A_STATE
i2
count
setupRandPartA
private
void
setupNoRandPartB
if
ch2
chPrev
currentState
NO_RAND_PART_A_STATE
count
setupNoRandPartA
else
count
if
count
z
ll8
tPos
tPos
tt
tPos
currentState
NO_RAND_PART_C_STATE
j2
setupNoRandPartC
else
currentState
NO_RAND_PART_A_STATE
setupNoRandPartA
private
void
setupNoRandPartC
if
j2
int
z
currentChar
ch2
mCrc
updateCRC
ch2
j2
else
currentState
NO_RAND_PART_A_STATE
i2
count
setupNoRandPartA
private
void
setDecompressStructureSizes
int
newSize100k
if
newSize100k
newSize100k
blockSize100k
blockSize100k
blockSize100k
newSize100k
if
newSize100k
return
int
n
baseBlockSize
newSize100k
ll8
new
char
n
tt
new
int
n
