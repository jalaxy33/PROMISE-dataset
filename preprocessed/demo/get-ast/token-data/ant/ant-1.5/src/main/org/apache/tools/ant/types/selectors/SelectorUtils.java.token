package
org
apache
tools
ant
types
selectors
import
java
io
File
import
java
util
StringTokenizer
import
java
util
Vector
import
org
apache
tools
ant
BuildException
public
final
class
SelectorUtils
private
static
SelectorUtils
instance
new
SelectorUtils
private
SelectorUtils
public
static
SelectorUtils
getInstance
return
instance
public
static
boolean
matchPatternStart
String
pattern
String
str
return
matchPatternStart
pattern
str
public
static
boolean
matchPatternStart
String
pattern
String
str
boolean
isCaseSensitive
if
str
startsWith
File
separator
pattern
startsWith
File
separator
return
Vector
patDirs
tokenizePath
pattern
Vector
strDirs
tokenizePath
str
int
patIdxStart
int
patIdxEnd
patDirs
size
int
strIdxStart
int
strIdxEnd
strDirs
size
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
String
patDir
String
patDirs
elementAt
patIdxStart
if
patDir
equals
break
if
match
patDir
String
strDirs
elementAt
strIdxStart
isCaseSensitive
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
return
else
if
patIdxStart
patIdxEnd
return
else
return
public
static
boolean
matchPath
String
pattern
String
str
return
matchPath
pattern
str
public
static
boolean
matchPath
String
pattern
String
str
boolean
isCaseSensitive
if
str
startsWith
File
separator
pattern
startsWith
File
separator
return
Vector
patDirs
tokenizePath
pattern
Vector
strDirs
tokenizePath
str
int
patIdxStart
int
patIdxEnd
patDirs
size
int
strIdxStart
int
strIdxEnd
strDirs
size
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
String
patDir
String
patDirs
elementAt
patIdxStart
if
patDir
equals
break
if
match
patDir
String
strDirs
elementAt
strIdxStart
isCaseSensitive
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
elementAt
i
equals
return
return
else
if
patIdxStart
patIdxEnd
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
String
patDir
String
patDirs
elementAt
patIdxEnd
if
patDir
equals
break
if
match
patDir
String
strDirs
elementAt
strIdxEnd
isCaseSensitive
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
elementAt
i
equals
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
int
patIdxTmp
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
elementAt
i
equals
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
strLoop
for
int
i
i
strLength
patLength
i
for
int
j
j
patLength
j
String
subPat
String
patDirs
elementAt
patIdxStart
j
String
subStr
String
strDirs
elementAt
strIdxStart
i
j
if
match
subPat
subStr
isCaseSensitive
continue
strLoop
foundIdx
strIdxStart
i
break
if
foundIdx
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
int
i
patIdxStart
i
patIdxEnd
i
if
patDirs
elementAt
i
equals
return
return
public
static
boolean
match
String
pattern
String
str
return
match
pattern
str
public
static
boolean
match
String
pattern
String
str
boolean
isCaseSensitive
char
patArr
pattern
toCharArray
char
strArr
str
toCharArray
int
patIdxStart
int
patIdxEnd
patArr
length
int
strIdxStart
int
strIdxEnd
strArr
length
char
ch
boolean
containsStar
for
int
i
i
patArr
length
i
if
patArr
i
containsStar
break
if
containsStar
if
patIdxEnd
strIdxEnd
return
for
int
i
i
patIdxEnd
i
ch
patArr
i
if
ch
if
isCaseSensitive
ch
strArr
i
return
if
isCaseSensitive
Character
toUpperCase
ch
Character
toUpperCase
strArr
i
return
return
if
patIdxEnd
return
while
ch
patArr
patIdxStart
strIdxStart
strIdxEnd
if
ch
if
isCaseSensitive
ch
strArr
strIdxStart
return
if
isCaseSensitive
Character
toUpperCase
ch
Character
toUpperCase
strArr
strIdxStart
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
return
return
while
ch
patArr
patIdxEnd
strIdxStart
strIdxEnd
if
ch
if
isCaseSensitive
ch
strArr
strIdxEnd
return
if
isCaseSensitive
Character
toUpperCase
ch
Character
toUpperCase
strArr
strIdxEnd
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
int
patIdxTmp
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
strLoop
for
int
i
i
strLength
patLength
i
for
int
j
j
patLength
j
ch
patArr
patIdxStart
j
if
ch
if
isCaseSensitive
ch
strArr
strIdxStart
i
j
continue
strLoop
if
isCaseSensitive
Character
toUpperCase
ch
Character
toUpperCase
strArr
strIdxStart
i
j
continue
strLoop
foundIdx
strIdxStart
i
break
if
foundIdx
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
int
i
patIdxStart
i
patIdxEnd
i
if
patArr
i
return
return
public
static
Vector
tokenizePath
String
path
Vector
ret
new
Vector
StringTokenizer
st
new
StringTokenizer
path
File
separator
while
st
hasMoreTokens
ret
addElement
st
nextToken
return
ret
public
static
boolean
isOutOfDate
File
src
File
target
int
granularity
if
src
exists
return
if
target
exists
return
if
src
lastModified
granularity
target
lastModified
return
return
