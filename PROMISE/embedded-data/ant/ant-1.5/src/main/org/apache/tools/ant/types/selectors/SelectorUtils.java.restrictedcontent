SelectorUtils
SelectorUtils
instance
SelectorUtils
SelectorUtils
getInstance
SelectorUtils
return
instance
matchPatternStart
boolean
pattern
String
str
String
return
matchPatternStart
pattern
str
matchPatternStart
boolean
pattern
String
str
String
isCaseSensitive
boolean
if
startsWith
separator
startsWith
separator
block
return
Vector
patDirs
tokenizePath
pattern
Vector
strDirs
tokenizePath
str
int
patIdxStart
int
patIdxEnd
size
int
strIdxStart
int
strIdxEnd
size
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
String
patDir
String
elementAt
patIdxStart
if
equals
block
break
if
match
patDir
String
elementAt
strIdxStart
isCaseSensitive
block
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
block
return
if
patIdxStart
patIdxEnd
block
return
block
return
matchPath
boolean
pattern
String
str
String
return
matchPath
pattern
str
matchPath
boolean
pattern
String
str
String
isCaseSensitive
boolean
if
startsWith
separator
startsWith
separator
block
return
Vector
patDirs
tokenizePath
pattern
Vector
strDirs
tokenizePath
str
int
patIdxStart
int
patIdxEnd
size
int
strIdxStart
int
strIdxEnd
size
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
String
patDir
String
elementAt
patIdxStart
if
equals
block
break
if
match
patDir
String
elementAt
strIdxStart
isCaseSensitive
block
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
block
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
elementAt
equals
i
block
return
return
block
if
patIdxStart
patIdxEnd
block
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
String
patDir
String
elementAt
patIdxEnd
if
equals
block
break
if
match
patDir
String
elementAt
strIdxEnd
isCaseSensitive
block
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
block
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
elementAt
equals
i
block
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
int
patIdxTmp
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
elementAt
equals
i
block
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
block
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
for
forControl
int
i
i
strLength
patLength
i
block
for
forControl
int
j
j
patLength
j
block
String
subPat
String
elementAt
patIdxStart
j
String
subStr
String
elementAt
strIdxStart
i
j
if
match
subPat
subStr
isCaseSensitive
block
continue
foundIdx
strIdxStart
i
break
if
foundIdx
block
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
elementAt
equals
i
block
return
return
match
boolean
pattern
String
str
String
return
match
pattern
str
match
boolean
pattern
String
str
String
isCaseSensitive
boolean
char
patArr
toCharArray
char
strArr
toCharArray
int
patIdxStart
int
patIdxEnd
length
int
strIdxStart
int
strIdxEnd
length
char
ch
boolean
containsStar
for
forControl
int
i
i
length
i
block
if
patArr
i
block
containsStar
break
if
containsStar
block
if
patIdxEnd
strIdxEnd
block
return
for
forControl
int
i
i
patIdxEnd
i
block
ch
patArr
i
if
ch
block
if
isCaseSensitive
ch
strArr
i
block
return
if
isCaseSensitive
toUpperCase
ch
toUpperCase
strArr
i
block
return
return
if
patIdxEnd
block
return
while
ch
patArr
patIdxStart
strIdxStart
strIdxEnd
block
if
ch
block
if
isCaseSensitive
ch
strArr
strIdxStart
block
return
if
isCaseSensitive
toUpperCase
ch
toUpperCase
strArr
strIdxStart
block
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
block
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patArr
i
block
return
return
while
ch
patArr
patIdxEnd
strIdxStart
strIdxEnd
block
if
ch
block
if
isCaseSensitive
ch
strArr
strIdxEnd
block
return
if
isCaseSensitive
toUpperCase
ch
toUpperCase
strArr
strIdxEnd
block
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
block
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patArr
i
block
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
int
patIdxTmp
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patArr
i
block
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
block
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
for
forControl
int
i
i
strLength
patLength
i
block
for
forControl
int
j
j
patLength
j
block
ch
patArr
patIdxStart
j
if
ch
block
if
isCaseSensitive
ch
strArr
strIdxStart
i
j
block
continue
if
isCaseSensitive
toUpperCase
ch
toUpperCase
strArr
strIdxStart
i
j
block
continue
foundIdx
strIdxStart
i
break
if
foundIdx
block
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patArr
i
block
return
return
tokenizePath
Vector
path
String
Vector
ret
Vector
StringTokenizer
st
StringTokenizer
path
separator
while
hasMoreTokens
block
addElement
nextToken
return
ret
isOutOfDate
boolean
src
File
target
File
granularity
int
if
exists
block
return
if
exists
block
return
if
lastModified
granularity
lastModified
block
return
return
