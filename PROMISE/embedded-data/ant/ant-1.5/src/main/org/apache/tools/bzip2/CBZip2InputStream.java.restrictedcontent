CBZip2InputStream
cadvise
println
badBGLengths
cadvise
bitStreamEOF
cadvise
compressedStreamEOF
cadvise
makeMaps
int
i
nInUse
for
forControl
i
i
i
block
if
inUse
i
block
seqToUnseq
nInUse
char
i
unseqToSeq
i
char
nInUse
nInUse
int
last
int
origPtr
int
blockSize100k
boolean
blockRandomised
int
bytesIn
int
bytesOut
int
bsBuff
int
bsLive
CRC
mCrc
CRC
boolean
inUse
boolean
int
nInUse
char
seqToUnseq
char
char
unseqToSeq
char
char
selector
char
MAX_SELECTORS
char
selectorMtf
char
MAX_SELECTORS
int
tt
char
ll8
int
unzftab
int
int
limit
int
N_GROUPS
MAX_ALPHA_SIZE
int
base
int
N_GROUPS
MAX_ALPHA_SIZE
int
perm
int
N_GROUPS
MAX_ALPHA_SIZE
int
minLens
int
N_GROUPS
InputStream
bsStream
boolean
streamEnd
int
currentChar
int
START_BLOCK_STATE
int
RAND_PART_A_STATE
int
RAND_PART_B_STATE
int
RAND_PART_C_STATE
int
NO_RAND_PART_A_STATE
int
NO_RAND_PART_B_STATE
int
NO_RAND_PART_C_STATE
int
currentState
START_BLOCK_STATE
int
storedBlockCRC
storedCombinedCRC
int
computedBlockCRC
computedCombinedCRC
int
i2
count
chPrev
ch2
int
i
tPos
int
rNToGo
int
rTPos
int
j2
char
z
CBZip2InputStream
zStream
InputStream
ll8
tt
bsSetStream
zStream
initialize
initBlock
setupBlock
read
int
if
streamEnd
block
return
block
int
retChar
currentChar
switch
currentState
case
break
case
break
case
setupRandPartB
break
case
setupRandPartC
break
case
break
case
setupNoRandPartB
break
case
setupNoRandPartC
break
case
break
return
retChar
initialize
char
magic3
magic4
magic3
bsGetUChar
magic4
bsGetUChar
if
magic3
magic4
magic4
block
bsFinishedWithStream
streamEnd
return
setDecompressStructureSizes
magic4
computedCombinedCRC
initBlock
char
magic1
magic2
magic3
magic4
char
magic5
magic6
magic1
bsGetUChar
magic2
bsGetUChar
magic3
bsGetUChar
magic4
bsGetUChar
magic5
bsGetUChar
magic6
bsGetUChar
if
magic1
magic2
magic3
magic4
magic5
magic6
block
complete
return
if
magic1
magic2
magic3
magic4
magic5
magic6
block
badBlockHeader
streamEnd
return
storedBlockCRC
bsGetInt32
if
bsR
block
blockRandomised
block
blockRandomised
getAndMoveToFrontDecode
initialiseCRC
currentState
START_BLOCK_STATE
endBlock
computedBlockCRC
getFinalCRC
if
storedBlockCRC
computedBlockCRC
block
crcError
computedCombinedCRC
computedCombinedCRC
computedCombinedCRC
computedCombinedCRC
computedBlockCRC
complete
storedCombinedCRC
bsGetInt32
if
storedCombinedCRC
computedCombinedCRC
block
crcError
bsFinishedWithStream
streamEnd
blockOverrun
cadvise
badBlockHeader
cadvise
crcError
cadvise
bsFinishedWithStream
try
if
bsStream
block
if
bsStream
in
block
bsStream
close
bsStream
catchClause
ioe
bsSetStream
f
InputStream
bsStream
f
bsLive
bsBuff
bytesOut
bytesIn
bsR
int
n
int
int
v
block
while
bsLive
n
block
int
zzi
char
thech
try
thech
char
read
catchClause
e
compressedStreamEOF
if
thech
block
compressedStreamEOF
zzi
thech
bsBuff
bsBuff
zzi
bsLive
v
bsBuff
bsLive
n
n
bsLive
n
return
v
bsGetUChar
char
return
char
bsR
bsGetint
int
int
u
u
u
bsR
u
u
bsR
u
u
bsR
u
u
bsR
return
u
bsGetIntVS
int
numBits
int
return
int
bsR
numBits
bsGetInt32
int
return
int
bsGetint
hbCreateDecodeTables
limit
int
base
int
perm
int
length
char
minLen
int
maxLen
int
alphaSize
int
int
pp
i
j
vec
pp
for
forControl
i
minLen
i
maxLen
i
block
for
forControl
j
j
alphaSize
j
block
if
length
j
i
block
perm
pp
j
pp
for
forControl
i
i
MAX_CODE_LEN
i
block
base
i
for
forControl
i
i
alphaSize
i
block
base
length
i
for
forControl
i
i
MAX_CODE_LEN
i
block
base
i
base
i
for
forControl
i
i
MAX_CODE_LEN
i
block
limit
i
vec
for
forControl
i
minLen
i
maxLen
i
block
vec
base
i
base
i
limit
i
vec
vec
for
forControl
i
minLen
i
maxLen
i
block
base
i
limit
i
base
i
recvDecodingTables
char
len
char
N_GROUPS
MAX_ALPHA_SIZE
int
i
j
t
nGroups
nSelectors
alphaSize
int
minLen
maxLen
boolean
inUse16
boolean
for
forControl
i
i
i
block
if
bsR
block
inUse16
i
block
inUse16
i
for
forControl
i
i
i
block
inUse
i
for
forControl
i
i
i
block
if
inUse16
i
block
for
forControl
j
j
j
block
if
bsR
block
inUse
i
j
makeMaps
alphaSize
nInUse
nGroups
bsR
nSelectors
bsR
for
forControl
i
i
nSelectors
i
block
j
while
bsR
block
j
selectorMtf
i
char
j
block
char
pos
char
N_GROUPS
char
tmp
v
for
forControl
v
v
nGroups
v
block
pos
v
v
for
forControl
i
i
nSelectors
i
block
v
selectorMtf
i
tmp
pos
v
while
v
block
pos
v
pos
v
v
pos
tmp
selector
i
tmp
for
forControl
t
t
nGroups
t
block
int
curr
bsR
for
forControl
i
i
alphaSize
i
block
while
bsR
block
if
bsR
block
curr
block
curr
len
t
i
char
curr
for
forControl
t
t
nGroups
t
block
minLen
maxLen
for
forControl
i
i
alphaSize
i
block
if
len
t
i
maxLen
block
maxLen
len
t
i
if
len
t
i
minLen
block
minLen
len
t
i
hbCreateDecodeTables
limit
t
base
t
perm
t
len
t
minLen
maxLen
alphaSize
minLens
t
minLen
getAndMoveToFrontDecode
char
yy
char
int
i
j
nextSym
limitLast
int
EOB
groupNo
groupPos
limitLast
baseBlockSize
blockSize100k
origPtr
bsGetIntVS
recvDecodingTables
EOB
nInUse
groupNo
groupPos
for
forControl
i
i
i
block
unzftab
i
for
forControl
i
i
i
block
yy
i
char
i
last
block
int
zt
zn
zvec
zj
if
groupPos
block
groupNo
groupPos
G_SIZE
groupPos
zt
selector
groupNo
zn
minLens
zt
zvec
bsR
zn
while
zvec
limit
zt
zn
block
zn
block
block
while
bsLive
block
int
zzi
char
thech
try
thech
char
read
catchClause
e
compressedStreamEOF
if
thech
block
compressedStreamEOF
zzi
thech
bsBuff
bsBuff
zzi
bsLive
zj
bsBuff
bsLive
bsLive
zvec
zvec
zj
nextSym
perm
zt
zvec
base
zt
zn
while
block
if
nextSym
EOB
block
break
if
nextSym
RUNA
nextSym
RUNB
block
char
ch
int
s
int
N
do
nextSym
RUNA
nextSym
RUNB
block
if
nextSym
RUNA
block
s
s
N
if
nextSym
RUNB
block
s
s
N
N
N
block
int
zt
zn
zvec
zj
if
groupPos
block
groupNo
groupPos
G_SIZE
groupPos
zt
selector
groupNo
zn
minLens
zt
zvec
bsR
zn
while
zvec
limit
zt
zn
block
zn
block
block
while
bsLive
block
int
zzi
char
thech
try
thech
char
read
catchClause
e
compressedStreamEOF
if
thech
block
compressedStreamEOF
zzi
thech
bsBuff
bsBuff
zzi
bsLive
zj
bsBuff
bsLive
bsLive
zvec
zvec
zj
nextSym
perm
zt
zvec
base
zt
zn
s
ch
seqToUnseq
yy
unzftab
ch
s
while
s
block
last
ll8
last
ch
s
if
last
limitLast
block
blockOverrun
continue
block
char
tmp
last
if
last
limitLast
block
blockOverrun
tmp
yy
nextSym
unzftab
seqToUnseq
tmp
ll8
last
seqToUnseq
tmp
j
nextSym
for
forControl
j
j
block
yy
j
yy
j
yy
j
yy
j
yy
j
yy
j
yy
j
yy
j
for
forControl
j
j
block
yy
j
yy
j
yy
tmp
block
int
zt
zn
zvec
zj
if
groupPos
block
groupNo
groupPos
G_SIZE
groupPos
zt
selector
groupNo
zn
minLens
zt
zvec
bsR
zn
while
zvec
limit
zt
zn
block
zn
block
block
while
bsLive
block
int
zzi
char
thech
try
thech
char
read
catchClause
e
compressedStreamEOF
zzi
thech
bsBuff
bsBuff
zzi
bsLive
zj
bsBuff
bsLive
bsLive
zvec
zvec
zj
nextSym
perm
zt
zvec
base
zt
zn
continue
setupBlock
int
cftab
int
char
ch
cftab
for
forControl
i
i
i
block
cftab
i
unzftab
i
for
forControl
i
i
i
block
cftab
i
cftab
i
for
forControl
i
i
last
i
block
ch
char
ll8
i
tt
cftab
ch
i
cftab
ch
cftab
tPos
tt
origPtr
count
i2
ch2
if
blockRandomised
block
rNToGo
rTPos
setupRandPartA
block
setupNoRandPartA
setupRandPartA
if
i2
last
block
chPrev
ch2
ch2
ll8
tPos
tPos
tt
tPos
if
rNToGo
block
rNToGo
rNums
rTPos
rTPos
if
rTPos
block
rTPos
rNToGo
ch2
int
rNToGo
i2
currentChar
ch2
currentState
RAND_PART_B_STATE
updateCRC
ch2
block
endBlock
initBlock
setupBlock
setupNoRandPartA
if
i2
last
block
chPrev
ch2
ch2
ll8
tPos
tPos
tt
tPos
i2
currentChar
ch2
currentState
NO_RAND_PART_B_STATE
updateCRC
ch2
block
endBlock
initBlock
setupBlock
setupRandPartB
if
ch2
chPrev
block
currentState
RAND_PART_A_STATE
count
setupRandPartA
block
count
if
count
block
z
ll8
tPos
tPos
tt
tPos
if
rNToGo
block
rNToGo
rNums
rTPos
rTPos
if
rTPos
block
rTPos
rNToGo
z
rNToGo
j2
currentState
RAND_PART_C_STATE
setupRandPartC
block
currentState
RAND_PART_A_STATE
setupRandPartA
setupRandPartC
if
j2
int
z
block
currentChar
ch2
updateCRC
ch2
j2
block
currentState
RAND_PART_A_STATE
i2
count
setupRandPartA
setupNoRandPartB
if
ch2
chPrev
block
currentState
NO_RAND_PART_A_STATE
count
setupNoRandPartA
block
count
if
count
block
z
ll8
tPos
tPos
tt
tPos
currentState
NO_RAND_PART_C_STATE
j2
setupNoRandPartC
block
currentState
NO_RAND_PART_A_STATE
setupNoRandPartA
setupNoRandPartC
if
j2
int
z
block
currentChar
ch2
updateCRC
ch2
j2
block
currentState
NO_RAND_PART_A_STATE
i2
count
setupNoRandPartA
setDecompressStructureSizes
newSize100k
int
if
newSize100k
newSize100k
blockSize100k
blockSize100k
block
blockSize100k
newSize100k
if
newSize100k
block
return
int
n
baseBlockSize
newSize100k
ll8
char
n
tt
int
n
InputStream
BZip2Constants
