CBZip2OutputStream
int
SETMASK
int
CLEARMASK
SETMASK
int
GREATER_ICOST
int
LESSER_ICOST
int
SMALL_THRESH
int
DEPTH_THRESH
int
QSORT_STACK_SIZE
panic
println
makeMaps
int
i
nInUse
for
forControl
i
i
i
block
if
inUse
i
block
seqToUnseq
nInUse
char
i
unseqToSeq
i
char
nInUse
nInUse
hbMakeCodeLengths
len
char
freq
int
alphaSize
int
maxLen
int
int
nNodes
nHeap
n1
n2
i
j
k
boolean
tooLong
int
heap
int
MAX_ALPHA_SIZE
int
weight
int
MAX_ALPHA_SIZE
int
parent
int
MAX_ALPHA_SIZE
for
forControl
i
i
alphaSize
i
block
weight
i
freq
i
freq
i
while
block
nNodes
alphaSize
nHeap
heap
weight
parent
for
forControl
i
i
alphaSize
i
block
parent
i
nHeap
heap
nHeap
i
block
int
zz
tmp
zz
nHeap
tmp
heap
zz
while
weight
tmp
weight
heap
zz
block
heap
zz
heap
zz
zz
heap
zz
tmp
if
nHeap
MAX_ALPHA_SIZE
block
panic
while
nHeap
block
n1
heap
heap
heap
nHeap
nHeap
block
int
zz
yy
tmp
zz
tmp
heap
zz
while
block
yy
zz
if
yy
nHeap
block
break
if
yy
nHeap
weight
heap
yy
weight
heap
yy
block
yy
if
weight
tmp
weight
heap
yy
block
break
heap
zz
heap
yy
zz
yy
heap
zz
tmp
n2
heap
heap
heap
nHeap
nHeap
block
int
zz
yy
tmp
zz
tmp
heap
zz
while
block
yy
zz
if
yy
nHeap
block
break
if
yy
nHeap
weight
heap
yy
weight
heap
yy
block
yy
if
weight
tmp
weight
heap
yy
block
break
heap
zz
heap
yy
zz
yy
heap
zz
tmp
nNodes
parent
n1
parent
n2
nNodes
weight
nNodes
weight
n1
weight
n2
weight
n1
weight
n2
weight
n1
weight
n2
parent
nNodes
nHeap
heap
nHeap
nNodes
block
int
zz
tmp
zz
nHeap
tmp
heap
zz
while
weight
tmp
weight
heap
zz
block
heap
zz
heap
zz
zz
heap
zz
tmp
if
nNodes
MAX_ALPHA_SIZE
block
panic
tooLong
for
forControl
i
i
alphaSize
i
block
j
k
i
while
parent
k
block
k
parent
k
j
len
i
char
j
if
j
maxLen
block
tooLong
if
tooLong
block
break
for
forControl
i
i
alphaSize
i
block
j
weight
i
j
j
weight
i
j
int
last
int
origPtr
int
blockSize100k
boolean
blockRandomised
int
bytesOut
int
bsBuff
int
bsLive
CRC
mCrc
CRC
boolean
inUse
boolean
int
nInUse
char
seqToUnseq
char
char
unseqToSeq
char
char
selector
char
MAX_SELECTORS
char
selectorMtf
char
MAX_SELECTORS
char
block
int
quadrant
int
zptr
short
szptr
int
ftab
int
nMTF
int
mtfFreq
int
MAX_ALPHA_SIZE
int
workFactor
int
workDone
int
workLimit
boolean
firstAttempt
int
nBlocksRandomised
int
currentChar
int
runLength
CBZip2OutputStream
inStream
OutputStream
inStream
CBZip2OutputStream
inStream
OutputStream
inBlockSize
int
block
quadrant
zptr
ftab
bsSetStream
inStream
workFactor
if
inBlockSize
block
inBlockSize
if
inBlockSize
block
inBlockSize
blockSize100k
inBlockSize
allocateCompressStructures
initialize
initBlock
write
bv
int
int
b
bv
if
currentChar
block
if
currentChar
b
block
runLength
if
runLength
block
writeRun
currentChar
runLength
block
writeRun
runLength
currentChar
b
block
currentChar
b
runLength
writeRun
if
last
allowableBlockSize
block
inUse
currentChar
for
forControl
int
i
i
runLength
i
block
updateCRC
char
currentChar
switch
runLength
case
last
block
last
char
currentChar
break
case
last
block
last
char
currentChar
last
block
last
char
currentChar
break
case
last
block
last
char
currentChar
last
block
last
char
currentChar
last
block
last
char
currentChar
break
case
inUse
runLength
last
block
last
char
currentChar
last
block
last
char
currentChar
last
block
last
char
currentChar
last
block
last
char
currentChar
last
block
last
char
runLength
break
block
endBlock
initBlock
writeRun
boolean
closed
finalize
close
finalize
close
if
closed
block
return
if
runLength
block
writeRun
currentChar
endBlock
endCompression
closed
close
close
flush
flush
flush
int
blockCRC
combinedCRC
initialize
bytesOut
nBlocksRandomised
bsPutUChar
bsPutUChar
blockSize100k
combinedCRC
int
allowableBlockSize
initBlock
initialiseCRC
last
for
forControl
int
i
i
i
block
inUse
i
allowableBlockSize
baseBlockSize
blockSize100k
endBlock
blockCRC
getFinalCRC
combinedCRC
combinedCRC
combinedCRC
combinedCRC
blockCRC
doReversibleTransformation
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutint
blockCRC
if
blockRandomised
block
bsW
nBlocksRandomised
block
bsW
moveToFrontCodeAndSend
endCompression
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutUChar
bsPutint
combinedCRC
bsFinishedWithStream
hbAssignCodes
code
int
length
char
minLen
int
maxLen
int
alphaSize
int
int
n
vec
i
vec
for
forControl
n
minLen
n
maxLen
n
block
for
forControl
i
i
alphaSize
i
block
if
length
i
n
block
code
i
vec
vec
vec
bsSetStream
f
OutputStream
bsStream
f
bsLive
bsBuff
bytesOut
bsFinishedWithStream
while
bsLive
block
int
ch
bsBuff
try
write
ch
catchClause
e
throw
e
bsBuff
bsLive
bytesOut
bsW
n
int
v
int
while
bsLive
block
int
ch
bsBuff
try
write
ch
catchClause
e
throw
e
bsBuff
bsLive
bytesOut
bsBuff
v
bsLive
n
bsLive
n
bsPutUChar
c
int
bsW
c
bsPutint
u
int
bsW
u
bsW
u
bsW
u
bsW
u
bsPutIntVS
numBits
int
c
int
bsW
numBits
c
sendMTFValues
char
len
char
N_GROUPS
MAX_ALPHA_SIZE
int
v
t
i
j
gs
ge
totc
bt
bc
iter
int
nSelectors
alphaSize
minLen
maxLen
selCtr
int
nGroups
nBytes
alphaSize
nInUse
for
forControl
t
t
N_GROUPS
t
block
for
forControl
v
v
alphaSize
v
block
len
t
v
char
GREATER_ICOST
if
nMTF
block
panic
if
nMTF
block
nGroups
if
nMTF
block
nGroups
if
nMTF
block
nGroups
if
nMTF
block
nGroups
block
nGroups
block
int
nPart
remF
tFreq
aFreq
nPart
nGroups
remF
nMTF
gs
while
nPart
block
tFreq
remF
nPart
ge
gs
aFreq
while
aFreq
tFreq
ge
alphaSize
block
ge
aFreq
mtfFreq
ge
if
ge
gs
nPart
nGroups
nPart
nGroups
nPart
block
aFreq
mtfFreq
ge
ge
for
forControl
v
v
alphaSize
v
block
if
v
gs
v
ge
block
len
nPart
v
char
LESSER_ICOST
block
len
nPart
v
char
GREATER_ICOST
nPart
gs
ge
remF
aFreq
int
rfreq
int
N_GROUPS
MAX_ALPHA_SIZE
int
fave
int
N_GROUPS
short
cost
short
N_GROUPS
for
forControl
iter
iter
N_ITERS
iter
block
for
forControl
t
t
nGroups
t
block
fave
t
for
forControl
t
t
nGroups
t
block
for
forControl
v
v
alphaSize
v
block
rfreq
t
v
nSelectors
totc
gs
while
block
if
gs
nMTF
block
break
ge
gs
G_SIZE
if
ge
nMTF
block
ge
nMTF
for
forControl
t
t
nGroups
t
block
cost
t
if
nGroups
block
short
cost0
cost1
cost2
cost3
cost4
cost5
cost0
cost1
cost2
cost3
cost4
cost5
for
forControl
i
gs
i
ge
i
block
short
icv
szptr
i
cost0
len
icv
cost1
len
icv
cost2
len
icv
cost3
len
icv
cost4
len
icv
cost5
len
icv
cost
cost0
cost
cost1
cost
cost2
cost
cost3
cost
cost4
cost
cost5
block
for
forControl
i
gs
i
ge
i
block
short
icv
szptr
i
for
forControl
t
t
nGroups
t
block
cost
t
len
t
icv
bc
bt
for
forControl
t
t
nGroups
t
block
if
cost
t
bc
block
bc
cost
t
bt
t
totc
bc
fave
bt
selector
nSelectors
char
bt
nSelectors
for
forControl
i
gs
i
ge
i
block
rfreq
bt
szptr
i
gs
ge
for
forControl
t
t
nGroups
t
block
hbMakeCodeLengths
len
t
rfreq
t
alphaSize
rfreq
fave
cost
if
nGroups
block
panic
if
nSelectors
nSelectors
G_SIZE
block
panic
block
char
pos
char
N_GROUPS
char
ll_i
tmp2
tmp
for
forControl
i
i
nGroups
i
block
pos
i
char
i
for
forControl
i
i
nSelectors
i
block
ll_i
selector
i
j
tmp
pos
j
while
ll_i
tmp
block
j
tmp2
tmp
tmp
pos
j
pos
j
tmp2
pos
tmp
selectorMtf
i
char
j
int
code
int
N_GROUPS
MAX_ALPHA_SIZE
for
forControl
t
t
nGroups
t
block
minLen
maxLen
for
forControl
i
i
alphaSize
i
block
if
len
t
i
maxLen
block
maxLen
len
t
i
if
len
t
i
minLen
block
minLen
len
t
i
if
maxLen
block
panic
if
minLen
block
panic
hbAssignCodes
code
t
len
t
minLen
maxLen
alphaSize
block
boolean
inUse16
boolean
for
forControl
i
i
i
block
inUse16
i
for
forControl
j
j
j
block
if
inUse
i
j
block
inUse16
i
nBytes
bytesOut
for
forControl
i
i
i
block
if
inUse16
i
block
bsW
block
bsW
for
forControl
i
i
i
block
if
inUse16
i
block
for
forControl
j
j
j
block
if
inUse
i
j
block
bsW
block
bsW
nBytes
bytesOut
bsW
nGroups
bsW
nSelectors
for
forControl
i
i
nSelectors
i
block
for
forControl
j
j
selectorMtf
i
j
block
bsW
bsW
nBytes
bytesOut
for
forControl
t
t
nGroups
t
block
int
curr
len
t
bsW
curr
for
forControl
i
i
alphaSize
i
block
while
curr
len
t
i
block
bsW
curr
while
curr
len
t
i
block
bsW
curr
bsW
nBytes
bytesOut
selCtr
gs
while
block
if
gs
nMTF
block
break
ge
gs
G_SIZE
if
ge
nMTF
block
ge
nMTF
for
forControl
i
gs
i
ge
i
block
bsW
len
selector
selCtr
szptr
i
code
selector
selCtr
szptr
i
gs
ge
selCtr
if
selCtr
nSelectors
block
panic
moveToFrontCodeAndSend
bsPutIntVS
origPtr
generateMTFValues
sendMTFValues
OutputStream
bsStream
simpleSort
lo
int
hi
int
d
int
int
i
j
h
bigN
hp
int
v
bigN
hi
lo
if
bigN
block
return
hp
while
incs
hp
bigN
block
hp
hp
for
forControl
hp
hp
block
h
incs
hp
i
lo
h
while
block
if
i
hi
block
break
v
zptr
i
j
i
while
fullGtU
zptr
j
h
d
v
d
block
zptr
j
zptr
j
h
j
j
h
if
j
lo
h
block
break
zptr
j
v
i
if
i
hi
block
break
v
zptr
i
j
i
while
fullGtU
zptr
j
h
d
v
d
block
zptr
j
zptr
j
h
j
j
h
if
j
lo
h
block
break
zptr
j
v
i
if
i
hi
block
break
v
zptr
i
j
i
while
fullGtU
zptr
j
h
d
v
d
block
zptr
j
zptr
j
h
j
j
h
if
j
lo
h
block
break
zptr
j
v
i
if
workDone
workLimit
firstAttempt
block
return
vswap
p1
int
p2
int
n
int
int
temp
while
n
block
temp
zptr
p1
zptr
p1
zptr
p2
zptr
p2
temp
p1
p2
n
med3
char
a
char
b
char
c
char
char
t
if
a
b
block
t
a
a
b
b
t
if
b
c
block
t
b
b
c
c
t
if
a
b
block
b
a
return
b
StackElem
int
ll
int
hh
int
dd
qSort3
loSt
int
hiSt
int
dSt
int
int
unLo
unHi
ltLo
gtHi
med
n
m
int
sp
lo
hi
d
StackElem
stack
StackElem
QSORT_STACK_SIZE
for
forControl
int
count
count
QSORT_STACK_SIZE
count
block
stack
count
StackElem
sp
stack
sp
ll
loSt
stack
sp
hh
hiSt
stack
sp
dd
dSt
sp
while
sp
block
if
sp
QSORT_STACK_SIZE
block
panic
sp
lo
stack
sp
ll
hi
stack
sp
hh
d
stack
sp
dd
if
hi
lo
SMALL_THRESH
d
DEPTH_THRESH
block
simpleSort
lo
hi
d
if
workDone
workLimit
firstAttempt
block
return
continue
med
med3
block
zptr
lo
d
block
zptr
hi
d
block
zptr
lo
hi
d
unLo
ltLo
lo
unHi
gtHi
hi
while
block
while
block
if
unLo
unHi
block
break
n
int
block
zptr
unLo
d
med
if
n
block
int
temp
temp
zptr
unLo
zptr
unLo
zptr
ltLo
zptr
ltLo
temp
ltLo
unLo
continue
if
n
block
break
unLo
while
block
if
unLo
unHi
block
break
n
int
block
zptr
unHi
d
med
if
n
block
int
temp
temp
zptr
unHi
zptr
unHi
zptr
gtHi
zptr
gtHi
temp
gtHi
unHi
continue
if
n
block
break
unHi
if
unLo
unHi
block
break
int
temp
temp
zptr
unLo
zptr
unLo
zptr
unHi
zptr
unHi
temp
unLo
unHi
if
gtHi
ltLo
block
stack
sp
ll
lo
stack
sp
hh
hi
stack
sp
dd
d
sp
continue
n
ltLo
lo
unLo
ltLo
ltLo
lo
unLo
ltLo
vswap
lo
unLo
n
n
m
hi
gtHi
gtHi
unHi
hi
gtHi
gtHi
unHi
vswap
unLo
hi
m
m
n
lo
unLo
ltLo
m
hi
gtHi
unHi
stack
sp
ll
lo
stack
sp
hh
n
stack
sp
dd
d
sp
stack
sp
ll
n
stack
sp
hh
m
stack
sp
dd
d
sp
stack
sp
ll
m
stack
sp
hh
hi
stack
sp
dd
d
sp
mainSort
int
i
j
ss
sb
int
runningOrder
int
int
copy
int
boolean
bigDone
boolean
int
c1
c2
int
numQSorted
for
forControl
i
i
NUM_OVERSHOOT_BYTES
i
block
block
last
i
block
i
last
for
forControl
i
i
last
NUM_OVERSHOOT_BYTES
i
block
quadrant
i
block
char
block
if
last
block
for
forControl
i
i
last
i
block
zptr
i
i
firstAttempt
workDone
workLimit
simpleSort
last
block
numQSorted
for
forControl
i
i
i
block
bigDone
i
for
forControl
i
i
i
block
ftab
i
c1
block
for
forControl
i
i
last
i
block
c2
block
i
ftab
c1
c2
c1
c2
for
forControl
i
i
i
block
ftab
i
ftab
i
c1
block
for
forControl
i
i
last
i
block
c2
block
i
j
c1
c2
c1
c2
ftab
j
zptr
ftab
j
i
j
block
block
ftab
j
zptr
ftab
j
last
for
forControl
i
i
i
block
runningOrder
i
i
block
int
vv
int
h
do
h
block
h
h
do
h
block
h
h
for
forControl
i
h
i
i
block
vv
runningOrder
i
j
i
while
ftab
runningOrder
ftab
runningOrder
ftab
vv
ftab
vv
block
runningOrder
j
runningOrder
j
h
j
j
h
if
j
h
block
break
runningOrder
j
vv
for
forControl
i
i
i
block
ss
runningOrder
i
for
forControl
j
j
j
block
sb
ss
j
if
ftab
sb
SETMASK
SETMASK
block
int
lo
ftab
sb
CLEARMASK
int
hi
ftab
sb
CLEARMASK
if
hi
lo
block
qSort3
lo
hi
numQSorted
hi
lo
if
workDone
workLimit
firstAttempt
block
return
ftab
sb
SETMASK
bigDone
ss
if
i
block
int
bbStart
ftab
ss
CLEARMASK
int
bbSize
ftab
ss
CLEARMASK
bbStart
int
shifts
while
bbSize
shifts
block
shifts
for
forControl
j
j
bbSize
j
block
int
a2update
zptr
bbStart
j
int
qVal
j
shifts
quadrant
a2update
qVal
if
a2update
NUM_OVERSHOOT_BYTES
block
quadrant
a2update
last
qVal
if
bbSize
shifts
block
panic
for
forControl
j
j
j
block
copy
j
ftab
j
ss
CLEARMASK
for
forControl
j
ftab
ss
CLEARMASK
j
ftab
ss
CLEARMASK
j
block
c1
block
zptr
j
if
bigDone
c1
block
zptr
copy
c1
zptr
j
last
zptr
j
copy
c1
for
forControl
j
j
j
block
ftab
j
ss
SETMASK
randomiseBlock
int
i
int
rNToGo
int
rTPos
for
forControl
i
i
i
block
inUse
i
for
forControl
i
i
last
i
block
if
rNToGo
block
rNToGo
char
rNums
rTPos
rTPos
if
rTPos
block
rTPos
rNToGo
block
i
rNToGo
block
i
inUse
block
i
doReversibleTransformation
int
i
workLimit
workFactor
last
workDone
blockRandomised
firstAttempt
mainSort
if
workDone
workLimit
firstAttempt
block
randomiseBlock
workLimit
workDone
blockRandomised
firstAttempt
mainSort
origPtr
for
forControl
i
i
last
i
block
if
zptr
i
block
origPtr
i
break
if
origPtr
block
panic
fullGtU
boolean
i1
int
i2
int
int
k
char
c1
c2
int
s1
s2
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
i1
i2
k
last
do
k
block
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
s1
quadrant
i1
s2
quadrant
i2
if
s1
s2
block
return
s1
s2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
s1
quadrant
i1
s2
quadrant
i2
if
s1
s2
block
return
s1
s2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
s1
quadrant
i1
s2
quadrant
i2
if
s1
s2
block
return
s1
s2
i1
i2
c1
block
i1
c2
block
i2
if
c1
c2
block
return
c1
c2
s1
quadrant
i1
s2
quadrant
i2
if
s1
s2
block
return
s1
s2
i1
i2
if
i1
last
block
i1
last
i1
if
i2
last
block
i2
last
i2
k
workDone
return
int
incs
allocateCompressStructures
int
n
baseBlockSize
blockSize100k
block
char
n
NUM_OVERSHOOT_BYTES
quadrant
int
n
NUM_OVERSHOOT_BYTES
zptr
int
n
ftab
int
if
block
quadrant
zptr
ftab
block
szptr
short
n
generateMTFValues
char
yy
char
int
i
j
char
tmp
char
tmp2
int
zPend
int
wr
int
EOB
makeMaps
EOB
nInUse
for
forControl
i
i
EOB
i
block
mtfFreq
i
wr
zPend
for
forControl
i
i
nInUse
i
block
yy
i
char
i
for
forControl
i
i
last
i
block
char
ll_i
ll_i
unseqToSeq
block
zptr
i
j
tmp
yy
j
while
ll_i
tmp
block
j
tmp2
tmp
tmp
yy
j
yy
j
tmp2
yy
tmp
if
j
block
zPend
block
if
zPend
block
zPend
while
block
switch
zPend
case
szptr
wr
short
RUNA
wr
mtfFreq
RUNA
break
case
szptr
wr
short
RUNB
wr
mtfFreq
RUNB
break
if
zPend
block
break
zPend
zPend
zPend
szptr
wr
short
j
wr
mtfFreq
j
if
zPend
block
zPend
while
block
switch
zPend
case
szptr
wr
short
RUNA
wr
mtfFreq
RUNA
break
case
szptr
wr
short
RUNB
wr
mtfFreq
RUNB
break
if
zPend
block
break
zPend
zPend
szptr
wr
short
EOB
wr
mtfFreq
EOB
nMTF
wr
OutputStream
BZip2Constants
