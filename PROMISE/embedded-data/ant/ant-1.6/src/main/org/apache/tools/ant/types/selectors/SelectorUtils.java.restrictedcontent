SelectorUtils
SelectorUtils
instance
SelectorUtils
SelectorUtils
getInstance
SelectorUtils
return
instance
matchPatternStart
boolean
pattern
String
str
String
return
matchPatternStart
pattern
str
matchPatternStart
boolean
pattern
String
str
String
isCaseSensitive
boolean
if
startsWith
separator
startsWith
separator
block
return
String
patDirs
tokenizePathAsArray
pattern
String
strDirs
tokenizePathAsArray
str
int
patIdxStart
int
patIdxEnd
length
int
strIdxStart
int
strIdxEnd
length
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
String
patDir
patDirs
patIdxStart
if
equals
block
break
if
match
patDir
strDirs
strIdxStart
isCaseSensitive
block
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
block
return
if
patIdxStart
patIdxEnd
block
return
block
return
matchPath
boolean
pattern
String
str
String
return
matchPath
pattern
str
matchPath
boolean
pattern
String
str
String
isCaseSensitive
boolean
if
startsWith
separator
startsWith
separator
block
return
String
patDirs
tokenizePathAsArray
pattern
String
strDirs
tokenizePathAsArray
str
int
patIdxStart
int
patIdxEnd
length
int
strIdxStart
int
strIdxEnd
length
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
String
patDir
patDirs
patIdxStart
if
equals
block
break
if
match
patDir
strDirs
strIdxStart
isCaseSensitive
block
patDirs
strDirs
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
block
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patDirs
i
equals
block
patDirs
strDirs
return
return
block
if
patIdxStart
patIdxEnd
block
patDirs
strDirs
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
String
patDir
patDirs
patIdxEnd
if
equals
block
break
if
match
patDir
strDirs
strIdxEnd
isCaseSensitive
block
patDirs
strDirs
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
block
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patDirs
i
equals
block
patDirs
strDirs
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
int
patIdxTmp
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patDirs
i
equals
block
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
block
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
for
forControl
int
i
i
strLength
patLength
i
block
for
forControl
int
j
j
patLength
j
block
String
subPat
patDirs
patIdxStart
j
String
subStr
strDirs
strIdxStart
i
j
if
match
subPat
subStr
isCaseSensitive
block
continue
foundIdx
strIdxStart
i
break
if
foundIdx
block
patDirs
strDirs
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patDirs
i
equals
block
patDirs
strDirs
return
return
match
boolean
pattern
String
str
String
return
match
pattern
str
match
boolean
pattern
String
str
String
isCaseSensitive
boolean
char
patArr
toCharArray
char
strArr
toCharArray
int
patIdxStart
int
patIdxEnd
length
int
strIdxStart
int
strIdxEnd
length
char
ch
boolean
containsStar
for
forControl
int
i
i
length
i
block
if
patArr
i
block
containsStar
break
if
containsStar
block
if
patIdxEnd
strIdxEnd
block
return
for
forControl
int
i
i
patIdxEnd
i
block
ch
patArr
i
if
ch
block
if
isCaseSensitive
ch
strArr
i
block
return
if
isCaseSensitive
toUpperCase
ch
toUpperCase
strArr
i
block
return
return
if
patIdxEnd
block
return
while
ch
patArr
patIdxStart
strIdxStart
strIdxEnd
block
if
ch
block
if
isCaseSensitive
ch
strArr
strIdxStart
block
return
if
isCaseSensitive
toUpperCase
ch
toUpperCase
strArr
strIdxStart
block
return
patIdxStart
strIdxStart
if
strIdxStart
strIdxEnd
block
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patArr
i
block
return
return
while
ch
patArr
patIdxEnd
strIdxStart
strIdxEnd
block
if
ch
block
if
isCaseSensitive
ch
strArr
strIdxEnd
block
return
if
isCaseSensitive
toUpperCase
ch
toUpperCase
strArr
strIdxEnd
block
return
patIdxEnd
strIdxEnd
if
strIdxStart
strIdxEnd
block
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patArr
i
block
return
return
while
patIdxStart
patIdxEnd
strIdxStart
strIdxEnd
block
int
patIdxTmp
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patArr
i
block
patIdxTmp
i
break
if
patIdxTmp
patIdxStart
block
patIdxStart
continue
int
patLength
patIdxTmp
patIdxStart
int
strLength
strIdxEnd
strIdxStart
int
foundIdx
for
forControl
int
i
i
strLength
patLength
i
block
for
forControl
int
j
j
patLength
j
block
ch
patArr
patIdxStart
j
if
ch
block
if
isCaseSensitive
ch
strArr
strIdxStart
i
j
block
continue
if
isCaseSensitive
toUpperCase
ch
toUpperCase
strArr
strIdxStart
i
j
block
continue
foundIdx
strIdxStart
i
break
if
foundIdx
block
return
patIdxStart
patIdxTmp
strIdxStart
foundIdx
patLength
for
forControl
int
i
patIdxStart
i
patIdxEnd
i
block
if
patArr
i
block
return
return
tokenizePath
Vector
path
String
return
tokenizePath
path
separator
tokenizePath
Vector
path
String
separator
String
Vector
ret
Vector
StringTokenizer
st
StringTokenizer
path
separator
while
hasMoreTokens
block
addElement
nextToken
return
ret
tokenizePathAsArray
String
path
String
char
sep
separatorChar
int
start
int
len
length
int
count
for
forControl
int
pos
pos
len
pos
block
if
charAt
pos
sep
block
if
pos
start
block
count
start
pos
if
len
start
block
count
String
l
String
count
count
start
for
forControl
int
pos
pos
len
pos
block
if
charAt
pos
sep
block
if
pos
start
block
String
tok
substring
start
pos
l
count
tok
start
pos
if
len
start
block
String
tok
substring
start
l
count
tok
return
l
isOutOfDate
boolean
src
File
target
File
granularity
int
if
exists
block
return
if
exists
block
return
if
lastModified
granularity
lastModified
block
return
return
isOutOfDate
boolean
src
Resource
target
Resource
granularity
int
if
isExists
block
return
if
isExists
block
return
if
getLastModified
granularity
getLastModified
block
return
return
removeWhitespace
String
input
String
StringBuffer
result
StringBuffer
if
input
block
StringTokenizer
st
StringTokenizer
input
while
hasMoreTokens
block
append
nextToken
return
toString
hasWildcards
boolean
input
String
return
indexOf
indexOf
rtrimWildcardTokens
String
input
String
Vector
v
tokenizePath
input
separator
StringBuffer
sb
StringBuffer
for
forControl
int
counter
counter
size
counter
block
if
hasWildcards
String
elementAt
counter
block
break
if
counter
block
append
separator
append
String
elementAt
counter
return
toString
