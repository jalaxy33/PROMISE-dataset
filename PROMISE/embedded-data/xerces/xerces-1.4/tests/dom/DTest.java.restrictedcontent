UTF8
main
argv
String
int
BLOCK_READ_SIZE
println
println
println
try
InputStream
stream
UTF8Producer
Reader
reader
InputStreamReader
stream
long
time
testCharByChar
reader
println
time
close
catchClause
e
println
getMessage
try
InputStream
stream
UTF8Producer
Reader
reader
InputStreamReader
stream
long
time
testCharArray
reader
BLOCK_READ_SIZE
println
time
close
catchClause
e
println
getMessage
println
println
println
try
InputStream
stream
UTF8Producer
Reader
reader
UTF8Reader
stream
long
time
testCharByChar
reader
println
time
close
catchClause
e
println
getMessage
try
InputStream
stream
UTF8Producer
Reader
reader
UTF8Reader
stream
long
time
testCharArray
reader
BLOCK_READ_SIZE
println
time
close
catchClause
e
println
getMessage
testCharByChar
long
reader
Reader
long
before
currentTimeMillis
println
println
for
forControl
int
i
i
i
block
int
c
read
if
c
i
block
expectedChar
i
c
println
for
forControl
int
i
i
i
block
int
c
read
if
c
i
block
expectedChar
i
c
println
for
forControl
int
i
i
i
block
int
c
read
if
c
i
block
expectedChar
i
c
println
for
forControl
int
i
i
i
block
int
c
read
if
c
i
block
expectedChar
i
c
println
for
forControl
int
i
i
i
block
int
uuuuu
i
int
wwww
uuuuu
int
zzzz
i
int
yyyyyy
i
int
xxxxxx
i
int
hs
wwww
zzzz
yyyyyy
int
ls
yyyyyy
xxxxxx
int
c
read
if
c
hs
block
expectedChar
hs
c
c
read
if
c
ls
block
expectedChar
ls
c
println
int
c
read
if
c
block
extraChar
c
long
after
currentTimeMillis
return
after
before
testCharArray
long
reader
Reader
size
int
long
before
currentTimeMillis
println
size
char
ch
char
size
int
count
int
position
println
for
forControl
int
i
i
i
block
if
position
count
block
count
load
reader
ch
position
int
c
ch
position
if
c
i
block
expectedChar
i
c
println
for
forControl
int
i
i
i
block
if
position
count
block
count
load
reader
ch
position
int
c
ch
position
if
c
i
block
expectedChar
i
c
println
for
forControl
int
i
i
i
block
if
position
count
block
count
load
reader
ch
position
int
c
ch
position
if
c
i
block
expectedChar
i
c
println
for
forControl
int
i
i
i
block
if
position
count
block
count
load
reader
ch
position
int
c
ch
position
if
c
i
block
expectedChar
i
c
println
for
forControl
int
i
i
i
block
int
uuuuu
i
int
wwww
uuuuu
int
zzzz
i
int
yyyyyy
i
int
xxxxxx
i
int
hs
wwww
zzzz
yyyyyy
int
ls
yyyyyy
xxxxxx
if
position
count
block
count
load
reader
ch
position
int
c
ch
position
if
c
hs
block
expectedChar
hs
c
if
position
count
block
count
load
reader
ch
position
c
ch
position
if
c
ls
block
expectedChar
ls
c
println
if
position
count
block
count
load
reader
ch
position
if
count
block
extraChar
ch
position
long
after
currentTimeMillis
return
after
before
load
int
reader
Reader
ch
char
int
count
read
ch
length
return
count
expectedChar
prefix
String
ec
int
fc
int
StringBuffer
str
StringBuffer
append
if
prefix
block
append
prefix
append
append
append
toHexString
ec
append
if
fc
block
append
toHexString
fc
block
append
String
message
toString
throw
IOException
message
extraChar
c
int
StringBuffer
str
StringBuffer
append
append
toHexString
c
String
message
toString
throw
IOException
message
UTF8Producer
int
fCodePoint
int
fByte
read
int
if
fCodePoint
block
int
b
fCodePoint
fCodePoint
fByte
return
b
if
fCodePoint
block
switch
fByte
case
block
int
b
fCodePoint
fByte
return
b
case
block
int
b
fCodePoint
fCodePoint
fByte
return
b
case
block
throw
RuntimeException
fByte
if
fCodePoint
block
switch
fByte
case
block
int
b
fCodePoint
fByte
return
b
case
block
int
b
fCodePoint
fByte
return
b
case
block
int
b
fCodePoint
fCodePoint
if
fCodePoint
block
fCodePoint
fByte
return
b
case
block
throw
RuntimeException
fByte
if
fCodePoint
block
switch
fByte
case
block
int
uuuuu
fCodePoint
int
b
uuuuu
fByte
return
b
case
block
int
uuuuu
fCodePoint
int
zzzz
fCodePoint
int
b
uuuuu
zzzz
fByte
return
b
case
block
int
yyyyyy
fCodePoint
int
b
yyyyyy
fByte
return
b
case
block
int
xxxxxx
fCodePoint
int
b
xxxxxx
fCodePoint
fByte
return
b
case
block
throw
RuntimeException
fByte
return
InputStream
