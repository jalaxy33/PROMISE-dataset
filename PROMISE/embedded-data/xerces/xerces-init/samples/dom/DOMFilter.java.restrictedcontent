DOMFilter
String
DEFAULT_PARSER_NAME
print
parserWrapperName
String
uri
String
elementName
String
attributeName
String
try
DOMParserWrapper
parser
DOMParserWrapper
forName
newInstance
parserWrapperName
Document
document
parse
uri
NodeList
elements
getElementsByTagName
elementName
print
elements
attributeName
catchClause
e
printStackTrace
err
print
elements
NodeList
attributeName
String
if
elements
block
return
if
attributeName
block
int
elementCount
getLength
for
forControl
int
i
i
elementCount
i
block
Element
element
Element
item
i
print
element
getAttributes
block
int
elementCount
getLength
for
forControl
int
i
i
elementCount
i
block
Element
element
Element
item
i
NamedNodeMap
attributes
getAttributes
if
getNamedItem
attributeName
block
print
element
attributes
print
element
Element
attributes
NamedNodeMap
print
print
getNodeName
if
attributes
block
int
attributeCount
getLength
for
forControl
int
i
i
attributeCount
i
block
Attr
attribute
Attr
item
i
print
print
getNodeName
print
print
normalize
getNodeValue
print
println
normalize
String
s
String
StringBuffer
str
StringBuffer
int
len
s
length
for
forControl
int
i
i
len
i
block
char
ch
charAt
i
switch
ch
case
block
append
break
case
block
append
break
case
block
append
break
case
block
append
break
case
block
append
append
toString
ch
append
break
case
block
append
ch
return
toString
main
argv
String
if
length
block
printUsage
exit
String
parserName
DEFAULT_PARSER_NAME
String
elementName
String
attributeName
for
forControl
int
i
i
length
i
block
String
arg
argv
i
if
startsWith
block
if
equals
block
if
i
length
block
println
exit
parserName
argv
i
continue
if
equals
block
if
i
length
block
println
exit
elementName
argv
i
continue
if
equals
block
if
i
length
block
println
exit
attributeName
argv
i
continue
if
equals
block
printUsage
exit
println
arg
print
parserName
arg
elementName
attributeName
printUsage
println
println
println
println
println
DEFAULT_PARSER_NAME
println
println
println
