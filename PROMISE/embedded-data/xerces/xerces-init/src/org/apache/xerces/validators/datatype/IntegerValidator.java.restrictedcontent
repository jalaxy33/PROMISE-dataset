IntegerValidator
int
fMaxInclusive
boolean
fIsMaxInclusive
int
fMaxExclusive
boolean
fIsMaxExclusive
int
fMinInclusive
boolean
fIsMinInclusive
int
fMinExclusive
boolean
fIsMinExclusive
int
fEnumValues
boolean
fHasEnums
IntegerValidator
fBaseValidator
DatatypeMessageProvider
fMessageProvider
DatatypeMessageProvider
Locale
fLocale
validate
content
String
int
i
try
i
parseInt
content
catchClause
nfe
throw
InvalidDatatypeValueException
getErrorString
NotInteger
MSG_NONE
Object
content
boundsCheck
i
if
fHasEnums
enumCheck
i
validate
contentIndex
int
ensureFacetsAreConsistent
boolean
facets
Hashtable
boolean
facetsAreConsistent
for
forControl
Enumeration
e
keys
facetsAreConsistent
hasMoreElements
block
String
key
String
nextElement
String
value
if
equals
ENUMERATION
continue
value
String
get
key
int
integerValue
try
integerValue
parseInt
value
catchClause
nfe
facetsAreConsistent
if
equals
MININCLUSIVE
fIsMinInclusive
block
facetsAreConsistent
fMinInclusive
integerValue
if
equals
MINEXCLUSIVE
fIsMinExclusive
block
facetsAreConsistent
fMinExclusive
integerValue
if
equals
MAXINCLUSIVE
fIsMaxInclusive
block
facetsAreConsistent
fMaxInclusive
integerValue
if
equals
MAXEXCLUSIVE
fIsMaxExclusive
block
facetsAreConsistent
fMaxExclusive
integerValue
return
facetsAreConsistent
setFacets
facets
Hashtable
if
fBaseValidator
if
ensureFacetsAreConsistent
facets
throw
IllegalFacetValueException
getErrorString
FacetsInconsistent
MSG_NONE
fIsMinInclusive
fIsMinExclusive
fIsMaxInclusive
fIsMaxExclusive
fHasEnums
for
forControl
Enumeration
e
keys
hasMoreElements
block
String
key
String
nextElement
String
value
if
equals
ENUMERATION
continue
value
String
get
key
int
integerValue
try
integerValue
parseInt
value
catchClause
nfe
throw
IllegalFacetValueException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
if
equals
MININCLUSIVE
block
fIsMinInclusive
fMinInclusive
integerValue
if
equals
MINEXCLUSIVE
block
fIsMinExclusive
fMinExclusive
integerValue
if
equals
MAXINCLUSIVE
block
fIsMaxInclusive
fMaxInclusive
integerValue
if
equals
MAXEXCLUSIVE
block
fIsMaxExclusive
fMaxExclusive
integerValue
if
equals
ENUMERATION
block
if
equals
PRECISION
equals
SCALE
equals
LENGTH
equals
MAXLENGTH
equals
LITERAL
equals
LEXICALREPRESENTATION
equals
LEXICAL
throw
IllegalFacetException
getErrorString
IllegalIntegerFacet
MSG_NONE
throw
UnknownFacetException
getErrorString
UnknownFacet
MSG_NONE
Object
key
Vector
v
Vector
get
ENUMERATION
if
v
block
fHasEnums
fEnumValues
int
size
for
forControl
int
i
i
size
i
try
fEnumValues
i
parseInt
String
elementAt
i
boundsCheck
fEnumValues
i
catchClause
idve
throw
IllegalFacetValueException
getErrorString
InvalidEnumValue
MSG_NONE
Object
elementAt
i
catchClause
nfe
println
setFacets
facets
int
setBasetype
base
DatatypeValidator
fBaseValidator
IntegerValidator
base
boundsCheck
i
int
boolean
minOk
boolean
maxOk
if
fIsMaxInclusive
maxOk
i
fMaxInclusive
if
fIsMaxExclusive
maxOk
i
fMaxExclusive
maxOk
fIsMaxInclusive
fIsMaxExclusive
if
fIsMinInclusive
minOk
i
fMinInclusive
if
fIsMinExclusive
minOk
i
fMinInclusive
minOk
fIsMinInclusive
fIsMinExclusive
if
minOk
maxOk
throw
InvalidDatatypeValueException
getErrorString
OutOfBounds
MSG_NONE
Object
Integer
i
enumCheck
v
int
for
forControl
int
i
i
length
i
block
if
v
fEnumValues
i
return
throw
InvalidDatatypeValueException
getErrorString
NotAnEnumValue
MSG_NONE
Object
Integer
v
setLocale
locale
Locale
getErrorString
String
major
int
minor
int
args
Object
try
return
createMessage
fLocale
major
minor
args
catchClause
e
return
minor
InternalDatatypeValidator
