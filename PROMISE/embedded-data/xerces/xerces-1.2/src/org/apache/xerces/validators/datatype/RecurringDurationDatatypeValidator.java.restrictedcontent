RecurringDurationDatatypeValidator
boolean
fDbug
Locale
fLocale
DatatypeValidator
fBaseValidator
String
fPattern
long
fMaxInclusive
MAX_VALUE
long
fMaxExclusive
MAX_VALUE
long
fMinInclusive
long
fMinExclusive
long
fDuration
long
fPeriod
long
fEnumrecurringduration
boolean
isMaxExclusiveDefined
boolean
isMaxInclusiveDefined
boolean
isMinExclusiveDefined
boolean
isMinInclusiveDefined
boolean
isBaseTypeTimePeriod
int
fFacetsDefined
boolean
fDerivedByList
Hashtable
fFacets
DatatypeMessageProvider
fMessageProvider
DatatypeMessageProvider
RecurringDurationDatatypeValidator
RecurringDurationDatatypeValidator
base
DatatypeValidator
facets
Hashtable
derivedByList
boolean
fDerivedByList
derivedByList
if
base
block
setBasetype
base
fFacets
facets
if
facets
block
if
fDerivedByList
block
for
forControl
Enumeration
e
keys
hasMoreElements
block
String
key
String
nextElement
if
equals
ELT_PATTERN
block
fFacetsDefined
FACET_PATTERN
fPattern
String
get
key
if
equals
ELT_ENUMERATION
block
fFacetsDefined
FACET_ENUMERATION
continue
if
equals
ELT_MAXINCLUSIVE
block
fFacetsDefined
FACET_MAXINCLUSIVE
String
value
try
value
String
get
key
fMaxInclusive
normalizeRecurringDuration
toCharArray
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
if
equals
ELT_MAXEXCLUSIVE
block
fFacetsDefined
FACET_MAXEXCLUSIVE
String
value
try
value
String
get
key
fMaxExclusive
normalizeRecurringDuration
toCharArray
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
if
equals
ELT_MININCLUSIVE
block
fFacetsDefined
FACET_MININCLUSIVE
String
value
try
value
String
get
key
fMinInclusive
normalizeRecurringDuration
toCharArray
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
if
equals
ELT_MINEXCLUSIVE
block
fFacetsDefined
FACET_MININCLUSIVE
String
value
try
value
String
get
key
fMinExclusive
normalizeRecurringDuration
toCharArray
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
if
equals
ELT_PERIOD
block
fFacetsDefined
FACET_PERIOD
String
value
try
value
String
get
key
fPeriod
normalizeRecurringDuration
toCharArray
if
fDbug
block
println
value
println
fPeriod
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
if
equals
ELT_DURATION
block
fFacetsDefined
FACET_DURATION
String
value
try
value
String
get
key
fDuration
normalizeRecurringDuration
toCharArray
if
fDbug
block
println
fDuration
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
block
throw
InvalidDatatypeFacetException
getErrorString
MSG_FORMAT_FAILURE
MSG_NONE
isMaxExclusiveDefined
fFacetsDefined
FACET_MAXEXCLUSIVE
isMaxInclusiveDefined
fFacetsDefined
FACET_MAXINCLUSIVE
isMinExclusiveDefined
fFacetsDefined
FACET_MINEXCLUSIVE
isMinInclusiveDefined
fFacetsDefined
FACET_MININCLUSIVE
if
isMaxExclusiveDefined
isMaxInclusiveDefined
block
throw
InvalidDatatypeFacetException
if
isMinExclusiveDefined
isMinInclusiveDefined
block
throw
InvalidDatatypeFacetException
if
fFacetsDefined
FACET_ENUMERATION
block
Vector
v
Vector
get
ELT_ENUMERATION
if
v
block
fEnumrecurringduration
long
size
int
i
String
value
try
for
forControl
i
size
i
block
value
String
elementAt
i
fEnumrecurringduration
i
normalizeRecurringDuration
toCharArray
boundsCheck
fEnumrecurringduration
i
if
fDbug
block
println
value
for
forControl
int
enumCounter
enumCounter
fEnumrecurringduration
length
enumCounter
block
println
enumCounter
catchClause
idve
throw
InvalidDatatypeFacetException
getErrorString
InvalidEnumValue
MSG_NONE
Object
elementAt
i
if
fBaseValidator
block
String
value
long
baseTypePeriod
try
Hashtable
baseValidatorFacet
getFacets
if
baseValidatorFacet
block
value
String
get
ELT_PERIOD
if
value
block
fPeriod
normalizeRecurringDuration
toCharArray
if
fPeriod
block
isBaseTypeTimePeriod
if
fDbug
block
println
value
println
fPeriod
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
ELT_PERIOD
block
validate
Object
content
String
state
Object
long
normalizedValue
if
fDerivedByList
block
if
fDbug
block
println
fFacetsDefined
if
fFacetsDefined
FACET_DURATION
block
println
fDuration
if
fFacetsDefined
FACET_PERIOD
block
println
fPeriod
println
fBaseValidator
if
fPattern
block
RegularExpression
regex
RegularExpression
fPattern
if
matches
content
throw
InvalidDatatypeValueException
content
fPattern
block
return
setBasetype
base
DatatypeValidator
fBaseValidator
base
setLocale
locale
Locale
compare
int
content1
String
content2
String
return
getFacets
Hashtable
return
fFacets
normalizeRecurringDuration
long
value
char
start
int
long
normalizedDuration
return
normalizedDuration
normalizeInstant
Calendar
value
char
start
int
length
int
boolean
negative
boolean
tznegative
int
tzoffset
int
tzhh
tzmm
int
i
start
j
k
l
m
char
ms
Calendar
cal
GregorianCalendar
int
endindex
start
length
try
if
length
throw
ParseException
clear
setLenient
if
value
i
value
i
block
set
ERA
value
i
BC
AD
i
j
indexOf
value
i
i
if
j
j
endindex
throw
ParseException
i
set
YEAR
parseInt
value
i
j
i
i
j
set
MONTH
parseInt
value
i
i
if
value
i
throw
ParseException
i
set
DAY_OF_MONTH
parseInt
value
i
i
if
value
i
throw
ParseException
i
set
HOUR_OF_DAY
parseInt
value
i
i
if
value
i
throw
ParseException
i
set
MINUTE
parseInt
value
i
i
if
endindex
i
value
i
block
set
SECOND
parseInt
value
i
i
if
i
endindex
value
i
block
i
k
while
i
endindex
k
isDigit
value
i
ms
k
value
i
set
MILLISECOND
parseInt
ms
while
i
endindex
isDigit
value
i
i
if
i
endindex
block
if
value
i
block
set
ZONE_OFFSET
if
value
i
value
i
block
tznegative
value
i
tzhh
parseInt
value
i
if
endindex
i
block
if
value
i
throw
ParseException
i
tzmm
parseInt
value
i
tzoffset
tzhh
tzmm
set
ZONE_OFFSET
tznegative
tzoffset
tzoffset
throw
ParseException
i
return
cal
catchClause
e
if
fDbug
block
printStackTrace
return
block
throw
InvalidDatatypeValueException
toString
clone
Object
throw
CloneNotSupportedException
getClass
getName
boundsCheck
f
long
boolean
inUpperBound
boolean
inLowerBound
if
isMaxInclusiveDefined
block
inUpperBound
f
fMaxInclusive
if
isMaxExclusiveDefined
block
inUpperBound
f
fMaxExclusive
if
isMinInclusiveDefined
block
inLowerBound
f
fMinInclusive
if
isMinExclusiveDefined
block
inLowerBound
f
fMinExclusive
if
inUpperBound
inLowerBound
block
throw
InvalidDatatypeFacetException
getErrorString
OutOfBounds
MSG_NONE
Object
Long
f
enumCheck
d
long
for
forControl
int
i
i
fEnumrecurringduration
length
i
block
if
d
fEnumrecurringduration
i
return
throw
InvalidDatatypeValueException
getErrorString
NotAnEnumValue
MSG_NONE
Object
Long
d
getErrorString
String
major
int
minor
int
args
Object
try
return
createMessage
fLocale
major
minor
args
catchClause
e
return
minor
indexOf
int
value
char
start
int
s
char
return
indexOf
value
start
s
length
indexOf
int
value
char
start
int
s
char
max
int
for
forControl
int
i
start
i
max
i
if
value
i
s
return
i
return
indexOneOf
int
value
char
start
int
s
String
return
indexOneOf
value
start
s
length
indexOneOf
int
value
char
start
int
s
String
max
int
for
forControl
int
i
start
i
max
i
for
forControl
int
j
j
length
j
if
value
i
charAt
j
return
i
return
parseInt
int
s
char
start
int
length
int
if
s
throw
NumberFormatException
int
radix
int
result
boolean
negative
int
i
start
int
limit
int
multmin
int
digit
if
length
throw
NumberFormatException
String
s
start
length
if
s
i
block
negative
limit
MIN_VALUE
i
if
s
i
block
negative
limit
MAX_VALUE
i
block
limit
MAX_VALUE
multmin
limit
radix
if
i
start
length
block
digit
digit
s
i
radix
if
digit
throw
NumberFormatException
String
s
start
length
result
digit
while
i
start
length
block
digit
digit
s
i
radix
if
digit
throw
NumberFormatException
String
s
start
length
if
result
multmin
throw
NumberFormatException
String
s
start
length
result
radix
if
result
limit
digit
throw
NumberFormatException
String
s
start
length
result
digit
if
negative
block
if
i
return
result
throw
NumberFormatException
String
s
start
length
return
result
AbstractDatatypeValidator
