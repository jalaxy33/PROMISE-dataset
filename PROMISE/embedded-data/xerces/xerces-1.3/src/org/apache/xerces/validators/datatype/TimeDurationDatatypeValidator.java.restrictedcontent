TimeDurationDatatypeValidator
Locale
fLocale
DatatypeValidator
fBaseValidator
String
fPattern
long
fMaxInclusive
long
fMaxExclusive
long
fMinInclusive
long
fMinExclusive
long
fDuration
long
fPeriod
boolean
isMaxExclusiveDefined
boolean
isMaxInclusiveDefined
boolean
isMinExclusiveDefined
boolean
isMinInclusiveDefined
int
fFacetsDefined
long
fEnumTimeDuration
DatatypeMessageProvider
fMessageProvider
DatatypeMessageProvider
TimeDurationDatatypeValidator
TimeDurationDatatypeValidator
base
DatatypeValidator
facets
Hashtable
derivedByList
boolean
if
base
setBasetype
base
if
facets
block
if
fBaseValidator
for
forControl
Enumeration
e
keys
hasMoreElements
block
String
key
String
nextElement
if
equals
ELT_PATTERN
block
fFacetsDefined
FACET_PATTERN
fPattern
String
get
key
if
equals
ELT_ENUMERATION
block
fFacetsDefined
FACET_ENUMERATION
continue
if
equals
ELT_MAXINCLUSIVE
block
fFacetsDefined
FACET_MAXINCLUSIVE
String
value
try
value
String
get
key
fMaxInclusive
normalizeDuration
toCharArray
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
if
equals
ELT_MAXEXCLUSIVE
block
fFacetsDefined
FACET_MAXEXCLUSIVE
String
value
try
value
String
get
key
fMaxExclusive
normalizeDuration
toCharArray
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
if
equals
ELT_MININCLUSIVE
block
fFacetsDefined
FACET_MININCLUSIVE
String
value
try
value
String
get
key
fMinInclusive
normalizeDuration
toCharArray
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
if
equals
ELT_MINEXCLUSIVE
block
fFacetsDefined
FACET_MININCLUSIVE
String
value
try
value
String
get
key
fMinExclusive
normalizeDuration
toCharArray
catchClause
nfe
throw
InvalidDatatypeFacetException
getErrorString
IllegalFacetValue
MSG_NONE
Object
value
key
block
throw
InvalidDatatypeFacetException
getErrorString
MSG_FORMAT_FAILURE
MSG_NONE
isMaxExclusiveDefined
fFacetsDefined
FACET_MAXEXCLUSIVE
isMaxInclusiveDefined
fFacetsDefined
FACET_MAXINCLUSIVE
isMinExclusiveDefined
fFacetsDefined
FACET_MINEXCLUSIVE
isMinInclusiveDefined
fFacetsDefined
FACET_MININCLUSIVE
if
isMaxExclusiveDefined
isMaxInclusiveDefined
block
throw
InvalidDatatypeFacetException
if
isMinExclusiveDefined
isMinInclusiveDefined
block
throw
InvalidDatatypeFacetException
if
fFacetsDefined
FACET_ENUMERATION
block
Vector
v
Vector
get
ELT_ENUMERATION
if
v
block
fEnumTimeDuration
long
size
int
i
String
value
try
for
forControl
i
size
i
block
value
String
elementAt
i
fEnumTimeDuration
i
normalizeDuration
toCharArray
boundsCheck
fEnumTimeDuration
i
catchClause
idve
throw
InvalidDatatypeFacetException
getErrorString
InvalidEnumValue
MSG_NONE
Object
elementAt
i
validate
Object
content
String
state
Object
long
normalizedValue
if
fPattern
block
RegularExpression
regex
RegularExpression
fPattern
if
matches
content
throw
InvalidDatatypeValueException
content
fPattern
normalizedValue
normalizeDuration
toCharArray
try
boundsCheck
normalizedValue
catchClause
ex
throw
InvalidDatatypeValueException
if
fEnumTimeDuration
enumCheck
normalizedValue
return
setBasetype
base
DatatypeValidator
fBaseValidator
base
setLocale
locale
Locale
compare
int
content1
String
content2
String
return
getFacets
Hashtable
return
normalizeDuration
long
value
char
start
int
int
i
j
k
l
m
int
sepindex
int
index
start
int
lindex
int
endindex
start
length
int
pendindex
endindex
char
dseps
char
tseps
char
msc
int
buckets
int
FIELD_COUNT
for
forControl
i
i
length
i
buckets
i
boolean
intime
boolean
fixed
boolean
p1negative
boolean
p2negative
boolean
p1specified
boolean
p2specified
GregorianCalendar
cstart
GregorianCalendar
cend
try
if
value
index
block
p1negative
int
ix
indexOf
value
start
if
ix
ix
endindex
block
if
value
ix
block
p2negative
if
value
p1negative
index
index
block
if
p1negative
index
p1specified
pendindex
ix
block
cstart
GregorianCalendar
normalizeInstant
value
index
ix
index
if
value
p2negative
ix
ix
block
p2specified
index
p2negative
ix
ix
block
ix
cend
GregorianCalendar
normalizeInstant
value
ix
endindex
ix
block
index
p1negative
start
start
if
cstart
cend
block
return
getTime
getTime
getTime
getTime
if
p1specified
p2specified
throw
ParseException
if
p1specified
value
index
block
throw
ParseException
value
index
index
if
p2specified
value
index
block
throw
ParseException
value
index
index
catchClause
e
throw
InvalidDatatypeValueException
toString
try
lindex
index
for
forControl
i
index
i
pendindex
i
block
if
isDigit
value
i
value
i
block
if
value
i
fixed
continue
if
value
i
block
intime
sepindex
lindex
i
continue
sepindex
indexOf
intime
tseps
dseps
sepindex
value
i
if
sepindex
throw
ParseException
i
sepindex
if
fixed
value
i
throw
ParseException
i
j
switch
value
i
case
block
if
intime
throw
ParseException
i
buckets
YEAR
parseInt
value
lindex
i
lindex
break
case
block
if
intime
throw
ParseException
i
buckets
DAY_OF_MONTH
parseInt
value
lindex
i
lindex
break
case
block
if
intime
throw
ParseException
i
buckets
HOUR_OF_DAY
parseInt
value
lindex
i
lindex
break
case
block
buckets
intime
MINUTE
MONTH
parseInt
value
lindex
i
lindex
break
case
block
if
intime
throw
ParseException
i
if
fixed
buckets
SECOND
parseInt
value
lindex
i
lindex
block
int
ps
indexOf
value
lindex
buckets
SECOND
parseInt
value
lindex
ps
lindex
ps
k
while
ps
pendindex
k
isDigit
value
ps
msc
k
value
ps
buckets
MILLISECOND
parseInt
msc
fixed
break
case
block
throw
ParseException
value
i
i
lindex
i
catchClause
e
throw
InvalidDatatypeValueException
toString
try
if
cstart
block
long
st
getTime
getTime
for
forControl
k
k
length
k
if
buckets
k
add
k
p2negative
buckets
k
buckets
k
long
ms
getTime
getTime
return
ms
st
if
cend
block
long
st
getTime
getTime
for
forControl
k
k
length
k
if
buckets
k
add
k
p1negative
buckets
k
buckets
k
long
ms
getTime
getTime
return
ms
st
long
r
long
buckets
YEAR
buckets
MONTH
buckets
DAY_OF_MONTH
buckets
HOUR_OF_DAY
buckets
MINUTE
buckets
buckets
return
p1negative
r
r
catchClause
e
throw
InvalidDatatypeValueException
toString
normalizeInstant
Calendar
value
char
start
int
length
int
boolean
negative
boolean
tznegative
int
tzoffset
int
tzhh
tzmm
int
i
start
j
k
l
m
char
ms
Calendar
cal
GregorianCalendar
int
endindex
start
length
try
if
length
throw
ParseException
clear
setLenient
if
value
i
value
i
block
set
ERA
value
i
BC
AD
i
j
indexOf
value
i
i
if
j
j
endindex
throw
ParseException
i
set
YEAR
parseInt
value
i
j
i
i
j
set
MONTH
parseInt
value
i
i
if
value
i
throw
ParseException
i
set
DAY_OF_MONTH
parseInt
value
i
i
if
value
i
throw
ParseException
i
set
HOUR_OF_DAY
parseInt
value
i
i
if
value
i
throw
ParseException
i
set
MINUTE
parseInt
value
i
i
if
endindex
i
value
i
block
set
SECOND
parseInt
value
i
i
if
i
endindex
value
i
block
i
k
while
i
endindex
k
isDigit
value
i
ms
k
value
i
set
MILLISECOND
parseInt
ms
while
i
endindex
isDigit
value
i
i
if
i
endindex
block
if
value
i
block
set
ZONE_OFFSET
if
value
i
value
i
block
tznegative
value
i
tzhh
parseInt
value
i
if
endindex
i
block
if
value
i
throw
ParseException
i
tzmm
parseInt
value
i
tzoffset
tzhh
tzmm
set
ZONE_OFFSET
tznegative
tzoffset
tzoffset
throw
ParseException
i
return
cal
catchClause
e
printStackTrace
throw
InvalidDatatypeValueException
toString
clone
Object
throw
CloneNotSupportedException
getClass
getName
boundsCheck
f
long
boolean
inUpperBound
boolean
inLowerBound
if
isMaxInclusiveDefined
block
inUpperBound
f
fMaxInclusive
if
isMaxExclusiveDefined
block
inUpperBound
f
fMaxExclusive
if
isMinInclusiveDefined
block
inLowerBound
f
fMinInclusive
if
isMinExclusiveDefined
block
inLowerBound
f
fMinExclusive
if
inUpperBound
inLowerBound
block
throw
InvalidDatatypeFacetException
getErrorString
OutOfBounds
MSG_NONE
Object
Long
f
enumCheck
d
long
for
forControl
int
i
i
fEnumTimeDuration
length
i
block
if
d
fEnumTimeDuration
i
return
throw
InvalidDatatypeValueException
getErrorString
NotAnEnumValue
MSG_NONE
Object
Long
d
getErrorString
String
major
int
minor
int
args
Object
try
return
createMessage
fLocale
major
minor
args
catchClause
e
return
minor
indexOf
int
value
char
start
int
s
char
return
indexOf
value
start
s
length
indexOf
int
value
char
start
int
s
char
max
int
for
forControl
int
i
start
i
max
i
if
value
i
s
return
i
return
indexOneOf
int
value
char
start
int
s
String
return
indexOneOf
value
start
s
length
indexOneOf
int
value
char
start
int
s
String
max
int
for
forControl
int
i
start
i
max
i
for
forControl
int
j
j
length
j
if
value
i
charAt
j
return
i
return
parseInt
int
s
char
start
int
length
int
if
s
throw
NumberFormatException
int
radix
int
result
boolean
negative
int
i
start
int
limit
int
multmin
int
digit
if
length
throw
NumberFormatException
String
s
start
length
if
s
i
block
negative
limit
MIN_VALUE
i
if
s
i
block
negative
limit
MAX_VALUE
i
block
limit
MAX_VALUE
multmin
limit
radix
if
i
start
length
block
digit
digit
s
i
radix
if
digit
throw
NumberFormatException
String
s
start
length
result
digit
while
i
start
length
block
digit
digit
s
i
radix
if
digit
throw
NumberFormatException
String
s
start
length
if
result
multmin
throw
NumberFormatException
String
s
start
length
result
radix
if
result
limit
digit
throw
NumberFormatException
String
s
start
length
result
digit
if
negative
block
if
i
return
result
throw
NumberFormatException
String
s
start
length
return
result
AbstractDatatypeValidator
