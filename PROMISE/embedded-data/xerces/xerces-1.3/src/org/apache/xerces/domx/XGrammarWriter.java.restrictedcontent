XGrammarWriter
main
argv
String
DOMParser
parser
DOMParser
try
setFeature
catchClause
e
println
XGrammarWriter
writer
XGrammarWriter
if
length
block
printUsage
block
for
forControl
int
i
i
length
i
block
String
arg
argv
i
if
startsWith
block
if
equals
equals
block
setOutputFormat
DTD
continue
if
equals
equals
block
setOutputFormat
XML_SCHEMA
continue
if
equals
equals
block
setVerbose
continue
if
equals
equals
block
setVerbose
continue
if
equals
equals
block
printUsage
break
if
equals
block
if
i
length
block
println
break
arg
argv
i
block
println
arg
try
parse
arg
Document
document
getDocument
printGrammar
arg
getDoctype
catchClause
e
println
arg
printStackTrace
err
printUsage
println
println
println
println
println
println
println
println
println
println
OutputFormat
DEFAULT_OUTPUT_FORMAT
XML_SCHEMA
String
CONTENT_MODEL_ELEMENT_NAMES
String
PrintWriter
out
int
indent
OutputFormat
format
boolean
verbose
String
encoding
boolean
canonical
XGrammarWriter
out
XGrammarWriter
writer
PrintWriter
init
out
writer
XGrammarWriter
stream
OutputStream
init
try
out
PrintWriter
OutputStreamWriter
stream
encoding
catchClause
e
encoding
out
PrintWriter
stream
XGrammarWriter
writer
Writer
encoding
String
PrintWriter
writer
encoding
encoding
setOutputFormat
format
OutputFormat
format
format
getOutputFormat
OutputFormat
return
format
setVerbose
verbose
boolean
verbose
verbose
isVerbose
boolean
return
verbose
setCanonical
canonical
boolean
canonical
canonical
isCanonical
boolean
return
canonical
printGrammar
systemId
String
doctype
DocumentType
print
if
equals
XML_SCHEMA
block
print
String
gnidocne
reverse
encoding
if
gnidocne
block
gnidocne
print
print
gnidocne
print
print
flush
println
print
print
systemId
print
flush
if
doctype
block
return
Element
schema
getFirstChildElement
doctype
if
equals
DTD
block
println
Element
child
getFirstChildElement
schema
while
child
block
String
name
getNodeName
if
equals
block
printElementDecl
child
if
equals
block
printEntityDecl
child
if
equals
block
printEntityDecl
child
if
equals
block
printEntityDecl
child
if
equals
block
printNotationDecl
child
if
equals
block
printComment
child
child
getNextSiblingElement
child
return
if
equals
XML_SCHEMA
block
println
print
printElement
schema
println
flush
return
throw
IllegalArgumentException
format
printComment
comment
Element
Node
child
getFirstChild
if
child
block
println
printIndent
indent
while
child
block
if
getNodeType
TEXT_NODE
block
print
getNodeValue
child
getNextSibling
flush
printElement
element
Element
boolean
empty
isEmpty
element
if
empty
block
println
printIndent
indent
printEmptyElement
element
block
println
printIndent
indent
printOpenElement
element
Node
child
getFirstChild
int
type
while
child
block
type
getNodeType
if
type
ELEMENT_NODE
block
indent
printElement
Element
child
indent
if
type
TEXT_NODE
block
printText
Text
child
child
getNextSibling
if
type
TEXT_NODE
block
println
printIndent
indent
printCloseElement
element
flush
printIndent
level
int
for
forControl
int
i
i
level
i
block
print
flush
printOpenElement
element
Element
printOpenElement
element
printEmptyElement
element
Element
printOpenElement
element
printCloseElement
element
Element
print
print
getNodeName
print
flush
printAttribute
attribute
Attr
String
name
getNodeName
String
value
getNodeValue
print
name
print
print
print
normalize
value
print
printText
text
Text
String
value
getNodeValue
print
normalize
value
printElementDecl
element
Element
String
elemName
getAttribute
Element
model
getFirstChildElement
element
print
print
elemName
print
printElementDeclContentModel
model
print
println
flush
Element
archetype
getFirstChildElement
element
if
archetype
block
Element
attribute
getFirstChildElement
archetype
while
attribute
block
printAttributeDecl
elemName
attribute
attribute
getNextSiblingElement
attribute
printElementDeclContentModel
archetype
Element
String
content
getAttribute
if
equals
equals
block
print
toUpperCase
if
equals
block
printElementDeclContentModelChildren
archetype
if
equals
equals
block
printElementDeclContentModelMixed
archetype
flush
printElementDeclContentModelMixed
archetype
Element
Element
element
getFirstChildElement
archetype
boolean
textOnly
element
print
if
textOnly
block
while
element
block
String
elemName
getAttribute
print
print
elemName
element
getNextSiblingElement
element
print
if
textOnly
block
print
printElementDeclContentModelChildren
archetype
Element
boolean
simple
containsMoreThanOneChildOfType
archetype
String
getFirstChildElement
archetype
if
simple
block
print
Element
model
getFirstChildElement
archetype
CONTENT_MODEL_ELEMENT_NAMES
while
model
block
printElementDeclContentModelChildren0
model
model
getNextSiblingElement
model
CONTENT_MODEL_ELEMENT_NAMES
if
model
block
print
if
simple
block
print
printAttributeDecl
elemName
String
attribute
Element
String
attrName
getAttribute
String
attrType
getAttribute
Node
attrDefaultValueNode
getAttributeNode
print
print
elemName
print
print
attrName
print
if
isBasicAttributeType
attrType
block
Element
enumeration
getFirstChildElement
attribute
if
equals
enumeration
block
print
Element
literal
getFirstChildElement
enumeration
while
literal
block
normalize
Node
literalValueNode
getFirstChildOfType
literal
TEXT_NODE
String
literalValue
literalValueNode
getNodeValue
print
literalValue
literal
getNextSiblingElement
literal
if
literal
block
print
print
block
print
attrType
block
print
if
getAttribute
equals
block
print
if
getAttribute
length
block
String
attrFixedValue
getAttribute
print
print
print
normalize
attrFixedValue
print
if
attrDefaultValueNode
block
print
if
attrDefaultValueNode
block
String
attrDefaultValue
getNodeValue
print
print
print
normalize
attrDefaultValue
print
print
println
flush
printEntityDecl
entity
Element
String
entityNodeName
getNodeName
String
entityName
getAttribute
print
print
entityName
print
if
equals
block
normalize
Node
entityValueNode
getFirstChildOfType
entity
TEXT_NODE
String
entityValue
entityValueNode
getNodeValue
print
print
normalize
entityValue
print
block
String
publicId
getAttribute
String
systemId
getAttribute
if
length
block
print
print
print
publicId
print
print
print
print
systemId
print
if
length
block
print
print
print
systemId
print
if
equals
block
String
notationName
getAttribute
print
print
notationName
print
println
flush
printNotationDecl
notation
Element
String
notationName
getAttribute
String
publicId
getAttribute
String
systemId
getAttribute
print
print
notationName
print
if
length
block
print
print
print
publicId
print
if
length
block
print
print
print
systemId
print
if
length
block
print
print
print
systemId
print
print
println
flush
printOpenElement
element
Element
empty
boolean
print
print
getNodeName
NamedNodeMap
attrs
getAttributes
int
length
getLength
for
forControl
int
i
i
length
i
block
Attr
attribute
Attr
item
i
if
verbose
getSpecified
block
print
printAttribute
attribute
if
empty
block
print
print
flush
isEmpty
boolean
element
Element
if
hasChildNodes
block
return
Node
child
getFirstChild
while
child
block
int
type
getNodeType
if
type
ELEMENT_NODE
type
TEXT_NODE
block
return
child
getNextSibling
return
isBasicAttributeType
boolean
type
String
return
equals
equals
equals
equals
equals
equals
equals
isBasicOccurrenceCount
boolean
minOccurs
String
maxOccurs
String
int
min
parseInt
minOccurs
int
max
parseInt
maxOccurs
return
min
max
min
max
min
max
min
max
parseInt
int
s
String
defaultValue
int
if
s
length
block
return
defaultValue
try
return
parseInt
s
catchClause
e
return
containsMoreThanOneChildOfType
boolean
node
Element
names
String
int
count
Element
child
getFirstChildElement
node
names
while
child
block
count
child
getNextSiblingElement
child
names
return
count
getFirstChildOfType
Node
node
Node
type
short
if
node
block
Node
child
getFirstChild
while
child
block
if
getNodeType
type
block
return
child
child
getNextSibling
return
getNextSiblingOfType
Node
node
Node
type
short
if
node
block
Node
child
getNextSibling
while
child
block
if
getNodeType
type
block
return
child
child
getNextSibling
return
normalize
String
s
String
StringBuffer
str
StringBuffer
int
len
s
length
for
forControl
int
i
i
len
i
block
char
ch
charAt
i
switch
ch
case
block
append
break
case
block
append
break
case
block
append
break
case
block
append
break
case
block
append
ch
return
toString
init
indent
verbose
format
XML_SCHEMA
encoding
canonical
printElementDeclContentModelChildren0
model
Element
String
modelNodeName
getNodeName
if
equals
block
String
s
buildOccurrenceCountString
getAttribute
getAttribute
getAttribute
print
s
block
char
separator
String
order
getAttribute
if
equals
block
separator
if
equals
block
separator
StringWriter
writer
StringWriter
PrintWriter
printer
PrintWriter
writer
PrintWriter
oprinter
out
out
printer
print
Element
child
getFirstChildElement
model
CONTENT_MODEL_ELEMENT_NAMES
while
child
block
printElementDeclContentModelChildren0
child
child
getNextSiblingElement
child
CONTENT_MODEL_ELEMENT_NAMES
if
child
block
print
separator
print
String
output
toString
if
separator
block
if
startsWith
endsWith
block
output
substring
length
output
expandAllModel
output
output
buildOccurrenceCountString
output
getAttribute
getAttribute
out
oprinter
print
output
expandAllModel
String
model
String
Vector
piecesVector
Vector
StringTokenizer
tokenizer
StringTokenizer
model
while
hasMoreTokens
block
String
piece
nextToken
addElement
piece
int
length
size
if
length
block
String
pieces
String
length
for
forControl
int
i
i
length
i
block
pieces
i
String
elementAt
i
String
allModel
buildAllModel
pieces
return
allModel
return
model
buildAllModel
String
src
String
offset
int
if
length
offset
block
StringBuffer
str
StringBuffer
append
createSeq
src
swap
src
offset
offset
append
append
createSeq
src
swap
src
offset
offset
return
toString
String
copy
String
length
StringBuffer
str
StringBuffer
for
forControl
int
i
offset
i
length
i
block
arraycopy
src
copy
length
shift
copy
offset
i
append
buildAllModel
copy
offset
if
i
length
block
append
return
toString
createSeq
String
src
String
StringBuffer
str
StringBuffer
append
for
forControl
int
i
i
length
i
block
append
src
i
if
i
length
block
append
append
return
toString
shift
src
String
pos
int
offset
int
String
temp
src
offset
for
forControl
int
i
offset
i
pos
i
block
src
i
src
i
src
pos
temp
swap
src
String
i
int
j
int
String
temp
src
i
src
i
src
j
src
j
temp
buildOccurrenceCountString
String
model
String
minOccurs
String
maxOccurs
String
int
min
parseInt
minOccurs
int
max
parseInt
maxOccurs
boolean
bounded
if
max
block
max
min
bounded
StringBuffer
str
StringBuffer
if
min
max
bounded
block
append
model
append
if
min
max
bounded
block
append
model
append
if
min
max
bounded
block
append
model
append
if
min
max
bounded
block
append
model
block
append
for
forControl
int
i
i
min
i
block
append
model
if
i
min
block
append
if
max
min
block
for
forControl
int
i
min
i
max
i
block
append
append
model
append
if
bounded
block
append
append
model
append
append
return
toString
OutputFormat
OutputFormat
DTD
OutputFormat
OutputFormat
XML_SCHEMA
OutputFormat
int
value
OutputFormat
value
int
value
value
getValue
int
return
value
hashCode
int
return
value
equals
boolean
object
Object
if
object
getClass
getClass
block
return
return
value
OutputFormat
object
toString
String
if
DTD
block
return
if
XML_SCHEMA
block
return
return
