MockEndpoint
Log
log
getLog
MockEndpoint
int
expectedCount
Map
Integer
Processor
processors
HashMap
Integer
Processor
List
Exchange
receivedExchanges
ArrayList
Exchange
List
Throwable
failures
ArrayList
Throwable
List
Runnable
tests
ArrayList
Runnable
CountDownLatch
latch
long
sleepForEmptyTest
int
expectedMinimumCount
assertWait
timeout
long
unit
TimeUnit
endpoints
MockEndpoint
long
start
currentTimeMillis
long
left
toMillis
timeout
long
end
start
left
for
MockEndpoint
endpoint
endpoints
block
if
await
left
MILLISECONDS
throw
AssertionError
getEndpointUri
left
end
currentTimeMillis
if
left
left
assertIsSatisfied
timeout
long
unit
TimeUnit
endpoints
MockEndpoint
assertWait
timeout
unit
endpoints
for
MockEndpoint
endpoint
endpoints
block
assertIsSatisfied
assertIsSatisfied
endpoints
MockEndpoint
for
MockEndpoint
endpoint
endpoints
block
assertIsSatisfied
expectsMessageCount
count
int
endpoints
MockEndpoint
for
MockEndpoint
endpoint
endpoints
block
expectsMessageCount
count
MockEndpoint
endpointUri
String
component
Component
endpointUri
component
createExchange
Exchange
return
DefaultExchange
getContext
createConsumer
Consumer
Exchange
processor
Processor
throw
UnsupportedOperationException
createProducer
Producer
Exchange
return
DefaultProducer
Exchange
process
exchange
Exchange
onExchange
exchange
assertIsSatisfied
assertIsSatisfied
sleepForEmptyTest
assertIsSatisfied
timeoutForEmptyEndpoints
long
if
latch
block
await
SECONDS
if
expectedCount
block
if
timeoutForEmptyEndpoints
block
sleep
timeoutForEmptyEndpoints
if
expectedCount
block
int
receivedCounter
getReceivedCounter
assertEquals
expectedCount
receivedCounter
if
expectedMinimumCount
block
int
receivedCounter
getReceivedCounter
assertTrue
receivedCounter
expectedCount
expectedCount
receivedCounter
for
Runnable
test
tests
block
run
for
Throwable
failure
failures
block
if
failure
block
error
getEndpointUri
failure
failure
fail
failure
expectedMessageCount
expectedCount
int
expectedCount
expectedCount
if
expectedCount
block
latch
block
latch
CountDownLatch
expectedCount
expectedMinimumMessageCount
expectedCount
int
expectedMinimumCount
expectedCount
if
expectedCount
block
latch
block
latch
CountDownLatch
expectedMinimumCount
expectedBodiesReceived
bodies
List
expectedMessageCount
size
expects
Runnable
run
int
counter
for
Object
expectedBody
bodies
block
Exchange
exchange
getReceivedExchanges
get
counter
assertTrue
counter
exchange
Message
in
getIn
Object
actualBody
expectedBody
getBody
getClass
getBody
assertEquals
counter
expectedBody
actualBody
debug
getEndpointUri
counter
actualBody
expectedBodiesReceived
bodies
Object
List
bodyList
ArrayList
for
Object
body
bodies
block
add
body
expectedBodiesReceived
bodyList
expects
runnable
Runnable
add
runnable
message
AssertionClause
messageIndex
int
AssertionClause
clause
AssertionClause
run
applyAssertionOn
messageIndex
assertExchangeReceived
messageIndex
expects
clause
return
clause
allMessages
AssertionClause
AssertionClause
clause
AssertionClause
run
List
Exchange
list
getReceivedExchanges
int
index
for
Exchange
exchange
list
block
applyAssertionOn
index
exchange
expects
clause
return
clause
assertExchangeReceived
Exchange
index
int
int
count
getReceivedCounter
assertTrue
count
count
index
return
getReceivedExchanges
get
index
getFailures
List
Throwable
return
failures
getReceivedCounter
int
return
getReceivedExchanges
size
getReceivedExchanges
List
Exchange
return
receivedExchanges
getExpectedCount
int
return
expectedCount
getSleepForEmptyTest
long
return
sleepForEmptyTest
setSleepForEmptyTest
sleepForEmptyTest
long
sleepForEmptyTest
sleepForEmptyTest
onExchange
exchange
Exchange
try
debug
getEndpointUri
exchange
add
exchange
Processor
processor
get
getReceivedCounter
if
processor
block
process
exchange
if
latch
block
countDown
catchClause
e
add
e
assertEquals
message
String
expectedValue
Object
actualValue
Object
if
equals
expectedValue
actualValue
block
fail
message
expectedValue
actualValue
assertTrue
message
String
predicate
boolean
if
predicate
block
fail
message
fail
message
Object
throw
AssertionError
getEndpointUri
message
getExpectedMinimumCount
int
return
expectedMinimumCount
await
if
latch
block
await
await
boolean
timeout
long
unit
TimeUnit
if
latch
block
return
await
timeout
unit
return
isSingleton
boolean
return
DefaultEndpoint
Exchange
