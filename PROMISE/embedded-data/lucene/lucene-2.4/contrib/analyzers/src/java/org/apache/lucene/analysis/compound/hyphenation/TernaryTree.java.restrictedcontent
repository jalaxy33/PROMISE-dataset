TernaryTree
char
lo
char
hi
char
eq
char
sc
CharVector
kv
char
root
char
freenode
int
length
int
BLOCK_SIZE
TernaryTree
init
init
root
freenode
length
lo
char
BLOCK_SIZE
hi
char
BLOCK_SIZE
eq
char
BLOCK_SIZE
sc
char
BLOCK_SIZE
kv
CharVector
insert
key
String
val
char
int
len
length
if
freenode
len
length
block
redimNodeArrays
length
BLOCK_SIZE
char
strkey
char
len
getChars
len
strkey
strkey
len
root
insert
root
strkey
val
insert
key
char
start
int
val
char
int
len
strlen
key
if
freenode
len
length
block
redimNodeArrays
length
BLOCK_SIZE
root
insert
root
key
start
val
insert
char
p
char
key
char
start
int
val
char
int
len
strlen
key
start
if
p
block
p
freenode
eq
p
val
length
hi
p
if
len
block
sc
p
lo
p
char
alloc
len
strcpy
getArray
lo
p
key
start
block
sc
p
lo
p
return
p
if
sc
p
block
char
pp
freenode
lo
pp
lo
p
eq
pp
eq
p
lo
p
if
len
block
sc
p
get
lo
pp
eq
p
pp
lo
pp
if
get
lo
pp
block
lo
pp
sc
pp
hi
pp
block
sc
pp
block
sc
pp
hi
p
pp
sc
p
eq
p
val
length
return
p
char
s
key
start
if
s
sc
p
block
lo
p
insert
lo
p
key
start
val
if
s
sc
p
block
if
s
block
eq
p
insert
eq
p
key
start
val
block
eq
p
val
block
hi
p
insert
hi
p
key
start
val
return
p
strcmp
int
a
char
startA
int
b
char
startB
int
for
forControl
a
startA
b
startB
startA
startB
block
if
a
startA
block
return
return
a
startA
b
startB
strcmp
int
str
String
a
char
start
int
int
i
d
len
length
for
forControl
i
i
len
i
block
d
int
charAt
i
a
start
i
if
d
block
return
d
if
a
start
i
block
return
d
if
a
start
i
block
return
int
a
start
i
return
strcpy
dst
char
di
int
src
char
si
int
while
src
si
block
dst
di
src
si
dst
di
strlen
int
a
char
start
int
int
len
for
forControl
int
i
start
i
length
a
i
i
block
len
return
len
strlen
int
a
char
return
strlen
a
find
int
key
String
int
len
length
char
strkey
char
len
getChars
len
strkey
strkey
len
return
find
strkey
find
int
key
char
start
int
int
d
char
p
root
int
i
start
char
c
while
p
block
if
sc
p
block
if
strcmp
key
i
getArray
lo
p
block
return
eq
p
block
return
c
key
i
d
c
sc
p
if
d
block
if
c
block
return
eq
p
i
p
eq
p
if
d
block
p
lo
p
block
p
hi
p
return
knows
boolean
key
String
return
find
key
redimNodeArrays
newsize
int
int
len
newsize
length
newsize
length
char
na
char
newsize
arraycopy
lo
na
len
lo
na
na
char
newsize
arraycopy
hi
na
len
hi
na
na
char
newsize
arraycopy
eq
na
len
eq
na
na
char
newsize
arraycopy
sc
na
len
sc
na
size
int
return
length
clone
Object
TernaryTree
t
TernaryTree
lo
char
lo
clone
hi
char
hi
clone
eq
char
eq
clone
sc
char
sc
clone
kv
CharVector
kv
clone
root
root
freenode
freenode
length
length
return
t
insertBalanced
k
String
v
char
offset
int
n
int
int
m
if
n
block
return
m
n
insert
k
m
offset
v
m
offset
insertBalanced
k
v
offset
m
insertBalanced
k
v
offset
m
n
m
balance
int
i
n
length
String
k
String
n
char
v
char
n
Iterator
iter
Iterator
while
hasMoreElements
block
v
i
getValue
k
i
String
nextElement
init
insertBalanced
k
v
n
trimToSize
balance
redimNodeArrays
freenode
CharVector
kx
CharVector
alloc
TernaryTree
map
TernaryTree
compact
kx
map
root
kv
kx
trimToSize
compact
kx
CharVector
map
TernaryTree
p
char
int
k
if
p
block
return
if
sc
p
block
k
find
getArray
lo
p
if
k
block
k
alloc
strlen
getArray
lo
p
strcpy
getArray
k
getArray
lo
p
insert
getArray
k
char
k
lo
p
char
k
block
compact
kx
map
lo
p
if
sc
p
block
compact
kx
map
eq
p
compact
kx
map
hi
p
keys
Enumeration
return
Iterator
Iterator
int
cur
String
curkey
Item
char
parent
char
child
Item
parent
child
Item
p
char
c
char
parent
p
child
c
clone
Object
return
Item
parent
child
Cloneable
Stack
ns
StringBuffer
ks
Iterator
cur
ns
Stack
ks
StringBuffer
rewind
rewind
removeAllElements
setLength
cur
root
run
nextElement
Object
String
res
String
curkey
cur
up
run
return
res
getValue
char
if
cur
block
return
eq
cur
return
hasMoreElements
boolean
return
cur
up
int
Item
i
Item
int
res
if
empty
block
return
if
cur
sc
cur
block
return
lo
cur
boolean
climb
while
climb
block
i
Item
pop
child
switch
child
case
if
sc
parent
block
res
eq
parent
push
clone
append
sc
parent
block
child
push
clone
res
hi
parent
climb
break
case
res
hi
parent
push
clone
if
length
block
setLength
length
climb
break
case
if
empty
block
return
climb
break
return
res
run
int
if
cur
block
return
boolean
leaf
while
block
while
cur
block
if
sc
cur
block
leaf
break
push
Item
char
cur
if
sc
cur
block
leaf
break
cur
lo
cur
if
leaf
block
break
cur
up
if
cur
block
return
StringBuffer
buf
StringBuffer
toString
if
sc
cur
block
int
p
lo
cur
while
get
p
block
append
get
p
curkey
toString
return
Enumeration
printStats
println
toString
length
println
toString
freenode
println
toString
length
main
args
String
TernaryTree
tt
TernaryTree
insert
insert
insert
insert
trimToSize
println
char
find
println
char
find
println
char
find
printStats
Cloneable
Serializable
