PorterStemmer
char
b
int
i
j
k
k0
boolean
dirty
int
INC
int
EXTRA
PorterStemmer
b
char
INC
i
reset
i
dirty
add
ch
char
if
length
i
EXTRA
block
char
new_b
char
length
INC
for
forControl
int
c
c
length
c
new_b
c
b
c
b
new_b
b
i
ch
toString
String
return
String
b
i
getResultLength
int
return
i
getResultBuffer
char
return
b
cons
boolean
i
int
switch
b
i
case
return
case
return
i
k0
cons
i
case
return
m
int
int
n
int
i
k0
while
block
if
i
j
return
n
if
cons
i
break
i
i
while
block
while
block
if
i
j
return
n
if
cons
i
break
i
i
n
while
block
if
i
j
return
n
if
cons
i
break
i
i
vowelinstem
boolean
int
i
for
forControl
i
k0
i
j
i
if
cons
i
return
return
doublec
boolean
j
int
if
j
k0
return
if
b
j
b
j
return
return
cons
j
cvc
boolean
i
int
if
i
k0
cons
i
cons
i
cons
i
return
block
int
ch
b
i
if
ch
ch
ch
return
return
ends
boolean
s
String
int
l
length
int
o
k
l
if
o
k0
return
for
forControl
int
i
i
l
i
if
b
o
i
charAt
i
return
j
k
l
return
setto
s
String
int
l
length
int
o
j
for
forControl
int
i
i
l
i
b
o
i
charAt
i
k
j
l
dirty
r
s
String
if
m
setto
s
step1
if
b
k
block
if
ends
k
if
ends
setto
if
b
k
k
if
ends
block
if
m
k
if
ends
ends
vowelinstem
block
k
j
if
ends
setto
if
ends
setto
if
ends
setto
if
doublec
k
block
int
ch
b
k
if
ch
ch
ch
k
if
m
cvc
k
setto
step2
if
ends
vowelinstem
block
b
k
dirty
step3
if
k
k0
return
switch
b
k
case
if
ends
block
r
break
if
ends
block
r
break
break
case
if
ends
block
r
break
if
ends
block
r
break
break
case
if
ends
block
r
break
break
case
if
ends
block
r
break
if
ends
block
r
break
if
ends
block
r
break
if
ends
block
r
break
if
ends
block
r
break
break
case
if
ends
block
r
break
if
ends
block
r
break
if
ends
block
r
break
break
case
if
ends
block
r
break
if
ends
block
r
break
if
ends
block
r
break
if
ends
block
r
break
break
case
if
ends
block
r
break
if
ends
block
r
break
if
ends
block
r
break
break
case
if
ends
block
r
break
step4
switch
b
k
case
if
ends
block
r
break
if
ends
block
r
break
if
ends
block
r
break
break
case
if
ends
block
r
break
break
case
if
ends
block
r
break
if
ends
block
r
break
break
case
if
ends
block
r
break
break
step5
if
k
k0
return
switch
b
k
case
if
ends
break
return
case
if
ends
break
if
ends
break
return
case
if
ends
break
return
case
if
ends
break
return
case
if
ends
break
if
ends
break
return
case
if
ends
break
if
ends
break
if
ends
break
if
ends
break
return
case
if
ends
j
b
j
b
j
break
if
ends
break
return
case
if
ends
break
return
case
if
ends
break
if
ends
break
return
case
if
ends
break
return
case
if
ends
break
return
case
if
ends
break
return
case
return
if
m
k
j
step6
j
k
if
b
k
block
int
a
m
if
a
a
cvc
k
k
if
b
k
doublec
k
m
k
stem
String
s
String
if
stem
toCharArray
length
return
toString
return
s
stem
boolean
word
char
return
stem
word
length
stem
boolean
wordBuffer
char
offset
int
wordLen
int
reset
if
length
wordLen
block
char
new_b
char
wordLen
EXTRA
b
new_b
for
forControl
int
j
j
wordLen
j
b
j
wordBuffer
offset
j
i
wordLen
return
stem
stem
boolean
word
char
wordLen
int
return
stem
word
wordLen
stem
boolean
return
stem
stem
boolean
i0
int
k
i
k0
i0
if
k
k0
block
step1
step2
step3
step4
step5
step6
if
i
k
dirty
i
k
return
dirty
main
args
String
PorterStemmer
s
PorterStemmer
for
forControl
int
i
i
length
i
block
try
InputStream
in
FileInputStream
args
i
byte
buffer
byte
int
bufferLen
offset
ch
bufferLen
read
buffer
offset
reset
while
block
if
offset
bufferLen
ch
buffer
offset
block
bufferLen
read
buffer
offset
if
bufferLen
ch
ch
buffer
offset
if
isLetter
char
ch
block
add
toLowerCase
char
ch
block
stem
print
toString
reset
if
ch
break
block
print
char
ch
close
catchClause
e
println
args
i
