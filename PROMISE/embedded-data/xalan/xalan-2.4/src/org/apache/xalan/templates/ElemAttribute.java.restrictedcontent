ElemAttribute
getXSLToken
int
return
ELEMNAME_ATTRIBUTE
getNodeName
String
return
ELEMNAME_ATTRIBUTE_STRING
execute
transformer
TransformerImpl
ResultTreeHandler
rhandler
getResultTreeHandler
if
isElementPending
block
if
S_DEBUG
getTraceManager
fireTraceEvent
XPathContext
xctxt
getXPathContext
int
sourceNode
getCurrentNode
String
attrName
evaluate
xctxt
sourceNode
getMsgMgr
warn
WG_ILLEGAL_ATTRIBUTE
Object
attrName
if
S_DEBUG
getTraceManager
fireTraceEndEvent
return
execute
transformer
resolvePrefix
String
rhandler
ResultTreeHandler
prefix
String
nodeNamespace
String
if
prefix
length
equals
block
prefix
getPrefix
nodeNamespace
if
prefix
length
equals
block
if
length
block
prefix
getNewUniqueNSPrefix
prefix
return
prefix
validateNodeName
boolean
nodeName
String
if
nodeName
return
if
equals
return
return
validateNodeName
nodeName
constructNode
nodeName
String
prefix
String
nodeNamespace
String
transformer
TransformerImpl
if
nodeName
length
block
ResultTreeHandler
rhandler
getResultTreeHandler
if
prefix
length
block
try
startPrefixMapping
prefix
nodeNamespace
catchClause
se
throw
TransformerException
se
String
val
transformToString
String
localName
getLocalPart
nodeName
addAttribute
nodeNamespace
localName
nodeName
val
appendChild
ElemTemplateElement
newChild
ElemTemplateElement
int
type
ElemTemplateElement
newChild
switch
type
case
ELEMNAME_TEXTLITERALRESULT
ELEMNAME_APPLY_TEMPLATES
ELEMNAME_APPLY_IMPORTS
ELEMNAME_CALLTEMPLATE
ELEMNAME_FOREACH
ELEMNAME_VALUEOF
ELEMNAME_COPY_OF
ELEMNAME_NUMBER
ELEMNAME_CHOOSE
ELEMNAME_IF
ELEMNAME_TEXT
ELEMNAME_COPY
ELEMNAME_VARIABLE
ELEMNAME_MESSAGE
break
case
error
ER_CANNOT_ADD
Object
getNodeName
getNodeName
return
appendChild
newChild
setName
v
AVT
if
isSimple
block
if
getSimpleString
equals
block
throw
IllegalArgumentException
setName
v
ElemElement
