Messages
Locale
m_locale
getDefault
ListResourceBundle
m_resourceBundle
String
m_resourceBundleName
Messages
resourceBundle
String
m_resourceBundleName
resourceBundle
getLocale
Locale
return
m_locale
getResourceBundle
ListResourceBundle
return
m_resourceBundle
createMessage
String
msgKey
String
args
Object
if
m_resourceBundle
m_resourceBundle
loadResourceBundle
m_resourceBundleName
if
m_resourceBundle
block
return
createMsg
m_resourceBundle
msgKey
args
return
m_resourceBundleName
createMsg
String
fResourceBundle
ListResourceBundle
msgKey
String
args
Object
String
fmsg
boolean
throwex
String
msg
if
msgKey
msg
getString
msgKey
msgKey
if
msg
block
throwex
try
msg
format
BAD_MSGKEY
Object
msgKey
m_resourceBundleName
catchClause
e
msg
msgKey
m_resourceBundleName
if
args
block
try
int
n
length
for
forControl
int
i
i
n
i
block
if
args
i
args
i
fmsg
format
msg
args
catchClause
e
throwex
try
fmsg
format
BAD_MSGFORMAT
Object
msgKey
m_resourceBundleName
fmsg
msg
catchClause
formatfailed
fmsg
msgKey
m_resourceBundleName
fmsg
msg
if
throwex
block
throw
RuntimeException
fmsg
return
fmsg
loadResourceBundle
ListResourceBundle
resourceBundle
String
m_resourceBundleName
resourceBundle
Locale
locale
getLocale
ListResourceBundle
lrb
try
ResourceBundle
rb
getBundle
m_resourceBundleName
locale
lrb
ListResourceBundle
rb
catchClause
e
try
lrb
ListResourceBundle
getBundle
m_resourceBundleName
Locale
catchClause
e2
throw
MissingResourceException
m_resourceBundleName
m_resourceBundleName
m_resourceBundle
lrb
return
lrb
getResourceSuffix
String
locale
Locale
String
suffix
getLanguage
String
country
getCountry
if
equals
suffix
country
return
suffix
