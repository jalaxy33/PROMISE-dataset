RedundentExprEliminator
Vector
m_paths
Vector
m_absPaths
boolean
m_isSameContext
AbsPathChecker
m_absPathChecker
AbsPathChecker
int
m_uniquePseudoVarID
String
PSUEDOVARNAMESPACE
S_VENDORURL
boolean
DEBUG
boolean
DIAGNOSE_NUM_PATHS_REDUCED
boolean
DIAGNOSE_MULTISTEPLIST
VarNameCollector
m_varNameCollector
VarNameCollector
RedundentExprEliminator
m_isSameContext
m_absPaths
Vector
m_paths
eleminateRedundentLocals
psuedoVarRecipient
ElemTemplateElement
eleminateRedundent
psuedoVarRecipient
m_paths
eleminateRedundentGlobals
stylesheet
StylesheetRoot
eleminateRedundent
stylesheet
m_absPaths
eleminateRedundent
psuedoVarRecipient
ElemTemplateElement
paths
Vector
int
n
size
int
numPathsEliminated
int
numUniquePathsEliminated
for
forControl
int
i
i
n
i
block
ExpressionOwner
owner
ExpressionOwner
elementAt
i
if
owner
block
int
found
findAndEliminateRedundant
i
i
owner
psuedoVarRecipient
paths
if
found
numUniquePathsEliminated
numPathsEliminated
found
eleminateSharedPartialPaths
psuedoVarRecipient
paths
if
DIAGNOSE_NUM_PATHS_REDUCED
diagnoseNumPaths
paths
numPathsEliminated
numUniquePathsEliminated
eleminateSharedPartialPaths
psuedoVarRecipient
ElemTemplateElement
paths
Vector
MultistepExprHolder
list
createMultistepExprList
paths
if
list
block
if
DIAGNOSE_MULTISTEPLIST
diagnose
boolean
isGlobal
paths
m_absPaths
int
longestStepsCount
m_stepCount
for
forControl
int
i
longestStepsCount
i
i
block
MultistepExprHolder
next
list
while
next
block
if
m_stepCount
i
break
list
matchAndEliminatePartialPaths
next
list
isGlobal
i
psuedoVarRecipient
next
m_next
matchAndEliminatePartialPaths
MultistepExprHolder
testee
MultistepExprHolder
head
MultistepExprHolder
isGlobal
boolean
lengthToTest
int
varScope
ElemTemplateElement
if
m_exprOwner
return
head
WalkingIterator
iter1
WalkingIterator
getExpression
if
partialIsVariable
testee
lengthToTest
return
head
MultistepExprHolder
matchedPaths
MultistepExprHolder
matchedPathsTail
MultistepExprHolder
meh
head
while
meh
block
if
meh
testee
m_exprOwner
block
WalkingIterator
iter2
WalkingIterator
getExpression
if
stepsEqual
iter1
iter2
lengthToTest
block
if
matchedPaths
block
try
matchedPaths
MultistepExprHolder
clone
m_exprOwner
catchClause
cnse
matchedPathsTail
matchedPaths
m_next
try
m_next
MultistepExprHolder
clone
m_exprOwner
catchClause
cnse
matchedPathsTail
m_next
m_next
meh
m_next
int
matchCount
if
matchedPaths
block
ElemTemplateElement
root
isGlobal
varScope
findCommonAncestor
matchedPaths
WalkingIterator
sharedIter
WalkingIterator
getExpression
WalkingIterator
newIter
createIteratorFromSteps
sharedIter
lengthToTest
ElemVariable
var
createPseudoVarDecl
root
newIter
isGlobal
if
DIAGNOSE_MULTISTEPLIST
println
getName
isGlobal
while
matchedPaths
block
ExpressionOwner
owner
m_exprOwner
WalkingIterator
iter
WalkingIterator
getExpression
if
DIAGNOSE_MULTISTEPLIST
diagnoseLineNumber
iter
LocPathIterator
newIter2
changePartToRef
getName
iter
lengthToTest
isGlobal
setExpression
newIter2
matchedPaths
m_next
if
DIAGNOSE_MULTISTEPLIST
diagnoseMultistepList
matchCount
lengthToTest
isGlobal
return
head
partialIsVariable
boolean
testee
MultistepExprHolder
lengthToTest
int
if
lengthToTest
block
WalkingIterator
wi
WalkingIterator
getExpression
if
getFirstWalker
FilterExprWalker
return
return
diagnoseLineNumber
expr
Expression
ElemTemplateElement
e
getElemFromExpression
expr
println
getSystemId
getLineNumber
findCommonAncestor
ElemTemplateElement
head
MultistepExprHolder
int
numExprs
getLength
ElemTemplateElement
elems
ElemTemplateElement
numExprs
int
ancestorCounts
int
numExprs
MultistepExprHolder
next
head
int
shortestAncestorCount
for
forControl
int
i
i
numExprs
i
block
ElemTemplateElement
elem
getElemFromExpression
getExpression
elems
i
elem
int
numAncestors
countAncestors
elem
ancestorCounts
i
numAncestors
if
numAncestors
shortestAncestorCount
block
shortestAncestorCount
numAncestors
next
m_next
for
forControl
int
i
i
numExprs
i
block
if
ancestorCounts
i
shortestAncestorCount
block
int
numStepCorrection
ancestorCounts
i
shortestAncestorCount
for
forControl
int
j
j
numStepCorrection
j
block
elems
i
elems
i
getParentElem
ElemTemplateElement
first
while
shortestAncestorCount
block
boolean
areEqual
first
elems
for
forControl
int
i
i
numExprs
i
block
if
first
elems
i
block
areEqual
break
if
areEqual
isNotSameAsOwner
head
first
canAcceptVariables
block
if
DIAGNOSE_MULTISTEPLIST
block
print
getClass
getName
println
getSystemId
getLineNumber
return
first
for
forControl
int
i
i
numExprs
i
block
elems
i
elems
i
getParentElem
assertion
return
isNotSameAsOwner
boolean
head
MultistepExprHolder
ete
ElemTemplateElement
MultistepExprHolder
next
head
while
next
block
ElemTemplateElement
elemOwner
getElemFromExpression
getExpression
if
elemOwner
ete
return
next
m_next
return
countAncestors
int
elem
ElemTemplateElement
int
count
while
elem
block
count
elem
getParentElem
return
count
diagnoseMultistepList
matchCount
int
lengthToTest
int
isGlobal
boolean
if
matchCount
block
print
matchCount
lengthToTest
if
isGlobal
println
println
changePartToRef
LocPathIterator
uniquePseudoVarName
QName
wi
WalkingIterator
numSteps
int
isGlobal
boolean
Variable
var
Variable
setQName
uniquePseudoVarName
setIsGlobal
isGlobal
if
isGlobal
block
ElemTemplateElement
elem
getElemFromExpression
wi
StylesheetRoot
root
getStylesheetRoot
Vector
vars
getVariablesAndParamsComposed
setIndex
size
AxesWalker
walker
getFirstWalker
for
forControl
int
i
i
numSteps
i
block
assertion
walker
walker
getNextWalker
if
walker
block
FilterExprWalker
few
FilterExprWalker
wi
setInnerExpression
var
exprSetParent
wi
setNextWalker
walker
setPrevWalker
few
setFirstWalker
few
return
wi
block
FilterExprIteratorSimple
feis
FilterExprIteratorSimple
var
exprSetParent
exprGetParent
return
feis
createIteratorFromSteps
WalkingIterator
wi
WalkingIterator
numSteps
int
WalkingIterator
newIter
WalkingIterator
getPrefixResolver
try
AxesWalker
walker
AxesWalker
getFirstWalker
clone
setFirstWalker
walker
setLocPathIterator
newIter
for
forControl
int
i
i
numSteps
i
block
AxesWalker
next
AxesWalker
getNextWalker
clone
setNextWalker
next
setLocPathIterator
newIter
walker
next
setNextWalker
catchClause
cnse
throw
WrappedRuntimeException
cnse
return
newIter
stepsEqual
boolean
iter1
WalkingIterator
iter2
WalkingIterator
numSteps
int
AxesWalker
aw1
getFirstWalker
AxesWalker
aw2
getFirstWalker
for
forControl
int
i
i
numSteps
i
block
if
aw1
aw2
return
if
deepEquals
aw2
return
aw1
getNextWalker
aw2
getNextWalker
assertion
aw1
aw2
return
createMultistepExprList
MultistepExprHolder
paths
Vector
MultistepExprHolder
first
int
n
size
for
forControl
int
i
i
n
i
block
ExpressionOwner
eo
ExpressionOwner
elementAt
i
if
eo
continue
LocPathIterator
lpi
LocPathIterator
getExpression
int
numPaths
countSteps
lpi
if
numPaths
block
if
first
first
MultistepExprHolder
eo
numPaths
first
addInSortedOrder
eo
numPaths
if
first
getLength
return
return
first
findAndEliminateRedundant
int
start
int
firstOccuranceIndex
int
firstOccuranceOwner
ExpressionOwner
psuedoVarRecipient
ElemTemplateElement
paths
Vector
MultistepExprHolder
head
MultistepExprHolder
tail
int
numPathsFound
int
n
size
Expression
expr1
getExpression
if
DEBUG
assertIsLocPathIterator
expr1
firstOccuranceOwner
boolean
isGlobal
paths
m_absPaths
LocPathIterator
lpi
LocPathIterator
expr1
int
stepCount
countSteps
lpi
for
forControl
int
j
start
j
n
j
block
ExpressionOwner
owner2
ExpressionOwner
elementAt
j
if
owner2
block
Expression
expr2
getExpression
boolean
isEqual
deepEquals
lpi
if
isEqual
block
LocPathIterator
lpi2
LocPathIterator
expr2
if
head
block
head
MultistepExprHolder
firstOccuranceOwner
stepCount
tail
head
numPathsFound
m_next
MultistepExprHolder
owner2
stepCount
tail
m_next
setElementAt
j
numPathsFound
if
numPathsFound
isGlobal
block
head
MultistepExprHolder
firstOccuranceOwner
stepCount
numPathsFound
if
head
block
ElemTemplateElement
root
isGlobal
psuedoVarRecipient
findCommonAncestor
head
LocPathIterator
sharedIter
LocPathIterator
getExpression
ElemVariable
var
createPseudoVarDecl
root
sharedIter
isGlobal
if
DIAGNOSE_MULTISTEPLIST
println
getName
isGlobal
QName
uniquePseudoVarName
getName
while
head
block
ExpressionOwner
owner
m_exprOwner
if
DIAGNOSE_MULTISTEPLIST
diagnoseLineNumber
getExpression
changeToVarRef
uniquePseudoVarName
owner
paths
root
head
m_next
setElementAt
getSelect
firstOccuranceIndex
return
numPathsFound
oldFindAndEliminateRedundant
int
start
int
firstOccuranceIndex
int
firstOccuranceOwner
ExpressionOwner
psuedoVarRecipient
ElemTemplateElement
paths
Vector
QName
uniquePseudoVarName
boolean
foundFirst
int
numPathsFound
int
n
size
Expression
expr1
getExpression
if
DEBUG
assertIsLocPathIterator
expr1
firstOccuranceOwner
boolean
isGlobal
paths
m_absPaths
LocPathIterator
lpi
LocPathIterator
expr1
for
forControl
int
j
start
j
n
j
block
ExpressionOwner
owner2
ExpressionOwner
elementAt
j
if
owner2
block
Expression
expr2
getExpression
boolean
isEqual
deepEquals
lpi
if
isEqual
block
LocPathIterator
lpi2
LocPathIterator
expr2
if
foundFirst
block
foundFirst
ElemVariable
var
createPseudoVarDecl
psuedoVarRecipient
lpi
isGlobal
if
var
return
uniquePseudoVarName
getName
changeToVarRef
uniquePseudoVarName
firstOccuranceOwner
paths
psuedoVarRecipient
setElementAt
getSelect
firstOccuranceIndex
numPathsFound
changeToVarRef
uniquePseudoVarName
owner2
paths
psuedoVarRecipient
setElementAt
j
numPathsFound
if
numPathsFound
paths
m_absPaths
block
ElemVariable
var
createPseudoVarDecl
psuedoVarRecipient
lpi
if
var
return
uniquePseudoVarName
getName
changeToVarRef
uniquePseudoVarName
firstOccuranceOwner
paths
psuedoVarRecipient
setElementAt
getSelect
firstOccuranceIndex
numPathsFound
return
numPathsFound
countSteps
int
lpi
LocPathIterator
if
lpi
WalkingIterator
block
WalkingIterator
wi
WalkingIterator
lpi
AxesWalker
aw
getFirstWalker
int
count
while
aw
block
count
aw
getNextWalker
return
count
return
changeToVarRef
varName
QName
owner
ExpressionOwner
paths
Vector
psuedoVarRecipient
ElemTemplateElement
Variable
varRef
paths
m_absPaths
VariableSafeAbsRef
Variable
setQName
varName
if
paths
m_absPaths
block
StylesheetRoot
root
StylesheetRoot
psuedoVarRecipient
Vector
globalVars
getVariablesAndParamsComposed
setIndex
size
setIsGlobal
setExpression
varRef
getPseudoVarID
int
return
m_uniquePseudoVarID
createPseudoVarDecl
ElemVariable
psuedoVarRecipient
ElemTemplateElement
lpi
LocPathIterator
isGlobal
boolean
QName
uniquePseudoVarName
QName
PSUEDOVARNAMESPACE
getPseudoVarID
if
isGlobal
block
return
createGlobalPseudoVarDecl
uniquePseudoVarName
StylesheetRoot
psuedoVarRecipient
lpi
return
createLocalPseudoVarDecl
uniquePseudoVarName
psuedoVarRecipient
lpi
createGlobalPseudoVarDecl
ElemVariable
uniquePseudoVarName
QName
stylesheetRoot
StylesheetRoot
lpi
LocPathIterator
ElemVariable
psuedoVar
ElemVariable
setIsTopLevel
XPath
xpath
XPath
lpi
setSelect
xpath
setName
uniquePseudoVarName
Vector
globalVars
getVariablesAndParamsComposed
setIndex
size
addElement
psuedoVar
return
psuedoVar
createLocalPseudoVarDecl
ElemVariable
uniquePseudoVarName
QName
psuedoVarRecipient
ElemTemplateElement
lpi
LocPathIterator
ElemVariable
psuedoVar
ElemVariablePsuedo
XPath
xpath
XPath
lpi
setSelect
xpath
setName
uniquePseudoVarName
ElemVariable
var
addVarDeclToElem
psuedoVarRecipient
lpi
psuedoVar
exprSetParent
var
return
var
addVarDeclToElem
ElemVariable
psuedoVarRecipient
ElemTemplateElement
lpi
LocPathIterator
psuedoVar
ElemVariable
ElemTemplateElement
ete
getFirstChildElem
callVisitors
m_varNameCollector
if
getVarCount
block
ElemTemplateElement
baseElem
getElemFromExpression
lpi
ElemVariable
varElem
getPrevVariableElem
baseElem
while
varElem
block
if
doesOccur
getName
block
psuedoVarRecipient
getParentElem
ete
getNextSiblingElem
break
varElem
getPrevVariableElem
varElem
if
ete
ELEMNAME_PARAMVARIABLE
getXSLToken
block
if
isParam
lpi
return
while
ete
block
ete
getNextSiblingElem
if
ete
ELEMNAME_PARAMVARIABLE
getXSLToken
break
insertBefore
psuedoVar
ete
reset
return
psuedoVar
isParam
boolean
expr
ExpressionNode
while
expr
block
if
expr
ElemTemplateElement
break
expr
exprGetParent
if
expr
block
ElemTemplateElement
ete
ElemTemplateElement
expr
while
ete
block
int
type
getXSLToken
switch
type
case
ELEMNAME_PARAMVARIABLE
return
case
ELEMNAME_TEMPLATE
ELEMNAME_STYLESHEET
return
ete
getParentElem
return
getPrevVariableElem
ElemVariable
elem
ElemTemplateElement
while
elem
getPrevElementWithinContext
elem
block
int
type
getXSLToken
if
ELEMNAME_VARIABLE
type
ELEMNAME_PARAMVARIABLE
type
block
return
ElemVariable
elem
return
getPrevElementWithinContext
ElemTemplateElement
elem
ElemTemplateElement
ElemTemplateElement
prev
getPreviousSiblingElem
if
prev
prev
getParentElem
if
prev
block
int
type
getXSLToken
if
ELEMNAME_FOREACH
type
ELEMNAME_TEMPLATE
type
ELEMNAME_STYLESHEET
type
block
prev
return
prev
getElemFromExpression
ElemTemplateElement
expr
Expression
ExpressionNode
parent
exprGetParent
while
parent
block
if
parent
ElemTemplateElement
return
ElemTemplateElement
parent
parent
exprGetParent
throw
RuntimeException
createMessage
ER_ASSERT_NO_TEMPLATE_PARENT
isAbsolute
boolean
path
LocPathIterator
int
analysis
getAnalysisBits
boolean
isAbs
isSet
analysis
BIT_ROOT
isSet
analysis
BIT_ANY_DESCENDANT_FROM_ROOT
if
isAbs
block
isAbs
checkAbsolute
path
return
isAbs
visitLocationPath
boolean
owner
ExpressionOwner
path
LocPathIterator
if
path
SelfIteratorNoPredicate
block
return
if
path
WalkingIterator
block
WalkingIterator
wi
WalkingIterator
path
AxesWalker
aw
getFirstWalker
if
aw
FilterExprWalker
getNextWalker
block
FilterExprWalker
few
FilterExprWalker
aw
Expression
exp
getInnerExpression
if
exp
Variable
return
if
isAbsolute
path
m_absPaths
block
if
DEBUG
validateNewAddition
m_absPaths
owner
path
addElement
owner
if
m_isSameContext
m_paths
block
if
DEBUG
validateNewAddition
m_paths
owner
path
addElement
owner
return
visitPredicate
boolean
owner
ExpressionOwner
pred
Expression
boolean
savedIsSame
m_isSameContext
m_isSameContext
callVisitors
owner
m_isSameContext
savedIsSame
return
visitTopLevelInstruction
boolean
elem
ElemTemplateElement
int
type
getXSLToken
switch
type
case
ELEMNAME_TEMPLATE
return
visitInstruction
elem
case
return
visitInstruction
boolean
elem
ElemTemplateElement
int
type
getXSLToken
switch
type
case
ELEMNAME_CALLTEMPLATE
ELEMNAME_TEMPLATE
ELEMNAME_FOREACH
block
if
type
ELEMNAME_FOREACH
block
ElemForEach
efe
ElemForEach
elem
Expression
select
getSelect
callVisitors
efe
Vector
savedPaths
m_paths
m_paths
Vector
callChildVisitors
eleminateRedundentLocals
elem
m_paths
savedPaths
return
case
ELEMNAME_NUMBER
ELEMNAME_SORT
boolean
savedIsSame
m_isSameContext
m_isSameContext
callChildVisitors
m_isSameContext
savedIsSame
return
case
return
diagnoseNumPaths
paths
Vector
numPathsEliminated
int
numUniquePathsEliminated
int
if
numPathsEliminated
block
if
paths
m_paths
block
println
numPathsEliminated
println
numUniquePathsEliminated
block
println
numPathsEliminated
println
numUniquePathsEliminated
assertIsLocPathIterator
expr1
Expression
eo
ExpressionOwner
if
expr1
LocPathIterator
block
String
errMsg
if
expr1
Variable
block
errMsg
Variable
expr1
block
errMsg
getClass
getName
throw
RuntimeException
errMsg
getClass
getName
exprGetParent
validateNewAddition
paths
Vector
owner
ExpressionOwner
path
LocPathIterator
assertion
getExpression
path
int
n
size
for
forControl
int
i
i
n
i
block
ExpressionOwner
ew
ExpressionOwner
elementAt
i
assertion
ew
owner
assertion
getExpression
path
assertion
b
boolean
msg
String
if
b
block
throw
RuntimeException
createMessage
ER_ASSERT_REDUNDENT_EXPR_ELIMINATOR
Object
msg
MultistepExprHolder
ExpressionOwner
m_exprOwner
int
m_stepCount
MultistepExprHolder
m_next
clone
Object
return
clone
MultistepExprHolder
exprOwner
ExpressionOwner
stepCount
int
next
MultistepExprHolder
m_exprOwner
exprOwner
assertion
m_exprOwner
m_stepCount
stepCount
m_next
next
addInSortedOrder
MultistepExprHolder
exprOwner
ExpressionOwner
stepCount
int
MultistepExprHolder
first
MultistepExprHolder
next
MultistepExprHolder
prev
while
next
block
if
stepCount
m_stepCount
block
MultistepExprHolder
newholder
MultistepExprHolder
exprOwner
stepCount
next
if
prev
first
newholder
m_next
newholder
return
first
prev
next
next
m_next
m_next
MultistepExprHolder
exprOwner
stepCount
return
first
unlink
MultistepExprHolder
itemToRemove
MultistepExprHolder
MultistepExprHolder
first
MultistepExprHolder
next
MultistepExprHolder
prev
while
next
block
if
next
itemToRemove
block
if
prev
first
m_next
m_next
m_next
m_next
return
first
prev
next
next
m_next
assertion
return
getLength
int
int
count
MultistepExprHolder
next
while
next
block
count
next
m_next
return
count
diagnose
print
getLength
MultistepExprHolder
next
while
next
block
print
m_stepCount
next
m_next
if
next
print
println
Cloneable
XSLTVisitor
