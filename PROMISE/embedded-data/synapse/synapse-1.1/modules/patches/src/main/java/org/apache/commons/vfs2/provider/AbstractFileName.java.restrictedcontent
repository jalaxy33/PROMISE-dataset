AbstractFileName
String
scheme
String
absPath
FileType
type
String
uri
String
baseName
String
rootUri
String
extension
String
decodedAbsPath
String
key
AbstractFileName
scheme
String
absPath
String
type
FileType
rootUri
scheme
scheme
type
type
String
actualPath
absPath
int
pos
indexOf
if
pos
block
actualPath
substring
pos
if
actualPath
length
block
if
length
endsWith
block
absPath
substring
length
block
absPath
actualPath
block
absPath
ROOT_PATH
equals
boolean
o
Object
if
o
block
return
if
o
getClass
getClass
block
return
AbstractFileName
that
AbstractFileName
o
return
getKey
hashCode
int
return
getKey
hashCode
compareTo
int
obj
FileName
AbstractFileName
name
AbstractFileName
obj
return
getKey
compareTo
getKey
toString
String
return
getURI
createName
FileName
absPath
String
type
FileType
appendRootUri
buffer
StringBuilder
addPassword
boolean
getBaseName
String
if
baseName
block
int
idx
getPath
lastIndexOf
SEPARATOR_CHAR
if
idx
block
baseName
getPath
block
baseName
getPath
substring
idx
return
baseName
getPath
String
if
isUriStyle
block
return
absPath
getUriTrailer
return
absPath
getUriTrailer
String
return
getType
hasChildren
getPathDecoded
String
if
decodedAbsPath
block
decodedAbsPath
decode
getPath
return
decodedAbsPath
getParent
FileName
String
parentPath
int
idx
getPath
lastIndexOf
SEPARATOR_CHAR
if
idx
idx
getPath
length
block
return
if
idx
block
parentPath
SEPARATOR
block
parentPath
getPath
substring
idx
return
createName
parentPath
FOLDER
getRoot
FileName
FileName
root
while
getParent
block
root
getParent
return
root
getScheme
String
return
scheme
getURI
String
if
uri
block
uri
createURI
return
uri
createURI
String
return
createURI
getKey
String
if
key
block
key
createURI
return
key
getFriendlyURI
String
return
createURI
createURI
String
useAbsolutePath
boolean
usePassword
boolean
StringBuilder
buffer
StringBuilder
appendRootUri
buffer
usePassword
append
useAbsolutePath
absPath
getPath
return
toString
getRelativeName
String
name
FileName
String
path
getPath
int
basePathLen
getPath
length
int
pathLen
length
if
basePathLen
pathLen
block
return
if
basePathLen
block
return
substring
int
maxlen
min
basePathLen
pathLen
int
pos
for
forControl
pos
maxlen
getPath
charAt
pos
charAt
pos
pos
block
if
pos
basePathLen
pos
pathLen
block
return
if
pos
basePathLen
pos
pathLen
charAt
pos
SEPARATOR_CHAR
block
return
substring
pos
StringBuilder
buffer
StringBuilder
if
pathLen
pos
pathLen
getPath
charAt
pos
SEPARATOR_CHAR
block
pos
getPath
lastIndexOf
SEPARATOR_CHAR
pos
append
substring
pos
insert
pos
getPath
indexOf
SEPARATOR_CHAR
pos
while
pos
block
insert
pos
getPath
indexOf
SEPARATOR_CHAR
pos
return
toString
getRootURI
String
if
rootUri
block
StringBuilder
buffer
StringBuilder
appendRootUri
buffer
append
SEPARATOR_CHAR
rootUri
toString
intern
return
rootUri
getDepth
int
int
len
getPath
length
if
len
len
getPath
charAt
SEPARATOR_CHAR
block
return
int
depth
for
forControl
int
pos
pos
pos
len
depth
block
pos
getPath
indexOf
SEPARATOR_CHAR
pos
return
depth
getExtension
String
if
extension
block
getBaseName
int
pos
lastIndexOf
if
pos
pos
length
block
extension
block
extension
substring
intern
pos
return
extension
isAncestor
boolean
ancestor
FileName
if
getRootURI
equals
getRootURI
block
return
return
checkName
getPath
getPath
DESCENDENT
isDescendent
boolean
descendent
FileName
return
isDescendent
descendent
DESCENDENT
isDescendent
boolean
descendent
FileName
scope
NameScope
if
getRootURI
equals
getRootURI
block
return
return
checkName
getPath
getPath
scope
getType
FileType
return
type
setType
type
FileType
if
type
FOLDER
type
FILE
type
FILE_OR_FOLDER
block
throw
FileSystemException
type
type
checkName
boolean
basePath
String
path
String
scope
NameScope
if
scope
FILE_SYSTEM
block
return
if
startsWith
basePath
block
return
int
baseLen
length
if
isUriStyle
block
baseLen
if
scope
CHILD
block
if
length
baseLen
baseLen
charAt
baseLen
SEPARATOR_CHAR
indexOf
SEPARATOR_CHAR
baseLen
block
return
if
scope
DESCENDENT
block
if
length
baseLen
baseLen
charAt
baseLen
SEPARATOR_CHAR
block
return
if
scope
DESCENDENT_OR_SELF
block
if
baseLen
length
baseLen
charAt
baseLen
SEPARATOR_CHAR
block
return
if
scope
FILE_SYSTEM
block
throw
IllegalArgumentException
return
FileName
