SecretResolverFactory
create
SecretResolver
configuration
OMElement
isCapLetter
boolean
SecretResolver
secretResolver
SecretResolver
QName
pwProviderQName
QName
protectedTokensQName
QName
pwManagerQName
QName
parentQName
getQName
String
nsURI
parentQName
getNamespaceURI
NULL_NS_URI
String
nsPrefix
parentQName
getPrefix
DEFAULT_NS_PREFIX
if
isCapLetter
block
pwManagerQName
QName
nsURI
PASSWORD_MANAGER_SIMPLE
nsPrefix
pwProviderQName
QName
nsURI
PASSWORD_PROVIDER_SIMPLE
nsPrefix
protectedTokensQName
QName
nsURI
PROTECTED_TOKENS_SIMPLE
nsPrefix
block
pwManagerQName
QName
nsURI
PASSWORD_MANAGER_CAP
nsPrefix
pwProviderQName
QName
nsURI
PASSWORD_PROVIDER_CAP
nsPrefix
protectedTokensQName
QName
nsURI
PROTECTED_TOKENS_CAP
nsPrefix
OMElement
child
getFirstChildWithName
pwManagerQName
if
child
block
return
secretResolver
OMElement
passwordProviderElement
getFirstChildWithName
pwProviderQName
if
passwordProviderElement
block
initPasswordManager
secretResolver
getText
if
isInitialized
block
OMElement
protectedTokensElement
getFirstChildWithName
protectedTokensQName
if
protectedTokensElement
block
String
value
getText
if
value
trim
length
block
List
String
protectedTokens
ArrayList
String
asList
split
for
String
token
protectedTokens
block
addProtectedToken
token
return
secretResolver
create
SecretResolver
properties
Properties
propertyPrefix
String
SecretResolver
secretResolver
SecretResolver
String
prefix
propertyPrefix
if
propertyPrefix
equals
propertyPrefix
endsWith
block
prefix
initPasswordManager
secretResolver
getProperty
prefix
PASSWORD_PROVIDER_SIMPLE
if
isInitialized
block
String
protectedTokens
getProperty
prefix
PROTECTED_TOKENS_SIMPLE
if
protectedTokens
equals
trim
block
ArrayList
String
tokens
ArrayList
String
asList
split
for
String
token
tokens
block
addProtectedToken
token
return
secretResolver
create
SecretResolver
namedNodeMap
NamedNodeMap
SecretResolver
secretResolver
SecretResolver
Node
namedItem
getNamedItem
PASSWORD_PROVIDER_SIMPLE
if
namedItem
block
String
passwordProvider
getNodeValue
if
passwordProvider
trim
length
block
initPasswordManager
secretResolver
passwordProvider
if
isInitialized
block
Node
protectedTokenAttr
getNamedItem
PROTECTED_TOKENS_SIMPLE
ArrayList
String
protectedTokenList
if
protectedTokenAttr
block
String
protectedTokens
getNodeValue
if
protectedTokens
trim
length
block
protectedTokenList
ArrayList
String
asList
split
for
String
token
protectedTokenList
block
if
token
equals
token
block
addProtectedToken
token
return
secretResolver
initPasswordManager
secretResolver
SecretResolver
provider
String
SecretCallbackHandler
callbackHandler
createSecretCallbackHandler
provider
if
callbackHandler
block
init
callbackHandler
