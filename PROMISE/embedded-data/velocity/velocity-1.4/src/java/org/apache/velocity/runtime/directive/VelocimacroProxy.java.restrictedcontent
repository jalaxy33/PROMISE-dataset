VelocimacroProxy
String
macroName
String
macroBody
String
argArray
SimpleNode
nodeTree
int
numMacroArgs
String
namespace
boolean
init
String
callingArgs
int
callingArgTypes
HashMap
proxyArgHash
HashMap
getName
String
return
macroName
getType
int
return
LINE
setName
name
String
macroName
name
setArgArray
arr
String
argArray
arr
numMacroArgs
length
setNodeTree
tree
SimpleNode
nodeTree
tree
getNumArgs
int
return
numMacroArgs
setMacrobody
mb
String
macroBody
mb
setNamespace
ns
String
namespace
ns
render
boolean
context
InternalContextAdapter
writer
Writer
node
Node
try
if
nodeTree
block
if
init
block
init
context
rsvc
init
VMContext
vmc
VMContext
context
rsvc
for
forControl
int
i
i
length
i
block
VMProxyArg
arg
VMProxyArg
get
argArray
i
addVMProxyArg
arg
render
vmc
writer
block
error
macroName
catchClause
e
if
e
MethodInvocationException
block
throw
MethodInvocationException
e
error
macroName
stackTrace
e
return
init
rs
RuntimeServices
context
InternalContextAdapter
node
Node
init
rs
context
node
int
i
jjtGetNumChildren
if
getNumArgs
i
block
error
macroName
getNumArgs
i
getNumArgs
i
return
callingArgs
getArgArray
node
setupMacro
callingArgs
callingArgTypes
return
setupMacro
boolean
callArgs
String
callArgTypes
int
setupProxyArgs
callArgs
callArgTypes
parseTree
callArgs
return
parseTree
callArgs
String
try
BufferedReader
br
BufferedReader
StringReader
macroBody
nodeTree
parse
br
namespace
HashMap
hm
HashMap
for
forControl
int
i
i
length
i
block
String
arg
callArgs
i
if
charAt
block
put
argArray
i
arg
VMReferenceMungeVisitor
v
VMReferenceMungeVisitor
hm
jjtAccept
v
catchClause
e
error
macroName
stackTrace
e
setupProxyArgs
callArgs
String
callArgTypes
int
for
forControl
int
i
i
length
i
block
VMProxyArg
arg
VMProxyArg
rsvc
argArray
i
callArgs
i
callArgTypes
i
put
argArray
i
arg
getArgArray
String
node
Node
int
numArgs
jjtGetNumChildren
String
args
String
numArgs
callingArgTypes
int
numArgs
int
i
Token
t
Token
tLast
while
i
numArgs
block
args
i
callingArgTypes
i
jjtGetChild
getType
i
if
jjtGetChild
getType
i
JJTSTRINGLITERAL
block
args
i
jjtGetChild
getFirstToken
image
substring
jjtGetChild
getFirstToken
image
length
i
i
block
t
jjtGetChild
getFirstToken
i
tLast
jjtGetChild
getLastToken
i
while
t
tLast
block
args
i
image
t
next
args
i
image
i
return
args
Directive
