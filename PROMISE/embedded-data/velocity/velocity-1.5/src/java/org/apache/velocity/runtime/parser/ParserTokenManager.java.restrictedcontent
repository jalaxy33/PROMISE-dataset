ParserTokenManager
int
fileDepth
int
lparen
int
rparen
Stack
stateStack
Stack
boolean
debugPrint
boolean
inReference
boolean
inDirective
boolean
inComment
boolean
inSet
stateStackPop
boolean
Hashtable
h
try
h
Hashtable
pop
catchClause
e
lparen
SwitchTo
DEFAULT
return
if
debugPrint
println
size
Integer
get
Integer
get
lparen
Integer
get
rparen
Integer
get
SwitchTo
Integer
get
return
stateStackPush
boolean
if
debugPrint
println
size
curLexState
Hashtable
h
Hashtable
put
Integer
curLexState
put
Integer
lparen
put
Integer
rparen
lparen
push
h
return
clearStateVars
clear
lparen
rparen
inReference
inDirective
inComment
inSet
return
RPARENHandler
boolean
closed
if
inComment
closed
while
closed
block
if
lparen
block
if
lparen
rparen
block
stateStackPop
block
rparen
closed
block
if
stateStackPop
break
java
io
PrintStream
debugStream
out
setDebugStream
ds
java
io
PrintStream
debugStream
ds
jjStopStringLiteralDfa_0
int
pos
int
active0
long
switch
pos
case
if
active0
return
if
active0
block
jjmatchedKind
return
if
active0
return
if
active0
return
if
active0
return
if
active0
return
return
case
if
active0
block
jjmatchedKind
jjmatchedPos
return
if
active0
return
return
case
if
active0
block
jjmatchedKind
jjmatchedPos
return
return
case
if
active0
return
if
active0
block
jjmatchedKind
jjmatchedPos
return
return
case
return
jjStartNfa_0
int
pos
int
active0
long
return
jjMoveNfa_0
jjStopStringLiteralDfa_0
pos
active0
pos
jjStopAtPos
int
pos
int
kind
int
jjmatchedKind
kind
jjmatchedPos
pos
return
pos
jjStartNfaWithStates_0
int
pos
int
kind
int
state
int
jjmatchedKind
kind
jjmatchedPos
pos
try
curChar
readChar
catchClause
e
return
pos
return
jjMoveNfa_0
state
pos
jjMoveStringLiteralDfa0_0
int
switch
curChar
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_0
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjStartNfaWithStates_0
case
return
jjMoveStringLiteralDfa1_0
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjStartNfaWithStates_0
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjMoveStringLiteralDfa1_0
case
return
jjMoveStringLiteralDfa1_0
case
return
jjStartNfaWithStates_0
case
return
jjStopAtPos
case
return
jjMoveNfa_0
jjMoveStringLiteralDfa1_0
int
active0
long
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_0
active0
return
switch
curChar
case
if
active0
return
jjStopAtPos
break
case
if
active0
return
jjStartNfaWithStates_0
break
case
if
active0
return
jjStopAtPos
break
case
return
jjMoveStringLiteralDfa2_0
active0
case
return
jjMoveStringLiteralDfa2_0
active0
case
break
return
jjStartNfa_0
active0
jjMoveStringLiteralDfa2_0
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_0
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_0
active0
return
switch
curChar
case
return
jjMoveStringLiteralDfa3_0
active0
case
return
jjMoveStringLiteralDfa3_0
active0
case
break
return
jjStartNfa_0
active0
jjMoveStringLiteralDfa3_0
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_0
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_0
active0
return
switch
curChar
case
if
active0
return
jjStartNfaWithStates_0
break
case
return
jjMoveStringLiteralDfa4_0
active0
case
break
return
jjStartNfa_0
active0
jjMoveStringLiteralDfa4_0
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_0
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_0
active0
return
switch
curChar
case
if
active0
return
jjStartNfaWithStates_0
break
case
break
return
jjStartNfa_0
active0
jjCheckNAdd
state
int
if
jjrounds
state
jjround
block
jjstateSet
jjnewStateCnt
state
jjrounds
state
jjround
jjAddStates
start
int
end
int
do
start
end
block
jjstateSet
jjnewStateCnt
jjnextStates
start
jjCheckNAddTwoStates
state1
int
state2
int
jjCheckNAdd
state1
jjCheckNAdd
state2
jjCheckNAddStates
start
int
end
int
do
start
end
block
jjCheckNAdd
jjnextStates
start
jjCheckNAddStates
start
int
jjCheckNAdd
jjnextStates
start
jjCheckNAdd
jjnextStates
start
long
jjbitVec0
long
jjbitVec2
jjMoveNfa_0
int
startState
int
curPos
int
int
nextStates
int
startsAt
jjnewStateCnt
int
i
jjstateSet
startState
int
j
kind
for
forControl
block
if
jjround
ReInitRounds
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
l
block
if
kind
kind
jjCheckNAddStates
if
l
block
if
kind
kind
jjCheckNAdd
if
curChar
jjCheckNAddStates
if
curChar
block
if
kind
kind
jjCheckNAddTwoStates
if
curChar
jjCheckNAdd
if
curChar
block
if
kind
kind
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjCheckNAddStates
if
curChar
jjCheckNAddStates
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
block
if
kind
kind
jjCheckNAddStates
if
l
block
if
kind
kind
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
block
if
kind
kind
if
curChar
block
if
kind
kind
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjCheckNAddTwoStates
if
curChar
jjCheckNAdd
if
l
jjCheckNAddTwoStates
if
l
block
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAddStates
break
case
if
l
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
curChar
jjCheckNAddStates
break
case
if
l
jjCheckNAddStates
break
case
if
curChar
kind
kind
break
case
if
l
jjCheckNAddStates
break
case
if
l
jjCheckNAddStates
break
case
if
l
jjCheckNAddStates
break
case
if
l
jjstateSet
jjnewStateCnt
break
case
if
l
jjCheckNAdd
break
case
if
curChar
jjAddStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
l
jjCheckNAddStates
break
case
if
curChar
jjAddStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
kind
kind
break
case
if
l
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjstateSet
jjnewStateCnt
break
case
if
l
jjAddStates
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
l
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjCheckNAddTwoStates
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAddStates
break
case
break
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
l
block
if
kind
kind
jjCheckNAdd
if
curChar
jjCheckNAddStates
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjAddStates
if
curChar
jjAddStates
if
curChar
jjAddStates
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
kind
kind
break
case
if
l
jjCheckNAddStates
break
case
if
curChar
jjAddStates
break
case
if
l
jjCheckNAddStates
break
case
jjAddStates
break
case
if
curChar
jjAddStates
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjAddStates
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
if
curChar
jjAddStates
break
case
if
curChar
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjAddStates
break
case
if
curChar
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjAddStates
break
case
if
curChar
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjAddStates
break
case
if
l
jjAddStates
break
case
break
block
int
hiByte
int
curChar
int
i1
hiByte
long
l1
hiByte
int
i2
curChar
long
l2
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
kind
kind
break
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
jjAddStates
break
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
jjAddStates
break
case
break
if
kind
block
jjmatchedKind
kind
jjmatchedPos
curPos
kind
curPos
if
i
jjnewStateCnt
startsAt
jjnewStateCnt
startsAt
return
curPos
try
curChar
readChar
catchClause
e
return
curPos
jjStopStringLiteralDfa_6
int
pos
int
active0
long
switch
pos
case
if
active0
return
return
case
return
jjStartNfa_6
int
pos
int
active0
long
return
jjMoveNfa_6
jjStopStringLiteralDfa_6
pos
active0
pos
jjStartNfaWithStates_6
int
pos
int
kind
int
state
int
jjmatchedKind
kind
jjmatchedPos
pos
try
curChar
readChar
catchClause
e
return
pos
return
jjMoveNfa_6
state
pos
jjMoveStringLiteralDfa0_6
int
switch
curChar
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_6
case
return
jjMoveStringLiteralDfa1_6
case
return
jjMoveNfa_6
jjMoveStringLiteralDfa1_6
int
active0
long
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_6
active0
return
switch
curChar
case
if
active0
return
jjStopAtPos
if
active0
return
jjStopAtPos
break
case
if
active0
return
jjStartNfaWithStates_6
break
case
break
return
jjStartNfa_6
active0
jjMoveNfa_6
int
startState
int
curPos
int
int
nextStates
int
startsAt
jjnewStateCnt
int
i
jjstateSet
startState
int
j
kind
for
forControl
block
if
jjround
ReInitRounds
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
curChar
block
if
kind
kind
jjCheckNAddTwoStates
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
break
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
curChar
jjCheckNAddStates
break
case
if
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
break
block
int
hiByte
int
curChar
int
i1
hiByte
long
l1
hiByte
int
i2
curChar
long
l2
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
kind
kind
break
case
break
if
kind
block
jjmatchedKind
kind
jjmatchedPos
curPos
kind
curPos
if
i
jjnewStateCnt
startsAt
jjnewStateCnt
startsAt
return
curPos
try
curChar
readChar
catchClause
e
return
curPos
jjStopStringLiteralDfa_4
int
pos
int
active0
long
switch
pos
case
if
active0
return
return
case
return
jjStartNfa_4
int
pos
int
active0
long
return
jjMoveNfa_4
jjStopStringLiteralDfa_4
pos
active0
pos
jjStartNfaWithStates_4
int
pos
int
kind
int
state
int
jjmatchedKind
kind
jjmatchedPos
pos
try
curChar
readChar
catchClause
e
return
pos
return
jjMoveNfa_4
state
pos
jjMoveStringLiteralDfa0_4
int
switch
curChar
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_4
case
return
jjMoveNfa_4
jjMoveStringLiteralDfa1_4
int
active0
long
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_4
active0
return
switch
curChar
case
if
active0
return
jjStopAtPos
break
case
if
active0
return
jjStartNfaWithStates_4
break
case
break
return
jjStartNfa_4
active0
jjMoveNfa_4
int
startState
int
curPos
int
int
nextStates
int
startsAt
jjnewStateCnt
int
i
jjstateSet
startState
int
j
kind
for
forControl
block
if
jjround
ReInitRounds
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
l
block
if
kind
kind
jjCheckNAddStates
if
curChar
jjCheckNAddStates
if
curChar
block
if
kind
kind
jjCheckNAddTwoStates
if
curChar
jjCheckNAdd
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjstateSet
jjnewStateCnt
break
case
if
l
jjAddStates
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAddStates
break
case
if
l
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAdd
break
case
if
l
jjCheckNAddStates
break
case
if
l
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAdd
break
case
if
l
jjCheckNAddStates
break
case
if
l
jjCheckNAddStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
l
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjCheckNAddTwoStates
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAddStates
break
case
break
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
l
block
if
kind
kind
jjCheckNAdd
if
curChar
jjAddStates
if
curChar
jjCheckNAddStates
if
curChar
jjAddStates
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjAddStates
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
if
curChar
jjAddStates
break
case
if
curChar
break
if
kind
kind
jjCheckNAddStates
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
break
if
kind
kind
jjCheckNAddStates
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjAddStates
break
case
if
curChar
break
if
kind
kind
jjCheckNAddStates
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
break
if
kind
kind
jjCheckNAddStates
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjAddStates
break
case
if
l
jjAddStates
break
case
break
block
int
hiByte
int
curChar
int
i1
hiByte
long
l1
hiByte
int
i2
curChar
long
l2
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
kind
kind
break
case
break
if
kind
block
jjmatchedKind
kind
jjmatchedPos
curPos
kind
curPos
if
i
jjnewStateCnt
startsAt
jjnewStateCnt
startsAt
return
curPos
try
curChar
readChar
catchClause
e
return
curPos
jjStopStringLiteralDfa_3
int
pos
int
active0
long
switch
pos
case
if
active0
return
if
active0
return
return
case
return
jjStartNfa_3
int
pos
int
active0
long
return
jjMoveNfa_3
jjStopStringLiteralDfa_3
pos
active0
pos
jjStartNfaWithStates_3
int
pos
int
kind
int
state
int
jjmatchedKind
kind
jjmatchedPos
pos
try
curChar
readChar
catchClause
e
return
pos
return
jjMoveNfa_3
state
pos
jjMoveStringLiteralDfa0_3
int
switch
curChar
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_3
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_3
case
return
jjMoveNfa_3
jjMoveStringLiteralDfa1_3
int
active0
long
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_3
active0
return
switch
curChar
case
if
active0
return
jjStopAtPos
break
case
if
active0
return
jjStartNfaWithStates_3
break
case
if
active0
return
jjStartNfaWithStates_3
break
case
break
return
jjStartNfa_3
active0
jjMoveNfa_3
int
startState
int
curPos
int
int
nextStates
int
startsAt
jjnewStateCnt
int
i
jjstateSet
startState
int
j
kind
for
forControl
block
if
jjround
ReInitRounds
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
block
if
kind
kind
jjCheckNAdd
if
curChar
jjCheckNAddStates
if
curChar
block
if
kind
kind
jjCheckNAddTwoStates
if
l
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
if
curChar
block
if
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
block
if
kind
kind
break
case
if
l
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
if
curChar
kind
kind
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
break
if
kind
kind
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
break
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
block
if
kind
kind
jjCheckNAdd
if
curChar
jjCheckNAddStates
if
curChar
jjAddStates
break
case
if
curChar
jjAddStates
if
curChar
jjCheckNAddTwoStates
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
if
curChar
jjCheckNAddTwoStates
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
curChar
jjAddStates
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
if
kind
kind
break
case
break
block
int
hiByte
int
curChar
int
i1
hiByte
long
l1
hiByte
int
i2
curChar
long
l2
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
break
if
kind
kind
jjCheckNAdd
break
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
kind
kind
break
case
break
if
kind
block
jjmatchedKind
kind
jjmatchedPos
curPos
kind
curPos
if
i
jjnewStateCnt
startsAt
jjnewStateCnt
startsAt
return
curPos
try
curChar
readChar
catchClause
e
return
curPos
jjStopStringLiteralDfa_7
int
pos
int
active0
long
switch
pos
case
if
active0
return
return
case
return
jjStartNfa_7
int
pos
int
active0
long
return
jjMoveNfa_7
jjStopStringLiteralDfa_7
pos
active0
pos
jjStartNfaWithStates_7
int
pos
int
kind
int
state
int
jjmatchedKind
kind
jjmatchedPos
pos
try
curChar
readChar
catchClause
e
return
pos
return
jjMoveNfa_7
state
pos
jjMoveStringLiteralDfa0_7
int
switch
curChar
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_7
case
return
jjMoveStringLiteralDfa1_7
case
return
jjMoveNfa_7
jjMoveStringLiteralDfa1_7
int
active0
long
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_7
active0
return
switch
curChar
case
if
active0
return
jjStopAtPos
if
active0
return
jjStopAtPos
break
case
if
active0
return
jjStartNfaWithStates_7
break
case
break
return
jjStartNfa_7
active0
jjMoveNfa_7
int
startState
int
curPos
int
int
nextStates
int
startsAt
jjnewStateCnt
int
i
jjstateSet
startState
int
j
kind
for
forControl
block
if
jjround
ReInitRounds
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
curChar
block
if
kind
kind
jjCheckNAddTwoStates
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
break
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
curChar
jjCheckNAddStates
break
case
if
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
break
block
int
hiByte
int
curChar
int
i1
hiByte
long
l1
hiByte
int
i2
curChar
long
l2
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
kind
kind
break
case
break
if
kind
block
jjmatchedKind
kind
jjmatchedPos
curPos
kind
curPos
if
i
jjnewStateCnt
startsAt
jjnewStateCnt
startsAt
return
curPos
try
curChar
readChar
catchClause
e
return
curPos
jjStopStringLiteralDfa_8
int
pos
int
active0
long
switch
pos
case
if
active0
return
return
case
return
jjStartNfa_8
int
pos
int
active0
long
return
jjMoveNfa_8
jjStopStringLiteralDfa_8
pos
active0
pos
jjStartNfaWithStates_8
int
pos
int
kind
int
state
int
jjmatchedKind
kind
jjmatchedPos
pos
try
curChar
readChar
catchClause
e
return
pos
return
jjMoveNfa_8
state
pos
jjMoveStringLiteralDfa0_8
int
switch
curChar
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_8
case
return
jjMoveNfa_8
jjMoveStringLiteralDfa1_8
int
active0
long
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_8
active0
return
switch
curChar
case
if
active0
return
jjStopAtPos
break
case
if
active0
return
jjStartNfaWithStates_8
break
case
break
return
jjStartNfa_8
active0
jjMoveNfa_8
int
startState
int
curPos
int
int
nextStates
int
startsAt
jjnewStateCnt
int
i
jjstateSet
startState
int
j
kind
for
forControl
block
if
jjround
ReInitRounds
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
l
block
if
kind
kind
if
curChar
block
if
kind
kind
jjCheckNAddTwoStates
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
break
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
curChar
jjCheckNAddStates
break
case
if
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
break
block
int
hiByte
int
curChar
int
i1
hiByte
long
l1
hiByte
int
i2
curChar
long
l2
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
kind
kind
break
case
break
if
kind
block
jjmatchedKind
kind
jjmatchedPos
curPos
kind
curPos
if
i
jjnewStateCnt
startsAt
jjnewStateCnt
startsAt
return
curPos
try
curChar
readChar
catchClause
e
return
curPos
jjStopStringLiteralDfa_5
int
pos
int
active0
long
active1
long
switch
pos
case
if
active0
return
if
active0
block
jjmatchedKind
return
return
case
if
active0
return
if
active0
block
jjmatchedKind
jjmatchedPos
return
return
case
if
active0
block
jjmatchedKind
jjmatchedPos
return
return
case
if
active0
block
jjmatchedKind
jjmatchedPos
return
if
active0
return
return
case
return
jjStartNfa_5
int
pos
int
active0
long
active1
long
return
jjMoveNfa_5
jjStopStringLiteralDfa_5
pos
active0
active1
pos
jjStartNfaWithStates_5
int
pos
int
kind
int
state
int
jjmatchedKind
kind
jjmatchedPos
pos
try
curChar
readChar
catchClause
e
return
pos
return
jjMoveNfa_5
state
pos
jjMoveStringLiteralDfa0_5
int
switch
curChar
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_5
case
return
jjMoveStringLiteralDfa1_5
case
return
jjMoveStringLiteralDfa1_5
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjMoveNfa_5
jjMoveStringLiteralDfa1_5
int
active0
long
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_5
active0
return
switch
curChar
case
if
active0
return
jjStopAtPos
break
case
if
active0
return
jjStartNfaWithStates_5
break
case
return
jjMoveStringLiteralDfa2_5
active0
case
return
jjMoveStringLiteralDfa2_5
active0
case
break
return
jjStartNfa_5
active0
jjMoveStringLiteralDfa2_5
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_5
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_5
active0
return
switch
curChar
case
return
jjMoveStringLiteralDfa3_5
active0
case
return
jjMoveStringLiteralDfa3_5
active0
case
break
return
jjStartNfa_5
active0
jjMoveStringLiteralDfa3_5
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_5
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_5
active0
return
switch
curChar
case
if
active0
return
jjStartNfaWithStates_5
break
case
return
jjMoveStringLiteralDfa4_5
active0
case
break
return
jjStartNfa_5
active0
jjMoveStringLiteralDfa4_5
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_5
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_5
active0
return
switch
curChar
case
if
active0
return
jjStartNfaWithStates_5
break
case
break
return
jjStartNfa_5
active0
jjMoveNfa_5
int
startState
int
curPos
int
int
nextStates
int
startsAt
jjnewStateCnt
int
i
jjstateSet
startState
int
j
kind
for
forControl
block
if
jjround
ReInitRounds
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
curChar
block
if
kind
kind
jjCheckNAddTwoStates
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
break
if
kind
kind
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
break
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
l
block
if
kind
kind
jjCheckNAdd
if
curChar
jjCheckNAddStates
break
case
if
kind
kind
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
kind
kind
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
break
block
int
hiByte
int
curChar
int
i1
hiByte
long
l1
hiByte
int
i2
curChar
long
l2
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
kind
kind
break
case
break
if
kind
block
jjmatchedKind
kind
jjmatchedPos
curPos
kind
curPos
if
i
jjnewStateCnt
startsAt
jjnewStateCnt
startsAt
return
curPos
try
curChar
readChar
catchClause
e
return
curPos
jjStopStringLiteralDfa_1
int
pos
int
active0
long
switch
pos
case
if
active0
return
if
active0
return
if
active0
block
jjmatchedKind
return
return
case
if
active0
return
if
active0
block
jjmatchedKind
jjmatchedPos
return
return
case
if
active0
block
jjmatchedKind
jjmatchedPos
return
return
case
if
active0
return
if
active0
block
jjmatchedKind
jjmatchedPos
return
return
case
return
jjStartNfa_1
int
pos
int
active0
long
return
jjMoveNfa_1
jjStopStringLiteralDfa_1
pos
active0
pos
jjStartNfaWithStates_1
int
pos
int
kind
int
state
int
jjmatchedKind
kind
jjmatchedPos
pos
try
curChar
readChar
catchClause
e
return
pos
return
jjMoveNfa_1
state
pos
jjMoveStringLiteralDfa0_1
int
switch
curChar
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_1
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjMoveStringLiteralDfa1_1
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjMoveStringLiteralDfa1_1
case
return
jjMoveStringLiteralDfa1_1
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjMoveNfa_1
jjMoveStringLiteralDfa1_1
int
active0
long
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_1
active0
return
switch
curChar
case
if
active0
return
jjStopAtPos
break
case
if
active0
return
jjStartNfaWithStates_1
break
case
if
active0
return
jjStopAtPos
break
case
return
jjMoveStringLiteralDfa2_1
active0
case
return
jjMoveStringLiteralDfa2_1
active0
case
break
return
jjStartNfa_1
active0
jjMoveStringLiteralDfa2_1
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_1
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_1
active0
return
switch
curChar
case
return
jjMoveStringLiteralDfa3_1
active0
case
return
jjMoveStringLiteralDfa3_1
active0
case
break
return
jjStartNfa_1
active0
jjMoveStringLiteralDfa3_1
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_1
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_1
active0
return
switch
curChar
case
if
active0
return
jjStartNfaWithStates_1
break
case
return
jjMoveStringLiteralDfa4_1
active0
case
break
return
jjStartNfa_1
active0
jjMoveStringLiteralDfa4_1
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_1
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_1
active0
return
switch
curChar
case
if
active0
return
jjStartNfaWithStates_1
break
case
break
return
jjStartNfa_1
active0
jjMoveNfa_1
int
startState
int
curPos
int
int
nextStates
int
startsAt
jjnewStateCnt
int
i
jjstateSet
startState
int
j
kind
for
forControl
block
if
jjround
ReInitRounds
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
l
block
if
kind
kind
jjCheckNAddStates
if
l
block
if
kind
kind
jjCheckNAdd
if
curChar
jjCheckNAddTwoStates
if
curChar
jjCheckNAddStates
if
curChar
block
if
kind
kind
jjCheckNAddTwoStates
if
curChar
jjCheckNAddStates
if
curChar
jjCheckNAddStates
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
curChar
jjCheckNAddStates
break
case
if
l
jjCheckNAddStates
break
case
if
curChar
kind
kind
break
case
if
l
jjCheckNAddStates
break
case
if
l
jjCheckNAddStates
break
case
if
l
jjCheckNAddStates
break
case
if
l
jjstateSet
jjnewStateCnt
break
case
if
l
jjCheckNAdd
break
case
if
curChar
jjAddStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
l
jjCheckNAddStates
break
case
if
curChar
jjAddStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
kind
kind
break
case
if
l
break
if
kind
kind
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddStates
break
case
if
l
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
jjCheckNAddTwoStates
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
break
if
kind
kind
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
curChar
jjCheckNAdd
break
case
if
l
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
jjCheckNAddTwoStates
break
case
if
l
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
break
if
kind
kind
jjCheckNAddStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
break
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
l
block
if
kind
kind
jjCheckNAdd
if
curChar
jjCheckNAddStates
break
case
if
l
kind
kind
break
case
if
kind
kind
break
case
if
l
jjCheckNAddStates
break
case
if
curChar
jjAddStates
break
case
if
l
jjCheckNAddStates
break
case
jjAddStates
break
case
if
curChar
jjAddStates
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
if
l
jjAddStates
break
case
if
l
jjAddStates
break
case
if
l
jjAddStates
break
case
break
block
int
hiByte
int
curChar
int
i1
hiByte
long
l1
hiByte
int
i2
curChar
long
l2
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
kind
kind
break
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
jjAddStates
break
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
jjAddStates
break
case
break
if
kind
block
jjmatchedKind
kind
jjmatchedPos
curPos
kind
curPos
if
i
jjnewStateCnt
startsAt
jjnewStateCnt
startsAt
return
curPos
try
curChar
readChar
catchClause
e
return
curPos
jjStopStringLiteralDfa_2
int
pos
int
active0
long
active1
long
switch
pos
case
if
active0
return
if
active0
block
jjmatchedKind
return
return
case
if
active0
return
if
active0
block
jjmatchedKind
jjmatchedPos
return
return
case
if
active0
block
jjmatchedKind
jjmatchedPos
return
return
case
if
active0
block
jjmatchedKind
jjmatchedPos
return
if
active0
return
return
case
return
jjStartNfa_2
int
pos
int
active0
long
active1
long
return
jjMoveNfa_2
jjStopStringLiteralDfa_2
pos
active0
active1
pos
jjStartNfaWithStates_2
int
pos
int
kind
int
state
int
jjmatchedKind
kind
jjmatchedPos
pos
try
curChar
readChar
catchClause
e
return
pos
return
jjMoveNfa_2
state
pos
jjMoveStringLiteralDfa0_2
int
switch
curChar
case
jjmatchedKind
return
jjMoveStringLiteralDfa1_2
case
return
jjStopAtPos
case
return
jjMoveStringLiteralDfa1_2
case
return
jjMoveStringLiteralDfa1_2
case
return
jjStopAtPos
case
return
jjStopAtPos
case
return
jjMoveNfa_2
jjMoveStringLiteralDfa1_2
int
active0
long
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_2
active0
return
switch
curChar
case
if
active0
return
jjStopAtPos
break
case
if
active0
return
jjStartNfaWithStates_2
break
case
return
jjMoveStringLiteralDfa2_2
active0
case
return
jjMoveStringLiteralDfa2_2
active0
case
break
return
jjStartNfa_2
active0
jjMoveStringLiteralDfa2_2
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_2
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_2
active0
return
switch
curChar
case
return
jjMoveStringLiteralDfa3_2
active0
case
return
jjMoveStringLiteralDfa3_2
active0
case
break
return
jjStartNfa_2
active0
jjMoveStringLiteralDfa3_2
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_2
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_2
active0
return
switch
curChar
case
if
active0
return
jjStartNfaWithStates_2
break
case
return
jjMoveStringLiteralDfa4_2
active0
case
break
return
jjStartNfa_2
active0
jjMoveStringLiteralDfa4_2
int
old0
long
active0
long
if
active0
old0
return
jjStartNfa_2
old0
try
curChar
readChar
catchClause
e
jjStopStringLiteralDfa_2
active0
return
switch
curChar
case
if
active0
return
jjStartNfaWithStates_2
break
case
break
return
jjStartNfa_2
active0
jjMoveNfa_2
int
startState
int
curPos
int
int
nextStates
int
startsAt
jjnewStateCnt
int
i
jjstateSet
startState
int
j
kind
for
forControl
block
if
jjround
ReInitRounds
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
curChar
block
if
kind
kind
jjCheckNAddTwoStates
if
curChar
jjstateSet
jjnewStateCnt
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
kind
kind
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
l
break
if
kind
kind
jjstateSet
jjnewStateCnt
break
case
if
curChar
jjstateSet
jjnewStateCnt
break
case
if
curChar
kind
kind
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
kind
kind
break
case
if
curChar
break
if
kind
kind
jjCheckNAddTwoStates
break
case
break
if
curChar
block
long
l
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
l
block
if
kind
kind
jjCheckNAdd
if
curChar
jjCheckNAddStates
break
case
if
kind
kind
break
case
if
l
break
if
kind
kind
jjCheckNAdd
break
case
if
l
kind
kind
break
case
if
curChar
jjCheckNAddStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjCheckNAddTwoStates
break
case
if
curChar
jjAddStates
break
case
break
block
int
hiByte
int
curChar
int
i1
hiByte
long
l1
hiByte
int
i2
curChar
long
l2
curChar
do
i
startsAt
block
switch
jjstateSet
i
case
if
jjCanMove_0
hiByte
i1
i2
l1
l2
kind
kind
break
case
break
if
kind
block
jjmatchedKind
kind
jjmatchedPos
curPos
kind
curPos
if
i
jjnewStateCnt
startsAt
jjnewStateCnt
startsAt
return
curPos
try
curChar
readChar
catchClause
e
return
curPos
int
jjnextStates
jjCanMove_0
boolean
hiByte
int
i1
int
i2
int
l1
long
l2
long
switch
hiByte
case
return
jjbitVec2
i2
l2
case
if
jjbitVec0
i1
l1
return
return
String
jjstrLiteralImages
String
lexStateNames
int
jjnewLexState
long
jjtoToken
long
jjtoSkip
long
jjtoSpecial
long
jjtoMore
CharStream
input_stream
int
jjrounds
int
int
jjstateSet
int
StringBuffer
image
int
jjimageLen
int
lengthOfMatch
char
curChar
ParserTokenManager
stream
CharStream
input_stream
stream
ParserTokenManager
stream
CharStream
lexState
int
stream
SwitchTo
lexState
ReInit
stream
CharStream
jjmatchedPos
jjnewStateCnt
curLexState
defaultLexState
input_stream
stream
ReInitRounds
ReInitRounds
int
i
jjround
for
forControl
i
i
jjrounds
i
ReInit
stream
CharStream
lexState
int
ReInit
stream
SwitchTo
lexState
SwitchTo
lexState
int
if
lexState
lexState
throw
TokenMgrError
lexState
INVALID_LEXICAL_STATE
curLexState
lexState
jjFillToken
Token
Token
t
newToken
jjmatchedKind
kind
jjmatchedKind
String
im
jjstrLiteralImages
jjmatchedKind
image
im
GetImage
im
beginLine
getBeginLine
beginColumn
getBeginColumn
endLine
getEndLine
endColumn
getEndColumn
return
t
int
curLexState
int
defaultLexState
int
jjnewStateCnt
int
jjround
int
jjmatchedPos
int
jjmatchedKind
getNextToken
Token
int
kind
Token
specialToken
Token
matchedToken
int
curPos
for
forControl
block
try
curChar
BeginToken
catchClause
e
jjmatchedKind
matchedToken
jjFillToken
specialToken
specialToken
return
matchedToken
image
jjimageLen
for
forControl
block
switch
curLexState
case
jjmatchedKind
jjmatchedPos
curPos
jjMoveStringLiteralDfa0_0
break
case
jjmatchedKind
jjmatchedPos
curPos
jjMoveStringLiteralDfa0_1
if
jjmatchedPos
jjmatchedKind
block
jjmatchedKind
break
case
jjmatchedKind
jjmatchedPos
curPos
jjMoveStringLiteralDfa0_2
if
jjmatchedPos
jjmatchedKind
block
jjmatchedKind
break
case
jjmatchedKind
jjmatchedPos
curPos
jjMoveStringLiteralDfa0_3
break
case
jjmatchedKind
jjmatchedPos
curPos
jjMoveStringLiteralDfa0_4
if
jjmatchedPos
jjmatchedKind
block
jjmatchedKind
break
case
jjmatchedKind
jjmatchedPos
curPos
jjMoveStringLiteralDfa0_5
if
jjmatchedPos
jjmatchedKind
block
jjmatchedKind
break
case
jjmatchedKind
jjmatchedPos
curPos
jjMoveStringLiteralDfa0_6
if
jjmatchedPos
jjmatchedKind
block
jjmatchedKind
break
case
jjmatchedKind
jjmatchedPos
curPos
jjMoveStringLiteralDfa0_7
if
jjmatchedPos
jjmatchedKind
block
jjmatchedKind
break
case
jjmatchedKind
jjmatchedPos
curPos
jjMoveStringLiteralDfa0_8
if
jjmatchedPos
jjmatchedKind
block
jjmatchedKind
break
if
jjmatchedKind
block
if
jjmatchedPos
curPos
backup
curPos
jjmatchedPos
if
jjtoToken
jjmatchedKind
jjmatchedKind
block
matchedToken
jjFillToken
specialToken
specialToken
TokenLexicalActions
matchedToken
if
jjnewLexState
jjmatchedKind
curLexState
jjnewLexState
jjmatchedKind
return
matchedToken
if
jjtoSkip
jjmatchedKind
jjmatchedKind
block
if
jjtoSpecial
jjmatchedKind
jjmatchedKind
block
matchedToken
jjFillToken
if
specialToken
specialToken
matchedToken
block
specialToken
specialToken
specialToken
next
matchedToken
SkipLexicalActions
matchedToken
SkipLexicalActions
if
jjnewLexState
jjmatchedKind
curLexState
jjnewLexState
jjmatchedKind
continue
MoreLexicalActions
if
jjnewLexState
jjmatchedKind
curLexState
jjnewLexState
jjmatchedKind
curPos
jjmatchedKind
try
curChar
readChar
continue
catchClause
e1
int
error_line
getEndLine
int
error_column
getEndColumn
String
error_after
boolean
EOFSeen
try
readChar
backup
catchClause
e1
EOFSeen
error_after
curPos
GetImage
if
curChar
curChar
block
error_line
error_column
error_column
if
EOFSeen
block
backup
error_after
curPos
GetImage
throw
TokenMgrError
EOFSeen
curLexState
error_line
error_column
error_after
curChar
LEXICAL_ERROR
SkipLexicalActions
matchedToken
Token
switch
jjmatchedKind
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
backup
inReference
if
debugPrint
print
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
if
debugPrint
print
backup
inDirective
stateStackPop
break
case
break
MoreLexicalActions
jjimageLen
lengthOfMatch
jjmatchedPos
switch
jjmatchedKind
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
jjimageLen
if
inComment
block
if
curLexState
REFERENCE
block
inReference
stateStackPop
inReference
if
debugPrint
print
REFERENCE
stateStackPush
SwitchTo
REFERENCE
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
jjimageLen
if
inComment
block
if
curLexState
REFERENCE
block
inReference
stateStackPop
inReference
if
debugPrint
print
REFERENCE
stateStackPush
SwitchTo
REFERENCE
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
jjimageLen
backup
inComment
stateStackPush
SwitchTo
IN_FORMAL_COMMENT
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
jjimageLen
inComment
stateStackPush
SwitchTo
IN_MULTI_LINE_COMMENT
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
jjimageLen
if
inComment
block
if
curLexState
REFERENCE
curLexState
REFMODIFIER
block
inReference
stateStackPop
inDirective
if
debugPrint
print
DIRECTIVE
stateStackPush
SwitchTo
PRE_DIRECTIVE
break
case
break
TokenLexicalActions
matchedToken
Token
switch
jjmatchedKind
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
if
inComment
lparen
if
curLexState
REFMODIFIER
SwitchTo
REFMOD2
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
RPARENHandler
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
SwitchTo
REFERENCE
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
if
inComment
block
inDirective
if
debugPrint
print
DIRECTIVE
stateStackPush
inSet
SwitchTo
DIRECTIVE
if
inComment
block
lparen
if
curLexState
REFMODIFIER
SwitchTo
REFMOD2
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
if
inComment
block
if
curLexState
REFERENCE
block
inReference
stateStackPop
inComment
stateStackPush
SwitchTo
IN_SINGLE_LINE_COMMENT
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
inComment
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
inComment
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
inComment
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
if
curLexState
DIRECTIVE
inSet
lparen
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
if
debugPrint
println
stateStackPop
if
inSet
inSet
if
inDirective
inDirective
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
inDirective
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
SwitchTo
DIRECTIVE
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
SwitchTo
DIRECTIVE
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
inDirective
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
inDirective
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
if
endsWith
block
backup
image
substring
length
if
lparen
inSet
curLexState
REFMOD2
block
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
if
lparen
inSet
curLexState
REFMOD2
block
stateStackPop
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
backup
image
if
debugPrint
print
REFMODIFIER
SwitchTo
REFMODIFIER
break
case
if
image
image
StringBuffer
append
GetSuffix
jjimageLen
lengthOfMatch
jjmatchedPos
stateStackPop
break
case
break
ParserConstants
