Parser
JJTParserState
jjtree
JJTParserState
Hashtable
directives
Hashtable
String
currentTemplateName
VelocityCharStream
velcharstream
RuntimeServices
rsvc
Parser
rs
RuntimeServices
VelocityCharStream
ByteArrayInputStream
getBytes
velcharstream
VelocityCharStream
ByteArrayInputStream
getBytes
rsvc
rs
parse
SimpleNode
reader
Reader
templateName
String
SimpleNode
sn
currentTemplateName
templateName
try
clearStateVars
ReInit
reader
ReInit
velcharstream
sn
process
catchClause
mee
getLog
error
templateName
mee
throw
mee
catchClause
pe
getLog
error
templateName
pe
throw
TemplateParseException
currentToken
expectedTokenSequences
tokenImage
currentTemplateName
catchClause
tme
throw
ParseException
toString
catchClause
e
getLog
error
templateName
e
currentTemplateName
return
sn
setDirectives
directives
Hashtable
directives
directives
getDirective
Directive
directive
String
return
Directive
get
directive
isDirective
boolean
directive
String
return
containsKey
directive
escapedDirective
String
strImage
String
int
iLast
lastIndexOf
String
strDirective
substring
iLast
boolean
bRecognizedDirective
if
isDirective
substring
block
bRecognizedDirective
if
isVelocimacro
substring
currentTemplateName
block
bRecognizedDirective
block
if
substring
equals
substring
equals
substring
equals
substring
equals
substring
equals
substring
equals
block
bRecognizedDirective
if
bRecognizedDirective
return
substring
iLast
strDirective
return
strImage
process
SimpleNode
ASTprocess
jjtn000
ASTprocess
JJTPROCESS
boolean
jjtc000
openNodeScope
jjtn000
try
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
Statement
jj_consume_token
closeNodeScope
jjtn000
jjtc000
block
if
return
jjtn000
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
throw
Error
Statement
switch
jj_ntk
jj_ntk
jj_ntk
case
IfStatement
break
case
StopStatement
break
case
jj_la1
jj_gen
if
jj_2_1
block
Reference
block
switch
jj_ntk
jj_ntk
jj_ntk
case
Comment
break
case
SetDirective
break
case
EscapedDirective
break
case
Escape
break
case
Directive
break
case
Text
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
EscapedDirective
ASTEscapedDirective
jjtn000
ASTEscapedDirective
JJTESCAPEDDIRECTIVE
boolean
jjtc000
openNodeScope
jjtn000
try
Token
t
t
jj_consume_token
ESCAPE_DIRECTIVE
closeNodeScope
jjtn000
jjtc000
image
escapedDirective
image
if
jjtc000
block
closeNodeScope
jjtn000
Escape
ASTEscape
jjtn000
ASTEscape
JJTESCAPE
boolean
jjtc000
openNodeScope
jjtn000
try
Token
t
int
count
boolean
control
while
block
t
jj_consume_token
DOUBLE_ESCAPE
count
if
jj_2_2
block
block
break
closeNodeScope
jjtn000
jjtc000
switch
kind
case
control
break
if
isDirective
substring
control
if
isVelocimacro
substring
currentTemplateName
control
val
for
forControl
int
i
i
count
i
val
control
if
jjtc000
block
closeNodeScope
jjtn000
Comment
ASTComment
jjtn000
ASTComment
JJTCOMMENT
boolean
jjtc000
openNodeScope
jjtn000
try
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
SINGLE_LINE_COMMENT_START
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
SINGLE_LINE_COMMENT
break
case
jj_la1
jj_gen
break
case
jj_consume_token
MULTI_LINE_COMMENT
break
case
jj_consume_token
FORMAL_COMMENT
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
if
jjtc000
block
closeNodeScope
jjtn000
FloatingPointLiteral
ASTFloatingPointLiteral
jjtn000
ASTFloatingPointLiteral
JJTFLOATINGPOINTLITERAL
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
FLOATING_POINT_LITERAL
if
jjtc000
block
closeNodeScope
jjtn000
IntegerLiteral
ASTIntegerLiteral
jjtn000
ASTIntegerLiteral
JJTINTEGERLITERAL
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
INTEGER_LITERAL
if
jjtc000
block
closeNodeScope
jjtn000
StringLiteral
ASTStringLiteral
jjtn000
ASTStringLiteral
JJTSTRINGLITERAL
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
STRING_LITERAL
if
jjtc000
block
closeNodeScope
jjtn000
Identifier
ASTIdentifier
jjtn000
ASTIdentifier
JJTIDENTIFIER
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
IDENTIFIER
if
jjtc000
block
closeNodeScope
jjtn000
Word
ASTWord
jjtn000
ASTWord
JJTWORD
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
WORD
if
jjtc000
block
closeNodeScope
jjtn000
DirectiveArg
int
switch
jj_ntk
jj_ntk
jj_ntk
case
Reference
block
if
return
JJTREFERENCE
break
case
Word
block
if
return
JJTWORD
break
case
StringLiteral
block
if
return
JJTSTRINGLITERAL
break
case
IntegerLiteral
block
if
return
JJTINTEGERLITERAL
break
case
jj_la1
jj_gen
if
jj_2_3
block
IntegerRange
block
if
return
JJTINTEGERRANGE
block
switch
jj_ntk
jj_ntk
jj_ntk
case
FloatingPointLiteral
block
if
return
JJTFLOATINGPOINTLITERAL
break
case
Map
block
if
return
JJTMAP
break
case
ObjectArray
block
if
return
JJTOBJECTARRAY
break
case
True
block
if
return
JJTTRUE
break
case
False
block
if
return
JJTFALSE
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
throw
Error
Directive
SimpleNode
ASTDirective
jjtn000
ASTDirective
JJTDIRECTIVE
boolean
jjtc000
openNodeScope
jjtn000
Token
t
int
argType
int
argPos
Directive
d
int
directiveType
boolean
isVM
boolean
doItNow
try
switch
jj_ntk
jj_ntk
jj_ntk
case
t
jj_consume_token
WORD
break
case
t
jj_consume_token
BRACKETED_WORD
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
String
directiveName
if
kind
BRACKETED_WORD
block
directiveName
substring
length
block
directiveName
substring
d
Directive
get
directiveName
if
equals
block
doItNow
setDirectiveName
directiveName
if
d
block
isVM
isVelocimacro
directiveName
currentTemplateName
if
isVM
block
stateStackPop
inDirective
block
if
return
jjtn000
directiveType
LINE
block
directiveType
getType
SwitchTo
DIRECTIVE
argPos
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_consume_token
LPAREN
while
block
if
jj_2_4
block
block
break
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
COMMA
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
break
case
jj_la1
jj_gen
argType
DirectiveArg
if
argType
JJTWORD
block
if
doItNow
argPos
block
if
equals
equals
argPos
block
block
block
if
throw
MacroParseException
argPos
isVM
image
currentTemplateName
t
block
if
doItNow
argPos
block
block
if
throw
MacroParseException
currentTemplateName
t
argPos
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_consume_token
RPAREN
if
directiveType
LINE
block
block
if
return
jjtn000
ASTBlock
jjtn001
ASTBlock
JJTBLOCK
boolean
jjtc001
openNodeScope
jjtn001
try
while
block
Statement
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
jj_consume_token
END
closeNodeScope
jjtn000
jjtc000
if
doItNow
block
processAndRegister
rsvc
t
jjtn000
currentTemplateName
block
if
return
jjtn000
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
throw
Error
Map
ASTMap
jjtn000
ASTMap
JJTMAP
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
LEFT_CURLEY
if
jj_2_5
block
Parameter
jj_consume_token
COLON
Parameter
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
jj_consume_token
COMMA
Parameter
jj_consume_token
COLON
Parameter
block
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_consume_token
RIGHT_CURLEY
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
ObjectArray
ASTObjectArray
jjtn000
ASTObjectArray
JJTOBJECTARRAY
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
LBRACKET
switch
jj_ntk
jj_ntk
jj_ntk
case
Parameter
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
jj_consume_token
COMMA
Parameter
break
case
jj_la1
jj_gen
jj_consume_token
RBRACKET
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
IntegerRange
ASTIntegerRange
jjtn000
ASTIntegerRange
JJTINTEGERRANGE
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
LBRACKET
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
switch
jj_ntk
jj_ntk
jj_ntk
case
Reference
break
case
IntegerLiteral
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_consume_token
DOUBLEDOT
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
switch
jj_ntk
jj_ntk
jj_ntk
case
Reference
break
case
IntegerLiteral
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_consume_token
RBRACKET
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
Parameter
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
switch
jj_ntk
jj_ntk
jj_ntk
case
StringLiteral
break
case
IntegerLiteral
break
case
jj_la1
jj_gen
if
jj_2_6
block
IntegerRange
block
switch
jj_ntk
jj_ntk
jj_ntk
case
Map
break
case
ObjectArray
break
case
True
break
case
False
break
case
Reference
break
case
FloatingPointLiteral
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
Method
ASTMethod
jjtn000
ASTMethod
JJTMETHOD
boolean
jjtc000
openNodeScope
jjtn000
try
Identifier
jj_consume_token
LPAREN
switch
jj_ntk
jj_ntk
jj_ntk
case
Parameter
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
jj_consume_token
COMMA
Parameter
break
case
jj_la1
jj_gen
jj_consume_token
REFMOD2_RPAREN
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
Reference
ASTReference
jjtn000
ASTReference
JJTREFERENCE
boolean
jjtc000
openNodeScope
jjtn000
try
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
IDENTIFIER
while
block
if
jj_2_7
block
block
break
jj_consume_token
DOT
if
jj_2_8
block
Method
block
switch
jj_ntk
jj_ntk
jj_ntk
case
Identifier
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
break
case
jj_consume_token
LCURLY
jj_consume_token
IDENTIFIER
while
block
if
jj_2_9
block
block
break
jj_consume_token
DOT
if
jj_2_10
block
Method
block
switch
jj_ntk
jj_ntk
jj_ntk
case
Identifier
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
jj_consume_token
RCURLY
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
True
ASTTrue
jjtn000
ASTTrue
JJTTRUE
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
TRUE
if
jjtc000
block
closeNodeScope
jjtn000
False
ASTFalse
jjtn000
ASTFalse
JJTFALSE
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
FALSE
if
jjtc000
block
closeNodeScope
jjtn000
Text
ASTText
jjtn000
ASTText
JJTTEXT
boolean
jjtc000
openNodeScope
jjtn000
try
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
TEXT
break
case
jj_consume_token
DOT
break
case
jj_consume_token
RPAREN
break
case
jj_consume_token
LPAREN
break
case
jj_consume_token
INTEGER_LITERAL
break
case
jj_consume_token
FLOATING_POINT_LITERAL
break
case
jj_consume_token
STRING_LITERAL
break
case
jj_consume_token
ESCAPE
break
case
jj_consume_token
LCURLY
break
case
jj_consume_token
RCURLY
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
if
jjtc000
block
closeNodeScope
jjtn000
IfStatement
ASTIfStatement
jjtn000
ASTIfStatement
JJTIFSTATEMENT
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
IF_DIRECTIVE
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_consume_token
LPAREN
Expression
jj_consume_token
RPAREN
ASTBlock
jjtn001
ASTBlock
JJTBLOCK
boolean
jjtc001
openNodeScope
jjtn001
try
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
Statement
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
switch
jj_ntk
jj_ntk
jj_ntk
case
while
block
ElseIfStatement
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
break
case
jj_la1
jj_gen
switch
jj_ntk
jj_ntk
jj_ntk
case
ElseStatement
break
case
jj_la1
jj_gen
jj_consume_token
END
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
ElseStatement
ASTElseStatement
jjtn000
ASTElseStatement
JJTELSESTATEMENT
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
ELSE_DIRECTIVE
ASTBlock
jjtn001
ASTBlock
JJTBLOCK
boolean
jjtc001
openNodeScope
jjtn001
try
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
Statement
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
ElseIfStatement
ASTElseIfStatement
jjtn000
ASTElseIfStatement
JJTELSEIFSTATEMENT
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
ELSEIF_DIRECTIVE
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_consume_token
LPAREN
Expression
jj_consume_token
RPAREN
ASTBlock
jjtn001
ASTBlock
JJTBLOCK
boolean
jjtc001
openNodeScope
jjtn001
try
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
Statement
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
SetDirective
ASTSetDirective
jjtn000
ASTSetDirective
JJTSETDIRECTIVE
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
SET_DIRECTIVE
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
Reference
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_consume_token
EQUALS
Expression
jj_consume_token
RPAREN
inSet
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
NEWLINE
break
case
jj_la1
jj_gen
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
StopStatement
ASTStop
jjtn000
ASTStop
JJTSTOP
boolean
jjtc000
openNodeScope
jjtn000
try
jj_consume_token
STOP_DIRECTIVE
if
jjtc000
block
closeNodeScope
jjtn000
Expression
ASTExpression
jjtn000
ASTExpression
JJTEXPRESSION
boolean
jjtc000
openNodeScope
jjtn000
try
ConditionalOrExpression
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
Assignment
ASTAssignment
jjtn000
ASTAssignment
JJTASSIGNMENT
boolean
jjtc000
openNodeScope
jjtn000
try
PrimaryExpression
jj_consume_token
EQUALS
Expression
catchClause
jjte000
if
jjtc000
block
clearNodeScope
jjtn000
jjtc000
block
popNode
if
jjte000
RuntimeException
block
block
if
throw
RuntimeException
jjte000
if
jjte000
ParseException
block
block
if
throw
ParseException
jjte000
block
if
throw
Error
jjte000
if
jjtc000
block
closeNodeScope
jjtn000
ConditionalOrExpression
ConditionalAndExpression
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
jj_consume_token
LOGICAL_OR
ASTOrNode
jjtn001
ASTOrNode
JJTORNODE
boolean
jjtc001
openNodeScope
jjtn001
try
ConditionalAndExpression
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
ConditionalAndExpression
EqualityExpression
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
jj_consume_token
LOGICAL_AND
ASTAndNode
jjtn001
ASTAndNode
JJTANDNODE
boolean
jjtc001
openNodeScope
jjtn001
try
EqualityExpression
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
EqualityExpression
RelationalExpression
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
LOGICAL_EQUALS
ASTEQNode
jjtn001
ASTEQNode
JJTEQNODE
boolean
jjtc001
openNodeScope
jjtn001
try
RelationalExpression
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
break
case
jj_consume_token
LOGICAL_NOT_EQUALS
ASTNENode
jjtn002
ASTNENode
JJTNENODE
boolean
jjtc002
openNodeScope
jjtn002
try
RelationalExpression
catchClause
jjte002
if
jjtc002
block
clearNodeScope
jjtn002
jjtc002
block
popNode
if
jjte002
RuntimeException
block
block
if
throw
RuntimeException
jjte002
if
jjte002
ParseException
block
block
if
throw
ParseException
jjte002
block
if
throw
Error
jjte002
if
jjtc002
block
closeNodeScope
jjtn002
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
RelationalExpression
AdditiveExpression
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
LOGICAL_LT
ASTLTNode
jjtn001
ASTLTNode
JJTLTNODE
boolean
jjtc001
openNodeScope
jjtn001
try
AdditiveExpression
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
break
case
jj_consume_token
LOGICAL_GT
ASTGTNode
jjtn002
ASTGTNode
JJTGTNODE
boolean
jjtc002
openNodeScope
jjtn002
try
AdditiveExpression
catchClause
jjte002
if
jjtc002
block
clearNodeScope
jjtn002
jjtc002
block
popNode
if
jjte002
RuntimeException
block
block
if
throw
RuntimeException
jjte002
if
jjte002
ParseException
block
block
if
throw
ParseException
jjte002
block
if
throw
Error
jjte002
if
jjtc002
block
closeNodeScope
jjtn002
break
case
jj_consume_token
LOGICAL_LE
ASTLENode
jjtn003
ASTLENode
JJTLENODE
boolean
jjtc003
openNodeScope
jjtn003
try
AdditiveExpression
catchClause
jjte003
if
jjtc003
block
clearNodeScope
jjtn003
jjtc003
block
popNode
if
jjte003
RuntimeException
block
block
if
throw
RuntimeException
jjte003
if
jjte003
ParseException
block
block
if
throw
ParseException
jjte003
block
if
throw
Error
jjte003
if
jjtc003
block
closeNodeScope
jjtn003
break
case
jj_consume_token
LOGICAL_GE
ASTGENode
jjtn004
ASTGENode
JJTGENODE
boolean
jjtc004
openNodeScope
jjtn004
try
AdditiveExpression
catchClause
jjte004
if
jjtc004
block
clearNodeScope
jjtn004
jjtc004
block
popNode
if
jjte004
RuntimeException
block
block
if
throw
RuntimeException
jjte004
if
jjte004
ParseException
block
block
if
throw
ParseException
jjte004
block
if
throw
Error
jjte004
if
jjtc004
block
closeNodeScope
jjtn004
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
AdditiveExpression
MultiplicativeExpression
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
PLUS
ASTAddNode
jjtn001
ASTAddNode
JJTADDNODE
boolean
jjtc001
openNodeScope
jjtn001
try
MultiplicativeExpression
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
break
case
jj_consume_token
MINUS
ASTSubtractNode
jjtn002
ASTSubtractNode
JJTSUBTRACTNODE
boolean
jjtc002
openNodeScope
jjtn002
try
MultiplicativeExpression
catchClause
jjte002
if
jjtc002
block
clearNodeScope
jjtn002
jjtc002
block
popNode
if
jjte002
RuntimeException
block
block
if
throw
RuntimeException
jjte002
if
jjte002
ParseException
block
block
if
throw
ParseException
jjte002
block
if
throw
Error
jjte002
if
jjtc002
block
closeNodeScope
jjtn002
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
MultiplicativeExpression
UnaryExpression
while
block
switch
jj_ntk
jj_ntk
jj_ntk
case
break
case
jj_la1
jj_gen
break
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
MULTIPLY
ASTMulNode
jjtn001
ASTMulNode
JJTMULNODE
boolean
jjtc001
openNodeScope
jjtn001
try
UnaryExpression
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
break
case
jj_consume_token
DIVIDE
ASTDivNode
jjtn002
ASTDivNode
JJTDIVNODE
boolean
jjtc002
openNodeScope
jjtn002
try
UnaryExpression
catchClause
jjte002
if
jjtc002
block
clearNodeScope
jjtn002
jjtc002
block
popNode
if
jjte002
RuntimeException
block
block
if
throw
RuntimeException
jjte002
if
jjte002
ParseException
block
block
if
throw
ParseException
jjte002
block
if
throw
Error
jjte002
if
jjtc002
block
closeNodeScope
jjtn002
break
case
jj_consume_token
MODULUS
ASTModNode
jjtn003
ASTModNode
JJTMODNODE
boolean
jjtc003
openNodeScope
jjtn003
try
UnaryExpression
catchClause
jjte003
if
jjtc003
block
clearNodeScope
jjtn003
jjtc003
block
popNode
if
jjte003
RuntimeException
block
block
if
throw
RuntimeException
jjte003
if
jjte003
ParseException
block
block
if
throw
ParseException
jjte003
block
if
throw
Error
jjte003
if
jjtc003
block
closeNodeScope
jjtn003
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
UnaryExpression
if
jj_2_11
block
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_consume_token
LOGICAL_NOT
ASTNotNode
jjtn001
ASTNotNode
JJTNOTNODE
boolean
jjtc001
openNodeScope
jjtn001
try
UnaryExpression
catchClause
jjte001
if
jjtc001
block
clearNodeScope
jjtn001
jjtc001
block
popNode
if
jjte001
RuntimeException
block
block
if
throw
RuntimeException
jjte001
if
jjte001
ParseException
block
block
if
throw
ParseException
jjte001
block
if
throw
Error
jjte001
if
jjtc001
block
closeNodeScope
jjtn001
block
switch
jj_ntk
jj_ntk
jj_ntk
case
PrimaryExpression
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
PrimaryExpression
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
switch
jj_ntk
jj_ntk
jj_ntk
case
StringLiteral
break
case
Reference
break
case
IntegerLiteral
break
case
jj_la1
jj_gen
if
jj_2_12
block
IntegerRange
block
switch
jj_ntk
jj_ntk
jj_ntk
case
FloatingPointLiteral
break
case
Map
break
case
ObjectArray
break
case
True
break
case
False
break
case
jj_consume_token
LPAREN
Expression
jj_consume_token
RPAREN
break
case
jj_la1
jj_gen
jj_consume_token
throw
ParseException
switch
jj_ntk
jj_ntk
jj_ntk
case
jj_consume_token
WHITESPACE
break
case
jj_la1
jj_gen
jj_2_1
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_1
catchClause
ls
return
jj_save
xla
jj_2_2
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_2
catchClause
ls
return
jj_save
xla
jj_2_3
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_3
catchClause
ls
return
jj_save
xla
jj_2_4
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_4
catchClause
ls
return
jj_save
xla
jj_2_5
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_5
catchClause
ls
return
jj_save
xla
jj_2_6
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_6
catchClause
ls
return
jj_save
xla
jj_2_7
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_7
catchClause
ls
return
jj_save
xla
jj_2_8
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_8
catchClause
ls
return
jj_save
xla
jj_2_9
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_9
catchClause
ls
return
jj_save
xla
jj_2_10
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_10
catchClause
ls
return
jj_save
xla
jj_2_11
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_11
catchClause
ls
return
jj_save
xla
jj_2_12
boolean
xla
int
jj_la
xla
jj_lastpos
jj_scanpos
token
try
return
jj_3_12
catchClause
ls
return
jj_save
xla
jj_3R_82
boolean
if
jj_scan_token
COMMA
return
if
jj_3R_25
return
return
jj_3_8
boolean
if
jj_3R_29
return
return
jj_3R_26
boolean
if
jj_3R_20
return
return
jj_3R_66
boolean
if
jj_scan_token
FALSE
return
return
jj_3R_65
boolean
if
jj_scan_token
TRUE
return
return
jj_3_9
boolean
if
jj_scan_token
DOT
return
Token
xsp
xsp
jj_scanpos
if
jj_3_10
block
jj_scanpos
xsp
if
jj_3R_30
return
return
jj_3R_57
boolean
if
jj_3R_25
return
Token
xsp
while
block
xsp
jj_scanpos
if
jj_3R_82
block
jj_scanpos
xsp
break
return
jj_3_7
boolean
if
jj_scan_token
DOT
return
Token
xsp
xsp
jj_scanpos
if
jj_3_8
block
jj_scanpos
xsp
if
jj_3R_28
return
return
jj_3_2
boolean
if
jj_scan_token
DOUBLE_ESCAPE
return
return
jj_3R_35
boolean
if
jj_scan_token
LCURLY
return
if
jj_scan_token
IDENTIFIER
return
Token
xsp
while
block
xsp
jj_scanpos
if
jj_3_9
block
jj_scanpos
xsp
break
if
jj_scan_token
RCURLY
return
return
jj_3_12
boolean
if
jj_scan_token
LBRACKET
return
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
xsp
jj_scanpos
if
jj_3R_32
block
jj_scanpos
xsp
if
jj_3R_33
return
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
if
jj_scan_token
DOUBLEDOT
return
return
jj_3R_34
boolean
if
jj_scan_token
IDENTIFIER
return
Token
xsp
while
block
xsp
jj_scanpos
if
jj_3_7
block
jj_scanpos
xsp
break
return
jj_3R_81
boolean
if
jj_scan_token
LPAREN
return
return
jj_3R_80
boolean
if
jj_3R_66
return
return
jj_3R_79
boolean
if
jj_3R_65
return
return
jj_3R_20
boolean
Token
xsp
xsp
jj_scanpos
if
jj_3R_34
block
jj_scanpos
xsp
if
jj_3R_35
return
return
jj_3R_78
boolean
if
jj_3R_64
return
return
jj_3R_77
boolean
if
jj_3R_63
return
return
jj_3R_76
boolean
if
jj_3R_62
return
return
jj_3R_75
boolean
if
jj_3R_61
return
return
jj_3R_74
boolean
if
jj_3R_36
return
return
jj_3R_73
boolean
if
jj_3R_20
return
return
jj_3_6
boolean
if
jj_scan_token
LBRACKET
return
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
xsp
jj_scanpos
if
jj_3R_26
block
jj_scanpos
xsp
if
jj_3R_27
return
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
if
jj_scan_token
DOUBLEDOT
return
return
jj_3R_29
boolean
if
jj_3R_56
return
if
jj_scan_token
LPAREN
return
Token
xsp
xsp
jj_scanpos
if
jj_3R_57
jj_scanpos
xsp
if
jj_scan_token
REFMOD2_RPAREN
return
return
jj_3R_72
boolean
if
jj_3R_60
return
return
jj_3R_67
boolean
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
xsp
jj_scanpos
if
jj_3R_72
block
jj_scanpos
xsp
if
jj_3R_73
block
jj_scanpos
xsp
if
jj_3R_74
block
jj_scanpos
xsp
if
jj_3R_75
block
jj_scanpos
xsp
if
jj_3R_76
block
jj_scanpos
xsp
if
jj_3R_77
block
jj_scanpos
xsp
if
jj_3R_78
block
jj_scanpos
xsp
if
jj_3R_79
block
jj_scanpos
xsp
if
jj_3R_80
block
jj_scanpos
xsp
if
jj_3R_81
return
return
jj_3R_55
boolean
if
jj_3R_62
return
return
jj_3R_54
boolean
if
jj_3R_20
return
return
jj_3R_53
boolean
if
jj_3R_66
return
return
jj_3R_85
boolean
if
jj_scan_token
COMMA
return
if
jj_3R_25
return
if
jj_scan_token
COLON
return
if
jj_3R_25
return
return
jj_3R_52
boolean
if
jj_3R_65
return
return
jj_3R_31
boolean
Token
xsp
xsp
jj_scanpos
if
jj_3_11
block
jj_scanpos
xsp
if
jj_3R_58
return
return
jj_3_11
boolean
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
if
jj_scan_token
LOGICAL_NOT
return
if
jj_3R_31
return
return
jj_3R_58
boolean
if
jj_3R_67
return
return
jj_3R_51
boolean
if
jj_3R_64
return
return
jj_3R_50
boolean
if
jj_3R_63
return
return
jj_3R_49
boolean
if
jj_3R_61
return
return
jj_3R_48
boolean
if
jj_3R_36
return
return
jj_3R_47
boolean
if
jj_3R_60
return
return
jj_3R_22
boolean
if
jj_3R_36
return
return
jj_3R_84
boolean
if
jj_3R_36
return
return
jj_3R_69
boolean
if
jj_3R_36
return
return
jj_3R_86
boolean
if
jj_scan_token
COMMA
return
if
jj_3R_25
return
return
jj_3R_25
boolean
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
xsp
jj_scanpos
if
jj_3R_47
block
jj_scanpos
xsp
if
jj_3R_48
block
jj_scanpos
xsp
if
jj_3R_49
block
jj_scanpos
xsp
if
jj_3R_50
block
jj_scanpos
xsp
if
jj_3R_51
block
jj_scanpos
xsp
if
jj_3R_52
block
jj_scanpos
xsp
if
jj_3R_53
block
jj_scanpos
xsp
if
jj_3R_54
block
jj_scanpos
xsp
if
jj_3R_55
return
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
return
jj_3_1
boolean
if
jj_3R_20
return
return
jj_3R_21
boolean
if
jj_3R_20
return
return
jj_3R_83
boolean
if
jj_3R_20
return
return
jj_3R_68
boolean
if
jj_3R_20
return
return
jj_3R_71
boolean
if
jj_3R_25
return
Token
xsp
while
block
xsp
jj_scanpos
if
jj_3R_86
block
jj_scanpos
xsp
break
return
jj_3R_61
boolean
if
jj_scan_token
LBRACKET
return
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
xsp
jj_scanpos
if
jj_3R_68
block
jj_scanpos
xsp
if
jj_3R_69
return
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
if
jj_scan_token
DOUBLEDOT
return
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
xsp
jj_scanpos
if
jj_3R_83
block
jj_scanpos
xsp
if
jj_3R_84
return
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
if
jj_scan_token
RBRACKET
return
return
jj_3R_64
boolean
if
jj_scan_token
LBRACKET
return
Token
xsp
xsp
jj_scanpos
if
jj_3R_71
jj_scanpos
xsp
if
jj_scan_token
RBRACKET
return
return
jj_3R_46
boolean
if
jj_3R_66
return
return
jj_3R_70
boolean
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
return
jj_3_5
boolean
if
jj_3R_25
return
if
jj_scan_token
COLON
return
if
jj_3R_25
return
Token
xsp
while
block
xsp
jj_scanpos
if
jj_3R_85
block
jj_scanpos
xsp
break
return
jj_3R_45
boolean
if
jj_3R_65
return
return
jj_3R_63
boolean
if
jj_scan_token
LEFT_CURLEY
return
Token
xsp
xsp
jj_scanpos
if
jj_3_5
block
jj_scanpos
xsp
if
jj_3R_70
return
if
jj_scan_token
RIGHT_CURLEY
return
return
jj_3_3
boolean
if
jj_scan_token
LBRACKET
return
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
xsp
jj_scanpos
if
jj_3R_21
block
jj_scanpos
xsp
if
jj_3R_22
return
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
if
jj_scan_token
DOUBLEDOT
return
return
jj_3R_44
boolean
if
jj_3R_64
return
return
jj_3R_43
boolean
if
jj_3R_63
return
return
jj_3R_42
boolean
if
jj_3R_62
return
return
jj_3R_41
boolean
if
jj_3R_61
return
return
jj_3R_40
boolean
if
jj_3R_36
return
return
jj_3R_39
boolean
if
jj_3R_60
return
return
jj_3R_23
boolean
if
jj_scan_token
COMMA
return
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
return
jj_3R_38
boolean
if
jj_3R_59
return
return
jj_3R_37
boolean
if
jj_3R_20
return
return
jj_3R_24
boolean
Token
xsp
xsp
jj_scanpos
if
jj_3R_37
block
jj_scanpos
xsp
if
jj_3R_38
block
jj_scanpos
xsp
if
jj_3R_39
block
jj_scanpos
xsp
if
jj_3R_40
block
jj_scanpos
xsp
if
jj_3R_41
block
jj_scanpos
xsp
if
jj_3R_42
block
jj_scanpos
xsp
if
jj_3R_43
block
jj_scanpos
xsp
if
jj_3R_44
block
jj_scanpos
xsp
if
jj_3R_45
block
jj_scanpos
xsp
if
jj_3R_46
return
return
jj_3R_59
boolean
if
jj_scan_token
WORD
return
return
jj_3R_56
boolean
if
jj_scan_token
IDENTIFIER
return
return
jj_3_4
boolean
Token
xsp
xsp
jj_scanpos
if
jj_scan_token
jj_scanpos
xsp
xsp
jj_scanpos
if
jj_3R_23
jj_scanpos
xsp
if
jj_3R_24
return
return
jj_3R_60
boolean
if
jj_scan_token
STRING_LITERAL
return
return
jj_3R_30
boolean
if
jj_3R_56
return
return
jj_3R_36
boolean
if
jj_scan_token
INTEGER_LITERAL
return
return
jj_3R_28
boolean
if
jj_3R_56
return
return
jj_3R_62
boolean
if
jj_scan_token
FLOATING_POINT_LITERAL
return
return
jj_3R_33
boolean
if
jj_3R_36
return
return
jj_3R_32
boolean
if
jj_3R_20
return
return
jj_3R_27
boolean
if
jj_3R_36
return
return
jj_3_10
boolean
if
jj_3R_29
return
return
ParserTokenManager
token_source
Token
token
jj_nt
int
jj_ntk
Token
jj_scanpos
jj_lastpos
int
jj_la
boolean
lookingAhead
boolean
jj_semLA
int
jj_gen
int
jj_la1
int
int
jj_la1_0
int
jj_la1_1
int
jj_la1_2
jj_la1_0
jj_la1_1
jj_la1_2
jj_la1_0
jj_la1_0
int
jj_la1_1
jj_la1_1
int
jj_la1_2
jj_la1_2
int
JJCalls
jj_2_rtns
JJCalls
boolean
jj_rescan
int
jj_gc
Parser
stream
CharStream
token_source
ParserTokenManager
stream
token
Token
jj_ntk
jj_gen
for
forControl
int
i
i
i
jj_la1
i
for
forControl
int
i
i
length
i
jj_2_rtns
i
JJCalls
ReInit
stream
CharStream
ReInit
stream
token
Token
jj_ntk
reset
jj_gen
for
forControl
int
i
i
i
jj_la1
i
for
forControl
int
i
i
length
i
jj_2_rtns
i
JJCalls
Parser
tm
ParserTokenManager
token_source
tm
token
Token
jj_ntk
jj_gen
for
forControl
int
i
i
i
jj_la1
i
for
forControl
int
i
i
length
i
jj_2_rtns
i
JJCalls
ReInit
tm
ParserTokenManager
token_source
tm
token
Token
jj_ntk
reset
jj_gen
for
forControl
int
i
i
i
jj_la1
i
for
forControl
int
i
i
length
i
jj_2_rtns
i
JJCalls
jj_consume_token
Token
kind
int
Token
oldToken
if
oldToken
token
token
next
token
next
getNextToken
jj_ntk
if
kind
kind
block
jj_gen
if
jj_gc
block
jj_gc
for
forControl
int
i
i
length
i
block
JJCalls
c
jj_2_rtns
i
while
c
block
if
gen
jj_gen
first
c
next
return
token
token
oldToken
jj_kind
kind
throw
generateParseException
LookaheadSuccess
java
lang
Error
LookaheadSuccess
jj_ls
LookaheadSuccess
jj_scan_token
boolean
kind
int
if
jj_scanpos
jj_lastpos
block
jj_la
if
next
block
jj_lastpos
jj_scanpos
next
getNextToken
block
jj_lastpos
jj_scanpos
next
block
jj_scanpos
next
if
jj_rescan
block
int
i
Token
tok
token
while
tok
tok
jj_scanpos
block
i
tok
next
if
tok
jj_add_error_token
kind
i
if
kind
kind
return
if
jj_la
jj_scanpos
jj_lastpos
throw
jj_ls
return
getNextToken
Token
if
next
token
next
token
next
getNextToken
jj_ntk
jj_gen
return
token
getToken
Token
index
int
Token
t
lookingAhead
jj_scanpos
token
for
forControl
int
i
i
index
i
block
if
next
t
next
t
next
getNextToken
return
t
jj_ntk
int
if
jj_nt
next
return
jj_ntk
next
getNextToken
return
jj_ntk
kind
java
util
Vector
jj_expentries
java
util
Vector
int
jj_expentry
int
jj_kind
int
jj_lasttokens
int
int
jj_endpos
jj_add_error_token
kind
int
pos
int
if
pos
return
if
pos
jj_endpos
block
jj_lasttokens
jj_endpos
kind
if
jj_endpos
block
jj_expentry
int
jj_endpos
for
forControl
int
i
i
jj_endpos
i
block
jj_expentry
i
jj_lasttokens
i
boolean
exists
for
forControl
java
util
Enumeration
e
elements
hasMoreElements
block
int
oldentry
int
nextElement
if
length
length
block
exists
for
forControl
int
i
i
length
i
block
if
oldentry
i
jj_expentry
i
block
exists
break
if
exists
break
if
exists
addElement
jj_expentry
if
pos
jj_lasttokens
jj_endpos
pos
kind
generateParseException
ParseException
removeAllElements
boolean
la1tokens
boolean
for
forControl
int
i
i
i
block
la1tokens
i
if
jj_kind
block
la1tokens
jj_kind
jj_kind
for
forControl
int
i
i
i
block
if
jj_la1
i
jj_gen
block
for
forControl
int
j
j
j
block
if
jj_la1_0
i
j
block
la1tokens
j
if
jj_la1_1
i
j
block
la1tokens
j
if
jj_la1_2
i
j
block
la1tokens
j
for
forControl
int
i
i
i
block
if
la1tokens
i
block
jj_expentry
int
jj_expentry
i
addElement
jj_expentry
jj_endpos
jj_rescan_token
jj_add_error_token
int
exptokseq
int
size
for
forControl
int
i
i
size
i
block
exptokseq
i
int
elementAt
i
return
ParseException
token
exptokseq
tokenImage
enable_tracing
disable_tracing
jj_rescan_token
jj_rescan
for
forControl
int
i
i
i
block
try
JJCalls
p
jj_2_rtns
i
do
p
block
if
gen
jj_gen
block
jj_la
arg
jj_lastpos
jj_scanpos
first
switch
i
case
jj_3_1
break
case
jj_3_2
break
case
jj_3_3
break
case
jj_3_4
break
case
jj_3_5
break
case
jj_3_6
break
case
jj_3_7
break
case
jj_3_8
break
case
jj_3_9
break
case
jj_3_10
break
case
jj_3_11
break
case
jj_3_12
break
p
next
catchClause
ls
jj_rescan
jj_save
index
int
xla
int
JJCalls
p
jj_2_rtns
index
while
gen
jj_gen
block
if
next
block
p
next
JJCalls
break
p
next
gen
jj_gen
xla
jj_la
first
token
arg
xla
JJCalls
int
gen
Token
first
int
arg
JJCalls
next
ParserTreeConstants
ParserConstants
