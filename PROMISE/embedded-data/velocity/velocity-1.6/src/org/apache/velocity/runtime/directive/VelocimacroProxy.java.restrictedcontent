VelocimacroProxy
String
macroName
String
argArray
String
literalArgArray
SimpleNode
nodeTree
int
numMacroArgs
boolean
preInit
boolean
strictArguments
boolean
localContextScope
int
maxCallDepth
getName
String
return
macroName
getType
int
return
LINE
setName
name
String
macroName
name
setArgArray
arr
String
argArray
arr
literalArgArray
String
length
for
forControl
int
i
i
length
i
block
literalArgArray
i
argArray
i
numMacroArgs
length
setNodeTree
tree
SimpleNode
nodeTree
tree
getNumArgs
int
return
numMacroArgs
render
boolean
context
InternalContextAdapter
writer
Writer
node
Node
ProxyVMContext
vmc
ProxyVMContext
context
rsvc
localContextScope
int
callArguments
jjtGetNumChildren
if
callArguments
block
for
forControl
int
i
i
length
i
callArguments
i
block
Node
macroCallArgument
jjtGetChild
i
addVMProxyArg
context
argArray
i
literalArgArray
i
macroCallArgument
if
maxCallDepth
maxCallDepth
getCurrentMacroCallDepth
block
String
templateName
getCurrentTemplateName
Object
stack
getMacroNameStack
StringBuffer
out
append
append
maxCallDepth
append
append
templateName
append
append
macroName
append
StringBuffer
for
forControl
int
i
i
length
i
block
if
i
block
append
append
stack
i
getLog
error
toString
try
throw
MacroOverflowException
toString
while
getCurrentMacroCallDepth
block
popCurrentMacroName
try
pushCurrentMacroName
macroName
render
vmc
writer
popCurrentMacroName
return
catchClause
e
throw
e
catchClause
e
String
msg
macroName
getLog
error
msg
e
throw
VelocityException
msg
e
init
rs
RuntimeServices
context
InternalContextAdapter
node
Node
synchronized
if
preInit
block
init
rs
context
node
strictArguments
getConfiguration
getBoolean
VM_ARGUMENTS_STRICT
localContextScope
getBoolean
VM_CONTEXT_LOCALSCOPE
maxCallDepth
getInt
VM_MAX_DEPTH
init
context
rs
preInit
int
i
jjtGetNumChildren
if
getNumArgs
i
block
for
forControl
Node
parent
jjtGetParent
parent
block
if
parent
ASTDirective
equals
ASTDirective
parent
block
return
parent
jjtGetParent
String
msg
macroName
getNumArgs
i
getNumArgs
i
if
strictArguments
block
throw
TemplateInitException
msg
getCurrentTemplateName
block
getLog
debug
msg
return
for
forControl
int
n
n
i
n
block
Node
child
jjtGetChild
n
if
getType
JJTWORD
block
throw
TemplateInitException
n
macroName
getCurrentTemplateName
Directive
