BTreeSet
BTreeNode
root
Comparator
comparator
int
order
int
size
BTreeSet
BTreeSet
c
Collection
addAll
c
BTreeSet
order
int
order
BTreeSet
order
int
comparator
Comparator
order
order
comparator
comparator
root
BTreeNode
add
boolean
x
Object
if
x
throw
IllegalArgumentException
return
insert
x
contains
boolean
x
Object
return
includes
x
remove
boolean
x
Object
if
x
return
return
delete
x
size
int
return
size
clear
root
BTreeNode
size
iterator
java
util
Iterator
return
Iterator
compare
int
x
Object
y
Object
return
comparator
Comparable
x
compare
x
y
Iterator
int
index
Stack
parentIndex
Stack
Object
lastReturned
Object
next
BTreeNode
currentNode
Iterator
currentNode
firstNode
next
nextElement
hasNext
boolean
return
next
next
Object
if
next
throw
NoSuchElementException
lastReturned
next
next
nextElement
return
lastReturned
remove
if
lastReturned
throw
NoSuchElementException
remove
lastReturned
lastReturned
firstNode
BTreeNode
BTreeNode
temp
root
while
entries
child
block
temp
entries
child
push
Integer
return
temp
nextElement
Object
if
isLeaf
block
if
index
nrElements
return
entries
index
element
if
empty
block
currentNode
parent
index
Integer
pop
while
index
nrElements
block
if
empty
break
currentNode
parent
index
Integer
pop
if
index
nrElements
return
return
entries
index
element
block
if
index
nrElements
return
return
entries
index
element
block
currentNode
entries
index
child
push
Integer
index
while
entries
child
block
currentNode
entries
child
push
Integer
index
return
entries
element
java
util
Iterator
Entry
Object
element
BTreeNode
child
BTreeNode
Entry
entries
BTreeNode
parent
int
nrElements
int
MIN
order
BTreeNode
parent
BTreeNode
parent
parent
entries
Entry
order
entries
Entry
insert
boolean
x
Object
parentIndex
int
if
isFull
block
Object
splitNode
entries
nrElements
element
BTreeNode
rightSibling
split
if
isRoot
block
splitRoot
splitNode
rightSibling
if
compare
x
root
entries
element
insert
x
insert
x
block
insertSplitNode
splitNode
rightSibling
parentIndex
if
compare
x
entries
parentIndex
element
return
insert
x
parentIndex
return
insert
x
parentIndex
if
isLeaf
block
int
insertAt
childToInsertAt
x
if
insertAt
return
block
insertNewElement
x
insertAt
size
return
block
int
insertAt
childToInsertAt
x
return
insertAt
entries
insertAt
child
insert
x
insertAt
return
includes
boolean
x
Object
int
index
childToInsertAt
x
if
index
return
if
entries
index
entries
index
child
return
return
entries
index
child
includes
x
delete
boolean
x
Object
parentIndex
int
int
i
childToInsertAt
x
int
priorParentIndex
parentIndex
BTreeNode
temp
if
i
block
do
i
block
if
entries
i
entries
i
child
return
temp
entries
i
child
priorParentIndex
parentIndex
parentIndex
i
i
childToInsertAt
x
if
isLeaf
block
if
nrElements
MIN
block
deleteElement
x
size
return
block
prepareForDeletion
parentIndex
deleteElement
x
size
fixAfterDeletion
priorParentIndex
return
block
switchWithSuccessor
x
parentIndex
childToInsertAt
x
return
entries
parentIndex
child
delete
x
parentIndex
isFull
boolean
return
nrElements
order
isLeaf
boolean
return
entries
child
isRoot
boolean
return
parent
split
BTreeNode
BTreeNode
rightSibling
BTreeNode
parent
int
index
nrElements
entries
index
element
for
forControl
int
i
nr
nrElements
index
nr
i
index
block
entries
i
entries
index
if
entries
i
entries
i
child
entries
i
child
parent
rightSibling
entries
index
nrElements
nrElements
nrElements
return
rightSibling
splitRoot
splitNode
Object
left
BTreeNode
right
BTreeNode
BTreeNode
newRoot
BTreeNode
entries
element
splitNode
entries
child
left
entries
Entry
entries
child
right
nrElements
parent
parent
newRoot
root
newRoot
insertSplitNode
splitNode
Object
left
BTreeNode
right
BTreeNode
insertAt
int
for
forControl
int
i
nrElements
i
insertAt
i
entries
i
entries
i
entries
insertAt
Entry
entries
insertAt
element
splitNode
entries
insertAt
child
left
entries
insertAt
child
right
nrElements
insertNewElement
x
Object
insertAt
int
for
forControl
int
i
nrElements
i
insertAt
i
entries
i
entries
i
entries
insertAt
Entry
entries
insertAt
element
x
nrElements
childToInsertAt
int
x
Object
position
boolean
int
index
nrElements
if
entries
index
entries
index
element
return
index
int
lo
hi
nrElements
while
lo
hi
block
if
compare
x
entries
index
element
block
lo
index
index
hi
lo
block
hi
index
index
hi
lo
hi
if
entries
hi
entries
hi
element
return
hi
return
position
hi
compare
x
entries
hi
element
hi
deleteElement
x
Object
int
index
childToInsertAt
x
for
forControl
index
nrElements
index
entries
index
entries
index
if
nrElements
entries
index
Entry
entries
index
nrElements
prepareForDeletion
parentIndex
int
if
isRoot
return
if
parentIndex
entries
parentIndex
child
nrElements
MIN
block
stealLeft
parentIndex
return
if
parentIndex
length
entries
parentIndex
entries
parentIndex
child
entries
parentIndex
child
nrElements
MIN
block
stealRight
parentIndex
return
if
parentIndex
block
mergeLeft
parentIndex
return
mergeRight
parentIndex
fixAfterDeletion
parentIndex
int
if
isRoot
isRoot
return
if
nrElements
MIN
block
BTreeNode
temp
parent
prepareForDeletion
parentIndex
if
parent
return
if
isRoot
nrElements
MIN
block
BTreeNode
x
parent
int
i
for
forControl
i
length
i
if
entries
i
child
parent
break
fixAfterDeletion
i
switchWithSuccessor
x
Object
int
index
childToInsertAt
x
BTreeNode
temp
entries
index
child
while
entries
entries
child
temp
entries
child
Object
successor
entries
element
entries
element
entries
index
element
entries
index
element
successor
stealLeft
parentIndex
int
BTreeNode
p
parent
BTreeNode
ls
entries
parentIndex
child
if
isLeaf
block
int
add
childToInsertAt
entries
parentIndex
element
insertNewElement
entries
parentIndex
element
add
entries
parentIndex
element
entries
nrElements
element
entries
nrElements
nrElements
block
entries
element
entries
parentIndex
element
entries
parentIndex
element
entries
nrElements
element
entries
child
entries
nrElements
child
entries
child
parent
entries
nrElements
entries
nrElements
element
nrElements
nrElements
stealRight
parentIndex
int
BTreeNode
p
parent
BTreeNode
rs
entries
parentIndex
child
if
isLeaf
block
entries
nrElements
Entry
entries
nrElements
element
entries
parentIndex
element
entries
parentIndex
element
entries
element
for
forControl
int
i
i
nrElements
i
entries
i
entries
i
entries
nrElements
nrElements
nrElements
block
for
forControl
int
i
i
nrElements
i
entries
i
entries
i
entries
nrElements
element
entries
parentIndex
element
entries
parentIndex
element
entries
element
entries
nrElements
Entry
entries
nrElements
child
entries
child
entries
nrElements
child
parent
for
forControl
int
i
i
nrElements
i
entries
i
entries
i
entries
nrElements
nrElements
nrElements
mergeLeft
parentIndex
int
BTreeNode
p
parent
BTreeNode
ls
entries
parentIndex
child
if
isLeaf
block
int
add
childToInsertAt
entries
parentIndex
element
insertNewElement
entries
parentIndex
element
add
entries
parentIndex
element
for
forControl
int
i
nrElements
nr
nrElements
i
i
entries
i
nr
entries
i
for
forControl
int
i
nrElements
i
i
block
entries
i
entries
i
nrElements
if
nrElements
MIN
p
root
block
for
forControl
int
x
parentIndex
y
parentIndex
y
x
y
entries
x
entries
y
entries
Entry
entries
child
ls
block
for
forControl
int
x
parentIndex
y
parentIndex
y
nrElements
x
y
entries
x
entries
y
entries
nrElements
nrElements
if
isRoot
nrElements
block
root
parent
block
entries
element
entries
parentIndex
element
entries
child
entries
nrElements
child
nrElements
for
forControl
int
x
nrElements
nr
nrElements
x
x
entries
x
nr
entries
x
for
forControl
int
x
nrElements
x
x
block
entries
x
entries
x
entries
x
child
parent
nrElements
if
nrElements
MIN
p
root
block
for
forControl
int
x
parentIndex
y
parentIndex
y
x
y
block
println
x
y
entries
x
entries
y
entries
Entry
block
for
forControl
int
x
parentIndex
y
parentIndex
y
nrElements
x
y
entries
x
entries
y
entries
nrElements
nrElements
if
isRoot
nrElements
block
root
parent
mergeRight
parentIndex
int
BTreeNode
p
parent
BTreeNode
rs
entries
parentIndex
child
if
isLeaf
block
entries
nrElements
Entry
entries
nrElements
element
entries
parentIndex
element
nrElements
for
forControl
int
i
nr
nrElements
i
nrElements
i
nr
block
entries
nr
entries
i
nrElements
entries
parentIndex
element
entries
parentIndex
element
if
nrElements
MIN
p
root
block
for
forControl
int
x
parentIndex
y
parentIndex
y
x
y
entries
x
entries
y
entries
Entry
entries
child
rs
block
for
forControl
int
x
parentIndex
y
parentIndex
y
nrElements
x
y
entries
x
entries
y
entries
nrElements
nrElements
if
isRoot
nrElements
block
root
parent
block
entries
nrElements
element
entries
parentIndex
element
nrElements
for
forControl
int
x
nrElements
y
y
nrElements
x
y
block
entries
x
entries
y
entries
y
child
parent
nrElements
nrElements
entries
parentIndex
child
if
nrElements
MIN
p
root
block
for
forControl
int
x
parentIndex
y
parentIndex
y
x
y
entries
x
entries
y
entries
Entry
block
for
forControl
int
x
parentIndex
y
parentIndex
y
nrElements
x
y
entries
x
entries
y
entries
nrElements
nrElements
if
isRoot
nrElements
block
root
parent
AbstractSet
Set
