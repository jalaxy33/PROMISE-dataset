TestStringUtil
TestStringUtil
name
String
name
testSimpleGetFromUnicode
byte
test_data
byte
int
index
for
forControl
int
k
k
k
block
test_data
index
byte
test_data
index
byte
k
assertEquals
getFromUnicode
test_data
testGetFromUnicodeSymbolsWithCodesMoreThan127
byte
test_data
byte
assertEquals
getFromUnicode
test_data
testGetFromUnicodeHighSymbolsWithCodesMoreThan127
byte
test_data
byte
assertEquals
getFromUnicodeHigh
test_data
testComplexGetFromUnicode
byte
test_data
byte
int
index
for
forControl
int
k
k
k
block
test_data
index
byte
test_data
index
byte
k
assertEquals
getFromUnicode
test_data
assertEquals
getFromUnicode
test_data
try
getFromUnicode
test_data
fail
catchClause
ignored
try
getFromUnicode
test_data
fail
catchClause
ignored
try
getFromUnicode
test_data
fail
catchClause
ignored
try
getFromUnicode
test_data
fail
catchClause
ignored
testPutCompressedUnicode
byte
output
byte
byte
expected_output
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
String
input
String
expected_output
getPreferredEncoding
putCompressedUnicode
input
output
for
forControl
int
j
j
length
j
block
assertEquals
j
expected_output
j
output
j
putCompressedUnicode
input
output
length
for
forControl
int
j
j
length
j
block
assertEquals
j
expected_output
j
output
j
length
try
putCompressedUnicode
input
output
length
fail
catchClause
ignored
testPutUncompressedUnicode
byte
output
byte
String
input
byte
expected_output
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
byte
putUncompressedUnicode
input
output
for
forControl
int
j
j
length
j
block
assertEquals
j
expected_output
j
output
j
putUncompressedUnicode
input
output
length
for
forControl
int
j
j
length
j
block
assertEquals
j
expected_output
j
output
j
length
try
putUncompressedUnicode
input
output
length
fail
catchClause
ignored
testFormat
assertEquals
fmt
format
Object
Double
assertEquals
fmt
format
Object
Double
assertEquals
fmt
format
Object
Double
assertEquals
format
Object
Integer
assertEquals
format
Object
Integer
Integer
assertEquals
format
Object
Integer
assertEquals
format
Object
assertEquals
format
Object
fmt
String
num
double
minIntDigits
int
maxFracDigitis
int
NumberFormat
nf
getInstance
if
minIntDigits
block
setMinimumIntegerDigits
minIntDigits
if
maxFracDigitis
block
setMaximumFractionDigits
maxFracDigitis
return
format
num
main
ignored_args
String
println
run
TestStringUtil
setUp
setUp
TestCase
