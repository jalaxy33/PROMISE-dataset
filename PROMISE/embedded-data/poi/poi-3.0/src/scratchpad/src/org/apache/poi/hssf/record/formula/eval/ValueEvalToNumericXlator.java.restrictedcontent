ValueEvalToNumericXlator
int
STRING_IS_PARSED
int
BOOL_IS_PARSED
int
BLANK_IS_PARSED
int
REF_STRING_IS_PARSED
int
REF_BOOL_IS_PARSED
int
REF_BLANK_IS_PARSED
int
EVALUATED_REF_STRING_IS_PARSED
int
EVALUATED_REF_BOOL_IS_PARSED
int
EVALUATED_REF_BLANK_IS_PARSED
int
STRING_TO_BOOL_IS_PARSED
int
REF_STRING_TO_BOOL_IS_PARSED
int
STRING_IS_INVALID_VALUE
int
REF_STRING_IS_INVALID_VALUE
int
flags
ValueEvalToNumericXlator
flags
int
flags
flags
attemptXlateToNumeric
ValueEval
eval
ValueEval
ValueEval
retval
if
eval
block
retval
INSTANCE
if
eval
NumberEval
block
retval
NumberEval
eval
if
eval
BoolEval
block
retval
flags
BOOL_IS_PARSED
NumericValueEval
eval
xlateBlankEval
BLANK_IS_PARSED
if
eval
StringEval
block
retval
xlateStringEval
StringEval
eval
if
eval
RefEval
block
retval
xlateRefEval
RefEval
eval
if
eval
ErrorEval
block
retval
eval
if
eval
BlankEval
block
retval
xlateBlankEval
BLANK_IS_PARSED
block
throw
RuntimeException
getClass
return
retval
xlateBlankEval
ValueEval
flag
int
return
flags
flag
ValueEval
ZERO
INSTANCE
xlateRefEval
ValueEval
reval
RefEval
ValueEval
retval
ValueEval
eval
ValueEval
getInnerValueEval
if
eval
NumberEval
block
retval
NumberEval
eval
if
eval
BoolEval
block
retval
flags
REF_BOOL_IS_PARSED
ValueEval
eval
INSTANCE
if
eval
StringEval
block
retval
xlateRefStringEval
StringEval
eval
if
eval
ErrorEval
block
retval
eval
if
eval
RefEval
block
RefEval
re
RefEval
eval
retval
xlateRefEval
re
if
eval
BlankEval
block
retval
xlateBlankEval
isEvaluated
EVALUATED_REF_BLANK_IS_PARSED
REF_BLANK_IS_PARSED
block
throw
RuntimeException
getClass
return
retval
xlateStringEval
ValueEval
eval
StringEval
ValueEval
retval
if
flags
STRING_IS_PARSED
block
String
s
getStringValue
try
double
d
parseDouble
s
retval
NumberEval
d
catchClause
e
if
flags
STRING_TO_BOOL_IS_PARSED
block
try
boolean
b
getBoolean
s
retval
b
TRUE
FALSE
catchClause
e2
retval
VALUE_INVALID
block
retval
VALUE_INVALID
if
flags
STRING_TO_BOOL_IS_PARSED
block
String
s
getStringValue
try
boolean
b
getBoolean
s
retval
b
TRUE
FALSE
catchClause
e
retval
VALUE_INVALID
if
flags
STRING_IS_INVALID_VALUE
block
retval
VALUE_INVALID
block
retval
xlateBlankEval
BLANK_IS_PARSED
return
retval
xlateRefStringEval
ValueEval
eval
StringEval
ValueEval
retval
if
flags
REF_STRING_IS_PARSED
block
StringEval
sve
StringEval
eval
String
s
getStringValue
try
double
d
parseDouble
s
retval
NumberEval
d
catchClause
e
if
flags
REF_STRING_TO_BOOL_IS_PARSED
block
try
boolean
b
getBoolean
s
retval
b
TRUE
FALSE
catchClause
e2
retval
VALUE_INVALID
block
retval
VALUE_INVALID
if
flags
REF_STRING_TO_BOOL_IS_PARSED
block
StringEval
sve
StringEval
eval
String
s
getStringValue
try
boolean
b
getBoolean
s
retval
b
TRUE
FALSE
catchClause
e
retval
VALUE_INVALID
if
flags
REF_STRING_IS_INVALID_VALUE
block
retval
VALUE_INVALID
block
retval
INSTANCE
return
retval
