BlockAllocationTableReader
IntList
_entries
BlockAllocationTableReader
block_count
int
block_array
int
xbat_count
int
xbat_index
int
raw_block_list
BlockList
if
block_count
block
throw
IOException
block_count
RawDataBlock
blocks
RawDataBlock
block_count
int
limit
min
block_count
length
int
block_index
for
forControl
block_index
block_index
limit
block_index
block
blocks
block_index
RawDataBlock
remove
block_array
block_index
if
block_index
block_count
block
if
xbat_index
block
throw
IOException
int
chain_index
xbat_index
int
max_entries_per_block
entriesPerXBATBlock
int
chain_index_offset
getXBATChainOffset
for
forControl
int
j
j
xbat_count
j
block
limit
min
block_count
block_index
max_entries_per_block
byte
data
remove
getData
chain_index
int
offset
for
forControl
int
k
k
limit
k
block
blocks
block_index
RawDataBlock
remove
getInt
data
offset
offset
INT_SIZE
chain_index
getInt
data
chain_index_offset
if
chain_index
END_OF_CHAIN
block
break
if
block_index
block_count
block
throw
IOException
setEntries
blocks
raw_block_list
BlockAllocationTableReader
blocks
ListManagedBlock
raw_block_list
BlockList
setEntries
blocks
raw_block_list
BlockAllocationTableReader
_entries
IntList
fetchBlocks
ListManagedBlock
startBlock
int
blockList
BlockList
List
blocks
ArrayList
int
currentBlock
startBlock
while
currentBlock
END_OF_CHAIN
block
add
remove
currentBlock
currentBlock
get
currentBlock
return
ListManagedBlock
toArray
ListManagedBlock
isUsed
boolean
index
int
boolean
rval
try
rval
get
index
catchClause
ignored
return
rval
getNextBlockIndex
int
index
int
if
isUsed
index
block
return
get
index
block
throw
IOException
index
setEntries
blocks
ListManagedBlock
raw_blocks
BlockList
int
limit
entriesPerBlock
for
forControl
int
block_index
block_index
length
block_index
block
byte
data
blocks
block_index
getData
int
offset
for
forControl
int
k
k
limit
k
block
int
entry
getInt
data
offset
if
entry
UNUSED_BLOCK
block
zap
size
add
entry
offset
INT_SIZE
blocks
block_index
setBAT
