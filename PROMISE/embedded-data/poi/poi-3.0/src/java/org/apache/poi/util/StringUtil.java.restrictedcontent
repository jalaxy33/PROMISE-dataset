StringUtil
String
ENCODING
StringUtil
getFromUnicodeLE
String
string
byte
offset
int
len
int
if
offset
offset
length
block
throw
ArrayIndexOutOfBoundsException
if
len
length
offset
len
block
throw
IllegalArgumentException
try
return
String
string
offset
len
catchClause
e
throw
InternalError
getFromUnicodeLE
String
string
byte
if
length
block
return
return
getFromUnicodeLE
string
length
getFromUnicodeBE
String
string
byte
offset
int
len
int
if
offset
offset
length
block
throw
ArrayIndexOutOfBoundsException
if
len
length
offset
len
block
throw
IllegalArgumentException
try
return
String
string
offset
len
catchClause
e
throw
InternalError
getFromUnicodeBE
String
string
byte
if
length
block
return
return
getFromUnicodeBE
string
length
getFromCompressedUnicode
String
string
byte
offset
int
len
int
try
return
String
string
offset
len
catchClause
e
throw
InternalError
putCompressedUnicode
input
String
output
byte
offset
int
try
byte
bytes
getBytes
arraycopy
bytes
output
offset
length
catchClause
e
throw
InternalError
putUnicodeLE
input
String
output
byte
offset
int
try
byte
bytes
getBytes
arraycopy
bytes
output
offset
length
catchClause
e
throw
InternalError
putUnicodeBE
input
String
output
byte
offset
int
try
byte
bytes
getBytes
arraycopy
bytes
output
offset
length
catchClause
e
throw
InternalError
format
String
message
String
params
Object
int
currentParamNumber
StringBuffer
formattedMessage
StringBuffer
for
forControl
int
i
i
length
i
block
if
charAt
i
block
if
currentParamNumber
length
block
append
if
params
currentParamNumber
Number
i
length
block
i
matchOptionalFormatting
Number
params
currentParamNumber
substring
i
formattedMessage
block
append
params
currentParamNumber
toString
block
if
charAt
i
i
length
charAt
i
block
append
i
block
append
charAt
i
return
toString
matchOptionalFormatting
int
number
Number
formatting
String
outputTo
StringBuffer
NumberFormat
numberFormat
getInstance
if
length
isDigit
charAt
block
setMinimumIntegerDigits
parseInt
charAt
if
length
charAt
isDigit
charAt
block
setMaximumFractionDigits
parseInt
charAt
format
number
outputTo
FieldPosition
return
format
number
outputTo
FieldPosition
return
if
length
charAt
block
if
length
isDigit
charAt
block
setMaximumFractionDigits
parseInt
charAt
format
number
outputTo
FieldPosition
return
format
number
outputTo
FieldPosition
return
getPreferredEncoding
String
return
ENCODING
hasMultibyte
boolean
value
String
if
value
return
for
forControl
int
i
i
length
i
block
char
c
charAt
i
if
c
return
return
isUnicodeString
boolean
value
String
try
return
equals
String
getBytes
catchClause
e
return
