ModuleDescriptorSorter
sortNodes
List
matcher
VersionMatcher
nodes
Collection
Map
dependenciesMap
LinkedHashMap
List
nulls
ArrayList
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
node
IvyNode
next
if
getDescriptor
block
add
node
block
List
n
List
get
getDescriptor
if
n
block
n
ArrayList
put
getDescriptor
n
add
node
List
list
sortModuleDescriptors
matcher
keySet
List
ret
ArrayList
int
size
size
for
forControl
int
i
i
size
i
block
ModuleDescriptor
md
ModuleDescriptor
get
i
List
n
List
get
md
addAll
n
addAll
nulls
return
ret
sortModuleDescriptors
List
matcher
VersionMatcher
moduleDescriptors
Collection
return
sortModuleDescriptors
matcher
ModuleDescriptorSorter
moduleDescriptors
Collection
moduleDescriptors
Iterator
moduleDescriptorsIterator
List
sorted
LinkedList
ModuleDescriptorSorter
moduleDescriptors
Collection
moduleDescriptors
moduleDescriptors
moduleDescriptorsIterator
iterator
LinkedList
moduleDescriptors
sortModuleDescriptors
List
matcher
VersionMatcher
while
hasNext
block
sortModuleDescriptorsHelp
matcher
ModuleDescriptor
next
Stack
return
sorted
sortModuleDescriptorsHelp
matcher
VersionMatcher
current
ModuleDescriptor
callStack
Stack
if
contains
current
block
return
if
contains
current
block
add
current
verbose
formatMessage
ModuleDescriptor
toArray
ModuleDescriptor
size
return
DependencyDescriptor
descriptors
getDependencies
ModuleDescriptor
moduleDescriptorDependency
for
forControl
int
i
descriptors
i
length
i
block
moduleDescriptorDependency
getModuleDescriptorDependency
matcher
descriptors
i
if
moduleDescriptorDependency
block
push
current
sortModuleDescriptorsHelp
matcher
moduleDescriptorDependency
callStack
pop
add
current
getModuleDescriptorDependency
ModuleDescriptor
matcher
VersionMatcher
descriptor
DependencyDescriptor
Iterator
i
iterator
ModuleDescriptor
md
while
hasNext
block
md
ModuleDescriptor
next
if
getDependencyId
equals
getModuleRevisionId
getModuleId
block
if
getResolvedModuleRevisionId
getRevision
block
return
md
if
accept
getDependencyRevisionId
md
block
return
md
return
