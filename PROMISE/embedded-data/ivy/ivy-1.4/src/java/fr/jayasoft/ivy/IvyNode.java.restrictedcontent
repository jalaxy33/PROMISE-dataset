IvyNode
Pattern
FALLBACK_CONF_PATTERN
compile
EvictionData
IvyNode
_node
ConflictManager
_conflictManager
Collection
_selected
String
_rootModuleConf
EvictionData
rootModuleConf
String
node
IvyNode
conflictManager
ConflictManager
selected
Collection
_rootModuleConf
rootModuleConf
_node
node
_conflictManager
conflictManager
_selected
selected
toString
String
if
_selected
block
return
_selected
_node
_conflictManager
_rootModuleConf
block
return
_rootModuleConf
getConflictManager
ConflictManager
return
_conflictManager
getNode
IvyNode
return
_node
getSelected
Collection
return
_selected
getRootModuleConf
String
return
_rootModuleConf
Caller
ModuleDescriptor
_md
ModuleRevisionId
_mrid
Map
_confs
HashMap
DependencyDescriptor
_dd
boolean
_callerCanExclude
Caller
md
ModuleDescriptor
mrid
ModuleRevisionId
dd
DependencyDescriptor
callerCanExclude
boolean
_md
md
_mrid
mrid
_dd
dd
_callerCanExclude
callerCanExclude
addConfiguration
callerConf
String
dependencyConfs
String
String
prevDepConfs
String
get
callerConf
if
prevDepConfs
block
Set
newDepConfs
HashSet
asList
prevDepConfs
addAll
asList
dependencyConfs
put
callerConf
String
toArray
String
size
block
put
callerConf
dependencyConfs
getCallerConfigurations
String
return
String
keySet
toArray
String
keySet
size
getModuleRevisionId
ModuleRevisionId
return
_mrid
equals
boolean
obj
Object
if
obj
Caller
block
return
Caller
other
Caller
obj
return
equals
_confs
equals
_mrid
hashCode
int
int
hash
hash
hash
hashCode
hash
hash
hashCode
return
hash
toString
String
return
toString
getAskedDependencyId
ModuleRevisionId
return
getDependencyRevisionId
getModuleDescriptor
ModuleDescriptor
return
_md
canExclude
boolean
return
_callerCanExclude
canExclude
getDependencyDescriptor
DependencyDescriptor
return
_dd
NodeConf
IvyNode
_node
String
_conf
NodeConf
node
IvyNode
conf
String
_node
node
_conf
conf
getConf
String
return
_conf
getNode
IvyNode
return
_node
equals
boolean
obj
Object
if
obj
NodeConf
block
return
return
getNode
equals
NodeConf
obj
getConf
equals
NodeConf
obj
hashCode
int
int
hash
hash
getNode
hashCode
hash
getConf
hashCode
return
hash
ModuleIdConf
ModuleId
_moduleId
String
_conf
ModuleIdConf
mid
ModuleId
conf
String
_moduleId
mid
_conf
conf
getConf
String
return
_conf
getModuleId
ModuleId
return
_moduleId
equals
boolean
obj
Object
if
obj
ModuleIdConf
block
return
return
getModuleId
equals
ModuleIdConf
obj
getConf
equals
ModuleIdConf
obj
hashCode
int
int
hash
hash
getModuleId
hashCode
hash
getConf
hashCode
return
hash
ModuleRevisionId
_id
IvyNode
_parent
IvyNode
_root
Collection
_path
String
_parentConf
String
_rootModuleConf
Map
_selectedDeps
HashMap
Map
_evictedDeps
HashMap
Map
_evictedRevs
HashMap
Map
_evicted
HashMap
Map
_callersByRootConf
HashMap
Map
_rootModuleConfs
HashMap
Map
_dependencyArtifactsIncludes
HashMap
ResolveData
_data
Collection
_confsToFetch
HashSet
Collection
_fetchedConfigurations
HashSet
Map
_dds
HashMap
ModuleDescriptor
_md
ResolvedModuleRevision
_module
Exception
_problem
boolean
_downloaded
boolean
_searched
Map
_requiredConfs
HashMap
boolean
_isRoot
Map
_allCallers
HashMap
boolean
_isCircular
Collection
_loadedRootModuleConfs
HashSet
Map
_requestedConf
HashMap
IvyNode
data
ResolveData
parent
IvyNode
dd
DependencyDescriptor
_id
getDependencyRevisionId
put
parent
dd
_isRoot
init
data
IvyNode
data
ResolveData
md
ModuleDescriptor
_id
getModuleRevisionId
_md
md
_isRoot
_root
init
data
init
data
ResolveData
register
boolean
_data
data
if
register
block
register
getConflictManager
ConflictManager
mid
ModuleId
if
_md
block
throw
IllegalStateException
ConflictManager
cm
getConflictManager
mid
return
cm
getIvy
getDefaultConflictManager
cm
getResolvedNodes
Collection
mid
ModuleId
rootModuleConf
String
Collection
resolved
Collection
get
ModuleIdConf
mid
rootModuleConf
Set
ret
HashSet
if
resolved
block
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
node
IvyNode
next
add
getRealNode
return
ret
getResolvedRevisions
Collection
mid
ModuleId
rootModuleConf
String
Collection
resolved
Collection
get
ModuleIdConf
mid
rootModuleConf
if
resolved
block
return
HashSet
block
Collection
resolvedRevs
HashSet
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
node
IvyNode
next
add
getId
add
getResolvedId
return
resolvedRevs
setResolvedNodes
moduleId
ModuleId
rootModuleConf
String
resolved
Collection
ModuleIdConf
moduleIdConf
ModuleIdConf
moduleId
rootModuleConf
put
moduleIdConf
HashSet
resolved
getEvictedNodes
Collection
mid
ModuleId
rootModuleConf
String
Collection
resolved
Collection
get
ModuleIdConf
mid
rootModuleConf
Set
ret
HashSet
if
resolved
block
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
node
IvyNode
next
add
getRealNode
return
ret
getEvictedRevisions
Collection
mid
ModuleId
rootModuleConf
String
Collection
evicted
Collection
get
ModuleIdConf
mid
rootModuleConf
if
evicted
block
return
HashSet
block
return
HashSet
evicted
setEvictedNodes
moduleId
ModuleId
rootModuleConf
String
evicted
Collection
ModuleIdConf
moduleIdConf
ModuleIdConf
moduleId
rootModuleConf
put
moduleIdConf
HashSet
evicted
Collection
evictedRevs
HashSet
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
node
IvyNode
next
add
getId
add
getResolvedId
put
moduleIdConf
evictedRevs
isEvicted
boolean
rootModuleConf
String
cleanEvicted
return
getRoot
getRoot
getResolvedRevisions
getId
getModuleId
rootModuleConf
contains
getResolvedId
isCompletelyEvicted
boolean
cleanEvicted
if
getRoot
block
return
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
String
conf
String
next
if
isEvicted
conf
block
return
return
cleanEvicted
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
String
rootModuleConf
String
next
EvictionData
ed
EvictionData
get
rootModuleConf
Collection
sel
getSelected
if
sel
block
for
forControl
Iterator
iterator
iterator
hasNext
block
IvyNode
n
IvyNode
next
if
getRealNode
equals
block
remove
markEvicted
rootModuleConf
String
node
IvyNode
conflictManager
ConflictManager
resolved
Collection
EvictionData
evictionData
EvictionData
rootModuleConf
node
conflictManager
resolved
markEvicted
evictionData
markEvicted
evictionData
EvictionData
put
getRootModuleConf
evictionData
if
keySet
contains
getRootModuleConf
block
put
getRootModuleConf
if
getSelected
block
for
forControl
Iterator
iter
getSelected
iterator
hasNext
block
IvyNode
selected
IvyNode
next
updateDataFrom
getRootModuleConf
updateDataFrom
node
IvyNode
rootModuleConf
String
Map
nodecallers
Map
get
rootModuleConf
if
nodecallers
block
Map
thiscallers
Map
get
rootModuleConf
if
thiscallers
block
thiscallers
HashMap
put
rootModuleConf
thiscallers
for
forControl
Iterator
iter
values
iterator
hasNext
block
Caller
caller
Caller
next
if
containsKey
getModuleRevisionId
block
put
getModuleRevisionId
caller
updateMapOfSet
_requiredConfs
_requiredConfs
updateMapOfSetForKey
_rootModuleConfs
_rootModuleConfs
rootModuleConf
updateMapOfSetForKey
_dependencyArtifactsIncludes
_dependencyArtifactsIncludes
rootModuleConf
updateConfsToFetch
_fetchedConfigurations
updateConfsToFetch
_confsToFetch
updateMapOfSet
from
Map
to
Map
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
Object
key
next
updateMapOfSetForKey
from
to
key
updateMapOfSetForKey
from
Map
to
Map
key
Object
Set
set
Set
get
key
if
set
block
Set
toupdate
Set
get
key
if
toupdate
block
addAll
set
block
put
key
HashSet
set
getEvictedData
EvictionData
rootModuleConf
String
cleanEvicted
return
EvictionData
get
rootModuleConf
getEvictedConfs
String
cleanEvicted
return
String
keySet
toArray
String
keySet
size
getAllEvictingNodes
Collection
Collection
allEvictingNodes
for
forControl
Iterator
iter
values
iterator
hasNext
block
EvictionData
ed
EvictionData
next
Collection
selected
getSelected
if
selected
block
if
allEvictingNodes
block
allEvictingNodes
HashSet
addAll
selected
return
allEvictingNodes
getAllEvictingConflictManagers
Collection
Collection
ret
HashSet
for
forControl
Iterator
iter
values
iterator
hasNext
block
EvictionData
ed
EvictionData
next
add
getConflictManager
return
ret
getParent
IvyNode
return
_parent
setParent
parent
IvyNode
_parent
parent
_root
_path
getRoot
IvyNode
if
_root
block
_root
computeRoot
return
_root
getPath
Collection
if
_path
block
_path
computePath
return
_path
computePath
Collection
if
_parent
block
Collection
p
LinkedHashSet
getPath
add
return
p
block
return
singletonList
computeRoot
IvyNode
if
isRoot
block
return
if
_parent
block
return
getRoot
block
return
getParentConf
String
return
_parentConf
setParentConf
parentConf
String
_parentConf
parentConf
hasConfigurationsToLoad
boolean
return
isEmpty
loadData
boolean
conf
String
shouldBePublic
boolean
boolean
loaded
if
isEvicted
_rootModuleConf
hasConfigurationsToLoad
isRootModuleConfLoaded
hasProblem
block
markRootModuleConfLoaded
if
_md
block
DependencyResolver
resolver
getIvy
getResolver
getModuleId
if
resolver
block
error
getModuleId
_problem
RuntimeException
getModuleId
getReport
addDependency
return
try
debug
resolver
getId
DependencyDescriptor
dependencyDescriptor
getDependencyDescriptor
getParent
getIvy
fireIvyEvent
StartResolveDependencyEvent
getIvy
resolver
dependencyDescriptor
_module
getDependency
dependencyDescriptor
_data
getIvy
fireIvyEvent
EndResolveDependencyEvent
getIvy
resolver
dependencyDescriptor
_module
if
_module
block
getIvy
saveResolver
getCache
getDescriptor
getResolver
getName
getIvy
saveArtResolver
getCache
getDescriptor
getArtifactResolver
getName
if
getIvy
logModuleWhenFound
block
info
getId
getResolver
getName
block
verbose
getId
getResolver
getName
if
getIvy
getVersionMatcher
isDynamic
getId
block
if
getIvy
getVersionMatcher
isDynamic
getId
block
error
getId
_problem
RuntimeException
getReport
addDependency
return
IvyNode
resolved
getNode
getId
if
resolved
block
_md
getDescriptor
if
handleConfiguration
loaded
conf
shouldBePublic
block
return
if
_md
block
_md
_md
if
_module
block
_module
_module
_downloaded
isDownloaded
_searched
isSearched
putAll
_dds
updateDataFrom
_rootModuleConf
loadData
conf
shouldBePublic
DependencyDescriptor
dd
dependencyDescriptor
if
dd
block
addDependencyArtifactsIncludes
_rootModuleConf
getDependencyArtifactsIncludes
getParentConf
register
getId
resolved
if
getIvy
logResolvedRevision
block
info
getId
getRevision
getId
block
verbose
getId
getRevision
getId
return
_downloaded
isDownloaded
_searched
isSearched
block
warn
getId
reportFailure
_problem
RuntimeException
catchClause
e
_problem
e
if
_module
block
getReport
addDependency
return
block
loaded
if
getIvy
getVersionMatcher
isDynamic
getId
block
if
getIvy
logResolvedRevision
block
info
getId
getRevision
getId
block
verbose
getId
getRevision
getId
_md
getDescriptor
if
getIvy
getVersionMatcher
isDynamic
getId
block
register
getId
remove
updateConfsToFetch
asList
resolveSpecialConfigurations
getRequiredConfigurations
getParent
getParentConf
block
loaded
if
hasProblem
block
getReport
addDependency
return
handleConfiguration
loaded
conf
shouldBePublic
loaded
if
handleConfiguration
loaded
conf
shouldBePublic
block
return
DependencyDescriptor
dd
getDependencyDescriptor
getParent
if
dd
block
addDependencyArtifactsIncludes
_rootModuleConf
getDependencyArtifactsIncludes
getParentConf
return
loaded
markRootModuleConfLoaded
boolean
return
add
_rootModuleConf
isRootModuleConfLoaded
boolean
return
contains
_rootModuleConf
handleConfiguration
boolean
loaded
boolean
conf
String
shouldBePublic
boolean
if
_md
block
String
confs
getRealConfs
conf
for
forControl
int
i
i
length
i
block
Configuration
c
getConfiguration
confs
i
if
c
block
remove
conf
if
equals
confs
i
block
_problem
RuntimeException
conf
confs
i
getParent
getParentConf
block
_problem
RuntimeException
confs
i
getParent
getParentConf
getReport
addDependency
return
if
shouldBePublic
isRoot
getVisibility
PUBLIC
block
remove
conf
_problem
RuntimeException
c
getParent
getParentConf
getReport
addDependency
return
if
loaded
block
add
conf
removeAll
asList
confs
remove
conf
addRootModuleConfigurations
_rootModuleConf
confs
return
getDefaultConf
String
conf
String
Matcher
m
matcher
conf
if
matches
block
return
group
block
return
conf
getMainConf
String
conf
String
Matcher
m
matcher
conf
if
matches
block
return
group
block
return
isRoot
boolean
return
_isRoot
getRealNode
IvyNode
return
getRealNode
getRealNode
IvyNode
traverse
boolean
IvyNode
node
getNode
getId
if
node
block
if
traverse
block
setParent
getParent
setParentConf
getParentConf
setRootModuleConf
getRootModuleConf
setRequestedConf
getRequestedConf
_data
_data
return
node
block
return
getDependencies
Collection
confs
String
if
_md
block
throw
IllegalStateException
if
asList
contains
confs
block
confs
getConfigurationsNames
Collection
deps
HashSet
for
forControl
int
i
i
length
i
block
addAll
getDependencies
confs
i
return
deps
getDependencies
Collection
conf
String
traverse
boolean
if
_md
block
throw
IllegalStateException
DependencyDescriptor
dds
getDependencies
Collection
dependencies
LinkedHashSet
for
forControl
int
i
i
length
i
block
DependencyDescriptor
dd
dds
i
String
dependencyConfigurations
getDependencyConfigurations
conf
getRequestedConf
if
length
block
continue
if
isDependencyModuleExcluded
getDependencyRevisionId
conf
block
verbose
getDependencyRevisionId
conf
continue
IvyNode
depNode
getNode
getDependencyRevisionId
if
depNode
block
depNode
IvyNode
_data
dd
block
addDependencyDescriptor
dd
if
hasProblem
block
Collection
confs
asList
resolveSpecialConfigurations
dependencyConfigurations
depNode
updateConfsToFetch
confs
setRequiredConfs
conf
confs
addCaller
_rootModuleConf
conf
dependencyConfigurations
dd
add
depNode
if
traverse
block
traverse
conf
depNode
return
dependencies
traverse
conf
String
depNode
IvyNode
if
getPath
contains
depNode
block
getContext
getCircularDependencyStrategy
handleCircularDependency
toMrids
getPath
depNode
block
setParent
setParentConf
conf
setRootModuleConf
getRootModuleConf
_data
_data
toMrids
ModuleRevisionId
path
Collection
depNode
IvyNode
ModuleRevisionId
ret
ModuleRevisionId
size
int
i
for
forControl
Iterator
iter
iterator
hasNext
i
block
IvyNode
node
IvyNode
next
ret
i
getId
ret
length
getId
return
ret
getRequestedConf
String
return
String
get
getRootModuleConf
setRequestedConf
requestedConf
String
put
getRootModuleConf
requestedConf
addDependencyDescriptor
parent
IvyNode
dd
DependencyDescriptor
put
parent
dd
isDependencyModuleExcluded
boolean
dependencyRevisionId
ModuleRevisionId
conf
String
return
doesCallersExclude
getRootModuleConf
newIvyArtifact
dependencyRevisionId
getId
ModuleRevisionId
return
_id
updateConfsToFetch
confs
Collection
addAll
confs
removeAll
_fetchedConfigurations
getModuleId
ModuleId
return
getModuleId
resolveSpecialConfigurations
String
dependencyConfigurations
String
node
IvyNode
if
length
dependencyConfigurations
startsWith
node
isLoaded
block
String
conf
dependencyConfigurations
if
equals
conf
block
return
getDescriptor
getPublicConfigurationsNames
List
exclusions
asList
substring
split
List
ret
ArrayList
asList
getDescriptor
getPublicConfigurationsNames
removeAll
exclusions
return
String
toArray
String
size
return
dependencyConfigurations
isLoaded
boolean
return
_md
getDescriptor
ModuleDescriptor
return
_md
getRequiredConfigurations
String
in
IvyNode
inConf
String
Collection
req
Collection
get
NodeConf
in
inConf
return
req
String
String
toArray
String
size
getRequiredConfigurations
String
Collection
required
ArrayList
size
size
addAll
_fetchedConfigurations
addAll
_confsToFetch
return
String
toArray
String
size
setRequiredConfs
parent
IvyNode
parentConf
String
confs
Collection
put
NodeConf
parent
parentConf
HashSet
confs
getConfiguration
Configuration
conf
String
if
_md
block
throw
IllegalStateException
String
defaultConf
getDefaultConf
conf
conf
getMainConf
conf
Configuration
configuration
getConfiguration
conf
if
configuration
block
configuration
getConfiguration
defaultConf
return
configuration
getModuleRevision
ResolvedModuleRevision
return
_module
addCaller
rootModuleConf
String
node
IvyNode
callerConf
String
dependencyConfs
String
dd
DependencyDescriptor
ModuleDescriptor
md
getDescriptor
ModuleRevisionId
mrid
getId
if
getModuleId
equals
getId
getModuleId
block
throw
IllegalArgumentException
getId
Map
callers
Map
get
rootModuleConf
if
callers
block
callers
HashMap
put
rootModuleConf
callers
Caller
caller
Caller
get
mrid
if
caller
block
caller
Caller
md
mrid
dd
canExclude
rootModuleConf
put
mrid
caller
addConfiguration
callerConf
dependencyConfs
IvyNode
parent
getRealNode
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
ModuleId
mid
ModuleId
next
put
mid
parent
put
getModuleId
node
_isCircular
keySet
contains
getId
getModuleId
if
_isCircular
block
getContext
getCircularDependencyStrategy
handleCircularDependency
toMrids
findPath
getId
getModuleId
findPath
Collection
from
ModuleId
return
findPath
from
LinkedList
findPath
Collection
from
ModuleId
node
IvyNode
path
List
IvyNode
parent
IvyNode
get
from
if
parent
block
throw
IllegalArgumentException
from
getId
if
contains
parent
block
add
parent
verbose
from
get
size
return
path
add
parent
if
getId
getModuleId
equals
from
block
return
path
return
findPath
from
parent
path
canExclude
boolean
rootModuleConf
String
DependencyDescriptor
dd
getDependencyDescriptor
getParent
if
dd
canExclude
block
return
Caller
callers
getCallers
rootModuleConf
for
forControl
int
i
i
length
i
block
if
callers
i
canExclude
block
return
return
getCallers
Caller
rootModuleConf
String
Map
callers
Map
get
rootModuleConf
if
callers
block
return
Caller
return
Caller
values
toArray
Caller
values
size
getAllCallers
Caller
Set
all
HashSet
for
forControl
Iterator
iter
values
iterator
hasNext
block
Map
callers
Map
next
addAll
values
return
Caller
toArray
Caller
size
toString
String
return
getResolvedId
toString
equals
boolean
obj
Object
if
obj
IvyNode
block
return
IvyNode
node
IvyNode
obj
return
getId
equals
getId
hashCode
int
return
getId
hashCode
getConfigurations
String
rootModuleConf
String
Set
depConfs
Set
get
rootModuleConf
if
depConfs
block
return
String
return
String
toArray
String
size
discardConf
conf
String
discardConf
_rootModuleConf
conf
discardConf
rootModuleConf
String
conf
String
Set
depConfs
Set
get
rootModuleConf
if
depConfs
block
depConfs
HashSet
put
rootModuleConf
depConfs
if
_md
block
Configuration
c
getConfiguration
conf
if
conf
block
String
exts
getExtends
for
forControl
int
i
i
length
i
block
discardConf
rootModuleConf
exts
i
remove
getName
block
warn
getId
conf
block
remove
conf
addRootModuleConfigurations
rootModuleConf
String
dependencyConfs
String
Set
depConfs
Set
get
rootModuleConf
if
depConfs
block
depConfs
HashSet
put
rootModuleConf
depConfs
if
_md
block
for
forControl
int
i
i
length
i
block
Configuration
conf
getConfiguration
dependencyConfs
i
if
conf
block
String
exts
getExtends
addRootModuleConfigurations
rootModuleConf
exts
add
getName
block
warn
getId
dependencyConfs
i
block
for
forControl
int
i
i
length
i
block
add
dependencyConfs
i
getRootModuleConfigurations
String
return
String
keySet
toArray
String
size
getAllArtifacts
Artifact
Set
ret
HashSet
for
forControl
Iterator
it
keySet
iterator
hasNext
block
String
rootModuleConf
String
next
addAll
asList
getArtifacts
rootModuleConf
return
Artifact
toArray
Artifact
size
getSelectedArtifacts
Artifact
artifactFilter
Filter
Collection
ret
HashSet
for
forControl
Iterator
it
keySet
iterator
hasNext
block
String
rootModuleConf
String
next
if
isEvicted
rootModuleConf
block
addAll
asList
getArtifacts
rootModuleConf
ret
filter
ret
artifactFilter
return
Artifact
toArray
Artifact
size
getArtifacts
Artifact
rootModuleConf
String
Set
confs
Set
get
rootModuleConf
if
confs
block
return
Artifact
Set
artifacts
HashSet
Set
includes
Set
get
rootModuleConf
if
isDefault
includes
isEmpty
block
for
forControl
Iterator
it
iterator
hasNext
block
DependencyArtifactDescriptor
dad
DependencyArtifactDescriptor
next
add
MDArtifact
_md
getName
getType
getExt
getUrl
block
if
includes
isEmpty
block
for
forControl
Iterator
iter
iterator
hasNext
block
String
conf
String
next
addAll
asList
getArtifacts
conf
block
Map
allArtifacts
HashMap
for
forControl
Iterator
iter
iterator
hasNext
block
String
conf
String
next
Artifact
arts
getArtifacts
conf
for
forControl
int
i
i
length
i
block
put
arts
i
getId
getArtifactId
arts
i
for
forControl
Iterator
it
iterator
hasNext
block
DependencyArtifactDescriptor
dad
DependencyArtifactDescriptor
next
Collection
arts
findArtifactsMatching
dad
allArtifacts
if
isEmpty
block
error
getId
remove
block
debug
rootModuleConf
arts
addAll
arts
for
forControl
Iterator
iter
iterator
hasNext
block
Artifact
artifact
Artifact
next
boolean
excluded
doesCallersExclude
rootModuleConf
artifact
if
excluded
block
debug
rootModuleConf
artifact
remove
return
Artifact
toArray
Artifact
size
doesCallersExclude
boolean
rootModuleConf
String
artifact
Artifact
return
doesCallersExclude
rootModuleConf
artifact
Stack
doesCallersExclude
boolean
rootModuleConf
String
artifact
Artifact
callersStack
Stack
if
contains
getId
block
return
push
getId
try
Caller
callers
getCallers
rootModuleConf
if
length
block
return
Collection
callersNodes
ArrayList
for
forControl
int
i
i
length
i
block
if
callers
i
canExclude
block
return
ModuleDescriptor
md
callers
i
getModuleDescriptor
if
doesExclude
md
rootModuleConf
callers
i
getCallerConfigurations
callers
i
getDependencyDescriptor
artifact
callersStack
block
return
return
pop
doesExclude
boolean
md
ModuleDescriptor
rootModuleConf
String
moduleConfs
String
dependency
IvyNode
dd
DependencyDescriptor
artifact
Artifact
callersStack
Stack
if
dd
block
if
doesExclude
moduleConfs
getId
getArtifactId
block
return
IvyNode
c
getNode
getModuleRevisionId
if
c
block
return
doesCallersExclude
rootModuleConf
artifact
callersStack
block
return
getDependencyDescriptor
DependencyDescriptor
md
ModuleDescriptor
dependency
IvyNode
if
md
block
DependencyDescriptor
dds
getDependencies
for
forControl
int
i
i
length
i
block
if
dds
i
getDependencyId
equals
getModuleId
block
return
dds
i
return
findArtifactsMatching
Collection
dad
DependencyArtifactDescriptor
allArtifacts
Map
Collection
ret
ArrayList
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
ArtifactId
aid
ArtifactId
next
if
matches
getMatcher
getId
aid
block
add
get
aid
return
ret
addDependencyArtifactsIncludes
rootModuleConf
String
dependencyArtifacts
DependencyArtifactDescriptor
addDependencyArtifacts
rootModuleConf
dependencyArtifacts
_dependencyArtifactsIncludes
addDependencyArtifacts
rootModuleConf
String
dependencyArtifacts
DependencyArtifactDescriptor
artifactsMap
Map
Set
depArtifacts
Set
get
rootModuleConf
if
depArtifacts
block
depArtifacts
HashSet
put
rootModuleConf
depArtifacts
addAll
asList
dependencyArtifacts
getPublication
long
if
_module
block
return
getPublicationDate
getTime
return
getDependencyDescriptor
DependencyDescriptor
parent
IvyNode
return
DependencyDescriptor
get
parent
hasProblem
boolean
return
_problem
getResolvedId
ModuleRevisionId
if
_md
getResolvedModuleRevisionId
getRevision
block
return
getResolvedModuleRevisionId
if
_module
block
return
getId
block
return
getId
getProblem
Exception
return
_problem
isDownloaded
boolean
return
_downloaded
isSearched
boolean
return
_searched
getRootModuleConf
String
return
_rootModuleConf
setRootModuleConf
rootModuleConf
String
if
_rootModuleConf
equals
rootModuleConf
block
clear
if
rootModuleConf
equals
_rootModuleConf
block
put
ModuleIdConf
getModuleId
rootModuleConf
singleton
_rootModuleConf
rootModuleConf
getConfsToFetch
String
return
String
toArray
String
size
isCircular
boolean
return
_isCircular
isFetched
boolean
conf
String
return
contains
conf
getEvictionDataInRoot
EvictionData
rootModuleConf
String
parent
IvyNode
IvyNode
root
getRoot
Collection
selectedNodes
getResolvedNodes
getModuleId
rootModuleConf
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
node
IvyNode
next
if
getResolvedId
equals
getResolvedId
block
return
return
EvictionData
rootModuleConf
parent
getConflictManager
getModuleId
selectedNodes
getRoot
IvyNode
parent
IvyNode
IvyNode
root
parent
Collection
path
HashSet
add
root
while
getParent
isRoot
block
if
contains
getParent
block
return
root
root
getParent
add
root
return
root
findNode
IvyNode
mrid
ModuleRevisionId
return
getNode
mrid
getRealConfs
String
conf
String
if
_md
block
return
String
conf
String
defaultConf
getDefaultConf
conf
conf
getMainConf
conf
if
getConfiguration
conf
block
if
equals
defaultConf
block
return
String
conf
defaultConf
if
startsWith
block
return
resolveSpecialConfigurations
String
conf
if
indexOf
block
String
confs
split
for
forControl
int
i
i
length
i
block
confs
i
confs
i
trim
return
String
conf
isTransitive
boolean
return
isTransitive
getDependencyDescriptor
isTransitive
getParent
isParentConfTransitive
isParentConfTransitive
boolean
String
conf
getParent
getRequestedConf
if
conf
block
return
Configuration
parentConf
getParent
getConfiguration
conf
return
isTransitive
getResolveData
ResolveData
return
_data
