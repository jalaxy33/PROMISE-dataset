Ivy
SimpleDateFormat
DATE_FORMAT
SimpleDateFormat
String
DEFAULT_CACHE_ARTIFACT_PATTERN
String
DEFAULT_CACHE_IVY_PATTERN
Map
_typeDefs
HashMap
Map
_resolversMap
HashMap
DependencyResolver
_defaultResolver
String
_defaultResolverName
File
_defaultCache
boolean
_checkUpToDate
Map
_moduleConfigurations
LinkedHashMap
Map
_conflictsManager
HashMap
Map
_latestStrategies
HashMap
Map
_variables
HashMap
ReportOutputter
_reportOutputters
ReportOutputter
LogReportOutputter
XmlReportOutputter
String
_cacheIvyPattern
DEFAULT_CACHE_IVY_PATTERN
String
_cacheArtifactPattern
DEFAULT_CACHE_ARTIFACT_PATTERN
boolean
_validate
LatestStrategy
_defaultLatestStrategy
ConflictManager
_defaultConflictManager
List
_listingIgnore
ArrayList
boolean
_repositoriesConfigured
Ivy
String
ivyTypeDefs
getProperty
if
ivyTypeDefs
block
String
files
split
for
forControl
int
i
i
length
i
block
try
typeDefs
FileInputStream
File
files
i
trim
catchClause
e
warn
files
i
trim
catchClause
e
warn
files
i
trim
getMessage
block
try
typeDefs
getResourceAsStream
Ivy
catchClause
e
warn
LatestLexicographicStrategy
latestLexicographicStrategy
LatestLexicographicStrategy
LatestRevisionStrategy
latestRevisionStrategy
LatestRevisionStrategy
LatestTimeStrategy
latestTimeStrategy
LatestTimeStrategy
addLatestStrategy
latestRevisionStrategy
addLatestStrategy
latestLexicographicStrategy
addLatestStrategy
latestTimeStrategy
addConflictManager
LatestConflictManager
latestRevisionStrategy
addConflictManager
LatestConflictManager
latestTimeStrategy
addConflictManager
NoConflictManager
add
add
addTransferListener
TransferListener
transferProgress
evt
TransferEvent
switch
getEventType
case
TRANSFER_PROGRESS
progress
break
case
TRANSFER_COMPLETED
endProgress
getTotalLength
break
case
break
configureRepositories
if
_repositoriesConfigured
block
Properties
props
try
props
Properties
URL
url
URL
verbose
url
load
openStream
catchClause
ex
verbose
getMessage
props
Properties
try
load
getResourceAsStream
Ivy
catchClause
e
error
getMessage
addAllVariables
props
_repositoriesConfigured
typeDefs
stream
InputStream
try
Properties
p
Properties
load
stream
typeDefs
p
close
typeDefs
p
Properties
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
String
name
String
next
try
typeDef
name
forName
getProperty
name
catchClause
e
warn
name
getProperty
name
configure
configurationFile
File
info
configurationFile
long
start
currentTimeMillis
setVariable
getParent
File
getAbsolutePath
setVariable
getAbsolutePath
setVariable
toURL
toExternalForm
try
parse
toURL
XmlIvyConfigurationParser
catchClause
e
IllegalArgumentException
iae
IllegalArgumentException
configurationFile
initCause
e
throw
iae
verbose
currentTimeMillis
start
dumpConfig
configure
configurationURL
URL
info
configurationURL
long
start
currentTimeMillis
String
confURL
toExternalForm
setVariable
confURL
int
slashIndex
lastIndexOf
if
slashIndex
block
setVariable
substring
slashIndex
block
warn
parse
configurationURL
XmlIvyConfigurationParser
verbose
currentTimeMillis
start
dumpConfig
dumpConfig
verbose
getDefaultCache
verbose
getDefaultResolver
debug
getDefaultLatestStrategy
debug
getDefaultConflictManager
debug
doValidate
debug
isCheckUpToDate
debug
getCacheIvyPattern
debug
getCacheArtifactPattern
verbose
size
for
forControl
Iterator
iter
values
iterator
hasNext
block
DependencyResolver
resolver
DependencyResolver
next
dumpConfig
if
isEmpty
block
debug
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
ModuleId
mid
ModuleId
next
String
res
String
get
mid
debug
mid
res
loadProperties
url
URL
Properties
properties
Properties
load
openStream
addAllVariables
properties
loadProperties
file
File
Properties
properties
Properties
load
FileInputStream
file
addAllVariables
properties
setVariable
varName
String
value
String
debug
varName
value
put
varName
substitute
value
addAllVariables
variables
Map
addAllVariables
variables
addAllVariables
variables
Map
overwrite
boolean
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
String
key
String
next
if
overwrite
containsKey
key
block
String
val
String
get
key
setVariable
key
val
substitute
String
str
String
return
substituteVariables
str
getVariables
getVariables
Map
return
_variables
typeDef
name
String
clazz
Class
put
name
clazz
getTypeDefs
Map
return
_typeDefs
getTypeDef
Class
name
String
return
Class
get
name
addConfigured
resolver
DependencyResolver
addResolver
resolver
addResolver
resolver
DependencyResolver
if
resolver
block
throw
NullPointerException
if
resolver
IvyAware
block
IvyAware
resolver
put
getName
resolver
if
resolver
ChainResolver
block
List
subresolvers
ChainResolver
resolver
for
forControl
Iterator
iter
iterator
hasNext
block
DependencyResolver
dr
DependencyResolver
next
addResolver
dr
if
resolver
DualResolver
block
DependencyResolver
ivyResolver
DualResolver
resolver
if
ivyResolver
block
addResolver
ivyResolver
DependencyResolver
artifactResolver
DualResolver
resolver
if
artifactResolver
block
addResolver
artifactResolver
setDefaultCache
cacheDirectory
File
_defaultCache
cacheDirectory
setDefaultResolver
resolverName
String
checkResolverName
resolverName
_defaultResolverName
resolverName
checkResolverName
resolverName
String
if
containsKey
resolverName
block
throw
IllegalArgumentException
resolverName
addModuleConfiguration
moduleId
ModuleId
resolverName
String
checkResolverName
resolverName
put
moduleId
resolverName
getDefaultCache
File
if
_defaultCache
block
_defaultCache
File
getProperty
verbose
_defaultCache
return
_defaultCache
getResolver
DependencyResolver
moduleId
ModuleId
String
resolverName
getResolverName
moduleId
return
getResolver
resolverName
getResolver
DependencyResolver
resolverName
String
DependencyResolver
resolver
DependencyResolver
get
resolverName
if
resolver
block
error
resolverName
return
resolver
getDefaultResolver
DependencyResolver
if
_defaultResolver
block
_defaultResolver
DependencyResolver
get
_defaultResolverName
return
_defaultResolver
getResolverName
String
moduleId
ModuleId
String
name
String
get
moduleId
if
name
block
return
name
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
ModuleId
mid
ModuleId
next
if
compile
matcher
getOrganisation
matches
getOrganisation
compile
matcher
getName
matches
getName
block
return
String
get
mid
return
_defaultResolverName
addConfigured
cm
ConflictManager
addConflictManager
getName
cm
getConflictManager
ConflictManager
name
String
if
equals
name
block
return
getDefaultConflictManager
return
ConflictManager
get
name
addConflictManager
name
String
cm
ConflictManager
if
cm
IvyAware
block
IvyAware
cm
put
name
cm
addConfigured
latest
LatestStrategy
addLatestStrategy
getName
latest
getLatestStrategy
LatestStrategy
name
String
if
equals
name
block
return
getDefaultLatestStrategy
return
LatestStrategy
get
name
addLatestStrategy
name
String
latest
LatestStrategy
if
latest
IvyAware
block
IvyAware
latest
put
name
latest
check
boolean
ivyFile
URL
resolvername
String
try
boolean
result
ModuleDescriptor
md
parseDescriptor
ivyFile
doValidate
if
resolvername
block
DependencyResolver
resolver
getResolver
resolvername
String
confs
getConfigurationsNames
Set
artifacts
HashSet
for
forControl
int
i
i
length
i
block
addAll
asList
getArtifacts
confs
i
for
forControl
Iterator
iter
iterator
hasNext
block
Artifact
art
Artifact
next
if
exists
art
block
info
art
result
DependencyDescriptor
dds
getDependencies
ResolveData
data
ResolveData
getDefaultCache
Date
for
forControl
int
i
i
length
i
block
String
masterConfs
dds
i
getModuleConfigurations
for
forControl
int
j
j
length
j
block
if
equals
masterConfs
j
trim
getConfiguration
masterConfs
j
block
info
ivyFile
dds
i
getDependencyRevisionId
masterConfs
j
result
DependencyResolver
resolver
getResolver
dds
i
getDependencyId
ResolvedModuleRevision
rmr
getDependency
dds
i
data
if
rmr
block
info
ivyFile
dds
i
result
block
String
depConfs
dds
i
getDependencyConfigurations
getConfigurationsNames
for
forControl
int
j
j
length
j
block
if
asList
contains
depConfs
j
getDescriptor
getConfigurationsNames
block
info
ivyFile
dds
i
getDependencyRevisionId
depConfs
j
result
Artifact
arts
getDescriptor
getArtifacts
depConfs
j
for
forControl
int
k
k
length
k
block
if
exists
arts
k
block
info
ivyFile
dds
i
getDependencyRevisionId
arts
k
result
return
result
catchClause
e
info
ivyFile
getMessage
return
catchClause
e
info
ivyFile
getMessage
return
catchClause
e
info
ivyFile
getMessage
return
resolve
ResolveReport
ivySource
URL
revision
String
confs
String
cache
File
date
Date
validate
boolean
ModuleDescriptor
md
parseDescriptor
ivySource
validate
if
cache
block
cache
getDefaultCache
if
revision
getResolvedModuleRevisionId
getRevision
block
revision
getLocalHostName
if
revision
block
setResolvedModuleRevisionId
ModuleRevisionId
getModuleRevisionId
getModuleId
revision
if
length
confs
equals
block
confs
getConfigurationsNames
long
start
currentTimeMillis
info
getResolvedModuleRevisionId
info
asList
confs
verbose
validate
ResolveReport
report
ResolveReport
md
IvyNode
dependencies
getDependencies
md
confs
cache
date
report
validate
verbose
Map
resolvedRevisions
HashMap
for
forControl
int
i
i
length
i
block
if
dependencies
i
isCompletelyEvicted
dependencies
i
hasProblem
block
DependencyResolver
resolver
dependencies
i
getModuleRevision
getResolver
DownloadReport
dReport
download
dependencies
i
getSelectedArtifacts
cache
ArtifactDownloadReport
adrs
getArtifactsReports
FAILED
for
forControl
int
j
j
length
j
block
warn
adrs
j
getArtifact
reportFailure
adrs
j
getArtifact
String
dconfs
dependencies
i
getRootModuleConfigurations
for
forControl
int
j
j
length
j
block
if
dependencies
i
isEvicted
dconfs
j
block
getConfigurationReport
addDependency
dependencies
i
dconfs
j
block
getConfigurationReport
addDependency
dependencies
i
dReport
dconfs
j
put
dependencies
i
getModuleId
dependencies
i
getResolvedId
getRevision
if
dependencies
i
isCompletelyEvicted
block
String
dconfs
dependencies
i
getRootModuleConfigurations
for
forControl
int
j
j
length
j
block
getConfigurationReport
addDependency
dependencies
i
dconfs
j
File
ivyFileInCache
getIvyFileInCache
cache
getResolvedModuleRevisionId
try
update
ivySource
ivyFileInCache
resolvedRevisions
getResolvedModuleRevisionId
getRevision
catchClause
e
ParseException
ex
ParseException
getMessage
initCause
e
throw
ex
verbose
ivyFileInCache
info
output
getReportOutputters
cache
verbose
currentTimeMillis
start
sumupProblems
return
report
getReportOutputters
ReportOutputter
return
_reportOutputters
getDependencies
IvyNode
ivySource
URL
confs
String
cache
File
date
Date
validate
boolean
return
getDependencies
parseDescriptor
ivySource
validate
confs
cache
date
validate
getDependencies
IvyNode
md
ModuleDescriptor
confs
String
cache
File
date
Date
report
ResolveReport
validate
boolean
if
md
block
throw
NullPointerException
if
cache
block
cache
getDefaultCache
if
length
confs
equals
block
confs
getConfigurationsNames
Map
dependenciesMap
HashMap
Date
reportDate
Date
for
forControl
int
i
i
length
i
block
Configuration
configuration
getConfiguration
confs
i
if
configuration
block
error
getModuleRevisionId
confs
i
block
ConfigurationResolveReport
confReport
if
report
block
confReport
getConfigurationReport
confs
i
if
confReport
block
confReport
ConfigurationResolveReport
md
confs
i
reportDate
addReport
confs
i
confReport
ResolveData
data
ResolveData
cache
date
confReport
validate
dependenciesMap
IvyNode
node
IvyNode
data
md
confs
i
setRootModuleConf
confs
i
fetchDependencies
node
confs
i
Collection
dependencies
HashSet
size
for
forControl
Iterator
iter
values
iterator
hasNext
block
IvyNode
dep
IvyNode
next
if
dep
block
add
dep
List
sortedDependencies
sortNodes
dependencies
reverse
sortedDependencies
return
IvyNode
toArray
IvyNode
size
fetchDependencies
node
IvyNode
conf
String
shouldBePublic
boolean
resolveConflict
node
getParent
EMPTY_SET
if
loadData
conf
block
node
getRealNode
resolveConflict
node
getParent
EMPTY_SET
if
isEvicted
getRootModuleConf
block
if
equals
conf
block
String
confs
getDescriptor
getConfigurationsNames
for
forControl
int
i
i
length
i
block
doFetchDependencies
node
confs
i
shouldBePublic
block
doFetchDependencies
node
conf
shouldBePublic
if
isEvicted
getRootModuleConf
block
IvyNode
EvictionData
ed
getEvictedData
getRootModuleConf
for
forControl
Iterator
iter
getSelected
iterator
hasNext
block
IvyNode
selected
IvyNode
next
fetchDependencies
selected
conf
shouldBePublic
doFetchDependencies
node
IvyNode
conf
String
shouldBePublic
boolean
Configuration
c
getConfiguration
conf
if
c
block
error
node
conf
getParent
getParentConf
if
getVisibility
PUBLIC
shouldBePublic
block
error
node
c
getParent
getParentConf
block
String
extendedConfs
getExtends
if
length
block
updateConfsToFetch
asList
extendedConfs
for
forControl
int
i
i
length
i
block
fetchDependencies
node
extendedConfs
i
Collection
dependencies
getDependencies
conf
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
dep
IvyNode
next
if
isCircular
block
warn
getId
getId
continue
String
confs
getRequiredConfigurations
node
conf
for
forControl
int
i
i
length
i
block
fetchDependencies
dep
confs
i
shouldBePublic
confs
getConfsToFetch
for
forControl
int
i
i
length
i
block
fetchDependencies
dep
confs
i
shouldBePublic
resolveConflict
node
IvyNode
parent
IvyNode
toevict
Collection
if
parent
block
return
if
getId
equals
getResolvedId
getResolvedRevisions
contains
getId
getModuleId
getRootModuleConf
block
return
Collection
conflicts
HashSet
if
getResolvedNodes
removeAll
toevict
getModuleId
getRootModuleConf
block
Collection
deps
getDependencies
getRequiredConfigurations
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
dep
IvyNode
next
addAll
getResolvedNodes
getModuleId
getRootModuleConf
block
add
node
addAll
getResolvedNodes
getModuleId
getRootModuleConf
Collection
resolved
getConflictManager
resolveConflicts
parent
conflicts
getModuleId
if
contains
node
block
markSelected
getRootModuleConf
debug
node
parent
toevict
getResolvedNodes
getModuleId
getRootModuleConf
removeAll
resolved
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
te
IvyNode
next
markEvicted
getRootModuleConf
parent
getConflictManager
getModuleId
resolved
debug
te
getEvictedData
getRootModuleConf
setResolvedNodes
getModuleId
getRootModuleConf
resolved
resolveConflict
node
getParent
toevict
block
setResolvedNodes
getModuleId
getRootModuleConf
resolved
markEvicted
getRootModuleConf
parent
getConflictManager
getModuleId
resolved
debug
node
getEvictedData
getRootModuleConf
findModuleInCache
ResolvedModuleRevision
mrid
ModuleRevisionId
cache
File
validate
boolean
if
isExactRevision
block
File
ivyFile
getIvyFileInCache
cache
mrid
if
exists
block
try
ModuleDescriptor
depMD
parseDescriptor
toURL
validate
DependencyResolver
resolver
DependencyResolver
get
getResolverName
if
resolver
block
debug
mrid
ivyFile
return
DefaultModuleRevision
resolver
depMD
block
debug
getResolverName
mrid
catchClause
e
debug
mrid
getMessage
block
debug
mrid
ivyFile
return
retrieve
moduleId
ModuleId
confs
String
cache
File
destFilePattern
String
info
moduleId
info
asList
confs
long
start
currentTimeMillis
destFilePattern
substituteVariables
destFilePattern
getVariables
try
Map
artifactsToCopy
HashMap
Map
conflictsMap
HashMap
Map
conflictsConfMap
HashMap
XmlReportParser
parser
XmlReportParser
for
forControl
int
i
i
length
i
block
String
conf
confs
i
Artifact
artifacts
getArtifacts
moduleId
conf
cache
for
forControl
int
j
j
length
j
block
Artifact
artifact
artifacts
j
String
destFileName
substitute
destFilePattern
getModuleRevisionId
getOrganisation
getModuleRevisionId
getName
getModuleRevisionId
getRevision
getName
getType
getExt
conf
Set
dest
Set
get
artifact
if
dest
block
dest
HashSet
put
artifact
dest
String
copyDest
getAbsolutePath
File
destFileName
add
copyDest
Set
conflicts
Set
get
copyDest
Set
conflictsConf
Set
get
copyDest
if
conflicts
block
conflicts
HashSet
put
copyDest
conflicts
if
conflictsConf
block
conflictsConf
HashSet
put
copyDest
conflictsConf
add
artifact
add
conf
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
String
copyDest
String
next
Set
artifacts
Set
get
copyDest
Set
conflictsConfs
Set
get
copyDest
if
size
block
List
artifactsList
ArrayList
artifacts
sort
artifactsList
getConflictResolvingPolicy
info
copyDest
conflictsConfs
Artifact
get
size
for
forControl
int
i
size
i
i
block
Artifact
looser
Artifact
get
i
verbose
looser
Set
dest
Set
get
looser
remove
copyDest
if
isEmpty
block
remove
looser
int
targetsCopied
int
targetsUpToDate
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
Artifact
artifact
Artifact
next
File
archive
getArchiveFileInCache
cache
artifact
Set
dest
Set
get
artifact
verbose
archive
for
forControl
Iterator
it2
iterator
hasNext
block
File
destFile
File
String
next
if
_checkUpToDate
upToDate
archive
destFile
block
verbose
destFile
copy
archive
destFile
targetsCopied
block
verbose
destFile
targetsUpToDate
info
targetsCopied
targetsUpToDate
verbose
currentTimeMillis
start
catchClause
ex
IllegalStateException
ise
IllegalStateException
moduleId
initCause
ex
throw
ise
upToDate
boolean
source
File
target
File
if
exists
block
return
return
lastModified
lastModified
getConflictResolvingPolicy
Comparator
return
Comparator
compare
int
o1
Object
o2
Object
Artifact
a1
Artifact
o1
Artifact
a2
Artifact
o2
if
getPublicationDate
after
getPublicationDate
block
return
if
getPublicationDate
before
getPublicationDate
block
return
block
return
deliver
mrid
ModuleRevisionId
revision
String
cache
File
destIvyPattern
String
status
String
pubdate
Date
pdrResolver
PublishingDependencyRevisionResolver
validate
boolean
info
mrid
revision
status
pubdate
verbose
validate
long
start
currentTimeMillis
destIvyPattern
substitute
destIvyPattern
File
ivyFile
getIvyFileInCache
cache
mrid
if
exists
block
throw
IllegalStateException
mrid
ivyFile
ModuleDescriptor
md
URL
ivyFileURL
try
ivyFileURL
toURL
md
parseDescriptor
ivyFileURL
validate
setResolvedModuleRevisionId
ModuleRevisionId
getModuleId
revision
setResolvedPublicationDate
pubdate
catchClause
e
throw
RuntimeException
ivyFile
catchClause
e
throw
IllegalStateException
mrid
Map
resolvedDependencies
HashMap
DependencyDescriptor
dependencies
getDependencies
for
forControl
int
i
i
length
i
block
DependencyResolver
resolver
getResolver
dependencies
i
getDependencyId
ResolvedModuleRevision
dependency
getDependency
dependencies
i
ResolveData
cache
pubdate
validate
if
dependency
block
warn
getName
dependencies
i
getDependencyRevisionId
block
put
dependencies
i
getDependencyId
resolve
md
status
getDescriptor
String
publishedIvy
substitute
destIvyPattern
getResolvedModuleRevisionId
info
publishedIvy
try
update
ivyFileURL
File
publishedIvy
resolvedDependencies
status
revision
pubdate
catchClause
ex
throw
IllegalStateException
mrid
verbose
currentTimeMillis
start
publish
Collection
mrid
ModuleRevisionId
pubrevision
String
cache
File
srcArtifactPattern
String
resolverName
String
publishivy
boolean
validate
boolean
info
mrid
verbose
validate
long
start
currentTimeMillis
srcArtifactPattern
substitute
srcArtifactPattern
File
ivyFile
getIvyFileInCache
cache
mrid
if
exists
block
throw
IllegalStateException
mrid
ivyFile
DependencyResolver
resolver
getResolver
resolverName
if
resolver
block
throw
IllegalArgumentException
resolverName
ModuleDescriptor
md
URL
ivyFileURL
try
ivyFileURL
toURL
md
parseDescriptor
ivyFileURL
setResolvedModuleRevisionId
ModuleRevisionId
getModuleId
pubrevision
catchClause
e
throw
RuntimeException
ivyFile
catchClause
e
throw
IllegalStateException
mrid
Collection
missing
ArrayList
Set
artifactsSet
HashSet
String
confs
getConfigurationsNames
for
forControl
int
i
i
length
i
block
Artifact
artifacts
getArtifacts
confs
i
for
forControl
int
j
j
length
j
block
add
artifacts
j
for
forControl
Iterator
iter
iterator
hasNext
block
Artifact
artifact
Artifact
next
if
publish
artifact
srcArtifactPattern
resolver
block
add
artifact
if
publishivy
block
Artifact
artifact
MDArtifact
md
if
publish
artifact
srcArtifactPattern
resolver
block
add
artifact
verbose
currentTimeMillis
start
return
missing
publish
boolean
artifact
Artifact
srcArtifactPattern
String
resolver
DependencyResolver
File
src
File
substitute
srcArtifactPattern
artifact
if
exists
block
try
publish
artifact
src
return
catchClause
ex
error
artifact
getName
getMessage
return
sortNodes
List
nodes
Collection
Map
dependenciesMap
HashMap
List
nulls
ArrayList
for
forControl
Iterator
iter
iterator
hasNext
block
IvyNode
node
IvyNode
next
if
getDescriptor
block
add
node
block
List
n
List
get
getDescriptor
if
n
block
n
ArrayList
put
getDescriptor
n
add
node
List
list
sortModuleDescriptors
keySet
List
ret
ArrayList
int
size
size
for
forControl
int
i
i
size
i
block
ModuleDescriptor
md
ModuleDescriptor
get
i
List
n
List
get
md
addAll
n
addAll
nulls
return
ret
sortModuleDescriptors
List
moduleDescriptors
Collection
List
sorted
LinkedList
for
forControl
Iterator
iter
iterator
hasNext
block
ModuleDescriptor
md
ModuleDescriptor
next
List
after
LinkedList
List
between
LinkedList
int
place
for
forControl
ListIterator
it2
listIterator
hasNext
block
ModuleDescriptor
smd
ModuleDescriptor
next
if
dependsOn
smd
block
place
nextIndex
addAll
after
after
LinkedList
if
dependsOn
md
block
add
smd
add
place
md
if
isEmpty
block
removeAll
between
addAll
place
size
between
return
sorted
getIvyFileInCache
File
cache
File
mrid
ModuleRevisionId
return
File
cache
substitute
_cacheIvyPattern
getOrganisation
getName
getRevision
getArchiveFileInCache
File
cache
File
artifact
Artifact
return
getArchiveFileInCache
cache
getModuleRevisionId
getOrganisation
getModuleRevisionId
getName
getModuleRevisionId
getRevision
getName
getType
getExt
getArchiveFileInCache
File
cache
File
organisation
String
module
String
revision
String
artifact
String
type
String
ext
String
return
File
cache
substitute
_cacheArtifactPattern
organisation
module
revision
artifact
type
ext
getLocalHostName
String
try
return
getLocalHost
getHostName
catchClause
e
return
listOrganisationEntries
OrganisationEntry
List
entries
ArrayList
for
forControl
Iterator
iter
values
iterator
hasNext
block
DependencyResolver
resolver
DependencyResolver
next
addAll
asList
listOrganisations
return
OrganisationEntry
toArray
OrganisationEntry
size
listOrganisations
String
Collection
orgs
HashSet
for
forControl
Iterator
iter
values
iterator
hasNext
block
DependencyResolver
resolver
DependencyResolver
next
OrganisationEntry
entries
listOrganisations
if
entries
block
for
forControl
int
i
i
length
i
block
if
entries
i
block
add
entries
i
getOrganisation
return
String
toArray
String
size
listModuleEntries
ModuleEntry
org
OrganisationEntry
List
entries
ArrayList
for
forControl
Iterator
iter
values
iterator
hasNext
block
DependencyResolver
resolver
DependencyResolver
next
addAll
asList
listModules
org
return
ModuleEntry
toArray
ModuleEntry
size
listModules
String
org
String
List
mods
ArrayList
for
forControl
Iterator
iter
values
iterator
hasNext
block
DependencyResolver
resolver
DependencyResolver
next
ModuleEntry
entries
listModules
OrganisationEntry
resolver
org
if
entries
block
for
forControl
int
i
i
length
i
block
if
entries
i
block
add
entries
i
getModule
return
String
toArray
String
size
listRevisionEntries
RevisionEntry
module
ModuleEntry
List
entries
ArrayList
for
forControl
Iterator
iter
values
iterator
hasNext
block
DependencyResolver
resolver
DependencyResolver
next
addAll
asList
listRevisions
module
return
RevisionEntry
toArray
RevisionEntry
size
listRevisions
String
org
String
module
String
List
revs
ArrayList
for
forControl
Iterator
iter
values
iterator
hasNext
block
DependencyResolver
resolver
DependencyResolver
next
RevisionEntry
entries
listRevisions
ModuleEntry
OrganisationEntry
resolver
org
module
if
entries
block
for
forControl
int
i
i
length
i
block
if
entries
i
block
add
entries
i
getRevision
return
String
toArray
String
size
listingIgnore
boolean
name
String
return
contains
name
filterIgnore
names
Collection
removeAll
_listingIgnore
isCheckUpToDate
boolean
return
_checkUpToDate
setCheckUpToDate
checkUpToDate
boolean
_checkUpToDate
checkUpToDate
getCacheArtifactPattern
String
return
_cacheArtifactPattern
setCacheArtifactPattern
cacheArtifactPattern
String
_cacheArtifactPattern
cacheArtifactPattern
getCacheIvyPattern
String
return
_cacheIvyPattern
setCacheIvyPattern
cacheIvyPattern
String
_cacheIvyPattern
cacheIvyPattern
doValidate
boolean
return
_validate
setValidate
validate
boolean
_validate
validate
getVariable
String
name
String
String
val
String
get
name
return
val
val
substitute
val
getDefaultConflictManager
ConflictManager
if
_defaultConflictManager
block
_defaultConflictManager
LatestConflictManager
getDefaultLatestStrategy
return
_defaultConflictManager
setDefaultConflictManager
defaultConflictManager
ConflictManager
_defaultConflictManager
defaultConflictManager
getDefaultLatestStrategy
LatestStrategy
if
_defaultLatestStrategy
block
_defaultLatestStrategy
LatestRevisionStrategy
return
_defaultLatestStrategy
setDefaultLatestStrategy
defaultLatestStrategy
LatestStrategy
_defaultLatestStrategy
defaultLatestStrategy
EventListenerList
_listeners
EventListenerList
addTransferListener
listener
TransferListener
add
TransferListener
listener
removeTransferListener
listener
TransferListener
remove
TransferListener
listener
hasTransferListener
boolean
listener
TransferListener
return
asList
contains
listener
getListeners
TransferListener
fireTransferEvent
evt
TransferEvent
Object
listeners
getListenerList
for
forControl
int
i
length
i
i
block
if
listeners
i
TransferListener
block
TransferListener
listeners
i
transferProgress
evt
TransferEvent
fireTransferEvent
evt
TransferListener
