IvyNode
Pattern
FALLBACK_CONF_PATTERN
compile
ResolveData
data
ResolveEngineSettings
settings
IvyNodeCallers
callers
IvyNodeEviction
eviction
IvyNode
root
ModuleRevisionId
id
Map
dds
HashMap
ModuleDescriptor
md
ResolvedModuleRevision
module
Exception
problem
boolean
downloaded
boolean
searched
Collection
confsToFetch
HashSet
Collection
fetchedConfigurations
HashSet
Collection
loadedRootModuleConfs
HashSet
IvyNodeUsage
usage
IvyNodeUsage
Map
mergedUsages
LinkedHashMap
IvyNode
data
ResolveData
parent
IvyNode
dd
DependencyDescriptor
id
getDependencyRevisionId
put
parent
dd
root
getRoot
init
data
IvyNode
data
ResolveData
md
ModuleDescriptor
id
getModuleRevisionId
md
md
root
init
data
init
data
ResolveData
data
data
settings
getSettings
eviction
IvyNodeEviction
callers
IvyNodeCallers
loadData
boolean
rootModuleConf
String
parent
IvyNode
parentConf
String
conf
String
shouldBePublic
boolean
usage
IvyNodeUsage
debug
toString
rootModuleConf
if
isRoot
getReport
block
getReport
addDependency
boolean
loaded
if
hasProblem
block
debug
if
isEvicted
rootModuleConf
block
debug
rootModuleConf
if
hasConfigurationsToLoad
isRootModuleConfLoaded
rootModuleConf
block
debug
rootModuleConf
block
markRootModuleConfLoaded
rootModuleConf
if
md
block
DependencyResolver
resolver
getSettings
getResolver
getId
if
resolver
block
error
getModuleId
problem
RuntimeException
getModuleId
return
try
debug
resolver
getId
DependencyDescriptor
dependencyDescriptor
getDependencyDescriptor
parent
long
start
currentTimeMillis
ModuleRevisionId
requestedRevisionId
getDependencyRevisionId
getEventManager
fireIvyEvent
StartResolveDependencyEvent
resolver
dependencyDescriptor
requestedRevisionId
module
getDependency
dependencyDescriptor
data
getEventManager
fireIvyEvent
EndResolveDependencyEvent
resolver
dependencyDescriptor
requestedRevisionId
module
currentTimeMillis
start
if
module
block
getResolver
getRepositoryCacheManager
saveResolvers
getDescriptor
getResolver
getName
getArtifactResolver
getName
if
logModuleWhenFound
equals
getData
getOptions
getLog
block
info
getId
getResolver
getName
block
verbose
getId
getResolver
getName
if
getVersionMatcher
isDynamic
getId
getVersionMatcher
isDynamic
getId
block
error
getId
problem
RuntimeException
return
if
getId
equals
getId
block
IvyNode
resolved
getNode
getId
if
resolved
block
md
getDescriptor
if
handleConfiguration
loaded
rootModuleConf
parent
parentConf
conf
shouldBePublic
usage
block
return
moveToRealNode
rootModuleConf
parent
parentConf
conf
shouldBePublic
resolved
return
String
log
getId
getRevision
getId
if
getVersionMatcher
isDynamic
getId
block
log
if
logResolvedRevision
block
info
log
block
verbose
log
downloaded
getReport
isDownloaded
searched
getReport
isSearched
loaded
md
getDescriptor
remove
updateConfsToFetch
asList
resolveSpecialConfigurations
getRequiredConfigurations
parent
parentConf
block
warn
getId
reportFailure
problem
RuntimeException
return
catchClause
e
throw
e
catchClause
e
problem
e
return
block
loaded
handleConfiguration
loaded
rootModuleConf
parent
parentConf
conf
shouldBePublic
usage
if
hasProblem
block
debug
getMessage
return
block
DependencyDescriptor
dd
getDependencyDescriptor
parent
if
dd
block
addUsage
rootModuleConf
dd
parentConf
return
loaded
moveToRealNode
rootModuleConf
String
parent
IvyNode
parentConf
String
conf
String
shouldBePublic
boolean
resolved
IvyNode
if
md
block
md
md
if
module
block
module
module
downloaded
getReport
isDownloaded
searched
getReport
isSearched
putAll
dds
updateDataFrom
rootModuleConf
loadData
rootModuleConf
parent
parentConf
conf
shouldBePublic
usage
updateDataFrom
getAllUsages
rootModuleConf
usage
usage
replaceNode
getId
resolved
rootModuleConf
if
logResolvedRevision
block
info
getId
getRevision
getId
block
verbose
getId
getRevision
getId
getDependencies
Collection
rootModuleConf
String
confs
String
if
md
block
throw
IllegalStateException
if
asList
contains
confs
block
confs
getConfigurationsNames
Collection
deps
HashSet
for
forControl
int
i
i
length
i
block
addAll
getDependencies
rootModuleConf
confs
i
confs
i
return
deps
getDependencies
Collection
rootModuleConf
String
conf
String
requestedConf
String
if
md
block
throw
IllegalStateException
DependencyDescriptor
dds
getDependencies
Collection
dependencies
LinkedHashSet
for
forControl
int
i
i
length
i
block
DependencyDescriptor
dd
mediate
dds
i
String
dependencyConfigurations
getDependencyConfigurations
conf
requestedConf
if
length
block
continue
ModuleRevisionId
requestedDependencyRevisionId
getDependencyRevisionId
if
isDependencyModuleExcluded
rootModuleConf
requestedDependencyRevisionId
conf
block
verbose
dd
conf
continue
IvyNode
depNode
getNode
requestedDependencyRevisionId
if
depNode
block
depNode
IvyNode
data
dd
block
addDependencyDescriptor
dd
if
hasProblem
block
String
confsArray
resolveSpecialConfigurations
dependencyConfigurations
depNode
Collection
confs
asList
confsArray
updateConfsToFetch
confs
addRootModuleConfigurations
usage
rootModuleConf
confsArray
setRequiredConfs
conf
confs
addCaller
rootModuleConf
conf
dependencyConfigurations
dd
add
depNode
return
dependencies
addDependencyDescriptor
parent
IvyNode
dd
DependencyDescriptor
put
parent
dd
getDependencyDescriptor
DependencyDescriptor
parent
IvyNode
return
DependencyDescriptor
get
parent
isDependencyModuleExcluded
boolean
rootModuleConf
String
dependencyRevisionId
ModuleRevisionId
conf
String
return
doesCallersExclude
rootModuleConf
newIvyArtifact
dependencyRevisionId
hasConfigurationsToLoad
boolean
return
isEmpty
markRootModuleConfLoaded
boolean
rootModuleConf
String
return
add
rootModuleConf
isRootModuleConfLoaded
boolean
rootModuleConf
String
return
contains
rootModuleConf
handleConfiguration
boolean
loaded
boolean
rootModuleConf
String
parent
IvyNode
parentConf
String
conf
String
shouldBePublic
boolean
usage
IvyNodeUsage
if
md
block
String
confs
getRealConfs
conf
addRootModuleConfigurations
usage
rootModuleConf
confs
for
forControl
int
i
i
length
i
block
Configuration
c
getConfiguration
confs
i
if
c
block
remove
conf
if
isConfRequiredByMergedUsageOnly
rootModuleConf
conf
block
info
conf
if
equals
confs
i
block
problem
RuntimeException
conf
confs
i
parent
parentConf
block
problem
RuntimeException
confs
i
parent
parentConf
return
if
shouldBePublic
isRoot
getVisibility
PUBLIC
block
remove
conf
if
isConfRequiredByMergedUsageOnly
rootModuleConf
conf
block
info
conf
block
problem
RuntimeException
c
parent
parentConf
return
if
loaded
block
add
conf
removeAll
asList
confs
remove
conf
return
getDefaultConf
String
conf
String
Matcher
m
matcher
conf
if
matches
block
return
group
block
return
conf
getMainConf
String
conf
String
Matcher
m
matcher
conf
if
matches
block
return
group
block
return
updateConfsToFetch
confs
Collection
addAll
confs
removeAll
fetchedConfigurations
resolveSpecialConfigurations
String
dependencyConfigurations
String
node
IvyNode
if
length
dependencyConfigurations
startsWith
node
isLoaded
block
String
conf
dependencyConfigurations
if
equals
conf
block
return
getDescriptor
getPublicConfigurationsNames
List
exclusions
asList
substring
split
List
ret
ArrayList
asList
getDescriptor
getPublicConfigurationsNames
removeAll
exclusions
return
String
toArray
String
size
return
dependencyConfigurations
getRequiredConfigurations
String
in
IvyNode
inConf
String
Collection
req
LinkedHashSet
addAllIfNotNull
req
getRequiredConfigurations
in
inConf
for
forControl
Iterator
iterator
values
iterator
hasNext
block
IvyNodeUsage
usage
IvyNodeUsage
next
addAllIfNotNull
req
getRequiredConfigurations
in
inConf
return
req
String
String
toArray
String
size
addAllIfNotNull
into
Collection
col
Collection
if
col
block
addAll
col
getRequiredConfigurations
String
Collection
required
ArrayList
size
size
addAll
fetchedConfigurations
addAll
confsToFetch
return
String
toArray
String
size
getConfiguration
Configuration
conf
String
if
md
block
throw
IllegalStateException
String
defaultConf
getDefaultConf
conf
conf
getMainConf
conf
Configuration
configuration
getConfiguration
conf
if
configuration
block
configuration
getConfiguration
defaultConf
return
configuration
getConfigurations
String
rootModuleConf
String
Set
depConfs
LinkedHashSet
addAllIfNotNull
depConfs
getConfigurations
rootModuleConf
for
forControl
Iterator
iterator
values
iterator
hasNext
block
IvyNodeUsage
usage
IvyNodeUsage
next
addAllIfNotNull
depConfs
getConfigurations
rootModuleConf
return
String
toArray
String
size
isConfRequiredByMergedUsageOnly
boolean
rootModuleConf
String
conf
String
Set
confs
getConfigurations
rootModuleConf
return
confs
contains
conf
discardConf
rootModuleConf
String
conf
String
Set
depConfs
addAndGetConfigurations
rootModuleConf
if
md
block
Configuration
c
getConfiguration
conf
if
conf
block
String
exts
getExtends
for
forControl
int
i
i
length
i
block
discardConf
rootModuleConf
exts
i
remove
getName
block
warn
getId
conf
block
remove
conf
addRootModuleConfigurations
usage
IvyNodeUsage
rootModuleConf
String
dependencyConfs
String
Set
depConfs
addAndGetConfigurations
rootModuleConf
if
md
block
for
forControl
int
i
i
length
i
block
add
dependencyConfs
i
Configuration
conf
getConfiguration
dependencyConfs
i
if
conf
block
String
exts
getExtends
addRootModuleConfigurations
usage
rootModuleConf
exts
block
for
forControl
int
i
i
length
i
block
add
dependencyConfs
i
getRootModuleConfigurations
String
Set
confs
getRootModuleConfigurationsSet
return
String
toArray
String
size
getRootModuleConfigurationsSet
Set
Set
confs
LinkedHashSet
addAllIfNotNull
confs
getRootModuleConfigurations
for
forControl
Iterator
iterator
values
iterator
hasNext
block
IvyNodeUsage
usage
IvyNodeUsage
next
addAllIfNotNull
confs
getRootModuleConfigurations
return
confs
getConfsToFetch
String
return
String
toArray
String
size
getRealConfs
String
conf
String
if
md
block
return
String
conf
String
defaultConf
getDefaultConf
conf
conf
getMainConf
conf
if
getConfiguration
conf
block
if
equals
defaultConf
block
return
String
conf
defaultConf
if
startsWith
block
return
resolveSpecialConfigurations
String
conf
if
indexOf
block
String
confs
split
for
forControl
int
i
i
length
i
block
confs
i
confs
i
trim
return
String
conf
findPath
Collection
from
ModuleId
return
findPath
from
LinkedList
findPath
Collection
from
ModuleId
node
IvyNode
path
List
IvyNode
parent
IvyNode
getDirectCallerFor
from
if
parent
block
throw
IllegalArgumentException
from
getId
if
contains
parent
block
add
parent
verbose
from
get
size
return
path
add
parent
if
getId
getModuleId
equals
from
block
return
path
return
findPath
from
parent
path
updateDataFrom
node
IvyNode
rootModuleConf
String
real
boolean
updateFrom
callers
rootModuleConf
real
if
real
block
updateDataFrom
getAllUsages
rootModuleConf
block
IvyNodeUsage
mergedUsage
IvyNodeUsage
get
getId
if
mergedUsage
block
mergedUsage
IvyNodeUsage
node
put
getId
mergedUsage
updateDataFrom
getAllUsages
rootModuleConf
updateConfsToFetch
fetchedConfigurations
updateConfsToFetch
confsToFetch
getAllUsages
Collection
Collection
usages
ArrayList
add
usage
addAll
values
return
usages
getAllArtifacts
Artifact
Set
ret
HashSet
for
forControl
Iterator
it
getRootModuleConfigurationsSet
iterator
hasNext
block
String
rootModuleConf
String
next
addAll
asList
getArtifacts
rootModuleConf
return
Artifact
toArray
Artifact
size
getSelectedArtifacts
Artifact
artifactFilter
Filter
Collection
ret
HashSet
for
forControl
Iterator
it
getRootModuleConfigurationsSet
iterator
hasNext
block
String
rootModuleConf
String
next
if
isEvicted
rootModuleConf
isBlacklisted
rootModuleConf
block
addAll
asList
getArtifacts
rootModuleConf
ret
filter
ret
artifactFilter
return
Artifact
toArray
Artifact
size
getArtifacts
Artifact
rootModuleConf
String
String
confs
getConfigurations
rootModuleConf
if
confs
length
block
return
Artifact
if
md
block
throw
IllegalStateException
toString
Set
artifacts
HashSet
Set
dependencyArtifacts
getDependencyArtifactsSet
rootModuleConf
if
isDefault
dependencyArtifacts
isEmpty
block
addArtifactsFromOwnUsage
artifacts
dependencyArtifacts
addArtifactsFromMergedUsage
rootModuleConf
artifacts
block
Set
includes
LinkedHashSet
addAllIfNotNull
includes
getDependencyIncludesSet
rootModuleConf
for
forControl
Iterator
iterator
values
iterator
hasNext
block
IvyNodeUsage
usage
IvyNodeUsage
next
addAllIfNotNull
includes
getDependencyIncludesSet
rootModuleConf
if
dependencyArtifacts
isEmpty
isEmpty
block
for
forControl
int
i
i
length
i
block
addAll
asList
getArtifacts
confs
i
block
Map
allArtifacts
HashMap
for
forControl
int
i
i
length
i
block
Artifact
arts
getArtifacts
confs
i
for
forControl
int
j
j
length
j
block
put
arts
j
getId
getArtifactId
arts
j
if
dependencyArtifacts
block
addArtifactsFromOwnUsage
artifacts
dependencyArtifacts
addArtifactsFromMergedUsage
rootModuleConf
artifacts
for
forControl
Iterator
it
iterator
hasNext
block
IncludeRule
dad
IncludeRule
next
Collection
arts
findArtifactsMatching
dad
allArtifacts
if
isEmpty
block
error
getId
remove
block
debug
rootModuleConf
arts
addAll
arts
for
forControl
Iterator
iter
iterator
hasNext
block
Artifact
artifact
Artifact
next
boolean
excluded
doesCallersExclude
rootModuleConf
artifact
if
excluded
block
debug
rootModuleConf
artifact
remove
return
Artifact
toArray
Artifact
size
addArtifactsFromOwnUsage
artifacts
Set
dependencyArtifacts
Set
for
forControl
Iterator
it
iterator
hasNext
block
DependencyArtifactDescriptor
dad
DependencyArtifactDescriptor
next
add
MDArtifact
md
getName
getType
getExt
getUrl
getQualifiedExtraAttributes
addArtifactsFromMergedUsage
rootModuleConf
String
artifacts
Set
for
forControl
Iterator
iterator
values
iterator
hasNext
block
IvyNodeUsage
usage
IvyNodeUsage
next
Set
mergedDependencyArtifacts
getDependencyArtifactsSet
rootModuleConf
if
mergedDependencyArtifacts
block
for
forControl
Iterator
it
iterator
hasNext
block
DependencyArtifactDescriptor
dad
DependencyArtifactDescriptor
next
Map
extraAttributes
HashMap
getQualifiedExtraAttributes
put
getDependencyDescriptor
getParentRevisionId
getNode
getId
add
MDArtifact
md
getName
getType
getExt
getUrl
extraAttributes
findArtifactsMatching
Collection
rule
IncludeRule
allArtifacts
Map
Collection
ret
ArrayList
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
ArtifactId
aid
ArtifactId
next
if
matches
getMatcher
getId
aid
block
add
get
aid
return
ret
hasProblem
boolean
return
problem
getProblem
Exception
return
problem
getProblemMessage
String
return
getErrorMessage
problem
isDownloaded
boolean
return
downloaded
isSearched
boolean
return
searched
isLoaded
boolean
return
md
isFetched
boolean
conf
String
return
contains
conf
findNode
IvyNode
mrid
ModuleRevisionId
return
getNode
mrid
isRoot
boolean
return
root
getRoot
IvyNode
return
root
getConflictManager
ConflictManager
mid
ModuleId
if
md
block
throw
IllegalStateException
toString
ConflictManager
cm
getConflictManager
mid
return
cm
getConflictManager
mid
cm
getRealNode
IvyNode
IvyNode
real
getNode
getId
return
real
real
getId
ModuleRevisionId
return
id
getModuleId
ModuleId
return
getModuleId
getDescriptor
ModuleDescriptor
return
md
getData
ResolveData
return
data
getModuleRevision
ResolvedModuleRevision
return
module
getPublication
long
if
module
block
return
getPublicationDate
getTime
return
getLastModified
long
if
md
block
return
getLastModified
return
getResolvedId
ModuleRevisionId
if
md
getResolvedModuleRevisionId
getRevision
block
return
getResolvedModuleRevisionId
if
module
block
return
getId
block
return
getId
clean
clear
canExclude
boolean
rootModuleConf
String
Caller
callers
getCallers
rootModuleConf
for
forControl
int
i
i
length
i
block
if
callers
i
canExclude
block
return
return
getDirectCallerFor
IvyNode
from
ModuleId
return
getDirectCallerFor
from
getCallers
Caller
rootModuleConf
String
return
getCallers
rootModuleConf
getAllCallersModuleIds
Collection
return
getAllCallersModuleIds
getAllCallers
Caller
return
getAllCallers
getAllRealCallers
Caller
return
getAllRealCallers
addCaller
rootModuleConf
String
callerNode
IvyNode
callerConf
String
dependencyConfs
String
dd
DependencyDescriptor
addCaller
rootModuleConf
callerNode
callerConf
dependencyConfs
dd
boolean
isCircular
getAllCallersModuleIds
contains
getId
getModuleId
if
isCircular
block
getContext
getCircularDependencyStrategy
handleCircularDependency
toMrids
findPath
getId
getModuleId
doesCallersExclude
boolean
rootModuleConf
String
artifact
Artifact
callersStack
Stack
return
doesCallersExclude
rootModuleConf
artifact
callersStack
toMrids
ModuleRevisionId
path
Collection
depNode
IvyNode
ModuleRevisionId
ret
ModuleRevisionId
size
int
i
for
forControl
Iterator
iter
iterator
hasNext
i
block
IvyNode
node
IvyNode
next
ret
i
getId
ret
length
getId
return
ret
getResolvedNodes
Set
moduleId
ModuleId
rootModuleConf
String
return
getResolvedNodes
moduleId
rootModuleConf
getResolvedRevisions
Collection
moduleId
ModuleId
rootModuleConf
String
return
getResolvedRevisions
moduleId
rootModuleConf
markEvicted
evictionData
EvictionData
markEvicted
evictionData
String
rootModuleConf
getRootModuleConf
if
getSelected
block
for
forControl
Iterator
iter
getSelected
iterator
hasNext
block
IvyNode
selected
IvyNode
next
updateDataFrom
rootModuleConf
getAllEvictingConflictManagers
Collection
return
getAllEvictingConflictManagers
getAllEvictingNodes
Collection
return
getAllEvictingNodes
getAllEvictingNodesDetails
Collection
return
getAllEvictingNodesDetails
getEvictedConfs
String
return
getEvictedConfs
getEvictedData
EvictionData
rootModuleConf
String
return
getEvictedData
rootModuleConf
getEvictedNodes
Collection
mid
ModuleId
rootModuleConf
String
return
getEvictedNodes
mid
rootModuleConf
getEvictedRevisions
Collection
mid
ModuleId
rootModuleConf
String
return
getEvictedRevisions
mid
rootModuleConf
getEvictionDataInRoot
EvictionData
rootModuleConf
String
ancestor
IvyNode
return
getEvictionDataInRoot
rootModuleConf
ancestor
isCompletelyEvicted
boolean
return
isCompletelyEvicted
isEvicted
boolean
rootModuleConf
String
return
isEvicted
rootModuleConf
markEvicted
rootModuleConf
String
node
IvyNode
conflictManager
ConflictManager
resolved
Collection
EvictionData
evictionData
EvictionData
rootModuleConf
node
conflictManager
resolved
markEvicted
evictionData
setEvictedNodes
moduleId
ModuleId
rootModuleConf
String
evicted
Collection
setEvictedNodes
moduleId
rootModuleConf
evicted
setResolvedNodes
moduleId
ModuleId
rootModuleConf
String
resolved
Collection
setResolvedNodes
moduleId
rootModuleConf
resolved
toString
String
return
getResolvedId
toString
equals
boolean
obj
Object
if
obj
IvyNode
block
return
IvyNode
node
IvyNode
obj
return
getId
equals
getId
compareTo
int
obj
Object
IvyNode
that
IvyNode
obj
return
getModuleId
compareTo
getModuleId
hashCode
int
return
getId
hashCode
getPendingConflicts
Collection
rootModuleConf
String
mid
ModuleId
return
getPendingConflicts
rootModuleConf
mid
setPendingConflicts
moduleId
ModuleId
rootModuleConf
String
conflicts
Collection
setPendingConflicts
moduleId
rootModuleConf
conflicts
blacklist
bdata
IvyNodeBlacklist
if
getSettings
logResolvedRevision
block
info
bdata
block
verbose
bdata
Stack
callerStack
Stack
push
clearEvictionDataInAllCallers
getRootModuleConf
callerStack
blacklist
bdata
blacklist
clearEvictionDataInAllCallers
rootModuleConf
String
callerStack
Stack
IvyNode
node
IvyNode
peek
Caller
callers
getCallers
rootModuleConf
for
forControl
int
i
i
length
i
block
IvyNode
callerNode
findNode
callers
i
getModuleRevisionId
if
callerNode
block
eviction
IvyNodeEviction
callerNode
if
contains
callerNode
block
push
callerNode
clearEvictionDataInAllCallers
rootModuleConf
callerStack
pop
isBlacklisted
boolean
rootModuleConf
String
return
isBlacklisted
rootModuleConf
isCompletelyBlacklisted
boolean
if
isRoot
block
return
String
rootModuleConfigurations
getRootModuleConfigurations
for
forControl
int
i
i
length
i
block
if
isBlacklisted
rootModuleConfigurations
i
block
return
return
getBlacklistData
IvyNodeBlacklist
rootModuleConf
String
return
getBlacklistData
rootModuleConf
getMainUsage
IvyNodeUsage
return
usage
Comparable
