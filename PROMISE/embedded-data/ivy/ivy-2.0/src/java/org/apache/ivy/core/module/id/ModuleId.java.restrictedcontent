ModuleId
String
ENCODE_SEPARATOR
Map
CACHE
WeakHashMap
newInstance
ModuleId
org
String
name
String
return
intern
ModuleId
org
name
intern
ModuleId
moduleId
ModuleId
ModuleId
r
ModuleId
get
moduleId
if
r
block
r
moduleId
put
r
r
return
r
String
organisation
String
name
int
hash
Map
attributes
HashMap
ModuleId
organisation
String
name
String
if
name
block
throw
IllegalArgumentException
organisation
organisation
name
name
put
ORGANISATION_KEY
organisation
put
MODULE_KEY
name
getName
String
return
name
getOrganisation
String
return
organisation
equals
boolean
obj
Object
if
obj
ModuleId
block
return
ModuleId
other
ModuleId
obj
if
organisation
block
return
organisation
equals
name
block
return
equals
organisation
equals
name
hashCode
int
if
hash
block
hash
hash
hash
organisation
hashCode
hash
hash
hashCode
return
hash
toString
String
return
organisation
name
compareTo
int
obj
Object
ModuleId
that
ModuleId
obj
int
result
compareTo
organisation
if
result
block
result
compareTo
name
return
result
encodeToString
String
return
getOrganisation
ENCODE_SEPARATOR
getName
getAttributes
Map
return
attributes
decode
ModuleId
encoded
String
String
parts
split
ENCODE_SEPARATOR
if
length
block
throw
IllegalArgumentException
encoded
return
ModuleId
parts
parts
Pattern
MID_PATTERN
compile
STRICT_CHARS_PATTERN
STRICT_CHARS_PATTERN
parse
ModuleId
mid
String
Matcher
m
matcher
mid
if
matches
block
throw
IllegalArgumentException
mid
pattern
return
newInstance
group
group
Comparable
