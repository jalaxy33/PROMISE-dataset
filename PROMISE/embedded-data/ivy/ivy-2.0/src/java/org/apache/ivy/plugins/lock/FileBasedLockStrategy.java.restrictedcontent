FileBasedLockStrategy
int
SLEEP_TIME
long
DEFAULT_TIMEOUT
FileLocker
locker
long
timeout
DEFAULT_TIMEOUT
Map
currentLockCounters
HashMap
FileBasedLockStrategy
CreateFileLocker
FileBasedLockStrategy
debugLocking
boolean
CreateFileLocker
debugLocking
debugLocking
FileBasedLockStrategy
locker
FileLocker
debugLocking
boolean
debugLocking
locker
locker
acquireLock
boolean
file
File
if
isDebugLocking
block
debugLocking
file
long
start
currentTimeMillis
do
currentTimeMillis
start
timeout
block
synchronized
if
hasLock
file
block
int
holdLocks
incrementLock
file
if
isDebugLocking
block
debugLocking
file
currentTimeMillis
start
holdLocks
return
if
tryLock
file
block
if
isDebugLocking
block
debugLocking
file
currentTimeMillis
start
incrementLock
file
return
sleep
SLEEP_TIME
return
releaseLock
file
File
synchronized
int
holdLocks
decrementLock
file
if
holdLocks
block
unlock
file
if
isDebugLocking
block
debugLocking
file
block
if
isDebugLocking
block
debugLocking
file
holdLocks
debugLocking
msg
String
info
currentThread
currentTimeMillis
msg
hasLock
boolean
file
File
Integer
c
Integer
get
file
return
c
intValue
incrementLock
int
file
File
Integer
c
Integer
get
file
int
holdLocks
c
intValue
put
file
Integer
holdLocks
return
holdLocks
decrementLock
int
file
File
Integer
c
Integer
get
file
int
dc
c
intValue
put
file
Integer
dc
return
dc
FileLocker
tryLock
boolean
f
File
unlock
f
File
CreateFileLocker
boolean
debugLocking
CreateFileLocker
debugLocking
boolean
debugLocking
debugLocking
tryLock
boolean
file
File
try
if
getParentFile
exists
getParentFile
mkdirs
block
if
createNewFile
block
return
block
if
debugLocking
block
debugLocking
file
catchClause
e
verbose
getMessage
file
return
unlock
file
File
delete
FileLocker
NIOFileLocker
Map
locks
HashMap
boolean
debugLocking
NIOFileLocker
debugLocking
boolean
debugLocking
debugLocking
tryLock
boolean
file
File
try
if
getParentFile
exists
getParentFile
mkdirs
block
RandomAccessFile
raf
RandomAccessFile
file
FileChannel
channel
getChannel
try
FileLock
l
tryLock
if
l
block
synchronized
put
file
l
return
block
if
debugLocking
block
debugLocking
file
close
catchClause
e
verbose
getMessage
file
return
unlock
file
File
synchronized
FileLock
l
FileLock
get
file
if
l
block
throw
IllegalArgumentException
file
try
release
catchClause
e
error
file
getMessage
FileLocker
AbstractLockStrategy
