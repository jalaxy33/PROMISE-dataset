Configurator
Macro
MacroDef
macrodef
Map
attValues
HashMap
Map
macroRecords
HashMap
Macro
def
MacroDef
macrodef
def
defineAttribute
attributeName
String
value
String
if
getAttribute
attributeName
block
throw
IllegalArgumentException
attributeName
getName
put
attributeName
value
recordCreateChild
MacroRecord
name
String
MacroRecord
macroRecord
MacroRecord
name
List
records
List
get
name
if
records
block
records
ArrayList
put
name
records
add
macroRecord
return
macroRecord
play
Object
conf
Configurator
return
play
conf
attValues
macroRecords
Attribute
String
name
String
defaultValue
getDefault
String
return
defaultValue
setDefault
default1
String
defaultValue
default1
getName
String
return
name
setName
name
String
name
name
Element
String
name
boolean
optional
getName
String
return
name
setName
name
String
name
name
isOptional
boolean
return
optional
setOptional
optional
boolean
optional
optional
MacroRecord
String
name
Map
attributes
LinkedHashMap
List
children
ArrayList
Object
object
MacroRecord
name
String
name
name
getName
String
return
name
recordAttribute
name
String
value
String
put
name
value
recordChild
MacroRecord
name
String
MacroRecord
child
MacroRecord
name
add
child
return
child
recordChild
MacroRecord
name
String
object
Object
MacroRecord
child
recordChild
name
object
object
return
child
getAttributes
Map
return
attributes
getChildren
List
return
children
getObject
Object
return
object
MacroDef
String
name
Map
attributes
HashMap
Map
elements
HashMap
MacroRecord
macroRecord
MacroDef
macroName
String
name
macroName
getAttribute
Attribute
attributeName
String
return
Attribute
get
attributeName
play
Object
conf
Configurator
attValues
Map
macroRecords
Map
for
forControl
Iterator
iter
values
iterator
hasNext
block
Attribute
att
Attribute
next
String
val
String
get
getName
if
val
block
if
getDefault
block
throw
IllegalArgumentException
getName
getName
block
put
getName
getDefault
return
play
conf
macroRecord
attValues
macroRecords
play
Object
conf
Configurator
macroRecord
MacroRecord
attValues
Map
childrenRecords
Map
if
getObject
block
addChild
getName
getObject
endCreateChild
return
getObject
startCreateChild
getName
Map
attributes
getAttributes
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
String
attName
String
next
String
attValue
replaceParam
String
get
attName
attValues
setAttribute
attName
attValue
for
forControl
Iterator
iter
getChildren
iterator
hasNext
block
MacroRecord
child
MacroRecord
next
Element
elt
Element
get
getName
if
elt
block
List
elements
List
get
getName
if
elements
block
for
forControl
Iterator
iterator
iterator
hasNext
block
MacroRecord
element
MacroRecord
next
for
forControl
Iterator
it2
getChildren
iterator
hasNext
block
MacroRecord
r
MacroRecord
next
play
conf
r
attValues
EMPTY_MAP
if
isOptional
block
throw
IllegalArgumentException
getName
getName
continue
play
conf
child
attValues
childrenRecords
return
endCreateChild
replaceParam
String
string
String
attValues
Map
return
substituteParams
string
attValues
getName
String
return
name
addConfiguredAttribute
att
Attribute
put
getName
att
addConfiguredElement
elt
Element
put
getName
elt
createMacro
Macro
return
Macro
addAttribute
attName
String
attDefaultValue
String
Attribute
att
Attribute
setName
attName
setDefault
attDefaultValue
addConfiguredAttribute
att
addElement
elementName
String
optional
boolean
Element
elt
Element
setName
elementName
setOptional
optional
addConfiguredElement
elt
recordCreateChild
MacroRecord
name
String
macroRecord
MacroRecord
name
return
macroRecord
ObjectDescriptor
Object
obj
String
objName
Map
createMethods
HashMap
Map
addMethods
HashMap
Map
addConfiguredMethods
HashMap
Map
setMethods
HashMap
Map
typeAddMethods
HashMap
Map
typeAddConfiguredMethods
HashMap
ObjectDescriptor
object
Object
objName
String
obj
object
objName
objName
Method
methods
getClass
getMethods
for
forControl
int
i
i
length
i
block
Method
m
methods
i
if
getName
startsWith
getParameterTypes
length
equals
getReturnType
block
String
name
uncapitalize
getName
substring
length
if
length
block
continue
addCreateMethod
name
m
if
getName
startsWith
getParameterTypes
length
equals
getReturnType
block
String
name
uncapitalize
getName
substring
length
if
length
block
addAddConfiguredMethod
m
addAddConfiguredMethod
name
m
if
getName
startsWith
getName
startsWith
getParameterTypes
length
equals
getReturnType
block
String
name
uncapitalize
getName
substring
length
if
length
block
addAddMethod
m
addAddMethod
name
m
if
getName
startsWith
getParameterTypes
length
equals
getReturnType
block
String
name
uncapitalize
getName
substring
length
if
length
block
continue
addSetMethod
name
m
addCreateMethod
name
String
m
Method
put
name
m
addAddMethod
name
String
m
Method
put
name
m
addAddConfiguredMethod
name
String
m
Method
put
name
m
addAddMethod
m
Method
put
getParameterTypes
m
addAddConfiguredMethod
m
Method
put
getParameterTypes
m
addSetMethod
name
String
m
Method
Method
current
Method
get
name
if
current
getParameterTypes
String
block
return
put
name
m
getObject
Object
return
obj
getCreateMethod
Method
name
String
return
Method
get
name
getAddMethod
Method
name
String
return
Method
get
name
getAddConfiguredMethod
Method
name
String
return
Method
get
name
getAddMethod
Method
type
Class
return
getTypeMatchingMethod
type
typeAddMethods
getAddConfiguredMethod
Method
type
Class
return
getTypeMatchingMethod
type
typeAddConfiguredMethods
getTypeMatchingMethod
Method
type
Class
typeMethods
Map
Method
m
Method
get
type
if
m
block
return
m
for
forControl
Iterator
iter
keySet
iterator
hasNext
block
Class
clss
Class
next
if
isAssignableFrom
type
block
return
Method
get
clss
return
getSetMethod
Method
name
String
return
Method
get
name
getObjectName
String
return
objName
FileResolver
fileResolver
DEFAULT
Map
typedefs
HashMap
Map
macrodefs
HashMap
Stack
objectStack
Stack
List
TRUE_VALUES
asList
String
typeDef
name
String
className
String
typeDef
name
forName
className
typeDef
name
String
clazz
Class
put
name
clazz
setRoot
root
Object
if
root
block
throw
NullPointerException
clear
setCurrent
root
clear
clear
setCurrent
object
Object
name
String
push
ObjectDescriptor
object
name
startCreateChild
Object
name
String
if
isEmpty
block
throw
IllegalStateException
ObjectDescriptor
parentOD
ObjectDescriptor
peek
Object
parent
getObject
if
parent
MacroDef
block
if
equals
name
equals
name
block
MacroRecord
record
MacroDef
parent
setCurrent
record
name
return
record
if
parent
Macro
block
MacroRecord
record
Macro
parent
setCurrent
record
name
return
record
if
parent
MacroRecord
block
MacroRecord
record
MacroRecord
parent
setCurrent
record
name
return
record
Object
child
MacroDef
macrodef
MacroDef
get
name
if
macrodef
block
Macro
macro
createMacro
setCurrent
macro
name
return
macro
Class
childClass
Class
get
name
Method
addChild
try
if
childClass
block
return
addChild
parentOD
childClass
name
block
addChild
getCreateMethod
name
if
addChild
block
child
invoke
parent
Object
setCurrent
child
name
return
child
addChild
getAddMethod
name
if
addChild
block
childClass
getParameterTypes
child
newInstance
invoke
parent
Object
child
setCurrent
child
name
return
child
addChild
getAddConfiguredMethod
name
if
addChild
block
childClass
getParameterTypes
if
Map
childClass
block
child
HashMap
block
child
newInstance
setCurrent
child
name
return
child
catchClause
ex
throw
IllegalArgumentException
childClass
name
getClass
catchClause
ex
IllegalArgumentException
iae
IllegalArgumentException
name
getClass
initCause
ex
throw
iae
throw
IllegalArgumentException
name
getClass
addChild
name
String
child
Object
if
isEmpty
block
throw
IllegalStateException
ObjectDescriptor
parentOD
ObjectDescriptor
peek
try
addChild
parentOD
getClass
name
child
catchClause
ex
throw
IllegalArgumentException
getClass
name
getObject
getClass
catchClause
ex
IllegalArgumentException
iae
IllegalArgumentException
name
getObject
getClass
initCause
ex
throw
iae
addChild
Object
parentOD
ObjectDescriptor
childClass
Class
name
String
child
Object
Object
parent
getObject
if
parent
MacroRecord
block
MacroRecord
record
MacroRecord
parent
MacroRecord
recordChild
recordChild
name
child
setCurrent
recordChild
name
return
recordChild
Method
addChild
getAddMethod
childClass
if
addChild
block
if
child
block
child
newInstance
invoke
parent
Object
child
setCurrent
child
name
return
child
addChild
getAddConfiguredMethod
childClass
if
addChild
block
if
child
block
if
Map
childClass
block
child
HashMap
block
child
newInstance
setCurrent
child
name
return
child
throw
IllegalArgumentException
name
getClass
isTopLevelMacroRecord
boolean
if
isEmpty
block
return
ObjectDescriptor
od
ObjectDescriptor
peek
return
getObject
MacroDef
setAttribute
attributeName
String
value
String
if
isEmpty
block
throw
IllegalStateException
ObjectDescriptor
od
ObjectDescriptor
peek
if
getObject
Macro
block
Macro
getObject
return
if
getObject
MacroRecord
block
MacroRecord
getObject
return
Method
m
getSetMethod
attributeName
if
m
block
if
getObject
Map
block
Map
getObject
return
throw
IllegalArgumentException
attributeName
getObject
getClass
Object
convertedValue
Class
paramClass
getParameterTypes
try
if
equals
String
block
convertedValue
value
if
equals
Boolean
equals
boolean
block
convertedValue
valueOf
contains
value
if
equals
Character
equals
char
block
convertedValue
Character
length
charAt
if
equals
Short
equals
short
block
convertedValue
valueOf
value
if
equals
Integer
equals
int
block
convertedValue
valueOf
value
if
equals
Long
equals
long
block
convertedValue
valueOf
value
if
equals
Class
block
convertedValue
forName
value
if
equals
File
block
convertedValue
resolveFile
value
getObjectName
attributeName
block
convertedValue
getConstructor
newInstance
Object
value
Class
String
catchClause
ex
IllegalArgumentException
iae
IllegalArgumentException
value
paramClass
attributeName
getObject
getClass
getMessage
initCause
ex
throw
iae
try
invoke
getObject
Object
convertedValue
catchClause
ex
IllegalArgumentException
iae
IllegalArgumentException
attributeName
convertedValue
getObject
getClass
initCause
ex
throw
iae
addText
text
String
if
isEmpty
block
throw
IllegalStateException
ObjectDescriptor
od
ObjectDescriptor
peek
try
getObject
getClass
getMethod
Class
String
invoke
getObject
Object
text
catchClause
ex
IllegalArgumentException
iae
IllegalArgumentException
getObject
getClass
initCause
ex
throw
iae
endCreateChild
Object
if
isEmpty
block
throw
IllegalStateException
ObjectDescriptor
od
ObjectDescriptor
pop
if
isEmpty
block
push
od
throw
IllegalStateException
if
getObject
Macro
block
return
Macro
getObject
ObjectDescriptor
parentOD
ObjectDescriptor
peek
String
name
getObjectName
Class
childClass
Class
get
name
Method
m
if
childClass
block
m
getAddConfiguredMethod
childClass
block
m
getAddConfiguredMethod
name
try
if
m
block
invoke
getObject
Object
getObject
return
getObject
catchClause
ex
IllegalArgumentException
iae
IllegalArgumentException
name
getObject
getClass
getErrorMessage
ex
initCause
ex
throw
iae
getCurrent
Object
return
isEmpty
ObjectDescriptor
peek
getDepth
int
return
size
startMacroDef
MacroDef
macroName
String
MacroDef
macroDef
MacroDef
macroName
setCurrent
macroDef
macroName
return
macroDef
addMacroAttribute
attName
String
attDefaultValue
String
MacroDef
getCurrent
addMacroElement
elementName
String
optional
boolean
MacroDef
getCurrent
endMacroDef
addConfiguredMacrodef
MacroDef
getCurrent
pop
addConfiguredMacrodef
macrodef
MacroDef
put
getName
macrodef
getTypeDef
Class
name
String
return
Class
get
name
getFileResolver
FileResolver
return
fileResolver
setFileResolver
fileResolver
FileResolver
checkNotNull
fileResolver
fileResolver
fileResolver
