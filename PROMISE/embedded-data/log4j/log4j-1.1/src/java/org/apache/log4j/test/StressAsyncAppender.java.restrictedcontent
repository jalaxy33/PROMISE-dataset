StressAsyncAppender
Category
root
getRoot
Random
random
Random
int
LOOP_LENGTH
int
BRANCHING_FACTOR
int
maxThreads
long
msgCounter
int
threadCounter
double
LOG_2
log
Object
lock
Object
main
args
String
if
length
block
usage
configure
try
maxThreads
parseInt
args
catchClause
e
println
e
usage
while
block
synchronized
lock
createChildren
randomInt
BRANCHING_FACTOR
try
debug
wait
debug
catchClause
e
warn
e
usage
println
getName
StressAsyncAppender
exit
StressAsyncAppender
run
int
loopLength
randomInt
LOOP_LENGTH
debug
loopLength
int
createIndex
loopLength
for
forControl
int
i
i
loopLength
i
block
if
i
createIndex
createChildren
randomInt
BRANCHING_FACTOR
synchronized
lock
debug
msgCounter
synchronized
lock
threadCounter
debug
threadCounter
if
threadCounter
block
debug
notify
createChildren
n
int
if
n
return
synchronized
lock
n
maxThreadsConstrained
n
debug
n
for
forControl
int
i
i
n
i
block
debug
threadCounter
start
StressAsyncAppender
maxThreadsConstrained
int
a
int
int
maxAllowed
maxThreads
threadCounter
return
a
maxAllowed
a
maxAllowed
randomInt
int
n
int
int
r
nextInt
n
return
r
r
r
delay
millis
long
try
currentThread
sleep
millis
catchClause
e
Thread
