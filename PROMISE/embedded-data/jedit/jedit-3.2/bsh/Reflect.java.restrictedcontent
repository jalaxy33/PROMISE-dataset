Reflect
invokeObjectMethod
Object
interpreter
Interpreter
object
Object
methodName
String
args
Object
callerInfo
SimpleNode
if
object
This
return
This
object
return
invokeMethod
getClass
object
methodName
args
invokeStaticMethod
Object
clas
Class
methodName
String
args
Object
debug
return
invokeMethod
clas
methodName
args
getIndex
Object
array
Object
index
int
try
Object
val
get
array
index
return
wrapPrimitive
val
getClass
getComponentType
catchClause
e1
throw
TargetError
e1
catchClause
e
throw
ReflectError
e
setIndex
array
Object
index
int
val
Object
try
val
unwrapPrimitive
val
set
array
index
val
catchClause
e2
throw
TargetError
e2
catchClause
e1
throw
TargetError
ArrayStoreException
toString
catchClause
e
throw
ReflectError
e
getStaticField
Object
clas
Class
fieldName
String
return
getFieldValue
clas
fieldName
getObjectField
Object
object
Object
fieldName
String
if
object
This
return
This
object
block
try
return
getFieldValue
getClass
object
fieldName
catchClause
e
if
hasObjectPropertyGetter
getClass
fieldName
return
getObjectProperty
object
fieldName
throw
e
getLHSStaticField
LHS
clas
Class
fieldName
String
Field
f
getField
clas
fieldName
return
LHS
f
getLHSObjectField
LHS
object
Object
fieldName
String
if
object
This
return
LHS
This
object
fieldName
try
Field
f
getField
getClass
fieldName
return
LHS
object
f
catchClause
e
if
hasObjectPropertySetter
getClass
fieldName
return
LHS
object
fieldName
throw
e
getFieldValue
Object
clas
Class
object
Object
fieldName
String
try
Field
f
getField
clas
fieldName
if
f
throw
ReflectError
fieldName
Object
value
get
object
Class
returnType
getType
return
wrapPrimitive
value
returnType
catchClause
e
throw
ReflectError
fieldName
catchClause
e
throw
ReflectError
fieldName
getField
Field
clas
Class
fieldName
String
try
if
haveAccessibility
return
findAccessibleField
clas
fieldName
return
getField
fieldName
catchClause
e
throw
ReflectError
fieldName
findAccessibleField
Field
clas
Class
fieldName
String
while
clas
block
try
Field
field
getDeclaredField
fieldName
if
RMSetAccessible
field
return
field
catchClause
e
clas
getSuperclass
throw
NoSuchFieldException
fieldName
invokeMethod
Object
clas
Class
object
Object
name
String
args
Object
onlyStatic
boolean
if
object
NULL
throw
TargetError
name
NullPointerException
if
object
VOID
throw
EvalError
name
if
args
args
Object
for
forControl
int
i
i
length
i
if
args
i
VOID
throw
ReflectError
i
name
Class
returnType
Object
returnValue
Class
types
getTypes
args
unwrapPrimitives
args
try
Method
m
try
m
findAccessibleMethod
clas
name
types
onlyStatic
catchClause
e
if
m
debug
methodString
name
types
getName
if
m
block
if
length
throw
ReflectError
onlyStatic
methodString
name
types
getName
Method
methods
getMethods
if
onlyStatic
methods
retainStaticMethods
methods
m
findMostSpecificMethod
name
types
methods
methods
getMethods
if
m
m
findExtendedMethod
name
args
methods
if
m
block
try
m
findAccessibleMethod
clas
getName
getParameterTypes
onlyStatic
catchClause
e
if
m
throw
ReflectError
onlyStatic
methodString
name
types
getName
returnValue
invoke
object
args
if
returnValue
returnValue
NULL
returnType
getReturnType
catchClause
e
throw
ReflectError
methodString
name
types
getName
e
return
wrapPrimitive
returnValue
returnType
retainStaticMethods
Method
methods
Method
Vector
v
Vector
for
forControl
int
i
i
length
i
if
isStatic
methods
i
getModifiers
addElement
methods
i
Method
ma
Method
size
copyInto
ma
return
ma
findAccessibleMethod
Method
clas
Class
name
String
types
Class
onlyStatic
boolean
Method
meth
Vector
classQ
Vector
addElement
clas
Method
found
while
size
block
Class
c
Class
firstElement
removeElementAt
if
isPublic
getModifiers
haveAccessibility
RMSetAccessible
c
block
try
meth
getDeclaredMethod
name
types
if
isPublic
getModifiers
haveAccessibility
RMSetAccessible
meth
block
found
meth
break
catchClause
e
if
isInterface
block
Class
superclass
getSuperclass
if
superclass
addElement
Object
superclass
Class
intfs
getInterfaces
for
forControl
int
i
i
length
i
addElement
Object
intfs
i
if
found
onlyStatic
isStatic
getModifiers
return
found
return
wrapPrimitive
Object
value
Object
returnType
Class
if
value
return
NULL
if
returnType
TYPE
return
VOID
if
isPrimitive
block
if
value
Number
return
Primitive
Number
value
if
value
Boolean
return
Primitive
Boolean
value
if
value
Character
return
Primitive
Character
value
throw
ReflectError
return
value
getTypes
Class
args
Object
if
args
return
Class
Class
types
Class
length
for
forControl
int
i
i
length
i
block
if
args
i
Primitive
types
i
Primitive
args
i
types
i
args
i
getClass
return
types
unwrapPrimitives
args
Object
for
forControl
int
i
i
length
i
args
i
unwrapPrimitive
args
i
unwrapPrimitive
Object
arg
Object
if
arg
Primitive
return
Primitive
arg
return
arg
constructObject
Object
clas
String
args
Object
Class
c
classForName
clas
if
c
throw
ReflectError
clas
return
constructObject
c
args
constructObject
Object
clas
Class
args
Object
for
forControl
int
i
i
length
i
if
args
i
VOID
throw
ReflectError
i
clas
if
isInterface
throw
ReflectError
clas
Object
obj
Class
types
getTypes
args
unwrapPrimitives
args
Constructor
con
Constructor
constructors
getDeclaredConstructors
debug
clas
con
findMostSpecificConstructor
types
constructors
if
con
if
length
throw
ReflectError
clas
con
findExtendedConstructor
args
constructors
if
con
throw
ReflectError
clas
try
obj
newInstance
args
catchClause
e
throw
ReflectError
catchClause
e
throw
ReflectError
catchClause
e
throw
ReflectError
if
obj
throw
ReflectError
return
obj
findMostSpecificMethod
Method
name
String
idealMatch
Class
methods
Method
Vector
sigs
Vector
Vector
meths
Vector
for
forControl
int
i
i
length
i
if
methods
i
getName
equals
name
block
addElement
methods
i
addElement
methods
i
getParameterTypes
Class
candidates
Class
size
copyInto
candidates
debug
name
int
match
findMostSpecificSignature
idealMatch
candidates
if
match
return
return
Method
elementAt
match
findExtendedMethod
Method
name
String
args
Object
methods
Method
Method
bestMatch
Object
tempArgs
Object
length
for
forControl
int
i
i
length
i
block
Method
currentMethod
methods
i
if
equals
getName
block
Class
parameters
getParameterTypes
if
length
length
continue
try
for
forControl
int
j
j
length
j
tempArgs
j
getAssignableForm
args
j
parameters
j
arraycopy
tempArgs
args
length
return
currentMethod
catchClause
e
return
findMostSpecificConstructor
Constructor
idealMatch
Class
constructors
Constructor
Class
candidates
Class
length
for
forControl
int
i
i
length
i
candidates
i
constructors
i
getParameterTypes
int
match
findMostSpecificSignature
idealMatch
candidates
if
match
return
return
constructors
match
findExtendedConstructor
Constructor
args
Object
constructors
Constructor
Constructor
bestMatch
Object
tempArgs
Object
length
for
forControl
int
i
i
length
i
block
Constructor
currentConstructor
constructors
i
Class
parameters
getParameterTypes
if
length
length
continue
try
for
forControl
int
j
j
length
j
tempArgs
j
getAssignableForm
args
j
parameters
j
arraycopy
tempArgs
args
length
return
currentConstructor
catchClause
e
return
findMostSpecificSignature
int
idealMatch
Class
candidates
Class
Class
bestMatch
int
bestMatchIndex
for
forControl
int
i
i
length
i
block
Class
targetMatch
candidates
i
if
isAssignable
idealMatch
targetMatch
bestMatch
isAssignable
targetMatch
bestMatch
block
bestMatch
targetMatch
bestMatchIndex
i
if
bestMatch
block
return
bestMatchIndex
block
debug
return
isAssignable
boolean
from
Class
to
Class
if
from
from
Class
if
to
to
Class
if
length
length
return
for
forControl
int
i
i
length
i
block
if
to
i
continue
if
from
i
block
if
to
continue
return
if
isAssignableFrom
to
i
from
i
return
return
isAssignableFrom
boolean
lhs
Class
rhs
Class
if
isPrimitive
isPrimitive
block
if
lhs
rhs
return
if
rhs
TYPE
lhs
TYPE
lhs
TYPE
lhs
TYPE
lhs
TYPE
lhs
TYPE
return
if
rhs
TYPE
lhs
TYPE
lhs
TYPE
lhs
TYPE
lhs
TYPE
return
if
rhs
TYPE
lhs
TYPE
lhs
TYPE
lhs
TYPE
lhs
TYPE
return
if
rhs
TYPE
lhs
TYPE
lhs
TYPE
lhs
TYPE
return
if
rhs
TYPE
lhs
TYPE
lhs
TYPE
return
if
rhs
TYPE
lhs
TYPE
return
if
isAssignableFrom
rhs
return
return
accessorName
String
getorset
String
propName
String
return
getorset
valueOf
toUpperCase
charAt
substring
hasObjectPropertyGetter
boolean
clas
Class
propName
String
String
getterName
accessorName
propName
try
getMethod
getterName
Class
return
catchClause
e
return
hasObjectPropertySetter
boolean
clas
Class
propName
String
String
setterName
accessorName
propName
Class
sig
Class
clas
Method
methods
getMethods
for
forControl
int
i
i
length
i
if
methods
i
getName
equals
setterName
return
return
getObjectProperty
Object
obj
Object
propName
String
String
accessorName
accessorName
propName
Object
args
Object
debug
try
try
return
invokeObjectMethod
obj
accessorName
args
catchClause
e
throw
ReflectError
e
catchClause
e
throw
ReflectError
e
setObjectProperty
obj
Object
propName
String
value
Object
String
accessorName
accessorName
propName
Object
args
Object
value
debug
try
invokeObjectMethod
obj
accessorName
args
catchClause
e
throw
EvalError
normalizeClassName
String
type
Class
if
isArray
return
getName
StringBuffer
className
StringBuffer
try
append
getArrayBaseType
getName
type
for
forControl
int
i
i
getArrayDimensions
type
i
append
catchClause
e
return
toString
getArrayDimensions
int
arrayClass
Class
if
isArray
return
return
getName
lastIndexOf
getArrayBaseType
Class
arrayClass
Class
if
isArray
throw
ReflectError
return
getComponentType
