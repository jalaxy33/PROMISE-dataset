Name
NameSpace
namespace
String
value
String
evalName
Object
evalBaseObject
int
callstackDepth
boolean
literalThisReference
boolean
literalCallerReference
reset
evalName
value
evalBaseObject
callstackDepth
literalThisReference
literalCallerReference
Name
namespace
NameSpace
s
String
namespace
namespace
value
s
toObject
Object
callstack
CallStack
interpreter
Interpreter
return
toObject
callstack
interpreter
toObject
Object
callstack
CallStack
interpreter
Interpreter
forceClass
boolean
reset
Object
obj
while
evalName
obj
consumeNextObjectField
callstack
interpreter
forceClass
if
obj
throw
InterpreterError
return
obj
consumeNextObjectField
Object
callstack
CallStack
interpreter
Interpreter
forceClass
boolean
if
evalBaseObject
isCompound
evalName
forceClass
block
Object
obj
resolveThisFieldReference
callstack
namespace
interpreter
evalName
if
obj
VOID
block
evalName
return
evalBaseObject
obj
if
evalBaseObject
evalBaseObject
This
forceClass
block
String
varName
prefix
evalName
debug
varName
Object
obj
if
evalBaseObject
block
obj
resolveThisFieldReference
callstack
namespace
interpreter
varName
block
obj
resolveThisFieldReference
callstack
This
evalBaseObject
interpreter
varName
if
obj
VOID
block
debug
varName
namespace
evalName
suffix
evalName
return
evalBaseObject
obj
if
evalBaseObject
block
debug
evalName
Class
clas
int
i
for
forControl
i
countParts
evalName
i
if
clas
getClass
prefix
evalName
i
break
if
clas
block
evalName
suffix
evalName
countParts
evalName
i
return
evalBaseObject
ClassIdentifier
clas
debug
evalName
if
evalBaseObject
block
if
isCompound
evalName
block
evalName
return
evalBaseObject
VOID
throw
EvalError
evalName
if
evalBaseObject
NULL
throw
TargetError
value
NullPointerException
if
evalBaseObject
VOID
throw
EvalError
value
if
evalBaseObject
Primitive
throw
EvalError
value
if
evalBaseObject
ClassIdentifier
block
Class
clas
ClassIdentifier
evalBaseObject
String
field
prefix
evalName
Object
obj
try
obj
getStaticField
clas
field
catchClause
e
if
obj
block
String
iclass
getName
field
Class
c
getClass
iclass
if
c
obj
ClassIdentifier
c
if
obj
throw
EvalError
field
clas
evalName
suffix
evalName
return
evalBaseObject
obj
if
forceClass
throw
EvalError
value
String
field
prefix
evalName
if
equals
getClass
isArray
block
Object
obj
Primitive
getLength
evalBaseObject
evalName
suffix
evalName
return
evalBaseObject
obj
try
Object
obj
getObjectField
evalBaseObject
field
evalName
suffix
evalName
return
evalBaseObject
obj
catchClause
e
throw
EvalError
field
evalBaseObject
resolveThisFieldReference
Object
callstack
CallStack
thisNamespace
NameSpace
interpreter
Interpreter
varName
String
specialFieldsVisible
boolean
Object
obj
boolean
wasThis
wasCaller
if
equals
block
if
specialFieldsVisible
throw
EvalError
obj
getThis
interpreter
wasThis
if
obj
block
if
equals
obj
getSuper
getThis
interpreter
if
equals
obj
getGlobal
getThis
interpreter
if
obj
specialFieldsVisible
block
if
equals
obj
thisNamespace
if
equals
obj
getVariableNames
if
equals
obj
getMethodNames
if
equals
if
literalThisReference
obj
interpreter
throw
EvalError
if
obj
specialFieldsVisible
equals
block
if
literalThisReference
literalCallerReference
block
if
callstack
throw
InterpreterError
obj
get
getThis
interpreter
callstackDepth
throw
EvalError
wasCaller
if
obj
specialFieldsVisible
equals
block
if
literalThisReference
block
if
callstack
throw
InterpreterError
obj
callstack
throw
EvalError
if
obj
obj
getVariable
varName
literalThisReference
wasThis
literalCallerReference
wasCaller
return
obj
toClass
Class
reset
Class
clas
getClass
evalName
if
clas
block
Object
obj
try
obj
toObject
catchClause
e
if
obj
ClassIdentifier
clas
ClassIdentifier
obj
if
clas
throw
EvalError
value
return
clas
toLHS
LHS
callstack
CallStack
interpreter
Interpreter
reset
if
isCompound
evalName
block
return
LHS
namespace
evalName
Object
obj
try
while
isCompound
evalName
obj
consumeNextObjectField
callstack
interpreter
catchClause
e
throw
EvalError
e
if
obj
throw
InterpreterError
if
obj
This
block
debug
return
LHS
This
obj
evalName
if
evalName
block
try
if
obj
ClassIdentifier
block
Class
clas
ClassIdentifier
obj
return
getLHSStaticField
clas
evalName
return
getLHSObjectField
obj
evalName
catchClause
e
throw
EvalError
e
throw
InterpreterError
toLocalMethod
BshMethod
args
Object
Class
sig
getTypes
args
return
getMethod
value
sig
invokeMethod
Object
interpreter
Interpreter
args
Object
callstack
CallStack
callerInfo
SimpleNode
if
isCompound
value
return
invokeLocalMethod
interpreter
args
callstack
callerInfo
Name
targetName
getNameResolver
prefix
value
String
methodName
suffix
value
Object
obj
toObject
callstack
interpreter
if
obj
VOID
throw
EvalError
methodName
targetName
if
obj
Name
ClassIdentifier
block
if
obj
Primitive
block
if
obj
NULL
throw
TargetError
NullPointerException
error
return
invokeObjectMethod
interpreter
obj
methodName
args
callerInfo
debug
targetName
Class
clas
Name
ClassIdentifier
obj
if
clas
return
invokeStaticMethod
clas
methodName
args
throw
EvalError
targetName
invokeLocalMethod
Object
interpreter
Interpreter
args
Object
callstack
CallStack
callerInfo
SimpleNode
debug
value
BshMethod
meth
toLocalMethod
args
if
meth
return
invokeDeclaredMethod
args
interpreter
callstack
callerInfo
debug
value
String
commandName
value
InputStream
in
getResourceAsStream
commandName
Interpreter
if
in
block
debug
commandName
if
interpreter
throw
InterpreterError
eval
InputStreamReader
in
namespace
commandName
meth
toLocalMethod
args
if
meth
return
invokeDeclaredMethod
args
interpreter
callstack
callerInfo
throw
EvalError
commandName
commandName
value
Class
c
classForName
commandName
if
c
throw
EvalError
value
Object
invokeArgs
Object
length
invokeArgs
interpreter
invokeArgs
namespace
arraycopy
args
invokeArgs
length
try
return
invokeStaticMethod
c
invokeArgs
catchClause
e
debug
e
try
String
s
String
invokeStaticMethod
c
println
s
return
VOID
catchClause
e
debug
e
throw
EvalError
isCompound
boolean
value
String
return
countParts
value
countParts
int
value
String
if
value
return
int
count
int
index
while
index
indexOf
index
count
return
count
prefix
String
value
String
if
isCompound
value
return
return
prefix
value
countParts
value
prefix
String
value
String
parts
int
if
parts
return
int
count
int
index
while
index
indexOf
index
count
parts
block
return
index
value
substring
index
suffix
String
name
String
if
isCompound
name
return
return
suffix
name
countParts
name
suffix
String
value
String
parts
int
if
parts
return
int
count
int
index
length
while
index
lastIndexOf
index
count
parts
block
return
index
value
substring
index
toString
String
return
value
ClassIdentifier
Class
clas
ClassIdentifier
clas
Class
clas
clas
getTargetClass
Class
return
clas
toString
String
return
getName
java
io
Serializable
