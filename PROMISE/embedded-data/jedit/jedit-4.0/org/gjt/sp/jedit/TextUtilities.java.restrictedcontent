TextUtilities
getTokenAtOffset
Token
tokens
Token
offset
int
if
offset
id
END
return
tokens
int
tokenListOffset
for
forControl
block
if
id
END
throw
ArrayIndexOutOfBoundsException
if
tokenListOffset
length
offset
return
tokens
block
tokenListOffset
length
tokens
next
findMatchingBracket
int
buffer
Buffer
line
int
offset
int
return
findMatchingBracket
buffer
line
offset
getLineCount
findMatchingBracket
int
buffer
Buffer
line
int
offset
int
startLine
int
endLine
int
if
offset
offset
getLineLength
line
block
throw
ArrayIndexOutOfBoundsException
offset
getLineLength
line
Segment
lineText
Segment
getLineText
line
lineText
char
c
array
offset
offset
char
cprime
boolean
direction
switch
c
case
cprime
direction
break
case
cprime
direction
break
case
cprime
direction
break
case
cprime
direction
break
case
cprime
direction
break
case
cprime
direction
break
case
return
int
count
Buffer
TokenList
tokenList
markTokens
line
byte
idOfBracket
getTokenAtOffset
id
getFirstToken
offset
boolean
haveTokens
if
direction
block
offset
for
forControl
block
for
forControl
int
i
offset
i
count
i
block
char
ch
array
offset
i
if
ch
c
block
if
haveTokens
block
tokenList
markTokens
line
haveTokens
if
getTokenAtOffset
id
getFirstToken
i
idOfBracket
count
if
ch
cprime
block
if
haveTokens
block
tokenList
markTokens
line
haveTokens
if
getTokenAtOffset
id
getFirstToken
i
idOfBracket
block
count
if
count
return
getLineStartOffset
line
i
line
if
line
endLine
break
getLineText
line
lineText
offset
haveTokens
block
offset
for
forControl
block
for
forControl
int
i
offset
i
i
block
char
ch
array
offset
i
if
ch
c
block
if
haveTokens
block
tokenList
markTokens
line
haveTokens
if
getTokenAtOffset
id
getFirstToken
i
idOfBracket
count
if
ch
cprime
block
if
haveTokens
block
tokenList
markTokens
line
haveTokens
if
getTokenAtOffset
id
getFirstToken
i
idOfBracket
block
count
if
count
return
getLineStartOffset
line
i
line
if
line
startLine
break
getLineText
line
lineText
offset
count
haveTokens
return
findWordStart
int
line
String
pos
int
noWordSep
String
char
ch
charAt
pos
if
noWordSep
noWordSep
int
type
if
isWhitespace
ch
type
WHITESPACE
if
isLetterOrDigit
ch
indexOf
ch
type
WORD_CHAR
type
SYMBOL
int
whiteSpaceEnd
for
forControl
int
i
pos
i
i
block
ch
charAt
i
switch
type
case
if
isWhitespace
ch
break
return
i
case
if
isLetterOrDigit
ch
indexOf
ch
block
break
return
i
case
if
isWhitespace
ch
block
return
i
if
isLetterOrDigit
ch
indexOf
ch
block
return
i
block
break
return
whiteSpaceEnd
findWordEnd
int
line
String
pos
int
noWordSep
String
if
pos
pos
char
ch
charAt
pos
if
noWordSep
noWordSep
int
type
if
isWhitespace
ch
type
WHITESPACE
if
isLetterOrDigit
ch
indexOf
ch
type
WORD_CHAR
type
SYMBOL
boolean
seenWhiteSpace
for
forControl
int
i
pos
i
length
i
block
ch
charAt
i
switch
type
case
if
isWhitespace
ch
break
return
i
case
if
isLetterOrDigit
ch
indexOf
ch
block
break
return
i
case
if
isWhitespace
ch
block
return
i
if
isLetterOrDigit
ch
indexOf
ch
return
i
block
break
return
length
regionMatches
boolean
ignoreCase
boolean
text
Segment
offset
int
match
char
int
length
offset
length
char
textArray
array
if
length
offset
count
return
for
forControl
int
i
offset
j
i
length
i
j
block
char
c1
textArray
i
char
c2
match
j
if
ignoreCase
block
c1
toUpperCase
c1
c2
toUpperCase
c2
if
c1
c2
return
return
spacesToTabs
String
in
String
tabSize
int
StringBuffer
buf
StringBuffer
int
width
int
whitespace
for
forControl
int
i
i
length
i
block
switch
charAt
i
case
whitespace
width
break
case
int
tab
tabSize
width
tabSize
width
tab
whitespace
tab
break
case
if
whitespace
block
append
createWhiteSpace
whitespace
tabSize
whitespace
width
append
break
case
if
whitespace
block
append
createWhiteSpace
whitespace
tabSize
whitespace
append
charAt
i
width
break
if
whitespace
block
append
createWhiteSpace
whitespace
tabSize
return
toString
tabsToSpaces
String
in
String
tabSize
int
StringBuffer
buf
StringBuffer
int
width
for
forControl
int
i
i
length
i
block
switch
charAt
i
case
int
count
tabSize
width
tabSize
width
count
while
count
append
break
case
width
append
charAt
i
break
case
width
append
charAt
i
break
return
toString
format
String
text
String
maxLineLength
int
StringBuffer
buf
StringBuffer
StringBuffer
word
StringBuffer
int
lineLength
boolean
newline
boolean
space
char
chars
toCharArray
for
forControl
int
i
i
length
i
block
char
c
chars
i
switch
c
case
if
i
length
i
block
if
lineLength
length
maxLineLength
append
if
space
length
append
append
word
setLength
append
newline
space
break
if
newline
block
if
lineLength
length
maxLineLength
append
if
space
length
append
append
word
setLength
append
newline
space
lineLength
break
newline
case
if
lineLength
length
maxLineLength
block
append
lineLength
newline
if
space
lineLength
length
block
append
lineLength
space
space
append
word
lineLength
length
setLength
break
case
newline
if
lineLength
space
append
c
break
if
lineLength
length
maxLineLength
append
if
space
length
append
append
word
return
toString
int
MIXED
int
LOWER_CASE
int
UPPER_CASE
int
TITLE_CASE
getStringCase
int
str
String
if
length
return
MIXED
int
state
char
ch
charAt
if
isLetter
ch
block
if
isUpperCase
ch
state
UPPER_CASE
state
LOWER_CASE
for
forControl
int
i
i
length
i
block
ch
charAt
i
if
isLetter
ch
continue
switch
state
case
if
isLowerCase
ch
block
if
i
state
TITLE_CASE
return
MIXED
break
case
if
isUpperCase
ch
return
MIXED
break
return
state
toTitleCase
String
str
String
if
length
return
str
block
return
toUpperCase
charAt
substring
toLowerCase
int
WHITESPACE
int
WORD_CHAR
int
SYMBOL
