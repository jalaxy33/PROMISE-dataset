Primitive
Hashtable
wrapperMap
Hashtable
put
TYPE
Boolean
put
TYPE
Byte
put
TYPE
Short
put
TYPE
Character
put
TYPE
Integer
put
TYPE
Long
put
TYPE
Float
put
TYPE
Double
put
Boolean
TYPE
put
Byte
TYPE
put
Short
TYPE
put
Character
TYPE
put
Integer
TYPE
put
Long
TYPE
put
Float
TYPE
put
Double
TYPE
Object
value
Special
Special
Special
NULL_VALUE
Special
Special
VOID_TYPE
Special
java
io
Serializable
Primitive
NULL
Primitive
NULL_VALUE
Primitive
VOID
Primitive
VOID_TYPE
Primitive
value
Object
if
value
throw
InterpreterError
if
value
NULL_VALUE
value
VOID_TYPE
isWrapperType
getClass
throw
InterpreterError
value
value
value
Primitive
value
boolean
Boolean
value
Primitive
value
byte
Byte
value
Primitive
value
short
Short
value
Primitive
value
char
Character
value
Primitive
value
int
Integer
value
Primitive
value
long
Long
value
Primitive
value
float
Float
value
Primitive
value
double
Double
value
getValue
Object
if
value
NULL_VALUE
return
if
value
VOID_TYPE
throw
InterpreterError
return
value
toString
String
if
value
NULL_VALUE
return
if
value
VOID_TYPE
return
return
toString
getType
Class
if
VOID
return
TYPE
if
NULL
return
return
unboxType
getClass
binaryOperation
Object
obj1
Object
obj2
Object
kind
int
if
obj1
NULL
obj2
NULL
throw
UtilEvalError
if
obj1
VOID
obj2
VOID
throw
UtilEvalError
Class
lhsOrgType
getClass
Class
rhsOrgType
getClass
if
obj1
Primitive
obj1
Primitive
obj1
if
obj2
Primitive
obj2
Primitive
obj2
Object
operands
promotePrimitives
obj1
obj2
Object
lhs
operands
Object
rhs
operands
if
getClass
getClass
throw
UtilEvalError
getClass
getClass
Object
result
try
result
binaryOperationImpl
lhs
rhs
kind
catchClause
e
throw
UtilTargetError
e
if
lhsOrgType
Primitive
rhsOrgType
Primitive
result
Boolean
return
Primitive
result
return
result
binaryOperationImpl
Object
lhs
Object
rhs
Object
kind
int
if
lhs
Boolean
return
booleanBinaryOperation
Boolean
lhs
Boolean
rhs
kind
if
lhs
Integer
return
intBinaryOperation
Integer
lhs
Integer
rhs
kind
if
lhs
Long
return
longBinaryOperation
Long
lhs
Long
rhs
kind
if
lhs
Float
return
floatBinaryOperation
Float
lhs
Float
rhs
kind
if
lhs
Double
return
doubleBinaryOperation
Double
lhs
Double
rhs
kind
throw
UtilEvalError
booleanBinaryOperation
Boolean
B1
Boolean
B2
Boolean
kind
int
boolean
lhs
booleanValue
boolean
rhs
booleanValue
switch
kind
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
throw
InterpreterError
longBinaryOperation
Object
L1
Long
L2
Long
kind
int
long
lhs
longValue
long
rhs
longValue
switch
kind
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
return
Long
lhs
rhs
case
throw
InterpreterError
intBinaryOperation
Object
I1
Integer
I2
Integer
kind
int
int
lhs
intValue
int
rhs
intValue
switch
kind
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
return
Integer
lhs
rhs
case
throw
InterpreterError
doubleBinaryOperation
Object
D1
Double
D2
Double
kind
int
double
lhs
doubleValue
double
rhs
doubleValue
switch
kind
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Double
lhs
rhs
case
return
Double
lhs
rhs
case
return
Double
lhs
rhs
case
return
Double
lhs
rhs
case
return
Double
lhs
rhs
case
throw
UtilEvalError
case
throw
InterpreterError
floatBinaryOperation
Object
F1
Float
F2
Float
kind
int
float
lhs
floatValue
float
rhs
floatValue
switch
kind
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Boolean
lhs
rhs
case
return
Float
lhs
rhs
case
return
Float
lhs
rhs
case
return
Float
lhs
rhs
case
return
Float
lhs
rhs
case
return
Float
lhs
rhs
case
throw
UtilEvalError
case
throw
InterpreterError
promoteToInteger
Object
wrapper
Object
if
wrapper
Character
return
Integer
Character
wrapper
if
wrapper
Byte
wrapper
Short
return
Integer
Number
wrapper
return
wrapper
promotePrimitives
Object
lhs
Object
rhs
Object
lhs
promoteToInteger
lhs
rhs
promoteToInteger
rhs
if
lhs
Number
rhs
Number
block
Number
lnum
Number
lhs
Number
rnum
Number
rhs
boolean
b
if
b
lnum
Double
rnum
Double
block
if
b
rhs
Double
doubleValue
lhs
Double
doubleValue
if
b
lnum
Float
rnum
Float
block
if
b
rhs
Float
floatValue
lhs
Float
floatValue
if
b
lnum
Long
rnum
Long
block
if
b
rhs
Long
longValue
lhs
Long
longValue
return
Object
lhs
rhs
unaryOperation
Primitive
val
Primitive
kind
int
if
val
NULL
throw
UtilEvalError
if
val
VOID
throw
UtilEvalError
Class
operandType
getType
Object
operand
promoteToInteger
getValue
if
operand
Boolean
return
Primitive
booleanUnaryOperation
Boolean
operand
kind
if
operand
Integer
block
int
result
intUnaryOperation
Integer
operand
kind
if
kind
INCR
kind
DECR
block
if
operandType
TYPE
return
Primitive
byte
result
if
operandType
TYPE
return
Primitive
short
result
if
operandType
TYPE
return
Primitive
char
result
return
Primitive
result
if
operand
Long
return
Primitive
longUnaryOperation
Long
operand
kind
if
operand
Float
return
Primitive
floatUnaryOperation
Float
operand
kind
if
operand
Double
return
Primitive
doubleUnaryOperation
Double
operand
kind
throw
InterpreterError
booleanUnaryOperation
boolean
B
Boolean
kind
int
boolean
operand
booleanValue
switch
kind
case
return
operand
case
throw
UtilEvalError
intUnaryOperation
int
I
Integer
kind
int
int
operand
intValue
switch
kind
case
return
operand
case
return
operand
case
return
operand
case
return
operand
case
return
operand
case
throw
InterpreterError
longUnaryOperation
long
L
Long
kind
int
long
operand
longValue
switch
kind
case
return
operand
case
return
operand
case
return
operand
case
return
operand
case
return
operand
case
throw
InterpreterError
floatUnaryOperation
float
F
Float
kind
int
float
operand
floatValue
switch
kind
case
return
operand
case
return
operand
case
throw
InterpreterError
doubleUnaryOperation
double
D
Double
kind
int
double
operand
doubleValue
switch
kind
case
return
operand
case
return
operand
case
throw
InterpreterError
intValue
int
if
value
Number
return
Number
value
throw
UtilEvalError
booleanValue
boolean
if
value
Boolean
return
Boolean
value
throw
UtilEvalError
isNumber
boolean
return
value
Boolean
NULL
VOID
numberValue
Number
Object
value
value
if
value
Character
value
Integer
Character
value
if
value
Number
return
Number
value
throw
UtilEvalError
equals
boolean
obj
Object
if
obj
Primitive
return
Primitive
obj
return
hashCode
int
return
value
hashCode
unwrap
Object
obj
Object
if
obj
VOID
return
if
obj
Primitive
return
Primitive
obj
return
obj
unwrap
Object
args
Object
Object
oa
Object
length
for
forControl
int
i
i
length
i
oa
i
unwrap
args
i
return
oa
wrap
Object
args
Object
paramTypes
Class
if
args
return
Object
oa
Object
length
for
forControl
int
i
i
length
i
oa
i
wrap
args
i
paramTypes
i
return
oa
wrap
Object
value
Object
type
Class
if
type
TYPE
return
VOID
if
value
return
NULL
if
isPrimitive
return
Primitive
value
return
value
getDefaultValue
Primitive
type
Class
if
type
isPrimitive
return
NULL
if
type
TYPE
return
Primitive
try
return
castToType
type
CAST
Primitive
int
catchClause
e
throw
InterpreterError
boxType
Class
primitiveType
Class
Class
c
Class
get
primitiveType
if
c
return
c
throw
InterpreterError
primitiveType
unboxType
Class
wrapperType
Class
Class
c
Class
get
wrapperType
if
c
return
c
throw
InterpreterError
wrapperType
castToType
Primitive
toType
Class
operation
int
return
castPrimitive
toType
getType
operation
castPrimitive
Primitive
toType
Class
fromType
Class
fromValue
Primitive
checkOnly
boolean
operation
int
if
checkOnly
fromValue
throw
InterpreterError
if
checkOnly
fromValue
throw
InterpreterError
if
fromType
isPrimitive
throw
InterpreterError
fromType
if
fromValue
NULL
fromType
throw
InterpreterError
if
fromValue
VOID
fromType
TYPE
throw
InterpreterError
if
fromType
TYPE
if
checkOnly
return
INVALID_CAST
throw
castError
normalizeClassName
toType
operation
Object
value
if
fromValue
value
getValue
if
isPrimitive
block
if
fromType
if
checkOnly
return
INVALID_CAST
throw
castError
toType
operation
block
if
fromType
return
checkOnly
VALID_CAST
NULL
if
checkOnly
return
INVALID_CAST
throw
castError
toType
operation
if
fromType
TYPE
block
if
toType
TYPE
if
checkOnly
return
INVALID_CAST
throw
castError
toType
fromType
operation
return
checkOnly
VALID_CAST
fromValue
if
operation
ASSIGNMENT
isJavaAssignable
toType
fromType
block
if
checkOnly
return
INVALID_CAST
throw
castError
toType
fromType
operation
return
checkOnly
VALID_CAST
Primitive
castWrapper
toType
value
isWrapperType
boolean
type
Class
return
get
type
isPrimitive
castWrapper
Object
toType
Class
value
Object
if
isPrimitive
throw
InterpreterError
toType
if
value
throw
InterpreterError
if
value
Boolean
block
if
toType
TYPE
throw
InterpreterError
return
value
if
value
Character
value
Integer
Character
value
if
value
Number
throw
InterpreterError
Number
number
Number
value
if
toType
TYPE
return
Byte
byteValue
if
toType
TYPE
return
Short
shortValue
if
toType
TYPE
return
Character
char
intValue
if
toType
TYPE
return
Integer
intValue
if
toType
TYPE
return
Long
longValue
if
toType
TYPE
return
Float
floatValue
if
toType
TYPE
return
Double
doubleValue
throw
InterpreterError
ParserConstants
java
io
Serializable
