BSHForStatement
boolean
hasForInit
boolean
hasExpression
boolean
hasForUpdate
SimpleNode
forInit
SimpleNode
expression
SimpleNode
forUpdate
SimpleNode
statement
boolean
parsed
BSHForStatement
id
int
id
eval
Object
callstack
CallStack
interpreter
Interpreter
int
i
if
hasForInit
forInit
SimpleNode
jjtGetChild
i
if
hasExpression
expression
SimpleNode
jjtGetChild
i
if
hasForUpdate
forUpdate
SimpleNode
jjtGetChild
i
if
i
jjtGetNumChildren
statement
SimpleNode
jjtGetChild
i
NameSpace
enclosingNameSpace
top
BlockNameSpace
forNameSpace
BlockNameSpace
enclosingNameSpace
swap
forNameSpace
if
hasForInit
eval
callstack
interpreter
Object
returnControl
VOID
while
block
if
hasExpression
block
boolean
cond
evaluateCondition
expression
callstack
interpreter
if
cond
break
boolean
breakout
if
statement
block
Object
ret
eval
callstack
interpreter
if
ret
ReturnControl
block
switch
ReturnControl
ret
case
returnControl
ret
breakout
break
case
break
case
breakout
break
if
breakout
break
if
hasForUpdate
eval
callstack
interpreter
swap
enclosingNameSpace
return
returnControl
SimpleNode
ParserConstants
