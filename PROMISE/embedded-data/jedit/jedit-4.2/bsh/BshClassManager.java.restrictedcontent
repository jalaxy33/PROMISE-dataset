BshClassManager
Object
NOVALUE
Object
Interpreter
declaringInterpreter
ClassLoader
externalClassLoader
Hashtable
absoluteClassCache
Hashtable
Hashtable
absoluteNonClasses
Hashtable
Hashtable
resolvedObjectMethods
Hashtable
Hashtable
resolvedStaticMethods
Hashtable
Hashtable
definingClasses
Hashtable
Hashtable
definingClassesBaseNames
Hashtable
createClassManager
BshClassManager
interpreter
Interpreter
BshClassManager
manager
if
classExists
classExists
classExists
try
Class
clas
forName
manager
BshClassManager
newInstance
catchClause
e
throw
InterpreterError
e
manager
BshClassManager
if
interpreter
interpreter
Interpreter
declaringInterpreter
interpreter
return
manager
classExists
boolean
name
String
return
classForName
name
classForName
Class
name
String
if
isClassBeingDefined
name
throw
InterpreterError
name
Class
clas
try
clas
plainClassForName
name
catchClause
e
if
clas
clas
loadSourceClass
name
return
clas
loadSourceClass
Class
name
String
String
fileName
replace
InputStream
in
getResourceAsStream
fileName
if
in
return
try
println
fileName
eval
InputStreamReader
in
catchClause
e
println
e
try
return
plainClassForName
name
catchClause
e
println
name
return
plainClassForName
Class
name
String
Class
c
try
if
externalClassLoader
c
loadClass
name
c
forName
name
cacheClassInfo
name
c
catchClause
e
throw
noClassDefFound
name
e
return
c
getResource
URL
path
String
if
externalClassLoader
block
return
getResource
substring
return
getResource
path
Interpreter
getResourceAsStream
InputStream
path
String
if
externalClassLoader
block
return
getResourceAsStream
substring
return
getResourceAsStream
path
Interpreter
cacheClassInfo
name
String
value
Class
if
value
put
name
value
put
name
NOVALUE
cacheResolvedMethod
clas
Class
types
Class
method
Method
if
DEBUG
debug
clas
method
SignatureKey
sk
SignatureKey
clas
getName
types
if
isStatic
getModifiers
put
sk
method
put
sk
method
getResolvedMethod
Method
clas
Class
methodName
String
types
Class
onlyStatic
boolean
SignatureKey
sk
SignatureKey
clas
methodName
types
Method
method
Method
get
sk
if
method
onlyStatic
method
Method
get
sk
if
DEBUG
block
if
method
debug
clas
methodName
debug
clas
method
return
method
clearCaches
absoluteNonClasses
Hashtable
absoluteClassCache
Hashtable
resolvedObjectMethods
Hashtable
resolvedStaticMethods
Hashtable
setClassLoader
externalCL
ClassLoader
externalClassLoader
externalCL
classLoaderChanged
addClassPath
path
URL
reset
clearCaches
setClassPath
cp
URL
throw
cmUnavailable
reloadAllClasses
throw
cmUnavailable
reloadClasses
classNames
String
throw
cmUnavailable
reloadPackage
pack
String
throw
cmUnavailable
doSuperImport
throw
cmUnavailable
hasSuperImport
boolean
return
getClassNameByUnqName
String
name
String
throw
cmUnavailable
addListener
l
Listener
removeListener
l
Listener
dump
pw
PrintWriter
println
definingClass
className
String
String
baseName
suffix
className
int
i
indexOf
if
i
baseName
substring
i
String
cur
String
get
baseName
if
cur
throw
InterpreterError
className
className
cur
put
className
NOVALUE
put
baseName
className
isClassBeingDefined
boolean
className
String
return
get
className
getClassBeingDefined
String
className
String
String
baseName
suffix
className
return
String
get
baseName
doneDefiningClass
className
String
String
baseName
suffix
className
remove
className
remove
baseName
defineClass
Class
name
String
code
byte
ClassLoader
cl
getClass
getClassLoader
Class
clas
try
clas
Class
invokeObjectMethod
cl
Object
name
code
Primitive
int
Primitive
length
Interpreter
CallStack
SimpleNode
catchClause
e
printStackTrace
throw
InterpreterError
e
remove
name
return
clas
classLoaderChanged
noClassDefFound
Error
className
String
e
Error
return
NoClassDefFoundError
className
toString
cmUnavailable
UtilEvalError
return
Capabilities
Unavailable
Listener
classLoaderChanged
SignatureKey
Class
clas
Class
types
String
methodName
int
hashCode
SignatureKey
clas
Class
methodName
String
types
Class
clas
clas
methodName
methodName
types
types
hashCode
int
if
hashCode
block
hashCode
hashCode
hashCode
if
types
return
hashCode
for
forControl
int
i
i
length
i
block
int
hc
types
i
types
i
hashCode
hashCode
hashCode
i
hc
return
hashCode
equals
boolean
o
Object
SignatureKey
target
SignatureKey
o
if
types
return
types
if
clas
clas
return
if
equals
methodName
return
if
length
length
return
for
forControl
int
i
i
length
i
block
if
types
i
block
if
types
i
return
if
types
i
equals
types
i
return
return
