Name
NameSpace
namespace
String
value
String
evalName
String
lastEvalName
String
FINISHED
Object
evalBaseObject
int
callstackDepth
Class
asClass
Class
classOfStaticMethod
reset
evalName
value
evalBaseObject
callstackDepth
Name
namespace
NameSpace
s
String
namespace
namespace
value
s
toObject
Object
callstack
CallStack
interpreter
Interpreter
return
toObject
callstack
interpreter
toObject
Object
callstack
CallStack
interpreter
Interpreter
forceClass
boolean
reset
Object
obj
while
evalName
obj
consumeNextObjectField
callstack
interpreter
forceClass
if
obj
throw
InterpreterError
return
obj
completeRound
Object
lastEvalName
String
nextEvalName
String
returnObject
Object
if
returnObject
throw
InterpreterError
lastEvalName
lastEvalName
lastEvalName
evalName
nextEvalName
evalBaseObject
returnObject
return
returnObject
consumeNextObjectField
Object
callstack
CallStack
interpreter
Interpreter
forceClass
boolean
autoAllocateThis
boolean
if
evalBaseObject
isCompound
evalName
forceClass
block
Object
obj
resolveThisFieldReference
callstack
namespace
interpreter
evalName
if
obj
VOID
return
completeRound
evalName
FINISHED
obj
String
varName
prefix
evalName
if
evalBaseObject
evalBaseObject
This
forceClass
block
if
DEBUG
debug
varName
Object
obj
if
evalBaseObject
block
obj
resolveThisFieldReference
callstack
namespace
interpreter
varName
block
obj
resolveThisFieldReference
callstack
This
evalBaseObject
interpreter
varName
if
obj
VOID
block
if
DEBUG
debug
varName
namespace
return
completeRound
varName
suffix
evalName
obj
if
evalBaseObject
block
if
DEBUG
debug
evalName
Class
clas
int
i
String
className
for
forControl
i
countParts
evalName
i
block
className
prefix
evalName
i
if
clas
getClass
className
break
if
clas
block
return
completeRound
className
suffix
evalName
countParts
evalName
i
ClassIdentifier
clas
if
DEBUG
debug
evalName
if
evalBaseObject
evalBaseObject
This
forceClass
autoAllocateThis
block
NameSpace
targetNameSpace
evalBaseObject
namespace
This
evalBaseObject
Object
obj
getThis
interpreter
NameSpace
targetNameSpace
varName
setVariable
varName
obj
return
completeRound
varName
suffix
evalName
obj
if
evalBaseObject
block
if
isCompound
evalName
block
return
completeRound
evalName
FINISHED
VOID
throw
UtilEvalError
evalName
if
evalBaseObject
NULL
throw
UtilTargetError
NullPointerException
value
if
evalBaseObject
VOID
throw
UtilEvalError
value
if
evalBaseObject
Primitive
throw
UtilEvalError
value
if
evalBaseObject
ClassIdentifier
block
Class
clas
ClassIdentifier
evalBaseObject
String
field
prefix
evalName
if
equals
block
NameSpace
ns
namespace
while
ns
block
if
classInstance
getClass
clas
return
completeRound
field
suffix
evalName
classInstance
ns
getParent
throw
UtilEvalError
clas
Object
obj
try
if
DEBUG
debug
clas
field
obj
getStaticField
clas
field
catchClause
e
if
DEBUG
debug
e
if
obj
block
String
iclass
getName
field
Class
c
getClass
iclass
if
c
obj
ClassIdentifier
c
if
obj
throw
UtilEvalError
field
clas
return
completeRound
field
suffix
evalName
obj
if
forceClass
throw
UtilEvalError
value
String
field
prefix
evalName
if
equals
getClass
isArray
block
Object
obj
Primitive
getLength
evalBaseObject
return
completeRound
field
suffix
evalName
obj
try
Object
obj
getObjectField
evalBaseObject
field
return
completeRound
field
suffix
evalName
obj
catchClause
e
throw
UtilEvalError
field
evalBaseObject
resolveThisFieldReference
Object
callstack
CallStack
thisNameSpace
NameSpace
interpreter
Interpreter
varName
String
specialFieldsVisible
boolean
if
equals
block
if
specialFieldsVisible
throw
UtilEvalError
This
ths
getThis
interpreter
thisNameSpace
getNameSpace
Object
result
ths
NameSpace
classNameSpace
getClassNameSpace
thisNameSpace
if
classNameSpace
block
if
isCompound
evalName
result
getThis
interpreter
result
getClassInstance
return
result
if
equals
block
This
ths
getSuper
interpreter
thisNameSpace
getNameSpace
if
getParent
getParent
isClass
ths
getParent
getThis
interpreter
return
ths
Object
obj
if
equals
obj
getGlobal
interpreter
if
obj
specialFieldsVisible
block
if
equals
obj
thisNameSpace
if
equals
obj
getVariableNames
if
equals
obj
getMethodNames
if
equals
if
equals
obj
interpreter
throw
UtilEvalError
if
obj
specialFieldsVisible
equals
block
if
equals
equals
block
if
callstack
throw
InterpreterError
obj
get
getThis
interpreter
callstackDepth
throw
UtilEvalError
return
obj
if
obj
specialFieldsVisible
equals
block
if
equals
block
if
callstack
throw
InterpreterError
obj
callstack
throw
UtilEvalError
if
obj
obj
getVariable
varName
if
obj
throw
InterpreterError
varName
return
obj
getClassNameSpace
NameSpace
thisNameSpace
NameSpace
NameSpace
classNameSpace
if
isClass
return
thisNameSpace
if
isMethod
getParent
getParent
isClass
return
getParent
return
toClass
Class
if
asClass
return
asClass
reset
if
equals
return
asClass
Class
clas
getClass
evalName
if
clas
block
Object
obj
try
obj
toObject
catchClause
e
if
obj
ClassIdentifier
clas
ClassIdentifier
obj
if
clas
throw
ClassNotFoundException
value
asClass
clas
return
asClass
toLHS
LHS
callstack
CallStack
interpreter
Interpreter
reset
LHS
lhs
if
isCompound
evalName
block
if
equals
throw
UtilEvalError
lhs
LHS
namespace
evalName
return
lhs
Object
obj
try
while
evalName
isCompound
evalName
block
obj
consumeNextObjectField
callstack
interpreter
catchClause
e
throw
UtilEvalError
getMessage
if
evalName
obj
ClassIdentifier
throw
UtilEvalError
value
if
obj
throw
UtilEvalError
value
if
obj
This
block
if
equals
equals
equals
equals
throw
UtilEvalError
evalName
debug
boolean
localVar
equals
return
LHS
This
obj
evalName
localVar
if
evalName
block
try
if
obj
ClassIdentifier
block
Class
clas
ClassIdentifier
obj
lhs
getLHSStaticField
clas
evalName
return
lhs
block
lhs
getLHSObjectField
obj
evalName
return
lhs
catchClause
e
throw
UtilEvalError
e
throw
InterpreterError
invokeMethod
Object
interpreter
Interpreter
args
Object
callstack
CallStack
callerInfo
SimpleNode
String
methodName
suffix
value
BshClassManager
bcm
getClassManager
NameSpace
namespace
top
if
classOfStaticMethod
block
return
invokeStaticMethod
bcm
classOfStaticMethod
methodName
args
if
isCompound
value
return
invokeLocalMethod
interpreter
args
callstack
callerInfo
String
prefix
prefix
value
if
equals
countParts
value
block
NameSpace
classNameSpace
getClassNameSpace
namespace
if
classNameSpace
block
Object
instance
getClassInstance
return
getClassGenerator
invokeSuperclassMethod
bcm
instance
methodName
args
Name
targetName
getNameResolver
prefix
Object
obj
toObject
callstack
interpreter
if
obj
VOID
throw
UtilEvalError
methodName
targetName
if
obj
ClassIdentifier
block
if
obj
Primitive
block
if
obj
NULL
throw
UtilTargetError
NullPointerException
if
DEBUG
debug
return
invokeObjectMethod
obj
methodName
args
interpreter
callstack
callerInfo
if
DEBUG
debug
targetName
Class
clas
ClassIdentifier
obj
classOfStaticMethod
clas
if
clas
return
invokeStaticMethod
bcm
clas
methodName
args
throw
UtilEvalError
targetName
invokeLocalMethod
Object
interpreter
Interpreter
args
Object
callstack
CallStack
callerInfo
SimpleNode
if
DEBUG
debug
value
if
interpreter
throw
InterpreterError
String
commandName
value
Class
argTypes
getTypes
args
BshMethod
meth
try
meth
getMethod
commandName
argTypes
catchClause
e
throw
toEvalError
callerInfo
callstack
if
meth
return
invoke
args
interpreter
callstack
callerInfo
BshClassManager
bcm
getClassManager
Object
commandObject
try
commandObject
getCommand
commandName
argTypes
interpreter
catchClause
e
throw
toEvalError
callerInfo
callstack
if
commandObject
block
BshMethod
invokeMethod
try
invokeMethod
getMethod
Class
catchClause
e
throw
toEvalError
callerInfo
callstack
if
invokeMethod
return
invoke
Object
commandName
args
interpreter
callstack
callerInfo
throw
EvalError
methodString
commandName
argTypes
callerInfo
callstack
if
commandObject
BshMethod
return
BshMethod
commandObject
if
commandObject
Class
try
return
invokeCompiledCommand
Class
commandObject
args
interpreter
callstack
catchClause
e
throw
toEvalError
callerInfo
callstack
throw
InterpreterError
isCompound
boolean
value
String
return
indexOf
countParts
int
value
String
if
value
return
int
count
int
index
while
index
indexOf
index
count
return
count
prefix
String
value
String
if
isCompound
value
return
return
prefix
value
countParts
value
prefix
String
value
String
parts
int
if
parts
return
int
count
int
index
while
index
indexOf
index
count
parts
block
return
index
value
substring
index
suffix
String
name
String
if
isCompound
name
return
return
suffix
name
countParts
name
suffix
String
value
String
parts
int
if
parts
return
int
count
int
index
length
while
index
lastIndexOf
index
count
parts
return
index
value
substring
index
toString
String
return
value
java
io
Serializable
