TokenMarker
TokenMarker
ruleSets
Hashtable
addRuleSet
rules
ParserRuleSet
put
getSetName
rules
if
getSetName
equals
mainRuleSet
rules
getMainRuleSet
ParserRuleSet
return
mainRuleSet
getRuleSet
ParserRuleSet
setName
String
return
ParserRuleSet
get
setName
getRuleSets
ParserRuleSet
return
ParserRuleSet
values
toArray
ParserRuleSet
size
markTokens
LineContext
prevContext
LineContext
tokenHandler
TokenHandler
line
Segment
tokenHandler
tokenHandler
line
line
lastOffset
offset
lineLength
count
offset
context
LineContext
if
prevContext
rules
getMainRuleSet
block
parent
parent
inRule
inRule
rules
rules
spanEndSubst
spanEndSubst
keywords
getKeywords
escaped
seenWhitespaceEnd
whitespaceEnd
offset
ParserRule
rule
int
terminateChar
getTerminateChar
boolean
terminated
for
forControl
pos
offset
pos
lineLength
pos
block
if
terminateChar
pos
offset
terminateChar
terminated
block
terminated
context
LineContext
getStandardRuleSet
getDefault
context
keywords
getKeywords
if
parent
block
rule
inRule
if
rule
block
if
checkDelegateEnd
rule
block
seenWhitespaceEnd
continue
char
ch
array
pos
rule
getRules
ch
while
rule
block
if
handleRule
rule
block
seenWhitespaceEnd
continue
rule
next
if
isWhitespace
ch
block
if
seenWhitespaceEnd
whitespaceEnd
pos
if
inRule
handleRule
inRule
handleNoWordBreak
markKeyword
if
lastOffset
pos
block
handleToken
line
getDefault
lastOffset
offset
pos
lastOffset
context
handleToken
line
getDefault
pos
offset
context
lastOffset
pos
escaped
block
if
keywords
getRuleCount
block
String
noWordSep
getNoWordSep
if
isLetterOrDigit
ch
indexOf
ch
block
if
inRule
handleRule
inRule
handleNoWordBreak
markKeyword
handleToken
line
getDefault
lastOffset
offset
context
lastOffset
pos
seenWhitespaceEnd
escaped
pos
lineLength
if
inRule
handleRule
inRule
handleNoWordBreak
markKeyword
while
parent
block
rule
inRule
if
rule
action
NO_LINE_BREAK
NO_LINE_BREAK
terminated
block
context
parent
keywords
getKeywords
inRule
break
handleToken
line
END
pos
offset
context
context
intern
setLineContext
context
return
context
Hashtable
ruleSets
ParserRuleSet
mainRuleSet
TokenHandler
tokenHandler
Segment
line
LineContext
context
KeywordMap
keywords
Segment
pattern
Segment
int
lastOffset
int
lineLength
int
pos
boolean
escaped
int
whitespaceEnd
boolean
seenWhitespaceEnd
checkDelegateEnd
boolean
rule
ParserRule
if
end
return
LineContext
tempContext
context
context
parent
keywords
getKeywords
boolean
tempEscaped
escaped
boolean
b
handleRule
rule
context
tempContext
keywords
getKeywords
if
b
tempEscaped
block
if
inRule
handleRule
inRule
markKeyword
context
LineContext
clone
handleToken
line
action
EXCLUDE_MATCH
EXCLUDE_MATCH
getDefault
token
pos
offset
count
context
keywords
getKeywords
inRule
lastOffset
pos
count
pos
count
return
if
action
NO_ESCAPE
block
ParserRule
escape
getEscapeRule
if
escape
handleRule
escape
return
return
handleRule
boolean
checkRule
ParserRule
end
boolean
if
end
block
if
toUpperCase
hashChar
toUpperCase
array
pos
block
return
int
offset
action
MARK_PREVIOUS
lastOffset
pos
int
posMatch
end
endPosMatch
startPosMatch
if
posMatch
AT_LINE_START
AT_LINE_START
block
if
offset
offset
return
if
posMatch
AT_WHITESPACE_END
AT_WHITESPACE_END
block
if
offset
whitespaceEnd
return
if
posMatch
AT_WORD_START
AT_WORD_START
block
if
offset
lastOffset
return
int
matchedChars
CharIndexedSegment
charIndexed
REMatch
match
if
end
action
MARK_FOLLOWING
block
if
action
REGEXP
end
block
if
end
block
if
spanEndSubst
array
spanEndSubst
array
end
array
start
offset
count
length
matchedChars
count
if
regionMatches
getIgnoreCase
line
pos
array
block
return
block
int
matchStart
pos
offset
charIndexed
CharIndexedSegment
line
matchStart
match
getMatch
charIndexed
REG_ANCHORINDEX
if
match
return
if
getStartIndex
throw
InternalError
block
matchedChars
getEndIndex
if
matchedChars
matchedChars
if
action
IS_ESCAPE
IS_ESCAPE
block
if
inRule
handleRule
inRule
escaped
escaped
pos
count
if
escaped
block
escaped
pos
count
if
end
block
if
inRule
handleRule
inRule
markKeyword
action
MARK_PREVIOUS
MARK_PREVIOUS
switch
action
MAJOR_ACTIONS
case
SEQ
spanEndSubst
if
action
REGEXP
block
handleTokenWithSpaces
tokenHandler
token
pos
offset
matchedChars
context
block
handleToken
line
token
pos
offset
matchedChars
context
if
delegate
block
context
LineContext
delegate
parent
keywords
getKeywords
break
case
SPAN
EOL_SPAN
inRule
checkRule
byte
tokenType
action
EXCLUDE_MATCH
EXCLUDE_MATCH
getDefault
token
if
action
REGEXP
block
handleTokenWithSpaces
tokenHandler
tokenType
pos
offset
matchedChars
context
block
handleToken
line
tokenType
pos
offset
matchedChars
context
char
spanEndSubst
if
charIndexed
end
block
spanEndSubst
substitute
match
end
spanEndSubst
spanEndSubst
context
LineContext
delegate
context
keywords
getKeywords
break
case
MARK_FOLLOWING
handleToken
line
action
EXCLUDE_MATCH
EXCLUDE_MATCH
getDefault
token
pos
offset
count
context
spanEndSubst
inRule
checkRule
break
case
MARK_PREVIOUS
spanEndSubst
if
action
EXCLUDE_MATCH
EXCLUDE_MATCH
block
if
pos
lastOffset
block
handleToken
line
token
lastOffset
offset
pos
lastOffset
context
handleToken
line
getDefault
pos
offset
count
context
block
handleToken
line
token
lastOffset
offset
pos
lastOffset
count
context
break
case
throw
InternalError
pos
matchedChars
lastOffset
pos
if
action
MARK_FOLLOWING
block
if
pos
lastOffset
block
handleToken
line
token
lastOffset
offset
pos
lastOffset
context
lastOffset
pos
inRule
return
handleNoWordBreak
if
parent
block
ParserRule
rule
inRule
if
rule
action
NO_WORD_BREAK
block
if
pos
lastOffset
block
handleToken
line
token
lastOffset
offset
pos
lastOffset
context
lastOffset
pos
context
parent
keywords
getKeywords
inRule
handleTokenWithSpaces
tokenHandler
TokenHandler
tokenType
byte
start
int
len
int
context
LineContext
int
last
start
int
end
start
len
for
forControl
int
i
start
i
end
i
block
if
isWhitespace
array
i
offset
block
if
last
i
block
handleToken
line
tokenType
last
i
last
context
handleToken
line
tokenType
i
context
last
i
if
last
end
block
handleToken
line
tokenType
last
end
last
context
markKeyword
addRemaining
boolean
int
len
pos
lastOffset
if
len
return
if
getHighlightDigits
block
boolean
digit
boolean
mixed
for
forControl
int
i
lastOffset
i
pos
i
block
char
ch
array
i
if
isDigit
ch
digit
mixed
if
mixed
block
RE
digitRE
getDigitRegexp
if
digit
block
if
digitRE
block
digit
block
CharIndexedSegment
seg
CharIndexedSegment
line
int
oldCount
count
int
oldOffset
offset
offset
lastOffset
count
len
if
isMatch
seg
digit
offset
oldOffset
count
oldCount
if
digit
block
handleToken
line
DIGIT
lastOffset
offset
len
context
lastOffset
pos
return
if
keywords
block
byte
id
lookup
line
lastOffset
len
if
id
NULL
block
handleToken
line
id
lastOffset
offset
len
context
lastOffset
pos
return
if
addRemaining
block
handleToken
line
getDefault
lastOffset
offset
len
context
lastOffset
pos
substitute
char
match
REMatch
end
char
StringBuffer
buf
StringBuffer
for
forControl
int
i
i
length
i
block
char
ch
end
i
if
ch
block
if
i
length
append
ch
block
char
digit
end
i
if
isDigit
digit
append
ch
block
append
toString
digit
i
append
ch
char
returnValue
char
length
getChars
length
returnValue
return
returnValue
LineContext
Hashtable
intern
Hashtable
LineContext
parent
ParserRule
inRule
ParserRuleSet
rules
char
spanEndSubst
LineContext
rs
ParserRuleSet
lc
LineContext
rules
rs
parent
lc
LineContext
clone
LineContext
intern
LineContext
Object
obj
get
if
obj
block
put
return
return
LineContext
obj
hashCode
int
if
inRule
return
hashCode
if
rules
return
hashCode
return
equals
boolean
obj
Object
if
obj
LineContext
block
LineContext
lc
LineContext
obj
return
inRule
inRule
rules
rules
objectsEqual
parent
parent
charArraysEqual
spanEndSubst
spanEndSubst
return
clone
Object
LineContext
lc
LineContext
inRule
inRule
rules
rules
parent
parent
LineContext
clone
spanEndSubst
spanEndSubst
return
lc
charArraysEqual
boolean
c1
char
c2
char
if
c1
return
c2
if
c2
return
c1
if
length
length
return
for
forControl
int
i
i
length
i
block
if
c1
i
c2
i
return
return
