AbstractDatabase
Logger
logger
getLogger
getName
AbstractDatabase
int
maxTableNameLength
int
maxColumnNameLength
int
sqlStateType
Map
typesByTypeID
HashMap
Map
locks
HashMap
ThreadLocal
transactionedConnection
ThreadLocal
ConnectionPool
pool
AbstractDatabase
init
dataSource
DataSource
pool
ConnectionPool
dataSource
initDatabaseInfo
setMaxConnections
maxConnections
int
pool
setMaxConnections
maxConnections
setConnectionTimeout
timeout
int
pool
setConnectionTimeout
timeout
getMaxTableNameLength
int
return
maxTableNameLength
getMaxColumnNameLength
int
return
maxColumnNameLength
initDatabaseInfo
ConnectionPool
ConnectionWrapper
cw
getConnectionWrapper
try
Connection
c
getConnection
DatabaseMetaData
dmd
getMetaData
int
mtnl
getMaxTableNameLength
int
mcnl
getMaxColumnNameLength
maxTableNameLength
mtnl
MAX_VALUE
mtnl
maxColumnNameLength
mcnl
MAX_VALUE
mcnl
try
sqlStateType
getSQLStateType
catchClause
uoe
sqlStateType
catchClause
sqle
sqlStateType
if
isLoggable
INFO
block
info
sqlStateType
ResultSet
rs
rs
getTypeInfo
try
while
next
block
String
typeName
getString
int
dataType
getInt
int
precision
getInt
int
maximumScale
getInt
Integer
dtInt
Integer
dataType
if
typesByTypeID
get
dtInt
block
typesByTypeID
put
dtInt
TypeInfo
dataType
typeName
precision
if
isLoggable
INFO
block
info
dataType
typeName
precision
maximumScale
close
release
getTypeDeclaration
String
dataType
int
TypeInfo
ti
TypeInfo
typesByTypeID
get
Integer
dataType
if
ti
block
throw
SQLException
dataType
return
getDeclaration
isDuplicateEntryError
boolean
se
SQLException
ensureTableExists
tableName
String
mandatoryField
FieldDescriptor
fieldDescriptors
Collection
indexDescriptors
Collection
ensureTableExists
tableName
mandatoryField
fieldDescriptors
indexDescriptors
getAutomaticPrimaryKeyIndexName
String
return
ensureTableExists
tableName
String
mandatoryField
FieldDescriptor
fieldDescriptors
Collection
indexDescriptors
Collection
userManaged
boolean
autoIncrementRequested
boolean
deleteFields
boolean
if
userManaged
block
if
isLoggable
INFO
block
info
tableName
block
if
isLoggable
INFO
block
info
tableName
boolean
autoIncrement
autoIncrementRequested
supportsAutoIncrement
if
autoIncrementRequested
supportsAutoIncrement
block
warning
Collection
FieldDescriptor
fdToChange
LinkedList
FieldDescriptor
Collection
FieldDescriptor
fdFoundToAlreadyExist
HashSet
FieldDescriptor
Collection
FieldDescriptor
fieldsToRemove
LinkedList
FieldDescriptor
Collection
String
normalFieldNamesToRemove
HashSet
String
Map
String
FieldDescriptor
fdMap
HashMap
String
FieldDescriptor
String
normalMandatoryFieldName
normalizeName
getName
put
normalMandatoryFieldName
mandatoryField
Iterator
fdI
iterator
while
hasNext
block
FieldDescriptor
fd
FieldDescriptor
next
String
name
normalizeName
getName
put
name
fd
boolean
changingMandatoryField
ConnectionPool
ConnectionWrapper
cw
getConnectionWrapper
try
Connection
c
getConnection
DatabaseMetaData
dmd
getMetaData
String
normalTableName
normalizeName
tableName
ResultSet
rs
getColumns
getCatalog
normalTableName
int
numColumns
try
while
next
block
numColumns
String
normalFieldName
typeName
remarks
isNullable
int
fieldType
nullableInt
try
normalFieldName
getString
catchClause
err
warning
normalTableName
getMessage
try
fieldType
getInt
catchClause
err
warning
normalTableName
getMessage
try
nullableInt
getInt
catchClause
err
warning
normalTableName
getMessage
try
typeName
getString
catchClause
err
warning
normalTableName
getMessage
try
remarks
getString
catchClause
err
warning
normalTableName
getMessage
try
isNullable
getString
catchClause
err
warning
normalTableName
getMessage
if
isLoggable
INFO
block
info
normalTableName
normalFieldName
fieldType
nullableInt
typeName
remarks
isNullable
FieldDescriptor
fd
get
normalFieldName
if
fd
block
add
fd
boolean
nullableToMatch
nullableInt
if
canSetNullableOnTableAlter
block
warning
getName
nullableToMatch
isNullable
if
matches
fieldType
nullableToMatch
block
if
isLoggable
INFO
block
info
getName
getSqlType
fieldType
nullableInt
isNullable
if
fd
mandatoryField
block
changingMandatoryField
add
fd
block
add
normalFieldName
add
FieldDescriptor
normalFieldName
fieldType
close
boolean
foundIndexes
boolean
foundPrimaryKey
Map
String
IndexDescriptor
oldIndexes
HashMap
String
IndexDescriptor
Collection
IndexDescriptor
indexesToRemove
LinkedList
IndexDescriptor
if
numColumns
block
ResultSet
irs
getIndexInfo
getCatalog
normalTableName
try
while
next
block
foundIndexes
String
name
getString
String
column
getString
boolean
unique
getBoolean
if
isLoggable
INFO
block
info
name
column
if
equals
getAutomaticPrimaryKeyIndexName
block
foundPrimaryKey
IndexDescriptor
id
get
name
if
id
block
id
IndexDescriptor
name
unique
column
put
name
id
block
addFieldName
column
if
getFieldDescriptor
fieldsToRemove
column
block
if
isLoggable
INFO
block
info
name
column
add
id
close
boolean
mustRecreatePk
getAutomaticPrimaryKeyIndexName
foundPrimaryKey
numColumns
if
mustRecreatePk
block
if
isLoggable
WARNING
block
warning
normalTableName
if
mustRecreatePk
contains
mandatoryField
contains
mandatoryField
block
add
mandatoryField
changingMandatoryField
if
numColumns
block
if
userManaged
block
if
isLoggable
WARNING
block
severe
normalTableName
block
PreparedStatement
createPs
getCreateTableStatement
c
normalTableName
mandatoryField
autoIncrement
if
isLoggable
INFO
block
info
tableName
createPs
long
time1
currentTimeMillis
execute
long
time2
currentTimeMillis
if
isLoggable
INFO
block
info
tableName
time2
time1
block
if
isLoggable
INFO
block
info
numColumns
tableName
if
changingMandatoryField
supportsAutoIncrement
block
boolean
wasAutoIncrement
PreparedStatement
ps
prepareStatement
normalMandatoryFieldName
normalTableName
ResultSet
airs
executeQuery
try
ResultSetMetaData
rsmd
getMetaData
wasAutoIncrement
isAutoIncrement
if
isLoggable
INFO
block
info
tableName
wasAutoIncrement
close
if
wasAutoIncrement
autoIncrement
block
add
mandatoryField
changingMandatoryField
Iterator
checkI
iterator
while
hasNext
block
FieldDescriptor
fd
FieldDescriptor
next
if
contains
fd
block
String
renamedFieldName
String
renamedFrom
getRenamedFrom
if
renamedFrom
block
for
forControl
int
i
i
length
i
block
String
normalRenamedFrom
normalizeName
renamedFrom
i
FieldDescriptor
rfd
getFieldDescriptor
fieldsToRemove
normalRenamedFrom
if
rfd
block
remove
rfd
remove
normalRenamedFrom
renamedFieldName
normalRenamedFrom
break
if
renamedFieldName
block
if
userManaged
block
severe
renamedFieldName
getName
block
boolean
doai
fd
mandatoryField
autoIncrement
PreparedStatement
pss
getRenameFieldStatements
c
normalTableName
renamedFieldName
fd
doai
for
forControl
int
i
i
length
i
block
try
PreparedStatement
ps
pss
i
if
ps
block
if
isLoggable
INFO
block
info
renamedFieldName
getName
pss
i
long
time1
currentTimeMillis
pss
i
execute
long
time2
currentTimeMillis
if
isLoggable
INFO
block
info
renamedFieldName
getName
time2
time1
catchClause
se
SQLException
nse
SQLException
renamedFieldName
getName
pss
i
getMessage
getSQLState
getErrorCode
setNextException
se
throw
nse
block
if
userManaged
block
severe
getName
normalTableName
block
boolean
doai
fd
mandatoryField
autoIncrement
PreparedStatement
pss
getCreateFieldStatements
c
normalTableName
fd
doai
for
forControl
int
i
i
length
i
block
PreparedStatement
ps
pss
i
if
isLoggable
INFO
block
info
getName
ps
try
long
time1
currentTimeMillis
execute
long
time2
currentTimeMillis
if
isLoggable
INFO
block
info
getName
time2
time1
catchClause
se
SQLException
nse
SQLException
getName
ps
getMessage
getSQLState
getErrorCode
setNextException
se
throw
nse
if
deleteFields
block
if
userManaged
block
severe
normalTableName
block
Iterator
removeI
iterator
while
hasNext
block
FieldDescriptor
rfd
FieldDescriptor
next
String
name
getName
PreparedStatement
ps
getRemoveFieldStatement
c
normalTableName
name
if
isLoggable
INFO
block
info
name
ps
try
long
time1
currentTimeMillis
execute
long
time2
currentTimeMillis
if
isLoggable
INFO
block
info
name
time2
time1
catchClause
se
warning
name
getMessage
block
if
userManaged
block
Iterator
removeI
iterator
while
hasNext
block
FieldDescriptor
rfd
FieldDescriptor
next
boolean
doai
rfd
mandatoryField
autoIncrement
PreparedStatement
ps
getChangeFieldStatements
c
normalTableName
rfd
doai
try
for
forControl
int
i
i
length
i
block
if
isLoggable
INFO
block
info
ps
i
ps
i
execute
catchClause
se
warning
getName
getMessage
Iterator
changeI
iterator
while
hasNext
block
FieldDescriptor
fd
FieldDescriptor
next
if
userManaged
block
warning
getName
block
boolean
doai
fd
mandatoryField
autoIncrement
PreparedStatement
ps
getChangeFieldStatements
c
normalTableName
fd
doai
for
forControl
int
i
i
length
i
block
if
isLoggable
INFO
block
info
getName
ps
i
long
time1
currentTimeMillis
try
ps
i
execute
catchClause
se
SQLException
nse
SQLException
getName
ps
i
getMessage
getSQLState
getErrorCode
setNextException
se
throw
nse
long
time2
currentTimeMillis
if
isLoggable
INFO
block
info
getName
time2
time1
Collection
normalizedIndexDescriptors
HashSet
Collection
normalIndexNames
HashSet
Collection
actualIndexDescriptors
LinkedList
addAll
indexDescriptors
if
getAutomaticPrimaryKeyIndexName
block
String
indexName
IndexDescriptor
pkDescriptor
IndexDescriptor
indexName
normalMandatoryFieldName
add
pkDescriptor
Iterator
indexesI
iterator
while
hasNext
block
IndexDescriptor
id
IndexDescriptor
next
IndexDescriptor
nid
normalizeIndex
normalTableName
id
add
nid
add
getName
Iterator
oldIndexesI
values
iterator
while
hasNext
block
IndexDescriptor
oldId
IndexDescriptor
next
String
oldIdName
getName
if
equals
normalizeName
getAutomaticPrimaryKeyIndexName
contains
getName
block
if
isLoggable
INFO
block
info
getName
add
oldId
boolean
noGetIndexInfo
foundIndexes
numColumns
getAutomaticPrimaryKeyIndexName
if
noGetIndexInfo
block
warning
if
userManaged
block
warning
Iterator
indexToRemoveI
iterator
while
hasNext
block
IndexDescriptor
rid
IndexDescriptor
next
if
userManaged
block
warning
getName
block
PreparedStatement
dps
getDropIndexStatements
c
normalTableName
getName
for
forControl
int
i
i
length
i
block
if
isLoggable
INFO
block
info
getName
dps
i
long
time1
currentTimeMillis
try
dps
i
execute
catchClause
sqe
warning
getName
sqe
long
time2
currentTimeMillis
if
isLoggable
INFO
block
info
getName
time2
time1
Iterator
indexI
iterator
while
hasNext
block
IndexDescriptor
id
IndexDescriptor
next
Collection
fieldNames
getFieldNames
for
forControl
Iterator
fnI
iterator
hasNext
block
String
fn
String
next
if
contains
fn
block
throw
SQLException
getName
fn
tableName
String
indexName
getName
IndexDescriptor
oldId
noGetIndexInfo
id
IndexDescriptor
get
indexName
if
oldId
block
if
equals
id
noGetIndexInfo
block
continue
if
userManaged
block
if
noGetIndexInfo
block
warning
getName
block
PreparedStatement
dps
getDropIndexStatements
c
normalTableName
getName
for
forControl
int
i
i
length
i
block
if
isLoggable
INFO
block
info
getName
dps
i
try
long
time1
currentTimeMillis
dps
i
execute
long
time2
currentTimeMillis
if
isLoggable
INFO
block
info
getName
time2
time1
catchClause
se
warning
getName
getMessage
if
userManaged
block
warning
getName
block
PreparedStatement
ps
getCreateIndexStatements
c
normalTableName
id
fdMap
for
forControl
int
i
i
length
i
block
if
isLoggable
INFO
block
info
ps
i
long
time1
currentTimeMillis
ps
i
execute
long
time2
currentTimeMillis
if
isLoggable
INFO
block
info
getName
time2
time1
release
getFieldDescriptor
FieldDescriptor
fds
Collection
fieldName
String
for
forControl
Iterator
fdsI
iterator
hasNext
block
FieldDescriptor
fd
FieldDescriptor
next
if
equals
getName
block
return
fd
return
normalizeName
String
s
String
return
s
canSetNullableOnTableAlter
boolean
return
normalizeIndex
IndexDescriptor
normalTableName
String
id
IndexDescriptor
return
id
typesMatch
boolean
type1
int
type2
int
if
type1
type2
block
return
if
isLong
type1
isLong
type2
block
return
if
isDecimal
type1
isDecimal
type2
block
return
if
isBlob
type1
isBlob
type2
block
return
if
isTiny
type1
isTiny
type2
block
return
return
isLong
boolean
type
int
return
type
BIGINT
isDecimal
boolean
type
int
return
type
DECIMAL
type
DOUBLE
type
FLOAT
type
REAL
isBlob
boolean
type
int
return
type
BLOB
type
VARBINARY
type
BINARY
isText
boolean
type
int
return
type
VARCHAR
isTiny
boolean
type
int
return
type
BOOLEAN
type
TINYINT
type
BIT
getCreateTableStatement
PreparedStatement
c
Connection
tableName
String
fd
FieldDescriptor
autoIncrementRequested
boolean
return
prepareStatement
tableName
getName
getTypeDeclaration
getSqlType
isNullable
getRemoveFieldStatement
PreparedStatement
c
Connection
tableName
String
columnName
String
PreparedStatement
ps
prepareStatement
tableName
columnName
return
ps
getCreateFieldStatements
PreparedStatement
c
Connection
normalTableName
String
fd
FieldDescriptor
autoIncrement
boolean
String
normalFdName
normalizeName
getName
PreparedStatement
ps1
prepareStatement
normalTableName
normalFdName
getTypeDeclaration
getSqlType
isNullable
if
isNullable
block
PreparedStatement
ps2
prepareStatement
normalTableName
normalFdName
return
PreparedStatement
ps1
ps2
block
return
PreparedStatement
ps1
getChangeFieldStatements
PreparedStatement
c
Connection
tableName
String
fd
FieldDescriptor
autoIncrement
boolean
getRenameFieldStatements
PreparedStatement
c
Connection
tableName
String
oldName
String
fd
FieldDescriptor
autoIncrement
boolean
requiresKeyLength
boolean
return
getCreateIndexStatements
PreparedStatement
c
Connection
tableName
String
id
IndexDescriptor
normalFieldMap
Map
String
FieldDescriptor
Collection
fieldNames
getFieldNames
StringBuffer
sb
StringBuffer
append
append
isUnique
append
append
getName
append
append
tableName
append
Iterator
i
iterator
while
hasNext
block
String
fieldName
String
next
String
normalFieldName
normalizeName
fieldName
append
normalFieldName
FieldDescriptor
fd
get
normalFieldName
if
fd
block
throw
SQLException
normalFieldName
tableName
keySet
if
isText
getSqlType
requiresKeyLength
block
int
keyLength
getKeyLength
if
keyLength
block
append
keyLength
if
hasNext
block
append
append
PreparedStatement
ps1
prepareStatement
toString
return
PreparedStatement
ps1
getDropIndexStatements
PreparedStatement
c
Connection
tableName
String
name
String
PreparedStatement
ps1
prepareStatement
tableName
name
return
PreparedStatement
ps1
ThreadLocal
lockStackHolder
ThreadLocal
requestLock
lockStr
String
transactionIsolationLevel
int
Thread
ct
currentThread
Object
lock
lockStr
boolean
firstLevel
for
forControl
block
synchronized
locks
LockInfo
li
LockInfo
get
lock
if
li
block
firstLevel
put
lock
LockInfo
ct
break
block
Thread
t
getThread
if
t
ct
block
firstLevel
incrementLevel
break
block
wait
boolean
inTransaction
inTransaction
if
inTransaction
block
try
beginTransaction
transactionIsolationLevel
catchClause
err
synchronized
locks
if
firstLevel
block
remove
lock
notifyAll
block
LockInfo
get
lock
if
err
SQLException
block
throw
SQLException
err
block
throw
SQLException
getMessage
LinkedList
lockStack
LinkedList
get
if
lockStack
block
lockStack
LinkedList
set
lockStack
add
LockEntry
lock
inTransaction
relinquishLock
LinkedList
lockStack
LinkedList
lockStackHolder
get
if
lockStack
isEmpty
block
throw
SQLException
LockEntry
entry
LockEntry
removeLast
if
startedTransaction
block
try
endTransaction
catchClause
err
log
SEVERE
err
Object
lock
lock
synchronized
locks
LockInfo
li
LockInfo
get
lock
if
li
block
throw
IllegalStateException
lock
if
currentThread
getThread
block
throw
IllegalStateException
lock
if
getLevel
block
remove
lock
notifyAll
block
decrementLevel
query
ResultsIterator
BeanWrapper
sql
String
parameters
Object
unmarshaller
BeanUnmarshaller
ConnectionPool
ConnectionWrapper
c
getConnectionWrapper
try
PreparedStatement
ps
prepareStatement
sql
for
forControl
int
i
i
length
i
block
setObject
i
parameters
i
return
getBeanIterator
c
executeQuery
unmarshaller
release
update
int
sql
String
parameters
Object
if
isLoggable
INFO
block
info
sql
asList
parameters
ConnectionPool
ConnectionWrapper
c
getConnectionWrapper
try
PreparedStatement
ps
prepareStatement
sql
for
forControl
int
i
i
length
i
block
Object
objVal
parameters
i
try
setParameter
ps
i
objVal
catchClause
se
SQLException
se2
SQLException
i
objVal
getClass
getName
sql
getMessage
getSQLState
getErrorCode
setNextException
se
throw
se2
return
executeUpdate
release
supportsAutoIncrement
boolean
return
autoIncrementDeclaration
String
return
getAutoIncrementRetrievalStatement
PreparedStatement
c
Connection
autoIncrementColumnNumber
int
return
insert
Long
tableName
String
idField
String
normalFieldNames
String
values
Object
autoIncrementRequested
boolean
if
length
length
block
throw
IllegalArgumentException
if
isLoggable
INFO
block
info
tableName
idField
asList
normalFieldNames
asList
values
autoIncrementRequested
boolean
autoIncrement
autoIncrementRequested
supportsAutoIncrement
ConnectionPool
ConnectionWrapper
c
getConnectionWrapper
try
StringBuffer
sqlBuffer
StringBuffer
append
append
normalizeName
tableName
append
if
autoIncrement
block
append
normalizeName
idField
for
forControl
int
i
i
length
i
block
if
autoIncrement
i
block
append
append
normalFieldNames
i
append
if
autoIncrement
block
append
for
forControl
int
i
i
length
i
block
if
autoIncrement
i
block
append
append
append
PreparedStatement
ps
prepareStatement
toString
TYPE_FORWARD_ONLY
CONCUR_UPDATABLE
int
extra
autoIncrement
Long
recordID
if
autoIncrement
block
recordID
generateLong
setParameter
ps
recordID
for
forControl
int
i
i
length
i
block
Object
objVal
values
i
try
setParameter
ps
i
extra
objVal
catchClause
se
SQLException
se2
SQLException
i
extra
objVal
getClass
getName
toString
autoIncrement
extra
getMessage
getSQLState
getErrorCode
setNextException
se
throw
se2
executeUpdate
if
autoIncrement
block
PreparedStatement
aips
getAutoIncrementRetrievalStatement
getConnection
ResultSet
airs
executeQuery
try
while
next
block
recordID
getLong
autoIncrementColumnNumber
break
close
if
recordID
block
throw
SQLException
return
recordID
release
setParameter
ps
PreparedStatement
index
int
objVal
Object
if
objVal
String
block
setString
index
String
objVal
if
objVal
Integer
block
setInt
index
Integer
objVal
if
objVal
Long
block
setLong
index
Long
objVal
if
objVal
Boolean
block
setBoolean
index
Boolean
objVal
if
objVal
byte
block
setBytes
index
byte
objVal
block
setObject
index
objVal
getBeanIterator
ResultsIterator
BeanWrapper
conn
ConnectionPool
ConnectionWrapper
resultSet
ResultSet
unmarshaller
BeanUnmarshaller
String
idField
normalizeName
getIDField
return
ResultsIterator
BeanWrapper
Boolean
hasNext
finalize
finalize
if
hasNext
block
close
close
try
close
catchClause
err
log
WARNING
err
release
hasNext
boolean
boolean
hn
if
hasNext
block
try
hn
next
catchClause
se
throw
RuntimeException
se
hasNext
Boolean
hn
block
hn
booleanValue
if
hn
block
try
close
release
catchClause
err
log
WARNING
err
return
hn
next
BeanWrapper
if
hasNext
block
throw
NoSuchElementException
try
return
getBeanWrapper
resultSet
unmarshaller
idField
catchClause
se
throw
RuntimeException
se
hasNext
remove
throw
UnsupportedOperationException
getBeanWrapper
BeanWrapper
resultSet
ResultSet
unmarshaller
BeanUnmarshaller
idField
String
Long
id
getLong
idField
if
id
block
throw
SQLException
idField
Object
bean
registerBean
id
ResultSetMetaData
md
getMetaData
int
cc
getColumnCount
for
forControl
int
i
i
cc
i
block
String
name
getColumnName
i
int
type
getColumnType
i
Object
fieldValue
getResultSetValue
i
name
type
resultSet
if
equals
idField
block
setProperty
bean
name
fieldValue
return
BeanWrapper
id
bean
getResultSetValue
Object
i
int
name
String
type
int
resultSet
ResultSet
if
isDecimal
type
block
double
value
getDouble
i
return
wasNull
Double
value
if
isLong
type
block
long
value
getLong
i
return
wasNull
Long
value
block
return
getObject
i
getConnectionWrapper
ConnectionPool
ConnectionWrapper
ConnectionPool
ConnectionWrapper
tcwrapper
ConnectionPool
ConnectionWrapper
transactionedConnection
get
if
tcwrapper
block
return
tcwrapper
return
pool
getConnectionWrapper
beginTransaction
transactionIsolationLevel
int
ConnectionPool
ConnectionWrapper
tcwrapper
ConnectionPool
ConnectionWrapper
transactionedConnection
get
if
tcwrapper
block
throw
SQLException
tcwrapper
pool
getConnectionWrapper
Connection
c
getConnection
setTransactionIsolation
transactionIsolationLevel
setAutoCommit
transactionedConnection
set
tcwrapper
endTransaction
ConnectionPool
ConnectionWrapper
tcwrapper
ConnectionPool
ConnectionWrapper
transactionedConnection
get
if
tcwrapper
block
throw
SQLException
Connection
c
getConnection
commit
transactionedConnection
set
setAutoCommit
if
shouldCloseConnectionAfterTransaction
block
destroy
block
release
inTransaction
boolean
return
transactionedConnection
get
shouldCloseConnectionAfterTransaction
boolean
return
setSavepoint
Savepoint
savepointName
String
ConnectionPool
ConnectionWrapper
tcwrapper
ConnectionPool
ConnectionWrapper
transactionedConnection
get
if
tcwrapper
block
throw
SQLException
return
getConnection
setSavepoint
savepointName
rollback
savepoint
Savepoint
ConnectionPool
ConnectionWrapper
tcwrapper
ConnectionPool
ConnectionWrapper
transactionedConnection
get
if
tcwrapper
block
throw
SQLException
getConnection
rollback
savepoint
LockInfo
Thread
thread
int
level
LockInfo
t
Thread
thread
t
incrementLevel
level
decrementLevel
level
getLevel
int
return
level
getThread
Thread
return
thread
LockEntry
Object
lock
boolean
startedTransaction
LockEntry
lock
Object
startedTransaction
boolean
lock
lock
startedTransaction
startedTransaction
TypeInfo
String
typeName
int
precision
int
sqlType
TypeInfo
sqlType
int
typeName
String
precision
int
sqlType
sqlType
typeName
typeName
precision
precision
getDeclaration
String
if
sqlType
VARCHAR
sqlType
VARBINARY
block
return
typeName
precision
return
typeName
Database
