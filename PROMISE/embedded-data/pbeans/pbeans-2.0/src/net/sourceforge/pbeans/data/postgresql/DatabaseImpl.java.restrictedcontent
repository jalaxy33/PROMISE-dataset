DatabaseImpl
Logger
logger
getLogger
getName
DatabaseImpl
Random
RAND
Random
currentTimeMillis
DatabaseImpl
init
dataSource
DataSource
init
dataSource
getAutoIncrementRetrievalStatement
PreparedStatement
c
Connection
throw
UnsupportedOperationException
getChangeFieldStatements
PreparedStatement
c
Connection
tableName
String
fd
FieldDescriptor
autoIncrement
boolean
String
randomName
abs
nextInt
String
normalFieldName
normalizeName
getName
PreparedStatement
ps1
prepareStatement
tableName
normalFieldName
randomName
PreparedStatement
ps2
getRenameFieldStatements
c
tableName
randomName
fd
autoIncrement
PreparedStatement
result
PreparedStatement
length
result
ps1
for
forControl
int
i
i
length
i
block
result
i
ps2
i
return
result
getCreateFieldStatements
PreparedStatement
c
Connection
normalTableName
String
fd
FieldDescriptor
autoIncrement
boolean
return
getCreateFieldStatements
c
normalTableName
fd
autoIncrement
getCreateFieldStatements
PreparedStatement
c
Connection
normalTableName
String
fd
FieldDescriptor
autoIncrement
boolean
nonNullConstraint
boolean
String
normalFdName
normalizeName
getName
PreparedStatement
ps1
prepareStatement
normalTableName
normalFdName
getTypeDeclaration
getSqlType
return
PreparedStatement
ps1
canSetNullableOnTableAlter
boolean
return
getRenameFieldStatements
PreparedStatement
c
Connection
normalTableName
String
oldName
String
fd
FieldDescriptor
autoIncrement
boolean
String
normalFieldName
normalizeName
getName
PreparedStatement
pss1
getCreateFieldStatements
c
normalTableName
fd
autoIncrement
PreparedStatement
ps2
prepareStatement
normalTableName
normalFieldName
oldName
PreparedStatement
ps3
getRemoveFieldStatement
c
normalTableName
oldName
PreparedStatement
ps4
int
length
length
ps4
PreparedStatement
result
PreparedStatement
length
int
index
for
forControl
index
index
length
index
block
result
index
pss1
index
result
index
ps2
result
index
ps3
if
ps4
block
result
index
ps4
return
result
getDropIndexStatements
PreparedStatement
c
Connection
tableName
String
name
String
PreparedStatement
ps1
prepareStatement
name
return
PreparedStatement
ps1
normalizeName
String
s
String
if
s
block
return
String
newName
toLowerCase
return
newName
normalizeIndex
IndexDescriptor
normalTableName
String
id
IndexDescriptor
IndexDescriptor
nid
IndexDescriptor
normalTableName
getName
toLowerCase
isUnique
String
getKeyLength
Collection
rawFieldNames
getFieldNames
for
forControl
Iterator
i
iterator
hasNext
block
String
rawFieldName
String
next
addFieldName
toLowerCase
return
nid
isDuplicateEntryError
boolean
se
SQLException
try
return
equals
getSQLState
catchClause
err
log
WARNING
err
return
getTypeDeclaration
String
dataType
int
if
dataType
VARBINARY
dataType
BINARY
dataType
BLOB
block
return
if
dataType
FLOAT
dataType
DOUBLE
block
return
if
dataType
VARCHAR
block
return
if
dataType
CHAR
block
return
if
dataType
BOOLEAN
block
return
block
return
getTypeDeclaration
dataType
setParameter
ps
PreparedStatement
index
int
objVal
Object
if
objVal
String
block
setString
index
String
objVal
if
objVal
Character
block
try
byte
bytes
valueOf
getBytes
objVal
if
isLoggable
INFO
block
info
length
setBytes
index
bytes
catchClause
ue
throw
IllegalArgumentException
getMessage
block
setParameter
ps
index
objVal
typesMatch
boolean
type1
int
type2
int
if
isCharacter
type1
isCharacter
type2
block
return
block
return
typesMatch
type1
type2
isCharacter
boolean
sqlType
int
return
sqlType
CHAR
sqlType
BINARY
isDecimal
boolean
type
int
return
type
NUMERIC
isDecimal
type
getResultSetValue
Object
i
int
name
String
type
int
resultSet
ResultSet
if
type
NUMERIC
block
double
value
getDouble
i
return
wasNull
Double
value
block
return
getResultSetValue
i
name
type
resultSet
createEmptyRecordMap
Map
return
LowerCaseMap
LowerCaseMap
containsKey
boolean
key
Object
if
key
String
block
return
containsKey
String
key
block
return
containsKey
key
get
Object
key
Object
if
key
String
block
return
get
String
key
block
return
get
key
HashMap
AbstractDatabase
