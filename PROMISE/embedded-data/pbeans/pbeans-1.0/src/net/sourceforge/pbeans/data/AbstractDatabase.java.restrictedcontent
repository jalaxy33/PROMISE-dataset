AbstractDatabase
int
maxTableNameLength
int
maxColumnNameLength
int
sqlStateType
DataSource
source
boolean
logEnabled
Map
typesByTypeID
HashMap
Map
locks
HashMap
Set
keywords
HashSet
ConnectionPool
pool
boolean
deleteFields
String
SQL92_KEYWORDS
AbstractDatabase
source
DataSource
PrintWriter
lw
try
lw
getLogWriter
catchClause
uo
lw
logEnabled
lw
source
source
pool
ConnectionPool
source
initTypeInfo
setMaxConnections
maxConnections
int
pool
setMaxConnections
maxConnections
setConnectionTimeout
timeout
int
pool
setConnectionTimeout
timeout
setDeleteFields
value
boolean
deleteFields
value
getMaxTableNameLength
int
return
maxTableNameLength
getMaxColumnNameLength
int
return
maxColumnNameLength
initTypeInfo
ConnectionPool
ConnectionWrapper
cw
pool
getConnectionWrapper
try
Connection
c
getConnection
DatabaseMetaData
dmd
getMetaData
maxTableNameLength
getMaxTableNameLength
maxColumnNameLength
getMaxColumnNameLength
try
sqlStateType
getSQLStateType
catchClause
uoe
sqlStateType
ResultSet
rs
rs
getTypeInfo
try
while
next
block
String
typeName
getString
int
dataType
getInt
int
precision
getInt
Integer
dtInt
Integer
dataType
if
typesByTypeID
get
dtInt
block
typesByTypeID
put
dtInt
TypeInfo
dataType
typeName
precision
if
isLogEnabled
block
info
dataType
typeName
precision
close
String
keywords
getSQLKeywords
SQL92_KEYWORDS
StringTokenizer
tok
StringTokenizer
keywords
while
hasMoreTokens
block
String
token
nextToken
keywords
add
toLowerCase
release
info
getTypeDeclaration
String
dataType
int
if
dataType
BLOB
block
return
TypeInfo
ti
TypeInfo
typesByTypeID
get
Integer
dataType
if
ti
block
throw
IllegalArgumentException
dataType
return
getDeclaration
isDuplicateEntryError
boolean
se
SQLException
ensureTableExists
tableName
String
mandatoryField
FieldDescriptor
fieldDescriptors
Collection
indexDescriptors
Collection
Collection
fdToChange
LinkedList
Collection
fdChecked
HashSet
Collection
fieldsToRemove
LinkedList
Map
fdMap
HashMap
put
getName
mandatoryField
Iterator
fdI
iterator
while
hasNext
block
FieldDescriptor
fd
FieldDescriptor
next
String
name
getName
if
keywords
contains
toLowerCase
block
throw
IllegalStateException
name
tableName
put
name
fd
info
ConnectionPool
ConnectionWrapper
cw
pool
getConnectionWrapper
try
Connection
c
getConnection
DatabaseMetaData
dmd
getMetaData
info
ResultSet
rs
getColumns
getCatalog
tableName
int
numColumns
try
while
next
block
numColumns
String
fieldName
getString
int
fieldType
getInt
FieldDescriptor
fd
FieldDescriptor
get
fieldName
if
fd
block
add
fd
if
typesMatch
getSqlType
fieldType
block
info
getName
getSqlType
fieldType
add
fd
block
add
fieldName
close
if
numColumns
block
PreparedStatement
createPs
getCreateTableStatement
c
tableName
mandatoryField
if
logEnabled
block
info
tableName
createPs
execute
Iterator
checkI
iterator
while
hasNext
block
FieldDescriptor
fd
FieldDescriptor
next
if
contains
fd
block
String
renamedFieldName
String
renamedFrom
getRenamedFrom
if
renamedFrom
block
for
forControl
int
i
i
length
i
block
if
contains
renamedFrom
i
block
renamedFieldName
renamedFrom
i
remove
renamedFieldName
break
if
renamedFieldName
block
PreparedStatement
ps
getRenameFieldStatements
c
tableName
renamedFieldName
fd
if
logEnabled
block
info
renamedFieldName
getName
ps
for
forControl
int
i
i
length
i
block
try
ps
i
execute
catchClause
se
SQLException
nse
SQLException
renamedFieldName
getName
ps
getMessage
getSQLState
getErrorCode
setNextException
se
throw
nse
block
PreparedStatement
ps
getCreateFieldStatement
c
tableName
fd
if
logEnabled
block
info
ps
try
execute
catchClause
se
SQLException
nse
SQLException
getName
ps
getMessage
getSQLState
getErrorCode
setNextException
se
throw
nse
if
deleteFields
block
Iterator
removeI
iterator
while
hasNext
block
String
name
String
next
PreparedStatement
ps
getRemoveFieldStatement
c
tableName
name
if
logEnabled
block
info
ps
try
execute
catchClause
se
warn
name
getMessage
Iterator
changeI
iterator
while
hasNext
block
FieldDescriptor
fd
FieldDescriptor
next
PreparedStatement
ps
getChangeFieldStatements
c
tableName
fd
for
forControl
int
i
i
length
i
block
if
logEnabled
block
info
getName
ps
i
ps
i
execute
Map
oldIndexes
HashMap
ResultSet
irs
getIndexInfo
getCatalog
tableName
boolean
foundIndexes
try
while
next
block
foundIndexes
String
name
getString
String
column
getString
boolean
unique
getBoolean
IndexDescriptor
id
IndexDescriptor
get
name
if
id
block
id
IndexDescriptor
name
unique
column
put
name
id
block
addFieldName
column
close
boolean
noGetIndexInfo
foundIndexes
numColumns
if
noGetIndexInfo
block
warn
Iterator
indexI
iterator
while
hasNext
block
IndexDescriptor
id
IndexDescriptor
next
IndexDescriptor
oldId
noGetIndexInfo
id
IndexDescriptor
get
getName
if
oldId
block
if
equals
id
noGetIndexInfo
block
continue
PreparedStatement
dps
getDropIndexStatements
c
tableName
getName
for
forControl
int
i
i
length
i
block
if
logEnabled
block
info
getName
dps
i
try
dps
i
execute
catchClause
se
if
noGetIndexInfo
block
warn
getName
getMessage
block
throw
se
PreparedStatement
ps
getCreateIndexStatements
c
tableName
id
for
forControl
int
i
i
length
i
block
if
logEnabled
block
info
ps
i
ps
i
execute
release
typesMatch
boolean
type1
int
type2
int
if
type1
type2
block
return
if
isNumeric
type1
isNumeric
type2
block
return
if
isDecimal
type1
isDecimal
type2
block
return
if
isBlob
type1
isBlob
type2
block
return
return
isNumeric
boolean
type
int
return
type
INTEGER
type
NUMERIC
isDecimal
boolean
type
int
return
type
DECIMAL
type
DOUBLE
type
FLOAT
type
REAL
isBlob
boolean
type
int
return
type
BLOB
type
VARBINARY
type
BINARY
getCreateTableStatement
PreparedStatement
c
Connection
tableName
String
fd
FieldDescriptor
return
prepareStatement
tableName
getName
getTypeDeclaration
getSqlType
isNullable
getRemoveFieldStatement
PreparedStatement
c
Connection
tableName
String
columnName
String
PreparedStatement
ps
prepareStatement
tableName
columnName
return
ps
getCreateFieldStatement
PreparedStatement
c
Connection
tableName
String
fd
FieldDescriptor
PreparedStatement
ps
prepareStatement
tableName
getName
getTypeDeclaration
getSqlType
return
ps
getChangeFieldStatements
PreparedStatement
c
Connection
tableName
String
fd
FieldDescriptor
getRenameFieldStatements
PreparedStatement
c
Connection
tableName
String
oldName
String
fd
FieldDescriptor
getCreateIndexStatements
PreparedStatement
c
Connection
tableName
String
id
IndexDescriptor
Collection
fieldNames
getFieldNames
StringBuffer
sb
StringBuffer
append
append
isUnique
append
append
getName
append
append
tableName
append
Iterator
i
iterator
while
hasNext
block
String
fieldName
String
next
append
fieldName
if
hasNext
block
append
append
PreparedStatement
ps1
prepareStatement
toString
return
PreparedStatement
ps1
getDropIndexStatements
PreparedStatement
c
Connection
tableName
String
name
String
PreparedStatement
ps1
prepareStatement
tableName
name
return
PreparedStatement
ps1
requestLockString
String
tableName
String
fieldName
String
value
Object
if
value
block
return
tableName
fieldName
block
return
tableName
fieldName
valueOf
value
requestLock
Object
tableName
String
fieldName
String
value
Object
String
lockStr
requestLockString
tableName
fieldName
value
Thread
ct
currentThread
for
forControl
block
synchronized
locks
LockInfo
li
LockInfo
get
lockStr
if
li
block
put
lockStr
LockInfo
ct
return
lockStr
Thread
t
getThread
if
t
ct
block
incrementLevel
return
lockStr
wait
relinquishLock
lock
Object
synchronized
locks
LockInfo
li
LockInfo
get
lock
if
li
block
warn
return
if
getLevel
block
remove
lock
notifyAll
if
currentThread
getThread
block
decrementLevel
block
warn
query
ResultsIterator
sql
String
parameters
Object
ConnectionPool
ConnectionWrapper
c
pool
getConnectionWrapper
try
PreparedStatement
ps
prepareStatement
sql
for
forControl
int
i
i
length
i
block
setObject
i
parameters
i
return
getMapIterator
c
executeQuery
release
update
int
sql
String
parameters
Object
ConnectionPool
ConnectionWrapper
c
pool
getConnectionWrapper
try
PreparedStatement
ps
prepareStatement
sql
for
forControl
int
i
i
length
i
block
setObject
i
parameters
i
return
executeUpdate
release
getMapIterator
ResultsIterator
conn
ConnectionPool
ConnectionWrapper
resultSet
ResultSet
return
ResultsIterator
Boolean
hasNext
finalize
finalize
if
hasNext
block
close
close
close
release
hasNext
boolean
boolean
hn
if
hasNext
block
try
hn
next
catchClause
se
throw
IllegalStateException
se
hasNext
Boolean
hn
block
hn
booleanValue
if
hn
block
try
close
release
catchClause
se
return
hn
next
Object
if
hasNext
block
throw
NoSuchElementException
try
return
getMap
resultSet
catchClause
se
throw
NoSuchElementException
se
hasNext
remove
throw
UnsupportedOperationException
getMap
Map
resultSet
ResultSet
Map
map
HashMap
ResultSetMetaData
md
getMetaData
int
cc
getColumnCount
for
forControl
int
i
i
cc
i
block
String
name
getColumnName
i
int
type
getColumnType
i
if
type
NUMERIC
block
long
value
getLong
i
put
name
wasNull
Long
value
if
type
DECIMAL
block
double
value
getLong
i
put
name
wasNull
Double
value
block
put
name
getObject
i
return
map
isLogEnabled
boolean
return
logEnabled
info
text
String
println
text
warn
text
String
println
text
error
text
String
println
text
println
prefix
String
text
String
if
logEnabled
block
PrintWriter
writer
source
getLogWriter
println
java
util
Date
prefix
text
flush
LockInfo
Thread
thread
int
level
LockInfo
t
Thread
thread
t
incrementLevel
level
decrementLevel
level
getLevel
int
return
level
getThread
Thread
return
thread
TypeInfo
String
typeName
int
precision
int
sqlType
TypeInfo
sqlType
int
typeName
String
precision
int
sqlType
sqlType
typeName
typeName
precision
precision
getDeclaration
String
if
sqlType
VARCHAR
block
return
typeName
precision
block
return
typeName
Database
