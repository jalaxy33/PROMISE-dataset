package
org
.
apache
.
log4j
.
spi
;
import
org
.
apache
.
log4j
.
Category
;
import
org
.
apache
.
log4j
.
Priority
;
import
org
.
apache
.
log4j
.
NDC
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
java
.
io
.
StringWriter
;
import
java
.
io
.
PrintWriter
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
io
.
ObjectOutputStream
;
import
java
.
io
.
ObjectInputStream
;
import
java
.
util
.
Hashtable
;
public
class
LoggingEvent
implements
java
.
io
.
Serializable
{
private
static
long
startTime
=
System
.
currentTimeMillis
(
)
;
transient
public
final
String
fqnOfCategoryClass
;
transient
public
Category
category
;
public
final
String
categoryName
;
transient
public
Priority
priority
;
private
String
ndc
;
private
boolean
ndcLookupRequired
=
true
;
transient
private
Object
message
;
private
String
renderedMessage
;
private
String
threadName
;
private
ThrowableInformation
throwableInfo
;
public
final
long
timeStamp
;
private
LocationInfo
locationInfo
;
static
final
long
serialVersionUID
=
-
868428216207166145L
;
static
final
Integer
[
]
PARAM_ARRAY
=
new
Integer
[
1
]
;
static
final
String
TO_PRIORITY
=
"toPriority"
;
static
final
Class
[
]
TO_PRIORITY_PARAMS
=
new
Class
[
]
{
int
.
class
}
;
static
final
Hashtable
methodCache
=
new
Hashtable
(
3
)
;
public
LoggingEvent
(
String
fqnOfCategoryClass
,
Category
category
,
Priority
priority
,
Object
message
,
Throwable
throwable
)
{
this
.
fqnOfCategoryClass
=
fqnOfCategoryClass
;
this
.
category
=
category
;
this
.
categoryName
=
category
.
getName
(
)
;
this
.
priority
=
priority
;
this
.
message
=
message
;
if
(
throwable
!=
null
)
{
this
.
throwableInfo
=
new
ThrowableInformation
(
throwable
)
;
}
timeStamp
=
System
.
currentTimeMillis
(
)
;
}
public
LocationInfo
getLocationInformation
(
)
{
if
(
locationInfo
==
null
)
{
locationInfo
=
new
LocationInfo
(
new
Throwable
(
)
,
fqnOfCategoryClass
)
;
}
return
locationInfo
;
}
public
Object
getMessage
(
)
{
if
(
message
!=
null
)
{
return
message
;
}
else
{
return
getRenderedMessage
(
)
;
}
}
public
String
getNDC
(
)
{
if
(
ndcLookupRequired
)
{
ndcLookupRequired
=
false
;
ndc
=
NDC
.
get
(
)
;
}
return
ndc
;
}
public
String
getRenderedMessage
(
)
{
if
(
renderedMessage
==
null
&&
message
!=
null
)
{
if
(
message
instanceof
String
)
renderedMessage
=
(
String
)
message
;
else
{
renderedMessage
=
category
.
getHierarchy
(
)
.
getRendererMap
(
)
.
findAndRender
(
message
)
;
}
}
return
renderedMessage
;
}
public
static
long
getStartTime
(
)
{
return
startTime
;
}
public
String
getThreadName
(
)
{
if
(
threadName
==
null
)
threadName
=
(
Thread
.
currentThread
(
)
)
.
getName
(
)
;
return
threadName
;
}
public
ThrowableInformation
getThrowableInformation
(
)
{
return
throwableInfo
;
}
public
String
[
]
getThrowableStrRep
(
)
{
if
(
throwableInfo
==
null
)
return
null
;
else
return
throwableInfo
.
getThrowableStrRep
(
)
;
}
private
void
readPriority
(
ObjectInputStream
ois
)
throws
java
.
io
.
IOException
,
ClassNotFoundException
{
int
p
=
ois
.
readInt
(
)
;
try
{
String
className
=
(
String
)
ois
.
readObject
(
)
;
if
(
className
==
null
)
{
priority
=
Priority
.
toPriority
(
p
)
;
}
else
{
Method
m
=
(
Method
)
methodCache
.
get
(
className
)
;
if
(
m
==
null
)
{
Class
clazz
=
Class
.
forName
(
className
)
;
m
=
clazz
.
getDeclaredMethod
(
TO_PRIORITY
,
TO_PRIORITY_PARAMS
)
;
methodCache
.
put
(
className
,
m
)
;
}
PARAM_ARRAY
[
0
]
=
new
Integer
(
p
)
;
priority
=
(
Priority
)
m
.
invoke
(
null
,
PARAM_ARRAY
)
;
}
}
catch
(
Exception
e
)
{
LogLog
.
warn
(
"Priority deserialization failed, reverting to default."
,
e
)
;
priority
=
Priority
.
toPriority
(
p
)
;
}
}
private
void
readObject
(
ObjectInputStream
ois
)
throws
java
.
io
.
IOException
,
ClassNotFoundException
{
ois
.
defaultReadObject
(
)
;
readPriority
(
ois
)
;
if
(
locationInfo
==
null
)
locationInfo
=
new
LocationInfo
(
null
,
null
)
;
}
private
void
writeObject
(
ObjectOutputStream
oos
)
throws
java
.
io
.
IOException
{
this
.
getThreadName
(
)
;
this
.
getRenderedMessage
(
)
;
this
.
getNDC
(
)
;
this
.
getThrowableStrRep
(
)
;
oos
.
defaultWriteObject
(
)
;
writePriority
(
oos
)
;
}
private
void
writePriority
(
ObjectOutputStream
oos
)
throws
java
.
io
.
IOException
{
oos
.
writeInt
(
priority
.
toInt
(
)
)
;
Class
clazz
=
priority
.
getClass
(
)
;
if
(
clazz
==
Priority
.
class
)
{
oos
.
writeObject
(
null
)
;
}
else
{
oos
.
writeObject
(
clazz
.
getName
(
)
)
;
}
}
}
