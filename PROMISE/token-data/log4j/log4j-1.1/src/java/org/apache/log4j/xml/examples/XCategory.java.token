package
org
.
apache
.
log4j
.
xml
.
examples
;
import
org
.
apache
.
log4j
.
Category
;
import
org
.
apache
.
log4j
.
Priority
;
import
org
.
apache
.
log4j
.
spi
.
OptionHandler
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
import
org
.
apache
.
log4j
.
spi
.
CategoryFactory
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
org
.
apache
.
log4j
.
xml
.
examples
.
XPriority
;
public
class
XCategory
extends
Category
implements
OptionHandler
{
final
private
static
String
FQCN
=
XCategory
.
class
.
getName
(
)
;
private
static
XFactory
factory
=
new
XFactory
(
)
;
public
static
final
String
SUFFIX_OPTION
=
"Suffix"
;
String
suffix
=
""
;
protected
XCategory
(
String
name
)
{
super
(
name
)
;
}
public
void
activateOptions
(
)
{
}
public
void
debug
(
String
message
)
{
super
.
debug
(
message
+
" "
+
suffix
)
;
}
public
static
Category
getInstance
(
String
name
)
{
return
Category
.
getInstance
(
name
,
factory
)
;
}
public
static
Category
getInstance
(
Class
clazz
)
{
return
getInstance
(
clazz
.
getName
(
)
,
factory
)
;
}
public
String
[
]
getOptionStrings
(
)
{
return
(
new
String
[
]
{
SUFFIX_OPTION
}
)
;
}
public
void
lethal
(
String
message
,
Throwable
t
)
{
if
(
hierarchy
.
isDisabled
(
XPriority
.
LETHAL_INT
)
)
return
;
if
(
XPriority
.
LETHAL
.
isGreaterOrEqual
(
this
.
getChainedPriority
(
)
)
)
forcedLog
(
FQCN
,
XPriority
.
LETHAL
,
message
,
t
)
;
}
public
void
lethal
(
String
message
)
{
if
(
hierarchy
.
isDisabled
(
XPriority
.
LETHAL_INT
)
)
return
;
if
(
XPriority
.
LETHAL
.
isGreaterOrEqual
(
this
.
getChainedPriority
(
)
)
)
forcedLog
(
FQCN
,
XPriority
.
LETHAL
,
message
,
null
)
;
}
public
void
setOption
(
String
option
,
String
value
)
{
if
(
option
==
null
)
{
return
;
}
if
(
option
.
equalsIgnoreCase
(
SUFFIX_OPTION
)
)
{
this
.
suffix
=
value
;
LogLog
.
debug
(
"Setting suffix to"
+
suffix
)
;
}
}
public
String
getOption
(
String
option
)
{
if
(
option
.
equalsIgnoreCase
(
SUFFIX_OPTION
)
)
{
return
this
.
suffix
;
}
return
null
;
}
public
void
trace
(
String
message
,
Throwable
t
)
{
if
(
hierarchy
.
isDisabled
(
XPriority
.
TRACE_INT
)
)
return
;
if
(
XPriority
.
TRACE
.
isGreaterOrEqual
(
this
.
getChainedPriority
(
)
)
)
forcedLog
(
FQCN
,
XPriority
.
TRACE
,
message
,
t
)
;
}
public
void
trace
(
String
message
)
{
if
(
hierarchy
.
isDisabled
(
XPriority
.
TRACE_INT
)
)
return
;
if
(
XPriority
.
TRACE
.
isGreaterOrEqual
(
this
.
getChainedPriority
(
)
)
)
callAppenders
(
new
LoggingEvent
(
FQCN
,
this
,
XPriority
.
TRACE
,
message
,
null
)
)
;
}
public
static
class
XFactory
implements
CategoryFactory
{
public
XFactory
(
)
{
}
public
Category
makeNewCategoryInstance
(
String
name
)
{
return
new
XCategory
(
name
)
;
}
}
}
