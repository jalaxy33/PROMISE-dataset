package
org
.
apache
.
log4j
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
log4j
.
spi
.
RootCategory
;
import
org
.
apache
.
log4j
.
spi
.
CategoryFactory
;
import
org
.
apache
.
log4j
.
or
.
RendererMap
;
import
org
.
apache
.
log4j
.
or
.
ObjectRenderer
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
public
class
Hierarchy
{
static
final
int
DISABLE_OFF
=
-
1
;
static
final
int
DISABLE_OVERRIDE
=
-
2
;
private
CategoryFactory
defaultFactory
;
Hashtable
ht
;
Category
root
;
RendererMap
rendererMap
;
int
disable
;
boolean
emittedNoAppenderWarning
=
false
;
boolean
emittedNoResourceBundleWarning
=
false
;
public
Hierarchy
(
Category
root
)
{
ht
=
new
Hashtable
(
)
;
this
.
root
=
root
;
disable
=
DISABLE_OFF
;
this
.
root
.
setHierarchy
(
this
)
;
rendererMap
=
new
RendererMap
(
)
;
defaultFactory
=
new
DefaultCategoryFactory
(
)
;
}
public
void
addRenderer
(
Class
classToRender
,
ObjectRenderer
or
)
{
rendererMap
.
put
(
classToRender
,
or
)
;
}
public
void
clear
(
)
{
ht
.
clear
(
)
;
}
public
Category
exists
(
String
name
)
{
Object
o
=
ht
.
get
(
new
CategoryKey
(
name
)
)
;
if
(
o
instanceof
Category
)
{
return
(
Category
)
o
;
}
else
{
return
null
;
}
}
public
void
disable
(
String
priorityStr
)
{
if
(
disable
!=
DISABLE_OVERRIDE
)
{
Priority
p
=
Priority
.
toPriority
(
priorityStr
,
null
)
;
if
(
p
!=
null
)
{
disable
=
p
.
level
;
}
else
{
LogLog
.
warn
(
"Could not convert ["
+
priorityStr
+
"] to Priority."
)
;
}
}
}
public
void
disable
(
Priority
p
)
{
if
(
(
disable
!=
DISABLE_OVERRIDE
)
&&
(
p
!=
null
)
)
{
disable
=
p
.
level
;
}
}
public
void
disableAll
(
)
{
disable
(
Priority
.
FATAL
)
;
}
public
void
disableDebug
(
)
{
disable
(
Priority
.
DEBUG
)
;
}
public
void
disableInfo
(
)
{
disable
(
Priority
.
INFO
)
;
}
public
void
enableAll
(
)
{
disable
=
DISABLE_OFF
;
}
public
void
overrideAsNeeded
(
String
override
)
{
if
(
override
!=
null
)
{
LogLog
.
debug
(
"Handling non-null disable override directive: \""
+
override
+
"\"."
)
;
if
(
OptionConverter
.
toBoolean
(
override
,
true
)
)
{
LogLog
.
debug
(
"Overriding all disable methods."
)
;
disable
=
DISABLE_OVERRIDE
;
}
}
}
public
Category
getInstance
(
String
name
)
{
return
getInstance
(
name
,
defaultFactory
)
;
}
public
Category
getInstance
(
String
name
,
CategoryFactory
factory
)
{
CategoryKey
key
=
new
CategoryKey
(
name
)
;
Category
category
;
synchronized
(
ht
)
{
Object
o
=
ht
.
get
(
key
)
;
if
(
o
==
null
)
{
category
=
factory
.
makeNewCategoryInstance
(
name
)
;
category
.
setHierarchy
(
this
)
;
ht
.
put
(
key
,
category
)
;
updateParents
(
category
)
;
return
category
;
}
else
if
(
o
instanceof
Category
)
{
return
(
Category
)
o
;
}
else
if
(
o
instanceof
ProvisionNode
)
{
category
=
factory
.
makeNewCategoryInstance
(
name
)
;
category
.
setHierarchy
(
this
)
;
ht
.
put
(
key
,
category
)
;
updateChildren
(
(
ProvisionNode
)
o
,
category
)
;
updateParents
(
category
)
;
return
category
;
}
else
{
return
null
;
}
}
}
public
Enumeration
getCurrentCategories
(
)
{
Vector
v
=
new
Vector
(
ht
.
size
(
)
)
;
Enumeration
elems
=
ht
.
elements
(
)
;
while
(
elems
.
hasMoreElements
(
)
)
{
Object
o
=
elems
.
nextElement
(
)
;
if
(
o
instanceof
Category
)
{
v
.
addElement
(
o
)
;
}
}
return
v
.
elements
(
)
;
}
public
boolean
isDisabled
(
int
level
)
{
return
disable
>=
level
;
}
public
RendererMap
getRendererMap
(
)
{
return
rendererMap
;
}
public
Category
getRoot
(
)
{
return
root
;
}
public
void
resetConfiguration
(
)
{
getRoot
(
)
.
setPriority
(
Priority
.
DEBUG
)
;
root
.
setResourceBundle
(
null
)
;
disable
=
Hierarchy
.
DISABLE_OFF
;
synchronized
(
ht
)
{
shutdown
(
)
;
Enumeration
cats
=
getCurrentCategories
(
)
;
while
(
cats
.
hasMoreElements
(
)
)
{
Category
c
=
(
Category
)
cats
.
nextElement
(
)
;
c
.
setPriority
(
null
)
;
c
.
setAdditivity
(
true
)
;
c
.
setResourceBundle
(
null
)
;
}
}
rendererMap
.
clear
(
)
;
}
public
void
setCategoryFactory
(
CategoryFactory
factory
)
{
if
(
factory
!=
null
)
{
defaultFactory
=
factory
;
}
}
public
void
setDisableOverride
(
String
override
)
{
if
(
OptionConverter
.
toBoolean
(
override
,
true
)
)
{
LogLog
.
debug
(
"Overriding disable."
)
;
disable
=
DISABLE_OVERRIDE
;
}
}
public
void
shutdown
(
)
{
Category
root
=
getRoot
(
)
;
root
.
closeNestedAppenders
(
)
;
synchronized
(
ht
)
{
Enumeration
cats
=
this
.
getCurrentCategories
(
)
;
while
(
cats
.
hasMoreElements
(
)
)
{
Category
c
=
(
Category
)
cats
.
nextElement
(
)
;
c
.
closeNestedAppenders
(
)
;
}
root
.
removeAllAppenders
(
)
;
cats
=
this
.
getCurrentCategories
(
)
;
while
(
cats
.
hasMoreElements
(
)
)
{
Category
c
=
(
Category
)
cats
.
nextElement
(
)
;
c
.
removeAllAppenders
(
)
;
}
}
}
final
private
void
updateParents
(
Category
cat
)
{
String
name
=
cat
.
name
;
int
length
=
name
.
length
(
)
;
boolean
parentFound
=
false
;
for
(
int
i
=
name
.
lastIndexOf
(
'.'
,
length
-
1
)
;
i
>=
0
;
i
=
name
.
lastIndexOf
(
'.'
,
i
-
1
)
)
{
String
substr
=
name
.
substring
(
0
,
i
)
;
CategoryKey
key
=
new
CategoryKey
(
substr
)
;
Object
o
=
ht
.
get
(
key
)
;
if
(
o
==
null
)
{
ProvisionNode
pn
=
new
ProvisionNode
(
cat
)
;
ht
.
put
(
key
,
pn
)
;
}
else
if
(
o
instanceof
Category
)
{
parentFound
=
true
;
cat
.
parent
=
(
Category
)
o
;
break
;
}
else
if
(
o
instanceof
ProvisionNode
)
{
(
(
ProvisionNode
)
o
)
.
addElement
(
cat
)
;
}
else
{
Exception
e
=
new
IllegalStateException
(
"unexpected object type "
+
o
.
getClass
(
)
+
" in ht."
)
;
e
.
printStackTrace
(
)
;
}
}
if
(
!
parentFound
)
cat
.
parent
=
root
;
}
final
private
void
updateChildren
(
ProvisionNode
pn
,
Category
cat
)
{
final
int
last
=
pn
.
size
(
)
;
for
(
int
i
=
0
;
i
<
last
;
i
++
)
{
Category
c
=
(
Category
)
pn
.
elementAt
(
i
)
;
if
(
!
c
.
parent
.
name
.
startsWith
(
cat
.
name
)
)
{
cat
.
parent
=
c
.
parent
;
c
.
parent
=
cat
;
}
}
}
}
