package
org
.
apache
.
log4j
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
java
.
io
.
FileWriter
;
import
java
.
io
.
File
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
import
org
.
apache
.
log4j
.
helpers
.
QuietWriter
;
import
org
.
apache
.
log4j
.
helpers
.
CountingQuietWriter
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
public
class
RollingFileAppender
extends
FileAppender
{
static
final
public
String
MAX_FILE_SIZE_OPTION
=
"MaxFileSize"
;
static
final
public
String
MAX_BACKUP_INDEX_OPTION
=
"MaxBackupIndex"
;
protected
long
maxFileSize
=
10
*
1024
*
1024
;
protected
int
maxBackupIndex
=
1
;
public
RollingFileAppender
(
)
{
super
(
)
;
}
public
RollingFileAppender
(
Layout
layout
,
OutputStream
os
)
{
super
(
layout
,
os
)
;
}
public
RollingFileAppender
(
Layout
layout
,
Writer
writer
)
{
super
(
layout
,
writer
)
;
}
public
RollingFileAppender
(
Layout
layout
,
String
filename
,
boolean
append
)
throws
IOException
{
super
(
layout
,
filename
,
append
)
;
}
public
RollingFileAppender
(
Layout
layout
,
String
filename
)
throws
IOException
{
super
(
layout
,
filename
)
;
}
public
String
[
]
getOptionStrings
(
)
{
return
OptionConverter
.
concatanateArrays
(
super
.
getOptionStrings
(
)
,
new
String
[
]
{
MAX_FILE_SIZE_OPTION
,
MAX_BACKUP_INDEX_OPTION
}
)
;
}
public
synchronized
void
setFile
(
String
fileName
,
boolean
append
)
throws
IOException
{
super
.
setFile
(
fileName
,
append
)
;
if
(
append
)
{
File
f
=
new
File
(
fileName
)
;
(
(
CountingQuietWriter
)
qw
)
.
setCount
(
f
.
length
(
)
)
;
}
}
public
synchronized
void
rollOver
(
)
{
File
target
;
File
file
;
if
(
maxBackupIndex
>
0
)
{
file
=
new
File
(
fileName
+
'.'
+
maxBackupIndex
)
;
if
(
file
.
exists
(
)
)
file
.
delete
(
)
;
for
(
int
i
=
maxBackupIndex
-
1
;
i
>=
1
;
i
--
)
{
file
=
new
File
(
fileName
+
"."
+
i
)
;
if
(
file
.
exists
(
)
)
{
target
=
new
File
(
fileName
+
'.'
+
(
i
+
1
)
)
;
file
.
renameTo
(
target
)
;
}
}
target
=
new
File
(
fileName
+
"."
+
1
)
;
this
.
closeWriterIfOurs
(
)
;
file
=
new
File
(
fileName
)
;
file
.
renameTo
(
target
)
;
}
try
{
this
.
setFile
(
fileName
,
false
)
;
}
catch
(
IOException
e
)
{
System
.
err
.
println
(
"setFile("
+
fileName
+
", false) call failed."
)
;
e
.
printStackTrace
(
)
;
}
}
public
void
setMaxBackupIndex
(
int
maxBackups
)
{
this
.
maxBackupIndex
=
maxBackups
;
}
public
void
setMaxFileSize
(
long
maxFileSize
)
{
this
.
maxFileSize
=
maxFileSize
;
}
public
void
setOption
(
String
key
,
String
value
)
{
super
.
setOption
(
key
,
value
)
;
if
(
key
.
equalsIgnoreCase
(
MAX_FILE_SIZE_OPTION
)
)
{
maxFileSize
=
OptionConverter
.
toFileSize
(
value
,
maxFileSize
+
1
)
;
}
else
if
(
key
.
equalsIgnoreCase
(
MAX_BACKUP_INDEX_OPTION
)
)
{
maxBackupIndex
=
OptionConverter
.
toInt
(
value
,
maxBackupIndex
)
;
}
}
protected
void
setQWForFiles
(
Writer
writer
)
{
this
.
qw
=
new
CountingQuietWriter
(
writer
,
errorHandler
)
;
}
protected
void
subAppend
(
LoggingEvent
event
)
{
super
.
subAppend
(
event
)
;
if
(
(
fileName
!=
null
)
&&
(
(
CountingQuietWriter
)
qw
)
.
getCount
(
)
>=
maxFileSize
)
this
.
rollOver
(
)
;
}
}
