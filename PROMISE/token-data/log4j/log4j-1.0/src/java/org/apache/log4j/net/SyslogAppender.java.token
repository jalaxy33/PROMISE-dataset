package
org
.
apache
.
log4j
.
net
;
import
java
.
net
.
DatagramSocket
;
import
java
.
net
.
InetAddress
;
import
java
.
net
.
DatagramPacket
;
import
java
.
net
.
UnknownHostException
;
import
java
.
net
.
SocketException
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
import
org
.
apache
.
log4j
.
AppenderSkeleton
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
import
org
.
apache
.
log4j
.
Category
;
import
org
.
apache
.
log4j
.
Priority
;
import
org
.
apache
.
log4j
.
Layout
;
import
org
.
apache
.
log4j
.
helpers
.
SyslogWriter
;
import
org
.
apache
.
log4j
.
helpers
.
SyslogQuietWriter
;
import
org
.
apache
.
log4j
.
net
.
SyslogTracerPrintWriter
;
public
class
SyslogAppender
extends
AppenderSkeleton
{
final
static
public
int
LOG_KERN
=
0
;
final
static
public
int
LOG_USER
=
1
<<
3
;
final
static
public
int
LOG_MAIL
=
2
<<
3
;
final
static
public
int
LOG_DAEMON
=
3
<<
3
;
final
static
public
int
LOG_AUTH
=
4
<<
3
;
final
static
public
int
LOG_SYSLOG
=
5
<<
3
;
final
static
public
int
LOG_LPR
=
6
<<
3
;
final
static
public
int
LOG_NEWS
=
7
<<
3
;
final
static
public
int
LOG_UUCP
=
8
<<
3
;
final
static
public
int
LOG_CRON
=
9
<<
3
;
final
static
public
int
LOG_AUTHPRIV
=
10
<<
3
;
final
static
public
int
LOG_FTP
=
11
<<
3
;
final
static
public
int
LOG_LOCAL0
=
16
<<
3
;
final
static
public
int
LOG_LOCAL1
=
17
<<
3
;
final
static
public
int
LOG_LOCAL2
=
18
<<
3
;
final
static
public
int
LOG_LOCAL3
=
19
<<
3
;
final
static
public
int
LOG_LOCAL4
=
20
<<
3
;
final
static
public
int
LOG_LOCAL5
=
21
<<
3
;
final
static
public
int
LOG_LOCAL6
=
22
<<
3
;
final
static
public
int
LOG_LOCAL7
=
23
<<
3
;
public
static
final
String
SYSLOG_HOST_OPTION
=
"SyslogHost"
;
public
static
final
String
FACILITY_OPTION
=
"Facility"
;
public
static
final
String
FACILITY_PRINTING_OPTION
=
"FacilityPrinting"
;
protected
static
final
int
SYSLOG_HOST_OI
=
0
;
protected
static
final
int
FACILITY_OI
=
1
;
int
syslogFacility
=
LOG_USER
;
String
facilityStr
;
boolean
facilityPrinting
=
false
;
SyslogTracerPrintWriter
stp
;
SyslogQuietWriter
sqw
;
String
syslogHost
;
public
SyslogAppender
(
)
{
this
.
initSyslogFacilityStr
(
this
.
syslogFacility
)
;
}
public
SyslogAppender
(
Layout
layout
,
int
syslogFacility
)
{
this
.
layout
=
layout
;
this
.
syslogFacility
=
syslogFacility
;
this
.
initSyslogFacilityStr
(
syslogFacility
)
;
}
public
SyslogAppender
(
Layout
layout
,
String
syslogHost
,
int
syslogFacility
)
{
this
(
layout
,
syslogFacility
)
;
setSyslogHost
(
syslogHost
)
;
}
public
void
close
(
)
{
closed
=
true
;
sqw
=
null
;
stp
=
null
;
}
private
void
initSyslogFacilityStr
(
int
syslogFacility
)
{
switch
(
syslogFacility
)
{
case
LOG_KERN
:
facilityStr
=
"kern:"
;
break
;
case
LOG_USER
:
facilityStr
=
"user:"
;
break
;
case
LOG_MAIL
:
facilityStr
=
"mail:"
;
break
;
case
LOG_DAEMON
:
facilityStr
=
"daemon:"
;
break
;
case
LOG_AUTH
:
facilityStr
=
"auth:"
;
;
break
;
case
LOG_SYSLOG
:
facilityStr
=
"syslog:"
;
break
;
case
LOG_LPR
:
facilityStr
=
"lpr:"
;
break
;
case
LOG_NEWS
:
facilityStr
=
"news:"
;
break
;
case
LOG_UUCP
:
facilityStr
=
"uucp:"
;
break
;
case
LOG_CRON
:
facilityStr
=
"cron:"
;
break
;
case
LOG_AUTHPRIV
:
facilityStr
=
"authpriv:"
;
break
;
case
LOG_FTP
:
facilityStr
=
"ftp:"
;
break
;
case
LOG_LOCAL0
:
facilityStr
=
"local0:"
;
break
;
case
LOG_LOCAL1
:
facilityStr
=
"local1:"
;
break
;
case
LOG_LOCAL2
:
facilityStr
=
"local2:"
;
break
;
case
LOG_LOCAL3
:
facilityStr
=
"local3:"
;
break
;
case
LOG_LOCAL4
:
facilityStr
=
"local4:"
;
break
;
case
LOG_LOCAL5
:
facilityStr
=
"local5:"
;
break
;
case
LOG_LOCAL6
:
facilityStr
=
"local6:"
;
break
;
case
LOG_LOCAL7
:
facilityStr
=
"local7:"
;
break
;
default
:
System
.
err
.
println
(
"\""
+
syslogFacility
+
"\" is an unknown syslog facility. Defaulting to \"USER\"."
)
;
this
.
syslogFacility
=
LOG_USER
;
facilityStr
=
"user:"
;
}
}
public
void
append
(
LoggingEvent
event
)
{
if
(
!
isAsSevereAsThreshold
(
event
.
priority
)
)
return
;
if
(
sqw
==
null
)
{
errorHandler
.
error
(
"No syslog host is set for SyslogAppedender named \""
+
this
.
name
+
"\"."
)
;
return
;
}
String
buffer
=
(
facilityPrinting
?
facilityStr
:
""
)
+
layout
.
format
(
event
)
;
sqw
.
setPriority
(
event
.
priority
.
getSyslogEquivalent
(
)
)
;
sqw
.
write
(
buffer
)
;
if
(
event
.
throwable
!=
null
)
event
.
throwable
.
printStackTrace
(
stp
)
;
else
if
(
event
.
throwableInformation
!=
null
)
{
sqw
.
write
(
event
.
throwableInformation
)
;
}
}
public
void
activateOptions
(
)
{
}
public
String
[
]
getOptionStrings
(
)
{
return
OptionConverter
.
concatanateArrays
(
super
.
getOptionStrings
(
)
,
new
String
[
]
{
SYSLOG_HOST_OPTION
,
FACILITY_OPTION
,
FACILITY_PRINTING_OPTION
}
)
;
}
public
boolean
requiresLayout
(
)
{
return
true
;
}
public
void
setFacility
(
String
facilityName
)
{
if
(
facilityName
==
null
)
return
;
if
(
"KERN"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_KERN
;
else
if
(
"USER"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_USER
;
else
if
(
"MAIL"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_MAIL
;
else
if
(
"DAEMON"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_DAEMON
;
else
if
(
"AUTH"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_AUTH
;
else
if
(
"SYSLOG"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_SYSLOG
;
else
if
(
"LPR"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_LPR
;
else
if
(
"NEWS"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_NEWS
;
else
if
(
"UUCP"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_UUCP
;
else
if
(
"CRON"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_CRON
;
else
if
(
"AUTHPRIV"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_AUTHPRIV
;
else
if
(
"FTP"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_FTP
;
else
if
(
"LOCAL0"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_LOCAL0
;
else
if
(
"LOCAL1"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_LOCAL1
;
else
if
(
"LOCAL2"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_LOCAL2
;
else
if
(
"LOCAL3"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_LOCAL3
;
else
if
(
"LOCAL4"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_LOCAL4
;
else
if
(
"LOCAL5"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_LOCAL5
;
else
if
(
"LOCAL6"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_LOCAL6
;
else
if
(
"LOCAL7"
.
equalsIgnoreCase
(
facilityName
)
)
this
.
syslogFacility
=
LOG_LOCAL7
;
else
{
System
.
err
.
println
(
facilityName
+
" is an unknown syslog facility. Defaulting to \"USER\"."
)
;
this
.
syslogFacility
=
LOG_USER
;
}
this
.
initSyslogFacilityStr
(
this
.
syslogFacility
)
;
if
(
sqw
!=
null
)
{
sqw
.
setSyslogFacility
(
this
.
syslogFacility
)
;
}
}
public
void
setOption
(
String
option
,
String
value
)
{
if
(
value
==
null
)
return
;
super
.
setOption
(
option
,
value
)
;
if
(
option
.
equals
(
SYSLOG_HOST_OPTION
)
)
this
.
setSyslogHost
(
value
)
;
else
if
(
option
.
equals
(
FACILITY_PRINTING_OPTION
)
)
facilityPrinting
=
OptionConverter
.
toBoolean
(
value
,
facilityPrinting
)
;
else
if
(
option
.
equals
(
FACILITY_OPTION
)
)
{
this
.
setFacility
(
value
)
;
}
}
public
void
setSyslogHost
(
String
syslogHost
)
{
this
.
sqw
=
new
SyslogQuietWriter
(
new
SyslogWriter
(
syslogHost
)
,
syslogFacility
,
errorHandler
)
;
this
.
stp
=
new
SyslogTracerPrintWriter
(
sqw
)
;
this
.
syslogHost
=
syslogHost
;
}
}
