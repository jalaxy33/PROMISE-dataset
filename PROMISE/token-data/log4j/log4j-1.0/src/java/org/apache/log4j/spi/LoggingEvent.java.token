package
org
.
apache
.
log4j
.
spi
;
import
org
.
apache
.
log4j
.
Category
;
import
org
.
apache
.
log4j
.
Priority
;
import
org
.
apache
.
log4j
.
NDC
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
java
.
io
.
StringWriter
;
import
java
.
io
.
PrintWriter
;
import
java
.
io
.
ObjectOutputStream
;
import
java
.
io
.
ObjectInputStream
;
public
class
LoggingEvent
implements
java
.
io
.
Serializable
{
private
static
long
startTime
=
System
.
currentTimeMillis
(
)
;
transient
public
String
fqnOfCategoryClass
;
public
String
categoryName
;
transient
public
Priority
priority
;
public
String
ndc
;
public
boolean
ndcLookupRequired
=
true
;
public
String
message
;
public
String
threadName
;
transient
public
Throwable
throwable
;
public
String
throwableInformation
;
public
long
timeStamp
;
public
LocationInfo
locationInfo
;
static
final
long
serialVersionUID
=
-
868428216207166145L
;
public
LoggingEvent
(
String
fqnOfCategoryClass
,
Category
category
,
Priority
priority
,
String
message
,
Throwable
throwable
)
{
this
.
fqnOfCategoryClass
=
fqnOfCategoryClass
;
this
.
categoryName
=
category
.
getName
(
)
;
this
.
priority
=
priority
;
this
.
message
=
message
;
this
.
throwable
=
throwable
;
timeStamp
=
System
.
currentTimeMillis
(
)
;
}
public
static
long
getStartTime
(
)
{
return
startTime
;
}
public
String
getNDC
(
)
{
if
(
ndcLookupRequired
)
{
ndcLookupRequired
=
false
;
ndc
=
NDC
.
get
(
)
;
}
return
ndc
;
}
public
String
getThreadName
(
)
{
if
(
threadName
==
null
)
threadName
=
(
Thread
.
currentThread
(
)
)
.
getName
(
)
;
return
threadName
;
}
public
String
getThrowableInformation
(
)
{
if
(
throwable
==
null
)
{
return
null
;
}
if
(
throwableInformation
==
null
)
{
StringWriter
sw
=
new
StringWriter
(
)
;
PrintWriter
pw
=
new
PrintWriter
(
sw
)
;
throwable
.
printStackTrace
(
pw
)
;
throwableInformation
=
sw
.
toString
(
)
;
}
return
throwableInformation
;
}
private
void
writeObject
(
ObjectOutputStream
oos
)
throws
java
.
io
.
IOException
{
this
.
getThreadName
(
)
;
this
.
getNDC
(
)
;
this
.
getThrowableInformation
(
)
;
oos
.
defaultWriteObject
(
)
;
oos
.
writeInt
(
priority
.
toInt
(
)
)
;
}
private
void
readObject
(
ObjectInputStream
ois
)
throws
java
.
io
.
IOException
,
ClassNotFoundException
{
ois
.
defaultReadObject
(
)
;
priority
=
Priority
.
toPriority
(
ois
.
readInt
(
)
)
;
if
(
locationInfo
==
null
)
locationInfo
=
new
LocationInfo
(
null
,
null
)
;
}
public
void
setLocationInformation
(
)
{
if
(
locationInfo
==
null
)
{
locationInfo
=
new
LocationInfo
(
new
Throwable
(
)
,
fqnOfCategoryClass
)
;
}
}
}
