package
org
.
apache
.
log4j
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
java
.
io
.
FileWriter
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
org
.
apache
.
log4j
.
spi
.
ErrorHandler
;
import
org
.
apache
.
log4j
.
spi
.
ErrorCode
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
import
org
.
apache
.
log4j
.
helpers
.
QuietWriter
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
org
.
apache
.
log4j
.
helpers
.
TracerPrintWriter
;
public
class
FileAppender
extends
AppenderSkeleton
{
public
static
final
String
FILE_OPTION
=
"File"
;
public
static
final
String
IMMEDIATE_FLUSH_OPTION
=
"ImmediateFlush"
;
public
static
final
String
APPEND_OPTION
=
"Append"
;
protected
boolean
fileAppend
=
true
;
protected
boolean
immediateFlush
=
true
;
protected
QuietWriter
qw
;
protected
TracerPrintWriter
tp
;
protected
String
fileName
=
null
;
protected
boolean
qwIsOurs
=
false
;
public
FileAppender
(
)
{
}
public
FileAppender
(
Layout
layout
,
OutputStream
os
)
{
this
(
layout
,
new
OutputStreamWriter
(
os
)
)
;
}
public
FileAppender
(
Layout
layout
,
Writer
writer
)
{
this
.
layout
=
layout
;
this
.
setWriter
(
writer
)
;
}
public
FileAppender
(
Layout
layout
,
String
filename
,
boolean
append
)
throws
IOException
{
this
.
layout
=
layout
;
this
.
setFile
(
filename
,
append
)
;
}
public
FileAppender
(
Layout
layout
,
String
filename
)
throws
IOException
{
this
(
layout
,
filename
,
true
)
;
}
public
void
activateOptions
(
)
{
if
(
fileName
!=
null
)
{
try
{
setFile
(
fileName
,
fileAppend
)
;
}
catch
(
java
.
io
.
IOException
e
)
{
errorHandler
.
error
(
"setFile("
+
fileName
+
","
+
fileAppend
+
") call failed."
,
e
,
ErrorCode
.
FILE_OPEN_FAILURE
)
;
}
}
}
public
void
append
(
LoggingEvent
event
)
{
if
(
!
checkEntryConditions
(
)
)
{
return
;
}
subAppend
(
event
)
;
}
protected
boolean
checkEntryConditions
(
)
{
if
(
this
.
qw
==
null
)
{
errorHandler
.
error
(
"No output target set for appender named \""
+
name
+
"\"."
)
;
return
false
;
}
if
(
this
.
layout
==
null
)
{
errorHandler
.
error
(
"No layout set for appender named \""
+
name
+
"\"."
)
;
return
false
;
}
return
true
;
}
public
void
close
(
)
{
this
.
closed
=
true
;
reset
(
)
;
}
protected
void
closeWriterIfOurs
(
)
{
if
(
this
.
qwIsOurs
&&
this
.
qw
!=
null
)
{
try
{
this
.
qw
.
close
(
)
;
}
catch
(
java
.
io
.
IOException
e
)
{
LogLog
.
error
(
"Could not close output stream "
+
qw
,
e
)
;
}
}
}
public
String
[
]
getOptionStrings
(
)
{
return
OptionConverter
.
concatanateArrays
(
super
.
getOptionStrings
(
)
,
new
String
[
]
{
FILE_OPTION
,
APPEND_OPTION
,
IMMEDIATE_FLUSH_OPTION
}
)
;
}
public
synchronized
void
setErrorHandler
(
ErrorHandler
eh
)
{
this
.
errorHandler
=
eh
;
if
(
this
.
qwIsOurs
&&
this
.
qw
!=
null
)
{
this
.
qw
.
setErrorHandler
(
eh
)
;
}
}
public
synchronized
void
setFile
(
String
fileName
,
boolean
append
)
throws
IOException
{
reset
(
)
;
this
.
setQWForFiles
(
new
FileWriter
(
fileName
,
append
)
)
;
this
.
tp
=
new
TracerPrintWriter
(
qw
)
;
this
.
fileName
=
fileName
;
this
.
qwIsOurs
=
true
;
}
public
void
setFile
(
String
fileName
)
throws
IOException
{
this
.
setFile
(
fileName
,
fileAppend
)
;
}
public
void
setOption
(
String
key
,
String
value
)
{
if
(
value
==
null
)
return
;
super
.
setOption
(
key
,
value
)
;
if
(
key
.
equalsIgnoreCase
(
FILE_OPTION
)
)
{
value
=
value
.
trim
(
)
;
if
(
value
.
equalsIgnoreCase
(
"System.out"
)
)
setWriter
(
new
OutputStreamWriter
(
System
.
out
)
)
;
else
if
(
value
.
equalsIgnoreCase
(
"System.err"
)
)
setWriter
(
new
OutputStreamWriter
(
System
.
err
)
)
;
else
{
fileName
=
value
;
}
}
else
if
(
key
.
equalsIgnoreCase
(
APPEND_OPTION
)
)
{
fileAppend
=
OptionConverter
.
toBoolean
(
value
,
fileAppend
)
;
}
else
if
(
key
.
equalsIgnoreCase
(
IMMEDIATE_FLUSH_OPTION
)
)
{
immediateFlush
=
OptionConverter
.
toBoolean
(
value
,
immediateFlush
)
;
}
}
public
synchronized
void
setWriter
(
Writer
writer
)
{
reset
(
)
;
this
.
qw
=
new
QuietWriter
(
writer
,
errorHandler
)
;
this
.
tp
=
new
TracerPrintWriter
(
qw
)
;
this
.
qwIsOurs
=
false
;
}
protected
void
setQWForFiles
(
Writer
writer
)
{
this
.
qw
=
new
QuietWriter
(
writer
,
errorHandler
)
;
}
protected
void
subAppend
(
LoggingEvent
event
)
{
this
.
qw
.
write
(
this
.
layout
.
format
(
event
)
)
;
if
(
layout
.
ignoresThrowable
(
)
)
{
if
(
event
.
throwable
!=
null
)
{
event
.
throwable
.
printStackTrace
(
this
.
tp
)
;
}
else
if
(
event
.
throwableInformation
!=
null
)
{
this
.
qw
.
write
(
event
.
throwableInformation
)
;
}
}
if
(
this
.
immediateFlush
)
{
this
.
qw
.
flush
(
)
;
}
}
public
boolean
requiresLayout
(
)
{
return
true
;
}
protected
void
reset
(
)
{
closeWriterIfOurs
(
)
;
this
.
fileName
=
null
;
this
.
qw
=
null
;
this
.
tp
=
null
;
}
}
