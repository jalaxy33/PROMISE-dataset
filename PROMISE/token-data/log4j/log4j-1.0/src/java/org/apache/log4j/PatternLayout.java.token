package
org
.
apache
.
log4j
;
import
org
.
apache
.
log4j
.
Category
;
import
org
.
apache
.
log4j
.
Priority
;
import
org
.
apache
.
log4j
.
Layout
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
import
org
.
apache
.
log4j
.
NDC
;
import
org
.
apache
.
log4j
.
helpers
.
PatternParser
;
import
org
.
apache
.
log4j
.
helpers
.
PatternConverter
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
import
java
.
io
.
PrintWriter
;
import
java
.
io
.
StringWriter
;
import
java
.
text
.
DateFormat
;
import
java
.
text
.
SimpleDateFormat
;
import
java
.
util
.
Date
;
import
java
.
util
.
TimeZone
;
import
java
.
util
.
Vector
;
import
java
.
text
.
FieldPosition
;
public
class
PatternLayout
extends
Layout
{
final
static
public
String
CONVERSION_PATTERN_OPTION
=
"ConversionPattern"
;
public
final
static
String
DEFAULT_CONVERSION_PATTERN
=
"%m\n"
;
public
final
static
String
TTCC_CONVERSION_PATTERN
=
"%r [%t] %p %c %x - %m%n"
;
protected
final
int
BUF_SIZE
=
256
;
protected
final
int
MAX_CAPACITY
=
1024
;
private
StringBuffer
sbuf
=
new
StringBuffer
(
BUF_SIZE
)
;
private
PatternConverter
head
;
private
String
timezone
;
public
PatternLayout
(
)
{
this
(
DEFAULT_CONVERSION_PATTERN
)
;
}
public
PatternLayout
(
String
pattern
)
{
head
=
createPatternParser
(
(
pattern
==
null
)
?
DEFAULT_CONVERSION_PATTERN
:
pattern
)
.
parse
(
)
;
}
public
void
activateOptions
(
)
{
}
protected
PatternParser
createPatternParser
(
String
pattern
)
{
return
new
PatternParser
(
pattern
)
;
}
public
String
format
(
LoggingEvent
event
)
{
if
(
sbuf
.
capacity
(
)
>
MAX_CAPACITY
)
{
sbuf
=
new
StringBuffer
(
BUF_SIZE
)
;
}
else
{
sbuf
.
setLength
(
0
)
;
}
PatternConverter
c
=
head
;
while
(
c
!=
null
)
{
c
.
format
(
sbuf
,
event
)
;
c
=
c
.
next
;
}
return
sbuf
.
toString
(
)
;
}
public
String
[
]
getOptionStrings
(
)
{
return
new
String
[
]
{
CONVERSION_PATTERN_OPTION
}
;
}
public
boolean
ignoresThrowable
(
)
{
return
true
;
}
public
void
setConversionPattern
(
String
conversionPattern
)
{
setOption
(
CONVERSION_PATTERN_OPTION
,
conversionPattern
)
;
}
public
void
setOption
(
String
option
,
String
value
)
{
if
(
value
==
null
)
return
;
if
(
option
.
equalsIgnoreCase
(
CONVERSION_PATTERN_OPTION
)
)
{
head
=
createPatternParser
(
value
)
.
parse
(
)
;
}
}
}
