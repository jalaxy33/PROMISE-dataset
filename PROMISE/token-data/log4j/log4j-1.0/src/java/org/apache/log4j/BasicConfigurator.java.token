package
org
.
apache
.
log4j
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
import
org
.
apache
.
log4j
.
or
.
ObjectRenderer
;
import
org
.
apache
.
log4j
.
or
.
RendererMap
;
import
java
.
util
.
Enumeration
;
public
class
BasicConfigurator
{
public
static
final
String
DISABLE_OVERRIDE_KEY
=
"log4j.disableOverride"
;
public
static
final
String
INHERITED
=
"inherited"
;
static
{
String
override
=
null
;
String
propertyName
=
DISABLE_OVERRIDE_KEY
;
try
{
override
=
System
.
getProperty
(
propertyName
,
override
)
;
}
catch
(
SecurityException
e
)
{
LogLog
.
debug
(
"Could not read system property \""
+
propertyName
+
"\"."
,
e
)
;
}
if
(
override
!=
null
)
{
if
(
OptionConverter
.
toBoolean
(
override
,
true
)
)
{
LogLog
.
debug
(
"Overriding disable. Non-null system property "
+
DISABLE_OVERRIDE_KEY
+
"=["
+
override
+
"]."
)
;
Category
.
disable
=
Category
.
DISABLE_OVERRIDE
;
}
}
}
protected
BasicConfigurator
(
)
{
}
protected
void
addRenderer
(
String
renderedClassName
,
String
renderingClassName
)
{
LogLog
.
debug
(
"Rendering class: ["
+
renderingClassName
+
"], Rendered class: ["
+
renderedClassName
+
"]."
)
;
ObjectRenderer
renderer
=
(
ObjectRenderer
)
OptionConverter
.
instantiateByClassName
(
renderingClassName
,
ObjectRenderer
.
class
,
null
)
;
if
(
renderer
==
null
)
{
LogLog
.
error
(
"Could not isntantiate renderer ["
+
renderingClassName
+
"]."
)
;
return
;
}
else
{
try
{
Class
renderedClass
=
Class
.
forName
(
renderedClassName
)
;
Category
.
defaultHierarchy
.
rendererMap
.
put
(
renderedClass
,
renderer
)
;
}
catch
(
ClassNotFoundException
e
)
{
LogLog
.
error
(
"Could not find class ["
+
renderedClassName
+
"]."
,
e
)
;
}
}
}
static
public
void
configure
(
)
{
Category
root
=
Category
.
getRoot
(
)
;
root
.
addAppender
(
new
FileAppender
(
new
PatternLayout
(
PatternLayout
.
TTCC_CONVERSION_PATTERN
)
,
System
.
out
)
)
;
}
static
public
void
configure
(
Appender
appender
)
{
Category
root
=
Category
.
getRoot
(
)
;
root
.
addAppender
(
appender
)
;
}
static
public
void
disable
(
Priority
p
)
{
if
(
Category
.
disable
!=
Category
.
DISABLE_OVERRIDE
)
{
Category
.
disable
=
p
.
level
;
}
}
static
public
void
disableAll
(
)
{
disable
(
Priority
.
FATAL
)
;
}
static
public
void
disableDebug
(
)
{
disable
(
Priority
.
DEBUG
)
;
}
static
public
void
disableInfo
(
)
{
disable
(
Priority
.
INFO
)
;
}
static
public
void
enableAll
(
)
{
Category
.
disable
=
Category
.
DISABLE_OFF
;
}
public
static
void
flagAsShippedCode
(
)
{
disableInfo
(
)
;
}
protected
static
void
overrideAsNeeded
(
String
override
)
{
if
(
override
!=
null
)
{
LogLog
.
debug
(
"Handling non-null disable override directive: \""
+
override
+
"\"."
)
;
if
(
OptionConverter
.
toBoolean
(
override
,
true
)
)
{
LogLog
.
debug
(
"Overriding all disable methods."
)
;
Category
.
disable
=
Category
.
DISABLE_OVERRIDE
;
}
}
}
public
static
void
resetConfiguration
(
)
{
Category
.
defaultHierarchy
.
getRoot
(
)
.
setPriority
(
Priority
.
DEBUG
)
;
Category
.
defaultHierarchy
.
root
.
setResourceBundle
(
null
)
;
Category
.
disable
=
Category
.
DISABLE_OFF
;
synchronized
(
Category
.
defaultHierarchy
.
ht
)
{
Category
.
defaultHierarchy
.
shutdown
(
)
;
Enumeration
cats
=
Category
.
getCurrentCategories
(
)
;
while
(
cats
.
hasMoreElements
(
)
)
{
Category
c
=
(
Category
)
cats
.
nextElement
(
)
;
c
.
setPriority
(
null
)
;
c
.
setAdditivity
(
true
)
;
c
.
setResourceBundle
(
null
)
;
}
}
Category
.
defaultHierarchy
.
rendererMap
.
clear
(
)
;
}
}
