package
org
.
apache
.
log4j
.
varia
;
import
java
.
io
.
*
;
import
java
.
net
.
Socket
;
import
java
.
net
.
ServerSocket
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
org
.
apache
.
log4j
.
RollingFileAppender
;
import
org
.
apache
.
log4j
.
Layout
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
public
class
ExternallyRolledFileAppender
extends
RollingFileAppender
{
static
final
public
String
PORT_OPTION
=
"Port"
;
static
final
public
String
ROLL_OVER
=
"RollOver"
;
static
final
public
String
OK
=
"OK"
;
int
port
=
0
;
HUP
hup
;
public
ExternallyRolledFileAppender
(
)
{
}
public
void
activateOptions
(
)
{
super
.
activateOptions
(
)
;
if
(
port
!=
0
)
{
if
(
hup
!=
null
)
{
hup
.
interrupt
(
)
;
}
hup
=
new
HUP
(
this
,
port
)
;
hup
.
setDaemon
(
true
)
;
hup
.
start
(
)
;
}
}
public
String
[
]
getOptionStrings
(
)
{
return
OptionConverter
.
concatanateArrays
(
super
.
getOptionStrings
(
)
,
new
String
[
]
{
PORT_OPTION
}
)
;
}
public
void
setOption
(
String
option
,
String
value
)
{
super
.
setOption
(
option
,
value
)
;
if
(
option
.
equalsIgnoreCase
(
PORT_OPTION
)
)
{
port
=
OptionConverter
.
toInt
(
value
,
port
)
;
LogLog
.
debug
(
"Port option set to "
+
port
)
;
}
}
}
class
HUP
extends
Thread
{
int
port
;
ExternallyRolledFileAppender
er
;
HUP
(
ExternallyRolledFileAppender
er
,
int
port
)
{
this
.
er
=
er
;
this
.
port
=
port
;
}
public
void
run
(
)
{
while
(
!
isInterrupted
(
)
)
{
try
{
ServerSocket
serverSocket
=
new
ServerSocket
(
port
)
;
while
(
true
)
{
Socket
socket
=
serverSocket
.
accept
(
)
;
LogLog
.
debug
(
"Connected to client at "
+
socket
.
getInetAddress
(
)
)
;
new
Thread
(
new
HUPNode
(
socket
,
er
)
)
.
start
(
)
;
}
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
}
}
}
class
HUPNode
implements
Runnable
{
Socket
socket
;
DataInputStream
dis
;
DataOutputStream
dos
;
ExternallyRolledFileAppender
er
;
public
HUPNode
(
Socket
socket
,
ExternallyRolledFileAppender
er
)
{
this
.
socket
=
socket
;
this
.
er
=
er
;
try
{
dis
=
new
DataInputStream
(
socket
.
getInputStream
(
)
)
;
dos
=
new
DataOutputStream
(
socket
.
getOutputStream
(
)
)
;
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
}
public
void
run
(
)
{
try
{
String
line
=
dis
.
readUTF
(
)
;
LogLog
.
debug
(
"Got external roll over signal."
)
;
if
(
ExternallyRolledFileAppender
.
ROLL_OVER
.
equals
(
line
)
)
{
synchronized
(
er
)
{
er
.
rollOver
(
)
;
}
dos
.
writeUTF
(
ExternallyRolledFileAppender
.
OK
)
;
}
else
{
dos
.
writeUTF
(
"Expecting [RollOver] string."
)
;
}
dos
.
close
(
)
;
}
catch
(
Exception
e
)
{
LogLog
.
error
(
"Unexptected exception. Exiting HUPNode."
,
e
)
;
}
}
}
