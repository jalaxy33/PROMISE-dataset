package
org
.
apache
.
log4j
.
net
;
import
org
.
apache
.
log4j
.
AppenderSkeleton
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
import
org
.
apache
.
log4j
.
spi
.
ErrorCode
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
javax
.
jms
.
*
;
import
javax
.
naming
.
InitialContext
;
import
javax
.
naming
.
Context
;
import
javax
.
naming
.
NameNotFoundException
;
import
javax
.
naming
.
NamingException
;
public
class
JMSAppender
extends
AppenderSkeleton
{
TopicConnection
topicConnection
;
TopicSession
topicSession
;
TopicPublisher
topicPublisher
;
String
topicBindingName
;
String
tcfBindingName
;
boolean
locationInfo
;
public
JMSAppender
(
)
{
}
public
void
setTopicConnectionFactoryBindingName
(
String
tcfBindingName
)
{
this
.
tcfBindingName
=
tcfBindingName
;
}
public
String
getTopicConnectionFactoryBindingName
(
)
{
return
tcfBindingName
;
}
public
void
setTopicBindingName
(
String
topicBindingName
)
{
this
.
topicBindingName
=
topicBindingName
;
}
public
String
getTopicBindingName
(
)
{
return
topicBindingName
;
}
public
boolean
getLocationInfo
(
)
{
return
locationInfo
;
}
public
void
activateOptions
(
)
{
TopicConnectionFactory
topicConnectionFactory
;
try
{
Context
ctx
=
new
InitialContext
(
)
;
topicConnectionFactory
=
(
TopicConnectionFactory
)
lookup
(
ctx
,
tcfBindingName
)
;
topicConnection
=
topicConnectionFactory
.
createTopicConnection
(
)
;
topicConnection
.
start
(
)
;
topicSession
=
topicConnection
.
createTopicSession
(
false
,
Session
.
AUTO_ACKNOWLEDGE
)
;
Topic
topic
=
(
Topic
)
lookup
(
ctx
,
topicBindingName
)
;
topicPublisher
=
topicSession
.
createPublisher
(
topic
)
;
ctx
.
close
(
)
;
}
catch
(
Exception
e
)
{
errorHandler
.
error
(
"Error while activating options for appender named ["
+
name
+
"]."
,
e
,
ErrorCode
.
GENERIC_FAILURE
)
;
}
}
protected
Object
lookup
(
Context
ctx
,
String
name
)
throws
NamingException
{
try
{
return
ctx
.
lookup
(
name
)
;
}
catch
(
NameNotFoundException
e
)
{
LogLog
.
error
(
"Could not find name ["
+
name
+
"]."
)
;
throw
e
;
}
}
protected
boolean
checkEntryConditions
(
)
{
String
fail
=
null
;
if
(
this
.
topicConnection
==
null
)
{
fail
=
"No TopicConnection"
;
}
else
if
(
this
.
topicSession
==
null
)
{
fail
=
"No TopicSession"
;
}
else
if
(
this
.
topicPublisher
==
null
)
{
fail
=
"No TopicPublisher"
;
}
if
(
fail
!=
null
)
{
errorHandler
.
error
(
fail
+
" for JMSAppender named ["
+
name
+
"]."
)
;
return
false
;
}
else
{
return
true
;
}
}
public
synchronized
void
close
(
)
{
if
(
this
.
closed
)
return
;
LogLog
.
debug
(
"Closing appender ["
+
name
+
"]."
)
;
this
.
closed
=
true
;
try
{
if
(
topicSession
!=
null
)
topicSession
.
close
(
)
;
if
(
topicConnection
!=
null
)
topicConnection
.
close
(
)
;
}
catch
(
Exception
e
)
{
LogLog
.
error
(
"Error while closing JMSAppender ["
+
name
+
"]."
,
e
)
;
}
topicPublisher
=
null
;
topicSession
=
null
;
topicConnection
=
null
;
}
public
void
append
(
LoggingEvent
event
)
{
if
(
!
checkEntryConditions
(
)
)
{
return
;
}
try
{
ObjectMessage
msg
=
topicSession
.
createObjectMessage
(
)
;
if
(
locationInfo
)
{
event
.
getLocationInformation
(
)
;
}
msg
.
setObject
(
event
)
;
topicPublisher
.
publish
(
msg
)
;
}
catch
(
Exception
e
)
{
errorHandler
.
error
(
"Could not publish message in JMSAppender ["
+
name
+
"]."
,
e
,
ErrorCode
.
GENERIC_FAILURE
)
;
}
}
public
void
setLocationInfo
(
boolean
locationInfo
)
{
this
.
locationInfo
=
locationInfo
;
}
public
boolean
requiresLayout
(
)
{
return
false
;
}
}
