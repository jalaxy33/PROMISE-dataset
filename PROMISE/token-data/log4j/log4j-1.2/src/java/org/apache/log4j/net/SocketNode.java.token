package
org
.
apache
.
log4j
.
net
;
import
java
.
net
.
Socket
;
import
java
.
io
.
IOException
;
import
java
.
io
.
ObjectInputStream
;
import
java
.
io
.
BufferedInputStream
;
import
org
.
apache
.
log4j
.
*
;
import
org
.
apache
.
log4j
.
spi
.
*
;
public
class
SocketNode
implements
Runnable
{
Socket
socket
;
LoggerRepository
hierarchy
;
ObjectInputStream
ois
;
static
Logger
logger
=
Logger
.
getLogger
(
SocketNode
.
class
)
;
public
SocketNode
(
Socket
socket
,
LoggerRepository
hierarchy
)
{
this
.
socket
=
socket
;
this
.
hierarchy
=
hierarchy
;
try
{
ois
=
new
ObjectInputStream
(
new
BufferedInputStream
(
socket
.
getInputStream
(
)
)
)
;
}
catch
(
Exception
e
)
{
logger
.
error
(
"Could not open ObjectInputStream to "
+
socket
,
e
)
;
}
}
public
void
run
(
)
{
LoggingEvent
event
;
Logger
remoteLogger
;
try
{
while
(
true
)
{
event
=
(
LoggingEvent
)
ois
.
readObject
(
)
;
remoteLogger
=
hierarchy
.
getLogger
(
event
.
categoryName
)
;
event
.
logger
=
remoteLogger
;
if
(
event
.
level
.
isGreaterOrEqual
(
remoteLogger
.
getEffectiveLevel
(
)
)
)
{
remoteLogger
.
callAppenders
(
event
)
;
}
}
}
catch
(
java
.
io
.
EOFException
e
)
{
logger
.
info
(
"Caught java.io.EOFException closing conneciton."
)
;
}
catch
(
java
.
net
.
SocketException
e
)
{
logger
.
info
(
"Caught java.net.SocketException closing conneciton."
)
;
}
catch
(
IOException
e
)
{
logger
.
info
(
"Caught java.io.IOException: "
+
e
)
;
logger
.
info
(
"Closing connection."
)
;
}
catch
(
Exception
e
)
{
logger
.
error
(
"Unexpected exception. Closing conneciton."
,
e
)
;
}
try
{
ois
.
close
(
)
;
}
catch
(
Exception
e
)
{
logger
.
info
(
"Could not close connection."
,
e
)
;
}
}
}
