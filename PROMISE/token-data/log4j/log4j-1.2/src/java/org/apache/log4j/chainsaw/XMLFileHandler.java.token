package
org
.
apache
.
log4j
.
chainsaw
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
log4j
.
Priority
;
import
org
.
xml
.
sax
.
Attributes
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
helpers
.
DefaultHandler
;
class
XMLFileHandler
extends
DefaultHandler
{
private
static
final
String
TAG_EVENT
=
"log4j:event"
;
private
static
final
String
TAG_MESSAGE
=
"log4j:message"
;
private
static
final
String
TAG_NDC
=
"log4j:NDC"
;
private
static
final
String
TAG_THROWABLE
=
"log4j:throwable"
;
private
static
final
String
TAG_LOCATION_INFO
=
"log4j:locationInfo"
;
private
final
MyTableModel
mModel
;
private
int
mNumEvents
;
private
String
mCurrentElement
;
private
long
mTimeStamp
;
private
Priority
mPriority
;
private
String
mCategoryName
;
private
String
mNDC
;
private
String
mThreadName
;
private
String
mMessage
;
private
String
[
]
mThrowableStrRep
;
private
String
mLocationDetails
;
XMLFileHandler
(
MyTableModel
aModel
)
{
mModel
=
aModel
;
}
public
void
startDocument
(
)
throws
SAXException
{
mNumEvents
=
0
;
}
public
void
characters
(
char
[
]
aChars
,
int
aStart
,
int
aLength
)
{
if
(
mCurrentElement
==
TAG_NDC
)
{
mNDC
=
new
String
(
aChars
,
aStart
,
aLength
)
;
}
else
if
(
mCurrentElement
==
TAG_MESSAGE
)
{
mMessage
=
new
String
(
aChars
,
aStart
,
aLength
)
;
}
else
if
(
mCurrentElement
==
TAG_THROWABLE
)
{
final
StringTokenizer
st
=
new
StringTokenizer
(
new
String
(
aChars
,
aStart
,
aLength
)
,
"\t"
)
;
mThrowableStrRep
=
new
String
[
st
.
countTokens
(
)
]
;
if
(
mThrowableStrRep
.
length
>
0
)
{
mThrowableStrRep
[
0
]
=
st
.
nextToken
(
)
;
for
(
int
i
=
1
;
i
<
mThrowableStrRep
.
length
;
i
++
)
{
mThrowableStrRep
[
i
]
=
"\t"
+
st
.
nextToken
(
)
;
}
}
}
}
public
void
endElement
(
String
aNamespaceURI
,
String
aLocalName
,
String
aQName
)
{
if
(
TAG_EVENT
.
equals
(
aQName
)
)
{
addEvent
(
)
;
resetData
(
)
;
}
else
if
(
mCurrentElement
!=
TAG_EVENT
)
{
mCurrentElement
=
TAG_EVENT
;
}
}
public
void
startElement
(
String
aNamespaceURI
,
String
aLocalName
,
String
aQName
,
Attributes
aAtts
)
{
if
(
TAG_EVENT
.
equals
(
aQName
)
)
{
mThreadName
=
aAtts
.
getValue
(
"thread"
)
;
mTimeStamp
=
Long
.
parseLong
(
aAtts
.
getValue
(
"timestamp"
)
)
;
mCategoryName
=
aAtts
.
getValue
(
"category"
)
;
mPriority
=
Priority
.
toPriority
(
aAtts
.
getValue
(
"level"
)
)
;
}
else
if
(
TAG_LOCATION_INFO
.
equals
(
aQName
)
)
{
mLocationDetails
=
aAtts
.
getValue
(
"class"
)
+
"."
+
aAtts
.
getValue
(
"method"
)
+
"("
+
aAtts
.
getValue
(
"file"
)
+
":"
+
aAtts
.
getValue
(
"line"
)
+
")"
;
}
else
if
(
TAG_NDC
.
equals
(
aQName
)
)
{
mCurrentElement
=
TAG_NDC
;
}
else
if
(
TAG_MESSAGE
.
equals
(
aQName
)
)
{
mCurrentElement
=
TAG_MESSAGE
;
}
else
if
(
TAG_THROWABLE
.
equals
(
aQName
)
)
{
mCurrentElement
=
TAG_THROWABLE
;
}
}
int
getNumEvents
(
)
{
return
mNumEvents
;
}
private
void
addEvent
(
)
{
mModel
.
addEvent
(
new
EventDetails
(
mTimeStamp
,
mPriority
,
mCategoryName
,
mNDC
,
mThreadName
,
mMessage
,
mThrowableStrRep
,
mLocationDetails
)
)
;
mNumEvents
++
;
}
private
void
resetData
(
)
{
mTimeStamp
=
0
;
mPriority
=
null
;
mCategoryName
=
null
;
mNDC
=
null
;
mThreadName
=
null
;
mMessage
=
null
;
mThrowableStrRep
=
null
;
mLocationDetails
=
null
;
}
}
