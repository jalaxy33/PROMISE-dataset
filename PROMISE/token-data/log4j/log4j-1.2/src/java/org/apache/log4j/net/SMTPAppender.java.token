package
org
.
apache
.
log4j
.
net
;
import
org
.
apache
.
log4j
.
AppenderSkeleton
;
import
org
.
apache
.
log4j
.
Level
;
import
org
.
apache
.
log4j
.
helpers
.
CyclicBuffer
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
import
org
.
apache
.
log4j
.
spi
.
ErrorCode
;
import
org
.
apache
.
log4j
.
spi
.
TriggeringEventEvaluator
;
import
java
.
util
.
Properties
;
import
java
.
util
.
Date
;
import
javax
.
mail
.
Session
;
import
javax
.
mail
.
Transport
;
import
javax
.
mail
.
Message
;
import
javax
.
mail
.
MessagingException
;
import
javax
.
mail
.
internet
.
MimeMessage
;
import
javax
.
mail
.
Multipart
;
import
javax
.
mail
.
internet
.
MimeMultipart
;
import
javax
.
mail
.
internet
.
MimeBodyPart
;
import
javax
.
mail
.
internet
.
InternetAddress
;
import
javax
.
mail
.
internet
.
AddressException
;
public
class
SMTPAppender
extends
AppenderSkeleton
{
private
String
to
;
private
String
from
;
private
String
subject
;
private
String
smtpHost
;
private
int
bufferSize
=
512
;
private
boolean
locationInfo
=
false
;
protected
CyclicBuffer
cb
=
new
CyclicBuffer
(
bufferSize
)
;
protected
Message
msg
;
protected
TriggeringEventEvaluator
evaluator
;
public
SMTPAppender
(
)
{
this
(
new
DefaultEvaluator
(
)
)
;
}
public
SMTPAppender
(
TriggeringEventEvaluator
evaluator
)
{
this
.
evaluator
=
evaluator
;
}
public
void
activateOptions
(
)
{
Properties
props
=
new
Properties
(
System
.
getProperties
(
)
)
;
if
(
smtpHost
!=
null
)
props
.
put
(
"mail.smtp.host"
,
smtpHost
)
;
Session
session
=
Session
.
getInstance
(
props
,
null
)
;
msg
=
new
MimeMessage
(
session
)
;
try
{
if
(
from
!=
null
)
msg
.
setFrom
(
getAddress
(
from
)
)
;
else
msg
.
setFrom
(
)
;
msg
.
setRecipients
(
Message
.
RecipientType
.
TO
,
parseAddress
(
to
)
)
;
if
(
subject
!=
null
)
msg
.
setSubject
(
subject
)
;
}
catch
(
MessagingException
e
)
{
LogLog
.
error
(
"Could not activate SMTPAppender options."
,
e
)
;
}
}
public
void
append
(
LoggingEvent
event
)
{
if
(
!
checkEntryConditions
(
)
)
{
return
;
}
event
.
getThreadName
(
)
;
event
.
getNDC
(
)
;
if
(
locationInfo
)
{
event
.
getLocationInformation
(
)
;
}
cb
.
add
(
event
)
;
if
(
evaluator
.
isTriggeringEvent
(
event
)
)
{
sendBuffer
(
)
;
}
}
protected
boolean
checkEntryConditions
(
)
{
if
(
this
.
msg
==
null
)
{
errorHandler
.
error
(
"Message object not configured."
)
;
return
false
;
}
if
(
this
.
evaluator
==
null
)
{
errorHandler
.
error
(
"No TriggeringEventEvaluator is set for appender ["
+
name
+
"]."
)
;
return
false
;
}
if
(
this
.
layout
==
null
)
{
errorHandler
.
error
(
"No layout set for appender named ["
+
name
+
"]."
)
;
return
false
;
}
return
true
;
}
synchronized
public
void
close
(
)
{
this
.
closed
=
true
;
}
InternetAddress
getAddress
(
String
addressStr
)
{
try
{
return
new
InternetAddress
(
addressStr
)
;
}
catch
(
AddressException
e
)
{
errorHandler
.
error
(
"Could not parse address ["
+
addressStr
+
"]."
,
e
,
ErrorCode
.
ADDRESS_PARSE_FAILURE
)
;
return
null
;
}
}
InternetAddress
[
]
parseAddress
(
String
addressStr
)
{
try
{
return
InternetAddress
.
parse
(
addressStr
,
true
)
;
}
catch
(
AddressException
e
)
{
errorHandler
.
error
(
"Could not parse address ["
+
addressStr
+
"]."
,
e
,
ErrorCode
.
ADDRESS_PARSE_FAILURE
)
;
return
null
;
}
}
public
String
getTo
(
)
{
return
to
;
}
public
boolean
requiresLayout
(
)
{
return
true
;
}
protected
void
sendBuffer
(
)
{
try
{
MimeBodyPart
part
=
new
MimeBodyPart
(
)
;
StringBuffer
sbuf
=
new
StringBuffer
(
)
;
String
t
=
layout
.
getHeader
(
)
;
if
(
t
!=
null
)
sbuf
.
append
(
t
)
;
int
len
=
cb
.
length
(
)
;
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
LoggingEvent
event
=
cb
.
get
(
)
;
sbuf
.
append
(
layout
.
format
(
event
)
)
;
if
(
layout
.
ignoresThrowable
(
)
)
{
String
[
]
s
=
event
.
getThrowableStrRep
(
)
;
if
(
s
!=
null
)
{
for
(
int
j
=
0
;
j
<
s
.
length
;
j
++
)
{
sbuf
.
append
(
s
[
j
]
)
;
}
}
}
}
t
=
layout
.
getFooter
(
)
;
if
(
t
!=
null
)
sbuf
.
append
(
t
)
;
part
.
setContent
(
sbuf
.
toString
(
)
,
layout
.
getContentType
(
)
)
;
Multipart
mp
=
new
MimeMultipart
(
)
;
mp
.
addBodyPart
(
part
)
;
msg
.
setContent
(
mp
)
;
msg
.
setSentDate
(
new
Date
(
)
)
;
Transport
.
send
(
msg
)
;
}
catch
(
Exception
e
)
{
LogLog
.
error
(
"Error occured while sending e-mail notification."
,
e
)
;
}
}
public
String
getEvaluatorClass
(
)
{
return
evaluator
==
null
?
null
:
evaluator
.
getClass
(
)
.
getName
(
)
;
}
public
String
getFrom
(
)
{
return
from
;
}
public
String
getSubject
(
)
{
return
subject
;
}
public
void
setFrom
(
String
from
)
{
this
.
from
=
from
;
}
public
void
setSubject
(
String
subject
)
{
this
.
subject
=
subject
;
}
public
void
setBufferSize
(
int
bufferSize
)
{
this
.
bufferSize
=
bufferSize
;
cb
.
resize
(
bufferSize
)
;
}
public
void
setSMTPHost
(
String
smtpHost
)
{
this
.
smtpHost
=
smtpHost
;
}
public
String
getSMTPHost
(
)
{
return
smtpHost
;
}
public
void
setTo
(
String
to
)
{
this
.
to
=
to
;
}
public
int
getBufferSize
(
)
{
return
bufferSize
;
}
public
void
setEvaluatorClass
(
String
value
)
{
evaluator
=
(
TriggeringEventEvaluator
)
OptionConverter
.
instantiateByClassName
(
value
,
TriggeringEventEvaluator
.
class
,
evaluator
)
;
}
public
void
setLocationInfo
(
boolean
locationInfo
)
{
this
.
locationInfo
=
locationInfo
;
}
public
boolean
getLocationInfo
(
)
{
return
locationInfo
;
}
}
class
DefaultEvaluator
implements
TriggeringEventEvaluator
{
public
boolean
isTriggeringEvent
(
LoggingEvent
event
)
{
return
event
.
level
.
isGreaterOrEqual
(
Level
.
ERROR
)
;
}
}
