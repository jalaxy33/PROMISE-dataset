package
org
.
apache
.
log4j
.
lf5
.
viewer
.
configure
;
import
java
.
io
.
*
;
import
java
.
net
.
URL
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
LinkedList
;
public
class
MRUFileManager
{
private
static
final
String
CONFIG_FILE_NAME
=
"mru_file_manager"
;
private
static
final
int
DEFAULT_MAX_SIZE
=
3
;
public
static
final
String
UNIX_SEPARATOR
=
"/"
;
public
static
final
String
DOS_SEPARATOR
=
"\\"
;
private
int
_maxSize
=
0
;
private
LinkedList
_mruFileList
;
public
MRUFileManager
(
)
{
load
(
)
;
setMaxSize
(
DEFAULT_MAX_SIZE
)
;
}
public
MRUFileManager
(
int
maxSize
)
{
load
(
)
;
setMaxSize
(
maxSize
)
;
}
public
void
save
(
)
{
File
file
=
new
File
(
getFilename
(
)
)
;
try
{
ObjectOutputStream
oos
=
new
ObjectOutputStream
(
new
FileOutputStream
(
file
)
)
;
oos
.
writeObject
(
_mruFileList
)
;
oos
.
flush
(
)
;
oos
.
close
(
)
;
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
}
public
int
size
(
)
{
return
_mruFileList
.
size
(
)
;
}
public
Object
getFile
(
int
index
)
{
if
(
index
<
size
(
)
)
{
return
_mruFileList
.
get
(
index
)
;
}
return
null
;
}
public
InputStream
getInputStream
(
int
index
)
throws
IOException
,
FileNotFoundException
{
if
(
index
<
size
(
)
)
{
Object
o
=
getFile
(
index
)
;
if
(
o
instanceof
File
)
{
return
getInputStream
(
(
File
)
o
)
;
}
else
{
return
getInputStream
(
(
URL
)
o
)
;
}
}
return
null
;
}
public
void
set
(
File
file
)
{
setMRU
(
file
)
;
}
public
void
set
(
URL
url
)
{
setMRU
(
url
)
;
}
public
String
[
]
getMRUFileList
(
)
{
if
(
size
(
)
==
0
)
{
return
null
;
}
String
[
]
ss
=
new
String
[
size
(
)
]
;
for
(
int
i
=
0
;
i
<
size
(
)
;
i
++
)
{
Object
o
=
getFile
(
i
)
;
if
(
o
instanceof
File
)
{
ss
[
i
]
=
(
(
File
)
o
)
.
getAbsolutePath
(
)
;
}
else
{
ss
[
i
]
=
o
.
toString
(
)
;
}
}
return
ss
;
}
public
void
moveToTop
(
int
index
)
{
_mruFileList
.
add
(
0
,
_mruFileList
.
remove
(
index
)
)
;
}
public
static
void
createConfigurationDirectory
(
)
{
String
home
=
System
.
getProperty
(
"user.home"
)
;
String
sep
=
(
home
.
startsWith
(
UNIX_SEPARATOR
)
)
?
UNIX_SEPARATOR
:
DOS_SEPARATOR
;
File
f
=
new
File
(
home
+
sep
+
"lf5"
)
;
if
(
!
f
.
exists
(
)
)
{
try
{
f
.
mkdir
(
)
;
}
catch
(
SecurityException
e
)
{
e
.
printStackTrace
(
)
;
}
}
}
protected
InputStream
getInputStream
(
File
file
)
throws
IOException
,
FileNotFoundException
{
BufferedInputStream
reader
=
new
BufferedInputStream
(
new
FileInputStream
(
file
)
)
;
return
reader
;
}
protected
InputStream
getInputStream
(
URL
url
)
throws
IOException
{
return
url
.
openStream
(
)
;
}
protected
void
setMRU
(
Object
o
)
{
int
index
=
_mruFileList
.
indexOf
(
o
)
;
if
(
index
==
-
1
)
{
_mruFileList
.
add
(
0
,
o
)
;
setMaxSize
(
_maxSize
)
;
}
else
{
moveToTop
(
index
)
;
}
}
protected
void
load
(
)
{
createConfigurationDirectory
(
)
;
File
file
=
new
File
(
getFilename
(
)
)
;
if
(
file
.
exists
(
)
)
{
try
{
ObjectInputStream
ois
=
new
ObjectInputStream
(
new
FileInputStream
(
file
)
)
;
_mruFileList
=
(
LinkedList
)
ois
.
readObject
(
)
;
ois
.
close
(
)
;
Iterator
it
=
_mruFileList
.
iterator
(
)
;
while
(
it
.
hasNext
(
)
)
{
Object
o
=
it
.
next
(
)
;
if
(
!
(
o
instanceof
File
)
&&
!
(
o
instanceof
URL
)
)
{
it
.
remove
(
)
;
}
}
}
catch
(
Exception
e
)
{
_mruFileList
=
new
LinkedList
(
)
;
}
}
else
{
_mruFileList
=
new
LinkedList
(
)
;
}
}
protected
String
getFilename
(
)
{
String
home
=
System
.
getProperty
(
"user.home"
)
;
String
sep
=
(
home
.
startsWith
(
UNIX_SEPARATOR
)
)
?
UNIX_SEPARATOR
:
DOS_SEPARATOR
;
return
home
+
sep
+
"lf5"
+
sep
+
CONFIG_FILE_NAME
;
}
protected
void
setMaxSize
(
int
maxSize
)
{
if
(
maxSize
<
_mruFileList
.
size
(
)
)
{
for
(
int
i
=
0
;
i
<
_mruFileList
.
size
(
)
-
maxSize
;
i
++
)
{
_mruFileList
.
removeFirst
(
)
;
}
}
_maxSize
=
maxSize
;
}
}
