package
org
.
apache
.
log4j
.
net
;
import
java
.
util
.
Vector
;
import
java
.
net
.
Socket
;
import
java
.
net
.
ServerSocket
;
import
java
.
net
.
SocketException
;
import
java
.
io
.
ObjectOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InterruptedIOException
;
import
java
.
net
.
InetAddress
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
import
org
.
apache
.
log4j
.
AppenderSkeleton
;
public
class
SocketHubAppender
extends
AppenderSkeleton
{
static
final
int
DEFAULT_PORT
=
4560
;
private
int
port
=
DEFAULT_PORT
;
private
Vector
oosList
=
new
Vector
(
)
;
private
ServerMonitor
serverMonitor
=
null
;
private
boolean
locationInfo
=
false
;
public
SocketHubAppender
(
)
{
}
public
SocketHubAppender
(
int
_port
)
{
port
=
_port
;
startServer
(
)
;
}
public
void
activateOptions
(
)
{
startServer
(
)
;
}
synchronized
public
void
close
(
)
{
if
(
closed
)
return
;
LogLog
.
debug
(
"closing SocketHubAppender "
+
getName
(
)
)
;
this
.
closed
=
true
;
cleanUp
(
)
;
LogLog
.
debug
(
"SocketHubAppender "
+
getName
(
)
+
" closed"
)
;
}
public
void
cleanUp
(
)
{
LogLog
.
debug
(
"stopping ServerSocket"
)
;
serverMonitor
.
stopMonitor
(
)
;
serverMonitor
=
null
;
LogLog
.
debug
(
"closing client connections"
)
;
while
(
oosList
.
size
(
)
!=
0
)
{
ObjectOutputStream
oos
=
(
ObjectOutputStream
)
oosList
.
elementAt
(
0
)
;
if
(
oos
!=
null
)
{
try
{
oos
.
close
(
)
;
}
catch
(
IOException
e
)
{
LogLog
.
error
(
"could not close oos."
,
e
)
;
}
oosList
.
removeElementAt
(
0
)
;
}
}
}
public
void
append
(
LoggingEvent
event
)
{
if
(
event
==
null
||
oosList
.
size
(
)
==
0
)
return
;
if
(
locationInfo
)
{
event
.
getLocationInformation
(
)
;
}
for
(
int
streamCount
=
0
;
streamCount
<
oosList
.
size
(
)
;
streamCount
++
)
{
ObjectOutputStream
oos
=
null
;
try
{
oos
=
(
ObjectOutputStream
)
oosList
.
elementAt
(
streamCount
)
;
}
catch
(
ArrayIndexOutOfBoundsException
e
)
{
}
if
(
oos
==
null
)
break
;
try
{
oos
.
writeObject
(
event
)
;
oos
.
flush
(
)
;
oos
.
reset
(
)
;
}
catch
(
IOException
e
)
{
oosList
.
removeElementAt
(
streamCount
)
;
LogLog
.
debug
(
"dropped connection"
)
;
streamCount
--
;
}
}
}
public
boolean
requiresLayout
(
)
{
return
false
;
}
public
void
setPort
(
int
_port
)
{
port
=
_port
;
}
public
int
getPort
(
)
{
return
port
;
}
public
void
setLocationInfo
(
boolean
_locationInfo
)
{
locationInfo
=
_locationInfo
;
}
public
boolean
getLocationInfo
(
)
{
return
locationInfo
;
}
private
void
startServer
(
)
{
serverMonitor
=
new
ServerMonitor
(
port
,
oosList
)
;
}
private
class
ServerMonitor
implements
Runnable
{
private
int
port
;
private
Vector
oosList
;
private
boolean
keepRunning
;
private
Thread
monitorThread
;
public
ServerMonitor
(
int
_port
,
Vector
_oosList
)
{
port
=
_port
;
oosList
=
_oosList
;
keepRunning
=
true
;
monitorThread
=
new
Thread
(
this
)
;
monitorThread
.
setDaemon
(
true
)
;
monitorThread
.
start
(
)
;
}
public
synchronized
void
stopMonitor
(
)
{
if
(
keepRunning
)
{
LogLog
.
debug
(
"server monitor thread shutting down"
)
;
keepRunning
=
false
;
try
{
monitorThread
.
join
(
)
;
}
catch
(
InterruptedException
e
)
{
}
monitorThread
=
null
;
LogLog
.
debug
(
"server monitor thread shut down"
)
;
}
}
public
void
run
(
)
{
ServerSocket
serverSocket
=
null
;
try
{
serverSocket
=
new
ServerSocket
(
port
)
;
serverSocket
.
setSoTimeout
(
1000
)
;
}
catch
(
Exception
e
)
{
LogLog
.
error
(
"exception setting timeout, shutting down server socket."
,
e
)
;
keepRunning
=
false
;
return
;
}
try
{
try
{
serverSocket
.
setSoTimeout
(
1000
)
;
}
catch
(
SocketException
e
)
{
LogLog
.
error
(
"exception setting timeout, shutting down server socket."
,
e
)
;
return
;
}
while
(
keepRunning
)
{
Socket
socket
=
null
;
try
{
socket
=
serverSocket
.
accept
(
)
;
}
catch
(
InterruptedIOException
e
)
{
}
catch
(
SocketException
e
)
{
LogLog
.
error
(
"exception accepting socket, shutting down server socket."
,
e
)
;
keepRunning
=
false
;
}
catch
(
IOException
e
)
{
LogLog
.
error
(
"exception accepting socket."
,
e
)
;
}
if
(
socket
!=
null
)
{
try
{
InetAddress
remoteAddress
=
socket
.
getInetAddress
(
)
;
LogLog
.
debug
(
"accepting connection from "
+
remoteAddress
.
getHostName
(
)
+
" ("
+
remoteAddress
.
getHostAddress
(
)
+
")"
)
;
ObjectOutputStream
oos
=
new
ObjectOutputStream
(
socket
.
getOutputStream
(
)
)
;
oosList
.
addElement
(
oos
)
;
}
catch
(
IOException
e
)
{
LogLog
.
error
(
"exception creating output stream on socket."
,
e
)
;
}
}
}
}
finally
{
try
{
serverSocket
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
}
}
}
}
