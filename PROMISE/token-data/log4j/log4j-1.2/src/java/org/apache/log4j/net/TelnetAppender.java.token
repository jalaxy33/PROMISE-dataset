package
org
.
apache
.
log4j
.
net
;
import
java
.
io
.
*
;
import
java
.
net
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
log4j
.
Layout
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
import
org
.
apache
.
log4j
.
AppenderSkeleton
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
public
class
TelnetAppender
extends
AppenderSkeleton
{
private
SocketHandler
sh
;
private
int
port
=
23
;
public
boolean
requiresLayout
(
)
{
return
true
;
}
public
void
activateOptions
(
)
{
try
{
sh
=
new
SocketHandler
(
port
)
;
sh
.
start
(
)
;
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
}
public
int
getPort
(
)
{
return
port
;
}
public
void
setPort
(
int
port
)
{
this
.
port
=
port
;
}
public
void
close
(
)
{
sh
.
finalize
(
)
;
}
protected
void
append
(
LoggingEvent
event
)
{
sh
.
send
(
this
.
layout
.
format
(
event
)
)
;
if
(
layout
.
ignoresThrowable
(
)
)
{
String
[
]
s
=
event
.
getThrowableStrRep
(
)
;
if
(
s
!=
null
)
{
int
len
=
s
.
length
;
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
sh
.
send
(
s
[
i
]
)
;
sh
.
send
(
Layout
.
LINE_SEP
)
;
}
}
}
}
protected
class
SocketHandler
extends
Thread
{
private
boolean
done
=
false
;
private
Vector
writers
=
new
Vector
(
)
;
private
Vector
connections
=
new
Vector
(
)
;
private
ServerSocket
serverSocket
;
private
int
MAX_CONNECTIONS
=
20
;
public
void
finalize
(
)
{
for
(
Enumeration
e
=
connections
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
try
{
(
(
Socket
)
e
.
nextElement
(
)
)
.
close
(
)
;
}
catch
(
Exception
ex
)
{
}
}
try
{
serverSocket
.
close
(
)
;
}
catch
(
Exception
ex
)
{
}
done
=
true
;
}
public
void
send
(
String
message
)
{
Enumeration
ce
=
connections
.
elements
(
)
;
for
(
Enumeration
e
=
writers
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
Socket
sock
=
(
Socket
)
ce
.
nextElement
(
)
;
PrintWriter
writer
=
(
PrintWriter
)
e
.
nextElement
(
)
;
writer
.
print
(
message
)
;
if
(
writer
.
checkError
(
)
)
{
connections
.
remove
(
sock
)
;
writers
.
remove
(
writer
)
;
}
}
}
public
void
run
(
)
{
while
(
!
done
)
{
try
{
Socket
newClient
=
serverSocket
.
accept
(
)
;
PrintWriter
pw
=
new
PrintWriter
(
newClient
.
getOutputStream
(
)
)
;
if
(
connections
.
size
(
)
<
MAX_CONNECTIONS
)
{
connections
.
addElement
(
newClient
)
;
writers
.
addElement
(
pw
)
;
pw
.
print
(
"TelnetAppender v1.0 ("
+
connections
.
size
(
)
+
" active connections)\r\n\r\n"
)
;
pw
.
flush
(
)
;
}
else
{
pw
.
print
(
"Too many connections.\r\n"
)
;
pw
.
flush
(
)
;
newClient
.
close
(
)
;
}
}
catch
(
Exception
e
)
{
LogLog
.
error
(
"Encountered error while in SocketHandler loop."
,
e
)
;
}
}
}
public
SocketHandler
(
int
port
)
throws
IOException
{
serverSocket
=
new
ServerSocket
(
port
)
;
}
}
}
