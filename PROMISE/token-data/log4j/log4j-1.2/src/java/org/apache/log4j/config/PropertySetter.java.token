package
org
.
apache
.
log4j
.
config
;
import
java
.
beans
.
Introspector
;
import
java
.
beans
.
PropertyDescriptor
;
import
java
.
beans
.
BeanInfo
;
import
java
.
beans
.
IntrospectionException
;
import
java
.
lang
.
reflect
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
log4j
.
*
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
import
org
.
apache
.
log4j
.
spi
.
OptionHandler
;
public
class
PropertySetter
{
protected
Object
obj
;
protected
PropertyDescriptor
[
]
props
;
public
PropertySetter
(
Object
obj
)
{
this
.
obj
=
obj
;
}
protected
void
introspect
(
)
{
try
{
BeanInfo
bi
=
Introspector
.
getBeanInfo
(
obj
.
getClass
(
)
)
;
props
=
bi
.
getPropertyDescriptors
(
)
;
}
catch
(
IntrospectionException
ex
)
{
LogLog
.
error
(
"Failed to introspect "
+
obj
+
": "
+
ex
.
getMessage
(
)
)
;
props
=
new
PropertyDescriptor
[
0
]
;
}
}
public
static
void
setProperties
(
Object
obj
,
Properties
properties
,
String
prefix
)
{
new
PropertySetter
(
obj
)
.
setProperties
(
properties
,
prefix
)
;
}
public
void
setProperties
(
Properties
properties
,
String
prefix
)
{
int
len
=
prefix
.
length
(
)
;
for
(
Enumeration
e
=
properties
.
propertyNames
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
key
=
(
String
)
e
.
nextElement
(
)
;
if
(
key
.
startsWith
(
prefix
)
)
{
if
(
key
.
indexOf
(
'.'
,
len
+
1
)
>
0
)
{
continue
;
}
String
value
=
OptionConverter
.
findAndSubst
(
key
,
properties
)
;
key
=
key
.
substring
(
len
)
;
if
(
"layout"
.
equals
(
key
)
&&
obj
instanceof
Appender
)
{
continue
;
}
setProperty
(
key
,
value
)
;
}
}
activate
(
)
;
}
public
void
setProperty
(
String
name
,
String
value
)
{
if
(
value
==
null
)
return
;
name
=
Introspector
.
decapitalize
(
name
)
;
PropertyDescriptor
prop
=
getPropertyDescriptor
(
name
)
;
if
(
prop
==
null
)
{
LogLog
.
warn
(
"No such property ["
+
name
+
"] in "
+
obj
.
getClass
(
)
.
getName
(
)
+
"."
)
;
}
else
{
try
{
setProperty
(
prop
,
name
,
value
)
;
}
catch
(
PropertySetterException
ex
)
{
LogLog
.
warn
(
"Failed to set property ["
+
name
+
"] to value \""
+
value
+
"\". "
+
ex
.
getMessage
(
)
)
;
}
}
}
public
void
setProperty
(
PropertyDescriptor
prop
,
String
name
,
String
value
)
throws
PropertySetterException
{
Method
setter
=
prop
.
getWriteMethod
(
)
;
if
(
setter
==
null
)
{
throw
new
PropertySetterException
(
"No setter for property ["
+
name
+
"]."
)
;
}
Class
[
]
paramTypes
=
setter
.
getParameterTypes
(
)
;
if
(
paramTypes
.
length
!=
1
)
{
throw
new
PropertySetterException
(
"#params for setter != 1"
)
;
}
Object
arg
;
try
{
arg
=
convertArg
(
value
,
paramTypes
[
0
]
)
;
}
catch
(
Throwable
t
)
{
throw
new
PropertySetterException
(
"Conversion to type ["
+
paramTypes
[
0
]
+
"] failed. Reason: "
+
t
)
;
}
if
(
arg
==
null
)
{
throw
new
PropertySetterException
(
"Conversion to type ["
+
paramTypes
[
0
]
+
"] failed."
)
;
}
LogLog
.
debug
(
"Setting property ["
+
name
+
"] to ["
+
arg
+
"]."
)
;
try
{
setter
.
invoke
(
obj
,
new
Object
[
]
{
arg
}
)
;
}
catch
(
Exception
ex
)
{
throw
new
PropertySetterException
(
ex
)
;
}
}
protected
Object
convertArg
(
String
val
,
Class
type
)
{
if
(
val
==
null
)
return
null
;
String
v
=
val
.
trim
(
)
;
if
(
String
.
class
.
isAssignableFrom
(
type
)
)
{
return
val
;
}
else
if
(
Integer
.
TYPE
.
isAssignableFrom
(
type
)
)
{
return
new
Integer
(
v
)
;
}
else
if
(
Long
.
TYPE
.
isAssignableFrom
(
type
)
)
{
return
new
Long
(
v
)
;
}
else
if
(
Boolean
.
TYPE
.
isAssignableFrom
(
type
)
)
{
if
(
"true"
.
equalsIgnoreCase
(
v
)
)
{
return
Boolean
.
TRUE
;
}
else
if
(
"false"
.
equalsIgnoreCase
(
v
)
)
{
return
Boolean
.
FALSE
;
}
}
else
if
(
Priority
.
class
.
isAssignableFrom
(
type
)
)
{
return
OptionConverter
.
toLevel
(
v
,
(
Level
)
Level
.
DEBUG
)
;
}
return
null
;
}
protected
PropertyDescriptor
getPropertyDescriptor
(
String
name
)
{
if
(
props
==
null
)
introspect
(
)
;
for
(
int
i
=
0
;
i
<
props
.
length
;
i
++
)
{
if
(
name
.
equals
(
props
[
i
]
.
getName
(
)
)
)
{
return
props
[
i
]
;
}
}
return
null
;
}
public
void
activate
(
)
{
if
(
obj
instanceof
OptionHandler
)
{
(
(
OptionHandler
)
obj
)
.
activateOptions
(
)
;
}
}
}
