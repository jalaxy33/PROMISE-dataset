package
org
.
apache
.
log4j
.
helpers
;
import
org
.
apache
.
log4j
.
Layout
;
import
org
.
apache
.
log4j
.
helpers
.
RelativeTimeDateFormat
;
import
org
.
apache
.
log4j
.
helpers
.
AbsoluteTimeDateFormat
;
import
org
.
apache
.
log4j
.
helpers
.
DateTimeDateFormat
;
import
org
.
apache
.
log4j
.
helpers
.
ISO8601DateFormat
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
import
java
.
text
.
DateFormat
;
import
java
.
text
.
SimpleDateFormat
;
import
java
.
util
.
Date
;
import
java
.
util
.
TimeZone
;
import
java
.
text
.
FieldPosition
;
abstract
public
class
DateLayout
extends
Layout
{
public
final
static
String
NULL_DATE_FORMAT
=
"NULL"
;
public
final
static
String
RELATIVE_TIME_DATE_FORMAT
=
"RELATIVE"
;
protected
FieldPosition
pos
=
new
FieldPosition
(
0
)
;
final
static
public
String
DATE_FORMAT_OPTION
=
"DateFormat"
;
final
static
public
String
TIMEZONE_OPTION
=
"TimeZone"
;
private
String
timeZoneID
;
private
String
dateFormatOption
;
protected
DateFormat
dateFormat
;
protected
Date
date
=
new
Date
(
)
;
public
String
[
]
getOptionStrings
(
)
{
return
new
String
[
]
{
DATE_FORMAT_OPTION
,
TIMEZONE_OPTION
}
;
}
public
void
setOption
(
String
option
,
String
value
)
{
if
(
option
.
equalsIgnoreCase
(
DATE_FORMAT_OPTION
)
)
{
dateFormatOption
=
value
.
toUpperCase
(
)
;
}
else
if
(
option
.
equalsIgnoreCase
(
TIMEZONE_OPTION
)
)
{
timeZoneID
=
value
;
}
}
public
void
setDateFormat
(
String
dateFormat
)
{
if
(
dateFormat
!=
null
)
{
dateFormatOption
=
dateFormat
;
}
setDateFormat
(
dateFormatOption
,
TimeZone
.
getDefault
(
)
)
;
}
public
String
getDateFormat
(
)
{
return
dateFormatOption
;
}
public
void
setTimeZone
(
String
timeZone
)
{
this
.
timeZoneID
=
timeZone
;
}
public
String
getTimeZone
(
)
{
return
timeZoneID
;
}
public
void
activateOptions
(
)
{
setDateFormat
(
dateFormatOption
)
;
if
(
timeZoneID
!=
null
&&
dateFormat
!=
null
)
{
dateFormat
.
setTimeZone
(
TimeZone
.
getTimeZone
(
timeZoneID
)
)
;
}
}
public
void
dateFormat
(
StringBuffer
buf
,
LoggingEvent
event
)
{
if
(
dateFormat
!=
null
)
{
date
.
setTime
(
event
.
timeStamp
)
;
dateFormat
.
format
(
date
,
buf
,
this
.
pos
)
;
buf
.
append
(
' '
)
;
}
}
public
void
setDateFormat
(
DateFormat
dateFormat
,
TimeZone
timeZone
)
{
this
.
dateFormat
=
dateFormat
;
this
.
dateFormat
.
setTimeZone
(
timeZone
)
;
}
public
void
setDateFormat
(
String
dateFormatType
,
TimeZone
timeZone
)
{
if
(
dateFormatType
==
null
)
{
this
.
dateFormat
=
null
;
return
;
}
if
(
dateFormatType
.
equalsIgnoreCase
(
NULL_DATE_FORMAT
)
)
{
this
.
dateFormat
=
null
;
}
else
if
(
dateFormatType
.
equalsIgnoreCase
(
RELATIVE_TIME_DATE_FORMAT
)
)
{
this
.
dateFormat
=
new
RelativeTimeDateFormat
(
)
;
}
else
if
(
dateFormatType
.
equalsIgnoreCase
(
AbsoluteTimeDateFormat
.
ABS_TIME_DATE_FORMAT
)
)
{
this
.
dateFormat
=
new
AbsoluteTimeDateFormat
(
timeZone
)
;
}
else
if
(
dateFormatType
.
equalsIgnoreCase
(
AbsoluteTimeDateFormat
.
DATE_AND_TIME_DATE_FORMAT
)
)
{
this
.
dateFormat
=
new
DateTimeDateFormat
(
timeZone
)
;
}
else
if
(
dateFormatType
.
equalsIgnoreCase
(
AbsoluteTimeDateFormat
.
ISO8601_DATE_FORMAT
)
)
{
this
.
dateFormat
=
new
ISO8601DateFormat
(
timeZone
)
;
}
else
{
this
.
dateFormat
=
new
SimpleDateFormat
(
dateFormatType
)
;
this
.
dateFormat
.
setTimeZone
(
timeZone
)
;
}
}
}
