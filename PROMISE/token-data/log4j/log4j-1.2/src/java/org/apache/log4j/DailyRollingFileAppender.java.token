package
org
.
apache
.
log4j
;
import
java
.
io
.
IOException
;
import
java
.
io
.
File
;
import
java
.
text
.
SimpleDateFormat
;
import
java
.
util
.
Date
;
import
java
.
util
.
GregorianCalendar
;
import
java
.
util
.
Calendar
;
import
java
.
util
.
TimeZone
;
import
java
.
util
.
Locale
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
org
.
apache
.
log4j
.
spi
.
LoggingEvent
;
public
class
DailyRollingFileAppender
extends
FileAppender
{
static
final
int
TOP_OF_TROUBLE
=
-
1
;
static
final
int
TOP_OF_MINUTE
=
0
;
static
final
int
TOP_OF_HOUR
=
1
;
static
final
int
HALF_DAY
=
2
;
static
final
int
TOP_OF_DAY
=
3
;
static
final
int
TOP_OF_WEEK
=
4
;
static
final
int
TOP_OF_MONTH
=
5
;
private
String
datePattern
=
"'.'yyyy-MM-dd"
;
private
String
scheduledFilename
;
private
long
nextCheck
=
System
.
currentTimeMillis
(
)
-
1
;
Date
now
=
new
Date
(
)
;
SimpleDateFormat
sdf
;
RollingCalendar
rc
=
new
RollingCalendar
(
)
;
int
checkPeriod
=
TOP_OF_TROUBLE
;
static
final
TimeZone
gmtTimeZone
=
TimeZone
.
getTimeZone
(
"GMT"
)
;
public
DailyRollingFileAppender
(
)
{
}
public
DailyRollingFileAppender
(
Layout
layout
,
String
filename
,
String
datePattern
)
throws
IOException
{
super
(
layout
,
filename
,
true
)
;
this
.
datePattern
=
datePattern
;
activateOptions
(
)
;
}
public
void
setDatePattern
(
String
pattern
)
{
datePattern
=
pattern
;
}
public
String
getDatePattern
(
)
{
return
datePattern
;
}
public
void
activateOptions
(
)
{
super
.
activateOptions
(
)
;
if
(
datePattern
!=
null
&&
fileName
!=
null
)
{
now
.
setTime
(
System
.
currentTimeMillis
(
)
)
;
sdf
=
new
SimpleDateFormat
(
datePattern
)
;
int
type
=
computeCheckPeriod
(
)
;
printPeriodicity
(
type
)
;
rc
.
setType
(
type
)
;
File
file
=
new
File
(
fileName
)
;
scheduledFilename
=
fileName
+
sdf
.
format
(
new
Date
(
file
.
lastModified
(
)
)
)
;
}
else
{
LogLog
.
error
(
"Either Filename or DatePattern options are not set for ["
+
name
+
"]."
)
;
}
}
void
printPeriodicity
(
int
type
)
{
switch
(
type
)
{
case
TOP_OF_MINUTE
:
LogLog
.
debug
(
"Appender ["
+
name
+
"] to be rolled every minute."
)
;
break
;
case
TOP_OF_HOUR
:
LogLog
.
debug
(
"Appender ["
+
name
+
"] to be rolled on top of every hour."
)
;
break
;
case
HALF_DAY
:
LogLog
.
debug
(
"Appender ["
+
name
+
"] to be rolled at midday and midnight."
)
;
break
;
case
TOP_OF_DAY
:
LogLog
.
debug
(
"Appender ["
+
name
+
"] to be rolled at midnight."
)
;
break
;
case
TOP_OF_WEEK
:
LogLog
.
debug
(
"Appender ["
+
name
+
"] to be rolled at start of week."
)
;
break
;
case
TOP_OF_MONTH
:
LogLog
.
debug
(
"Appender ["
+
name
+
"] to be rolled at start of every month."
)
;
break
;
default
:
LogLog
.
warn
(
"Unknown periodicity for appender ["
+
name
+
"]."
)
;
}
}
int
computeCheckPeriod
(
)
{
RollingCalendar
rollingCalendar
=
new
RollingCalendar
(
gmtTimeZone
,
Locale
.
ENGLISH
)
;
Date
epoch
=
new
Date
(
0
)
;
if
(
datePattern
!=
null
)
{
for
(
int
i
=
TOP_OF_MINUTE
;
i
<=
TOP_OF_MONTH
;
i
++
)
{
SimpleDateFormat
simpleDateFormat
=
new
SimpleDateFormat
(
datePattern
)
;
simpleDateFormat
.
setTimeZone
(
gmtTimeZone
)
;
String
r0
=
simpleDateFormat
.
format
(
epoch
)
;
rollingCalendar
.
setType
(
i
)
;
Date
next
=
new
Date
(
rollingCalendar
.
getNextCheckMillis
(
epoch
)
)
;
String
r1
=
simpleDateFormat
.
format
(
next
)
;
if
(
r0
!=
null
&&
r1
!=
null
&&
!
r0
.
equals
(
r1
)
)
{
return
i
;
}
}
}
return
TOP_OF_TROUBLE
;
}
void
rollOver
(
)
throws
IOException
{
if
(
datePattern
==
null
)
{
errorHandler
.
error
(
"Missing DatePattern option in rollOver()."
)
;
return
;
}
String
datedFilename
=
fileName
+
sdf
.
format
(
now
)
;
if
(
scheduledFilename
.
equals
(
datedFilename
)
)
{
return
;
}
this
.
closeFile
(
)
;
File
target
=
new
File
(
scheduledFilename
)
;
if
(
target
.
exists
(
)
)
{
target
.
delete
(
)
;
}
File
file
=
new
File
(
fileName
)
;
file
.
renameTo
(
target
)
;
LogLog
.
debug
(
fileName
+
" -> "
+
scheduledFilename
)
;
try
{
this
.
setFile
(
fileName
,
false
,
this
.
bufferedIO
,
this
.
bufferSize
)
;
}
catch
(
IOException
e
)
{
errorHandler
.
error
(
"setFile("
+
fileName
+
", false) call failed."
)
;
}
scheduledFilename
=
datedFilename
;
}
protected
void
subAppend
(
LoggingEvent
event
)
{
long
n
=
System
.
currentTimeMillis
(
)
;
if
(
n
>=
nextCheck
)
{
now
.
setTime
(
n
)
;
nextCheck
=
rc
.
getNextCheckMillis
(
now
)
;
try
{
rollOver
(
)
;
}
catch
(
IOException
ioe
)
{
LogLog
.
error
(
"rollOver() failed."
,
ioe
)
;
}
}
super
.
subAppend
(
event
)
;
}
}
class
RollingCalendar
extends
GregorianCalendar
{
int
type
=
DailyRollingFileAppender
.
TOP_OF_TROUBLE
;
RollingCalendar
(
)
{
super
(
)
;
}
RollingCalendar
(
TimeZone
tz
,
Locale
locale
)
{
super
(
tz
,
locale
)
;
}
void
setType
(
int
type
)
{
this
.
type
=
type
;
}
public
long
getNextCheckMillis
(
Date
now
)
{
return
getNextCheckDate
(
now
)
.
getTime
(
)
;
}
public
Date
getNextCheckDate
(
Date
now
)
{
this
.
setTime
(
now
)
;
switch
(
type
)
{
case
DailyRollingFileAppender
.
TOP_OF_MINUTE
:
this
.
set
(
Calendar
.
SECOND
,
0
)
;
this
.
set
(
Calendar
.
MILLISECOND
,
0
)
;
this
.
add
(
Calendar
.
MINUTE
,
1
)
;
break
;
case
DailyRollingFileAppender
.
TOP_OF_HOUR
:
this
.
set
(
Calendar
.
MINUTE
,
0
)
;
this
.
set
(
Calendar
.
SECOND
,
0
)
;
this
.
set
(
Calendar
.
MILLISECOND
,
0
)
;
this
.
add
(
Calendar
.
HOUR_OF_DAY
,
1
)
;
break
;
case
DailyRollingFileAppender
.
HALF_DAY
:
this
.
set
(
Calendar
.
MINUTE
,
0
)
;
this
.
set
(
Calendar
.
SECOND
,
0
)
;
this
.
set
(
Calendar
.
MILLISECOND
,
0
)
;
int
hour
=
get
(
Calendar
.
HOUR_OF_DAY
)
;
if
(
hour
<
12
)
{
this
.
set
(
Calendar
.
HOUR_OF_DAY
,
12
)
;
}
else
{
this
.
set
(
Calendar
.
HOUR_OF_DAY
,
0
)
;
this
.
add
(
Calendar
.
DAY_OF_MONTH
,
1
)
;
}
break
;
case
DailyRollingFileAppender
.
TOP_OF_DAY
:
this
.
set
(
Calendar
.
HOUR_OF_DAY
,
0
)
;
this
.
set
(
Calendar
.
MINUTE
,
0
)
;
this
.
set
(
Calendar
.
SECOND
,
0
)
;
this
.
set
(
Calendar
.
MILLISECOND
,
0
)
;
this
.
add
(
Calendar
.
DATE
,
1
)
;
break
;
case
DailyRollingFileAppender
.
TOP_OF_WEEK
:
this
.
set
(
Calendar
.
DAY_OF_WEEK
,
getFirstDayOfWeek
(
)
)
;
this
.
set
(
Calendar
.
HOUR_OF_DAY
,
0
)
;
this
.
set
(
Calendar
.
SECOND
,
0
)
;
this
.
set
(
Calendar
.
MILLISECOND
,
0
)
;
this
.
add
(
Calendar
.
WEEK_OF_YEAR
,
1
)
;
break
;
case
DailyRollingFileAppender
.
TOP_OF_MONTH
:
this
.
set
(
Calendar
.
DATE
,
1
)
;
this
.
set
(
Calendar
.
HOUR_OF_DAY
,
0
)
;
this
.
set
(
Calendar
.
SECOND
,
0
)
;
this
.
set
(
Calendar
.
MILLISECOND
,
0
)
;
this
.
add
(
Calendar
.
MONTH
,
1
)
;
break
;
default
:
throw
new
IllegalStateException
(
"Unknown periodicity type."
)
;
}
return
getTime
(
)
;
}
}
