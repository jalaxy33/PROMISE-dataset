package
org
.
apache
.
log4j
;
import
org
.
apache
.
log4j
.
spi
.
LoggerRepository
;
import
org
.
apache
.
log4j
.
spi
.
LoggerFactory
;
import
org
.
apache
.
log4j
.
spi
.
RepositorySelector
;
import
org
.
apache
.
log4j
.
spi
.
DefaultRepositorySelector
;
import
org
.
apache
.
log4j
.
spi
.
RootCategory
;
import
org
.
apache
.
log4j
.
helpers
.
Loader
;
import
org
.
apache
.
log4j
.
helpers
.
OptionConverter
;
import
org
.
apache
.
log4j
.
helpers
.
LogLog
;
import
java
.
net
.
URL
;
import
java
.
net
.
MalformedURLException
;
import
java
.
util
.
Enumeration
;
public
class
LogManager
{
static
public
final
String
DEFAULT_CONFIGURATION_FILE
=
"log4j.properties"
;
static
final
public
String
DEFAULT_CONFIGURATION_KEY
=
"log4j.configuration"
;
static
final
public
String
CONFIGURATOR_CLASS_KEY
=
"log4j.configuratorClass"
;
public
static
final
String
DEFAULT_INIT_OVERRIDE_KEY
=
"log4j.defaultInitOverride"
;
static
private
Object
guard
=
null
;
static
private
RepositorySelector
repositorySelector
;
static
{
Hierarchy
h
=
new
Hierarchy
(
new
RootCategory
(
(
Level
)
Level
.
DEBUG
)
)
;
repositorySelector
=
new
DefaultRepositorySelector
(
h
)
;
String
override
=
OptionConverter
.
getSystemProperty
(
DEFAULT_INIT_OVERRIDE_KEY
,
null
)
;
if
(
override
==
null
||
"false"
.
equalsIgnoreCase
(
override
)
)
{
String
resource
=
OptionConverter
.
getSystemProperty
(
DEFAULT_CONFIGURATION_KEY
,
DEFAULT_CONFIGURATION_FILE
)
;
String
configuratorClassName
=
OptionConverter
.
getSystemProperty
(
CONFIGURATOR_CLASS_KEY
,
null
)
;
URL
url
=
null
;
try
{
url
=
new
URL
(
resource
)
;
}
catch
(
MalformedURLException
ex
)
{
url
=
Loader
.
getResource
(
resource
)
;
}
if
(
url
!=
null
)
{
LogLog
.
debug
(
"Using URL ["
+
url
+
"] for automatic log4j configuration."
)
;
OptionConverter
.
selectAndConfigure
(
url
,
configuratorClassName
,
LogManager
.
getLoggerRepository
(
)
)
;
}
else
{
LogLog
.
debug
(
"Could not find resource: ["
+
resource
+
"]."
)
;
}
}
}
static
public
void
setRepositorySelector
(
RepositorySelector
selector
,
Object
guard
)
throws
IllegalArgumentException
{
if
(
(
LogManager
.
guard
!=
null
)
&&
(
LogManager
.
guard
!=
guard
)
)
{
throw
new
IllegalArgumentException
(
"Attempted to reset the LoggerFactory without possessing the guard."
)
;
}
if
(
selector
==
null
)
{
throw
new
IllegalArgumentException
(
"RepositorySelector must be non-null."
)
;
}
LogManager
.
guard
=
guard
;
LogManager
.
repositorySelector
=
selector
;
}
static
public
LoggerRepository
getLoggerRepository
(
)
{
return
repositorySelector
.
getLoggerRepository
(
)
;
}
public
static
Logger
getRootLogger
(
)
{
return
repositorySelector
.
getLoggerRepository
(
)
.
getRootLogger
(
)
;
}
public
static
Logger
getLogger
(
String
name
)
{
return
repositorySelector
.
getLoggerRepository
(
)
.
getLogger
(
name
)
;
}
public
static
Logger
getLogger
(
Class
clazz
)
{
return
repositorySelector
.
getLoggerRepository
(
)
.
getLogger
(
clazz
.
getName
(
)
)
;
}
public
static
Logger
getLogger
(
String
name
,
LoggerFactory
factory
)
{
return
repositorySelector
.
getLoggerRepository
(
)
.
getLogger
(
name
,
factory
)
;
}
public
static
Logger
exists
(
String
name
)
{
return
repositorySelector
.
getLoggerRepository
(
)
.
exists
(
name
)
;
}
public
static
Enumeration
getCurrentLoggers
(
)
{
return
repositorySelector
.
getLoggerRepository
(
)
.
getCurrentLoggers
(
)
;
}
public
static
void
shutdown
(
)
{
repositorySelector
.
getLoggerRepository
(
)
.
shutdown
(
)
;
}
public
static
void
resetConfiguration
(
)
{
repositorySelector
.
getLoggerRepository
(
)
.
resetConfiguration
(
)
;
}
}
