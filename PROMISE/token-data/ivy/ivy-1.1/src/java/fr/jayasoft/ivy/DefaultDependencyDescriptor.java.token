package
fr
.
jayasoft
.
ivy
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Collection
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
public
class
DefaultDependencyDescriptor
implements
DependencyDescriptor
{
private
ModuleRevisionId
_revId
;
private
Map
_confs
=
new
HashMap
(
)
;
private
Map
_artifactsIncludes
=
new
HashMap
(
)
;
private
Map
_artifactsExcludes
=
new
HashMap
(
)
;
private
Set
_extends
=
new
HashSet
(
)
;
private
boolean
_force
;
private
ModuleRevisionId
_parentId
;
public
DefaultDependencyDescriptor
(
ModuleDescriptor
md
,
ModuleRevisionId
mrid
,
boolean
force
)
{
_parentId
=
md
.
getModuleRevisionId
(
)
;
_revId
=
mrid
;
_force
=
force
;
}
public
DefaultDependencyDescriptor
(
ModuleRevisionId
mrid
,
boolean
force
)
{
_revId
=
mrid
;
_force
=
force
;
}
public
ModuleId
getDependencyId
(
)
{
return
getDependencyRevisionId
(
)
.
getModuleId
(
)
;
}
public
ModuleRevisionId
getDependencyRevisionId
(
)
{
return
_revId
;
}
public
String
[
]
getModuleConfigurations
(
)
{
return
(
String
[
]
)
_confs
.
keySet
(
)
.
toArray
(
new
String
[
_confs
.
keySet
(
)
.
size
(
)
]
)
;
}
public
String
[
]
getDependencyConfigurations
(
String
moduleConfiguration
)
{
List
confs
=
(
List
)
_confs
.
get
(
moduleConfiguration
)
;
List
defConfs
=
(
List
)
_confs
.
get
(
"*"
)
;
List
ret
=
new
ArrayList
(
)
;
if
(
confs
!=
null
)
{
ret
.
addAll
(
confs
)
;
}
if
(
defConfs
!=
null
)
{
ret
.
addAll
(
defConfs
)
;
}
return
(
String
[
]
)
ret
.
toArray
(
new
String
[
ret
.
size
(
)
]
)
;
}
public
String
[
]
getDependencyConfigurations
(
String
[
]
moduleConfigurations
)
{
Set
confs
=
new
HashSet
(
)
;
for
(
int
i
=
0
;
i
<
moduleConfigurations
.
length
;
i
++
)
{
confs
.
addAll
(
Arrays
.
asList
(
getDependencyConfigurations
(
moduleConfigurations
[
i
]
)
)
)
;
}
if
(
confs
.
contains
(
"*"
)
)
{
return
new
String
[
]
{
"*"
}
;
}
return
(
String
[
]
)
confs
.
toArray
(
new
String
[
confs
.
size
(
)
]
)
;
}
public
DependencyArtifactDescriptor
[
]
getDependencyArtifactsIncludes
(
String
moduleConfiguration
)
{
return
getDependencyArtifacts
(
moduleConfiguration
,
_artifactsIncludes
)
;
}
public
DependencyArtifactDescriptor
[
]
getDependencyArtifactsExcludes
(
String
moduleConfiguration
)
{
return
getDependencyArtifacts
(
moduleConfiguration
,
_artifactsExcludes
)
;
}
private
DependencyArtifactDescriptor
[
]
getDependencyArtifacts
(
String
moduleConfiguration
,
Map
artifactsMap
)
{
if
(
artifactsMap
.
isEmpty
(
)
)
{
return
new
DependencyArtifactDescriptor
[
0
]
;
}
Collection
artifacts
=
(
Collection
)
artifactsMap
.
get
(
moduleConfiguration
)
;
Collection
defArtifacts
=
(
Collection
)
artifactsMap
.
get
(
"*"
)
;
Set
ret
=
new
HashSet
(
)
;
if
(
artifacts
!=
null
)
{
ret
.
addAll
(
artifacts
)
;
}
if
(
defArtifacts
!=
null
)
{
ret
.
addAll
(
defArtifacts
)
;
}
return
(
DependencyArtifactDescriptor
[
]
)
ret
.
toArray
(
new
DependencyArtifactDescriptor
[
ret
.
size
(
)
]
)
;
}
public
DependencyArtifactDescriptor
[
]
getDependencyArtifactsIncludes
(
String
[
]
moduleConfigurations
)
{
Set
artifacts
=
new
HashSet
(
)
;
for
(
int
i
=
0
;
i
<
moduleConfigurations
.
length
;
i
++
)
{
artifacts
.
addAll
(
Arrays
.
asList
(
getDependencyArtifactsIncludes
(
moduleConfigurations
[
i
]
)
)
)
;
}
return
(
DependencyArtifactDescriptor
[
]
)
artifacts
.
toArray
(
new
DependencyArtifactDescriptor
[
artifacts
.
size
(
)
]
)
;
}
public
DependencyArtifactDescriptor
[
]
getDependencyArtifactsExcludes
(
String
[
]
moduleConfigurations
)
{
Set
artifacts
=
new
HashSet
(
)
;
for
(
int
i
=
0
;
i
<
moduleConfigurations
.
length
;
i
++
)
{
artifacts
.
addAll
(
Arrays
.
asList
(
getDependencyArtifactsExcludes
(
moduleConfigurations
[
i
]
)
)
)
;
}
return
(
DependencyArtifactDescriptor
[
]
)
artifacts
.
toArray
(
new
DependencyArtifactDescriptor
[
artifacts
.
size
(
)
]
)
;
}
public
DependencyArtifactDescriptor
[
]
getAllDependencyArtifactsIncludes
(
)
{
return
getAllDependencyArtifacts
(
_artifactsIncludes
)
;
}
public
DependencyArtifactDescriptor
[
]
getAllDependencyArtifactsExcludes
(
)
{
return
getAllDependencyArtifacts
(
_artifactsExcludes
)
;
}
private
DependencyArtifactDescriptor
[
]
getAllDependencyArtifacts
(
Map
artifactsMap
)
{
Set
ret
=
new
HashSet
(
)
;
for
(
Iterator
it
=
artifactsMap
.
values
(
)
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
Collection
artifacts
=
(
Collection
)
it
.
next
(
)
;
ret
.
addAll
(
artifacts
)
;
}
return
(
DependencyArtifactDescriptor
[
]
)
ret
.
toArray
(
new
DependencyArtifactDescriptor
[
ret
.
size
(
)
]
)
;
}
public
void
addDependencyConfiguration
(
String
masterConf
,
String
depConf
)
{
List
confs
=
(
List
)
_confs
.
get
(
masterConf
)
;
if
(
confs
==
null
)
{
confs
=
new
ArrayList
(
)
;
_confs
.
put
(
masterConf
,
confs
)
;
}
confs
.
add
(
depConf
)
;
}
public
void
addDependencyArtifactIncludes
(
String
masterConf
,
DependencyArtifactDescriptor
dad
)
{
addDependencyArtifacts
(
masterConf
,
dad
,
_artifactsIncludes
)
;
}
public
void
addDependencyArtifactExcludes
(
String
masterConf
,
DependencyArtifactDescriptor
dad
)
{
addDependencyArtifacts
(
masterConf
,
dad
,
_artifactsExcludes
)
;
}
private
void
addDependencyArtifacts
(
String
masterConf
,
DependencyArtifactDescriptor
dad
,
Map
artifactsMap
)
{
Collection
artifacts
=
(
Collection
)
artifactsMap
.
get
(
masterConf
)
;
if
(
artifacts
==
null
)
{
artifacts
=
new
ArrayList
(
)
;
artifactsMap
.
put
(
masterConf
,
artifacts
)
;
}
artifacts
.
add
(
dad
)
;
}
public
void
addExtends
(
String
conf
)
{
_extends
.
add
(
conf
)
;
}
public
String
toString
(
)
{
return
"dependency: "
+
_revId
+
" "
+
_confs
;
}
public
boolean
isForce
(
)
{
return
_force
;
}
public
ModuleRevisionId
getParentRevisionId
(
)
{
return
_parentId
;
}
}
