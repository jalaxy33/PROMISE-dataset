package
org
.
apache
.
ivy
.
plugins
.
repository
.
sftp
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
net
.
URI
;
import
java
.
net
.
URISyntaxException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
BasicResource
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
Resource
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
TransferEvent
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
ssh
.
AbstractSshBasedRepository
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
ssh
.
SshCache
;
import
org
.
apache
.
ivy
.
util
.
Message
;
import
com
.
jcraft
.
jsch
.
ChannelSftp
;
import
com
.
jcraft
.
jsch
.
JSchException
;
import
com
.
jcraft
.
jsch
.
Session
;
import
com
.
jcraft
.
jsch
.
SftpATTRS
;
import
com
.
jcraft
.
jsch
.
SftpException
;
import
com
.
jcraft
.
jsch
.
SftpProgressMonitor
;
import
com
.
jcraft
.
jsch
.
ChannelSftp
.
LsEntry
;
public
class
SFTPRepository
extends
AbstractSshBasedRepository
{
private
static
final
long
MILLIS_PER_SECOND
=
1000
;
private
final
class
MyProgressMonitor
implements
SftpProgressMonitor
{
private
long
totalLength
;
public
void
init
(
int
op
,
String
src
,
String
dest
,
long
max
)
{
totalLength
=
max
;
fireTransferStarted
(
max
)
;
}
public
void
end
(
)
{
fireTransferCompleted
(
totalLength
)
;
}
public
boolean
count
(
long
count
)
{
fireTransferProgress
(
count
)
;
return
true
;
}
}
public
SFTPRepository
(
)
{
}
public
Resource
getResource
(
String
source
)
{
return
new
SFTPResource
(
this
,
source
)
;
}
public
Resource
resolveResource
(
String
path
)
{
try
{
ChannelSftp
c
=
getSftpChannel
(
path
)
;
Collection
r
=
c
.
ls
(
getPath
(
path
)
)
;
if
(
r
!=
null
)
{
for
(
Iterator
iter
=
r
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
Object
obj
=
iter
.
next
(
)
;
if
(
obj
instanceof
LsEntry
)
{
LsEntry
entry
=
(
LsEntry
)
obj
;
SftpATTRS
attrs
=
entry
.
getAttrs
(
)
;
return
new
BasicResource
(
path
,
true
,
attrs
.
getSize
(
)
,
attrs
.
getMTime
(
)
*
MILLIS_PER_SECOND
,
false
)
;
}
}
}
}
catch
(
Exception
e
)
{
Message
.
debug
(
"reolving resource error: "
+
e
.
getMessage
(
)
)
;
}
return
new
BasicResource
(
path
,
false
,
0
,
0
,
false
)
;
}
public
InputStream
openStream
(
SFTPResource
resource
)
throws
IOException
{
ChannelSftp
c
=
getSftpChannel
(
resource
.
getName
(
)
)
;
try
{
String
path
=
getPath
(
resource
.
getName
(
)
)
;
return
c
.
get
(
path
)
;
}
catch
(
SftpException
e
)
{
IOException
ex
=
new
IOException
(
"impossible to open stream for "
+
resource
+
" on "
+
getHost
(
)
+
(
e
.
getMessage
(
)
!=
null
?
": "
+
e
.
getMessage
(
)
:
""
)
)
;
ex
.
initCause
(
e
)
;
throw
ex
;
}
catch
(
URISyntaxException
e
)
{
IOException
ex
=
new
IOException
(
"impossible to open stream for "
+
resource
+
" on "
+
getHost
(
)
+
(
e
.
getMessage
(
)
!=
null
?
": "
+
e
.
getMessage
(
)
:
""
)
)
;
ex
.
initCause
(
e
)
;
throw
ex
;
}
}
public
void
get
(
String
source
,
File
destination
)
throws
IOException
{
fireTransferInitiated
(
getResource
(
source
)
,
TransferEvent
.
REQUEST_GET
)
;
ChannelSftp
c
=
getSftpChannel
(
source
)
;
try
{
String
path
=
getPath
(
source
)
;
c
.
get
(
path
,
destination
.
getAbsolutePath
(
)
,
new
MyProgressMonitor
(
)
)
;
}
catch
(
SftpException
e
)
{
IOException
ex
=
new
IOException
(
"impossible to get "
+
source
+
" on "
+
getHost
(
)
+
(
e
.
getMessage
(
)
!=
null
?
": "
+
e
.
getMessage
(
)
:
""
)
)
;
ex
.
initCause
(
e
)
;
throw
ex
;
}
catch
(
URISyntaxException
e
)
{
IOException
ex
=
new
IOException
(
"impossible to get "
+
source
+
" on "
+
getHost
(
)
+
(
e
.
getMessage
(
)
!=
null
?
": "
+
e
.
getMessage
(
)
:
""
)
)
;
ex
.
initCause
(
e
)
;
throw
ex
;
}
}
public
void
put
(
File
source
,
String
destination
,
boolean
overwrite
)
throws
IOException
{
fireTransferInitiated
(
getResource
(
destination
)
,
TransferEvent
.
REQUEST_PUT
)
;
ChannelSftp
c
=
getSftpChannel
(
destination
)
;
try
{
String
path
=
getPath
(
destination
)
;
if
(
!
overwrite
&&
checkExistence
(
path
,
c
)
)
{
throw
new
IOException
(
"destination file exists and overwrite == false"
)
;
}
if
(
path
.
indexOf
(
'/'
)
!=
-
1
)
{
mkdirs
(
path
.
substring
(
0
,
path
.
lastIndexOf
(
'/'
)
)
,
c
)
;
}
c
.
put
(
source
.
getAbsolutePath
(
)
,
path
,
new
MyProgressMonitor
(
)
)
;
}
catch
(
SftpException
e
)
{
IOException
ex
=
new
IOException
(
e
.
getMessage
(
)
)
;
ex
.
initCause
(
e
)
;
throw
ex
;
}
catch
(
URISyntaxException
e
)
{
IOException
ex
=
new
IOException
(
e
.
getMessage
(
)
)
;
ex
.
initCause
(
e
)
;
throw
ex
;
}
}
private
void
mkdirs
(
String
directory
,
ChannelSftp
c
)
throws
IOException
,
SftpException
{
try
{
SftpATTRS
att
=
c
.
stat
(
directory
)
;
if
(
att
!=
null
)
{
if
(
att
.
isDir
(
)
)
{
return
;
}
}
}
catch
(
SftpException
ex
)
{
if
(
directory
.
indexOf
(
'/'
)
!=
-
1
)
{
mkdirs
(
directory
.
substring
(
0
,
directory
.
lastIndexOf
(
'/'
)
)
,
c
)
;
}
c
.
mkdir
(
directory
)
;
}
}
private
String
getPath
(
String
sftpURI
)
throws
URISyntaxException
{
String
result
=
null
;
URI
uri
=
new
URI
(
sftpURI
)
;
result
=
uri
.
getPath
(
)
;
if
(
result
==
null
)
{
throw
new
URISyntaxException
(
sftpURI
,
"Missing path in URI."
)
;
}
return
result
;
}
public
List
list
(
String
parent
)
throws
IOException
{
try
{
ChannelSftp
c
=
getSftpChannel
(
parent
)
;
Collection
r
=
c
.
ls
(
parent
)
;
if
(
r
!=
null
)
{
if
(
!
parent
.
endsWith
(
"/"
)
)
{
parent
=
parent
+
"/"
;
}
List
result
=
new
ArrayList
(
)
;
for
(
Iterator
iter
=
r
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
Object
obj
=
iter
.
next
(
)
;
if
(
obj
instanceof
LsEntry
)
{
LsEntry
entry
=
(
LsEntry
)
obj
;
if
(
"."
.
equals
(
entry
.
getFilename
(
)
)
||
".."
.
equals
(
entry
.
getFilename
(
)
)
)
{
continue
;
}
result
.
add
(
parent
+
entry
.
getFilename
(
)
)
;
}
}
return
result
;
}
}
catch
(
SftpException
e
)
{
IOException
ex
=
new
IOException
(
"Failed to return a listing for '"
+
parent
+
"'"
)
;
ex
.
initCause
(
e
)
;
throw
ex
;
}
return
null
;
}
private
boolean
checkExistence
(
String
file
,
ChannelSftp
channel
)
throws
IOException
,
SftpException
{
try
{
return
channel
.
stat
(
file
)
!=
null
;
}
catch
(
SftpException
ex
)
{
return
false
;
}
}
private
ChannelSftp
getSftpChannel
(
String
pathOrUri
)
throws
IOException
{
Session
session
=
getSession
(
pathOrUri
)
;
String
host
=
session
.
getHost
(
)
;
ChannelSftp
channel
=
SshCache
.
getInstance
(
)
.
getChannelSftp
(
session
)
;
if
(
channel
==
null
)
{
try
{
channel
=
(
ChannelSftp
)
session
.
openChannel
(
"sftp"
)
;
channel
.
connect
(
)
;
Message
.
verbose
(
":: SFTP :: connected to "
+
host
+
"!"
)
;
SshCache
.
getInstance
(
)
.
attachChannelSftp
(
session
,
channel
)
;
}
catch
(
JSchException
e
)
{
IOException
ex
=
new
IOException
(
e
.
getMessage
(
)
)
;
ex
.
initCause
(
e
)
;
throw
ex
;
}
}
return
channel
;
}
protected
String
getRepositoryScheme
(
)
{
return
"sftp"
;
}
}
