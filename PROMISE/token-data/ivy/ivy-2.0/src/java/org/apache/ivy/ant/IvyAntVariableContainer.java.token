package
org
.
apache
.
ivy
.
ant
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Map
;
import
java
.
util
.
Map
.
Entry
;
import
org
.
apache
.
ivy
.
core
.
settings
.
IvyVariableContainer
;
import
org
.
apache
.
ivy
.
core
.
settings
.
IvyVariableContainerImpl
;
import
org
.
apache
.
ivy
.
util
.
Message
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
Property
;
class
IvyAntVariableContainer
extends
IvyVariableContainerImpl
implements
IvyVariableContainer
{
private
Map
overwrittenProperties
=
new
HashMap
(
)
;
private
Project
project
;
public
IvyAntVariableContainer
(
Project
project
)
{
this
.
project
=
project
;
}
public
String
getVariable
(
String
name
)
{
String
r
=
(
String
)
overwrittenProperties
.
get
(
name
)
;
if
(
r
==
null
)
{
r
=
project
.
getProperty
(
name
)
;
}
if
(
r
==
null
)
{
r
=
super
.
getVariable
(
name
)
;
}
return
r
;
}
public
void
setVariable
(
String
varName
,
String
value
,
boolean
overwrite
)
{
if
(
overwrite
)
{
Message
.
debug
(
"setting '"
+
varName
+
"' to '"
+
value
+
"'"
)
;
overwrittenProperties
.
put
(
varName
,
substitute
(
value
)
)
;
}
else
{
super
.
setVariable
(
varName
,
value
,
overwrite
)
;
}
}
public
void
updateProject
(
String
id
)
{
Map
r
=
new
HashMap
(
super
.
getVariables
(
)
)
;
r
.
putAll
(
overwrittenProperties
)
;
for
(
Iterator
it
=
r
.
entrySet
(
)
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
Entry
entry
=
(
Entry
)
it
.
next
(
)
;
setPropertyIfNotSet
(
(
String
)
entry
.
getKey
(
)
,
(
String
)
entry
.
getValue
(
)
)
;
if
(
id
!=
null
)
{
setPropertyIfNotSet
(
(
String
)
entry
.
getKey
(
)
+
"."
+
id
,
(
String
)
entry
.
getValue
(
)
)
;
}
}
if
(
getEnvironmentPrefix
(
)
!=
null
)
{
Property
propTask
=
new
Property
(
)
;
propTask
.
setProject
(
project
)
;
propTask
.
setEnvironment
(
getEnvironmentPrefix
(
)
)
;
propTask
.
init
(
)
;
propTask
.
execute
(
)
;
}
}
private
void
setPropertyIfNotSet
(
String
property
,
String
value
)
{
if
(
project
.
getProperty
(
property
)
==
null
)
{
project
.
setProperty
(
property
,
value
)
;
}
}
public
Object
clone
(
)
{
IvyAntVariableContainer
result
=
(
IvyAntVariableContainer
)
super
.
clone
(
)
;
result
.
overwrittenProperties
=
(
HashMap
)
(
(
HashMap
)
this
.
overwrittenProperties
)
.
clone
(
)
;
return
result
;
}
}
