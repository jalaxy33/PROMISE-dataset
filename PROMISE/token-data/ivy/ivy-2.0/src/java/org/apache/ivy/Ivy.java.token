package
org
.
apache
.
ivy
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
net
.
URL
;
import
java
.
text
.
ParseException
;
import
java
.
text
.
SimpleDateFormat
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Properties
;
import
org
.
apache
.
ivy
.
core
.
IvyContext
;
import
org
.
apache
.
ivy
.
core
.
LogOptions
;
import
org
.
apache
.
ivy
.
core
.
cache
.
ResolutionCacheManager
;
import
org
.
apache
.
ivy
.
core
.
check
.
CheckEngine
;
import
org
.
apache
.
ivy
.
core
.
deliver
.
DeliverEngine
;
import
org
.
apache
.
ivy
.
core
.
deliver
.
DeliverOptions
;
import
org
.
apache
.
ivy
.
core
.
event
.
EventManager
;
import
org
.
apache
.
ivy
.
core
.
install
.
InstallEngine
;
import
org
.
apache
.
ivy
.
core
.
install
.
InstallOptions
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
ModuleDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
id
.
ModuleId
;
import
org
.
apache
.
ivy
.
core
.
module
.
id
.
ModuleRevisionId
;
import
org
.
apache
.
ivy
.
core
.
publish
.
PublishEngine
;
import
org
.
apache
.
ivy
.
core
.
publish
.
PublishOptions
;
import
org
.
apache
.
ivy
.
core
.
report
.
ResolveReport
;
import
org
.
apache
.
ivy
.
core
.
repository
.
RepositoryManagementEngine
;
import
org
.
apache
.
ivy
.
core
.
resolve
.
ResolveData
;
import
org
.
apache
.
ivy
.
core
.
resolve
.
ResolveEngine
;
import
org
.
apache
.
ivy
.
core
.
resolve
.
ResolveOptions
;
import
org
.
apache
.
ivy
.
core
.
resolve
.
ResolvedModuleRevision
;
import
org
.
apache
.
ivy
.
core
.
retrieve
.
RetrieveEngine
;
import
org
.
apache
.
ivy
.
core
.
retrieve
.
RetrieveOptions
;
import
org
.
apache
.
ivy
.
core
.
search
.
ModuleEntry
;
import
org
.
apache
.
ivy
.
core
.
search
.
OrganisationEntry
;
import
org
.
apache
.
ivy
.
core
.
search
.
RevisionEntry
;
import
org
.
apache
.
ivy
.
core
.
search
.
SearchEngine
;
import
org
.
apache
.
ivy
.
core
.
settings
.
IvySettings
;
import
org
.
apache
.
ivy
.
core
.
sort
.
SortEngine
;
import
org
.
apache
.
ivy
.
core
.
sort
.
SortOptions
;
import
org
.
apache
.
ivy
.
plugins
.
matcher
.
PatternMatcher
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
TransferEvent
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
TransferListener
;
import
org
.
apache
.
ivy
.
plugins
.
resolver
.
BasicResolver
;
import
org
.
apache
.
ivy
.
plugins
.
resolver
.
DependencyResolver
;
import
org
.
apache
.
ivy
.
plugins
.
trigger
.
Trigger
;
import
org
.
apache
.
ivy
.
util
.
HostUtil
;
import
org
.
apache
.
ivy
.
util
.
Message
;
import
org
.
apache
.
ivy
.
util
.
MessageLoggerEngine
;
public
class
Ivy
{
public
static
interface
IvyCallback
{
public
Object
doInIvyContext
(
Ivy
ivy
,
IvyContext
context
)
;
}
private
static
final
int
KILO
=
1024
;
public
static
final
SimpleDateFormat
DATE_FORMAT
=
new
SimpleDateFormat
(
"yyyyMMddHHmmss"
)
;
private
static
final
String
IVY_VERSION
;
private
static
final
String
IVY_DATE
;
static
{
Properties
props
=
new
Properties
(
)
;
URL
moduleURL
=
Message
.
class
.
getResource
(
"/module.properties"
)
;
if
(
moduleURL
!=
null
)
{
try
{
InputStream
module
=
moduleURL
.
openStream
(
)
;
props
.
load
(
module
)
;
module
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
}
IVY_VERSION
=
props
.
getProperty
(
"version"
,
"non official version"
)
;
IVY_DATE
=
props
.
getProperty
(
"date"
,
""
)
;
}
public
static
String
getIvyVersion
(
)
{
return
IVY_VERSION
;
}
public
static
String
getIvyDate
(
)
{
return
IVY_DATE
;
}
public
static
String
getIvyHomeURL
(
)
{
return
"http://ant.apache.org/ivy/"
;
}
public
static
Ivy
newInstance
(
)
{
Ivy
ivy
=
new
Ivy
(
)
;
ivy
.
bind
(
)
;
return
ivy
;
}
public
static
Ivy
newInstance
(
IvySettings
settings
)
{
Ivy
ivy
=
new
Ivy
(
)
;
ivy
.
setSettings
(
settings
)
;
ivy
.
bind
(
)
;
return
ivy
;
}
private
boolean
interrupted
;
private
boolean
bound
;
private
IvySettings
settings
;
private
EventManager
eventManager
;
private
SortEngine
sortEngine
;
private
SearchEngine
searchEngine
;
private
CheckEngine
checkEngine
;
private
ResolveEngine
resolveEngine
;
private
RetrieveEngine
retrieveEngine
;
private
DeliverEngine
deliverEngine
;
private
PublishEngine
publishEngine
;
private
InstallEngine
installEngine
;
private
RepositoryManagementEngine
repositoryEngine
;
private
MessageLoggerEngine
loggerEngine
=
new
MessageLoggerEngine
(
)
;
public
Ivy
(
)
{
}
public
void
bind
(
)
{
pushContext
(
)
;
try
{
if
(
settings
==
null
)
{
settings
=
new
IvySettings
(
)
;
}
if
(
eventManager
==
null
)
{
eventManager
=
new
EventManager
(
)
;
}
if
(
sortEngine
==
null
)
{
sortEngine
=
new
SortEngine
(
settings
)
;
}
if
(
searchEngine
==
null
)
{
searchEngine
=
new
SearchEngine
(
settings
)
;
}
if
(
resolveEngine
==
null
)
{
resolveEngine
=
new
ResolveEngine
(
settings
,
eventManager
,
sortEngine
)
;
}
if
(
retrieveEngine
==
null
)
{
retrieveEngine
=
new
RetrieveEngine
(
settings
,
eventManager
)
;
}
if
(
deliverEngine
==
null
)
{
deliverEngine
=
new
DeliverEngine
(
settings
)
;
}
if
(
publishEngine
==
null
)
{
publishEngine
=
new
PublishEngine
(
settings
,
eventManager
)
;
}
if
(
installEngine
==
null
)
{
installEngine
=
new
InstallEngine
(
settings
,
searchEngine
,
resolveEngine
)
;
}
if
(
repositoryEngine
==
null
)
{
repositoryEngine
=
new
RepositoryManagementEngine
(
settings
,
searchEngine
,
resolveEngine
)
;
}
eventManager
.
addTransferListener
(
new
TransferListener
(
)
{
public
void
transferProgress
(
TransferEvent
evt
)
{
ResolveData
resolve
;
switch
(
evt
.
getEventType
(
)
)
{
case
TransferEvent
.
TRANSFER_PROGRESS
:
resolve
=
IvyContext
.
getContext
(
)
.
getResolveData
(
)
;
if
(
resolve
==
null
||
!
LogOptions
.
LOG_QUIET
.
equals
(
resolve
.
getOptions
(
)
.
getLog
(
)
)
)
{
Message
.
progress
(
)
;
}
break
;
case
TransferEvent
.
TRANSFER_COMPLETED
:
resolve
=
IvyContext
.
getContext
(
)
.
getResolveData
(
)
;
if
(
resolve
==
null
||
!
LogOptions
.
LOG_QUIET
.
equals
(
resolve
.
getOptions
(
)
.
getLog
(
)
)
)
{
Message
.
endProgress
(
" ("
+
(
evt
.
getTotalLength
(
)
/
KILO
)
+
"kB)"
)
;
}
break
;
default
:
break
;
}
}
}
)
;
bound
=
true
;
}
finally
{
popContext
(
)
;
}
}
public
Object
execute
(
IvyCallback
callback
)
{
pushContext
(
)
;
try
{
return
callback
.
doInIvyContext
(
this
,
IvyContext
.
getContext
(
)
)
;
}
finally
{
popContext
(
)
;
}
}
public
void
pushContext
(
)
{
if
(
IvyContext
.
getContext
(
)
.
peekIvy
(
)
!=
this
)
{
IvyContext
.
pushNewContext
(
)
;
IvyContext
.
getContext
(
)
.
setIvy
(
this
)
;
}
else
{
IvyContext
.
pushContext
(
IvyContext
.
getContext
(
)
)
;
}
}
public
void
popContext
(
)
{
IvyContext
.
popContext
(
)
;
}
public
void
configure
(
File
settingsFile
)
throws
ParseException
,
IOException
{
pushContext
(
)
;
try
{
assertBound
(
)
;
settings
.
load
(
settingsFile
)
;
postConfigure
(
)
;
}
finally
{
popContext
(
)
;
}
}
public
void
configure
(
URL
settingsURL
)
throws
ParseException
,
IOException
{
pushContext
(
)
;
try
{
assertBound
(
)
;
settings
.
load
(
settingsURL
)
;
postConfigure
(
)
;
}
finally
{
popContext
(
)
;
}
}
public
void
configureDefault
(
)
throws
ParseException
,
IOException
{
pushContext
(
)
;
try
{
assertBound
(
)
;
settings
.
loadDefault
(
)
;
postConfigure
(
)
;
}
finally
{
popContext
(
)
;
}
}
public
void
configureDefault14
(
)
throws
ParseException
,
IOException
{
pushContext
(
)
;
try
{
assertBound
(
)
;
settings
.
loadDefault14
(
)
;
postConfigure
(
)
;
}
finally
{
popContext
(
)
;
}
}
public
boolean
check
(
URL
ivyFile
,
String
resolvername
)
{
pushContext
(
)
;
try
{
return
checkEngine
.
check
(
ivyFile
,
resolvername
)
;
}
finally
{
popContext
(
)
;
}
}
public
ResolveReport
resolve
(
File
ivySource
)
throws
ParseException
,
IOException
{
pushContext
(
)
;
try
{
return
resolveEngine
.
resolve
(
ivySource
)
;
}
finally
{
popContext
(
)
;
}
}
public
ResolveReport
resolve
(
URL
ivySource
)
throws
ParseException
,
IOException
{
pushContext
(
)
;
try
{
return
resolveEngine
.
resolve
(
ivySource
)
;
}
finally
{
popContext
(
)
;
}
}
public
ResolveReport
resolve
(
ModuleRevisionId
mrid
,
ResolveOptions
options
,
boolean
changing
)
throws
ParseException
,
IOException
{
pushContext
(
)
;
try
{
return
resolveEngine
.
resolve
(
mrid
,
options
,
changing
)
;
}
finally
{
popContext
(
)
;
}
}
public
ResolveReport
resolve
(
URL
ivySource
,
ResolveOptions
options
)
throws
ParseException
,
IOException
{
pushContext
(
)
;
try
{
return
resolveEngine
.
resolve
(
ivySource
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
ResolveReport
resolve
(
ModuleDescriptor
md
,
ResolveOptions
options
)
throws
ParseException
,
IOException
{
pushContext
(
)
;
try
{
return
resolveEngine
.
resolve
(
md
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
ResolveReport
install
(
ModuleRevisionId
mrid
,
String
from
,
String
to
,
InstallOptions
options
)
throws
IOException
{
pushContext
(
)
;
try
{
return
installEngine
.
install
(
mrid
,
from
,
to
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
int
retrieve
(
ModuleRevisionId
mrid
,
String
destFilePattern
,
RetrieveOptions
options
)
throws
IOException
{
pushContext
(
)
;
try
{
return
retrieveEngine
.
retrieve
(
mrid
,
destFilePattern
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
void
deliver
(
ModuleRevisionId
mrid
,
String
revision
,
String
destIvyPattern
)
throws
IOException
,
ParseException
{
pushContext
(
)
;
try
{
deliverEngine
.
deliver
(
mrid
,
revision
,
destIvyPattern
,
DeliverOptions
.
newInstance
(
settings
)
)
;
}
finally
{
popContext
(
)
;
}
}
public
void
deliver
(
String
revision
,
String
destIvyPattern
,
DeliverOptions
options
)
throws
IOException
,
ParseException
{
pushContext
(
)
;
try
{
deliverEngine
.
deliver
(
revision
,
destIvyPattern
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
void
deliver
(
ModuleRevisionId
mrid
,
String
revision
,
String
destIvyPattern
,
DeliverOptions
options
)
throws
IOException
,
ParseException
{
pushContext
(
)
;
try
{
deliverEngine
.
deliver
(
mrid
,
revision
,
destIvyPattern
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
Collection
publish
(
ModuleRevisionId
mrid
,
Collection
srcArtifactPattern
,
String
resolverName
,
PublishOptions
options
)
throws
IOException
{
pushContext
(
)
;
try
{
return
publishEngine
.
publish
(
mrid
,
srcArtifactPattern
,
resolverName
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
List
sortNodes
(
Collection
nodes
,
SortOptions
options
)
{
pushContext
(
)
;
try
{
return
getSortEngine
(
)
.
sortNodes
(
nodes
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
List
sortModuleDescriptors
(
Collection
moduleDescriptors
,
SortOptions
options
)
{
pushContext
(
)
;
try
{
return
getSortEngine
(
)
.
sortModuleDescriptors
(
moduleDescriptors
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
ResolvedModuleRevision
findModule
(
ModuleRevisionId
mrid
)
{
pushContext
(
)
;
try
{
ResolveOptions
options
=
new
ResolveOptions
(
)
;
options
.
setValidate
(
false
)
;
return
resolveEngine
.
findModule
(
mrid
,
options
)
;
}
finally
{
popContext
(
)
;
}
}
public
ModuleEntry
[
]
listModuleEntries
(
OrganisationEntry
org
)
{
pushContext
(
)
;
try
{
return
searchEngine
.
listModuleEntries
(
org
)
;
}
finally
{
popContext
(
)
;
}
}
public
ModuleId
[
]
listModules
(
ModuleId
criteria
,
PatternMatcher
matcher
)
{
pushContext
(
)
;
try
{
return
searchEngine
.
listModules
(
criteria
,
matcher
)
;
}
finally
{
popContext
(
)
;
}
}
public
ModuleRevisionId
[
]
listModules
(
ModuleRevisionId
criteria
,
PatternMatcher
matcher
)
{
pushContext
(
)
;
try
{
return
searchEngine
.
listModules
(
criteria
,
matcher
)
;
}
finally
{
popContext
(
)
;
}
}
public
String
[
]
listModules
(
String
org
)
{
pushContext
(
)
;
try
{
return
searchEngine
.
listModules
(
org
)
;
}
finally
{
popContext
(
)
;
}
}
public
OrganisationEntry
[
]
listOrganisationEntries
(
)
{
pushContext
(
)
;
try
{
return
searchEngine
.
listOrganisationEntries
(
)
;
}
finally
{
popContext
(
)
;
}
}
public
String
[
]
listOrganisations
(
)
{
pushContext
(
)
;
try
{
return
searchEngine
.
listOrganisations
(
)
;
}
finally
{
popContext
(
)
;
}
}
public
RevisionEntry
[
]
listRevisionEntries
(
ModuleEntry
module
)
{
pushContext
(
)
;
try
{
return
searchEngine
.
listRevisionEntries
(
module
)
;
}
finally
{
popContext
(
)
;
}
}
public
String
[
]
listRevisions
(
String
org
,
String
module
)
{
pushContext
(
)
;
try
{
return
searchEngine
.
listRevisions
(
org
,
module
)
;
}
finally
{
popContext
(
)
;
}
}
public
String
[
]
listTokenValues
(
String
token
,
Map
otherTokenValues
)
{
pushContext
(
)
;
try
{
return
searchEngine
.
listTokenValues
(
token
,
otherTokenValues
)
;
}
finally
{
popContext
(
)
;
}
}
public
void
interrupt
(
)
{
Thread
operatingThread
=
IvyContext
.
getContext
(
)
.
getOperatingThread
(
)
;
interrupt
(
operatingThread
)
;
}
public
void
interrupt
(
Thread
operatingThread
)
{
if
(
operatingThread
!=
null
&&
operatingThread
.
isAlive
(
)
)
{
if
(
operatingThread
==
Thread
.
currentThread
(
)
)
{
throw
new
IllegalStateException
(
"cannot call interrupt from ivy operating thread"
)
;
}
Message
.
verbose
(
"interrupting operating thread..."
)
;
operatingThread
.
interrupt
(
)
;
synchronized
(
this
)
{
interrupted
=
true
;
}
try
{
Message
.
verbose
(
"waiting clean interruption of operating thread"
)
;
operatingThread
.
join
(
settings
.
getInterruptTimeout
(
)
)
;
}
catch
(
InterruptedException
e
)
{
Thread
.
currentThread
(
)
.
interrupt
(
)
;
}
if
(
operatingThread
.
isAlive
(
)
)
{
Message
.
warn
(
"waited clean interruption for too long: stopping operating thread"
)
;
operatingThread
.
stop
(
)
;
}
synchronized
(
this
)
{
interrupted
=
false
;
}
}
}
public
synchronized
boolean
isInterrupted
(
)
{
return
interrupted
;
}
public
void
checkInterrupted
(
)
{
if
(
isInterrupted
(
)
)
{
Message
.
info
(
"operation interrupted"
)
;
throw
new
RuntimeException
(
"operation interrupted"
)
;
}
}
public
static
String
getWorkingRevision
(
)
{
return
"working@"
+
HostUtil
.
getLocalHostName
(
)
;
}
public
ResolutionCacheManager
getResolutionCacheManager
(
)
{
return
settings
.
getResolutionCacheManager
(
)
;
}
private
void
assertBound
(
)
{
if
(
!
bound
)
{
bind
(
)
;
}
}
private
void
postConfigure
(
)
{
Collection
triggers
=
settings
.
getTriggers
(
)
;
for
(
Iterator
iter
=
triggers
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
Trigger
trigger
=
(
Trigger
)
iter
.
next
(
)
;
eventManager
.
addIvyListener
(
trigger
,
trigger
.
getEventFilter
(
)
)
;
}
for
(
Iterator
iter
=
settings
.
getResolvers
(
)
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
DependencyResolver
resolver
=
(
DependencyResolver
)
iter
.
next
(
)
;
if
(
resolver
instanceof
BasicResolver
)
{
(
(
BasicResolver
)
resolver
)
.
setEventManager
(
eventManager
)
;
}
}
}
public
String
getVariable
(
String
name
)
{
pushContext
(
)
;
try
{
assertBound
(
)
;
return
settings
.
getVariable
(
name
)
;
}
finally
{
popContext
(
)
;
}
}
public
String
substitute
(
String
str
)
{
pushContext
(
)
;
try
{
assertBound
(
)
;
return
settings
.
substitute
(
str
)
;
}
finally
{
popContext
(
)
;
}
}
public
void
setVariable
(
String
varName
,
String
value
)
{
pushContext
(
)
;
try
{
assertBound
(
)
;
settings
.
setVariable
(
varName
,
value
)
;
}
finally
{
popContext
(
)
;
}
}
public
IvySettings
getSettings
(
)
{
return
settings
;
}
public
EventManager
getEventManager
(
)
{
return
eventManager
;
}
public
CheckEngine
getCheckEngine
(
)
{
return
checkEngine
;
}
public
void
setCheckEngine
(
CheckEngine
checkEngine
)
{
this
.
checkEngine
=
checkEngine
;
}
public
DeliverEngine
getDeliverEngine
(
)
{
return
deliverEngine
;
}
public
void
setDeliverEngine
(
DeliverEngine
deliverEngine
)
{
this
.
deliverEngine
=
deliverEngine
;
}
public
InstallEngine
getInstallEngine
(
)
{
return
installEngine
;
}
public
void
setInstallEngine
(
InstallEngine
installEngine
)
{
this
.
installEngine
=
installEngine
;
}
public
PublishEngine
getPublishEngine
(
)
{
return
publishEngine
;
}
public
void
setPublishEngine
(
PublishEngine
publishEngine
)
{
this
.
publishEngine
=
publishEngine
;
}
public
ResolveEngine
getResolveEngine
(
)
{
return
resolveEngine
;
}
public
void
setResolveEngine
(
ResolveEngine
resolveEngine
)
{
this
.
resolveEngine
=
resolveEngine
;
}
public
RetrieveEngine
getRetrieveEngine
(
)
{
return
retrieveEngine
;
}
public
void
setRetrieveEngine
(
RetrieveEngine
retrieveEngine
)
{
this
.
retrieveEngine
=
retrieveEngine
;
}
public
SearchEngine
getSearchEngine
(
)
{
return
searchEngine
;
}
public
void
setSearchEngine
(
SearchEngine
searchEngine
)
{
this
.
searchEngine
=
searchEngine
;
}
public
SortEngine
getSortEngine
(
)
{
return
sortEngine
;
}
public
void
setSortEngine
(
SortEngine
sortEngine
)
{
this
.
sortEngine
=
sortEngine
;
}
public
RepositoryManagementEngine
getRepositoryEngine
(
)
{
return
repositoryEngine
;
}
public
void
setRepositoryEngine
(
RepositoryManagementEngine
repositoryEngine
)
{
this
.
repositoryEngine
=
repositoryEngine
;
}
public
void
setEventManager
(
EventManager
eventManager
)
{
this
.
eventManager
=
eventManager
;
}
public
void
setSettings
(
IvySettings
settings
)
{
this
.
settings
=
settings
;
}
public
MessageLoggerEngine
getLoggerEngine
(
)
{
return
loggerEngine
;
}
}
