package
org
.
apache
.
ivy
.
ant
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Map
;
import
org
.
apache
.
ivy
.
core
.
IvyContext
;
import
org
.
apache
.
ivy
.
core
.
IvyPatternHelper
;
import
org
.
apache
.
ivy
.
core
.
event
.
IvyEvent
;
import
org
.
apache
.
ivy
.
plugins
.
trigger
.
AbstractTrigger
;
import
org
.
apache
.
ivy
.
plugins
.
trigger
.
Trigger
;
import
org
.
apache
.
ivy
.
util
.
Message
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
CallTarget
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
Property
;
public
class
AntCallTrigger
extends
AbstractTrigger
implements
Trigger
{
private
boolean
onlyonce
=
true
;
private
String
target
=
null
;
private
Collection
calls
=
new
ArrayList
(
)
;
private
String
prefix
;
public
void
progress
(
IvyEvent
event
)
{
Project
project
=
(
Project
)
IvyContext
.
peekInContextStack
(
IvyTask
.
ANT_PROJECT_CONTEXT_KEY
)
;
if
(
project
==
null
)
{
Message
.
info
(
"ant call trigger can only be used from an ant build. Ignoring."
)
;
return
;
}
if
(
onlyonce
&&
isTriggered
(
event
)
)
{
Message
.
verbose
(
"call already triggered for this event, skipping: "
+
event
)
;
}
else
{
CallTarget
call
=
new
CallTarget
(
)
;
call
.
setProject
(
project
)
;
call
.
setTaskName
(
"antcall"
)
;
Map
attributes
=
event
.
getAttributes
(
)
;
String
target
=
IvyPatternHelper
.
substituteTokens
(
getTarget
(
)
,
attributes
)
;
call
.
setTarget
(
target
)
;
for
(
Iterator
iter
=
attributes
.
keySet
(
)
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
String
key
=
(
String
)
iter
.
next
(
)
;
String
value
=
(
String
)
attributes
.
get
(
key
)
;
Property
p
=
call
.
createParam
(
)
;
p
.
setName
(
prefix
==
null
?
key
:
prefix
+
key
)
;
p
.
setValue
(
value
==
null
?
""
:
value
)
;
}
Message
.
verbose
(
"triggering ant call: target="
+
target
+
" for "
+
event
)
;
call
.
execute
(
)
;
markTriggered
(
event
)
;
Message
.
debug
(
"triggered ant call finished: target="
+
target
+
" for "
+
event
)
;
}
}
private
void
markTriggered
(
IvyEvent
event
)
{
calls
.
add
(
event
)
;
}
private
boolean
isTriggered
(
IvyEvent
event
)
{
return
calls
.
contains
(
event
)
;
}
public
String
getTarget
(
)
{
return
target
;
}
public
void
setTarget
(
String
target
)
{
this
.
target
=
target
;
}
public
boolean
isOnlyonce
(
)
{
return
onlyonce
;
}
public
void
setOnlyonce
(
boolean
onlyonce
)
{
this
.
onlyonce
=
onlyonce
;
}
public
String
getPrefix
(
)
{
return
prefix
;
}
public
void
setPrefix
(
String
prefix
)
{
this
.
prefix
=
prefix
;
if
(
!
prefix
.
endsWith
(
"."
)
)
{
this
.
prefix
+=
"."
;
}
}
}
