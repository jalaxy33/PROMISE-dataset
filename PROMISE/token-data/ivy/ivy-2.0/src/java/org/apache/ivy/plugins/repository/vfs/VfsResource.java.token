package
org
.
apache
.
ivy
.
plugins
.
repository
.
vfs
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
apache
.
commons
.
vfs
.
FileContent
;
import
org
.
apache
.
commons
.
vfs
.
FileObject
;
import
org
.
apache
.
commons
.
vfs
.
FileSystemException
;
import
org
.
apache
.
commons
.
vfs
.
FileSystemManager
;
import
org
.
apache
.
commons
.
vfs
.
FileType
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
Resource
;
import
org
.
apache
.
ivy
.
plugins
.
resolver
.
VfsResolver
;
import
org
.
apache
.
ivy
.
util
.
Message
;
public
class
VfsResource
implements
Resource
{
private
String
vfsURI
;
private
FileSystemManager
fsManager
;
private
transient
boolean
init
=
false
;
private
transient
boolean
exists
;
private
transient
long
lastModified
;
private
transient
long
contentLength
;
private
transient
FileContent
content
=
null
;
private
transient
FileObject
resourceImpl
;
public
VfsResource
(
String
vfsURI
,
FileSystemManager
fsManager
)
{
this
.
vfsURI
=
vfsURI
;
this
.
fsManager
=
fsManager
;
this
.
init
=
false
;
}
private
void
init
(
)
{
if
(
!
init
)
{
try
{
resourceImpl
=
fsManager
.
resolveFile
(
vfsURI
)
;
content
=
resourceImpl
.
getContent
(
)
;
exists
=
resourceImpl
.
exists
(
)
;
lastModified
=
content
.
getLastModifiedTime
(
)
;
contentLength
=
content
.
getSize
(
)
;
}
catch
(
FileSystemException
e
)
{
Message
.
verbose
(
e
.
getLocalizedMessage
(
)
)
;
exists
=
false
;
lastModified
=
0
;
contentLength
=
0
;
}
init
=
true
;
}
}
public
List
getChildren
(
)
{
init
(
)
;
ArrayList
list
=
new
ArrayList
(
)
;
try
{
if
(
(
resourceImpl
!=
null
)
&&
resourceImpl
.
exists
(
)
&&
(
resourceImpl
.
getType
(
)
==
FileType
.
FOLDER
)
)
{
FileObject
[
]
children
=
resourceImpl
.
getChildren
(
)
;
for
(
int
i
=
0
;
i
<
children
.
length
;
i
++
)
{
FileObject
child
=
children
[
i
]
;
list
.
add
(
normalize
(
child
.
getName
(
)
.
getURI
(
)
)
)
;
}
}
}
catch
(
IOException
e
)
{
Message
.
verbose
(
e
.
getLocalizedMessage
(
)
)
;
}
return
list
;
}
public
FileContent
getContent
(
)
{
init
(
)
;
return
content
;
}
public
String
getName
(
)
{
return
normalize
(
vfsURI
)
;
}
public
Resource
clone
(
String
cloneName
)
{
return
new
VfsResource
(
cloneName
,
fsManager
)
;
}
public
static
String
normalize
(
String
vfsURI
)
{
if
(
vfsURI
==
null
)
{
return
""
;
}
if
(
vfsURI
.
startsWith
(
"file:////"
)
)
{
vfsURI
=
vfsURI
.
replaceFirst
(
"////"
,
"///"
)
;
}
return
vfsURI
;
}
public
long
getLastModified
(
)
{
init
(
)
;
return
lastModified
;
}
public
long
getContentLength
(
)
{
init
(
)
;
return
contentLength
;
}
public
boolean
exists
(
)
{
init
(
)
;
return
exists
;
}
public
boolean
physicallyExists
(
)
{
init
(
)
;
try
{
return
resourceImpl
.
exists
(
)
;
}
catch
(
Exception
e
)
{
Message
.
verbose
(
e
.
getLocalizedMessage
(
)
)
;
return
false
;
}
}
public
String
toString
(
)
{
return
VfsResolver
.
prepareForDisplay
(
getName
(
)
)
;
}
public
boolean
isLocal
(
)
{
return
getName
(
)
.
startsWith
(
"file:"
)
;
}
public
InputStream
openStream
(
)
throws
IOException
{
return
getContent
(
)
.
getInputStream
(
)
;
}
}
