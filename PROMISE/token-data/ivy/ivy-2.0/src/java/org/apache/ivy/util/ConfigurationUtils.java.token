package
org
.
apache
.
ivy
.
util
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
LinkedHashSet
;
import
java
.
util
.
Set
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
Configuration
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
ModuleDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
Configuration
.
Visibility
;
public
final
class
ConfigurationUtils
{
private
ConfigurationUtils
(
)
{
}
public
static
String
[
]
replaceWildcards
(
String
[
]
confs
,
ModuleDescriptor
md
)
{
if
(
confs
==
null
)
{
return
md
.
getConfigurationsNames
(
)
;
}
Set
result
=
new
LinkedHashSet
(
)
;
Set
excluded
=
new
LinkedHashSet
(
)
;
for
(
int
i
=
0
;
i
<
confs
.
length
;
i
++
)
{
if
(
"*"
.
equals
(
confs
[
i
]
)
)
{
result
.
addAll
(
Arrays
.
asList
(
md
.
getConfigurationsNames
(
)
)
)
;
}
else
if
(
"*(public)"
.
equals
(
confs
[
i
]
)
)
{
Configuration
[
]
all
=
md
.
getConfigurations
(
)
;
for
(
int
j
=
0
;
j
<
all
.
length
;
j
++
)
{
if
(
all
[
j
]
.
getVisibility
(
)
.
equals
(
Visibility
.
PUBLIC
)
)
{
result
.
add
(
all
[
j
]
.
getName
(
)
)
;
}
}
}
else
if
(
"*(private)"
.
equals
(
confs
[
i
]
)
)
{
Configuration
[
]
all
=
md
.
getConfigurations
(
)
;
for
(
int
j
=
0
;
j
<
all
.
length
;
j
++
)
{
if
(
all
[
j
]
.
getVisibility
(
)
.
equals
(
Visibility
.
PRIVATE
)
)
{
result
.
add
(
all
[
j
]
.
getName
(
)
)
;
}
}
}
else
if
(
confs
[
i
]
.
startsWith
(
"!"
)
)
{
excluded
.
add
(
confs
[
i
]
.
substring
(
1
)
)
;
}
else
{
result
.
add
(
confs
[
i
]
)
;
}
}
for
(
Iterator
iter
=
excluded
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
result
.
remove
(
iter
.
next
(
)
)
;
}
return
(
String
[
]
)
result
.
toArray
(
new
String
[
result
.
size
(
)
]
)
;
}
}
