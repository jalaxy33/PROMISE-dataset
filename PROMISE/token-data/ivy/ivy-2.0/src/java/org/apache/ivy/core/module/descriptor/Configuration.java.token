package
org
.
apache
.
ivy
.
core
.
module
.
descriptor
;
import
java
.
util
.
LinkedHashSet
;
import
java
.
util
.
Set
;
import
org
.
apache
.
ivy
.
util
.
extendable
.
DefaultExtendableItem
;
public
class
Configuration
extends
DefaultExtendableItem
{
public
static
final
class
Visibility
{
public
static
final
Visibility
PUBLIC
=
new
Visibility
(
"public"
)
;
public
static
final
Visibility
PRIVATE
=
new
Visibility
(
"private"
)
;
public
static
Visibility
getVisibility
(
String
name
)
{
if
(
"private"
.
equals
(
name
)
)
{
return
PRIVATE
;
}
else
if
(
"public"
.
equals
(
name
)
)
{
return
PUBLIC
;
}
else
{
throw
new
IllegalArgumentException
(
"unknwon visibility "
+
name
)
;
}
}
private
String
name
;
private
Visibility
(
String
name
)
{
this
.
name
=
name
;
}
public
String
toString
(
)
{
return
name
;
}
}
private
String
name
;
private
String
description
;
private
String
[
]
extendsFrom
;
private
Visibility
visibility
;
private
boolean
transitive
=
true
;
private
String
deprecated
;
public
Configuration
(
String
name
)
{
this
(
name
,
Visibility
.
PUBLIC
,
null
,
null
,
true
,
null
)
;
}
public
Configuration
(
String
name
,
Visibility
visibility
,
String
description
,
String
[
]
ext
,
boolean
transitive
,
String
deprecated
)
{
if
(
name
==
null
)
{
throw
new
NullPointerException
(
"null configuration name not allowed"
)
;
}
if
(
visibility
==
null
)
{
throw
new
NullPointerException
(
"null visibility not allowed"
)
;
}
this
.
name
=
name
;
this
.
visibility
=
visibility
;
this
.
description
=
description
;
if
(
ext
==
null
)
{
extendsFrom
=
new
String
[
0
]
;
}
else
{
extendsFrom
=
new
String
[
ext
.
length
]
;
for
(
int
i
=
0
;
i
<
ext
.
length
;
i
++
)
{
extendsFrom
[
i
]
=
ext
[
i
]
.
trim
(
)
;
}
}
this
.
transitive
=
transitive
;
this
.
deprecated
=
deprecated
;
}
public
String
getDeprecated
(
)
{
return
deprecated
;
}
public
String
getDescription
(
)
{
return
description
;
}
public
String
[
]
getExtends
(
)
{
return
extendsFrom
;
}
public
String
getName
(
)
{
return
name
;
}
public
Visibility
getVisibility
(
)
{
return
visibility
;
}
public
final
boolean
isTransitive
(
)
{
return
transitive
;
}
public
String
toString
(
)
{
return
name
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
!
(
obj
instanceof
Configuration
)
)
{
return
false
;
}
return
(
(
Configuration
)
obj
)
.
getName
(
)
.
equals
(
getName
(
)
)
;
}
public
int
hashCode
(
)
{
return
getName
(
)
.
hashCode
(
)
;
}
public
void
replaceWildcards
(
ModuleDescriptor
md
)
{
if
(
this
!=
md
.
getConfiguration
(
name
)
)
{
throw
new
IllegalArgumentException
(
"The given ModuleDescriptor doesn't own this configuration!"
)
;
}
Configuration
[
]
configs
=
md
.
getConfigurations
(
)
;
Set
newExtends
=
new
LinkedHashSet
(
)
;
for
(
int
j
=
0
;
j
<
extendsFrom
.
length
;
j
++
)
{
if
(
"*"
.
equals
(
extendsFrom
[
j
]
)
)
{
addOther
(
configs
,
null
,
newExtends
)
;
}
else
if
(
"*(public)"
.
equals
(
extendsFrom
[
j
]
)
)
{
addOther
(
configs
,
Visibility
.
PUBLIC
,
newExtends
)
;
}
else
if
(
"*(private)"
.
equals
(
extendsFrom
[
j
]
)
)
{
addOther
(
configs
,
Visibility
.
PRIVATE
,
newExtends
)
;
}
else
{
newExtends
.
add
(
extendsFrom
[
j
]
)
;
}
}
this
.
extendsFrom
=
(
String
[
]
)
newExtends
.
toArray
(
new
String
[
newExtends
.
size
(
)
]
)
;
}
private
void
addOther
(
Configuration
[
]
allConfigs
,
Visibility
visibility
,
Set
configs
)
{
for
(
int
i
=
0
;
i
<
allConfigs
.
length
;
i
++
)
{
String
currentName
=
allConfigs
[
i
]
.
getName
(
)
;
if
(
!
name
.
equals
(
currentName
)
&&
(
(
visibility
==
null
)
||
visibility
.
equals
(
allConfigs
[
i
]
.
getVisibility
(
)
)
)
)
{
configs
.
add
(
currentName
)
;
}
}
}
}
