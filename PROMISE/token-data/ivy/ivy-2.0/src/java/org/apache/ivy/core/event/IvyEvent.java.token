package
org
.
apache
.
ivy
.
core
.
event
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
org
.
apache
.
ivy
.
core
.
IvyContext
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
ModuleDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
id
.
ModuleId
;
import
org
.
apache
.
ivy
.
core
.
module
.
id
.
ModuleRevisionId
;
import
org
.
apache
.
ivy
.
util
.
StringUtils
;
public
class
IvyEvent
{
private
EventManager
source
;
private
String
name
;
private
Map
attributes
=
new
HashMap
(
)
;
protected
IvyEvent
(
String
name
)
{
this
.
source
=
IvyContext
.
getContext
(
)
.
getEventManager
(
)
;
this
.
name
=
name
;
}
protected
void
addAttribute
(
String
key
,
String
value
)
{
attributes
.
put
(
key
,
value
)
;
}
protected
void
addMDAttributes
(
ModuleDescriptor
md
)
{
addMridAttributes
(
md
.
getResolvedModuleRevisionId
(
)
)
;
}
protected
void
addMridAttributes
(
ModuleRevisionId
mrid
)
{
addModuleIdAttributes
(
mrid
.
getModuleId
(
)
)
;
addAttribute
(
"revision"
,
mrid
.
getRevision
(
)
)
;
addAttribute
(
"branch"
,
mrid
.
getBranch
(
)
)
;
addAttributes
(
mrid
.
getQualifiedExtraAttributes
(
)
)
;
addAttributes
(
mrid
.
getExtraAttributes
(
)
)
;
}
protected
void
addModuleIdAttributes
(
ModuleId
moduleId
)
{
addAttribute
(
"organisation"
,
moduleId
.
getOrganisation
(
)
)
;
addAttribute
(
"module"
,
moduleId
.
getName
(
)
)
;
}
protected
void
addConfsAttribute
(
String
[
]
confs
)
{
addAttribute
(
"conf"
,
StringUtils
.
join
(
confs
,
", "
)
)
;
}
protected
void
addAttributes
(
Map
attributes
)
{
this
.
attributes
.
putAll
(
attributes
)
;
}
public
EventManager
getSource
(
)
{
return
source
;
}
public
String
getName
(
)
{
return
name
;
}
public
Map
getAttributes
(
)
{
return
new
HashMap
(
attributes
)
;
}
public
String
toString
(
)
{
return
getName
(
)
+
" "
+
getAttributes
(
)
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
!
(
obj
instanceof
IvyEvent
)
)
{
return
false
;
}
IvyEvent
e
=
(
IvyEvent
)
obj
;
return
getSource
(
)
.
equals
(
e
.
getSource
(
)
)
&&
getName
(
)
.
equals
(
e
.
getName
(
)
)
&&
attributes
.
equals
(
e
.
attributes
)
;
}
public
int
hashCode
(
)
{
int
hash
=
37
;
hash
=
13
*
hash
+
getSource
(
)
.
hashCode
(
)
;
hash
=
13
*
hash
+
getName
(
)
.
hashCode
(
)
;
hash
=
13
*
hash
+
attributes
.
hashCode
(
)
;
return
hash
;
}
}
