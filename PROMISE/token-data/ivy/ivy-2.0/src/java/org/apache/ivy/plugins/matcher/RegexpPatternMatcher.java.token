package
org
.
apache
.
ivy
.
plugins
.
matcher
;
import
java
.
util
.
regex
.
Pattern
;
import
java
.
util
.
regex
.
PatternSyntaxException
;
public
final
class
RegexpPatternMatcher
extends
AbstractPatternMatcher
{
public
static
final
RegexpPatternMatcher
INSTANCE
=
new
RegexpPatternMatcher
(
)
;
public
RegexpPatternMatcher
(
)
{
super
(
REGEXP
)
;
}
protected
Matcher
newMatcher
(
String
expression
)
{
return
new
RegexpMatcher
(
expression
)
;
}
private
static
class
RegexpMatcher
implements
Matcher
{
private
Pattern
pattern
;
private
String
expression
;
private
Boolean
exact
;
public
RegexpMatcher
(
String
expression
)
throws
PatternSyntaxException
{
if
(
expression
==
null
)
{
throw
new
NullPointerException
(
)
;
}
this
.
expression
=
expression
;
pattern
=
Pattern
.
compile
(
expression
)
;
}
public
boolean
matches
(
String
input
)
{
if
(
input
==
null
)
{
throw
new
NullPointerException
(
)
;
}
return
pattern
.
matcher
(
input
)
.
matches
(
)
;
}
public
boolean
isExact
(
)
{
if
(
exact
==
null
)
{
exact
=
calculateExact
(
)
;
}
return
exact
.
booleanValue
(
)
;
}
private
Boolean
calculateExact
(
)
{
Boolean
result
=
Boolean
.
TRUE
;
char
[
]
expressionChars
=
expression
.
toCharArray
(
)
;
for
(
int
i
=
0
;
i
<
expressionChars
.
length
;
i
++
)
{
char
ch
=
expressionChars
[
i
]
;
if
(
!
Character
.
isLetterOrDigit
(
ch
)
&&
!
Character
.
isWhitespace
(
ch
)
&&
(
'-'
!=
ch
)
&&
(
'_'
!=
ch
)
)
{
result
=
Boolean
.
FALSE
;
break
;
}
}
return
result
;
}
}
}
