package
org
.
apache
.
ivy
.
core
.
resolve
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Collection
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
DependencyArtifactDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
DependencyDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
IncludeRule
;
public
class
IvyNodeUsage
{
private
static
final
class
NodeConf
{
private
IvyNode
node
;
private
String
conf
;
public
NodeConf
(
IvyNode
node
,
String
conf
)
{
if
(
node
==
null
)
{
throw
new
NullPointerException
(
"node must not null"
)
;
}
if
(
conf
==
null
)
{
throw
new
NullPointerException
(
"conf must not null"
)
;
}
this
.
node
=
node
;
this
.
conf
=
conf
;
}
public
final
String
getConf
(
)
{
return
conf
;
}
public
final
IvyNode
getNode
(
)
{
return
node
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
!
(
obj
instanceof
NodeConf
)
)
{
return
false
;
}
return
getNode
(
)
.
equals
(
(
(
NodeConf
)
obj
)
.
getNode
(
)
)
&&
getConf
(
)
.
equals
(
(
(
NodeConf
)
obj
)
.
getConf
(
)
)
;
}
public
int
hashCode
(
)
{
int
hash
=
33
;
hash
+=
getNode
(
)
.
hashCode
(
)
*
17
;
hash
+=
getConf
(
)
.
hashCode
(
)
*
17
;
return
hash
;
}
public
String
toString
(
)
{
return
"NodeConf("
+
conf
+
")"
;
}
}
private
static
final
class
Depender
{
private
DependencyDescriptor
dd
;
private
String
dependerConf
;
public
Depender
(
DependencyDescriptor
dd
,
String
dependerConf
)
{
this
.
dd
=
dd
;
this
.
dependerConf
=
dependerConf
;
}
public
String
toString
(
)
{
return
dd
+
" ["
+
dependerConf
+
"]"
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
!
(
obj
instanceof
Depender
)
)
{
return
false
;
}
Depender
other
=
(
Depender
)
obj
;
return
other
.
dd
==
dd
&&
other
.
dependerConf
.
equals
(
dependerConf
)
;
}
public
int
hashCode
(
)
{
int
hash
=
33
;
hash
+=
dd
.
hashCode
(
)
*
13
;
hash
+=
dependerConf
.
hashCode
(
)
*
13
;
return
hash
;
}
}
private
IvyNode
node
;
private
Map
rootModuleConfs
=
new
HashMap
(
)
;
private
Map
requiredConfs
=
new
HashMap
(
)
;
private
Map
dependers
=
new
HashMap
(
)
;
private
Map
blacklisted
=
new
HashMap
(
)
;
public
IvyNodeUsage
(
IvyNode
node
)
{
this
.
node
=
node
;
}
protected
Collection
getRequiredConfigurations
(
IvyNode
in
,
String
inConf
)
{
return
(
Collection
)
requiredConfs
.
get
(
new
NodeConf
(
in
,
inConf
)
)
;
}
protected
void
setRequiredConfs
(
IvyNode
parent
,
String
parentConf
,
Collection
confs
)
{
requiredConfs
.
put
(
new
NodeConf
(
parent
,
parentConf
)
,
new
HashSet
(
confs
)
)
;
}
protected
Set
getConfigurations
(
String
rootModuleConf
)
{
return
(
Set
)
rootModuleConfs
.
get
(
rootModuleConf
)
;
}
protected
Set
addAndGetConfigurations
(
String
rootModuleConf
)
{
Set
depConfs
=
(
Set
)
rootModuleConfs
.
get
(
rootModuleConf
)
;
if
(
depConfs
==
null
)
{
depConfs
=
new
HashSet
(
)
;
rootModuleConfs
.
put
(
rootModuleConf
,
depConfs
)
;
}
return
depConfs
;
}
protected
Set
getRootModuleConfigurations
(
)
{
return
rootModuleConfs
.
keySet
(
)
;
}
public
void
updateDataFrom
(
Collection
usages
,
String
rootModuleConf
)
{
for
(
Iterator
iterator
=
usages
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
IvyNodeUsage
usage
=
(
IvyNodeUsage
)
iterator
.
next
(
)
;
updateDataFrom
(
usage
,
rootModuleConf
)
;
}
}
private
void
updateDataFrom
(
IvyNodeUsage
usage
,
String
rootModuleConf
)
{
updateMapOfSet
(
usage
.
requiredConfs
,
requiredConfs
)
;
updateMapOfSetForKey
(
usage
.
rootModuleConfs
,
rootModuleConfs
,
rootModuleConf
)
;
updateMapOfSetForKey
(
usage
.
dependers
,
dependers
,
rootModuleConf
)
;
}
private
void
updateMapOfSet
(
Map
from
,
Map
to
)
{
for
(
Iterator
iter
=
from
.
keySet
(
)
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
Object
key
=
iter
.
next
(
)
;
updateMapOfSetForKey
(
from
,
to
,
key
)
;
}
}
private
void
updateMapOfSetForKey
(
Map
from
,
Map
to
,
Object
key
)
{
Set
set
=
(
Set
)
from
.
get
(
key
)
;
if
(
set
!=
null
)
{
Set
toupdate
=
(
Set
)
to
.
get
(
key
)
;
if
(
toupdate
!=
null
)
{
toupdate
.
addAll
(
set
)
;
}
else
{
to
.
put
(
key
,
new
HashSet
(
set
)
)
;
}
}
}
private
void
addObjectsForConf
(
String
rootModuleConf
,
Object
objectToAdd
,
Map
map
)
{
Set
set
=
(
Set
)
map
.
get
(
rootModuleConf
)
;
if
(
set
==
null
)
{
set
=
new
HashSet
(
)
;
map
.
put
(
rootModuleConf
,
set
)
;
}
set
.
add
(
objectToAdd
)
;
}
public
void
addUsage
(
String
rootModuleConf
,
DependencyDescriptor
dd
,
String
parentConf
)
{
addObjectsForConf
(
rootModuleConf
,
new
Depender
(
dd
,
parentConf
)
,
dependers
)
;
}
protected
Set
getDependencyArtifactsSet
(
String
rootModuleConf
)
{
Collection
dependersInConf
=
(
Collection
)
dependers
.
get
(
rootModuleConf
)
;
if
(
dependersInConf
==
null
)
{
return
null
;
}
Set
dependencyArtifacts
=
new
HashSet
(
)
;
for
(
Iterator
iterator
=
dependersInConf
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Depender
depender
=
(
Depender
)
iterator
.
next
(
)
;
DependencyArtifactDescriptor
[
]
dads
=
depender
.
dd
.
getDependencyArtifacts
(
depender
.
dependerConf
)
;
dependencyArtifacts
.
addAll
(
Arrays
.
asList
(
dads
)
)
;
}
return
dependencyArtifacts
;
}
protected
Set
getDependencyIncludesSet
(
String
rootModuleConf
)
{
Collection
dependersInConf
=
(
Collection
)
dependers
.
get
(
rootModuleConf
)
;
if
(
dependersInConf
==
null
)
{
return
null
;
}
Set
dependencyIncludes
=
new
HashSet
(
)
;
for
(
Iterator
iterator
=
dependersInConf
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Depender
depender
=
(
Depender
)
iterator
.
next
(
)
;
IncludeRule
[
]
rules
=
depender
.
dd
.
getIncludeRules
(
depender
.
dependerConf
)
;
if
(
rules
==
null
||
rules
.
length
==
0
)
{
return
null
;
}
dependencyIncludes
.
addAll
(
Arrays
.
asList
(
rules
)
)
;
}
return
dependencyIncludes
;
}
protected
void
removeRootModuleConf
(
String
rootModuleConf
)
{
rootModuleConfs
.
remove
(
rootModuleConf
)
;
}
protected
void
blacklist
(
IvyNodeBlacklist
bdata
)
{
blacklisted
.
put
(
bdata
.
getRootModuleConf
(
)
,
bdata
)
;
}
protected
boolean
isBlacklisted
(
String
rootModuleConf
)
{
return
blacklisted
.
containsKey
(
rootModuleConf
)
;
}
protected
IvyNodeBlacklist
getBlacklistData
(
String
rootModuleConf
)
{
return
(
IvyNodeBlacklist
)
blacklisted
.
get
(
rootModuleConf
)
;
}
protected
IvyNode
getNode
(
)
{
return
node
;
}
}
