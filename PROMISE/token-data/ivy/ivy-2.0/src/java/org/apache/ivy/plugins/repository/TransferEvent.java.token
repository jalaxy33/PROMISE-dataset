package
org
.
apache
.
ivy
.
plugins
.
repository
;
import
java
.
io
.
File
;
import
org
.
apache
.
ivy
.
core
.
event
.
IvyEvent
;
public
class
TransferEvent
extends
IvyEvent
{
public
static
final
int
TRANSFER_INITIATED
=
0
;
public
static
final
int
TRANSFER_STARTED
=
1
;
public
static
final
int
TRANSFER_COMPLETED
=
2
;
public
static
final
int
TRANSFER_PROGRESS
=
3
;
public
static
final
int
TRANSFER_ERROR
=
4
;
private
static
final
int
LAST_EVENT_TYPE
=
TRANSFER_ERROR
;
public
static
final
int
REQUEST_GET
=
5
;
public
static
final
int
REQUEST_PUT
=
6
;
public
static
final
String
TRANSFER_INITIATED_NAME
=
"transfer-initiated"
;
public
static
final
String
TRANSFER_STARTED_NAME
=
"transfer-started"
;
public
static
final
String
TRANSFER_PROGRESS_NAME
=
"transfer-progress"
;
public
static
final
String
TRANSFER_COMPLETED_NAME
=
"transfer-completed"
;
public
static
final
String
TRANSFER_ERROR_NAME
=
"transfer-error"
;
private
Resource
resource
;
private
int
eventType
;
private
int
requestType
;
private
Exception
exception
;
private
File
localFile
;
private
Repository
repository
;
private
long
length
;
private
long
totalLength
;
private
boolean
isTotalLengthSet
=
false
;
private
long
[
]
timeTracking
=
new
long
[
LAST_EVENT_TYPE
+
1
]
;
public
TransferEvent
(
final
Repository
repository
,
final
Resource
resource
,
final
int
eventType
,
final
int
requestType
)
{
super
(
getName
(
eventType
)
)
;
this
.
repository
=
repository
;
setResource
(
resource
)
;
setEventType
(
eventType
)
;
setRequestType
(
requestType
)
;
}
public
TransferEvent
(
final
Repository
repository
,
final
Resource
resource
,
final
Exception
exception
,
final
int
requestType
)
{
this
(
repository
,
resource
,
TRANSFER_ERROR
,
requestType
)
;
this
.
exception
=
exception
;
}
public
TransferEvent
(
final
Repository
repository
,
final
Resource
resource
,
long
length
,
final
int
requestType
)
{
this
(
repository
,
resource
,
TRANSFER_PROGRESS
,
requestType
)
;
this
.
length
=
length
;
this
.
totalLength
=
length
;
}
private
static
String
getName
(
int
eventType
)
{
switch
(
eventType
)
{
case
TRANSFER_INITIATED
:
return
TRANSFER_INITIATED_NAME
;
case
TRANSFER_STARTED
:
return
TRANSFER_STARTED_NAME
;
case
TRANSFER_PROGRESS
:
return
TRANSFER_PROGRESS_NAME
;
case
TRANSFER_COMPLETED
:
return
TRANSFER_COMPLETED_NAME
;
case
TRANSFER_ERROR
:
return
TRANSFER_ERROR_NAME
;
default
:
return
null
;
}
}
public
Resource
getResource
(
)
{
return
resource
;
}
public
Exception
getException
(
)
{
return
exception
;
}
public
int
getRequestType
(
)
{
return
requestType
;
}
protected
void
setRequestType
(
final
int
requestType
)
{
switch
(
requestType
)
{
case
REQUEST_PUT
:
break
;
case
REQUEST_GET
:
break
;
default
:
throw
new
IllegalArgumentException
(
"Illegal request type: "
+
requestType
)
;
}
this
.
requestType
=
requestType
;
addAttribute
(
"request-type"
,
requestType
==
REQUEST_GET
?
"get"
:
"put"
)
;
}
public
int
getEventType
(
)
{
return
eventType
;
}
protected
void
setEventType
(
final
int
eventType
)
{
checkEventType
(
eventType
)
;
if
(
this
.
eventType
!=
eventType
)
{
this
.
eventType
=
eventType
;
timeTracking
[
eventType
]
=
System
.
currentTimeMillis
(
)
;
if
(
eventType
>
TRANSFER_INITIATED
)
{
addAttribute
(
"total-duration"
,
String
.
valueOf
(
getElapsedTime
(
TRANSFER_INITIATED
,
eventType
)
)
)
;
if
(
eventType
>
TRANSFER_STARTED
)
{
addAttribute
(
"duration"
,
String
.
valueOf
(
getElapsedTime
(
TRANSFER_STARTED
,
eventType
)
)
)
;
}
}
}
}
protected
void
setResource
(
final
Resource
resource
)
{
this
.
resource
=
resource
;
addAttribute
(
"resource"
,
this
.
resource
.
getName
(
)
)
;
}
public
File
getLocalFile
(
)
{
return
localFile
;
}
protected
void
setLocalFile
(
File
localFile
)
{
this
.
localFile
=
localFile
;
}
public
long
getLength
(
)
{
return
length
;
}
protected
void
setLength
(
long
length
)
{
this
.
length
=
length
;
}
public
long
getTotalLength
(
)
{
return
totalLength
;
}
protected
void
setTotalLength
(
long
totalLength
)
{
this
.
totalLength
=
totalLength
;
}
public
void
setException
(
Exception
exception
)
{
this
.
exception
=
exception
;
}
public
boolean
isTotalLengthSet
(
)
{
return
isTotalLengthSet
;
}
public
void
setTotalLengthSet
(
boolean
isTotalLengthSet
)
{
this
.
isTotalLengthSet
=
isTotalLengthSet
;
}
public
Repository
getRepository
(
)
{
return
repository
;
}
public
long
getElapsedTime
(
int
fromEventType
,
int
toEventType
)
{
checkEventType
(
fromEventType
)
;
checkEventType
(
toEventType
)
;
long
start
=
timeTracking
[
fromEventType
]
;
long
end
=
timeTracking
[
toEventType
]
;
if
(
start
==
0
||
end
==
0
)
{
return
-
1
;
}
else
if
(
end
<
start
)
{
return
0
;
}
else
{
return
end
-
start
;
}
}
private
void
checkEventType
(
int
eventType
)
{
if
(
eventType
<
0
||
eventType
>
LAST_EVENT_TYPE
)
{
throw
new
IllegalArgumentException
(
"invalid event type "
+
eventType
)
;
}
}
}
