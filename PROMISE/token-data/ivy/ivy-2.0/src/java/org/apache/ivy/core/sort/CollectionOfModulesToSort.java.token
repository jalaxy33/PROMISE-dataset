package
org
.
apache
.
ivy
.
core
.
sort
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
LinkedList
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
DependencyDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
ModuleDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
id
.
ModuleId
;
import
org
.
apache
.
ivy
.
plugins
.
version
.
VersionMatcher
;
class
CollectionOfModulesToSort
{
private
final
List
moduleDescriptors
;
private
final
VersionMatcher
versionMatcher
;
private
final
Map
modulesByModuleId
;
private
final
NonMatchingVersionReporter
nonMatchingVersionReporter
;
public
CollectionOfModulesToSort
(
Collection
modulesToSort
,
VersionMatcher
matcher
,
NonMatchingVersionReporter
nonMatchingVersionReporter
)
{
this
.
versionMatcher
=
matcher
;
this
.
nonMatchingVersionReporter
=
nonMatchingVersionReporter
;
this
.
modulesByModuleId
=
new
HashMap
(
)
;
moduleDescriptors
=
new
ArrayList
(
modulesToSort
.
size
(
)
)
;
for
(
Iterator
it
=
modulesToSort
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
ModuleDescriptor
md
=
(
ModuleDescriptor
)
it
.
next
(
)
;
ModuleInSort
mdInSort
=
new
ModuleInSort
(
md
)
;
moduleDescriptors
.
add
(
mdInSort
)
;
addToModulesByModuleId
(
md
,
mdInSort
)
;
}
}
private
void
addToModulesByModuleId
(
ModuleDescriptor
md
,
ModuleInSort
mdInSort
)
{
ModuleId
mdId
=
md
.
getModuleRevisionId
(
)
.
getModuleId
(
)
;
List
mdInSortAsList
=
new
LinkedList
(
)
;
mdInSortAsList
.
add
(
mdInSort
)
;
List
previousList
=
(
List
)
modulesByModuleId
.
put
(
mdId
,
mdInSortAsList
)
;
if
(
previousList
!=
null
)
{
mdInSortAsList
.
addAll
(
previousList
)
;
}
}
public
Iterator
iterator
(
)
{
return
moduleDescriptors
.
iterator
(
)
;
}
public
int
size
(
)
{
return
moduleDescriptors
.
size
(
)
;
}
public
ModuleInSort
getModuleDescriptorDependency
(
DependencyDescriptor
descriptor
)
{
Collection
modulesOfSameId
=
(
Collection
)
modulesByModuleId
.
get
(
descriptor
.
getDependencyId
(
)
)
;
if
(
modulesOfSameId
==
null
)
{
return
null
;
}
for
(
Iterator
it
=
modulesOfSameId
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
ModuleInSort
mdInSort
=
(
ModuleInSort
)
it
.
next
(
)
;
if
(
mdInSort
.
match
(
descriptor
,
versionMatcher
)
)
{
return
mdInSort
;
}
else
{
nonMatchingVersionReporter
.
reportNonMatchingVersion
(
descriptor
,
mdInSort
.
getSortedModuleDescriptor
(
)
)
;
}
}
return
null
;
}
}
