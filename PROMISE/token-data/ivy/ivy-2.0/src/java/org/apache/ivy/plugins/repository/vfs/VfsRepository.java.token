package
org
.
apache
.
ivy
.
plugins
.
repository
.
vfs
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
import
org
.
apache
.
commons
.
vfs
.
FileContent
;
import
org
.
apache
.
commons
.
vfs
.
FileObject
;
import
org
.
apache
.
commons
.
vfs
.
FileSystemException
;
import
org
.
apache
.
commons
.
vfs
.
FileSystemManager
;
import
org
.
apache
.
commons
.
vfs
.
FileType
;
import
org
.
apache
.
commons
.
vfs
.
impl
.
StandardFileSystemManager
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
AbstractRepository
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
RepositoryCopyProgressListener
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
Resource
;
import
org
.
apache
.
ivy
.
plugins
.
repository
.
TransferEvent
;
import
org
.
apache
.
ivy
.
util
.
CopyProgressListener
;
import
org
.
apache
.
ivy
.
util
.
FileUtil
;
import
org
.
apache
.
ivy
.
util
.
Message
;
public
class
VfsRepository
extends
AbstractRepository
{
private
static
final
String
IVY_VFS_CONFIG
=
"ivy_vfs.xml"
;
private
StandardFileSystemManager
manager
=
null
;
private
final
CopyProgressListener
progress
=
new
RepositoryCopyProgressListener
(
this
)
;
public
VfsRepository
(
)
{
}
private
FileSystemManager
getVFSManager
(
)
throws
IOException
{
synchronized
(
this
)
{
if
(
manager
==
null
)
{
manager
=
createVFSManager
(
)
;
}
}
return
manager
;
}
private
StandardFileSystemManager
createVFSManager
(
)
throws
IOException
{
StandardFileSystemManager
result
=
null
;
try
{
result
=
new
StandardFileSystemManager
(
)
{
protected
void
configurePlugins
(
)
throws
FileSystemException
{
}
}
;
result
.
setConfiguration
(
getClass
(
)
.
getResource
(
IVY_VFS_CONFIG
)
)
;
result
.
init
(
)
;
Message
.
verbose
(
"Available VFS schemes..."
)
;
String
[
]
schemes
=
result
.
getSchemes
(
)
;
Arrays
.
sort
(
schemes
)
;
for
(
int
i
=
0
;
i
<
schemes
.
length
;
i
++
)
{
Message
.
verbose
(
"VFS Supported Scheme: "
+
schemes
[
i
]
)
;
}
}
catch
(
FileSystemException
e
)
{
Message
.
error
(
"Unable to initialize VFS repository manager!"
)
;
Message
.
error
(
e
.
getLocalizedMessage
(
)
)
;
IOException
error
=
new
IOException
(
e
.
getLocalizedMessage
(
)
)
;
error
.
initCause
(
e
)
;
throw
error
;
}
return
result
;
}
protected
void
finalize
(
)
{
if
(
manager
!=
null
)
{
manager
.
close
(
)
;
manager
=
null
;
}
}
public
Resource
getResource
(
String
vfsURI
)
throws
IOException
{
return
new
VfsResource
(
vfsURI
,
getVFSManager
(
)
)
;
}
public
void
get
(
String
srcVfsURI
,
File
destination
)
throws
IOException
{
VfsResource
src
=
new
VfsResource
(
srcVfsURI
,
getVFSManager
(
)
)
;
fireTransferInitiated
(
src
,
TransferEvent
.
REQUEST_GET
)
;
try
{
FileContent
content
=
src
.
getContent
(
)
;
if
(
content
==
null
)
{
throw
new
IllegalArgumentException
(
"invalid vfs uri "
+
srcVfsURI
+
": no content found"
)
;
}
FileUtil
.
copy
(
content
.
getInputStream
(
)
,
destination
,
progress
)
;
}
catch
(
IOException
ex
)
{
fireTransferError
(
ex
)
;
throw
ex
;
}
catch
(
RuntimeException
ex
)
{
fireTransferError
(
ex
)
;
throw
ex
;
}
}
public
List
list
(
String
vfsURI
)
throws
IOException
{
ArrayList
list
=
new
ArrayList
(
)
;
Message
.
debug
(
"list called for URI"
+
vfsURI
)
;
FileObject
resourceImpl
=
getVFSManager
(
)
.
resolveFile
(
vfsURI
)
;
Message
.
debug
(
"resourceImpl="
+
resourceImpl
.
toString
(
)
)
;
Message
.
debug
(
"resourceImpl.exists()"
+
resourceImpl
.
exists
(
)
)
;
Message
.
debug
(
"resourceImpl.getType()"
+
resourceImpl
.
getType
(
)
)
;
Message
.
debug
(
"FileType.FOLDER"
+
FileType
.
FOLDER
)
;
if
(
(
resourceImpl
!=
null
)
&&
resourceImpl
.
exists
(
)
&&
(
resourceImpl
.
getType
(
)
==
FileType
.
FOLDER
)
)
{
FileObject
[
]
children
=
resourceImpl
.
getChildren
(
)
;
for
(
int
i
=
0
;
i
<
children
.
length
;
i
++
)
{
FileObject
child
=
children
[
i
]
;
Message
.
debug
(
"child "
+
i
+
child
.
getName
(
)
.
getURI
(
)
)
;
list
.
add
(
VfsResource
.
normalize
(
child
.
getName
(
)
.
getURI
(
)
)
)
;
}
}
return
list
;
}
public
void
put
(
File
source
,
String
vfsURI
,
boolean
overwrite
)
throws
IOException
{
VfsResource
dest
=
new
VfsResource
(
vfsURI
,
getVFSManager
(
)
)
;
fireTransferInitiated
(
dest
,
TransferEvent
.
REQUEST_PUT
)
;
if
(
dest
.
physicallyExists
(
)
&&
!
overwrite
)
{
throw
new
IOException
(
"Cannot copy. Destination file: "
+
dest
.
getName
(
)
+
" exists and overwrite not set."
)
;
}
if
(
dest
.
getContent
(
)
==
null
)
{
throw
new
IllegalArgumentException
(
"invalid vfs uri "
+
vfsURI
+
" to put data to: resource has no content"
)
;
}
FileUtil
.
copy
(
new
FileInputStream
(
source
)
,
dest
.
getContent
(
)
.
getOutputStream
(
)
,
progress
)
;
}
}
