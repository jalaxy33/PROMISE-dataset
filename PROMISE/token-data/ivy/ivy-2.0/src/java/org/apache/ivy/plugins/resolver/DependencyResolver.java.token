package
org
.
apache
.
ivy
.
plugins
.
resolver
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
text
.
ParseException
;
import
java
.
util
.
Map
;
import
org
.
apache
.
ivy
.
core
.
cache
.
ArtifactOrigin
;
import
org
.
apache
.
ivy
.
core
.
cache
.
RepositoryCacheManager
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
Artifact
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
DependencyDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
id
.
ModuleRevisionId
;
import
org
.
apache
.
ivy
.
core
.
report
.
ArtifactDownloadReport
;
import
org
.
apache
.
ivy
.
core
.
report
.
DownloadReport
;
import
org
.
apache
.
ivy
.
core
.
resolve
.
DownloadOptions
;
import
org
.
apache
.
ivy
.
core
.
resolve
.
ResolveData
;
import
org
.
apache
.
ivy
.
core
.
resolve
.
ResolvedModuleRevision
;
import
org
.
apache
.
ivy
.
core
.
search
.
ModuleEntry
;
import
org
.
apache
.
ivy
.
core
.
search
.
OrganisationEntry
;
import
org
.
apache
.
ivy
.
core
.
search
.
RevisionEntry
;
import
org
.
apache
.
ivy
.
plugins
.
namespace
.
Namespace
;
import
org
.
apache
.
ivy
.
plugins
.
resolver
.
util
.
ResolvedResource
;
public
interface
DependencyResolver
{
String
getName
(
)
;
void
setName
(
String
name
)
;
ResolvedModuleRevision
getDependency
(
DependencyDescriptor
dd
,
ResolveData
data
)
throws
ParseException
;
ResolvedResource
findIvyFileRef
(
DependencyDescriptor
dd
,
ResolveData
data
)
;
DownloadReport
download
(
Artifact
[
]
artifacts
,
DownloadOptions
options
)
;
ArtifactDownloadReport
download
(
ArtifactOrigin
artifact
,
DownloadOptions
options
)
;
boolean
exists
(
Artifact
artifact
)
;
ArtifactOrigin
locate
(
Artifact
artifact
)
;
void
publish
(
Artifact
artifact
,
File
src
,
boolean
overwrite
)
throws
IOException
;
void
beginPublishTransaction
(
ModuleRevisionId
module
,
boolean
overwrite
)
throws
IOException
;
void
abortPublishTransaction
(
)
throws
IOException
;
void
commitPublishTransaction
(
)
throws
IOException
;
void
reportFailure
(
)
;
void
reportFailure
(
Artifact
art
)
;
String
[
]
listTokenValues
(
String
token
,
Map
otherTokenValues
)
;
Map
[
]
listTokenValues
(
String
[
]
tokens
,
Map
criteria
)
;
OrganisationEntry
[
]
listOrganisations
(
)
;
ModuleEntry
[
]
listModules
(
OrganisationEntry
org
)
;
RevisionEntry
[
]
listRevisions
(
ModuleEntry
module
)
;
Namespace
getNamespace
(
)
;
void
dumpSettings
(
)
;
void
setSettings
(
ResolverSettings
settings
)
;
RepositoryCacheManager
getRepositoryCacheManager
(
)
;
}
