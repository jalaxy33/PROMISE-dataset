package
org
.
apache
.
ivy
.
core
.
resolve
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
LinkedHashSet
;
import
java
.
util
.
List
;
import
org
.
apache
.
ivy
.
core
.
IvyContext
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
Configuration
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
DependencyDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
ModuleDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
id
.
ModuleId
;
import
org
.
apache
.
ivy
.
core
.
module
.
id
.
ModuleRevisionId
;
import
org
.
apache
.
ivy
.
core
.
resolve
.
IvyNodeEviction
.
EvictionData
;
import
org
.
apache
.
ivy
.
plugins
.
conflict
.
ConflictManager
;
import
org
.
apache
.
ivy
.
util
.
Checks
;
public
class
VisitNode
{
private
IvyNode
node
;
private
VisitNode
parent
=
null
;
private
VisitNode
root
=
null
;
private
Collection
path
=
null
;
private
String
parentConf
=
null
;
private
String
requestedConf
;
private
String
rootModuleConf
;
private
ResolveData
data
;
private
Boolean
isCircular
;
private
IvyNodeUsage
usage
;
public
VisitNode
(
ResolveData
data
,
IvyNode
node
,
VisitNode
parent
,
String
rootModuleConf
,
String
parentConf
)
{
this
(
data
,
node
,
parent
,
rootModuleConf
,
parentConf
,
null
)
;
}
public
VisitNode
(
ResolveData
data
,
IvyNode
node
,
VisitNode
parent
,
String
rootModuleConf
,
String
parentConf
,
IvyNodeUsage
usage
)
{
Checks
.
checkNotNull
(
data
,
"data"
)
;
Checks
.
checkNotNull
(
node
,
"node"
)
;
Checks
.
checkNotNull
(
rootModuleConf
,
"rootModuleConf"
)
;
this
.
data
=
data
;
this
.
node
=
node
;
this
.
parent
=
parent
;
this
.
rootModuleConf
=
rootModuleConf
;
this
.
parentConf
=
parentConf
;
this
.
usage
=
usage
;
this
.
data
.
register
(
this
)
;
}
public
IvyNode
getNode
(
)
{
return
node
;
}
public
String
getRequestedConf
(
)
{
return
requestedConf
;
}
public
void
setRequestedConf
(
String
requestedConf
)
{
this
.
requestedConf
=
requestedConf
;
}
public
VisitNode
getParent
(
)
{
return
parent
;
}
public
VisitNode
getRoot
(
)
{
if
(
root
==
null
)
{
root
=
computeRoot
(
)
;
}
return
root
;
}
public
Collection
getPath
(
)
{
if
(
path
==
null
)
{
path
=
computePath
(
)
;
}
return
path
;
}
private
Collection
computePath
(
)
{
if
(
parent
!=
null
)
{
Collection
p
=
new
LinkedHashSet
(
parent
.
getPath
(
)
)
;
p
.
add
(
this
)
;
return
p
;
}
else
{
return
Collections
.
singletonList
(
this
)
;
}
}
private
VisitNode
computeRoot
(
)
{
if
(
node
.
isRoot
(
)
)
{
return
this
;
}
else
if
(
parent
!=
null
)
{
return
parent
.
getRoot
(
)
;
}
else
{
return
null
;
}
}
public
String
getParentConf
(
)
{
return
parentConf
;
}
public
void
setParentConf
(
String
parentConf
)
{
this
.
parentConf
=
parentConf
;
}
public
String
getRootModuleConf
(
)
{
return
rootModuleConf
;
}
public
static
VisitNode
getRoot
(
VisitNode
parent
)
{
VisitNode
root
=
parent
;
Collection
path
=
new
HashSet
(
)
;
path
.
add
(
root
)
;
while
(
root
.
getParent
(
)
!=
null
&&
!
root
.
getNode
(
)
.
isRoot
(
)
)
{
if
(
path
.
contains
(
root
.
getParent
(
)
)
)
{
return
root
;
}
root
=
root
.
getParent
(
)
;
path
.
add
(
root
)
;
}
return
root
;
}
public
boolean
isTransitive
(
)
{
return
(
data
.
isTransitive
(
)
&&
node
.
getDependencyDescriptor
(
getParentNode
(
)
)
.
isTransitive
(
)
&&
isParentConfTransitive
(
)
)
;
}
protected
boolean
isParentConfTransitive
(
)
{
String
conf
=
getParent
(
)
.
getRequestedConf
(
)
;
if
(
conf
==
null
)
{
return
true
;
}
Configuration
parentConf
=
getParentNode
(
)
.
getConfiguration
(
conf
)
;
return
parentConf
.
isTransitive
(
)
;
}
public
IvyNode
getRealNode
(
)
{
IvyNode
node
=
this
.
node
.
getRealNode
(
)
;
if
(
node
!=
null
)
{
return
node
;
}
else
{
return
this
.
node
;
}
}
public
void
useRealNode
(
)
{
if
(
parent
!=
null
)
{
IvyNode
node
=
data
.
getNode
(
this
.
node
.
getId
(
)
)
;
if
(
node
!=
null
&&
node
!=
this
.
node
)
{
this
.
node
=
node
;
}
}
}
public
boolean
loadData
(
String
conf
,
boolean
shouldBePublic
)
{
boolean
loaded
=
node
.
loadData
(
rootModuleConf
,
getParentNode
(
)
,
parentConf
,
conf
,
shouldBePublic
,
getUsage
(
)
)
;
if
(
loaded
)
{
useRealNode
(
)
;
if
(
data
.
getNode
(
node
.
getResolvedId
(
)
)
==
null
||
!
data
.
getNode
(
node
.
getResolvedId
(
)
)
.
getId
(
)
.
equals
(
node
.
getResolvedId
(
)
)
)
{
data
.
register
(
node
.
getResolvedId
(
)
,
this
)
;
}
}
return
loaded
;
}
public
Collection
getDependencies
(
String
conf
)
{
Collection
deps
=
node
.
getDependencies
(
rootModuleConf
,
conf
,
requestedConf
)
;
Collection
ret
=
new
ArrayList
(
deps
.
size
(
)
)
;
for
(
Iterator
iter
=
deps
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
IvyNode
depNode
=
(
IvyNode
)
iter
.
next
(
)
;
ret
.
add
(
traverseChild
(
conf
,
depNode
)
)
;
}
return
ret
;
}
VisitNode
gotoNode
(
IvyNode
node
)
{
if
(
!
getModuleId
(
)
.
equals
(
node
.
getModuleId
(
)
)
)
{
throw
new
IllegalArgumentException
(
"You can't use gotoNode for a node which does not represent the same Module "
+
"as the one represented by this node.\nCurrent node module id="
+
getModuleId
(
)
+
" Given node module id="
+
node
.
getModuleId
(
)
)
;
}
VisitData
visitData
=
data
.
getVisitData
(
node
.
getId
(
)
)
;
if
(
visitData
!=
null
)
{
List
visitNodes
=
visitData
.
getVisitNodes
(
rootModuleConf
)
;
for
(
Iterator
iter
=
visitNodes
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
VisitNode
vnode
=
(
VisitNode
)
iter
.
next
(
)
;
if
(
(
parent
==
null
&&
vnode
.
getParent
(
)
==
null
)
||
(
parent
!=
null
&&
parent
.
getId
(
)
.
equals
(
vnode
.
getParent
(
)
.
getId
(
)
)
)
)
{
vnode
.
parentConf
=
parentConf
;
vnode
.
usage
=
getUsage
(
)
;
return
vnode
;
}
}
}
return
traverse
(
parent
,
parentConf
,
node
,
getUsage
(
)
)
;
}
private
IvyNodeUsage
getUsage
(
)
{
return
usage
==
null
?
node
.
getMainUsage
(
)
:
usage
;
}
private
VisitNode
traverseChild
(
String
parentConf
,
IvyNode
child
)
{
VisitNode
parent
=
this
;
return
traverse
(
parent
,
parentConf
,
child
,
null
)
;
}
private
VisitNode
traverse
(
VisitNode
parent
,
String
parentConf
,
IvyNode
node
,
IvyNodeUsage
usage
)
{
if
(
getPath
(
)
.
contains
(
node
)
)
{
IvyContext
.
getContext
(
)
.
getCircularDependencyStrategy
(
)
.
handleCircularDependency
(
toMrids
(
getPath
(
)
,
node
.
getId
(
)
)
)
;
}
return
new
VisitNode
(
data
,
node
,
parent
,
rootModuleConf
,
parentConf
,
usage
)
;
}
private
ModuleRevisionId
[
]
toMrids
(
Collection
path
,
ModuleRevisionId
last
)
{
ModuleRevisionId
[
]
ret
=
new
ModuleRevisionId
[
path
.
size
(
)
+
1
]
;
int
i
=
0
;
for
(
Iterator
iter
=
path
.
iterator
(
)
;
iter
.
hasNext
(
)
;
i
++
)
{
VisitNode
node
=
(
VisitNode
)
iter
.
next
(
)
;
ret
[
i
]
=
node
.
getNode
(
)
.
getId
(
)
;
}
ret
[
ret
.
length
-
1
]
=
last
;
return
ret
;
}
public
ModuleRevisionId
getResolvedId
(
)
{
return
node
.
getResolvedId
(
)
;
}
public
void
updateConfsToFetch
(
Collection
confs
)
{
node
.
updateConfsToFetch
(
confs
)
;
}
public
ModuleRevisionId
getId
(
)
{
return
node
.
getId
(
)
;
}
public
boolean
isEvicted
(
)
{
return
node
.
isEvicted
(
rootModuleConf
)
;
}
public
String
[
]
getRealConfs
(
String
conf
)
{
return
node
.
getRealConfs
(
conf
)
;
}
public
boolean
hasProblem
(
)
{
return
node
.
hasProblem
(
)
;
}
public
Configuration
getConfiguration
(
String
conf
)
{
return
node
.
getConfiguration
(
conf
)
;
}
public
EvictionData
getEvictedData
(
)
{
return
node
.
getEvictedData
(
rootModuleConf
)
;
}
public
DependencyDescriptor
getDependencyDescriptor
(
)
{
return
node
.
getDependencyDescriptor
(
getParentNode
(
)
)
;
}
private
IvyNode
getParentNode
(
)
{
return
parent
==
null
?
null
:
parent
.
getNode
(
)
;
}
public
boolean
isCircular
(
)
{
if
(
isCircular
==
null
)
{
if
(
parent
!=
null
)
{
isCircular
=
Boolean
.
FALSE
;
for
(
Iterator
iter
=
parent
.
getPath
(
)
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
VisitNode
ancestor
=
(
VisitNode
)
iter
.
next
(
)
;
if
(
getId
(
)
.
getModuleId
(
)
.
equals
(
ancestor
.
getId
(
)
.
getModuleId
(
)
)
)
{
isCircular
=
Boolean
.
TRUE
;
break
;
}
}
}
else
{
isCircular
=
Boolean
.
FALSE
;
}
}
return
isCircular
.
booleanValue
(
)
;
}
public
String
[
]
getConfsToFetch
(
)
{
return
node
.
getConfsToFetch
(
)
;
}
public
String
[
]
getRequiredConfigurations
(
VisitNode
in
,
String
inConf
)
{
return
node
.
getRequiredConfigurations
(
in
.
getNode
(
)
,
inConf
)
;
}
public
ModuleId
getModuleId
(
)
{
return
node
.
getModuleId
(
)
;
}
public
Collection
getResolvedRevisions
(
ModuleId
mid
)
{
return
node
.
getResolvedRevisions
(
mid
,
rootModuleConf
)
;
}
public
void
markEvicted
(
EvictionData
evictionData
)
{
node
.
markEvicted
(
evictionData
)
;
}
public
String
[
]
getRequiredConfigurations
(
)
{
return
node
.
getRequiredConfigurations
(
)
;
}
public
void
markEvicted
(
VisitNode
parent
,
ConflictManager
conflictMgr
,
Collection
selected
)
{
node
.
markEvicted
(
rootModuleConf
,
parent
.
getNode
(
)
,
conflictMgr
,
selected
)
;
}
public
ModuleDescriptor
getDescriptor
(
)
{
return
node
.
getDescriptor
(
)
;
}
public
EvictionData
getEvictionDataInRoot
(
String
rootModuleConf
,
VisitNode
ancestor
)
{
return
node
.
getEvictionDataInRoot
(
rootModuleConf
,
ancestor
.
getNode
(
)
)
;
}
public
Collection
getEvictedRevisions
(
ModuleId
moduleId
)
{
return
node
.
getEvictedRevisions
(
moduleId
,
rootModuleConf
)
;
}
public
String
toString
(
)
{
return
node
.
toString
(
)
;
}
public
boolean
isConfRequiredByMergedUsageOnly
(
String
conf
)
{
return
node
.
isConfRequiredByMergedUsageOnly
(
rootModuleConf
,
conf
)
;
}
}
