package
org
.
apache
.
ivy
.
core
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
LinkedList
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Stack
;
import
org
.
apache
.
ivy
.
Ivy
;
import
org
.
apache
.
ivy
.
core
.
event
.
EventManager
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
DependencyDescriptor
;
import
org
.
apache
.
ivy
.
core
.
resolve
.
ResolveData
;
import
org
.
apache
.
ivy
.
core
.
settings
.
IvySettings
;
import
org
.
apache
.
ivy
.
plugins
.
circular
.
CircularDependencyStrategy
;
import
org
.
apache
.
ivy
.
util
.
Message
;
import
org
.
apache
.
ivy
.
util
.
MessageLogger
;
public
class
IvyContext
{
private
static
ThreadLocal
current
=
new
ThreadLocal
(
)
;
private
Ivy
defaultIvy
;
private
WeakReference
ivy
=
new
WeakReference
(
null
)
;
private
Map
contextMap
=
new
HashMap
(
)
;
private
Thread
operatingThread
;
private
ResolveData
resolveData
;
private
DependencyDescriptor
dd
;
public
IvyContext
(
)
{
}
public
IvyContext
(
IvyContext
ctx
)
{
defaultIvy
=
ctx
.
defaultIvy
;
ivy
=
ctx
.
ivy
;
contextMap
=
new
HashMap
(
ctx
.
contextMap
)
;
operatingThread
=
ctx
.
operatingThread
;
resolveData
=
ctx
.
resolveData
;
dd
=
ctx
.
dd
;
}
public
static
IvyContext
getContext
(
)
{
Stack
cur
=
getCurrentStack
(
)
;
if
(
cur
.
isEmpty
(
)
)
{
cur
.
push
(
new
IvyContext
(
)
)
;
}
return
(
IvyContext
)
cur
.
peek
(
)
;
}
private
static
Stack
getCurrentStack
(
)
{
Stack
cur
=
(
Stack
)
current
.
get
(
)
;
if
(
cur
==
null
)
{
cur
=
new
Stack
(
)
;
current
.
set
(
cur
)
;
}
return
cur
;
}
public
static
IvyContext
pushNewContext
(
)
{
return
pushContext
(
new
IvyContext
(
)
)
;
}
public
static
IvyContext
pushNewCopyContext
(
)
{
return
pushContext
(
new
IvyContext
(
getContext
(
)
)
)
;
}
public
static
IvyContext
pushContext
(
IvyContext
context
)
{
getCurrentStack
(
)
.
push
(
context
)
;
return
context
;
}
public
static
IvyContext
popContext
(
)
{
return
(
IvyContext
)
getCurrentStack
(
)
.
pop
(
)
;
}
public
static
Object
peekInContextStack
(
String
key
)
{
Object
value
=
null
;
Stack
contextStack
=
getCurrentStack
(
)
;
for
(
int
i
=
contextStack
.
size
(
)
-
1
;
i
>=
0
&&
value
==
null
;
i
--
)
{
IvyContext
ctx
=
(
IvyContext
)
contextStack
.
get
(
i
)
;
value
=
ctx
.
peek
(
key
)
;
}
return
value
;
}
public
Ivy
getIvy
(
)
{
Ivy
ivy
=
peekIvy
(
)
;
return
ivy
==
null
?
getDefaultIvy
(
)
:
ivy
;
}
public
Ivy
peekIvy
(
)
{
Ivy
ivy
=
(
Ivy
)
this
.
ivy
.
get
(
)
;
return
ivy
;
}
private
Ivy
getDefaultIvy
(
)
{
if
(
defaultIvy
==
null
)
{
defaultIvy
=
Ivy
.
newInstance
(
)
;
try
{
defaultIvy
.
configureDefault
(
)
;
}
catch
(
Exception
e
)
{
}
}
return
defaultIvy
;
}
public
void
setIvy
(
Ivy
ivy
)
{
this
.
ivy
=
new
WeakReference
(
ivy
)
;
operatingThread
=
Thread
.
currentThread
(
)
;
}
public
IvySettings
getSettings
(
)
{
return
getIvy
(
)
.
getSettings
(
)
;
}
public
CircularDependencyStrategy
getCircularDependencyStrategy
(
)
{
return
getSettings
(
)
.
getCircularDependencyStrategy
(
)
;
}
public
Object
get
(
String
key
)
{
WeakReference
ref
=
(
WeakReference
)
contextMap
.
get
(
key
)
;
return
ref
==
null
?
null
:
ref
.
get
(
)
;
}
public
void
set
(
String
key
,
Object
value
)
{
contextMap
.
put
(
key
,
new
WeakReference
(
value
)
)
;
}
public
Object
peek
(
String
key
)
{
synchronized
(
contextMap
)
{
Object
o
=
contextMap
.
get
(
key
)
;
if
(
o
==
null
)
{
return
null
;
}
if
(
o
instanceof
List
)
{
if
(
(
(
List
)
o
)
.
size
(
)
==
0
)
{
return
null
;
}
Object
ret
=
(
(
List
)
o
)
.
get
(
0
)
;
return
ret
;
}
else
{
throw
new
RuntimeException
(
"Cannot top from non List object "
+
o
)
;
}
}
}
public
Object
pop
(
String
key
)
{
synchronized
(
contextMap
)
{
Object
o
=
contextMap
.
get
(
key
)
;
if
(
o
==
null
)
{
return
null
;
}
if
(
o
instanceof
List
)
{
if
(
(
(
List
)
o
)
.
size
(
)
==
0
)
{
return
null
;
}
Object
ret
=
(
(
List
)
o
)
.
remove
(
0
)
;
return
ret
;
}
else
{
throw
new
RuntimeException
(
"Cannot pop from non List object "
+
o
)
;
}
}
}
public
boolean
pop
(
String
key
,
Object
expectedValue
)
{
synchronized
(
contextMap
)
{
Object
o
=
contextMap
.
get
(
key
)
;
if
(
o
==
null
)
{
return
false
;
}
if
(
o
instanceof
List
)
{
if
(
(
(
List
)
o
)
.
size
(
)
==
0
)
{
return
false
;
}
Object
top
=
(
(
List
)
o
)
.
get
(
0
)
;
if
(
!
top
.
equals
(
expectedValue
)
)
{
return
false
;
}
(
(
List
)
o
)
.
remove
(
0
)
;
return
true
;
}
else
{
throw
new
RuntimeException
(
"Cannot pop from non List object "
+
o
)
;
}
}
}
public
void
push
(
String
key
,
Object
value
)
{
synchronized
(
contextMap
)
{
if
(
!
contextMap
.
containsKey
(
key
)
)
{
contextMap
.
put
(
key
,
new
LinkedList
(
)
)
;
}
Object
o
=
contextMap
.
get
(
key
)
;
if
(
o
instanceof
List
)
{
(
(
List
)
o
)
.
add
(
0
,
value
)
;
}
else
{
throw
new
RuntimeException
(
"Cannot push to non List object "
+
o
)
;
}
}
}
public
Thread
getOperatingThread
(
)
{
return
operatingThread
;
}
public
MessageLogger
getMessageLogger
(
)
{
Ivy
ivy
=
peekIvy
(
)
;
if
(
ivy
==
null
)
{
if
(
defaultIvy
==
null
)
{
return
Message
.
getDefaultLogger
(
)
;
}
else
{
return
defaultIvy
.
getLoggerEngine
(
)
;
}
}
else
{
return
ivy
.
getLoggerEngine
(
)
;
}
}
public
EventManager
getEventManager
(
)
{
return
getIvy
(
)
.
getEventManager
(
)
;
}
public
void
checkInterrupted
(
)
{
getIvy
(
)
.
checkInterrupted
(
)
;
}
public
void
setResolveData
(
ResolveData
data
)
{
this
.
resolveData
=
data
;
}
public
ResolveData
getResolveData
(
)
{
return
resolveData
;
}
public
void
setDependencyDescriptor
(
DependencyDescriptor
dd
)
{
this
.
dd
=
dd
;
}
public
DependencyDescriptor
getDependencyDescriptor
(
)
{
return
dd
;
}
}
