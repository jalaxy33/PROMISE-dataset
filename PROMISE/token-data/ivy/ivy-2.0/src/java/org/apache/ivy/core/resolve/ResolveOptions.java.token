package
org
.
apache
.
ivy
.
core
.
resolve
;
import
java
.
util
.
Date
;
import
org
.
apache
.
ivy
.
core
.
LogOptions
;
import
org
.
apache
.
ivy
.
core
.
module
.
descriptor
.
ModuleDescriptor
;
import
org
.
apache
.
ivy
.
core
.
module
.
id
.
ModuleId
;
import
org
.
apache
.
ivy
.
util
.
ConfigurationUtils
;
import
org
.
apache
.
ivy
.
util
.
filter
.
Filter
;
import
org
.
apache
.
ivy
.
util
.
filter
.
FilterHelper
;
public
class
ResolveOptions
extends
LogOptions
{
public
static
final
String
RESOLVEMODE_DEFAULT
=
"default"
;
public
static
final
String
RESOLVEMODE_DYNAMIC
=
"dynamic"
;
public
static
final
String
[
]
RESOLVEMODES
=
new
String
[
]
{
RESOLVEMODE_DEFAULT
,
RESOLVEMODE_DYNAMIC
}
;
private
String
[
]
confs
=
new
String
[
]
{
"*"
}
;
private
String
revision
=
null
;
private
Date
date
=
null
;
private
boolean
validate
=
true
;
private
boolean
useCacheOnly
=
false
;
private
boolean
transitive
=
true
;
private
boolean
download
=
true
;
private
boolean
outputReport
=
true
;
private
Filter
artifactFilter
=
FilterHelper
.
NO_FILTER
;
private
String
resolveMode
;
private
String
resolveId
;
private
boolean
refresh
;
private
boolean
checkIfChanged
=
false
;
public
ResolveOptions
(
)
{
}
public
ResolveOptions
(
ResolveOptions
options
)
{
super
(
options
)
;
confs
=
options
.
confs
;
revision
=
options
.
revision
;
date
=
options
.
date
;
validate
=
options
.
validate
;
refresh
=
options
.
refresh
;
useCacheOnly
=
options
.
useCacheOnly
;
transitive
=
options
.
transitive
;
download
=
options
.
download
;
outputReport
=
options
.
outputReport
;
resolveMode
=
options
.
resolveMode
;
artifactFilter
=
options
.
artifactFilter
;
resolveId
=
options
.
resolveId
;
checkIfChanged
=
options
.
checkIfChanged
;
}
public
Filter
getArtifactFilter
(
)
{
return
artifactFilter
;
}
public
ResolveOptions
setArtifactFilter
(
Filter
artifactFilter
)
{
this
.
artifactFilter
=
artifactFilter
;
return
this
;
}
public
String
getResolveMode
(
)
{
return
resolveMode
;
}
public
ResolveOptions
setResolveMode
(
String
resolveMode
)
{
this
.
resolveMode
=
resolveMode
;
return
this
;
}
public
boolean
useSpecialConfs
(
)
{
for
(
int
i
=
0
;
confs
!=
null
&&
i
<
confs
.
length
;
i
++
)
{
if
(
confs
[
0
]
.
startsWith
(
"*"
)
)
{
return
true
;
}
}
return
false
;
}
public
String
[
]
getConfs
(
)
{
if
(
useSpecialConfs
(
)
)
{
throw
new
AssertionError
(
"ResolveOptions.getConfs() "
+
"can not be used for options used special confs."
)
;
}
return
confs
;
}
public
String
[
]
getConfs
(
ModuleDescriptor
md
)
{
return
ConfigurationUtils
.
replaceWildcards
(
confs
,
md
)
;
}
public
ResolveOptions
setConfs
(
String
[
]
confs
)
{
this
.
confs
=
confs
;
return
this
;
}
public
Date
getDate
(
)
{
return
date
;
}
public
ResolveOptions
setDate
(
Date
date
)
{
this
.
date
=
date
;
return
this
;
}
public
boolean
isDownload
(
)
{
return
download
;
}
public
ResolveOptions
setDownload
(
boolean
download
)
{
this
.
download
=
download
;
return
this
;
}
public
boolean
isOutputReport
(
)
{
return
outputReport
;
}
public
ResolveOptions
setOutputReport
(
boolean
outputReport
)
{
this
.
outputReport
=
outputReport
;
return
this
;
}
public
boolean
isTransitive
(
)
{
return
transitive
;
}
public
ResolveOptions
setTransitive
(
boolean
transitive
)
{
this
.
transitive
=
transitive
;
return
this
;
}
public
boolean
isUseCacheOnly
(
)
{
return
useCacheOnly
;
}
public
ResolveOptions
setUseCacheOnly
(
boolean
useCacheOnly
)
{
this
.
useCacheOnly
=
useCacheOnly
;
return
this
;
}
public
boolean
isValidate
(
)
{
return
validate
;
}
public
ResolveOptions
setValidate
(
boolean
validate
)
{
this
.
validate
=
validate
;
return
this
;
}
public
String
getRevision
(
)
{
return
revision
;
}
public
ResolveOptions
setRevision
(
String
revision
)
{
this
.
revision
=
revision
;
return
this
;
}
public
String
getResolveId
(
)
{
return
resolveId
;
}
public
ResolveOptions
setResolveId
(
String
resolveId
)
{
this
.
resolveId
=
resolveId
;
return
this
;
}
public
ResolveOptions
setRefresh
(
boolean
refresh
)
{
this
.
refresh
=
refresh
;
return
this
;
}
public
boolean
isRefresh
(
)
{
return
refresh
;
}
public
ResolveOptions
setCheckIfChanged
(
boolean
checkIfChanged
)
{
this
.
checkIfChanged
=
checkIfChanged
;
return
this
;
}
public
boolean
getCheckIfChanged
(
)
{
return
checkIfChanged
;
}
public
static
String
getDefaultResolveId
(
ModuleDescriptor
md
)
{
ModuleId
module
=
md
.
getModuleRevisionId
(
)
.
getModuleId
(
)
;
return
getDefaultResolveId
(
module
)
;
}
public
static
String
getDefaultResolveId
(
ModuleId
moduleId
)
{
return
moduleId
.
getOrganisation
(
)
+
"-"
+
moduleId
.
getName
(
)
;
}
}
