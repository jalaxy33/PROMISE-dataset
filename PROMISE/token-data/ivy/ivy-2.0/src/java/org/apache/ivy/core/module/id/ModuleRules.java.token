package
org
.
apache
.
ivy
.
core
.
module
.
id
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
LinkedHashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Map
.
Entry
;
import
org
.
apache
.
ivy
.
plugins
.
matcher
.
MapMatcher
;
import
org
.
apache
.
ivy
.
util
.
Checks
;
import
org
.
apache
.
ivy
.
util
.
Message
;
import
org
.
apache
.
ivy
.
util
.
filter
.
Filter
;
import
org
.
apache
.
ivy
.
util
.
filter
.
NoFilter
;
public
class
ModuleRules
{
private
Map
rules
=
new
LinkedHashMap
(
)
;
public
ModuleRules
(
)
{
}
private
ModuleRules
(
Map
rules
)
{
this
.
rules
=
new
LinkedHashMap
(
rules
)
;
}
public
void
defineRule
(
MapMatcher
condition
,
Object
rule
)
{
Checks
.
checkNotNull
(
condition
,
"condition"
)
;
Checks
.
checkNotNull
(
rule
,
"rule"
)
;
rules
.
put
(
condition
,
rule
)
;
}
public
Object
getRule
(
ModuleId
mid
)
{
return
getRule
(
mid
,
NoFilter
.
INSTANCE
)
;
}
public
Object
[
]
getRules
(
ModuleId
mid
)
{
return
getRules
(
mid
.
getAttributes
(
)
,
NoFilter
.
INSTANCE
)
;
}
public
Object
getRule
(
ModuleRevisionId
mrid
)
{
return
getRule
(
mrid
,
NoFilter
.
INSTANCE
)
;
}
public
Object
getRule
(
ModuleId
mid
,
Filter
filter
)
{
Checks
.
checkNotNull
(
mid
,
"mid"
)
;
return
getRule
(
mid
.
getAttributes
(
)
,
filter
)
;
}
public
Object
getRule
(
ModuleRevisionId
mrid
,
Filter
filter
)
{
Checks
.
checkNotNull
(
mrid
,
"mrid"
)
;
Checks
.
checkNotNull
(
filter
,
"filter"
)
;
Map
moduleAttributes
=
mrid
.
getAttributes
(
)
;
return
getRule
(
moduleAttributes
,
filter
)
;
}
private
Object
getRule
(
Map
moduleAttributes
,
Filter
filter
)
{
for
(
Iterator
iter
=
rules
.
entrySet
(
)
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
Map
.
Entry
ruleEntry
=
(
Entry
)
iter
.
next
(
)
;
MapMatcher
midm
=
(
MapMatcher
)
ruleEntry
.
getKey
(
)
;
if
(
midm
.
matches
(
moduleAttributes
)
)
{
Object
rule
=
ruleEntry
.
getValue
(
)
;
if
(
filter
.
accept
(
rule
)
)
{
return
rule
;
}
}
}
return
null
;
}
public
Object
[
]
getRules
(
ModuleRevisionId
mrid
,
Filter
filter
)
{
Checks
.
checkNotNull
(
mrid
,
"mrid"
)
;
Checks
.
checkNotNull
(
filter
,
"filter"
)
;
Map
moduleAttributes
=
mrid
.
getAttributes
(
)
;
return
getRules
(
moduleAttributes
,
filter
)
;
}
private
Object
[
]
getRules
(
Map
moduleAttributes
,
Filter
filter
)
{
List
matchingRules
=
new
ArrayList
(
)
;
for
(
Iterator
iter
=
rules
.
entrySet
(
)
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
Map
.
Entry
ruleEntry
=
(
Entry
)
iter
.
next
(
)
;
MapMatcher
midm
=
(
MapMatcher
)
ruleEntry
.
getKey
(
)
;
if
(
midm
.
matches
(
moduleAttributes
)
)
{
Object
rule
=
ruleEntry
.
getValue
(
)
;
if
(
filter
.
accept
(
rule
)
)
{
matchingRules
.
add
(
rule
)
;
}
}
}
return
matchingRules
.
toArray
(
)
;
}
public
void
dump
(
String
prefix
)
{
if
(
rules
.
isEmpty
(
)
)
{
Message
.
debug
(
prefix
+
"NONE"
)
;
}
else
{
for
(
Iterator
iter
=
rules
.
keySet
(
)
.
iterator
(
)
;
iter
.
hasNext
(
)
;
)
{
MapMatcher
midm
=
(
MapMatcher
)
iter
.
next
(
)
;
Object
rule
=
rules
.
get
(
midm
)
;
Message
.
debug
(
prefix
+
midm
+
" -> "
+
rule
)
;
}
}
}
public
Map
getAllRules
(
)
{
return
Collections
.
unmodifiableMap
(
rules
)
;
}
public
Object
clone
(
)
{
return
new
ModuleRules
(
rules
)
;
}
}
