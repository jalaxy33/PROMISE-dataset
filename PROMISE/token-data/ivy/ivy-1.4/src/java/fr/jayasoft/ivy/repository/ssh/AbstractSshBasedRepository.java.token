package
fr
.
jayasoft
.
ivy
.
repository
.
ssh
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
net
.
URI
;
import
java
.
net
.
URISyntaxException
;
import
com
.
jcraft
.
jsch
.
Session
;
import
fr
.
jayasoft
.
ivy
.
repository
.
AbstractRepository
;
import
fr
.
jayasoft
.
ivy
.
util
.
Message
;
public
abstract
class
AbstractSshBasedRepository
extends
AbstractRepository
{
private
File
keyFile
=
null
;
private
File
passFile
=
null
;
private
String
userPassword
=
null
;
private
String
keyFilePassword
=
null
;
private
String
user
=
"guest"
;
private
String
host
=
null
;
private
int
port
=
-
1
;
public
AbstractSshBasedRepository
(
)
{
super
(
)
;
}
protected
Session
getSession
(
String
pathOrUri
)
throws
IOException
{
URI
uri
=
parseURI
(
pathOrUri
)
;
String
host
=
getHost
(
)
;
int
port
=
getPort
(
)
;
String
user
=
getUser
(
)
;
String
userPassword
=
getUserPassword
(
)
;
if
(
uri
!=
null
&&
uri
.
getScheme
(
)
!=
null
)
{
if
(
uri
.
getHost
(
)
!=
null
)
host
=
uri
.
getHost
(
)
;
if
(
uri
.
getPort
(
)
!=
-
1
)
{
port
=
uri
.
getPort
(
)
;
}
if
(
uri
.
getUserInfo
(
)
!=
null
)
{
String
userInfo
=
uri
.
getUserInfo
(
)
;
if
(
userInfo
.
indexOf
(
":"
)
==
-
1
)
{
user
=
userInfo
;
}
else
{
user
=
userInfo
.
substring
(
0
,
userInfo
.
indexOf
(
":"
)
)
;
userPassword
=
userInfo
.
substring
(
userInfo
.
indexOf
(
":"
)
+
1
)
;
}
}
}
return
SshCache
.
getInstance
(
)
.
getSession
(
host
,
port
,
user
,
userPassword
,
getKeyFile
(
)
,
getKeyFilePassword
(
)
,
getPassFile
(
)
)
;
}
private
URI
parseURI
(
String
source
)
{
try
{
URI
uri
=
new
URI
(
source
)
;
if
(
uri
.
getScheme
(
)
!=
null
&&
!
uri
.
getScheme
(
)
.
equalsIgnoreCase
(
getRepositoryScheme
(
)
)
)
throw
new
URISyntaxException
(
source
,
"Wrong scheme in URI. Expected "
+
getRepositoryScheme
(
)
+
" as scheme!"
)
;
if
(
uri
.
getHost
(
)
==
null
&&
getHost
(
)
==
null
)
throw
new
URISyntaxException
(
source
,
"Missing host in URI or in resolver"
)
;
if
(
uri
.
getPath
(
)
==
null
)
throw
new
URISyntaxException
(
source
,
"Missing path in URI"
)
;
if
(
uri
.
getUserInfo
(
)
==
null
&&
getUser
(
)
==
null
)
throw
new
URISyntaxException
(
source
,
"Missing username in URI or in resolver"
)
;
return
uri
;
}
catch
(
URISyntaxException
e
)
{
Message
.
error
(
e
.
getMessage
(
)
)
;
Message
.
error
(
"The uri is in the wrong format."
)
;
Message
.
error
(
"Please use scheme://user:pass@hostname/path/to/repository"
)
;
return
null
;
}
}
protected
void
releaseSession
(
Session
session
,
String
pathOrUri
)
{
session
.
disconnect
(
)
;
SshCache
.
getInstance
(
)
.
clearSession
(
session
)
;
}
public
void
setUser
(
String
user
)
{
this
.
user
=
user
;
}
public
String
getUser
(
)
{
return
user
;
}
public
void
setKeyFile
(
File
filePath
)
{
this
.
keyFile
=
filePath
;
if
(
!
keyFile
.
exists
(
)
)
{
Message
.
warn
(
"Pemfile "
+
keyFile
.
getAbsolutePath
(
)
+
" doesn't exist."
)
;
keyFile
=
null
;
}
else
if
(
!
keyFile
.
canRead
(
)
)
{
Message
.
warn
(
"Pemfile "
+
keyFile
.
getAbsolutePath
(
)
+
" not readable."
)
;
keyFile
=
null
;
}
else
{
Message
.
debug
(
"Using "
+
keyFile
.
getAbsolutePath
(
)
+
" as keyfile."
)
;
}
}
public
File
getKeyFile
(
)
{
return
keyFile
;
}
public
void
setUserPassword
(
String
password
)
{
this
.
userPassword
=
password
;
}
public
String
getKeyFilePassword
(
)
{
return
keyFilePassword
;
}
public
void
setKeyFilePassword
(
String
keyFilePassword
)
{
this
.
keyFilePassword
=
keyFilePassword
;
}
public
String
getUserPassword
(
)
{
return
userPassword
;
}
public
String
getHost
(
)
{
return
host
;
}
public
void
setHost
(
String
host
)
{
this
.
host
=
host
;
}
public
int
getPort
(
)
{
return
port
;
}
public
void
setPort
(
int
port
)
{
this
.
port
=
port
;
}
public
void
setPassFile
(
File
passFile
)
{
this
.
passFile
=
passFile
;
}
public
File
getPassFile
(
)
{
return
passFile
;
}
protected
abstract
String
getRepositoryScheme
(
)
;
}
