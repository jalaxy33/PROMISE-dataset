package
fr
.
jayasoft
.
ivy
.
repository
.
ssh
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
com
.
jcraft
.
jsch
.
ChannelSftp
;
import
com
.
jcraft
.
jsch
.
JSch
;
import
com
.
jcraft
.
jsch
.
JSchException
;
import
com
.
jcraft
.
jsch
.
Session
;
import
com
.
jcraft
.
jsch
.
UserInfo
;
import
fr
.
jayasoft
.
ivy
.
IvyContext
;
import
fr
.
jayasoft
.
ivy
.
event
.
IvyEvent
;
import
fr
.
jayasoft
.
ivy
.
event
.
IvyListener
;
import
fr
.
jayasoft
.
ivy
.
event
.
resolve
.
EndResolveEvent
;
import
fr
.
jayasoft
.
ivy
.
util
.
Credentials
;
import
fr
.
jayasoft
.
ivy
.
util
.
CredentialsUtil
;
import
fr
.
jayasoft
.
ivy
.
util
.
Message
;
public
class
SshCache
{
private
SshCache
(
)
{
}
;
private
static
SshCache
instance
=
new
SshCache
(
)
;
public
static
SshCache
getInstance
(
)
{
return
instance
;
}
private
class
Entry
{
private
Session
session
=
null
;
private
ChannelSftp
channelSftp
=
null
;
private
String
host
=
null
;
private
String
user
=
null
;
private
int
port
=
22
;
public
String
getHost
(
)
{
return
host
;
}
public
int
getPort
(
)
{
return
port
;
}
public
String
getUser
(
)
{
return
user
;
}
public
Entry
(
Session
newSession
,
String
newUser
,
String
newHost
,
int
newPort
)
{
session
=
newSession
;
host
=
newHost
;
user
=
newUser
;
port
=
newPort
;
IvyContext
.
getContext
(
)
.
getIvy
(
)
.
addIvyListener
(
new
IvyListener
(
)
{
public
void
progress
(
IvyEvent
event
)
{
event
.
getSource
(
)
.
removeIvyListener
(
this
)
;
clearSession
(
session
)
;
}
}
,
EndResolveEvent
.
NAME
)
;
}
public
void
setChannelSftp
(
ChannelSftp
newChannel
)
{
if
(
channelSftp
!=
null
&&
newChannel
!=
null
)
throw
new
IllegalStateException
(
"Only one sftp channelSftp per session allowed"
)
;
this
.
channelSftp
=
newChannel
;
}
public
ChannelSftp
getChannelSftp
(
)
{
return
channelSftp
;
}
private
Session
getSession
(
)
{
return
session
;
}
public
void
releaseChannelSftp
(
)
{
if
(
channelSftp
!=
null
)
{
if
(
channelSftp
.
isConnected
(
)
)
{
Message
.
verbose
(
":: SFTP :: closing sftp connection from "
+
host
+
"..."
)
;
channelSftp
.
disconnect
(
)
;
channelSftp
=
null
;
Message
.
verbose
(
":: SFTP :: sftp connection closed from "
+
host
)
;
}
}
}
}
private
Map
uriCacheMap
=
new
HashMap
(
)
;
private
Map
sessionCacheMap
=
new
HashMap
(
)
;
private
Entry
getCacheEntry
(
String
user
,
String
host
,
int
port
)
{
return
(
Entry
)
uriCacheMap
.
get
(
createCacheKey
(
user
,
host
,
port
)
)
;
}
private
static
String
createCacheKey
(
String
user
,
String
host
,
int
port
)
{
String
portToUse
=
"22"
;
if
(
port
!=
-
1
&&
port
!=
22
)
portToUse
=
Integer
.
toString
(
port
)
;
return
user
.
toLowerCase
(
)
.
trim
(
)
+
"@"
+
host
.
toLowerCase
(
)
.
trim
(
)
+
":"
+
portToUse
;
}
private
Entry
getCacheEntry
(
Session
session
)
{
return
(
Entry
)
sessionCacheMap
.
get
(
session
)
;
}
private
void
setSession
(
String
user
,
String
host
,
int
port
,
Session
newSession
)
{
Entry
entry
=
(
Entry
)
uriCacheMap
.
get
(
createCacheKey
(
user
,
host
,
port
)
)
;
Session
oldSession
=
null
;
if
(
entry
!=
null
)
oldSession
=
entry
.
getSession
(
)
;
if
(
oldSession
!=
null
&&
!
oldSession
.
equals
(
newSession
)
&&
oldSession
.
isConnected
(
)
)
{
entry
.
releaseChannelSftp
(
)
;
String
oldhost
=
oldSession
.
getHost
(
)
;
Message
.
verbose
(
":: SSH :: closing ssh connection from "
+
oldhost
+
"..."
)
;
oldSession
.
disconnect
(
)
;
Message
.
verbose
(
":: SSH :: ssh connection closed from "
+
oldhost
)
;
}
if
(
(
newSession
==
null
)
&&
(
entry
!=
null
)
)
{
uriCacheMap
.
remove
(
createCacheKey
(
user
,
host
,
port
)
)
;
if
(
entry
.
getSession
(
)
!=
null
)
sessionCacheMap
.
remove
(
entry
.
getSession
(
)
)
;
}
else
{
Entry
newEntry
=
new
Entry
(
newSession
,
user
,
host
,
port
)
;
uriCacheMap
.
put
(
createCacheKey
(
user
,
host
,
port
)
,
newEntry
)
;
sessionCacheMap
.
put
(
newSession
,
newEntry
)
;
}
}
public
void
clearSession
(
Session
session
)
{
Entry
entry
=
(
Entry
)
sessionCacheMap
.
get
(
session
)
;
if
(
entry
!=
null
)
setSession
(
entry
.
getUser
(
)
,
entry
.
getHost
(
)
,
entry
.
getPort
(
)
,
null
)
;
}
public
ChannelSftp
getChannelSftp
(
Session
session
)
throws
IOException
{
ChannelSftp
channel
=
null
;
Entry
entry
=
getCacheEntry
(
session
)
;
if
(
entry
!=
null
)
{
channel
=
entry
.
getChannelSftp
(
)
;
if
(
channel
!=
null
&&
!
channel
.
isConnected
(
)
)
{
entry
.
releaseChannelSftp
(
)
;
channel
=
null
;
}
}
return
channel
;
}
public
void
attachChannelSftp
(
Session
session
,
ChannelSftp
channel
)
{
Entry
entry
=
getCacheEntry
(
session
)
;
if
(
entry
==
null
)
throw
new
IllegalArgumentException
(
"No entry for "
+
session
+
" in the cache"
)
;
entry
.
setChannelSftp
(
channel
)
;
}
public
Session
getSession
(
String
host
,
int
port
,
String
username
,
String
userPassword
,
File
pemFile
,
String
pemPassword
,
File
passFile
)
throws
IOException
{
Entry
entry
=
getCacheEntry
(
username
,
host
,
port
)
;
Session
session
=
null
;
if
(
entry
!=
null
)
session
=
entry
.
getSession
(
)
;
if
(
session
==
null
||
!
session
.
isConnected
(
)
)
{
Message
.
verbose
(
":: SSH :: connecting to "
+
host
+
"..."
)
;
try
{
JSch
jsch
=
new
JSch
(
)
;
if
(
port
!=
-
1
)
session
=
jsch
.
getSession
(
username
,
host
,
port
)
;
else
session
=
jsch
.
getSession
(
username
,
host
)
;
if
(
pemFile
!=
null
)
{
jsch
.
addIdentity
(
pemFile
.
getAbsolutePath
(
)
,
pemPassword
)
;
}
session
.
setUserInfo
(
new
cfUserInfo
(
host
,
username
,
userPassword
,
pemFile
,
pemPassword
,
passFile
)
)
;
session
.
connect
(
)
;
Message
.
verbose
(
":: SSH :: connected to "
+
host
+
"!"
)
;
setSession
(
username
,
host
,
port
,
session
)
;
}
catch
(
JSchException
e
)
{
if
(
passFile
.
exists
(
)
)
{
passFile
.
delete
(
)
;
}
IOException
ex
=
new
IOException
(
e
.
getMessage
(
)
)
;
ex
.
initCause
(
e
)
;
throw
ex
;
}
}
return
session
;
}
private
static
class
cfUserInfo
implements
UserInfo
{
private
String
userPassword
;
private
String
pemPassword
;
private
String
userName
;
private
final
File
pemFile
;
private
final
String
host
;
private
final
File
passfile
;
public
cfUserInfo
(
String
host
,
String
userName
,
String
userPassword
,
File
pemFile
,
String
pemPassword
,
File
passfile
)
{
this
.
userPassword
=
userPassword
;
this
.
pemPassword
=
pemPassword
;
this
.
host
=
host
;
this
.
passfile
=
passfile
;
this
.
userName
=
userName
;
this
.
pemFile
=
pemFile
;
}
public
void
showMessage
(
String
message
)
{
Message
.
info
(
message
)
;
}
public
boolean
promptYesNo
(
String
message
)
{
return
true
;
}
public
boolean
promptPassword
(
String
message
)
{
return
true
;
}
public
boolean
promptPassphrase
(
String
message
)
{
return
true
;
}
public
String
getPassword
(
)
{
if
(
userPassword
==
null
)
{
Credentials
c
=
CredentialsUtil
.
promptCredentials
(
new
Credentials
(
null
,
host
,
userName
,
userPassword
)
,
passfile
)
;
if
(
c
!=
null
)
{
userName
=
c
.
getUserName
(
)
;
userPassword
=
c
.
getPasswd
(
)
;
}
}
return
userPassword
;
}
public
String
getPassphrase
(
)
{
if
(
pemPassword
==
null
&&
pemFile
!=
null
)
{
Credentials
c
=
CredentialsUtil
.
promptCredentials
(
new
Credentials
(
null
,
pemFile
.
getAbsolutePath
(
)
,
userName
,
pemPassword
)
,
passfile
)
;
if
(
c
!=
null
)
{
userName
=
c
.
getUserName
(
)
;
pemPassword
=
c
.
getPasswd
(
)
;
}
}
return
pemPassword
;
}
}
}
