package
org
.
xml
.
sax
.
helpers
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Enumeration
;
import
org
.
xml
.
sax
.
Parser
;
import
org
.
xml
.
sax
.
InputSource
;
import
org
.
xml
.
sax
.
Locator
;
import
org
.
xml
.
sax
.
AttributeList
;
import
org
.
xml
.
sax
.
EntityResolver
;
import
org
.
xml
.
sax
.
DTDHandler
;
import
org
.
xml
.
sax
.
DocumentHandler
;
import
org
.
xml
.
sax
.
ErrorHandler
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
SAXParseException
;
import
org
.
xml
.
sax
.
XMLReader
;
import
org
.
xml
.
sax
.
Attributes
;
import
org
.
xml
.
sax
.
ContentHandler
;
import
org
.
xml
.
sax
.
SAXNotRecognizedException
;
import
org
.
xml
.
sax
.
SAXNotSupportedException
;
public
class
ParserAdapter
implements
XMLReader
,
DocumentHandler
{
public
ParserAdapter
(
)
throws
SAXException
{
super
(
)
;
String
driver
=
System
.
getProperty
(
"org.xml.sax.parser"
)
;
try
{
setup
(
ParserFactory
.
makeParser
(
)
)
;
}
catch
(
ClassNotFoundException
e1
)
{
throw
new
SAXException
(
"Cannot find SAX1 driver class "
+
driver
,
e1
)
;
}
catch
(
IllegalAccessException
e2
)
{
throw
new
SAXException
(
"SAX1 driver class "
+
driver
+
" found but cannot be loaded"
,
e2
)
;
}
catch
(
InstantiationException
e3
)
{
throw
new
SAXException
(
"SAX1 driver class "
+
driver
+
" loaded but cannot be instantiated"
,
e3
)
;
}
catch
(
ClassCastException
e4
)
{
throw
new
SAXException
(
"SAX1 driver class "
+
driver
+
" does not implement org.xml.sax.Parser"
)
;
}
catch
(
NullPointerException
e5
)
{
throw
new
SAXException
(
"System property org.xml.sax.parser not specified"
)
;
}
}
public
ParserAdapter
(
Parser
parser
)
{
super
(
)
;
setup
(
parser
)
;
}
private
void
setup
(
Parser
parser
)
{
if
(
parser
==
null
)
{
throw
new
NullPointerException
(
"Parser argument must not be null"
)
;
}
this
.
parser
=
parser
;
atts
=
new
AttributesImpl
(
)
;
nsSupport
=
new
NamespaceSupport
(
)
;
attAdapter
=
new
AttributeListAdapter
(
)
;
}
private
final
static
String
FEATURES
=
"http://xml.org/sax/features/"
;
private
final
static
String
NAMESPACES
=
FEATURES
+
"namespaces"
;
private
final
static
String
NAMESPACE_PREFIXES
=
FEATURES
+
"namespace-prefixes"
;
private
final
static
String
VALIDATION
=
FEATURES
+
"validation"
;
private
final
static
String
EXTERNAL_GENERAL
=
FEATURES
+
"external-general-entities"
;
private
final
static
String
EXTERNAL_PARAMETER
=
FEATURES
+
"external-parameter-entities"
;
public
void
setFeature
(
String
name
,
boolean
state
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
name
.
equals
(
NAMESPACES
)
)
{
checkNotParsing
(
"feature"
,
name
)
;
namespaces
=
state
;
if
(
!
namespaces
&&
!
prefixes
)
{
prefixes
=
true
;
}
}
else
if
(
name
.
equals
(
NAMESPACE_PREFIXES
)
)
{
checkNotParsing
(
"feature"
,
name
)
;
prefixes
=
state
;
if
(
!
prefixes
&&
!
namespaces
)
{
namespaces
=
true
;
}
}
else
if
(
name
.
equals
(
VALIDATION
)
||
name
.
equals
(
EXTERNAL_GENERAL
)
||
name
.
equals
(
EXTERNAL_PARAMETER
)
)
{
throw
new
SAXNotSupportedException
(
"Feature: "
+
name
)
;
}
else
{
throw
new
SAXNotRecognizedException
(
"Feature: "
+
name
)
;
}
}
public
boolean
getFeature
(
String
name
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
name
.
equals
(
NAMESPACES
)
)
{
return
namespaces
;
}
else
if
(
name
.
equals
(
NAMESPACE_PREFIXES
)
)
{
return
prefixes
;
}
else
if
(
name
.
equals
(
VALIDATION
)
||
name
.
equals
(
EXTERNAL_GENERAL
)
||
name
.
equals
(
EXTERNAL_PARAMETER
)
)
{
throw
new
SAXNotSupportedException
(
"Feature: "
+
name
)
;
}
else
{
throw
new
SAXNotRecognizedException
(
"Feature: "
+
name
)
;
}
}
public
void
setProperty
(
String
name
,
Object
value
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
throw
new
SAXNotRecognizedException
(
"Property: "
+
name
)
;
}
public
Object
getProperty
(
String
name
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
throw
new
SAXNotRecognizedException
(
"Property: "
+
name
)
;
}
public
void
setEntityResolver
(
EntityResolver
resolver
)
{
if
(
resolver
==
null
)
{
throw
new
NullPointerException
(
"Null entity resolver"
)
;
}
entityResolver
=
resolver
;
}
public
EntityResolver
getEntityResolver
(
)
{
return
entityResolver
;
}
public
void
setDTDHandler
(
DTDHandler
handler
)
{
if
(
handler
==
null
)
{
throw
new
NullPointerException
(
"Null DTD handler"
)
;
}
dtdHandler
=
handler
;
}
public
DTDHandler
getDTDHandler
(
)
{
return
dtdHandler
;
}
public
void
setContentHandler
(
ContentHandler
handler
)
{
if
(
handler
==
null
)
{
throw
new
NullPointerException
(
"Null content handler"
)
;
}
contentHandler
=
handler
;
}
public
ContentHandler
getContentHandler
(
)
{
return
contentHandler
;
}
public
void
setErrorHandler
(
ErrorHandler
handler
)
{
if
(
handler
==
null
)
{
throw
new
NullPointerException
(
"Null error handler"
)
;
}
errorHandler
=
handler
;
}
public
ErrorHandler
getErrorHandler
(
)
{
return
errorHandler
;
}
public
void
parse
(
String
systemId
)
throws
IOException
,
SAXException
{
parse
(
new
InputSource
(
systemId
)
)
;
}
public
void
parse
(
InputSource
input
)
throws
IOException
,
SAXException
{
if
(
parsing
)
{
throw
new
SAXException
(
"Parser is already in use"
)
;
}
setupParser
(
)
;
parsing
=
true
;
try
{
parser
.
parse
(
input
)
;
}
finally
{
parsing
=
false
;
}
parsing
=
false
;
}
public
void
setDocumentLocator
(
Locator
locator
)
{
this
.
locator
=
locator
;
if
(
contentHandler
!=
null
)
{
contentHandler
.
setDocumentLocator
(
locator
)
;
}
}
public
void
startDocument
(
)
throws
SAXException
{
if
(
contentHandler
!=
null
)
{
contentHandler
.
startDocument
(
)
;
}
}
public
void
endDocument
(
)
throws
SAXException
{
if
(
contentHandler
!=
null
)
{
contentHandler
.
endDocument
(
)
;
}
}
public
void
startElement
(
String
qName
,
AttributeList
qAtts
)
throws
SAXException
{
if
(
!
namespaces
)
{
if
(
contentHandler
!=
null
)
{
attAdapter
.
setAttributeList
(
qAtts
)
;
contentHandler
.
startElement
(
""
,
""
,
qName
.
intern
(
)
,
attAdapter
)
;
}
return
;
}
nsSupport
.
pushContext
(
)
;
boolean
seenDecl
=
false
;
atts
.
clear
(
)
;
int
length
=
qAtts
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
{
String
attQName
=
qAtts
.
getName
(
i
)
;
String
type
=
qAtts
.
getType
(
i
)
;
String
value
=
qAtts
.
getValue
(
i
)
;
if
(
attQName
.
startsWith
(
"xmlns"
)
)
{
String
prefix
;
int
n
=
attQName
.
indexOf
(
':'
)
;
if
(
n
==
-
1
)
{
prefix
=
""
;
}
else
{
prefix
=
attQName
.
substring
(
n
+
1
)
;
}
if
(
!
nsSupport
.
declarePrefix
(
prefix
,
value
)
)
{
reportError
(
"Illegal Namespace prefix: "
+
prefix
)
;
}
if
(
contentHandler
!=
null
)
{
contentHandler
.
startPrefixMapping
(
prefix
,
value
)
;
}
if
(
prefixes
)
{
atts
.
addAttribute
(
""
,
""
,
attQName
.
intern
(
)
,
type
,
value
)
;
}
seenDecl
=
true
;
}
else
{
String
attName
[
]
=
processName
(
attQName
,
true
)
;
atts
.
addAttribute
(
attName
[
0
]
,
attName
[
1
]
,
attName
[
2
]
,
type
,
value
)
;
}
}
if
(
seenDecl
)
{
length
=
atts
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
{
String
attQName
=
atts
.
getQName
(
i
)
;
if
(
!
attQName
.
startsWith
(
"xmlns"
)
)
{
String
attName
[
]
=
processName
(
attQName
,
true
)
;
atts
.
setURI
(
i
,
attName
[
0
]
)
;
atts
.
setLocalName
(
i
,
attName
[
1
]
)
;
}
}
}
if
(
contentHandler
!=
null
)
{
String
name
[
]
=
processName
(
qName
,
false
)
;
contentHandler
.
startElement
(
name
[
0
]
,
name
[
1
]
,
name
[
2
]
,
atts
)
;
}
}
public
void
endElement
(
String
qName
)
throws
SAXException
{
if
(
!
namespaces
)
{
if
(
contentHandler
!=
null
)
{
contentHandler
.
endElement
(
""
,
""
,
qName
.
intern
(
)
)
;
}
return
;
}
String
names
[
]
=
processName
(
qName
,
false
)
;
if
(
contentHandler
!=
null
)
{
contentHandler
.
endElement
(
names
[
0
]
,
names
[
1
]
,
names
[
2
]
)
;
Enumeration
prefixes
=
nsSupport
.
getDeclaredPrefixes
(
)
;
while
(
prefixes
.
hasMoreElements
(
)
)
{
String
prefix
=
(
String
)
prefixes
.
nextElement
(
)
;
contentHandler
.
endPrefixMapping
(
prefix
)
;
}
}
nsSupport
.
popContext
(
)
;
}
public
void
characters
(
char
ch
[
]
,
int
start
,
int
length
)
throws
SAXException
{
if
(
contentHandler
!=
null
)
{
contentHandler
.
characters
(
ch
,
start
,
length
)
;
}
}
public
void
ignorableWhitespace
(
char
ch
[
]
,
int
start
,
int
length
)
throws
SAXException
{
if
(
contentHandler
!=
null
)
{
contentHandler
.
ignorableWhitespace
(
ch
,
start
,
length
)
;
}
}
public
void
processingInstruction
(
String
target
,
String
data
)
throws
SAXException
{
if
(
contentHandler
!=
null
)
{
contentHandler
.
processingInstruction
(
target
,
data
)
;
}
}
private
void
setupParser
(
)
{
nsSupport
.
reset
(
)
;
if
(
entityResolver
!=
null
)
{
parser
.
setEntityResolver
(
entityResolver
)
;
}
if
(
dtdHandler
!=
null
)
{
parser
.
setDTDHandler
(
dtdHandler
)
;
}
if
(
errorHandler
!=
null
)
{
parser
.
setErrorHandler
(
errorHandler
)
;
}
parser
.
setDocumentHandler
(
this
)
;
locator
=
null
;
}
private
String
[
]
processName
(
String
qName
,
boolean
isAttribute
)
throws
SAXException
{
String
parts
[
]
=
nsSupport
.
processName
(
qName
,
nameParts
,
isAttribute
)
;
if
(
parts
==
null
)
{
parts
=
new
String
[
3
]
;
parts
[
2
]
=
qName
.
intern
(
)
;
reportError
(
"Undeclared prefix: "
+
qName
)
;
}
return
parts
;
}
void
reportError
(
String
message
)
throws
SAXException
{
if
(
errorHandler
==
null
)
{
return
;
}
SAXParseException
e
;
if
(
locator
!=
null
)
{
e
=
new
SAXParseException
(
message
,
locator
)
;
}
else
{
e
=
new
SAXParseException
(
message
,
null
,
null
,
-
1
,
-
1
)
;
}
errorHandler
.
error
(
e
)
;
}
private
void
checkNotParsing
(
String
type
,
String
name
)
throws
SAXNotSupportedException
{
if
(
parsing
)
{
throw
new
SAXNotSupportedException
(
"Cannot change "
+
type
+
' '
+
name
+
" while parsing"
)
;
}
}
private
NamespaceSupport
nsSupport
;
private
AttributeListAdapter
attAdapter
;
private
boolean
parsing
=
false
;
private
String
nameParts
[
]
=
new
String
[
3
]
;
private
Parser
parser
=
null
;
private
AttributesImpl
atts
=
null
;
private
boolean
namespaces
=
true
;
private
boolean
prefixes
=
false
;
Locator
locator
;
EntityResolver
entityResolver
=
null
;
DTDHandler
dtdHandler
=
null
;
ContentHandler
contentHandler
=
null
;
ErrorHandler
errorHandler
=
null
;
final
class
AttributeListAdapter
implements
Attributes
{
AttributeListAdapter
(
)
{
}
void
setAttributeList
(
AttributeList
qAtts
)
{
this
.
qAtts
=
qAtts
;
}
public
int
getLength
(
)
{
return
qAtts
.
getLength
(
)
;
}
public
String
getURI
(
int
i
)
{
return
""
;
}
public
String
getLocalName
(
int
i
)
{
return
""
;
}
public
String
getQName
(
int
i
)
{
return
qAtts
.
getName
(
i
)
.
intern
(
)
;
}
public
String
getType
(
int
i
)
{
return
qAtts
.
getType
(
i
)
.
intern
(
)
;
}
public
String
getValue
(
int
i
)
{
return
qAtts
.
getValue
(
i
)
;
}
public
int
getIndex
(
String
uri
,
String
localName
)
{
return
-
1
;
}
public
int
getIndex
(
String
qName
)
{
int
max
=
atts
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
max
;
i
++
)
{
if
(
qAtts
.
getName
(
i
)
.
equals
(
qName
)
)
{
return
i
;
}
}
return
-
1
;
}
public
String
getType
(
String
uri
,
String
localName
)
{
return
null
;
}
public
String
getType
(
String
qName
)
{
return
qAtts
.
getType
(
qName
)
.
intern
(
)
;
}
public
String
getValue
(
String
uri
,
String
localName
)
{
return
null
;
}
public
String
getValue
(
String
qName
)
{
return
qAtts
.
getValue
(
qName
)
;
}
private
AttributeList
qAtts
;
}
}
