package
org
.
apache
.
xerces
.
dom
;
import
org
.
w3c
.
dom
.
*
;
public
class
EntityReferenceImpl
extends
ChildAndParentNode
implements
EntityReference
{
static
final
long
serialVersionUID
=
-
7381452955687102062L
;
protected
String
name
;
public
EntityReferenceImpl
(
DocumentImpl
ownerDoc
,
String
name
)
{
super
(
ownerDoc
)
;
this
.
name
=
name
;
isReadOnly
(
true
)
;
}
public
short
getNodeType
(
)
{
return
Node
.
ENTITY_REFERENCE_NODE
;
}
public
String
getNodeName
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
name
;
}
public
NodeList
getChildNodes
(
)
{
synchronize
(
)
;
return
super
.
getChildNodes
(
)
;
}
public
Node
getFirstChild
(
)
{
synchronize
(
)
;
return
super
.
getFirstChild
(
)
;
}
public
Node
getLastChild
(
)
{
synchronize
(
)
;
return
super
.
getLastChild
(
)
;
}
public
int
getLength
(
)
{
synchronize
(
)
;
return
super
.
getLength
(
)
;
}
public
boolean
hasChildNodes
(
)
{
synchronize
(
)
;
return
super
.
hasChildNodes
(
)
;
}
public
Node
item
(
int
index
)
{
synchronize
(
)
;
return
super
.
item
(
index
)
;
}
protected
void
synchronize
(
)
{
if
(
firstChild
!=
null
)
{
return
;
}
DocumentType
doctype
;
NamedNodeMap
entities
;
EntityImpl
entDef
;
if
(
null
!=
(
doctype
=
getOwnerDocument
(
)
.
getDoctype
(
)
)
&&
null
!=
(
entities
=
doctype
.
getEntities
(
)
)
)
{
entDef
=
(
EntityImpl
)
entities
.
getNamedItem
(
getNodeName
(
)
)
;
if
(
entDef
==
null
)
return
;
isReadOnly
(
false
)
;
for
(
Node
defkid
=
entDef
.
getFirstChild
(
)
;
defkid
!=
null
;
defkid
=
defkid
.
getNextSibling
(
)
)
{
Node
newkid
=
defkid
.
cloneNode
(
true
)
;
insertBefore
(
newkid
,
null
)
;
}
setReadOnly
(
true
,
true
)
;
}
}
}
