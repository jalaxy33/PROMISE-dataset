package
org
.
apache
.
xerces
.
readers
;
import
org
.
apache
.
xerces
.
framework
.
XMLErrorReporter
;
import
org
.
apache
.
xerces
.
utils
.
QName
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
xml
.
sax
.
EntityResolver
;
import
org
.
xml
.
sax
.
InputSource
;
import
org
.
xml
.
sax
.
Locator
;
import
java
.
io
.
InputStream
;
public
interface
XMLEntityHandler
extends
Locator
{
public
static
final
int
CHARREF_RESULT_SEMICOLON_REQUIRED
=
-
1
,
CHARREF_RESULT_INVALID_CHAR
=
-
2
,
CHARREF_RESULT_OUT_OF_RANGE
=
-
3
;
public
static
final
int
STRINGLIT_RESULT_QUOTE_REQUIRED
=
-
1
,
STRINGLIT_RESULT_INVALID_CHAR
=
-
2
;
public
static
final
int
ATTVALUE_RESULT_COMPLEX
=
-
1
,
ATTVALUE_RESULT_LESSTHAN
=
-
2
,
ATTVALUE_RESULT_INVALID_CHAR
=
-
3
;
public
static
final
int
ENTITYVALUE_RESULT_FINISHED
=
-
1
,
ENTITYVALUE_RESULT_REFERENCE
=
-
2
,
ENTITYVALUE_RESULT_PEREF
=
-
3
,
ENTITYVALUE_RESULT_INVALID_CHAR
=
-
4
,
ENTITYVALUE_RESULT_END_OF_INPUT
=
-
5
;
public
static
final
int
CONTENT_RESULT_START_OF_PI
=
0
,
CONTENT_RESULT_START_OF_COMMENT
=
1
,
CONTENT_RESULT_START_OF_CDSECT
=
2
,
CONTENT_RESULT_END_OF_CDSECT
=
3
,
CONTENT_RESULT_START_OF_ETAG
=
4
,
CONTENT_RESULT_MATCHING_ETAG
=
5
,
CONTENT_RESULT_START_OF_ELEMENT
=
6
,
CONTENT_RESULT_START_OF_CHARREF
=
7
,
CONTENT_RESULT_START_OF_ENTITYREF
=
8
,
CONTENT_RESULT_INVALID_CHAR
=
9
,
CONTENT_RESULT_MARKUP_NOT_RECOGNIZED
=
10
,
CONTENT_RESULT_MARKUP_END_OF_INPUT
=
11
,
CONTENT_RESULT_REFERENCE_END_OF_INPUT
=
12
;
public
static
final
int
ENTITYTYPE_INTERNAL_PE
=
0
,
ENTITYTYPE_EXTERNAL_PE
=
1
,
ENTITYTYPE_INTERNAL
=
2
,
ENTITYTYPE_EXTERNAL
=
3
,
ENTITYTYPE_UNPARSED
=
4
,
ENTITYTYPE_DOCUMENT
=
5
,
ENTITYTYPE_EXTERNAL_SUBSET
=
6
;
public
static
final
int
ENTITYREF_IN_ATTVALUE
=
0
,
ENTITYREF_IN_DEFAULTATTVALUE
=
1
,
ENTITYREF_IN_CONTENT
=
2
,
ENTITYREF_IN_DTD_AS_MARKUP
=
3
,
ENTITYREF_IN_ENTITYVALUE
=
4
,
ENTITYREF_IN_DTD_WITHIN_MARKUP
=
5
,
ENTITYREF_DOCUMENT
=
6
,
ENTITYREF_EXTERNAL_SUBSET
=
7
;
public
boolean
startReadingFromDocument
(
InputSource
source
)
throws
Exception
;
public
boolean
startReadingFromEntity
(
int
entityName
,
int
readerDepth
,
int
entityContext
)
throws
Exception
;
public
String
expandSystemId
(
String
systemId
)
;
public
interface
DTDHandler
{
public
void
startReadingFromExternalSubset
(
String
publicId
,
String
systemId
,
int
readerDepth
)
throws
Exception
;
public
void
stopReadingFromExternalSubset
(
)
throws
Exception
;
public
boolean
startEntityDecl
(
boolean
isPE
,
int
entityName
)
throws
Exception
;
public
void
endEntityDecl
(
)
throws
Exception
;
public
int
addInternalPEDecl
(
int
entityName
,
int
value
,
boolean
isExternal
)
throws
Exception
;
public
int
addExternalPEDecl
(
int
entityName
,
int
publicId
,
int
systemId
,
boolean
isExternal
)
throws
Exception
;
public
int
addInternalEntityDecl
(
int
entityName
,
int
value
,
boolean
isExternal
)
throws
Exception
;
public
int
addExternalEntityDecl
(
int
entityName
,
int
publicId
,
int
systemId
,
boolean
isExternal
)
throws
Exception
;
public
int
addUnparsedEntityDecl
(
int
entityName
,
int
publicId
,
int
systemId
,
int
notationName
,
boolean
isExternal
)
throws
Exception
;
public
int
addNotationDecl
(
int
notationName
,
int
publicId
,
int
systemId
,
boolean
isExternal
)
throws
Exception
;
public
boolean
isUnparsedEntity
(
int
entityName
)
;
public
boolean
isNotationDeclared
(
int
entityName
)
;
public
void
addRequiredNotation
(
int
notationName
,
Locator
locator
,
int
majorCode
,
int
minorCode
,
Object
[
]
args
)
;
public
void
checkRequiredNotations
(
)
throws
Exception
;
}
public
int
getReaderId
(
)
;
public
void
setReaderDepth
(
int
depth
)
;
public
int
getReaderDepth
(
)
;
public
EntityReader
getEntityReader
(
)
;
public
EntityReader
changeReaders
(
)
throws
Exception
;
public
interface
CharBuffer
{
public
void
append
(
char
ch
)
;
public
void
append
(
char
[
]
chars
,
int
offset
,
int
length
)
;
public
int
length
(
)
;
public
int
addString
(
int
offset
,
int
length
)
;
}
public
void
setCharDataHandler
(
XMLEntityHandler
.
CharDataHandler
charDataHandler
)
;
public
XMLEntityHandler
.
CharDataHandler
getCharDataHandler
(
)
;
public
interface
CharDataHandler
{
public
void
processCharacters
(
char
[
]
chars
,
int
offset
,
int
length
)
throws
Exception
;
public
void
processCharacters
(
int
stringHandle
)
throws
Exception
;
public
void
processWhitespace
(
char
[
]
chars
,
int
offset
,
int
length
)
throws
Exception
;
public
void
processWhitespace
(
int
stringHandle
)
throws
Exception
;
}
public
interface
EntityReader
{
public
int
currentOffset
(
)
;
public
int
getLineNumber
(
)
;
public
int
getColumnNumber
(
)
;
public
void
setInCDSect
(
boolean
inCDSect
)
;
public
boolean
getInCDSect
(
)
;
public
void
append
(
XMLEntityHandler
.
CharBuffer
charBuffer
,
int
offset
,
int
length
)
;
public
int
addString
(
int
offset
,
int
length
)
;
public
int
addSymbol
(
int
offset
,
int
length
)
;
public
boolean
lookingAtChar
(
char
ch
,
boolean
skipPastChar
)
throws
Exception
;
public
boolean
lookingAtValidChar
(
boolean
skipPastChar
)
throws
Exception
;
public
boolean
lookingAtSpace
(
boolean
skipPastChar
)
throws
Exception
;
public
void
skipToChar
(
char
ch
)
throws
Exception
;
public
void
skipPastSpaces
(
)
throws
Exception
;
public
void
skipPastName
(
char
fastcheck
)
throws
Exception
;
public
void
skipPastNmtoken
(
char
fastcheck
)
throws
Exception
;
public
boolean
skippedString
(
char
[
]
s
)
throws
Exception
;
public
int
scanInvalidChar
(
)
throws
Exception
;
public
int
scanCharRef
(
boolean
isHexadecimal
)
throws
Exception
;
public
int
scanStringLiteral
(
)
throws
Exception
;
public
int
scanAttValue
(
char
qchar
,
boolean
asSymbol
)
throws
Exception
;
public
int
scanEntityValue
(
int
qchar
,
boolean
createString
)
throws
Exception
;
public
int
scanName
(
char
fastcheck
)
throws
Exception
;
public
boolean
scanExpectedName
(
char
fastcheck
,
StringPool
.
CharArrayRange
expectedName
)
throws
Exception
;
public
void
scanQName
(
char
fastcheck
,
QName
qname
)
throws
Exception
;
public
int
scanContent
(
QName
element
)
throws
Exception
;
}
}
