package
org
.
apache
.
xerces
.
framework
;
import
org
.
apache
.
xerces
.
utils
.
QName
;
public
interface
XMLDocumentHandler
{
public
void
startDocument
(
)
throws
Exception
;
public
void
endDocument
(
)
throws
Exception
;
public
void
xmlDecl
(
int
version
,
int
encoding
,
int
standalone
)
throws
Exception
;
public
void
textDecl
(
int
version
,
int
encoding
)
throws
Exception
;
public
void
startNamespaceDeclScope
(
int
prefix
,
int
uri
)
throws
Exception
;
public
void
endNamespaceDeclScope
(
int
prefix
)
throws
Exception
;
public
void
startElement
(
QName
element
,
XMLAttrList
attrList
,
int
attrListHandle
)
throws
Exception
;
public
void
endElement
(
QName
element
)
throws
Exception
;
public
void
startEntityReference
(
int
entityName
,
int
entityType
,
int
entityContext
)
throws
Exception
;
public
void
endEntityReference
(
int
entityName
,
int
entityType
,
int
entityContext
)
throws
Exception
;
public
void
processingInstruction
(
int
target
,
int
data
)
throws
Exception
;
public
void
comment
(
int
comment
)
throws
Exception
;
public
void
characters
(
int
data
)
throws
Exception
;
public
void
characters
(
char
ch
[
]
,
int
start
,
int
length
)
throws
Exception
;
public
void
ignorableWhitespace
(
int
data
)
throws
Exception
;
public
void
ignorableWhitespace
(
char
ch
[
]
,
int
start
,
int
length
)
throws
Exception
;
public
void
startCDATA
(
)
throws
Exception
;
public
void
endCDATA
(
)
throws
Exception
;
public
interface
DTDHandler
{
public
void
startDTD
(
QName
rootElement
,
int
publicId
,
int
systemId
)
throws
Exception
;
public
void
internalSubset
(
int
internalSubset
)
throws
Exception
;
public
void
textDecl
(
int
version
,
int
encoding
)
throws
Exception
;
public
void
endDTD
(
)
throws
Exception
;
public
void
elementDecl
(
QName
elementDecl
,
int
contentSpecType
,
int
contentSpecIndex
,
XMLContentSpec
.
Provider
contentSpecProvider
)
throws
Exception
;
public
void
attlistDecl
(
QName
elementDecl
,
QName
attributeDecl
,
int
attType
,
boolean
attList
,
String
enumString
,
int
attDefaultType
,
int
attDefaultValue
)
throws
Exception
;
public
void
internalPEDecl
(
int
entityName
,
int
entityValue
)
throws
Exception
;
public
void
externalPEDecl
(
int
entityName
,
int
publicId
,
int
systemId
)
throws
Exception
;
public
void
internalEntityDecl
(
int
entityName
,
int
entityValue
)
throws
Exception
;
public
void
externalEntityDecl
(
int
entityName
,
int
publicId
,
int
systemId
)
throws
Exception
;
public
void
unparsedEntityDecl
(
int
entityName
,
int
publicId
,
int
systemId
,
int
notationName
)
throws
Exception
;
public
void
notationDecl
(
int
notationName
,
int
publicId
,
int
systemId
)
throws
Exception
;
public
void
processingInstruction
(
int
targetIndex
,
int
dataIndex
)
throws
Exception
;
public
void
comment
(
int
dataIndex
)
throws
Exception
;
}
}
