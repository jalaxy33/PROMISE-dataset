package
org
.
apache
.
xerces
.
dom
;
import
org
.
w3c
.
dom
.
*
;
public
class
DocumentTypeImpl
extends
ChildAndParentNode
implements
DocumentType
{
static
final
long
serialVersionUID
=
7751299192316526485L
;
protected
String
name
;
protected
NamedNodeMapImpl
entities
;
protected
NamedNodeMapImpl
notations
;
protected
NamedNodeMapImpl
elements
;
protected
String
publicID
;
protected
String
systemID
;
protected
String
internalSubset
;
public
DocumentTypeImpl
(
DocumentImpl
ownerDocument
,
String
name
)
{
super
(
ownerDocument
)
;
this
.
name
=
name
;
entities
=
new
NamedNodeMapImpl
(
this
)
;
notations
=
new
NamedNodeMapImpl
(
this
)
;
elements
=
new
NamedNodeMapImpl
(
this
)
;
}
public
DocumentTypeImpl
(
DocumentImpl
ownerDocument
,
String
qualifiedName
,
String
publicID
,
String
systemID
)
{
this
(
ownerDocument
,
qualifiedName
)
;
this
.
publicID
=
publicID
;
this
.
systemID
=
systemID
;
}
public
String
getPublicId
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
publicID
;
}
public
String
getSystemId
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
systemID
;
}
public
void
setInternalSubset
(
String
internalSubset
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
this
.
internalSubset
=
internalSubset
;
}
public
String
getInternalSubset
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
internalSubset
;
}
public
short
getNodeType
(
)
{
return
Node
.
DOCUMENT_TYPE_NODE
;
}
public
String
getNodeName
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
name
;
}
public
Node
cloneNode
(
boolean
deep
)
{
DocumentTypeImpl
newnode
=
(
DocumentTypeImpl
)
super
.
cloneNode
(
deep
)
;
newnode
.
entities
=
entities
.
cloneMap
(
newnode
)
;
newnode
.
notations
=
notations
.
cloneMap
(
newnode
)
;
newnode
.
elements
=
elements
.
cloneMap
(
newnode
)
;
return
newnode
;
}
void
setOwnerDocument
(
DocumentImpl
doc
)
{
super
.
setOwnerDocument
(
doc
)
;
entities
.
setOwnerDocument
(
doc
)
;
notations
.
setOwnerDocument
(
doc
)
;
elements
.
setOwnerDocument
(
doc
)
;
}
public
String
getName
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
name
;
}
public
NamedNodeMap
getEntities
(
)
{
if
(
needsSyncChildren
(
)
)
{
synchronizeChildren
(
)
;
}
return
entities
;
}
public
NamedNodeMap
getNotations
(
)
{
if
(
needsSyncChildren
(
)
)
{
synchronizeChildren
(
)
;
}
return
notations
;
}
public
void
setReadOnly
(
boolean
readOnly
,
boolean
deep
)
{
if
(
needsSyncChildren
(
)
)
{
synchronizeChildren
(
)
;
}
setReadOnly
(
readOnly
,
deep
)
;
elements
.
setReadOnly
(
readOnly
,
true
)
;
entities
.
setReadOnly
(
readOnly
,
true
)
;
notations
.
setReadOnly
(
readOnly
,
true
)
;
}
public
NamedNodeMap
getElements
(
)
{
if
(
needsSyncChildren
(
)
)
{
synchronizeChildren
(
)
;
}
return
elements
;
}
}
