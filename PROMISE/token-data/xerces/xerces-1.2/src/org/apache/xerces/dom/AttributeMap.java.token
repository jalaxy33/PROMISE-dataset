package
org
.
apache
.
xerces
.
dom
;
import
java
.
io
.
*
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Enumeration
;
import
org
.
w3c
.
dom
.
*
;
import
org
.
apache
.
xerces
.
dom
.
events
.
MutationEventImpl
;
import
org
.
w3c
.
dom
.
events
.
*
;
public
class
AttributeMap
extends
NamedNodeMapImpl
{
protected
AttributeMap
(
ElementImpl
ownerNode
,
NamedNodeMapImpl
defaults
)
{
super
(
ownerNode
)
;
if
(
defaults
!=
null
)
{
cloneContent
(
defaults
)
;
if
(
nodes
!=
null
)
{
hasDefaults
(
true
)
;
}
}
}
public
Node
setNamedItem
(
Node
arg
)
throws
DOMException
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
if
(
arg
.
getOwnerDocument
(
)
!=
ownerNode
.
ownerDocument
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
WRONG_DOCUMENT_ERR
,
"DOM005 Wrong document"
)
;
}
NodeImpl
argn
=
(
NodeImpl
)
arg
;
if
(
argn
.
isOwned
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
INUSE_ATTRIBUTE_ERR
,
"DOM009 Attribute already in use"
)
;
}
argn
.
ownerNode
=
ownerNode
;
argn
.
isOwned
(
true
)
;
int
i
=
findNamePoint
(
arg
.
getNodeName
(
)
,
0
)
;
NodeImpl
previous
=
null
;
if
(
i
>=
0
)
{
previous
=
(
NodeImpl
)
nodes
.
elementAt
(
i
)
;
nodes
.
setElementAt
(
arg
,
i
)
;
previous
.
ownerNode
=
ownerNode
.
ownerDocument
(
)
;
previous
.
isOwned
(
false
)
;
previous
.
isSpecified
(
true
)
;
}
else
{
i
=
-
1
-
i
;
if
(
null
==
nodes
)
{
nodes
=
new
Vector
(
5
,
10
)
;
}
nodes
.
insertElementAt
(
arg
,
i
)
;
}
if
(
NodeImpl
.
MUTATIONEVENTS
&&
ownerNode
.
ownerDocument
(
)
.
mutationEvents
)
{
ownerNode
.
dispatchAggregateEvents
(
(
AttrImpl
)
arg
,
previous
==
null
?
null
:
previous
.
getNodeValue
(
)
)
;
}
return
previous
;
}
public
Node
setNamedItemNS
(
Node
arg
)
throws
DOMException
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
if
(
arg
.
getOwnerDocument
(
)
!=
ownerNode
.
ownerDocument
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
WRONG_DOCUMENT_ERR
,
"DOM005 Wrong document"
)
;
}
NodeImpl
argn
=
(
NodeImpl
)
arg
;
if
(
argn
.
isOwned
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
INUSE_ATTRIBUTE_ERR
,
"DOM009 Attribute already in use"
)
;
}
argn
.
ownerNode
=
ownerNode
;
argn
.
isOwned
(
true
)
;
int
i
=
findNamePoint
(
argn
.
getNamespaceURI
(
)
,
argn
.
getLocalName
(
)
)
;
NodeImpl
previous
=
null
;
if
(
i
>=
0
)
{
previous
=
(
NodeImpl
)
nodes
.
elementAt
(
i
)
;
nodes
.
setElementAt
(
arg
,
i
)
;
previous
.
ownerNode
=
ownerNode
.
ownerDocument
(
)
;
previous
.
isOwned
(
false
)
;
previous
.
isSpecified
(
true
)
;
}
else
{
i
=
findNamePoint
(
arg
.
getNodeName
(
)
,
0
)
;
if
(
i
>=
0
)
{
previous
=
(
NodeImpl
)
nodes
.
elementAt
(
i
)
;
nodes
.
insertElementAt
(
arg
,
i
)
;
}
else
{
i
=
-
1
-
i
;
if
(
null
==
nodes
)
{
nodes
=
new
Vector
(
5
,
10
)
;
}
nodes
.
insertElementAt
(
arg
,
i
)
;
}
}
if
(
NodeImpl
.
MUTATIONEVENTS
&&
ownerNode
.
ownerDocument
(
)
.
mutationEvents
)
{
ownerNode
.
dispatchAggregateEvents
(
(
AttrImpl
)
arg
,
previous
==
null
?
null
:
previous
.
getNodeValue
(
)
)
;
}
return
previous
;
}
public
Node
removeNamedItem
(
String
name
)
throws
DOMException
{
return
internalRemoveNamedItem
(
name
,
true
)
;
}
Node
safeRemoveNamedItem
(
String
name
)
{
return
internalRemoveNamedItem
(
name
,
false
)
;
}
final
protected
Node
internalRemoveNamedItem
(
String
name
,
boolean
raiseEx
)
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
int
i
=
findNamePoint
(
name
,
0
)
;
if
(
i
<
0
)
{
if
(
raiseEx
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NOT_FOUND_ERR
,
"DOM008 Not found"
)
;
}
else
{
return
null
;
}
}
NodeImpl
n
=
(
NodeImpl
)
nodes
.
elementAt
(
i
)
;
if
(
hasDefaults
(
)
)
{
NamedNodeMapImpl
defaults
=
(
(
ElementImpl
)
ownerNode
)
.
getDefaultAttributes
(
)
;
Node
d
;
if
(
defaults
!=
null
&&
(
d
=
defaults
.
getNamedItem
(
name
)
)
!=
null
&&
findNamePoint
(
name
,
i
+
1
)
<
0
)
{
NodeImpl
clone
=
(
NodeImpl
)
d
.
cloneNode
(
true
)
;
clone
.
ownerNode
=
ownerNode
;
clone
.
isOwned
(
true
)
;
clone
.
isSpecified
(
false
)
;
nodes
.
setElementAt
(
clone
,
i
)
;
}
else
{
nodes
.
removeElementAt
(
i
)
;
}
}
else
{
nodes
.
removeElementAt
(
i
)
;
}
n
.
ownerNode
=
ownerNode
.
ownerDocument
(
)
;
n
.
isOwned
(
false
)
;
n
.
isSpecified
(
true
)
;
return
n
;
}
public
Node
removeNamedItemNS
(
String
namespaceURI
,
String
name
)
throws
DOMException
{
return
internalRemoveNamedItemNS
(
namespaceURI
,
name
,
true
)
;
}
Node
safeRemoveNamedItemNS
(
String
namespaceURI
,
String
name
)
{
return
internalRemoveNamedItemNS
(
namespaceURI
,
name
,
false
)
;
}
final
protected
Node
internalRemoveNamedItemNS
(
String
namespaceURI
,
String
name
,
boolean
raiseEx
)
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
int
i
=
findNamePoint
(
namespaceURI
,
name
)
;
if
(
i
<
0
)
{
if
(
raiseEx
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NOT_FOUND_ERR
,
"DOM008 Not found"
)
;
}
else
{
return
null
;
}
}
LCount
lc
=
null
;
String
oldvalue
=
""
;
AttrImpl
enclosingAttribute
=
null
;
if
(
NodeImpl
.
MUTATIONEVENTS
&&
ownerNode
.
ownerDocument
(
)
.
mutationEvents
)
{
lc
=
LCount
.
lookup
(
MutationEventImpl
.
DOM_ATTR_MODIFIED
)
;
if
(
lc
.
captures
+
lc
.
bubbles
+
lc
.
defaults
>
0
)
{
enclosingAttribute
=
(
AttrImpl
)
(
nodes
.
elementAt
(
i
)
)
;
oldvalue
=
enclosingAttribute
.
getNodeValue
(
)
;
}
}
NodeImpl
n
=
(
NodeImpl
)
nodes
.
elementAt
(
i
)
;
String
nodeName
=
n
.
getNodeName
(
)
;
if
(
hasDefaults
(
)
)
{
NamedNodeMapImpl
defaults
=
(
(
ElementImpl
)
ownerNode
)
.
getDefaultAttributes
(
)
;
Node
d
;
if
(
defaults
!=
null
&&
(
d
=
defaults
.
getNamedItem
(
nodeName
)
)
!=
null
)
{
int
j
=
findNamePoint
(
nodeName
,
0
)
;
if
(
j
>=
0
&&
findNamePoint
(
nodeName
,
j
+
1
)
<
0
)
{
NodeImpl
clone
=
(
NodeImpl
)
d
.
cloneNode
(
true
)
;
clone
.
ownerNode
=
ownerNode
;
clone
.
isOwned
(
true
)
;
clone
.
isSpecified
(
false
)
;
nodes
.
setElementAt
(
clone
,
i
)
;
}
else
{
nodes
.
removeElementAt
(
i
)
;
}
}
else
{
nodes
.
removeElementAt
(
i
)
;
}
}
else
{
nodes
.
removeElementAt
(
i
)
;
}
n
.
ownerNode
=
ownerNode
.
ownerDocument
(
)
;
n
.
isOwned
(
false
)
;
n
.
isSpecified
(
true
)
;
if
(
NodeImpl
.
MUTATIONEVENTS
&&
ownerNode
.
ownerDocument
(
)
.
mutationEvents
)
{
if
(
lc
.
captures
+
lc
.
bubbles
+
lc
.
defaults
>
0
)
{
MutationEvent
me
=
new
MutationEventImpl
(
)
;
me
.
initMutationEvent
(
MutationEventImpl
.
DOM_ATTR_MODIFIED
,
true
,
false
,
null
,
n
.
getNodeValue
(
)
,
(
(
ElementImpl
)
ownerNode
)
.
getAttribute
(
name
)
,
name
)
;
ownerNode
.
dispatchEvent
(
me
)
;
}
ownerNode
.
dispatchAggregateEvents
(
null
,
null
)
;
}
return
n
;
}
public
NamedNodeMapImpl
cloneMap
(
NodeImpl
ownerNode
)
{
AttributeMap
newmap
=
new
AttributeMap
(
(
ElementImpl
)
ownerNode
,
null
)
;
newmap
.
hasDefaults
(
hasDefaults
(
)
)
;
newmap
.
cloneContent
(
this
)
;
return
newmap
;
}
}
