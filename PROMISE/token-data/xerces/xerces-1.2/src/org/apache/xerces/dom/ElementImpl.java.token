package
org
.
apache
.
xerces
.
dom
;
import
java
.
io
.
*
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Vector
;
import
org
.
w3c
.
dom
.
*
;
public
class
ElementImpl
extends
ChildAndParentNode
implements
Element
{
static
final
long
serialVersionUID
=
3717253516652722278L
;
protected
String
name
;
protected
AttributeMap
attributes
;
public
ElementImpl
(
DocumentImpl
ownerDoc
,
String
name
)
{
super
(
ownerDoc
)
;
this
.
name
=
name
;
needsSyncData
(
true
)
;
}
protected
ElementImpl
(
)
{
}
public
short
getNodeType
(
)
{
return
Node
.
ELEMENT_NODE
;
}
public
String
getNodeName
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
name
;
}
public
NamedNodeMap
getAttributes
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
attributes
==
null
)
{
attributes
=
new
AttributeMap
(
this
,
null
)
;
}
return
attributes
;
}
public
Node
cloneNode
(
boolean
deep
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
ElementImpl
newnode
=
(
ElementImpl
)
super
.
cloneNode
(
deep
)
;
if
(
attributes
!=
null
)
{
newnode
.
attributes
=
(
AttributeMap
)
attributes
.
cloneMap
(
newnode
)
;
}
return
newnode
;
}
void
setOwnerDocument
(
DocumentImpl
doc
)
{
super
.
setOwnerDocument
(
doc
)
;
if
(
attributes
!=
null
)
{
attributes
.
setOwnerDocument
(
doc
)
;
}
}
public
String
getAttribute
(
String
name
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
attributes
==
null
)
{
return
""
;
}
Attr
attr
=
(
Attr
)
(
attributes
.
getNamedItem
(
name
)
)
;
return
(
attr
==
null
)
?
""
:
attr
.
getValue
(
)
;
}
public
Attr
getAttributeNode
(
String
name
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
attributes
==
null
)
{
return
null
;
}
return
(
Attr
)
attributes
.
getNamedItem
(
name
)
;
}
public
NodeList
getElementsByTagName
(
String
tagname
)
{
return
new
DeepNodeListImpl
(
this
,
tagname
)
;
}
public
String
getTagName
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
name
;
}
public
void
normalize
(
)
{
Node
kid
,
next
;
for
(
kid
=
getFirstChild
(
)
;
kid
!=
null
;
kid
=
next
)
{
next
=
kid
.
getNextSibling
(
)
;
if
(
next
!=
null
&&
kid
.
getNodeType
(
)
==
Node
.
TEXT_NODE
&&
next
.
getNodeType
(
)
==
Node
.
TEXT_NODE
)
{
(
(
Text
)
kid
)
.
appendData
(
next
.
getNodeValue
(
)
)
;
removeChild
(
next
)
;
next
=
kid
;
}
else
if
(
kid
.
getNodeType
(
)
==
Node
.
ELEMENT_NODE
)
{
(
(
Element
)
kid
)
.
normalize
(
)
;
}
}
}
public
void
removeAttribute
(
String
name
)
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
attributes
==
null
)
{
return
;
}
attributes
.
safeRemoveNamedItem
(
name
)
;
}
public
Attr
removeAttributeNode
(
Attr
oldAttr
)
throws
DOMException
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
attributes
==
null
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NOT_FOUND_ERR
,
"DOM008 Not found"
)
;
}
return
(
Attr
)
attributes
.
removeNamedItem
(
oldAttr
.
getName
(
)
)
;
}
public
void
setAttribute
(
String
name
,
String
value
)
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
Attr
newAttr
=
getAttributeNode
(
name
)
;
if
(
newAttr
==
null
)
{
newAttr
=
getOwnerDocument
(
)
.
createAttribute
(
name
)
;
if
(
attributes
==
null
)
{
attributes
=
new
AttributeMap
(
this
,
null
)
;
}
attributes
.
setNamedItem
(
newAttr
)
;
}
newAttr
.
setNodeValue
(
value
)
;
}
public
Attr
setAttributeNode
(
Attr
newAttr
)
throws
DOMException
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
ownerDocument
.
errorChecking
&&
newAttr
.
getOwnerDocument
(
)
!=
ownerDocument
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
WRONG_DOCUMENT_ERR
,
"DOM005 Wrong document"
)
;
}
if
(
attributes
==
null
)
{
attributes
=
new
AttributeMap
(
this
,
null
)
;
}
return
(
Attr
)
attributes
.
setNamedItem
(
newAttr
)
;
}
public
String
getAttributeNS
(
String
namespaceURI
,
String
localName
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
attributes
==
null
)
{
return
""
;
}
Attr
attr
=
(
Attr
)
(
attributes
.
getNamedItemNS
(
namespaceURI
,
localName
)
)
;
return
(
attr
==
null
)
?
null
:
attr
.
getValue
(
)
;
}
public
void
setAttributeNS
(
String
namespaceURI
,
String
localName
,
String
value
)
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
Attr
newAttr
=
getAttributeNodeNS
(
namespaceURI
,
localName
)
;
if
(
newAttr
==
null
)
{
newAttr
=
getOwnerDocument
(
)
.
createAttributeNS
(
namespaceURI
,
localName
)
;
if
(
attributes
==
null
)
{
attributes
=
new
AttributeMap
(
this
,
null
)
;
}
attributes
.
setNamedItemNS
(
newAttr
)
;
}
newAttr
.
setNodeValue
(
value
)
;
}
public
void
removeAttributeNS
(
String
namespaceURI
,
String
localName
)
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
attributes
==
null
)
{
return
;
}
attributes
.
safeRemoveNamedItemNS
(
namespaceURI
,
localName
)
;
}
public
Attr
getAttributeNodeNS
(
String
namespaceURI
,
String
localName
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
attributes
==
null
)
{
return
null
;
}
return
(
Attr
)
attributes
.
getNamedItemNS
(
namespaceURI
,
localName
)
;
}
public
Attr
setAttributeNodeNS
(
Attr
newAttr
)
throws
DOMException
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
if
(
ownerDocument
.
errorChecking
&&
newAttr
.
getOwnerDocument
(
)
!=
ownerDocument
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
WRONG_DOCUMENT_ERR
,
"DOM005 Wrong document"
)
;
}
if
(
attributes
==
null
)
{
attributes
=
new
AttributeMap
(
this
,
null
)
;
}
return
(
Attr
)
attributes
.
setNamedItemNS
(
newAttr
)
;
}
public
boolean
hasAttributes
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
(
attributes
!=
null
&&
attributes
.
getLength
(
)
!=
0
)
;
}
public
boolean
hasAttribute
(
String
name
)
{
return
getAttributeNode
(
name
)
!=
null
;
}
public
boolean
hasAttributeNS
(
String
namespaceURI
,
String
localName
)
{
return
getAttributeNodeNS
(
namespaceURI
,
localName
)
!=
null
;
}
public
NodeList
getElementsByTagNameNS
(
String
namespaceURI
,
String
localName
)
{
return
new
DeepNodeListImpl
(
this
,
namespaceURI
,
localName
)
;
}
public
void
setReadOnly
(
boolean
readOnly
,
boolean
deep
)
{
super
.
setReadOnly
(
readOnly
,
deep
)
;
if
(
attributes
!=
null
)
{
attributes
.
setReadOnly
(
readOnly
,
true
)
;
}
}
protected
void
synchronizeData
(
)
{
needsSyncData
(
false
)
;
setupDefaultAttributes
(
)
;
}
protected
void
setupDefaultAttributes
(
)
{
NamedNodeMapImpl
defaults
=
getDefaultAttributes
(
)
;
if
(
defaults
!=
null
)
{
attributes
=
new
AttributeMap
(
this
,
defaults
)
;
}
}
protected
NamedNodeMapImpl
getDefaultAttributes
(
)
{
DocumentTypeImpl
doctype
=
(
DocumentTypeImpl
)
ownerDocument
.
getDoctype
(
)
;
if
(
doctype
==
null
)
{
return
null
;
}
ElementDefinitionImpl
eldef
=
(
ElementDefinitionImpl
)
doctype
.
getElements
(
)
.
getNamedItem
(
getNodeName
(
)
)
;
if
(
eldef
==
null
)
{
return
null
;
}
return
(
NamedNodeMapImpl
)
eldef
.
getAttributes
(
)
;
}
}
