package
org
.
apache
.
xerces
.
dom
;
import
org
.
w3c
.
dom
.
*
;
import
org
.
apache
.
xerces
.
dom
.
events
.
MutationEventImpl
;
public
class
AttrImpl
extends
ParentNode
implements
Attr
{
static
final
long
serialVersionUID
=
7277707688218972102L
;
protected
String
name
;
protected
AttrImpl
(
DocumentImpl
ownerDocument
,
String
name
)
{
super
(
ownerDocument
)
;
this
.
name
=
name
;
isSpecified
(
true
)
;
}
protected
AttrImpl
(
)
{
}
public
Node
cloneNode
(
boolean
deep
)
{
AttrImpl
clone
=
(
AttrImpl
)
super
.
cloneNode
(
deep
)
;
clone
.
isSpecified
(
true
)
;
return
clone
;
}
public
short
getNodeType
(
)
{
return
Node
.
ATTRIBUTE_NODE
;
}
public
String
getNodeName
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
name
;
}
public
void
setNodeValue
(
String
value
)
throws
DOMException
{
setValue
(
value
)
;
}
public
String
getNodeValue
(
)
{
return
getValue
(
)
;
}
public
String
getName
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
name
;
}
public
void
setValue
(
String
value
)
{
if
(
isReadOnly
(
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"DOM001 Modification not allowed"
)
;
}
LCount
lc
=
null
;
String
oldvalue
=
""
;
if
(
MUTATIONEVENTS
&&
ownerDocument
.
mutationEvents
)
{
lc
=
LCount
.
lookup
(
MutationEventImpl
.
DOM_ATTR_MODIFIED
)
;
if
(
lc
.
captures
+
lc
.
bubbles
+
lc
.
defaults
>
0
&&
ownerNode
!=
null
)
{
oldvalue
=
getValue
(
)
;
}
}
if
(
MUTATIONEVENTS
&&
ownerDocument
.
mutationEvents
)
{
if
(
needsSyncChildren
(
)
)
{
synchronizeChildren
(
)
;
}
while
(
firstChild
!=
null
)
internalRemoveChild
(
firstChild
,
MUTATION_LOCAL
)
;
}
else
{
if
(
firstChild
!=
null
)
{
firstChild
.
previousSibling
=
null
;
firstChild
.
isFirstChild
(
false
)
;
firstChild
=
null
;
}
needsSyncChildren
(
false
)
;
}
isSpecified
(
true
)
;
if
(
value
!=
null
)
{
internalInsertBefore
(
ownerDocument
.
createTextNode
(
value
)
,
null
,
MUTATION_LOCAL
)
;
}
changed
(
)
;
if
(
MUTATIONEVENTS
&&
ownerDocument
.
mutationEvents
)
{
dispatchAggregateEvents
(
this
,
oldvalue
)
;
}
}
public
String
getValue
(
)
{
if
(
needsSyncChildren
(
)
)
{
synchronizeChildren
(
)
;
}
if
(
firstChild
==
null
)
{
return
""
;
}
ChildNode
node
=
firstChild
.
nextSibling
;
if
(
node
==
null
)
{
return
firstChild
.
getNodeValue
(
)
;
}
StringBuffer
value
=
new
StringBuffer
(
firstChild
.
getNodeValue
(
)
)
;
while
(
node
!=
null
)
{
value
.
append
(
node
.
getNodeValue
(
)
)
;
node
=
node
.
nextSibling
;
}
return
value
.
toString
(
)
;
}
public
boolean
getSpecified
(
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
return
isSpecified
(
)
;
}
public
Element
getElement
(
)
{
return
(
Element
)
(
isOwned
(
)
?
ownerNode
:
null
)
;
}
public
Element
getOwnerElement
(
)
{
return
(
Element
)
(
isOwned
(
)
?
ownerNode
:
null
)
;
}
public
void
normalize
(
)
{
Node
kid
,
next
;
for
(
kid
=
firstChild
;
kid
!=
null
;
kid
=
next
)
{
next
=
kid
.
getNextSibling
(
)
;
if
(
next
!=
null
&&
kid
.
getNodeType
(
)
==
Node
.
TEXT_NODE
&&
next
.
getNodeType
(
)
==
Node
.
TEXT_NODE
)
{
(
(
Text
)
kid
)
.
appendData
(
next
.
getNodeValue
(
)
)
;
removeChild
(
next
)
;
next
=
kid
;
}
}
}
public
void
setSpecified
(
boolean
arg
)
{
if
(
needsSyncData
(
)
)
{
synchronizeData
(
)
;
}
isSpecified
(
arg
)
;
}
public
String
toString
(
)
{
return
getName
(
)
+
"="
+
"\""
+
getValue
(
)
+
"\""
;
}
}
