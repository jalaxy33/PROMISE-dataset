package
javax
.
xml
.
parsers
;
public
abstract
class
DocumentBuilderFactory
{
private
boolean
namespaces
=
false
;
private
boolean
validation
=
false
;
private
static
String
property
=
"javax.xml.parsers.DocumentBuilderFactory"
;
private
static
String
factory
=
"org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"
;
protected
DocumentBuilderFactory
(
)
{
super
(
)
;
}
public
static
DocumentBuilderFactory
newInstance
(
)
{
String
n
=
factory
;
try
{
n
=
System
.
getProperty
(
property
,
factory
)
;
}
catch
(
SecurityException
e
)
{
n
=
factory
;
}
try
{
return
(
DocumentBuilderFactory
)
Class
.
forName
(
n
)
.
newInstance
(
)
;
}
catch
(
ClassNotFoundException
e
)
{
throw
new
FactoryConfigurationError
(
"Cannot load class "
+
"DocumentBuilderFactory class \""
+
n
+
"\""
)
;
}
catch
(
InstantiationException
e
)
{
throw
new
FactoryConfigurationError
(
"Cannot instantiate the "
+
"specified DocumentBuilderFactory class \""
+
n
+
"\""
)
;
}
catch
(
IllegalAccessException
e
)
{
throw
new
FactoryConfigurationError
(
"Cannot access the specified "
+
"DocumentBuilderFactory class \""
+
n
+
"\""
)
;
}
catch
(
ClassCastException
e
)
{
throw
new
FactoryConfigurationError
(
"The specified class \""
+
n
+
"\" is not instance of \""
+
"javax.xml.parsers.DocumentBuilderFactory\""
)
;
}
}
public
abstract
DocumentBuilder
newDocumentBuilder
(
)
throws
ParserConfigurationException
;
public
void
setNamespaceAware
(
boolean
aware
)
{
this
.
namespaces
=
aware
;
}
public
void
setValidating
(
boolean
validating
)
{
this
.
validation
=
validating
;
}
public
boolean
isNamespaceAware
(
)
{
return
(
this
.
namespaces
)
;
}
public
boolean
isValidating
(
)
{
return
(
this
.
validation
)
;
}
}
