package
javax
.
xml
.
parsers
;
import
java
.
io
.
File
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
IOException
;
import
org
.
xml
.
sax
.
EntityResolver
;
import
org
.
xml
.
sax
.
ErrorHandler
;
import
org
.
xml
.
sax
.
InputSource
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
w3c
.
dom
.
Document
;
public
abstract
class
DocumentBuilder
{
protected
DocumentBuilder
(
)
{
}
public
Document
parse
(
InputStream
is
)
throws
SAXException
,
IOException
{
if
(
is
==
null
)
{
throw
new
IllegalArgumentException
(
"InputStream cannot be null"
)
;
}
InputSource
in
=
new
InputSource
(
is
)
;
return
parse
(
in
)
;
}
public
Document
parse
(
InputStream
is
,
String
systemId
)
throws
SAXException
,
IOException
{
if
(
is
==
null
)
{
throw
new
IllegalArgumentException
(
"InputStream cannot be null"
)
;
}
InputSource
in
=
new
InputSource
(
is
)
;
in
.
setSystemId
(
systemId
)
;
return
parse
(
in
)
;
}
public
Document
parse
(
String
uri
)
throws
SAXException
,
IOException
{
if
(
uri
==
null
)
{
throw
new
IllegalArgumentException
(
"URI cannot be null"
)
;
}
InputSource
in
=
new
InputSource
(
uri
)
;
return
parse
(
in
)
;
}
public
Document
parse
(
File
f
)
throws
SAXException
,
IOException
{
if
(
f
==
null
)
{
throw
new
IllegalArgumentException
(
"File cannot be null"
)
;
}
String
uri
=
"file:"
+
f
.
getAbsolutePath
(
)
;
if
(
File
.
separatorChar
==
'\\'
)
{
uri
=
uri
.
replace
(
'\\'
,
'/'
)
;
}
InputSource
in
=
new
InputSource
(
uri
)
;
return
parse
(
in
)
;
}
public
abstract
Document
parse
(
InputSource
is
)
throws
SAXException
,
IOException
;
public
abstract
boolean
isNamespaceAware
(
)
;
public
abstract
boolean
isValidating
(
)
;
public
abstract
void
setEntityResolver
(
org
.
xml
.
sax
.
EntityResolver
er
)
;
public
abstract
void
setErrorHandler
(
org
.
xml
.
sax
.
ErrorHandler
eh
)
;
public
abstract
Document
newDocument
(
)
;
}
