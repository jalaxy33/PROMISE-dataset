package
javax
.
xml
.
parsers
;
import
org
.
xml
.
sax
.
Parser
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
SAXNotRecognizedException
;
import
org
.
xml
.
sax
.
SAXNotSupportedException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
util
.
Locale
;
import
java
.
util
.
Properties
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
InputStreamReader
;
public
abstract
class
SAXParserFactory
{
private
static
final
String
defaultPropName
=
"javax.xml.parsers.SAXParserFactory"
;
private
boolean
validating
=
false
;
private
boolean
namespaceAware
=
false
;
protected
SAXParserFactory
(
)
{
}
public
static
SAXParserFactory
newInstance
(
)
{
String
factoryImplName
=
findFactory
(
defaultPropName
,
"org.apache.xerces.jaxp.SAXParserFactoryImpl"
)
;
if
(
factoryImplName
==
null
)
{
throw
new
FactoryConfigurationError
(
"No default implementation found"
)
;
}
SAXParserFactory
factoryImpl
=
null
;
try
{
Class
clazz
=
Class
.
forName
(
factoryImplName
)
;
factoryImpl
=
(
SAXParserFactory
)
clazz
.
newInstance
(
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
throw
new
FactoryConfigurationError
(
cnfe
)
;
}
catch
(
IllegalAccessException
iae
)
{
throw
new
FactoryConfigurationError
(
iae
)
;
}
catch
(
InstantiationException
ie
)
{
throw
new
FactoryConfigurationError
(
ie
)
;
}
return
factoryImpl
;
}
public
abstract
SAXParser
newSAXParser
(
)
throws
ParserConfigurationException
,
SAXException
;
public
void
setNamespaceAware
(
boolean
awareness
)
{
this
.
namespaceAware
=
awareness
;
}
public
void
setValidating
(
boolean
validating
)
{
this
.
validating
=
validating
;
}
public
boolean
isNamespaceAware
(
)
{
return
namespaceAware
;
}
public
boolean
isValidating
(
)
{
return
validating
;
}
public
abstract
void
setFeature
(
String
name
,
boolean
value
)
throws
ParserConfigurationException
,
SAXNotRecognizedException
,
SAXNotSupportedException
;
public
abstract
boolean
getFeature
(
String
name
)
throws
ParserConfigurationException
,
SAXNotRecognizedException
,
SAXNotSupportedException
;
private
static
String
foundFactory
=
null
;
private
static
final
boolean
debug
=
System
.
getProperty
(
"jaxp.debug"
)
!=
null
;
private
static
String
findFactory
(
String
factoryId
,
String
defaultFactory
)
{
try
{
String
systemProp
=
System
.
getProperty
(
factoryId
)
;
if
(
systemProp
!=
null
)
{
if
(
debug
)
System
.
err
.
println
(
"JAXP: found system property"
+
systemProp
)
;
return
systemProp
;
}
}
catch
(
SecurityException
se
)
{
}
if
(
foundFactory
!=
null
)
return
foundFactory
;
try
{
String
javah
=
System
.
getProperty
(
"java.home"
)
;
String
configFile
=
javah
+
File
.
separator
+
"lib"
+
File
.
separator
+
"jaxp.properties"
;
File
f
=
new
File
(
configFile
)
;
if
(
f
.
exists
(
)
)
{
Properties
props
=
new
Properties
(
)
;
props
.
load
(
new
FileInputStream
(
f
)
)
;
foundFactory
=
props
.
getProperty
(
factoryId
)
;
if
(
debug
)
System
.
err
.
println
(
"JAXP: found java.home property "
+
foundFactory
)
;
if
(
foundFactory
!=
null
)
return
foundFactory
;
}
}
catch
(
Exception
ex
)
{
if
(
debug
)
ex
.
printStackTrace
(
)
;
}
String
serviceId
=
"META-INF/services/"
+
factoryId
;
try
{
ClassLoader
cl
=
SAXParserFactory
.
class
.
getClassLoader
(
)
;
InputStream
is
=
null
;
if
(
cl
==
null
)
{
is
=
ClassLoader
.
getSystemResourceAsStream
(
serviceId
)
;
}
else
{
is
=
cl
.
getResourceAsStream
(
serviceId
)
;
}
if
(
is
!=
null
)
{
if
(
debug
)
System
.
err
.
println
(
"JAXP: found  "
+
serviceId
)
;
BufferedReader
rd
=
new
BufferedReader
(
new
InputStreamReader
(
is
)
)
;
foundFactory
=
rd
.
readLine
(
)
;
rd
.
close
(
)
;
if
(
debug
)
System
.
err
.
println
(
"JAXP: loaded from services: "
+
foundFactory
)
;
if
(
foundFactory
!=
null
&&
!
""
.
equals
(
foundFactory
)
)
{
return
foundFactory
;
}
}
}
catch
(
Exception
ex
)
{
if
(
debug
)
ex
.
printStackTrace
(
)
;
}
return
defaultFactory
;
}
}
