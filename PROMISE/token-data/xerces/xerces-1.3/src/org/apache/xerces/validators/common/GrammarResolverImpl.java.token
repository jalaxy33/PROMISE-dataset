package
org
.
apache
.
xerces
.
validators
.
common
;
import
java
.
util
.
*
;
import
org
.
apache
.
xerces
.
validators
.
common
.
Grammar
;
import
org
.
apache
.
xerces
.
validators
.
common
.
GrammarResolver
;
import
org
.
apache
.
xerces
.
validators
.
datatype
.
DatatypeValidatorFactory
;
import
org
.
apache
.
xerces
.
validators
.
datatype
.
DatatypeValidatorFactoryImpl
;
public
class
GrammarResolverImpl
implements
GrammarResolver
{
private
Hashtable
fGrammarRegistry
=
new
Hashtable
(
)
;
private
DatatypeValidatorFactoryImpl
fDataTypeReg
;
public
GrammarResolverImpl
(
)
{
}
public
Grammar
getGrammar
(
String
nameSpaceKey
)
{
return
(
Grammar
)
(
fGrammarRegistry
.
get
(
nameSpaceKey
)
)
;
}
public
DatatypeValidatorFactory
getDatatypeRegistry
(
)
{
if
(
fDataTypeReg
==
null
)
{
fDataTypeReg
=
new
DatatypeValidatorFactoryImpl
(
)
;
}
return
fDataTypeReg
;
}
public
String
[
]
getNSKeysInPool
(
)
{
int
numberOfNSKeysInPool
=
fGrammarRegistry
.
size
(
)
;
String
[
]
NSArray
=
new
String
[
numberOfNSKeysInPool
]
;
Enumeration
enumOfKeys
=
nameSpaceKeys
(
)
;
for
(
int
i
=
0
;
i
<
numberOfNSKeysInPool
;
i
++
)
{
NSArray
[
i
]
=
(
String
)
(
enumOfKeys
.
nextElement
(
)
)
;
}
return
NSArray
;
}
public
void
putGrammar
(
String
nameSpaceKey
,
Grammar
grammar
)
{
fGrammarRegistry
.
put
(
nameSpaceKey
,
grammar
)
;
}
public
int
size
(
)
{
return
fGrammarRegistry
.
size
(
)
;
}
public
Enumeration
nameSpaceKeys
(
)
{
return
fGrammarRegistry
.
keys
(
)
;
}
public
Grammar
removeGrammar
(
String
nameSpaceKey
)
{
if
(
containsNameSpace
(
nameSpaceKey
)
==
true
)
fGrammarRegistry
.
remove
(
nameSpaceKey
)
;
return
null
;
}
public
boolean
contains
(
Grammar
grammar
)
{
return
fGrammarRegistry
.
contains
(
grammar
)
;
}
public
boolean
containsNameSpace
(
String
nameSpaceKey
)
{
return
fGrammarRegistry
.
containsKey
(
nameSpaceKey
)
;
}
public
void
clearGrammarResolver
(
)
{
fGrammarRegistry
.
clear
(
)
;
if
(
fDataTypeReg
!=
null
)
{
fDataTypeReg
.
resetRegistry
(
)
;
}
}
}
