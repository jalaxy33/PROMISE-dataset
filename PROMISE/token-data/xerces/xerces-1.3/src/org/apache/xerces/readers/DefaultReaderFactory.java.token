package
org
.
apache
.
xerces
.
readers
;
import
org
.
apache
.
xerces
.
framework
.
XMLErrorReporter
;
import
org
.
apache
.
xerces
.
utils
.
ChunkyByteArray
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
xml
.
sax
.
InputSource
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
Reader
;
import
java
.
net
.
URL
;
import
java
.
util
.
Stack
;
public
class
DefaultReaderFactory
implements
XMLEntityReaderFactory
{
private
static
final
boolean
USE_CHAR_READER_FOR_UTF8
=
false
;
private
static
final
boolean
USE_BYTE_READER_FOR_UTF8
=
true
;
private
boolean
fSendCharDataAsCharArray
=
false
;
private
boolean
fAllowJavaEncodingName
=
false
;
private
Stack
fRecognizers
=
null
;
public
DefaultReaderFactory
(
)
{
}
public
void
addRecognizer
(
XMLDeclRecognizer
recognizer
)
{
if
(
fRecognizers
==
null
)
{
fRecognizers
=
new
Stack
(
)
;
XMLDeclRecognizer
.
registerDefaultRecognizers
(
fRecognizers
)
;
}
fRecognizers
.
push
(
recognizer
)
;
}
public
void
setSendCharDataAsCharArray
(
boolean
flag
)
{
fSendCharDataAsCharArray
=
flag
;
}
public
void
setAllowJavaEncodingName
(
boolean
flag
)
{
fAllowJavaEncodingName
=
flag
;
}
public
boolean
getAllowJavaEncodingName
(
)
{
return
fAllowJavaEncodingName
;
}
public
XMLEntityHandler
.
EntityReader
createReader
(
XMLEntityHandler
entityHandler
,
XMLErrorReporter
errorReporter
,
InputSource
source
,
String
systemId
,
boolean
xmlDecl
,
StringPool
stringPool
)
throws
Exception
{
if
(
source
.
getCharacterStream
(
)
!=
null
)
{
return
createCharReader
(
entityHandler
,
errorReporter
,
fSendCharDataAsCharArray
,
source
.
getCharacterStream
(
)
,
stringPool
)
;
}
if
(
source
.
getEncoding
(
)
!=
null
&&
source
.
getByteStream
(
)
!=
null
)
{
java
.
io
.
Reader
reader
=
new
InputStreamReader
(
source
.
getByteStream
(
)
,
source
.
getEncoding
(
)
)
;
return
createCharReader
(
entityHandler
,
errorReporter
,
fSendCharDataAsCharArray
,
reader
,
stringPool
)
;
}
InputStream
is
=
source
.
getByteStream
(
)
;
if
(
is
==
null
)
{
URL
url
=
new
URL
(
systemId
)
;
is
=
url
.
openStream
(
)
;
}
ChunkyByteArray
data
=
new
ChunkyByteArray
(
is
)
;
if
(
fRecognizers
==
null
)
{
fRecognizers
=
new
Stack
(
)
;
XMLDeclRecognizer
.
registerDefaultRecognizers
(
fRecognizers
)
;
}
for
(
int
i
=
fRecognizers
.
size
(
)
-
1
;
i
>=
0
;
i
--
)
{
XMLDeclRecognizer
recognizer
=
(
XMLDeclRecognizer
)
fRecognizers
.
elementAt
(
i
)
;
XMLEntityHandler
.
EntityReader
reader
=
recognizer
.
recognize
(
this
,
entityHandler
,
errorReporter
,
fSendCharDataAsCharArray
,
stringPool
,
data
,
xmlDecl
,
fAllowJavaEncodingName
)
;
if
(
reader
!=
null
)
{
return
reader
;
}
}
return
createUTF8Reader
(
entityHandler
,
errorReporter
,
fSendCharDataAsCharArray
,
data
,
stringPool
)
;
}
public
XMLEntityHandler
.
EntityReader
createCharReader
(
XMLEntityHandler
entityHandler
,
XMLErrorReporter
errorReporter
,
boolean
sendCharDataAsCharArray
,
Reader
reader
,
StringPool
stringPool
)
throws
Exception
{
return
new
CharReader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
reader
,
stringPool
)
;
}
public
XMLEntityHandler
.
EntityReader
createUTF8Reader
(
XMLEntityHandler
entityHandler
,
XMLErrorReporter
errorReporter
,
boolean
sendCharDataAsCharArray
,
InputStream
data
,
StringPool
stringPool
)
throws
Exception
{
XMLEntityHandler
.
EntityReader
reader
;
if
(
USE_CHAR_READER_FOR_UTF8
)
{
reader
=
new
CharReader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
new
InputStreamReader
(
data
,
"UTF8"
)
,
stringPool
)
;
}
else
if
(
USE_BYTE_READER_FOR_UTF8
)
{
reader
=
new
UTF8Reader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
data
,
stringPool
)
;
}
else
{
reader
=
new
UTF8CharReader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
data
,
stringPool
)
;
}
return
reader
;
}
public
XMLEntityHandler
.
EntityReader
createStringReader
(
XMLEntityHandler
entityHandler
,
XMLErrorReporter
errorReporter
,
boolean
sendCharDataAsCharArray
,
int
lineNumber
,
int
columnNumber
,
int
stringHandle
,
StringPool
stringPool
,
boolean
addEnclosingSpaces
)
throws
Exception
{
return
StringReader
.
createStringReader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
lineNumber
,
columnNumber
,
stringHandle
,
stringPool
,
addEnclosingSpaces
)
;
}
}
