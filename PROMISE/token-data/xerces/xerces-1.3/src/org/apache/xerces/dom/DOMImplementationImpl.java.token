package
org
.
apache
.
xerces
.
dom
;
import
org
.
w3c
.
dom
.
*
;
public
class
DOMImplementationImpl
implements
DOMImplementation
{
static
DOMImplementationImpl
singleton
=
new
DOMImplementationImpl
(
)
;
public
boolean
hasFeature
(
String
feature
,
String
version
)
{
boolean
anyVersion
=
version
==
null
||
version
.
length
(
)
==
0
;
return
(
feature
.
equalsIgnoreCase
(
"Core"
)
&&
(
anyVersion
||
version
.
equals
(
"1.0"
)
||
version
.
equals
(
"2.0"
)
)
)
||
(
feature
.
equalsIgnoreCase
(
"XML"
)
&&
(
anyVersion
||
version
.
equals
(
"1.0"
)
||
version
.
equals
(
"2.0"
)
)
)
||
(
feature
.
equalsIgnoreCase
(
"Events"
)
&&
(
anyVersion
||
version
.
equals
(
"2.0"
)
)
)
||
(
feature
.
equalsIgnoreCase
(
"MutationEvents"
)
&&
(
anyVersion
||
version
.
equals
(
"2.0"
)
)
)
||
(
feature
.
equalsIgnoreCase
(
"Traversal"
)
&&
(
anyVersion
||
version
.
equals
(
"2.0"
)
)
)
;
}
public
static
DOMImplementation
getDOMImplementation
(
)
{
return
singleton
;
}
public
DocumentType
createDocumentType
(
String
qualifiedName
,
String
publicID
,
String
systemID
)
{
if
(
!
DocumentImpl
.
isXMLName
(
qualifiedName
)
)
{
throw
new
DOMException
(
DOMException
.
INVALID_CHARACTER_ERR
,
"DOM002 Illegal character"
)
;
}
int
index
=
qualifiedName
.
indexOf
(
':'
)
;
if
(
index
==
0
||
index
==
qualifiedName
.
length
(
)
-
1
)
{
throw
new
DOMException
(
DOMException
.
NAMESPACE_ERR
,
"DOM003 Namespace error"
)
;
}
return
new
DocumentTypeImpl
(
null
,
qualifiedName
,
publicID
,
systemID
)
;
}
public
Document
createDocument
(
String
namespaceURI
,
String
qualifiedName
,
DocumentType
doctype
)
throws
DOMException
{
if
(
doctype
!=
null
&&
doctype
.
getOwnerDocument
(
)
!=
null
)
{
throw
new
DOMException
(
DOMException
.
WRONG_DOCUMENT_ERR
,
"DOM005 Wrong document"
)
;
}
DocumentImpl
doc
=
new
DocumentImpl
(
doctype
)
;
Element
e
=
doc
.
createElementNS
(
namespaceURI
,
qualifiedName
)
;
doc
.
appendChild
(
e
)
;
return
doc
;
}
}
