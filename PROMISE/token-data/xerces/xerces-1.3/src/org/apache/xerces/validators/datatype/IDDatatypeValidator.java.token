package
org
.
apache
.
xerces
.
validators
.
datatype
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Locale
;
import
org
.
apache
.
xerces
.
utils
.
XMLCharacterProperties
;
import
org
.
apache
.
xerces
.
utils
.
XMLMessages
;
public
class
IDDatatypeValidator
extends
AbstractDatatypeValidator
{
private
DatatypeValidator
fBaseValidator
=
null
;
private
Object
fNullValue
=
null
;
private
DatatypeMessageProvider
fMessageProvider
=
new
DatatypeMessageProvider
(
)
;
private
Hashtable
fTableOfId
;
private
Locale
fLocale
=
null
;
public
static
final
int
IDREF_STORE
=
0
;
public
static
final
int
ID_CLEAR
=
1
;
public
IDDatatypeValidator
(
)
throws
InvalidDatatypeFacetException
{
this
(
null
,
null
,
false
)
;
}
public
IDDatatypeValidator
(
DatatypeValidator
base
,
Hashtable
facets
,
boolean
derivedByList
)
throws
InvalidDatatypeFacetException
{
}
public
Object
validate
(
String
content
,
Object
IDStorage
)
throws
InvalidDatatypeValueException
{
StateMessageDatatype
message
;
if
(
IDStorage
!=
null
)
{
message
=
(
StateMessageDatatype
)
IDStorage
;
if
(
message
.
getDatatypeState
(
)
==
IDDatatypeValidator
.
ID_CLEAR
)
{
if
(
this
.
fTableOfId
!=
null
)
{
this
.
fTableOfId
.
clear
(
)
;
this
.
fTableOfId
=
null
;
}
return
null
;
}
}
if
(
!
XMLCharacterProperties
.
validName
(
content
)
)
{
InvalidDatatypeValueException
error
=
new
InvalidDatatypeValueException
(
"ID is not valid: "
+
content
)
;
error
.
setMinorCode
(
XMLMessages
.
MSG_ID_INVALID
)
;
error
.
setMajorCode
(
XMLMessages
.
VC_ID
)
;
throw
error
;
}
if
(
!
addId
(
content
,
IDStorage
)
)
{
InvalidDatatypeValueException
error
=
new
InvalidDatatypeValueException
(
"ID '"
+
content
+
"'  has to be unique"
)
;
error
.
setMinorCode
(
XMLMessages
.
MSG_ID_NOT_UNIQUE
)
;
error
.
setMajorCode
(
XMLMessages
.
VC_ID
)
;
throw
error
;
}
return
fTableOfId
;
}
public
int
compare
(
String
content1
,
String
content2
)
{
return
-
1
;
}
public
Hashtable
getFacets
(
)
{
return
null
;
}
public
Object
clone
(
)
throws
CloneNotSupportedException
{
throw
new
CloneNotSupportedException
(
"clone() is not supported in "
+
this
.
getClass
(
)
.
getName
(
)
)
;
}
private
void
setBasetype
(
DatatypeValidator
base
)
{
fBaseValidator
=
base
;
}
private
boolean
addId
(
String
content
,
Object
idTable
)
{
if
(
this
.
fTableOfId
==
null
)
{
this
.
fTableOfId
=
new
Hashtable
(
)
;
}
else
if
(
this
.
fTableOfId
.
containsKey
(
content
)
)
{
return
false
;
}
if
(
this
.
fNullValue
==
null
)
{
fNullValue
=
new
Object
(
)
;
}
try
{
this
.
fTableOfId
.
put
(
content
,
fNullValue
)
;
}
catch
(
Exception
ex
)
{
ex
.
printStackTrace
(
)
;
}
return
true
;
}
public
void
setLocale
(
Locale
locale
)
{
fLocale
=
locale
;
}
private
String
getErrorString
(
int
major
,
int
minor
,
Object
args
[
]
)
{
try
{
return
fMessageProvider
.
createMessage
(
fLocale
,
major
,
minor
,
args
)
;
}
catch
(
Exception
e
)
{
return
"Illegal Errorcode "
+
minor
;
}
}
}
