package
org
.
apache
.
xerces
.
readers
;
import
org
.
apache
.
xerces
.
framework
.
XMLParser
;
import
org
.
apache
.
xerces
.
parsers
.
SAXParser
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
xml
.
sax
.
AttributeList
;
import
org
.
xml
.
sax
.
DocumentHandler
;
import
org
.
xml
.
sax
.
EntityResolver
;
import
org
.
xml
.
sax
.
InputSource
;
import
org
.
xml
.
sax
.
SAXException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
public
class
XCatalog
extends
XMLCatalogHandler
{
public
static
final
String
XCATALOG_DTD_PUBLICID
=
"-//DTD XCatalog//EN"
;
static
final
String
DTD
=
"xcatalog.dtd"
;
static
final
String
XCATALOG
=
"XCatalog"
;
static
final
String
MAP
=
"Map"
;
static
final
String
PUBLICID
=
"PublicID"
;
static
final
String
HREF
=
"HRef"
;
static
final
String
DELEGATE
=
"Delegate"
;
static
final
String
EXTEND
=
"Extend"
;
static
final
String
BASE
=
"Base"
;
static
final
String
REMAP
=
"Remap"
;
static
final
String
SYSTEMID
=
"SystemID"
;
private
static
final
boolean
DEBUG
=
false
;
private
Hashtable
delegate
=
new
Hashtable
(
)
;
private
Vector
delegateOrder
=
new
Vector
(
)
;
public
XCatalog
(
)
{
}
public
void
loadCatalog
(
InputSource
source
)
throws
SAXException
,
IOException
{
new
Parser
(
source
)
;
}
public
InputSource
resolveEntity
(
String
publicId
,
String
systemId
)
throws
SAXException
,
IOException
{
if
(
DEBUG
)
{
System
.
out
.
println
(
"resolveEntity(\""
+
publicId
+
"\", \""
+
systemId
+
"\")"
)
;
}
if
(
publicId
!=
null
)
{
String
value
=
getPublicMapping
(
publicId
)
;
if
(
DEBUG
)
{
System
.
out
.
println
(
"  map: \""
+
publicId
+
"\" -> \""
+
value
+
"\""
)
;
}
if
(
value
!=
null
)
{
InputSource
source
=
resolveEntity
(
null
,
value
)
;
if
(
source
==
null
)
{
source
=
new
InputSource
(
value
)
;
}
source
.
setPublicId
(
publicId
)
;
return
source
;
}
Enumeration
delegates
=
getDelegateCatalogKeys
(
)
;
while
(
delegates
.
hasMoreElements
(
)
)
{
String
key
=
(
String
)
delegates
.
nextElement
(
)
;
if
(
DEBUG
)
{
System
.
out
.
println
(
"  delegate: \""
+
key
+
"\""
)
;
}
if
(
publicId
.
startsWith
(
key
)
)
{
XMLCatalogHandler
catalog
=
getDelegateCatalog
(
key
)
;
InputSource
source
=
catalog
.
resolveEntity
(
publicId
,
systemId
)
;
if
(
source
!=
null
)
{
return
source
;
}
}
}
}
String
value
=
getSystemMapping
(
systemId
)
;
if
(
value
!=
null
)
{
if
(
DEBUG
)
{
System
.
out
.
println
(
"  remap: \""
+
systemId
+
"\" -> \""
+
value
+
"\""
)
;
}
InputSource
source
=
new
InputSource
(
value
)
;
source
.
setPublicId
(
publicId
)
;
return
source
;
}
if
(
DEBUG
)
{
System
.
out
.
println
(
"  returning null!"
)
;
}
return
null
;
}
public
void
addDelegateCatalog
(
String
prefix
,
XCatalog
catalog
)
{
synchronized
(
delegate
)
{
if
(
!
delegate
.
containsKey
(
prefix
)
)
{
int
size
=
delegateOrder
.
size
(
)
;
boolean
found
=
false
;
for
(
int
i
=
0
;
i
<
size
;
i
++
)
{
String
element
=
(
String
)
delegateOrder
.
elementAt
(
i
)
;
if
(
prefix
.
startsWith
(
element
)
||
prefix
.
compareTo
(
element
)
<
0
)
{
delegateOrder
.
insertElementAt
(
prefix
,
i
)
;
found
=
true
;
break
;
}
}
if
(
!
found
)
{
delegateOrder
.
addElement
(
prefix
)
;
}
}
delegate
.
put
(
prefix
,
catalog
)
;
}
}
public
void
removeDelegateCatalog
(
String
prefix
)
{
synchronized
(
delegate
)
{
delegate
.
remove
(
prefix
)
;
delegateOrder
.
removeElement
(
prefix
)
;
}
}
public
Enumeration
getDelegateCatalogKeys
(
)
{
return
delegateOrder
.
elements
(
)
;
}
public
XCatalog
getDelegateCatalog
(
String
prefix
)
{
return
(
XCatalog
)
delegate
.
get
(
prefix
)
;
}
boolean
isURL
(
String
str
)
{
try
{
new
java
.
net
.
URL
(
str
)
;
return
true
;
}
catch
(
java
.
net
.
MalformedURLException
e
)
{
}
return
false
;
}
class
Parser
extends
SAXParser
implements
DocumentHandler
{
private
String
base
;
public
Parser
(
InputSource
source
)
throws
SAXException
,
IOException
{
setEntityResolver
(
new
Resolver
(
)
)
;
setDocumentHandler
(
(
DocumentHandler
)
this
)
;
setBase
(
source
.
getSystemId
(
)
)
;
parse
(
source
)
;
}
protected
void
setBase
(
String
systemId
)
throws
SAXException
{
if
(
systemId
==
null
)
{
systemId
=
""
;
}
systemId
=
fEntityHandler
.
expandSystemId
(
systemId
)
;
int
index
=
systemId
.
lastIndexOf
(
'/'
)
;
if
(
index
!=
-
1
)
{
systemId
=
systemId
.
substring
(
0
,
index
+
1
)
;
}
base
=
systemId
;
}
public
void
processingInstruction
(
String
target
,
String
data
)
{
}
public
void
setDocumentLocator
(
org
.
xml
.
sax
.
Locator
locator
)
{
}
public
void
startDocument
(
)
{
}
public
void
endElement
(
String
elementName
)
{
}
public
void
endDocument
(
)
{
}
public
void
characters
(
char
ch
[
]
,
int
start
,
int
length
)
{
}
public
void
ignorableWhitespace
(
char
ch
[
]
,
int
start
,
int
length
)
{
}
public
void
startElement
(
String
elementName
,
AttributeList
attrList
)
throws
SAXException
{
try
{
if
(
elementName
.
equals
(
XCATALOG
)
)
{
return
;
}
if
(
elementName
.
equals
(
MAP
)
)
{
String
publicId
=
attrList
.
getValue
(
PUBLICID
)
;
String
href
=
attrList
.
getValue
(
HREF
)
;
if
(
DEBUG
)
{
System
.
out
.
println
(
"MAP \""
+
publicId
+
"\" \""
+
href
+
"\""
)
;
}
if
(
!
isURL
(
href
)
)
{
href
=
base
+
href
;
}
addPublicMapping
(
publicId
,
href
)
;
}
else
if
(
elementName
.
equals
(
DELEGATE
)
)
{
String
publicId
=
attrList
.
getValue
(
PUBLICID
)
;
String
href
=
attrList
.
getValue
(
HREF
)
;
if
(
DEBUG
)
{
System
.
out
.
println
(
"DELEGATE \""
+
publicId
+
"\" \""
+
href
+
"\""
)
;
}
if
(
!
isURL
(
href
)
)
{
href
=
base
+
href
;
}
String
systemId
=
fEntityHandler
.
expandSystemId
(
href
)
;
XCatalog
catalog
=
new
XCatalog
(
)
;
catalog
.
loadCatalog
(
new
InputSource
(
systemId
)
)
;
addDelegateCatalog
(
publicId
,
catalog
)
;
}
else
if
(
elementName
.
equals
(
EXTEND
)
)
{
String
href
=
attrList
.
getValue
(
HREF
)
;
if
(
DEBUG
)
{
System
.
out
.
println
(
"EXTEND \""
+
href
+
"\""
)
;
}
if
(
!
isURL
(
href
)
)
{
href
=
base
+
href
;
}
String
systemId
=
fEntityHandler
.
expandSystemId
(
href
)
;
XCatalog
.
this
.
loadCatalog
(
new
InputSource
(
systemId
)
)
;
}
else
if
(
elementName
.
equals
(
BASE
)
)
{
String
href
=
attrList
.
getValue
(
HREF
)
;
setBase
(
href
)
;
if
(
DEBUG
)
{
System
.
out
.
println
(
"BASE \""
+
href
+
"\" -> \""
+
base
+
"\""
)
;
}
}
else
if
(
elementName
.
equals
(
REMAP
)
)
{
String
systemId
=
attrList
.
getValue
(
SYSTEMID
)
;
String
href
=
attrList
.
getValue
(
HREF
)
;
if
(
DEBUG
)
{
System
.
out
.
println
(
"REMAP \""
+
systemId
+
"\" \""
+
href
+
"\""
)
;
}
if
(
!
isURL
(
href
)
)
{
href
=
base
+
href
;
}
addSystemMapping
(
systemId
,
href
)
;
}
}
catch
(
Exception
e
)
{
throw
new
SAXException
(
e
)
;
}
}
class
Resolver
implements
EntityResolver
{
public
InputSource
resolveEntity
(
String
publicId
,
String
systemId
)
throws
SAXException
,
IOException
{
if
(
publicId
!=
null
&&
publicId
.
equals
(
XCATALOG_DTD_PUBLICID
)
)
{
InputSource
src
=
new
InputSource
(
)
;
src
.
setPublicId
(
publicId
)
;
InputStream
is
=
getClass
(
)
.
getResourceAsStream
(
DTD
)
;
src
.
setByteStream
(
is
)
;
src
.
setCharacterStream
(
new
InputStreamReader
(
is
)
)
;
return
src
;
}
return
null
;
}
}
}
}
