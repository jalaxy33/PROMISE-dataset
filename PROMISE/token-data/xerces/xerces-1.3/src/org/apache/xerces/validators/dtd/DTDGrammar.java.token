package
org
.
apache
.
xerces
.
validators
.
dtd
;
import
org
.
apache
.
xerces
.
dom
.
DocumentImpl
;
import
org
.
apache
.
xerces
.
framework
.
XMLContentSpec
;
import
org
.
apache
.
xerces
.
framework
.
XMLDTDScanner
;
import
org
.
apache
.
xerces
.
readers
.
XMLEntityHandler
;
import
org
.
apache
.
xerces
.
utils
.
QName
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
apache
.
xerces
.
validators
.
common
.
Grammar
;
import
org
.
apache
.
xerces
.
validators
.
common
.
XMLAttributeDecl
;
import
org
.
apache
.
xerces
.
validators
.
common
.
XMLElementDecl
;
import
org
.
apache
.
xerces
.
validators
.
datatype
.
DatatypeValidatorFactoryImpl
;
import
org
.
apache
.
xerces
.
validators
.
schema
.
XUtil
;
import
org
.
w3c
.
dom
.
Document
;
import
org
.
w3c
.
dom
.
Element
;
import
org
.
w3c
.
dom
.
ProcessingInstruction
;
import
org
.
w3c
.
dom
.
Text
;
public
class
DTDGrammar
extends
Grammar
implements
XMLDTDScanner
.
EventHandler
{
private
static
final
int
CHUNK_SHIFT
=
8
;
private
static
final
int
CHUNK_SIZE
=
(
1
<<
CHUNK_SHIFT
)
;
private
static
final
int
CHUNK_MASK
=
CHUNK_SIZE
-
1
;
private
static
final
int
INITIAL_CHUNK_COUNT
=
(
1
<<
(
10
-
CHUNK_SHIFT
)
)
;
private
StringPool
fStringPool
;
private
XMLElementDecl
fElementDecl
=
new
XMLElementDecl
(
)
;
private
XMLAttributeDecl
fAttributeDecl
=
new
XMLAttributeDecl
(
)
;
private
XMLContentSpec
fContentSpec
=
new
XMLContentSpec
(
)
;
private
Document
fGrammarDocument
;
private
Element
fRootElement
;
private
QName
fRootElementQName
=
new
QName
(
)
;
private
Element
fCurrentElement
;
private
int
fElementDeclIsExternal
[
]
[
]
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
int
fElementDeclMap
[
]
[
]
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
int
fAttributeDeclIsExternal
[
]
[
]
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
int
fAttributeDeclMap
[
]
[
]
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
int
fContentSpecMap
[
]
[
]
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
QName
fQName
=
new
QName
(
)
;
public
DTDGrammar
(
StringPool
stringPool
)
{
reset
(
stringPool
)
;
}
public
void
reset
(
StringPool
stringPool
)
{
fStringPool
=
stringPool
;
}
public
void
callStartDTD
(
)
throws
Exception
{
setGrammarDocument
(
null
)
;
fGrammarDocument
=
new
DocumentImpl
(
)
;
fRootElement
=
fGrammarDocument
.
createElement
(
"dtd"
)
;
fCurrentElement
=
fRootElement
;
}
public
void
callEndDTD
(
)
throws
Exception
{
setGrammarDocument
(
fGrammarDocument
)
;
}
public
void
callTextDecl
(
int
version
,
int
encoding
)
throws
Exception
{
Element
textDecl
=
fGrammarDocument
.
createElement
(
"textDecl"
)
;
textDecl
.
setAttribute
(
"version"
,
fStringPool
.
toString
(
version
)
)
;
textDecl
.
setAttribute
(
"encoding"
,
fStringPool
.
toString
(
encoding
)
)
;
fCurrentElement
.
appendChild
(
textDecl
)
;
}
public
void
doctypeDecl
(
QName
rootElement
,
int
publicId
,
int
systemId
)
throws
Exception
{
Element
doctypeDecl
=
fGrammarDocument
.
createElement
(
"doctypeDecl"
)
;
doctypeDecl
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
rootElement
.
rawname
)
)
;
if
(
rootElement
.
uri
!=
-
1
)
{
doctypeDecl
.
setAttribute
(
"xmlns:"
+
fStringPool
.
toString
(
rootElement
.
prefix
)
,
fStringPool
.
toString
(
rootElement
.
uri
)
)
;
}
doctypeDecl
.
setAttribute
(
"publicId"
,
fStringPool
.
toString
(
publicId
)
)
;
doctypeDecl
.
setAttribute
(
"systemId"
,
fStringPool
.
toString
(
systemId
)
)
;
fCurrentElement
.
appendChild
(
doctypeDecl
)
;
fRootElementQName
.
setValues
(
rootElement
)
;
}
public
void
startReadingFromExternalSubset
(
int
publicId
,
int
systemId
)
throws
Exception
{
Element
externalSubset
=
fGrammarDocument
.
createElement
(
"external"
)
;
externalSubset
.
setAttribute
(
"publicId"
,
fStringPool
.
toString
(
publicId
)
)
;
externalSubset
.
setAttribute
(
"systemId"
,
fStringPool
.
toString
(
systemId
)
)
;
fCurrentElement
.
appendChild
(
externalSubset
)
;
fCurrentElement
=
externalSubset
;
}
public
void
stopReadingFromExternalSubset
(
)
throws
Exception
{
fCurrentElement
=
(
Element
)
fCurrentElement
.
getParentNode
(
)
;
}
public
int
addElementDecl
(
QName
elementDecl
)
throws
Exception
{
Element
elementDeclElement
=
fGrammarDocument
.
createElement
(
"elementDecl"
)
;
elementDeclElement
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
elementDecl
.
localpart
)
)
;
if
(
elementDecl
.
uri
!=
-
1
)
{
elementDeclElement
.
setAttribute
(
"xmlns:"
+
fStringPool
.
toString
(
elementDecl
.
prefix
)
,
fStringPool
.
toString
(
elementDecl
.
uri
)
)
;
}
fCurrentElement
.
appendChild
(
elementDeclElement
)
;
int
elementDeclIndex
=
createElementDecl
(
)
;
fElementDecl
.
clear
(
)
;
fElementDecl
.
name
.
setValues
(
elementDecl
)
;
setElementDecl
(
elementDeclIndex
,
fElementDecl
)
;
return
elementDeclIndex
;
}
public
int
addElementDecl
(
QName
elementDecl
,
int
contentSpecType
,
int
contentSpec
,
boolean
isExternal
)
throws
Exception
{
Element
elementDeclElement
=
fGrammarDocument
.
createElement
(
"elementDecl"
)
;
elementDeclElement
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
elementDecl
.
localpart
)
)
;
if
(
elementDecl
.
uri
!=
-
1
)
{
elementDeclElement
.
setAttribute
(
"xmlns:"
+
fStringPool
.
toString
(
elementDecl
.
prefix
)
,
fStringPool
.
toString
(
elementDecl
.
uri
)
)
;
}
elementDeclElement
.
setAttribute
(
"type"
,
fStringPool
.
toString
(
contentSpecType
)
)
;
fCurrentElement
.
appendChild
(
elementDeclElement
)
;
int
elementDeclIndex
=
createElementDecl
(
)
;
fElementDecl
.
clear
(
)
;
fElementDecl
.
name
.
setValues
(
elementDecl
)
;
fElementDecl
.
type
=
contentSpecType
;
fElementDecl
.
contentSpecIndex
=
contentSpec
;
setElementDecl
(
elementDeclIndex
,
fElementDecl
)
;
int
chunk
=
elementDeclIndex
>
>
CHUNK_SHIFT
;
int
index
=
elementDeclIndex
&
CHUNK_MASK
;
ensureElementDeclCapacity
(
chunk
)
;
fElementDeclIsExternal
[
chunk
]
[
index
]
=
isExternal
?
1
:
0
;
return
elementDeclIndex
;
}
protected
void
putElementNameMapping
(
QName
name
,
int
scope
,
int
elementDeclIndex
)
{
fQName
.
uri
=
-
1
;
fQName
.
localpart
=
name
.
rawname
;
super
.
putElementNameMapping
(
fQName
,
scope
,
elementDeclIndex
)
;
}
public
int
getElementDeclIndex
(
QName
element
,
int
scopeIndex
)
{
return
super
.
getElementDeclIndex
(
element
.
rawname
,
-
1
)
;
}
public
void
setElementDeclDTD
(
int
elementDeclIndex
,
XMLElementDecl
elementDecl
)
{
super
.
setElementDecl
(
elementDeclIndex
,
elementDecl
)
;
}
private
XMLContentSpec
fTempContentSpec
=
new
XMLContentSpec
(
)
;
public
void
setElementDeclIsExternal
(
int
elementDeclIndex
,
boolean
isExternal
)
{
int
chunk
=
elementDeclIndex
>
>
CHUNK_SHIFT
;
int
index
=
elementDeclIndex
&
CHUNK_MASK
;
ensureElementDeclCapacity
(
chunk
)
;
fElementDeclIsExternal
[
chunk
]
[
index
]
=
isExternal
?
1
:
0
;
}
public
boolean
getElementDeclIsExternal
(
int
elementDeclIndex
)
{
if
(
elementDeclIndex
<
0
)
{
return
false
;
}
int
chunk
=
elementDeclIndex
>
>
CHUNK_SHIFT
;
int
index
=
elementDeclIndex
&
CHUNK_MASK
;
return
(
fElementDeclIsExternal
[
chunk
]
[
index
]
!=
0
)
;
}
public
boolean
getAttributeDeclIsExternal
(
int
attributeDeclIndex
)
{
if
(
attributeDeclIndex
<
0
)
{
return
false
;
}
int
chunk
=
attributeDeclIndex
>
>
CHUNK_SHIFT
;
int
index
=
attributeDeclIndex
&
CHUNK_MASK
;
return
(
fAttributeDeclIsExternal
[
chunk
]
[
index
]
!=
0
)
;
}
public
boolean
getRootElementQName
(
QName
root
)
{
if
(
fRootElementQName
.
rawname
==
-
1
)
{
return
false
;
}
root
.
setValues
(
fRootElementQName
)
;
return
true
;
}
public
int
addAttDef
(
QName
elementDecl
,
QName
attributeDecl
,
int
attType
,
boolean
attList
,
int
enumeration
,
int
attDefaultType
,
int
attDefaultValue
,
boolean
isExternal
)
throws
Exception
{
Element
attributeDeclElement
=
fGrammarDocument
.
createElement
(
"attributeDecl"
)
;
attributeDeclElement
.
setAttribute
(
"element"
,
fStringPool
.
toString
(
elementDecl
.
localpart
)
)
;
attributeDeclElement
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
attributeDecl
.
localpart
)
)
;
if
(
attributeDecl
.
uri
!=
-
1
)
{
attributeDeclElement
.
setAttribute
(
"xmlns:"
+
fStringPool
.
toString
(
attributeDecl
.
prefix
)
,
fStringPool
.
toString
(
attributeDecl
.
uri
)
)
;
}
attributeDeclElement
.
setAttribute
(
"type"
,
fStringPool
.
toString
(
attType
)
)
;
attributeDeclElement
.
setAttribute
(
"defaultType"
,
fStringPool
.
toString
(
attDefaultType
)
)
;
attributeDeclElement
.
setAttribute
(
"defaultValue"
,
fStringPool
.
toString
(
attDefaultValue
)
)
;
fCurrentElement
.
appendChild
(
attributeDeclElement
)
;
int
attributeDeclIndex
=
createAttributeDecl
(
)
;
String
attTypeString
=
""
;
switch
(
attType
)
{
case
XMLAttributeDecl
.
TYPE_CDATA
:
attTypeString
=
"string"
;
case
XMLAttributeDecl
.
TYPE_ENTITY
:
attTypeString
=
"ENTITY"
;
;
case
XMLAttributeDecl
.
TYPE_ENUMERATION
:
attTypeString
=
"ENUMERATION"
;
;
case
XMLAttributeDecl
.
TYPE_ID
:
attTypeString
=
"ID"
;
;
case
XMLAttributeDecl
.
TYPE_IDREF
:
attTypeString
=
"IDREF"
;
;
case
XMLAttributeDecl
.
TYPE_NMTOKEN
:
attTypeString
=
"NMTOKEN"
;
;
case
XMLAttributeDecl
.
TYPE_NOTATION
:
attTypeString
=
"NOTATION"
;
;
default
:
;
}
fAttributeDecl
.
clear
(
)
;
fAttributeDecl
.
name
.
setValues
(
attributeDecl
)
;
fAttributeDecl
.
type
=
attType
;
fAttributeDecl
.
list
=
attList
;
fAttributeDecl
.
enumeration
=
enumeration
;
fAttributeDecl
.
defaultType
=
attDefaultType
;
fAttributeDecl
.
defaultValue
=
fStringPool
.
toString
(
attDefaultValue
)
;
int
elementDeclIndex
=
getElementDeclIndex
(
elementDecl
,
-
1
)
;
setAttributeDecl
(
elementDeclIndex
,
attributeDeclIndex
,
fAttributeDecl
)
;
int
chunk
=
attributeDeclIndex
>
>
CHUNK_SHIFT
;
int
index
=
attributeDeclIndex
&
CHUNK_MASK
;
ensureAttributeDeclCapacity
(
chunk
)
;
fAttributeDeclIsExternal
[
chunk
]
[
index
]
=
isExternal
?
1
:
0
;
return
attributeDeclIndex
;
}
public
int
addUniqueLeafNode
(
int
nameIndex
)
throws
Exception
{
int
contentSpecIndex
=
createContentSpec
(
)
;
fContentSpec
.
setValues
(
XMLContentSpec
.
CONTENTSPECNODE_LEAF
,
nameIndex
,
-
1
)
;
setContentSpec
(
contentSpecIndex
,
fContentSpec
)
;
return
contentSpecIndex
;
}
public
int
addContentSpecNode
(
int
nodeType
,
int
nodeValue
)
throws
Exception
{
int
contentSpecIndex
=
createContentSpec
(
)
;
fContentSpec
.
setValues
(
nodeType
,
nodeValue
,
-
1
)
;
setContentSpec
(
contentSpecIndex
,
fContentSpec
)
;
return
contentSpecIndex
;
}
public
int
addContentSpecNode
(
int
nodeType
,
int
leftNodeIndex
,
int
rightNodeIndex
)
throws
Exception
{
int
contentSpecIndex
=
createContentSpec
(
)
;
fContentSpec
.
setValues
(
nodeType
,
leftNodeIndex
,
rightNodeIndex
)
;
setContentSpec
(
contentSpecIndex
,
fContentSpec
)
;
return
contentSpecIndex
;
}
public
String
getContentSpecNodeAsString
(
int
nodeIndex
)
throws
Exception
{
return
XMLContentSpec
.
toString
(
this
,
fStringPool
,
nodeIndex
)
;
}
public
boolean
startEntityDecl
(
boolean
isPE
,
int
entityName
)
throws
Exception
{
Element
entityDecl
=
fGrammarDocument
.
createElement
(
"entityDecl"
)
;
entityDecl
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
entityName
)
)
;
entityDecl
.
setAttribute
(
"parameter"
,
isPE
?
"true"
:
"false"
)
;
fCurrentElement
.
appendChild
(
entityDecl
)
;
fCurrentElement
=
entityDecl
;
return
true
;
}
public
void
endEntityDecl
(
)
throws
Exception
{
fCurrentElement
=
(
Element
)
fCurrentElement
.
getParentNode
(
)
;
}
public
int
addInternalPEDecl
(
int
name
,
int
value
)
throws
Exception
{
Element
internalPEDecl
=
fGrammarDocument
.
createElement
(
"internalPEDecl"
)
;
internalPEDecl
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
name
)
)
;
internalPEDecl
.
setAttribute
(
"value"
,
fStringPool
.
toString
(
value
)
)
;
fCurrentElement
.
appendChild
(
internalPEDecl
)
;
int
peDeclIndex
=
-
1
;
return
peDeclIndex
;
}
public
int
addExternalPEDecl
(
int
name
,
int
publicId
,
int
systemId
)
throws
Exception
{
Element
externalPEDecl
=
fGrammarDocument
.
createElement
(
"externalPEDecl"
)
;
externalPEDecl
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
name
)
)
;
externalPEDecl
.
setAttribute
(
"publicId"
,
fStringPool
.
toString
(
publicId
)
)
;
externalPEDecl
.
setAttribute
(
"systemId"
,
fStringPool
.
toString
(
systemId
)
)
;
fCurrentElement
.
appendChild
(
externalPEDecl
)
;
int
peDeclIndex
=
-
1
;
return
peDeclIndex
;
}
public
int
addInternalEntityDecl
(
int
name
,
int
value
)
throws
Exception
{
Element
internalEntityDecl
=
fGrammarDocument
.
createElement
(
"internalEntityDecl"
)
;
internalEntityDecl
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
name
)
)
;
internalEntityDecl
.
setAttribute
(
"value"
,
fStringPool
.
toString
(
value
)
)
;
fCurrentElement
.
appendChild
(
internalEntityDecl
)
;
int
internalEntityDeclIndex
=
-
1
;
return
internalEntityDeclIndex
;
}
public
int
addExternalEntityDecl
(
int
name
,
int
publicId
,
int
systemId
)
throws
Exception
{
Element
externalEntityDecl
=
fGrammarDocument
.
createElement
(
"externalEntityDecl"
)
;
externalEntityDecl
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
name
)
)
;
externalEntityDecl
.
setAttribute
(
"publicId"
,
fStringPool
.
toString
(
publicId
)
)
;
externalEntityDecl
.
setAttribute
(
"systemId"
,
fStringPool
.
toString
(
systemId
)
)
;
fCurrentElement
.
appendChild
(
externalEntityDecl
)
;
int
externalEntityDeclIndex
=
-
1
;
return
externalEntityDeclIndex
;
}
public
int
addUnparsedEntityDecl
(
int
name
,
int
publicId
,
int
systemId
,
int
notationName
)
throws
Exception
{
Element
unparsedEntityDecl
=
fGrammarDocument
.
createElement
(
"unparsedEntityDecl"
)
;
unparsedEntityDecl
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
name
)
)
;
unparsedEntityDecl
.
setAttribute
(
"publicId"
,
fStringPool
.
toString
(
publicId
)
)
;
unparsedEntityDecl
.
setAttribute
(
"systemId"
,
fStringPool
.
toString
(
systemId
)
)
;
unparsedEntityDecl
.
setAttribute
(
"notation"
,
fStringPool
.
toString
(
notationName
)
)
;
fCurrentElement
.
appendChild
(
unparsedEntityDecl
)
;
int
unparsedEntityDeclIndex
=
-
1
;
return
unparsedEntityDeclIndex
;
}
public
int
startEnumeration
(
)
throws
Exception
{
Element
enumeration
=
fGrammarDocument
.
createElement
(
"enumeration"
)
;
fCurrentElement
.
appendChild
(
enumeration
)
;
fCurrentElement
=
enumeration
;
int
enumIndex
=
fStringPool
.
startStringList
(
)
;
return
enumIndex
;
}
public
void
addNameToEnumeration
(
int
enumIndex
,
int
elementType
,
int
attrName
,
int
nameIndex
,
boolean
isNotationType
)
throws
Exception
{
Element
literal
=
fGrammarDocument
.
createElement
(
"literal"
)
;
literal
.
setAttribute
(
"element"
,
fStringPool
.
toString
(
elementType
)
)
;
literal
.
setAttribute
(
"attribute"
,
fStringPool
.
toString
(
attrName
)
)
;
literal
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
nameIndex
)
)
;
literal
.
setAttribute
(
"notation"
,
isNotationType
?
"true"
:
"false"
)
;
fCurrentElement
.
appendChild
(
literal
)
;
fStringPool
.
addStringToList
(
enumIndex
,
nameIndex
)
;
}
public
void
endEnumeration
(
int
enumIndex
)
throws
Exception
{
fCurrentElement
=
(
Element
)
fCurrentElement
.
getParentNode
(
)
;
fStringPool
.
finishStringList
(
enumIndex
)
;
}
public
int
addNotationDecl
(
int
notationName
,
int
publicId
,
int
systemId
)
throws
Exception
{
Element
notationDecl
=
fGrammarDocument
.
createElement
(
"notationDecl"
)
;
notationDecl
.
setAttribute
(
"name"
,
fStringPool
.
toString
(
notationName
)
)
;
notationDecl
.
setAttribute
(
"publicId"
,
fStringPool
.
toString
(
publicId
)
)
;
notationDecl
.
setAttribute
(
"systemId"
,
fStringPool
.
toString
(
systemId
)
)
;
fCurrentElement
.
appendChild
(
notationDecl
)
;
int
notationDeclIndex
=
-
1
;
return
notationDeclIndex
;
}
public
void
callComment
(
int
data
)
throws
Exception
{
}
public
void
callProcessingInstruction
(
int
piTarget
,
int
piData
)
throws
Exception
{
ProcessingInstruction
pi
=
fGrammarDocument
.
createProcessingInstruction
(
fStringPool
.
toString
(
piTarget
)
,
fStringPool
.
toString
(
piData
)
)
;
fCurrentElement
.
appendChild
(
pi
)
;
}
public
void
internalSubset
(
int
internalSubset
)
throws
Exception
{
}
protected
boolean
isDTD
(
)
{
return
true
;
}
private
boolean
ensureElementDeclCapacity
(
int
chunk
)
{
try
{
return
fElementDeclMap
[
chunk
]
[
0
]
==
0
;
}
catch
(
ArrayIndexOutOfBoundsException
ex
)
{
fElementDeclMap
=
resize
(
fElementDeclMap
,
fElementDeclMap
.
length
*
2
)
;
fElementDeclIsExternal
=
resize
(
fElementDeclIsExternal
,
fElementDeclIsExternal
.
length
*
2
)
;
}
catch
(
NullPointerException
ex
)
{
}
fElementDeclMap
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
fElementDeclIsExternal
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
return
true
;
}
private
boolean
ensureAttributeDeclCapacity
(
int
chunk
)
{
try
{
return
fAttributeDeclMap
[
chunk
]
[
0
]
==
0
;
}
catch
(
ArrayIndexOutOfBoundsException
ex
)
{
fAttributeDeclMap
=
resize
(
fAttributeDeclMap
,
fAttributeDeclMap
.
length
*
2
)
;
fAttributeDeclIsExternal
=
resize
(
fAttributeDeclIsExternal
,
fAttributeDeclIsExternal
.
length
*
2
)
;
}
catch
(
NullPointerException
ex
)
{
}
fAttributeDeclMap
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
fAttributeDeclIsExternal
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
return
true
;
}
private
boolean
ensureContentSpecCapacity
(
int
chunk
)
{
try
{
return
fContentSpecMap
[
chunk
]
[
0
]
==
0
;
}
catch
(
ArrayIndexOutOfBoundsException
ex
)
{
fContentSpecMap
=
resize
(
fContentSpecMap
,
fContentSpecMap
.
length
*
2
)
;
}
catch
(
NullPointerException
ex
)
{
}
fContentSpecMap
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
return
true
;
}
private
int
[
]
[
]
resize
(
int
array
[
]
[
]
,
int
newsize
)
{
int
newarray
[
]
[
]
=
new
int
[
newsize
]
[
]
;
System
.
arraycopy
(
array
,
0
,
newarray
,
0
,
array
.
length
)
;
return
newarray
;
}
}
