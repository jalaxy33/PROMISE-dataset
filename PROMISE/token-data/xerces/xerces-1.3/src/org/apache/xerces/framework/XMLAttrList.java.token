package
org
.
apache
.
xerces
.
framework
;
import
org
.
apache
.
xerces
.
utils
.
QName
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
xml
.
sax
.
AttributeList
;
import
org
.
xml
.
sax
.
Locator
;
import
org
.
xml
.
sax
.
SAXParseException
;
public
final
class
XMLAttrList
implements
AttributeList
{
private
static
final
int
CHUNK_SHIFT
=
5
;
private
static
final
int
CHUNK_SIZE
=
(
1
<<
CHUNK_SHIFT
)
;
private
static
final
int
CHUNK_MASK
=
CHUNK_SIZE
-
1
;
private
static
final
int
INITIAL_CHUNK_COUNT
=
(
1
<<
(
10
-
CHUNK_SHIFT
)
)
;
private
static
final
int
ATTFLAG_SPECIFIED
=
1
;
private
static
final
int
ATTFLAG_LASTATTR
=
2
;
private
StringPool
fStringPool
=
null
;
private
int
fCurrentHandle
=
-
1
;
private
int
fAttributeListHandle
=
-
1
;
private
int
fAttributeListLength
=
0
;
private
int
fAttrCount
=
0
;
private
int
[
]
[
]
fAttPrefix
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
int
[
]
[
]
fAttLocalpart
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
int
[
]
[
]
fAttName
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
int
[
]
[
]
fAttURI
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
int
[
]
[
]
fAttValue
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
int
[
]
[
]
fAttType
=
new
int
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
byte
[
]
[
]
fAttFlags
=
new
byte
[
INITIAL_CHUNK_COUNT
]
[
]
;
private
QName
fAttributeQName
=
new
QName
(
)
;
public
XMLAttrList
(
StringPool
stringPool
)
{
fStringPool
=
stringPool
;
}
public
void
reset
(
StringPool
stringPool
)
{
fStringPool
=
stringPool
;
fCurrentHandle
=
-
1
;
fAttributeListHandle
=
-
1
;
fAttributeListLength
=
0
;
fAttrCount
=
0
;
}
public
int
addAttr
(
int
attrName
,
int
attValue
,
int
attType
,
boolean
specified
,
boolean
search
)
throws
Exception
{
fAttributeQName
.
setValues
(
-
1
,
attrName
,
attrName
)
;
return
addAttr
(
fAttributeQName
,
attValue
,
attType
,
specified
,
search
)
;
}
public
int
addAttr
(
QName
attribute
,
int
attValue
,
int
attType
,
boolean
specified
,
boolean
search
)
throws
Exception
{
int
chunk
;
int
index
;
if
(
search
)
{
chunk
=
fCurrentHandle
>
>
CHUNK_SHIFT
;
index
=
fCurrentHandle
&
CHUNK_MASK
;
for
(
int
attrIndex
=
fCurrentHandle
;
attrIndex
<
fAttrCount
;
attrIndex
++
)
{
if
(
fStringPool
.
equalNames
(
fAttName
[
chunk
]
[
index
]
,
attribute
.
rawname
)
)
{
return
-
1
;
}
if
(
++
index
==
CHUNK_SIZE
)
{
chunk
++
;
index
=
0
;
}
}
}
else
{
chunk
=
fAttrCount
>
>
CHUNK_SHIFT
;
index
=
fAttrCount
&
CHUNK_MASK
;
}
ensureCapacity
(
chunk
,
index
)
;
fAttPrefix
[
chunk
]
[
index
]
=
attribute
.
prefix
;
fAttLocalpart
[
chunk
]
[
index
]
=
attribute
.
localpart
;
fAttName
[
chunk
]
[
index
]
=
attribute
.
rawname
;
fAttURI
[
chunk
]
[
index
]
=
attribute
.
uri
;
fAttValue
[
chunk
]
[
index
]
=
attValue
;
fAttType
[
chunk
]
[
index
]
=
attType
;
fAttFlags
[
chunk
]
[
index
]
=
(
byte
)
(
specified
?
ATTFLAG_SPECIFIED
:
0
)
;
return
fAttrCount
++
;
}
public
int
startAttrList
(
)
{
fCurrentHandle
=
fAttrCount
;
return
fCurrentHandle
;
}
public
void
endAttrList
(
)
{
int
attrIndex
=
fAttrCount
-
1
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
fAttFlags
[
chunk
]
[
index
]
|=
ATTFLAG_LASTATTR
;
fCurrentHandle
=
-
1
;
}
public
int
getAttrPrefix
(
int
attrIndex
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
-
1
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
return
fAttPrefix
[
chunk
]
[
index
]
;
}
public
int
getAttrLocalpart
(
int
attrIndex
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
-
1
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
return
fAttLocalpart
[
chunk
]
[
index
]
;
}
public
int
getAttrName
(
int
attrIndex
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
-
1
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
return
fAttName
[
chunk
]
[
index
]
;
}
public
void
setAttrURI
(
int
attrIndex
,
int
uri
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
fAttURI
[
chunk
]
[
index
]
=
uri
;
}
public
int
getAttrURI
(
int
attrIndex
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
-
1
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
return
fAttURI
[
chunk
]
[
index
]
;
}
public
int
getAttValue
(
int
attrIndex
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
-
1
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
return
fAttValue
[
chunk
]
[
index
]
;
}
public
void
setAttValue
(
int
attrIndex
,
int
attrValue
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
fAttValue
[
chunk
]
[
index
]
=
attrValue
;
}
public
void
setAttType
(
int
attrIndex
,
int
attTypeIndex
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
fAttType
[
chunk
]
[
index
]
=
attTypeIndex
;
}
public
int
getAttType
(
int
attrIndex
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
-
1
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
return
fAttType
[
chunk
]
[
index
]
;
}
public
boolean
isSpecified
(
int
attrIndex
)
{
if
(
attrIndex
<
0
||
attrIndex
>=
fAttrCount
)
return
true
;
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
return
(
fAttFlags
[
chunk
]
[
index
]
&
ATTFLAG_SPECIFIED
)
!=
0
;
}
public
void
releaseAttrList
(
int
attrListHandle
)
{
if
(
attrListHandle
==
-
1
)
return
;
int
chunk
=
attrListHandle
>
>
CHUNK_SHIFT
;
int
index
=
attrListHandle
&
CHUNK_MASK
;
while
(
true
)
{
boolean
last
=
(
fAttFlags
[
chunk
]
[
index
]
&
ATTFLAG_LASTATTR
)
!=
0
;
fAttPrefix
[
chunk
]
[
index
]
=
-
1
;
fAttLocalpart
[
chunk
]
[
index
]
=
-
1
;
fAttName
[
chunk
]
[
index
]
=
-
1
;
fAttURI
[
chunk
]
[
index
]
=
-
1
;
if
(
(
fAttFlags
[
chunk
]
[
index
]
&
ATTFLAG_SPECIFIED
)
!=
0
)
fStringPool
.
releaseString
(
fAttValue
[
chunk
]
[
index
]
)
;
fAttValue
[
chunk
]
[
index
]
=
-
1
;
if
(
++
index
==
CHUNK_SIZE
)
{
chunk
++
;
index
=
0
;
}
if
(
last
)
break
;
}
int
lastIndex
=
(
chunk
<<
CHUNK_SHIFT
)
+
index
;
if
(
fAttrCount
==
lastIndex
)
fAttrCount
=
attrListHandle
;
}
public
int
getFirstAttr
(
int
attrListHandle
)
{
if
(
attrListHandle
<
0
||
attrListHandle
>=
fAttrCount
)
{
return
-
1
;
}
return
attrListHandle
;
}
public
int
getNextAttr
(
int
attrIndex
)
{
if
(
attrIndex
<
0
||
attrIndex
+
1
>=
fAttrCount
)
{
return
-
1
;
}
int
chunk
=
attrIndex
>
>
CHUNK_SHIFT
;
int
index
=
attrIndex
&
CHUNK_MASK
;
if
(
(
fAttFlags
[
chunk
]
[
index
]
&
ATTFLAG_LASTATTR
)
!=
0
)
{
return
-
1
;
}
return
attrIndex
+
1
;
}
public
AttributeList
getAttributeList
(
int
attrListHandle
)
{
fAttributeListHandle
=
attrListHandle
;
if
(
fAttributeListHandle
==
-
1
)
fAttributeListLength
=
0
;
else
{
int
chunk
=
fAttributeListHandle
>
>
CHUNK_SHIFT
;
int
index
=
fAttributeListHandle
&
CHUNK_MASK
;
fAttributeListLength
=
1
;
while
(
(
fAttFlags
[
chunk
]
[
index
]
&
ATTFLAG_LASTATTR
)
==
0
)
{
if
(
++
index
==
CHUNK_SIZE
)
{
chunk
++
;
index
=
0
;
}
fAttributeListLength
++
;
}
}
return
this
;
}
public
int
getLength
(
)
{
return
fAttributeListLength
;
}
public
String
getPrefix
(
int
i
)
{
if
(
i
<
0
||
i
>=
fAttributeListLength
)
{
return
null
;
}
int
chunk
=
(
fAttributeListHandle
+
i
)
>
>
CHUNK_SHIFT
;
int
index
=
(
fAttributeListHandle
+
i
)
&
CHUNK_MASK
;
return
fStringPool
.
toString
(
fAttPrefix
[
chunk
]
[
index
]
)
;
}
public
String
getLocalpart
(
int
i
)
{
if
(
i
<
0
||
i
>=
fAttributeListLength
)
{
return
null
;
}
int
chunk
=
(
fAttributeListHandle
+
i
)
>
>
CHUNK_SHIFT
;
int
index
=
(
fAttributeListHandle
+
i
)
&
CHUNK_MASK
;
return
fStringPool
.
toString
(
fAttLocalpart
[
chunk
]
[
index
]
)
;
}
public
String
getName
(
int
i
)
{
if
(
i
<
0
||
i
>=
fAttributeListLength
)
return
null
;
int
chunk
=
(
fAttributeListHandle
+
i
)
>
>
CHUNK_SHIFT
;
int
index
=
(
fAttributeListHandle
+
i
)
&
CHUNK_MASK
;
return
fStringPool
.
toString
(
fAttName
[
chunk
]
[
index
]
)
;
}
public
String
getURI
(
int
i
)
{
if
(
i
<
0
||
i
>=
fAttributeListLength
)
return
null
;
int
chunk
=
(
fAttributeListHandle
+
i
)
>
>
CHUNK_SHIFT
;
int
index
=
(
fAttributeListHandle
+
i
)
&
CHUNK_MASK
;
return
fStringPool
.
toString
(
fAttURI
[
chunk
]
[
index
]
)
;
}
public
String
getType
(
int
i
)
{
if
(
i
<
0
||
i
>=
fAttributeListLength
)
return
null
;
int
chunk
=
(
fAttributeListHandle
+
i
)
>
>
CHUNK_SHIFT
;
int
index
=
(
fAttributeListHandle
+
i
)
&
CHUNK_MASK
;
int
attType
=
fAttType
[
chunk
]
[
index
]
;
if
(
attType
==
fStringPool
.
addSymbol
(
"ENUMERATION"
)
)
attType
=
fStringPool
.
addSymbol
(
"NMTOKEN"
)
;
return
fStringPool
.
toString
(
attType
)
;
}
public
String
getValue
(
int
i
)
{
if
(
i
<
0
||
i
>=
fAttributeListLength
)
return
null
;
int
chunk
=
(
fAttributeListHandle
+
i
)
>
>
CHUNK_SHIFT
;
int
index
=
(
fAttributeListHandle
+
i
)
&
CHUNK_MASK
;
return
fStringPool
.
toString
(
fAttValue
[
chunk
]
[
index
]
)
;
}
public
String
getType
(
String
name
)
{
int
nameIndex
=
fStringPool
.
addSymbol
(
name
)
;
if
(
nameIndex
==
-
1
)
return
null
;
int
chunk
=
fAttributeListHandle
>
>
CHUNK_SHIFT
;
int
index
=
fAttributeListHandle
&
CHUNK_MASK
;
for
(
int
i
=
0
;
i
<
fAttributeListLength
;
i
++
)
{
if
(
fStringPool
.
equalNames
(
fAttName
[
chunk
]
[
index
]
,
nameIndex
)
)
{
int
attType
=
fAttType
[
chunk
]
[
index
]
;
if
(
attType
==
fStringPool
.
addSymbol
(
"ENUMERATION"
)
)
attType
=
fStringPool
.
addSymbol
(
"NMTOKEN"
)
;
return
fStringPool
.
toString
(
attType
)
;
}
if
(
++
index
==
CHUNK_SIZE
)
{
chunk
++
;
index
=
0
;
}
}
return
null
;
}
public
String
getValue
(
String
name
)
{
int
nameIndex
=
fStringPool
.
addSymbol
(
name
)
;
if
(
nameIndex
==
-
1
)
return
null
;
int
chunk
=
fAttributeListHandle
>
>
CHUNK_SHIFT
;
int
index
=
fAttributeListHandle
&
CHUNK_MASK
;
for
(
int
i
=
0
;
i
<
fAttributeListLength
;
i
++
)
{
if
(
fStringPool
.
equalNames
(
fAttName
[
chunk
]
[
index
]
,
nameIndex
)
)
return
fStringPool
.
toString
(
fAttValue
[
chunk
]
[
index
]
)
;
if
(
++
index
==
CHUNK_SIZE
)
{
chunk
++
;
index
=
0
;
}
}
return
null
;
}
private
boolean
ensureCapacity
(
int
chunk
,
int
index
)
{
try
{
return
fAttName
[
chunk
]
[
index
]
!=
0
;
}
catch
(
ArrayIndexOutOfBoundsException
ex
)
{
int
[
]
[
]
newIntArray
=
new
int
[
chunk
*
2
]
[
]
;
System
.
arraycopy
(
fAttPrefix
,
0
,
newIntArray
,
0
,
chunk
)
;
fAttPrefix
=
newIntArray
;
newIntArray
=
new
int
[
chunk
*
2
]
[
]
;
System
.
arraycopy
(
fAttLocalpart
,
0
,
newIntArray
,
0
,
chunk
)
;
fAttLocalpart
=
newIntArray
;
newIntArray
=
new
int
[
chunk
*
2
]
[
]
;
System
.
arraycopy
(
fAttName
,
0
,
newIntArray
,
0
,
chunk
)
;
fAttName
=
newIntArray
;
newIntArray
=
new
int
[
chunk
*
2
]
[
]
;
System
.
arraycopy
(
fAttURI
,
0
,
newIntArray
,
0
,
chunk
)
;
fAttURI
=
newIntArray
;
newIntArray
=
new
int
[
chunk
*
2
]
[
]
;
System
.
arraycopy
(
fAttValue
,
0
,
newIntArray
,
0
,
chunk
)
;
fAttValue
=
newIntArray
;
newIntArray
=
new
int
[
chunk
*
2
]
[
]
;
System
.
arraycopy
(
fAttType
,
0
,
newIntArray
,
0
,
chunk
)
;
fAttType
=
newIntArray
;
byte
[
]
[
]
newByteArray
=
new
byte
[
chunk
*
2
]
[
]
;
System
.
arraycopy
(
fAttFlags
,
0
,
newByteArray
,
0
,
chunk
)
;
fAttFlags
=
newByteArray
;
}
catch
(
NullPointerException
ex
)
{
}
fAttPrefix
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
fAttLocalpart
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
fAttName
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
fAttURI
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
fAttValue
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
fAttType
[
chunk
]
=
new
int
[
CHUNK_SIZE
]
;
fAttFlags
[
chunk
]
=
new
byte
[
CHUNK_SIZE
]
;
return
true
;
}
}
