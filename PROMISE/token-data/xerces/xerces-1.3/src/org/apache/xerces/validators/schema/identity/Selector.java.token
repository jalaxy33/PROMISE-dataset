package
org
.
apache
.
xerces
.
validators
.
schema
.
identity
;
import
org
.
apache
.
xerces
.
framework
.
XMLAttrList
;
import
org
.
apache
.
xerces
.
utils
.
NamespacesScope
;
import
org
.
apache
.
xerces
.
utils
.
QName
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
xml
.
sax
.
SAXException
;
public
class
Selector
{
protected
Selector
.
XPath
fXPath
;
protected
IdentityConstraint
fIdentityConstraint
;
public
Selector
(
Selector
.
XPath
xpath
,
IdentityConstraint
identityConstraint
)
{
fXPath
=
xpath
;
fIdentityConstraint
=
identityConstraint
;
}
public
org
.
apache
.
xerces
.
validators
.
schema
.
identity
.
XPath
getXPath
(
)
{
return
fXPath
;
}
public
IdentityConstraint
getIdentityConstraint
(
)
{
return
fIdentityConstraint
;
}
public
XPathMatcher
createMatcher
(
FieldActivator
activator
)
{
return
new
Selector
.
Matcher
(
fXPath
,
activator
)
;
}
public
String
toString
(
)
{
return
fXPath
.
toString
(
)
;
}
public
static
class
XPath
extends
org
.
apache
.
xerces
.
validators
.
schema
.
identity
.
XPath
{
public
XPath
(
String
xpath
,
StringPool
stringPool
,
NamespacesScope
context
)
throws
XPathException
{
super
(
"./"
+
xpath
,
stringPool
,
context
)
;
XPath
.
Axis
axis
=
fLocationPath
.
steps
[
fLocationPath
.
steps
.
length
-
1
]
.
axis
;
if
(
axis
.
type
==
axis
.
ATTRIBUTE
)
{
throw
new
XPathException
(
"selectors cannot select attributes"
)
;
}
}
}
protected
class
Matcher
extends
XPathMatcher
{
protected
FieldActivator
fFieldActivator
;
protected
int
fElementDepth
;
protected
int
fMatchedDepth
;
public
Matcher
(
Selector
.
XPath
xpath
,
FieldActivator
activator
)
{
super
(
xpath
)
;
fFieldActivator
=
activator
;
}
public
void
startDocumentFragment
(
StringPool
stringPool
,
NamespacesScope
namespacesScope
)
throws
Exception
{
super
.
startDocumentFragment
(
stringPool
,
namespacesScope
)
;
fElementDepth
=
0
;
fMatchedDepth
=
-
1
;
}
public
void
startElement
(
QName
element
,
XMLAttrList
attributes
,
int
handle
)
throws
Exception
{
super
.
startElement
(
element
,
attributes
,
handle
)
;
fElementDepth
++
;
if
(
isMatched
(
)
)
{
fMatchedDepth
=
fElementDepth
;
fFieldActivator
.
startValueScopeFor
(
fIdentityConstraint
)
;
int
count
=
fIdentityConstraint
.
getFieldCount
(
)
;
for
(
int
i
=
0
;
i
<
count
;
i
++
)
{
Field
field
=
fIdentityConstraint
.
getFieldAt
(
i
)
;
XPathMatcher
matcher
=
fFieldActivator
.
activateField
(
field
)
;
matcher
.
startElement
(
element
,
attributes
,
handle
)
;
}
}
}
public
void
endElement
(
QName
element
)
throws
Exception
{
super
.
endElement
(
element
)
;
if
(
fElementDepth
--
==
fMatchedDepth
)
{
fMatchedDepth
=
-
1
;
fFieldActivator
.
endValueScopeFor
(
fIdentityConstraint
)
;
}
}
}
}
