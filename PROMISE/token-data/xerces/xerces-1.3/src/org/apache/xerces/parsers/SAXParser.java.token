package
org
.
apache
.
xerces
.
parsers
;
import
org
.
apache
.
xerces
.
framework
.
XMLAttrList
;
import
org
.
apache
.
xerces
.
framework
.
XMLContentSpec
;
import
org
.
apache
.
xerces
.
framework
.
XMLDocumentHandler
;
import
org
.
apache
.
xerces
.
framework
.
XMLParser
;
import
org
.
apache
.
xerces
.
readers
.
XMLEntityHandler
;
import
org
.
apache
.
xerces
.
utils
.
QName
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
apache
.
xerces
.
validators
.
common
.
XMLAttributeDecl
;
import
org
.
apache
.
xerces
.
validators
.
common
.
XMLElementDecl
;
import
org
.
xml
.
sax
.
Attributes
;
import
org
.
xml
.
sax
.
AttributeList
;
import
org
.
xml
.
sax
.
ContentHandler
;
import
org
.
xml
.
sax
.
DocumentHandler
;
import
org
.
xml
.
sax
.
DTDHandler
;
import
org
.
xml
.
sax
.
EntityResolver
;
import
org
.
xml
.
sax
.
Parser
;
import
org
.
xml
.
sax
.
XMLReader
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
SAXNotRecognizedException
;
import
org
.
xml
.
sax
.
SAXNotSupportedException
;
import
org
.
xml
.
sax
.
ext
.
DeclHandler
;
import
org
.
xml
.
sax
.
ext
.
LexicalHandler
;
import
org
.
xml
.
sax
.
helpers
.
AttributesImpl
;
public
class
SAXParser
extends
XMLParser
implements
XMLDocumentHandler
,
XMLDocumentHandler
.
DTDHandler
,
Parser
,
XMLReader
{
private
static
final
String
RECOGNIZED_FEATURES
[
]
=
{
"http://xml.org/sax/features/namespace-prefixes"
,
"http://xml.org/sax/features/string-interning"
,
}
;
private
static
final
String
RECOGNIZED_PROPERTIES
[
]
=
{
"http://xml.org/sax/properties/lexical-handler"
,
"http://xml.org/sax/properties/declaration-handler"
,
"http://xml.org/sax/properties/dom-node"
,
}
;
private
static
final
boolean
DEBUG_CALLBACKS
=
false
;
private
DocumentHandler
fDocumentHandler
;
private
org
.
xml
.
sax
.
DTDHandler
fDTDHandler
;
private
ContentHandler
fContentHandler
;
private
DeclHandler
fDeclHandler
;
private
LexicalHandler
fLexicalHandler
;
private
boolean
fNamespacePrefixes
=
false
;
private
transient
AttributesImpl
fAttributes
=
new
AttributesImpl
(
)
;
public
SAXParser
(
)
{
initHandlers
(
true
,
this
,
this
)
;
}
protected
SAXParser
(
StringPool
stringPool
)
{
super
(
stringPool
)
;
initHandlers
(
true
,
this
,
this
)
;
}
public
String
[
]
getFeaturesRecognized
(
)
{
String
superRecognized
[
]
=
super
.
getFeaturesRecognized
(
)
;
String
thisRecognized
[
]
=
RECOGNIZED_FEATURES
;
int
thisLength
=
thisRecognized
.
length
;
if
(
thisLength
==
0
)
{
return
superRecognized
;
}
int
superLength
=
superRecognized
.
length
;
if
(
superLength
==
0
)
{
return
thisRecognized
;
}
String
recognized
[
]
=
new
String
[
superLength
+
thisLength
]
;
System
.
arraycopy
(
superRecognized
,
0
,
recognized
,
0
,
superLength
)
;
System
.
arraycopy
(
thisRecognized
,
0
,
recognized
,
superLength
,
thisLength
)
;
return
recognized
;
}
public
String
[
]
getPropertiesRecognized
(
)
{
String
superRecognized
[
]
=
super
.
getPropertiesRecognized
(
)
;
String
thisRecognized
[
]
=
RECOGNIZED_PROPERTIES
;
int
thisLength
=
thisRecognized
.
length
;
if
(
thisLength
==
0
)
{
return
superRecognized
;
}
int
superLength
=
superRecognized
.
length
;
if
(
superLength
==
0
)
{
return
thisRecognized
;
}
String
recognized
[
]
=
new
String
[
superLength
+
thisLength
]
;
System
.
arraycopy
(
superRecognized
,
0
,
recognized
,
0
,
superLength
)
;
System
.
arraycopy
(
thisRecognized
,
0
,
recognized
,
superLength
,
thisLength
)
;
return
recognized
;
}
protected
void
setDeclHandler
(
DeclHandler
handler
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"PAR011 Feature: http://xml.org/sax/properties/declaration-handler"
+
" is not supported during parse."
+
"\nhttp://xml.org/sax/properties/declaration-handler"
)
;
}
fDeclHandler
=
handler
;
}
protected
DeclHandler
getDeclHandler
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fDeclHandler
;
}
protected
void
setLexicalHandler
(
LexicalHandler
handler
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"PAR011 Feature: http://xml.org/sax/properties/lexical-handler"
+
" is not supported during parse."
+
"\nhttp://xml.org/sax/properties/lexical-handler"
)
;
}
fLexicalHandler
=
handler
;
}
protected
LexicalHandler
getLexicalHandler
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fLexicalHandler
;
}
public
void
setDocumentHandler
(
DocumentHandler
handler
)
{
fDocumentHandler
=
handler
;
}
public
void
setDTDHandler
(
org
.
xml
.
sax
.
DTDHandler
handler
)
{
fDTDHandler
=
handler
;
}
public
org
.
xml
.
sax
.
DTDHandler
getDTDHandler
(
)
{
return
fDTDHandler
;
}
protected
void
setNamespacePrefixes
(
boolean
process
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"PAR004 Cannot setFeature(http://xml.org/sax/features/namespace-prefixes): parse is in progress.\n"
+
"http://xml.org/sax/features/namespace-prefixes"
)
;
}
fNamespacePrefixes
=
process
;
}
protected
boolean
getNamespacePrefixes
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fNamespacePrefixes
;
}
public
void
setFeature
(
String
featureId
,
boolean
state
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
featureId
.
startsWith
(
SAX2_FEATURES_PREFIX
)
)
{
String
feature
=
featureId
.
substring
(
SAX2_FEATURES_PREFIX
.
length
(
)
)
;
if
(
feature
.
equals
(
"namespace-prefixes"
)
)
{
setNamespacePrefixes
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"string-interning"
)
)
{
if
(
state
)
{
throw
new
SAXNotSupportedException
(
"PAR018 "
+
state
+
" state for feature \""
+
featureId
+
"\" is not supported.\n"
+
state
+
'\t'
+
featureId
)
;
}
return
;
}
}
super
.
setFeature
(
featureId
,
state
)
;
}
public
boolean
getFeature
(
String
featureId
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
featureId
.
startsWith
(
SAX2_FEATURES_PREFIX
)
)
{
String
feature
=
featureId
.
substring
(
SAX2_FEATURES_PREFIX
.
length
(
)
)
;
if
(
feature
.
equals
(
"namespace-prefixes"
)
)
{
return
getNamespacePrefixes
(
)
;
}
if
(
feature
.
equals
(
"string-interning"
)
)
{
return
false
;
}
}
return
super
.
getFeature
(
featureId
)
;
}
public
void
setProperty
(
String
propertyId
,
Object
value
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
propertyId
.
startsWith
(
SAX2_PROPERTIES_PREFIX
)
)
{
String
property
=
propertyId
.
substring
(
SAX2_PROPERTIES_PREFIX
.
length
(
)
)
;
if
(
property
.
equals
(
"lexical-handler"
)
)
{
try
{
setLexicalHandler
(
(
LexicalHandler
)
value
)
;
}
catch
(
ClassCastException
e
)
{
throw
new
SAXNotSupportedException
(
"PAR012 For propertyID \""
+
propertyId
+
"\", the value \""
+
value
+
"\" cannot be cast to LexicalHandler."
+
'\n'
+
propertyId
+
'\t'
+
value
+
"\tLexicalHandler"
)
;
}
return
;
}
if
(
property
.
equals
(
"declaration-handler"
)
)
{
try
{
setDeclHandler
(
(
DeclHandler
)
value
)
;
}
catch
(
ClassCastException
e
)
{
throw
new
SAXNotSupportedException
(
"PAR012 For propertyID \""
+
propertyId
+
"\", the value \""
+
value
+
"\" cannot be cast to DeclHandler."
+
'\n'
+
propertyId
+
'\t'
+
value
+
"\tDeclHandler"
)
;
}
return
;
}
if
(
property
.
equals
(
"dom-node"
)
)
{
throw
new
SAXNotSupportedException
(
"PAR013 Property \""
+
propertyId
+
"\" is read only."
+
'\n'
+
propertyId
)
;
}
}
super
.
setProperty
(
propertyId
,
value
)
;
}
public
Object
getProperty
(
String
propertyId
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
propertyId
.
startsWith
(
SAX2_PROPERTIES_PREFIX
)
)
{
String
property
=
propertyId
.
substring
(
SAX2_PROPERTIES_PREFIX
.
length
(
)
)
;
if
(
property
.
equals
(
"lexical-handler"
)
)
{
return
getLexicalHandler
(
)
;
}
if
(
property
.
equals
(
"declaration-handler"
)
)
{
return
getDeclHandler
(
)
;
}
if
(
property
.
equals
(
"dom-node"
)
)
{
throw
new
SAXNotSupportedException
(
"PAR014 Cannot getProperty(\""
+
propertyId
+
"\". No DOM Tree exists.\n"
+
propertyId
)
;
}
}
return
super
.
getProperty
(
propertyId
)
;
}
public
void
setContentHandler
(
ContentHandler
handler
)
{
if
(
handler
==
null
)
{
throw
new
NullPointerException
(
)
;
}
fContentHandler
=
handler
;
}
public
ContentHandler
getContentHandler
(
)
{
return
fContentHandler
;
}
public
void
startDTD
(
QName
rootElement
,
int
publicId
,
int
systemId
)
throws
Exception
{
if
(
fLexicalHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
rootElement
.
rawname
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startDTD("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startDTD
(
name
,
pubid
,
sysid
)
;
}
}
}
public
void
endDTD
(
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endDTD()"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endDTD
(
)
;
}
}
public
void
elementDecl
(
QName
elementDecl
,
int
contentSpecType
,
int
contentSpecIndex
,
XMLContentSpec
.
Provider
contentSpecProvider
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
elementDecl
.
rawname
)
;
String
contentModel
;
if
(
contentSpecType
==
XMLElementDecl
.
TYPE_ANY
)
{
contentModel
=
"ANY"
;
}
else
if
(
contentSpecType
==
XMLElementDecl
.
TYPE_EMPTY
)
{
contentModel
=
"EMPTY"
;
}
else
{
contentModel
=
XMLContentSpec
.
toString
(
contentSpecProvider
,
fStringPool
,
contentSpecIndex
)
;
}
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"elementDecl("
+
name
+
", "
+
contentModel
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
elementDecl
(
name
,
contentModel
)
;
}
}
}
public
void
attlistDecl
(
QName
elementDecl
,
QName
attributeDecl
,
int
attType
,
boolean
attList
,
String
enumString
,
int
attDefaultType
,
int
attDefaultValue
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
eName
=
fStringPool
.
toString
(
elementDecl
.
rawname
)
;
String
aName
=
fStringPool
.
toString
(
attributeDecl
.
rawname
)
;
String
aType
=
enumString
;
if
(
attType
!=
XMLAttributeDecl
.
TYPE_ENUMERATION
)
{
switch
(
attType
)
{
case
XMLAttributeDecl
.
TYPE_CDATA
:
{
aType
=
"CDATA"
;
break
;
}
case
XMLAttributeDecl
.
TYPE_ENTITY
:
{
aType
=
attList
?
"ENTITIES"
:
"ENTITY"
;
break
;
}
case
XMLAttributeDecl
.
TYPE_ID
:
{
aType
=
"ID"
;
break
;
}
case
XMLAttributeDecl
.
TYPE_IDREF
:
{
aType
=
attList
?
"IDREFS"
:
"IDREF"
;
break
;
}
case
XMLAttributeDecl
.
TYPE_NMTOKEN
:
{
aType
=
attList
?
"NMTOKENS"
:
"NMTOKEN"
;
break
;
}
case
XMLAttributeDecl
.
TYPE_NOTATION
:
{
aType
=
"NOTATION "
+
enumString
;
break
;
}
}
}
String
aDefaultType
=
null
;
switch
(
attDefaultType
)
{
case
XMLAttributeDecl
.
DEFAULT_TYPE_FIXED
:
{
aDefaultType
=
"#FIXED"
;
break
;
}
case
XMLAttributeDecl
.
DEFAULT_TYPE_IMPLIED
:
{
aDefaultType
=
"#IMPLIED"
;
break
;
}
case
XMLAttributeDecl
.
DEFAULT_TYPE_REQUIRED
:
{
aDefaultType
=
"#REQUIRED"
;
break
;
}
}
String
aDefaultValue
=
fStringPool
.
toString
(
attDefaultValue
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"attributeDecl("
+
eName
+
", "
+
aName
+
", "
+
aType
+
", "
+
aDefaultType
+
", "
+
aDefaultValue
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
attributeDecl
(
eName
,
aName
,
aType
,
aDefaultType
,
aDefaultValue
)
;
}
}
}
public
void
internalPEDecl
(
int
entityName
,
int
entityValue
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
"%"
+
fStringPool
.
toString
(
entityName
)
;
String
value
=
fStringPool
.
toString
(
entityValue
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"internalEntityDecl("
+
name
+
", "
+
value
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
internalEntityDecl
(
name
,
value
)
;
}
}
}
public
void
externalPEDecl
(
int
entityName
,
int
publicId
,
int
systemId
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
"%"
+
fStringPool
.
toString
(
entityName
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"externalEntityDecl("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
externalEntityDecl
(
name
,
pubid
,
sysid
)
;
}
}
}
public
void
internalEntityDecl
(
int
entityName
,
int
entityValue
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
entityName
)
;
String
value
=
fStringPool
.
toString
(
entityValue
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"internalEntityDecl("
+
name
+
", "
+
value
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
internalEntityDecl
(
name
,
value
)
;
}
}
}
public
void
externalEntityDecl
(
int
entityName
,
int
publicId
,
int
systemId
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
entityName
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"externalEntityDecl("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
externalEntityDecl
(
name
,
pubid
,
sysid
)
;
}
}
}
public
void
unparsedEntityDecl
(
int
entityName
,
int
publicId
,
int
systemId
,
int
notationName
)
throws
Exception
{
if
(
fDTDHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
entityName
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
String
notation
=
fStringPool
.
toString
(
notationName
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"unparsedEntityDecl("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
", "
+
notation
+
")"
)
;
}
if
(
fDTDHandler
!=
null
)
{
fDTDHandler
.
unparsedEntityDecl
(
name
,
pubid
,
sysid
,
notation
)
;
}
}
}
public
void
notationDecl
(
int
notationName
,
int
publicId
,
int
systemId
)
throws
Exception
{
if
(
fDTDHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
notationName
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"notationDecl("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
")"
)
;
}
if
(
fDTDHandler
!=
null
)
{
fDTDHandler
.
notationDecl
(
name
,
pubid
,
sysid
)
;
}
}
}
public
void
startDocument
(
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"setDocumentLocator(<locator>)"
)
;
System
.
err
.
println
(
"startDocument()"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
setDocumentLocator
(
getLocator
(
)
)
;
fDocumentHandler
.
startDocument
(
)
;
}
if
(
fContentHandler
!=
null
)
{
fContentHandler
.
setDocumentLocator
(
getLocator
(
)
)
;
fContentHandler
.
startDocument
(
)
;
}
}
public
void
endDocument
(
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endDocument()"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
endDocument
(
)
;
}
if
(
fContentHandler
!=
null
)
{
fContentHandler
.
endDocument
(
)
;
}
}
public
void
xmlDecl
(
int
versionIndex
,
int
encodingIndex
,
int
standaloneIndex
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
String
notes
=
""
;
if
(
versionIndex
!=
-
1
)
notes
+=
" version='"
+
fStringPool
.
toString
(
versionIndex
)
+
"'"
;
if
(
encodingIndex
!=
-
1
)
notes
+=
" encoding='"
+
fStringPool
.
toString
(
encodingIndex
)
+
"'"
;
if
(
standaloneIndex
!=
-
1
)
notes
+=
" standalone='"
+
fStringPool
.
toString
(
standaloneIndex
)
+
"'"
;
System
.
err
.
println
(
"xmlDecl(<?xml"
+
notes
+
"?>)"
)
;
}
fStringPool
.
releaseString
(
versionIndex
)
;
fStringPool
.
releaseString
(
encodingIndex
)
;
fStringPool
.
releaseString
(
standaloneIndex
)
;
}
public
void
textDecl
(
int
versionIndex
,
int
encodingIndex
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
String
notes
=
""
;
if
(
versionIndex
!=
-
1
)
notes
+=
" version='"
+
fStringPool
.
toString
(
versionIndex
)
+
"'"
;
if
(
encodingIndex
!=
-
1
)
notes
+=
" encoding='"
+
fStringPool
.
toString
(
encodingIndex
)
+
"'"
;
System
.
err
.
println
(
"textDecl(<?xml"
+
notes
+
"?>)"
)
;
}
fStringPool
.
releaseString
(
versionIndex
)
;
fStringPool
.
releaseString
(
encodingIndex
)
;
}
public
void
startNamespaceDeclScope
(
int
prefix
,
int
uri
)
throws
Exception
{
if
(
fContentHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
p
=
fStringPool
.
toString
(
prefix
)
;
String
ns
=
fStringPool
.
toString
(
uri
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startNamespaceDeclScope("
+
p
+
", "
+
ns
+
")"
)
;
}
if
(
fContentHandler
!=
null
)
{
fContentHandler
.
startPrefixMapping
(
p
,
ns
)
;
}
}
}
public
void
endNamespaceDeclScope
(
int
prefix
)
throws
Exception
{
if
(
fContentHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
p
=
fStringPool
.
toString
(
prefix
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endNamespaceDeclScope("
+
p
+
")"
)
;
}
if
(
fContentHandler
!=
null
)
{
fContentHandler
.
endPrefixMapping
(
p
)
;
}
}
}
public
void
internalSubset
(
int
internalSubset
)
{
}
public
void
startElement
(
QName
element
,
XMLAttrList
attrList
,
int
attrListIndex
)
throws
Exception
{
String
name
=
fStringPool
.
toString
(
element
.
rawname
)
;
AttributeList
attrs
=
attrList
.
getAttributeList
(
attrListIndex
)
;
if
(
DEBUG_CALLBACKS
)
{
String
atts
=
attrs
.
getLength
(
)
>
0
?
""
:
" "
;
for
(
int
i
=
0
;
i
<
attrs
.
getLength
(
)
;
i
++
)
{
atts
+=
" "
+
attrs
.
getName
(
i
)
+
"='"
+
attrs
.
getValue
(
i
)
+
"'"
;
}
System
.
err
.
println
(
"startElement("
+
name
+
","
+
atts
+
")"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
startElement
(
name
,
attrs
)
;
}
if
(
fContentHandler
!=
null
)
{
boolean
namespaces
=
getNamespaces
(
)
;
int
uriIndex
=
element
.
uri
;
String
uri
=
uriIndex
!=
-
1
&&
namespaces
?
fStringPool
.
toString
(
uriIndex
)
:
""
;
int
localIndex
=
element
.
localpart
;
String
local
=
localIndex
!=
-
1
&&
namespaces
?
fStringPool
.
toString
(
localIndex
)
:
""
;
String
raw
=
name
;
fAttributes
.
clear
(
)
;
for
(
int
attrIndex
=
attrList
.
getFirstAttr
(
attrListIndex
)
;
attrIndex
!=
-
1
;
attrIndex
=
attrList
.
getNextAttr
(
attrIndex
)
)
{
int
attrNameIndex
=
attrList
.
getAttrName
(
attrIndex
)
;
int
attrUriIndex
=
attrList
.
getAttrURI
(
attrIndex
)
;
String
attrUri
=
attrUriIndex
!=
-
1
&&
namespaces
?
fStringPool
.
toString
(
attrUriIndex
)
:
""
;
int
attrLocalIndex
=
attrList
.
getAttrLocalpart
(
attrIndex
)
;
String
attrLocal
=
attrLocalIndex
!=
-
1
&&
namespaces
?
fStringPool
.
toString
(
attrLocalIndex
)
:
""
;
String
attrRaw
=
fStringPool
.
toString
(
attrNameIndex
)
;
String
attrType
=
fStringPool
.
toString
(
attrList
.
getAttType
(
attrIndex
)
)
;
String
attrValue
=
fStringPool
.
toString
(
attrList
.
getAttValue
(
attrIndex
)
)
;
int
attrPrefix
=
attrList
.
getAttrPrefix
(
attrIndex
)
;
boolean
namespacePrefixes
=
getNamespacePrefixes
(
)
;
if
(
!
namespaces
||
namespacePrefixes
||
(
attrPrefix
!=
fStringPool
.
addSymbol
(
"xmlns"
)
&&
attrLocalIndex
!=
fStringPool
.
addSymbol
(
"xmlns"
)
)
)
fAttributes
.
addAttribute
(
attrUri
,
attrLocal
,
attrRaw
,
attrType
,
attrValue
)
;
}
fContentHandler
.
startElement
(
uri
,
local
,
raw
,
fAttributes
)
;
}
attrList
.
releaseAttrList
(
attrListIndex
)
;
}
public
void
endElement
(
QName
element
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endElement("
+
fStringPool
.
toString
(
element
.
rawname
)
+
")"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
endElement
(
fStringPool
.
toString
(
element
.
rawname
)
)
;
}
if
(
fContentHandler
!=
null
)
{
boolean
namespaces
=
getNamespaces
(
)
;
int
uriIndex
=
element
.
uri
;
String
uri
=
uriIndex
!=
-
1
&&
namespaces
?
fStringPool
.
toString
(
uriIndex
)
:
""
;
int
localIndex
=
element
.
localpart
;
String
local
=
localIndex
!=
-
1
&&
namespaces
?
fStringPool
.
toString
(
localIndex
)
:
""
;
String
raw
=
fStringPool
.
toString
(
element
.
rawname
)
;
fContentHandler
.
endElement
(
uri
,
local
,
raw
)
;
}
}
public
void
startEntityReference
(
int
entityName
,
int
entityType
,
int
entityContext
)
throws
Exception
{
if
(
fLexicalHandler
!=
null
||
DEBUG_CALLBACKS
)
{
switch
(
entityType
)
{
case
XMLEntityHandler
.
ENTITYTYPE_INTERNAL_PE
:
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL_PE
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startEntity(%"
+
fStringPool
.
toString
(
entityName
)
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startEntity
(
"%"
+
fStringPool
.
toString
(
entityName
)
)
;
}
break
;
case
XMLEntityHandler
.
ENTITYTYPE_INTERNAL
:
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startEntity("
+
fStringPool
.
toString
(
entityName
)
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startEntity
(
fStringPool
.
toString
(
entityName
)
)
;
}
break
;
case
XMLEntityHandler
.
ENTITYTYPE_UNPARSED
:
throw
new
RuntimeException
(
"PAR015 startEntityReference(): ENTITYTYPE_UNPARSED"
)
;
case
XMLEntityHandler
.
ENTITYTYPE_DOCUMENT
:
break
;
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL_SUBSET
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startEntity(\"[dtd]\")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startEntity
(
"[dtd]"
)
;
}
break
;
}
}
}
public
void
endEntityReference
(
int
entityName
,
int
entityType
,
int
entityContext
)
throws
Exception
{
if
(
fLexicalHandler
!=
null
||
DEBUG_CALLBACKS
)
{
switch
(
entityType
)
{
case
XMLEntityHandler
.
ENTITYTYPE_INTERNAL_PE
:
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL_PE
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endEntity(%"
+
fStringPool
.
toString
(
entityName
)
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endEntity
(
"%"
+
fStringPool
.
toString
(
entityName
)
)
;
}
break
;
case
XMLEntityHandler
.
ENTITYTYPE_INTERNAL
:
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endEntity("
+
fStringPool
.
toString
(
entityName
)
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endEntity
(
fStringPool
.
toString
(
entityName
)
)
;
}
break
;
case
XMLEntityHandler
.
ENTITYTYPE_UNPARSED
:
throw
new
RuntimeException
(
"PAR016 endEntityReference(): ENTITYTYPE_UNPARSED"
)
;
case
XMLEntityHandler
.
ENTITYTYPE_DOCUMENT
:
break
;
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL_SUBSET
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endEntity(\"[dtd]\")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endEntity
(
"[dtd]"
)
;
}
break
;
}
}
}
public
void
startCDATA
(
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startCDATA()"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startCDATA
(
)
;
}
}
public
void
endCDATA
(
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endCDATA()"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endCDATA
(
)
;
}
}
public
void
characters
(
int
dataIndex
)
throws
Exception
{
throw
new
RuntimeException
(
"PAR017 cannot happen 5\n5"
)
;
}
public
void
ignorableWhitespace
(
int
dataIndex
)
throws
Exception
{
throw
new
RuntimeException
(
"PAR017 cannot happen 6\n6"
)
;
}
public
void
processingInstruction
(
int
piTarget
,
int
piData
)
throws
Exception
{
if
(
fDocumentHandler
!=
null
||
fContentHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
target
=
fStringPool
.
orphanString
(
piTarget
)
;
String
data
=
piData
==
-
1
?
""
:
fStringPool
.
orphanString
(
piData
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"processingInstruction("
+
target
+
", "
+
data
+
")"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
processingInstruction
(
target
,
data
)
;
}
if
(
fContentHandler
!=
null
)
{
fContentHandler
.
processingInstruction
(
target
,
data
)
;
}
}
else
{
fStringPool
.
releaseString
(
piTarget
)
;
fStringPool
.
releaseString
(
piData
)
;
}
}
public
void
comment
(
int
dataIndex
)
throws
Exception
{
if
(
fLexicalHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
data
=
fStringPool
.
orphanString
(
dataIndex
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"comment("
+
data
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
comment
(
data
.
toCharArray
(
)
,
0
,
data
.
length
(
)
)
;
}
}
else
{
fStringPool
.
releaseString
(
dataIndex
)
;
}
}
public
void
characters
(
char
ch
[
]
,
int
start
,
int
length
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"characters(<char-data>) length "
+
length
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
characters
(
ch
,
start
,
length
)
;
}
if
(
fContentHandler
!=
null
)
{
fContentHandler
.
characters
(
ch
,
start
,
length
)
;
}
}
public
void
ignorableWhitespace
(
char
ch
[
]
,
int
start
,
int
length
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"ignorableWhitespace(<white-space>)"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
ignorableWhitespace
(
ch
,
start
,
length
)
;
}
if
(
fContentHandler
!=
null
)
{
fContentHandler
.
ignorableWhitespace
(
ch
,
start
,
length
)
;
}
}
}
