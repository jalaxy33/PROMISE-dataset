package
org
.
apache
.
xerces
.
framework
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Reader
;
import
java
.
util
.
Locale
;
import
org
.
apache
.
xerces
.
readers
.
DefaultEntityHandler
;
import
org
.
apache
.
xerces
.
readers
.
XMLDeclRecognizer
;
import
org
.
apache
.
xerces
.
readers
.
XMLEntityHandler
;
import
org
.
apache
.
xerces
.
readers
.
XMLEntityReaderFactory
;
import
org
.
apache
.
xerces
.
utils
.
ChunkyCharArray
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
apache
.
xerces
.
utils
.
XMLMessageProvider
;
import
org
.
apache
.
xerces
.
utils
.
XMLMessages
;
import
org
.
apache
.
xerces
.
utils
.
ImplementationMessages
;
import
org
.
apache
.
xerces
.
validators
.
common
.
GrammarResolver
;
import
org
.
apache
.
xerces
.
validators
.
common
.
GrammarResolverImpl
;
import
org
.
apache
.
xerces
.
validators
.
common
.
XMLValidator
;
import
org
.
apache
.
xerces
.
validators
.
datatype
.
DatatypeMessageProvider
;
import
org
.
apache
.
xerces
.
validators
.
datatype
.
DatatypeValidatorFactoryImpl
;
import
org
.
apache
.
xerces
.
validators
.
schema
.
SchemaMessageProvider
;
import
org
.
xml
.
sax
.
EntityResolver
;
import
org
.
xml
.
sax
.
ErrorHandler
;
import
org
.
xml
.
sax
.
InputSource
;
import
org
.
xml
.
sax
.
Locator
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
SAXNotRecognizedException
;
import
org
.
xml
.
sax
.
SAXNotSupportedException
;
import
org
.
xml
.
sax
.
SAXParseException
;
public
abstract
class
XMLParser
implements
XMLErrorReporter
,
XMLDocumentHandler
.
DTDHandler
{
protected
static
final
String
SAX2_FEATURES_PREFIX
=
"http://xml.org/sax/features/"
;
protected
static
final
String
SAX2_PROPERTIES_PREFIX
=
"http://xml.org/sax/properties/"
;
protected
static
final
String
XERCES_FEATURES_PREFIX
=
"http://apache.org/xml/features/"
;
protected
static
final
String
XERCES_PROPERTIES_PREFIX
=
"http://apache.org/xml/properties/"
;
private
static
final
String
RECOGNIZED_FEATURES
[
]
=
{
"http://xml.org/sax/features/validation"
,
"http://xml.org/sax/features/external-general-entities"
,
"http://xml.org/sax/features/external-parameter-entities"
,
"http://xml.org/sax/features/namespaces"
,
"http://apache.org/xml/features/validation/schema"
,
"http://apache.org/xml/features/validation/dynamic"
,
"http://apache.org/xml/features/validation/default-attribute-values"
,
"http://apache.org/xml/features/validation/validate-content-models"
,
"http://apache.org/xml/features/validation/validate-datatypes"
,
"http://apache.org/xml/features/validation/warn-on-duplicate-attdef"
,
"http://apache.org/xml/features/validation/warn-on-undeclared-elemdef"
,
"http://apache.org/xml/features/allow-java-encodings"
,
"http://apache.org/xml/features/continue-after-fatal-error"
,
"http://apache.org/xml/features/nonvalidating/load-dtd-grammar"
,
"http://apache.org/xml/features/nonvalidating/load-external-dtd"
}
;
private
static
final
String
RECOGNIZED_PROPERTIES
[
]
=
{
"http://xml.org/sax/properties/xml-string"
,
}
;
private
static
final
boolean
PRINT_EXCEPTION_STACK_TRACE
=
false
;
protected
GrammarResolver
fGrammarResolver
=
null
;
protected
boolean
fParseInProgress
=
false
;
private
boolean
fNeedReset
=
false
;
private
boolean
fContinueAfterFatalError
=
false
;
private
ErrorHandler
fErrorHandler
=
null
;
private
Locale
fLocale
=
null
;
private
static
XMLMessageProvider
fgXMLMessages
=
new
XMLMessages
(
)
;
private
static
XMLMessageProvider
fgImplementationMessages
=
new
ImplementationMessages
(
)
;
private
static
XMLMessageProvider
fgSchemaMessages
=
new
SchemaMessageProvider
(
)
;
private
static
XMLMessageProvider
fgDatatypeMessages
=
new
DatatypeMessageProvider
(
)
;
protected
StringPool
fStringPool
=
null
;
protected
XMLErrorReporter
fErrorReporter
=
null
;
protected
DefaultEntityHandler
fEntityHandler
=
null
;
protected
XMLDocumentScanner
fScanner
=
null
;
protected
XMLValidator
fValidator
=
null
;
protected
XMLParser
(
)
{
this
(
new
StringPool
(
)
)
;
}
protected
XMLParser
(
StringPool
stringPool
)
{
fStringPool
=
stringPool
;
fErrorReporter
=
this
;
fEntityHandler
=
new
DefaultEntityHandler
(
fStringPool
,
fErrorReporter
)
;
fScanner
=
new
XMLDocumentScanner
(
fStringPool
,
fErrorReporter
,
fEntityHandler
,
new
ChunkyCharArray
(
fStringPool
)
)
;
fValidator
=
new
XMLValidator
(
fStringPool
,
fErrorReporter
,
fEntityHandler
,
fScanner
)
;
fGrammarResolver
=
new
GrammarResolverImpl
(
)
;
fScanner
.
setGrammarResolver
(
fGrammarResolver
)
;
fValidator
.
setGrammarResolver
(
fGrammarResolver
)
;
try
{
setNamespaces
(
true
)
;
}
catch
(
Exception
e
)
{
}
}
protected
void
initHandlers
(
boolean
sendCharDataAsCharArray
,
XMLDocumentHandler
docHandler
,
XMLDocumentHandler
.
DTDHandler
dtdHandler
)
{
fValidator
.
initHandlers
(
sendCharDataAsCharArray
,
docHandler
,
dtdHandler
)
;
fScanner
.
setDTDHandler
(
this
)
;
}
public
String
[
]
getFeaturesRecognized
(
)
{
return
RECOGNIZED_FEATURES
;
}
public
boolean
isFeatureRecognized
(
String
featureId
)
{
String
[
]
recognizedFeatures
=
getFeaturesRecognized
(
)
;
for
(
int
i
=
0
;
i
<
recognizedFeatures
.
length
;
i
++
)
{
if
(
featureId
.
equals
(
recognizedFeatures
[
i
]
)
)
return
true
;
}
return
false
;
}
public
String
[
]
getPropertiesRecognized
(
)
{
return
RECOGNIZED_PROPERTIES
;
}
public
boolean
isPropertyRecognized
(
String
propertyId
)
{
String
[
]
recognizedProperties
=
getPropertiesRecognized
(
)
;
for
(
int
i
=
0
;
i
<
recognizedProperties
.
length
;
i
++
)
{
if
(
propertyId
.
equals
(
recognizedProperties
[
i
]
)
)
return
true
;
}
return
false
;
}
public
boolean
parseSomeSetup
(
InputSource
source
)
throws
Exception
{
if
(
fNeedReset
)
resetOrCopy
(
)
;
fParseInProgress
=
true
;
fNeedReset
=
true
;
return
fEntityHandler
.
startReadingFromDocument
(
source
)
;
}
public
boolean
parseSome
(
)
throws
Exception
{
if
(
!
fScanner
.
parseSome
(
false
)
)
{
fParseInProgress
=
false
;
return
false
;
}
return
true
;
}
public
void
reset
(
)
throws
Exception
{
fGrammarResolver
.
clearGrammarResolver
(
)
;
fStringPool
.
reset
(
)
;
fEntityHandler
.
reset
(
fStringPool
)
;
fScanner
.
reset
(
fStringPool
,
new
ChunkyCharArray
(
fStringPool
)
)
;
fValidator
.
reset
(
fStringPool
)
;
fNeedReset
=
false
;
}
public
final
Locator
getLocator
(
)
{
return
fEntityHandler
;
}
public
void
setReaderFactory
(
XMLEntityReaderFactory
readerFactory
)
{
fEntityHandler
.
setReaderFactory
(
readerFactory
)
;
}
public
void
addRecognizer
(
XMLDeclRecognizer
recognizer
)
{
fEntityHandler
.
addRecognizer
(
recognizer
)
;
}
protected
void
setValidation
(
boolean
validate
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"PAR004 Cannot setFeature(http://xml.org/sax/features/validation): parse is in progress.\n"
+
"http://xml.org/sax/features/validation"
)
;
}
try
{
fScanner
.
setValidationEnabled
(
validate
)
;
fValidator
.
setValidationEnabled
(
validate
)
;
}
catch
(
Exception
ex
)
{
throw
new
SAXNotSupportedException
(
ex
.
getMessage
(
)
)
;
}
}
protected
boolean
getValidation
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fValidator
.
getValidationEnabled
(
)
;
}
protected
void
setExternalGeneralEntities
(
boolean
expand
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"PAR004 Cannot setFeature(http://xml.org/sax/features/external-general-entities): parse is in progress.\n"
+
"http://xml.org/sax/features/external-general-entities"
)
;
}
if
(
!
expand
)
{
throw
new
SAXNotSupportedException
(
"http://xml.org/sax/features/external-general-entities"
)
;
}
}
protected
boolean
getExternalGeneralEntities
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
true
;
}
protected
void
setExternalParameterEntities
(
boolean
expand
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"PAR004 Cannot setFeature(http://xml.org/sax/features/external-general-entities): parse is in progress.\n"
+
"http://xml.org/sax/features/external-general-entities"
)
;
}
if
(
!
expand
)
{
throw
new
SAXNotSupportedException
(
"http://xml.org/sax/features/external-parameter-entities"
)
;
}
}
protected
boolean
getExternalParameterEntities
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
true
;
}
protected
void
setNamespaces
(
boolean
process
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"PAR004 Cannot setFeature(http://xml.org/sax/features/namespaces): parse is in progress.\n"
+
"http://xml.org/sax/features/namespaces"
)
;
}
fScanner
.
setNamespacesEnabled
(
process
)
;
fValidator
.
setNamespacesEnabled
(
process
)
;
}
protected
boolean
getNamespaces
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fValidator
.
getNamespacesEnabled
(
)
;
}
protected
void
setValidationSchema
(
boolean
schema
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"http://apache.org/xml/features/validation/schema: parse is in progress"
)
;
}
fValidator
.
setSchemaValidationEnabled
(
schema
)
;
}
protected
boolean
getValidationSchema
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fValidator
.
getSchemaValidationEnabled
(
)
;
}
protected
void
setValidationDynamic
(
boolean
dynamic
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"http://apache.org/xml/features/validation/dynamic: parse is in progress"
)
;
}
try
{
fValidator
.
setDynamicValidationEnabled
(
dynamic
)
;
}
catch
(
Exception
ex
)
{
throw
new
SAXNotSupportedException
(
ex
.
getMessage
(
)
)
;
}
}
protected
boolean
getValidationDynamic
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fValidator
.
getDynamicValidationEnabled
(
)
;
}
protected
void
setNormalizeAttributeValues
(
boolean
normalize
)
{
fValidator
.
setNormalizeAttributeValues
(
normalize
)
;
}
protected
void
setLoadDTDGrammar
(
boolean
loadDTDGrammar
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"http://apache.org/xml/features/nonvalidating/load-dtd-grammar: parse is in progress"
)
;
}
try
{
fValidator
.
setLoadDTDGrammar
(
loadDTDGrammar
)
;
}
catch
(
Exception
ex
)
{
throw
new
SAXNotSupportedException
(
ex
.
getMessage
(
)
)
;
}
}
protected
boolean
getLoadDTDGrammar
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fValidator
.
getLoadDTDGrammar
(
)
;
}
protected
void
setLoadExternalDTD
(
boolean
loadExternalDTD
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"http://apache.org/xml/features/nonvalidating/load-external-dtd: parse is in progress"
)
;
}
try
{
fScanner
.
setLoadExternalDTD
(
loadExternalDTD
)
;
}
catch
(
Exception
ex
)
{
throw
new
SAXNotSupportedException
(
ex
.
getMessage
(
)
)
;
}
}
protected
boolean
getLoadExternalDTD
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fScanner
.
getLoadExternalDTD
(
)
;
}
protected
void
setValidationWarnOnDuplicateAttdef
(
boolean
warn
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
fValidator
.
setWarningOnDuplicateAttDef
(
warn
)
;
}
protected
boolean
getValidationWarnOnDuplicateAttdef
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fValidator
.
getWarningOnDuplicateAttDef
(
)
;
}
protected
void
setValidationWarnOnUndeclaredElemdef
(
boolean
warn
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
fValidator
.
setWarningOnUndeclaredElements
(
warn
)
;
}
protected
boolean
getValidationWarnOnUndeclaredElemdef
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fValidator
.
getWarningOnUndeclaredElements
(
)
;
}
protected
void
setAllowJavaEncodings
(
boolean
allow
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
fEntityHandler
.
setAllowJavaEncodings
(
allow
)
;
}
protected
boolean
getAllowJavaEncodings
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fEntityHandler
.
getAllowJavaEncodings
(
)
;
}
protected
void
setContinueAfterFatalError
(
boolean
continueAfterFatalError
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
fContinueAfterFatalError
=
continueAfterFatalError
;
}
protected
boolean
getContinueAfterFatalError
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
return
fContinueAfterFatalError
;
}
protected
String
getXMLString
(
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
throw
new
SAXNotSupportedException
(
"http://xml.org/sax/properties/xml-string"
)
;
}
protected
void
resetOrCopy
(
)
throws
Exception
{
fStringPool
=
new
StringPool
(
)
;
fEntityHandler
.
reset
(
fStringPool
)
;
fScanner
.
reset
(
fStringPool
,
new
ChunkyCharArray
(
fStringPool
)
)
;
fValidator
.
resetOrCopy
(
fStringPool
)
;
fNeedReset
=
false
;
fGrammarResolver
=
new
GrammarResolverImpl
(
)
;
fGrammarResolver
.
clearGrammarResolver
(
)
;
fScanner
.
setGrammarResolver
(
fGrammarResolver
)
;
fValidator
.
setGrammarResolver
(
fGrammarResolver
)
;
}
public
void
setEntityResolver
(
EntityResolver
resolver
)
{
fEntityHandler
.
setEntityResolver
(
resolver
)
;
}
public
EntityResolver
getEntityResolver
(
)
{
return
fEntityHandler
.
getEntityResolver
(
)
;
}
public
void
setErrorHandler
(
ErrorHandler
handler
)
{
fErrorHandler
=
handler
;
}
public
ErrorHandler
getErrorHandler
(
)
{
return
fErrorHandler
;
}
public
void
parse
(
InputSource
source
)
throws
SAXException
,
IOException
{
if
(
fParseInProgress
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
"FWK005 parse may not be called while parsing."
)
;
}
try
{
if
(
parseSomeSetup
(
source
)
)
{
fScanner
.
parseSome
(
true
)
;
}
fParseInProgress
=
false
;
}
catch
(
org
.
xml
.
sax
.
SAXException
ex
)
{
fParseInProgress
=
false
;
if
(
PRINT_EXCEPTION_STACK_TRACE
)
ex
.
printStackTrace
(
)
;
throw
ex
;
}
catch
(
IOException
ex
)
{
fParseInProgress
=
false
;
if
(
PRINT_EXCEPTION_STACK_TRACE
)
ex
.
printStackTrace
(
)
;
throw
ex
;
}
catch
(
Exception
ex
)
{
fParseInProgress
=
false
;
if
(
PRINT_EXCEPTION_STACK_TRACE
)
ex
.
printStackTrace
(
)
;
throw
new
org
.
xml
.
sax
.
SAXException
(
ex
)
;
}
}
public
void
parse
(
String
systemId
)
throws
SAXException
,
IOException
{
InputSource
source
=
new
InputSource
(
systemId
)
;
parse
(
source
)
;
try
{
Reader
reader
=
source
.
getCharacterStream
(
)
;
if
(
reader
!=
null
)
{
reader
.
close
(
)
;
}
else
{
InputStream
is
=
source
.
getByteStream
(
)
;
if
(
is
!=
null
)
{
is
.
close
(
)
;
}
}
}
catch
(
IOException
e
)
{
}
}
public
void
setLocale
(
Locale
locale
)
throws
SAXException
{
if
(
fParseInProgress
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
"FWK006 setLocale may not be called while parsing"
)
;
}
fLocale
=
locale
;
fgXMLMessages
.
setLocale
(
locale
)
;
fgImplementationMessages
.
setLocale
(
locale
)
;
}
public
void
reportError
(
Locator
locator
,
String
errorDomain
,
int
majorCode
,
int
minorCode
,
Object
args
[
]
,
int
errorType
)
throws
Exception
{
SAXParseException
spe
;
if
(
errorDomain
.
equals
(
XMLMessages
.
XML_DOMAIN
)
)
{
spe
=
new
SAXParseException
(
fgXMLMessages
.
createMessage
(
fLocale
,
majorCode
,
minorCode
,
args
)
,
locator
)
;
}
else
if
(
errorDomain
.
equals
(
XMLMessages
.
XMLNS_DOMAIN
)
)
{
spe
=
new
SAXParseException
(
fgXMLMessages
.
createMessage
(
fLocale
,
majorCode
,
minorCode
,
args
)
,
locator
)
;
}
else
if
(
errorDomain
.
equals
(
ImplementationMessages
.
XERCES_IMPLEMENTATION_DOMAIN
)
)
{
spe
=
new
SAXParseException
(
fgImplementationMessages
.
createMessage
(
fLocale
,
majorCode
,
minorCode
,
args
)
,
locator
)
;
}
else
if
(
errorDomain
.
equals
(
SchemaMessageProvider
.
SCHEMA_DOMAIN
)
)
{
spe
=
new
SAXParseException
(
fgSchemaMessages
.
createMessage
(
fLocale
,
majorCode
,
minorCode
,
args
)
,
locator
)
;
}
else
if
(
errorDomain
.
equals
(
DatatypeMessageProvider
.
DATATYPE_DOMAIN
)
)
{
spe
=
new
SAXParseException
(
fgDatatypeMessages
.
createMessage
(
fLocale
,
majorCode
,
minorCode
,
args
)
,
locator
)
;
}
else
{
throw
new
RuntimeException
(
"FWK007 Unknown error domain \""
+
errorDomain
+
"\"."
+
"\n"
+
errorDomain
)
;
}
if
(
fErrorHandler
==
null
)
{
if
(
errorType
==
XMLErrorReporter
.
ERRORTYPE_FATAL_ERROR
&&
!
fContinueAfterFatalError
)
{
throw
spe
;
}
return
;
}
if
(
errorType
==
XMLErrorReporter
.
ERRORTYPE_WARNING
)
{
fErrorHandler
.
warning
(
spe
)
;
}
else
if
(
errorType
==
XMLErrorReporter
.
ERRORTYPE_FATAL_ERROR
)
{
fErrorHandler
.
fatalError
(
spe
)
;
if
(
!
fContinueAfterFatalError
)
{
Object
[
]
fatalArgs
=
{
spe
.
getMessage
(
)
}
;
throw
new
SAXException
(
fgImplementationMessages
.
createMessage
(
fLocale
,
ImplementationMessages
.
FATAL_ERROR
,
0
,
fatalArgs
)
)
;
}
}
else
{
fErrorHandler
.
error
(
spe
)
;
}
}
public
void
setFeature
(
String
featureId
,
boolean
state
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
featureId
.
startsWith
(
SAX2_FEATURES_PREFIX
)
)
{
String
feature
=
featureId
.
substring
(
SAX2_FEATURES_PREFIX
.
length
(
)
)
;
if
(
feature
.
equals
(
"validation"
)
)
{
setValidation
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"external-general-entities"
)
)
{
setExternalGeneralEntities
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"external-parameter-entities"
)
)
{
setExternalParameterEntities
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"namespaces"
)
)
{
setNamespaces
(
state
)
;
return
;
}
}
else
if
(
featureId
.
startsWith
(
XERCES_FEATURES_PREFIX
)
)
{
String
feature
=
featureId
.
substring
(
XERCES_FEATURES_PREFIX
.
length
(
)
)
;
if
(
feature
.
equals
(
"validation/schema"
)
)
{
setValidationSchema
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"validation/dynamic"
)
)
{
setValidationDynamic
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"validation/default-attribute-values"
)
)
{
throw
new
SAXNotSupportedException
(
featureId
)
;
}
if
(
feature
.
equals
(
"validation/normalize-attribute-values"
)
)
{
setNormalizeAttributeValues
(
state
)
;
}
if
(
feature
.
equals
(
"validation/validate-content-models"
)
)
{
throw
new
SAXNotSupportedException
(
featureId
)
;
}
if
(
feature
.
equals
(
"nonvalidating/load-dtd-grammar"
)
)
{
setLoadDTDGrammar
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"nonvalidating/load-external-dtd"
)
)
{
setLoadExternalDTD
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"validation/validate-datatypes"
)
)
{
throw
new
SAXNotSupportedException
(
featureId
)
;
}
if
(
feature
.
equals
(
"validation/warn-on-duplicate-attdef"
)
)
{
setValidationWarnOnDuplicateAttdef
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"validation/warn-on-undeclared-elemdef"
)
)
{
setValidationWarnOnUndeclaredElemdef
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"allow-java-encodings"
)
)
{
setAllowJavaEncodings
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"continue-after-fatal-error"
)
)
{
setContinueAfterFatalError
(
state
)
;
return
;
}
}
throw
new
SAXNotRecognizedException
(
featureId
)
;
}
public
boolean
getFeature
(
String
featureId
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
featureId
.
startsWith
(
SAX2_FEATURES_PREFIX
)
)
{
String
feature
=
featureId
.
substring
(
SAX2_FEATURES_PREFIX
.
length
(
)
)
;
if
(
feature
.
equals
(
"validation"
)
)
{
return
getValidation
(
)
;
}
if
(
feature
.
equals
(
"external-general-entities"
)
)
{
return
getExternalGeneralEntities
(
)
;
}
if
(
feature
.
equals
(
"external-parameter-entities"
)
)
{
return
getExternalParameterEntities
(
)
;
}
if
(
feature
.
equals
(
"namespaces"
)
)
{
return
getNamespaces
(
)
;
}
}
else
if
(
featureId
.
startsWith
(
XERCES_FEATURES_PREFIX
)
)
{
String
feature
=
featureId
.
substring
(
XERCES_FEATURES_PREFIX
.
length
(
)
)
;
if
(
feature
.
equals
(
"validation/schema"
)
)
{
return
getValidationSchema
(
)
;
}
if
(
feature
.
equals
(
"validation/dynamic"
)
)
{
return
getValidationDynamic
(
)
;
}
if
(
feature
.
equals
(
"validation/default-attribute-values"
)
)
{
throw
new
SAXNotRecognizedException
(
featureId
)
;
}
if
(
feature
.
equals
(
"validation/validate-content-models"
)
)
{
throw
new
SAXNotRecognizedException
(
featureId
)
;
}
if
(
feature
.
equals
(
"nonvalidating/load-dtd-grammar"
)
)
{
return
getLoadDTDGrammar
(
)
;
}
if
(
feature
.
equals
(
"nonvalidating/load-external-dtd"
)
)
{
return
getLoadExternalDTD
(
)
;
}
if
(
feature
.
equals
(
"validation/validate-datatypes"
)
)
{
throw
new
SAXNotRecognizedException
(
featureId
)
;
}
if
(
feature
.
equals
(
"validation/warn-on-duplicate-attdef"
)
)
{
return
getValidationWarnOnDuplicateAttdef
(
)
;
}
if
(
feature
.
equals
(
"validation/warn-on-undeclared-elemdef"
)
)
{
return
getValidationWarnOnUndeclaredElemdef
(
)
;
}
if
(
feature
.
equals
(
"allow-java-encodings"
)
)
{
return
getAllowJavaEncodings
(
)
;
}
if
(
feature
.
equals
(
"continue-after-fatal-error"
)
)
{
return
getContinueAfterFatalError
(
)
;
}
}
throw
new
SAXNotRecognizedException
(
featureId
)
;
}
public
void
setProperty
(
String
propertyId
,
Object
value
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
propertyId
.
startsWith
(
SAX2_PROPERTIES_PREFIX
)
)
{
String
property
=
propertyId
.
substring
(
SAX2_PROPERTIES_PREFIX
.
length
(
)
)
;
if
(
property
.
equals
(
"xml-string"
)
)
{
throw
new
SAXNotSupportedException
(
propertyId
)
;
}
}
throw
new
SAXNotRecognizedException
(
propertyId
)
;
}
public
Object
getProperty
(
String
propertyId
)
throws
SAXNotRecognizedException
,
SAXNotSupportedException
{
if
(
propertyId
.
startsWith
(
SAX2_PROPERTIES_PREFIX
)
)
{
String
property
=
propertyId
.
substring
(
SAX2_PROPERTIES_PREFIX
.
length
(
)
)
;
if
(
property
.
equals
(
"xml-string"
)
)
{
return
getXMLString
(
)
;
}
}
throw
new
SAXNotRecognizedException
(
propertyId
)
;
}
}
