package
org
.
apache
.
xerces
.
validators
.
datatype
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Locale
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
xerces
.
readers
.
DefaultEntityHandler
;
import
org
.
apache
.
xerces
.
utils
.
XMLMessages
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
apache
.
xerces
.
validators
.
datatype
.
StateMessageDatatype
;
public
class
ENTITYDatatypeValidator
extends
AbstractDatatypeValidator
{
private
DatatypeValidator
fBaseValidator
=
null
;
private
DefaultEntityHandler
fEntityHandler
=
null
;
private
StringPool
fStringPool
=
null
;
public
static
final
int
ENTITY_INITIALIZE
=
0
;
public
ENTITYDatatypeValidator
(
)
throws
InvalidDatatypeFacetException
{
this
(
null
,
null
,
false
)
;
}
public
ENTITYDatatypeValidator
(
DatatypeValidator
base
,
Hashtable
facets
,
boolean
derivedByList
)
throws
InvalidDatatypeFacetException
{
setBasetype
(
base
)
;
}
public
Object
validate
(
String
content
,
Object
state
)
throws
InvalidDatatypeValueException
{
StateMessageDatatype
message
=
(
StateMessageDatatype
)
state
;
int
attValueHandle
;
if
(
message
!=
null
&&
message
.
getDatatypeState
(
)
==
ENTITYDatatypeValidator
.
ENTITY_INITIALIZE
)
{
Object
[
]
unpackMessage
=
(
Object
[
]
)
message
.
getDatatypeObject
(
)
;
this
.
fEntityHandler
=
(
DefaultEntityHandler
)
unpackMessage
[
0
]
;
this
.
fStringPool
=
(
StringPool
)
unpackMessage
[
1
]
;
}
else
{
if
(
this
.
fEntityHandler
==
null
)
{
InvalidDatatypeValueException
error
=
new
InvalidDatatypeValueException
(
"ERROR: ENTITYDatatype Validator: Failed Initialization DefaultEntityHandler is null"
)
;
throw
error
;
}
if
(
this
.
fStringPool
==
null
)
{
InvalidDatatypeValueException
error
=
new
InvalidDatatypeValueException
(
"ERROR: ENTITYDatatype Validator: Failed Initialization StrinPool is null"
)
;
throw
error
;
}
attValueHandle
=
this
.
fStringPool
.
addSymbol
(
content
)
;
if
(
!
this
.
fEntityHandler
.
isUnparsedEntity
(
attValueHandle
)
)
{
InvalidDatatypeValueException
error
=
new
InvalidDatatypeValueException
(
"ENTITY '"
+
content
+
"' is not valid"
)
;
error
.
setMinorCode
(
XMLMessages
.
MSG_ENTITY_INVALID
)
;
error
.
setMajorCode
(
XMLMessages
.
VC_ENTITY_NAME
)
;
throw
error
;
}
}
return
null
;
}
public
int
compare
(
String
content1
,
String
content2
)
{
return
-
1
;
}
public
Hashtable
getFacets
(
)
{
return
null
;
}
public
Object
clone
(
)
throws
CloneNotSupportedException
{
throw
new
CloneNotSupportedException
(
"clone() is not supported in "
+
this
.
getClass
(
)
.
getName
(
)
)
;
}
private
void
setBasetype
(
DatatypeValidator
base
)
{
fBaseValidator
=
base
;
}
}
