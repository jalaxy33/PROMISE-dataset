package
org
.
apache
.
xml
.
serialize
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
Writer
;
public
class
SieveEncodingInfo
extends
EncodingInfo
{
BAOutputStream
checkerStream
=
null
;
Writer
checkerWriter
=
null
;
String
dangerChars
=
null
;
public
SieveEncodingInfo
(
String
mimeName
,
String
javaName
,
int
lastPrintable
,
String
dangers
)
{
super
(
mimeName
,
javaName
,
lastPrintable
)
;
this
.
dangerChars
=
dangers
;
}
public
SieveEncodingInfo
(
String
mimeName
,
int
lastPrintable
)
{
this
(
mimeName
,
mimeName
,
lastPrintable
,
null
)
;
}
public
boolean
isPrintable
(
int
ch
)
{
if
(
this
.
dangerChars
!=
null
&&
ch
<=
0xffff
)
{
if
(
this
.
dangerChars
.
indexOf
(
ch
)
>=
0
)
return
false
;
}
if
(
ch
<=
this
.
lastPrintable
)
return
true
;
boolean
printable
=
true
;
synchronized
(
this
)
{
try
{
if
(
this
.
checkerWriter
==
null
)
{
this
.
checkerStream
=
new
BAOutputStream
(
10
)
;
this
.
checkerWriter
=
new
OutputStreamWriter
(
this
.
checkerStream
,
this
.
javaName
)
;
}
if
(
ch
>
0xffff
)
{
this
.
checkerWriter
.
write
(
(
(
ch
-
0x10000
)
>
>
10
)
+
0xd800
)
;
this
.
checkerWriter
.
write
(
(
(
ch
-
0x10000
)
&
0x3ff
)
+
0xdc00
)
;
byte
[
]
result
=
this
.
checkerStream
.
getBuffer
(
)
;
if
(
this
.
checkerStream
.
size
(
)
==
2
&&
result
[
0
]
==
'?'
&&
result
[
1
]
==
'?'
)
printable
=
false
;
}
else
{
this
.
checkerWriter
.
write
(
ch
)
;
this
.
checkerWriter
.
flush
(
)
;
byte
[
]
result
=
this
.
checkerStream
.
getBuffer
(
)
;
if
(
this
.
checkerStream
.
size
(
)
==
1
&&
result
[
0
]
==
'?'
)
printable
=
false
;
}
this
.
checkerStream
.
reset
(
)
;
}
catch
(
IOException
ioe
)
{
printable
=
false
;
}
}
return
printable
;
}
static
class
BAOutputStream
extends
ByteArrayOutputStream
{
BAOutputStream
(
)
{
super
(
)
;
}
BAOutputStream
(
int
size
)
{
super
(
size
)
;
}
byte
[
]
getBuffer
(
)
{
return
this
.
buf
;
}
}
}
