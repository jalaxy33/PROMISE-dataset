package
org
.
apache
.
xerces
.
parsers
;
import
org
.
apache
.
xerces
.
framework
.
XMLAttrList
;
import
org
.
apache
.
xerces
.
framework
.
XMLParser
;
import
org
.
apache
.
xerces
.
framework
.
XMLValidator
;
import
org
.
apache
.
xerces
.
readers
.
XMLEntityHandler
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
xml
.
sax
.
AttributeList
;
import
org
.
xml
.
sax
.
DocumentHandler
;
import
org
.
xml
.
sax
.
DTDHandler
;
import
org
.
xml
.
sax
.
Parser
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
SAXNotSupportedException
;
import
org
.
xml
.
sax
.
misc
.
DeclHandler
;
import
org
.
xml
.
sax
.
misc
.
LexicalHandler
;
import
org
.
xml
.
sax
.
misc
.
NamespaceHandler
;
public
class
SAXParser
extends
XMLParser
implements
Parser
{
private
static
final
String
RECOGNIZED_FEATURES
[
]
=
{
"http://xml.org/sax/features/normalize-text"
,
"http://xml.org/sax/features/use-locator"
,
}
;
private
static
final
String
RECOGNIZED_PROPERTIES
[
]
=
{
"http://xml.org/sax/properties/dom-node"
,
"http://xml.org/sax/handlers/DeclHandler"
,
"http://xml.org/sax/handlers/LexicalHandler"
,
"http://xml.org/sax/handlers/NamespaceHandler"
,
}
;
private
static
final
boolean
DEBUG_CALLBACKS
=
false
;
private
DTDHandler
fDTDHandler
;
private
DocumentHandler
fDocumentHandler
;
private
DeclHandler
fDeclHandler
;
private
LexicalHandler
fLexicalHandler
;
private
NamespaceHandler
fNamespaceHandler
;
public
SAXParser
(
)
{
}
public
String
[
]
getFeaturesRecognized
(
)
{
String
superRecognized
[
]
=
super
.
getFeaturesRecognized
(
)
;
String
thisRecognized
[
]
=
RECOGNIZED_FEATURES
;
int
thisLength
=
thisRecognized
.
length
;
if
(
thisLength
==
0
)
{
return
superRecognized
;
}
int
superLength
=
superRecognized
.
length
;
if
(
superLength
==
0
)
{
return
thisRecognized
;
}
String
recognized
[
]
=
new
String
[
superLength
+
thisLength
]
;
System
.
arraycopy
(
superRecognized
,
0
,
recognized
,
0
,
superLength
)
;
System
.
arraycopy
(
thisRecognized
,
0
,
recognized
,
superLength
,
thisLength
)
;
return
recognized
;
}
public
String
[
]
getPropertiesRecognized
(
)
{
String
superRecognized
[
]
=
super
.
getPropertiesRecognized
(
)
;
String
thisRecognized
[
]
=
RECOGNIZED_PROPERTIES
;
int
thisLength
=
thisRecognized
.
length
;
if
(
thisLength
==
0
)
{
return
superRecognized
;
}
int
superLength
=
superRecognized
.
length
;
if
(
superLength
==
0
)
{
return
thisRecognized
;
}
String
recognized
[
]
=
new
String
[
superLength
+
thisLength
]
;
System
.
arraycopy
(
superRecognized
,
0
,
recognized
,
0
,
superLength
)
;
System
.
arraycopy
(
thisRecognized
,
0
,
recognized
,
superLength
,
thisLength
)
;
return
recognized
;
}
protected
void
setNormalizeText
(
boolean
normalize
)
throws
SAXException
{
if
(
normalize
)
{
throw
new
SAXNotSupportedException
(
"http://xml.org/sax/features/normalize-text"
)
;
}
}
protected
boolean
getNormalizeText
(
)
throws
SAXException
{
return
false
;
}
protected
void
setUseLocator
(
boolean
use
)
throws
SAXException
{
if
(
!
use
)
{
throw
new
SAXNotSupportedException
(
"http://xml.org/sax/features/use-locator"
)
;
}
}
protected
boolean
getUseLocator
(
)
throws
SAXException
{
return
true
;
}
protected
void
setDeclHandler
(
DeclHandler
handler
)
throws
SAXException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"http://xml.org/sax/handlers/DeclHandler: parse is in progress"
)
;
}
fDeclHandler
=
handler
;
}
protected
DeclHandler
getDeclHandler
(
)
throws
SAXException
{
return
fDeclHandler
;
}
protected
void
setLexicalHandler
(
LexicalHandler
handler
)
throws
SAXException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"http://xml.org/sax/handlers/LexicalHandler: parse is in progress"
)
;
}
fLexicalHandler
=
handler
;
}
protected
LexicalHandler
getLexicalHandler
(
)
throws
SAXException
{
return
fLexicalHandler
;
}
protected
void
setNamespaceHandler
(
NamespaceHandler
handler
)
throws
SAXException
{
if
(
fParseInProgress
)
{
throw
new
SAXNotSupportedException
(
"http://xml.org/sax/handlers/NamespaceHandler: parse is in progress"
)
;
}
fNamespaceHandler
=
handler
;
}
protected
NamespaceHandler
getNamespaceHandler
(
)
throws
SAXException
{
return
fNamespaceHandler
;
}
public
void
setFeature
(
String
featureId
,
boolean
state
)
throws
SAXException
{
if
(
featureId
.
startsWith
(
SAX2_FEATURES_PREFIX
)
)
{
String
feature
=
featureId
.
substring
(
SAX2_FEATURES_PREFIX
.
length
(
)
)
;
if
(
feature
.
equals
(
"normalize-text"
)
)
{
setNormalizeText
(
state
)
;
return
;
}
if
(
feature
.
equals
(
"use-locator"
)
)
{
setUseLocator
(
state
)
;
return
;
}
}
super
.
setFeature
(
featureId
,
state
)
;
}
public
boolean
getFeature
(
String
featureId
)
throws
SAXException
{
if
(
featureId
.
startsWith
(
SAX2_FEATURES_PREFIX
)
)
{
String
feature
=
featureId
.
substring
(
SAX2_FEATURES_PREFIX
.
length
(
)
)
;
if
(
feature
.
equals
(
"normalize-text"
)
)
{
return
getNormalizeText
(
)
;
}
if
(
feature
.
equals
(
"use-locator"
)
)
{
return
getUseLocator
(
)
;
}
}
return
super
.
getFeature
(
featureId
)
;
}
public
void
setProperty
(
String
propertyId
,
Object
value
)
throws
SAXException
{
if
(
propertyId
.
startsWith
(
SAX2_PROPERTIES_PREFIX
)
)
{
String
property
=
propertyId
.
substring
(
SAX2_PROPERTIES_PREFIX
.
length
(
)
)
;
if
(
property
.
equals
(
"dom-node"
)
)
{
throw
new
SAXNotSupportedException
(
propertyId
)
;
}
}
else
if
(
propertyId
.
startsWith
(
SAX2_HANDLERS_PREFIX
)
)
{
String
property
=
propertyId
.
substring
(
SAX2_HANDLERS_PREFIX
.
length
(
)
)
;
if
(
property
.
equals
(
"DeclHandler"
)
)
{
try
{
setDeclHandler
(
(
DeclHandler
)
value
)
;
}
catch
(
ClassCastException
e
)
{
throw
new
SAXNotSupportedException
(
propertyId
)
;
}
return
;
}
if
(
property
.
equals
(
"LexicalHandler"
)
)
{
try
{
setLexicalHandler
(
(
LexicalHandler
)
value
)
;
}
catch
(
ClassCastException
e
)
{
throw
new
SAXNotSupportedException
(
propertyId
)
;
}
return
;
}
if
(
property
.
equals
(
"NamespaceHandler"
)
)
{
try
{
setNamespaceHandler
(
(
NamespaceHandler
)
value
)
;
}
catch
(
ClassCastException
e
)
{
throw
new
SAXNotSupportedException
(
propertyId
)
;
}
return
;
}
}
super
.
setProperty
(
propertyId
,
value
)
;
}
public
Object
getProperty
(
String
propertyId
)
throws
SAXException
{
if
(
propertyId
.
startsWith
(
SAX2_PROPERTIES_PREFIX
)
)
{
String
property
=
propertyId
.
substring
(
SAX2_PROPERTIES_PREFIX
.
length
(
)
)
;
if
(
property
.
equals
(
"dom-node"
)
)
{
throw
new
SAXNotSupportedException
(
propertyId
)
;
}
}
else
if
(
propertyId
.
startsWith
(
SAX2_HANDLERS_PREFIX
)
)
{
String
property
=
propertyId
.
substring
(
SAX2_HANDLERS_PREFIX
.
length
(
)
)
;
if
(
property
.
equals
(
"DeclHandler"
)
)
{
return
getDeclHandler
(
)
;
}
if
(
property
.
equals
(
"LexicalHandler"
)
)
{
return
getLexicalHandler
(
)
;
}
if
(
property
.
equals
(
"NamespaceHandler"
)
)
{
return
getNamespaceHandler
(
)
;
}
}
return
super
.
getProperty
(
propertyId
)
;
}
public
void
setDTDHandler
(
DTDHandler
handler
)
{
fDTDHandler
=
handler
;
}
public
void
setDocumentHandler
(
DocumentHandler
handler
)
{
fDocumentHandler
=
handler
;
setSendCharDataAsCharArray
(
true
)
;
}
public
void
startDTD
(
int
rootElementType
,
int
publicId
,
int
systemId
)
throws
Exception
{
if
(
fLexicalHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
rootElementType
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startDTD("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startDTD
(
name
,
pubid
,
sysid
)
;
}
}
}
public
void
endDTD
(
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endDTD()"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endDTD
(
)
;
}
}
public
void
elementDecl
(
int
elementType
,
XMLValidator
.
ContentSpec
contentSpec
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
elementType
)
;
String
contentModel
=
contentSpec
.
toString
(
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"elementDecl("
+
name
+
", "
+
contentModel
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
elementDecl
(
name
,
contentModel
)
;
}
}
}
public
void
attlistDecl
(
int
elementTypeIndex
,
int
attrNameIndex
,
int
attType
,
String
enumString
,
int
attDefaultType
,
int
attDefaultValue
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
eName
=
fStringPool
.
toString
(
elementTypeIndex
)
;
String
aName
=
fStringPool
.
toString
(
attrNameIndex
)
;
String
aType
;
if
(
attType
==
fStringPool
.
addSymbol
(
"ENUMERATION"
)
)
aType
=
enumString
;
else
aType
=
fStringPool
.
toString
(
attType
)
;
String
aDefaultType
;
if
(
attDefaultType
==
StringPool
.
EMPTY_STRING
)
aDefaultType
=
null
;
else
aDefaultType
=
fStringPool
.
toString
(
attDefaultType
)
;
String
aDefaultValue
=
fStringPool
.
toString
(
attDefaultValue
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"attributeDecl("
+
eName
+
", "
+
aName
+
", "
+
aType
+
", "
+
aDefaultType
+
", "
+
aDefaultValue
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
attributeDecl
(
eName
,
aName
,
aType
,
aDefaultType
,
aDefaultValue
)
;
}
}
}
public
void
internalPEDecl
(
int
entityName
,
int
entityValue
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
"%"
+
fStringPool
.
toString
(
entityName
)
;
String
value
=
fStringPool
.
toString
(
entityValue
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"internalEntityDecl("
+
name
+
", "
+
value
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
internalEntityDecl
(
name
,
value
)
;
}
}
}
public
void
externalPEDecl
(
int
entityName
,
int
publicId
,
int
systemId
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
"%"
+
fStringPool
.
toString
(
entityName
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"externalEntityDecl("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
externalEntityDecl
(
name
,
pubid
,
sysid
)
;
}
}
}
public
void
internalEntityDecl
(
int
entityName
,
int
entityValue
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
entityName
)
;
String
value
=
fStringPool
.
toString
(
entityValue
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"internalEntityDecl("
+
name
+
", "
+
value
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
internalEntityDecl
(
name
,
value
)
;
}
}
}
public
void
externalEntityDecl
(
int
entityName
,
int
publicId
,
int
systemId
)
throws
Exception
{
if
(
fDeclHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
entityName
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"externalEntityDecl("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
")"
)
;
}
if
(
fDeclHandler
!=
null
)
{
fDeclHandler
.
externalEntityDecl
(
name
,
pubid
,
sysid
)
;
}
}
}
public
void
unparsedEntityDecl
(
int
entityName
,
int
publicId
,
int
systemId
,
int
notationName
)
throws
Exception
{
if
(
fDTDHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
entityName
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
String
notation
=
fStringPool
.
toString
(
notationName
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"unparsedEntityDecl("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
", "
+
notation
+
")"
)
;
}
if
(
fDTDHandler
!=
null
)
{
fDTDHandler
.
unparsedEntityDecl
(
name
,
pubid
,
sysid
,
notation
)
;
}
}
}
public
void
notationDecl
(
int
notationName
,
int
publicId
,
int
systemId
)
throws
Exception
{
if
(
fDTDHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
name
=
fStringPool
.
toString
(
notationName
)
;
String
pubid
=
fStringPool
.
toString
(
publicId
)
;
String
sysid
=
fStringPool
.
toString
(
systemId
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"notationDecl("
+
name
+
", "
+
pubid
+
", "
+
sysid
+
")"
)
;
}
if
(
fDTDHandler
!=
null
)
{
fDTDHandler
.
notationDecl
(
name
,
pubid
,
sysid
)
;
}
}
}
public
void
startDocument
(
int
versionIndex
,
int
encodingIndex
,
int
standaloneIndex
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"setDocumentLocator(<locator>)"
)
;
String
notes
=
""
;
if
(
versionIndex
!=
-
1
)
notes
+=
" version='"
+
fStringPool
.
toString
(
versionIndex
)
+
"'"
;
if
(
encodingIndex
!=
-
1
)
notes
+=
" encoding='"
+
fStringPool
.
toString
(
encodingIndex
)
+
"'"
;
if
(
standaloneIndex
!=
-
1
)
notes
+=
" standalone='"
+
fStringPool
.
toString
(
standaloneIndex
)
+
"'"
;
System
.
err
.
println
(
"startDocument()"
+
notes
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
setDocumentLocator
(
getLocator
(
)
)
;
fDocumentHandler
.
startDocument
(
)
;
}
fStringPool
.
releaseString
(
versionIndex
)
;
fStringPool
.
releaseString
(
encodingIndex
)
;
fStringPool
.
releaseString
(
standaloneIndex
)
;
}
public
void
endDocument
(
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endDocument()"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
endDocument
(
)
;
}
}
public
void
startNamespaceDeclScope
(
int
prefix
,
int
uri
)
throws
Exception
{
if
(
fNamespaceHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
p
=
fStringPool
.
toString
(
prefix
)
;
String
ns
=
fStringPool
.
toString
(
uri
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startNamespaceDeclScope("
+
p
+
", "
+
ns
+
")"
)
;
}
if
(
fNamespaceHandler
!=
null
)
{
fNamespaceHandler
.
startNamespaceDeclScope
(
p
,
ns
)
;
}
}
}
public
void
endNamespaceDeclScope
(
int
prefix
)
throws
Exception
{
if
(
fNamespaceHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
p
=
fStringPool
.
toString
(
prefix
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endNamespaceDeclScope("
+
p
+
")"
)
;
}
if
(
fNamespaceHandler
!=
null
)
{
fNamespaceHandler
.
endNamespaceDeclScope
(
p
)
;
}
}
}
public
void
startElement
(
int
elementType
,
XMLAttrList
attrList
,
int
attrListIndex
)
throws
Exception
{
String
name
=
fStringPool
.
toString
(
elementType
)
;
AttributeList
attrs
=
attrList
.
getAttributeList
(
attrListIndex
)
;
if
(
DEBUG_CALLBACKS
)
{
String
atts
=
attrs
.
getLength
(
)
>
0
?
""
:
" "
;
for
(
int
i
=
0
;
i
<
attrs
.
getLength
(
)
;
i
++
)
{
atts
+=
" "
+
attrs
.
getName
(
i
)
+
"='"
+
attrs
.
getValue
(
i
)
+
"'"
;
}
System
.
err
.
println
(
"startElement("
+
name
+
","
+
atts
+
")"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
startElement
(
name
,
attrs
)
;
}
attrList
.
releaseAttrList
(
attrListIndex
)
;
}
public
void
endElement
(
int
elementType
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endElement("
+
fStringPool
.
toString
(
elementType
)
+
")"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
endElement
(
fStringPool
.
toString
(
elementType
)
)
;
}
}
public
void
startEntityReference
(
int
entityName
,
int
entityType
,
int
entityContext
)
throws
Exception
{
if
(
fLexicalHandler
!=
null
||
DEBUG_CALLBACKS
)
{
switch
(
entityType
)
{
case
XMLEntityHandler
.
ENTITYTYPE_INTERNAL_PE
:
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL_PE
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startEntity(%"
+
fStringPool
.
toString
(
entityName
)
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startEntity
(
"%"
+
fStringPool
.
toString
(
entityName
)
)
;
}
break
;
case
XMLEntityHandler
.
ENTITYTYPE_INTERNAL
:
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startEntity("
+
fStringPool
.
toString
(
entityName
)
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startEntity
(
fStringPool
.
toString
(
entityName
)
)
;
}
break
;
case
XMLEntityHandler
.
ENTITYTYPE_UNPARSED
:
throw
new
RuntimeException
(
"startEntityReference(): ENTITYTYPE_UNPARSED"
)
;
case
XMLEntityHandler
.
ENTITYTYPE_DOCUMENT
:
break
;
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL_SUBSET
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startEntity(\"[dtd]\")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startEntity
(
"[dtd]"
)
;
}
break
;
}
}
}
public
void
endEntityReference
(
int
entityName
,
int
entityType
,
int
entityContext
)
throws
Exception
{
if
(
fLexicalHandler
!=
null
||
DEBUG_CALLBACKS
)
{
switch
(
entityType
)
{
case
XMLEntityHandler
.
ENTITYTYPE_INTERNAL_PE
:
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL_PE
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endEntity(%"
+
fStringPool
.
toString
(
entityName
)
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endEntity
(
"%"
+
fStringPool
.
toString
(
entityName
)
)
;
}
break
;
case
XMLEntityHandler
.
ENTITYTYPE_INTERNAL
:
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endEntity("
+
fStringPool
.
toString
(
entityName
)
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endEntity
(
fStringPool
.
toString
(
entityName
)
)
;
}
break
;
case
XMLEntityHandler
.
ENTITYTYPE_UNPARSED
:
throw
new
RuntimeException
(
"endEntityReference(): ENTITYTYPE_UNPARSED"
)
;
case
XMLEntityHandler
.
ENTITYTYPE_DOCUMENT
:
break
;
case
XMLEntityHandler
.
ENTITYTYPE_EXTERNAL_SUBSET
:
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endEntity(\"[dtd]\")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endEntity
(
"[dtd]"
)
;
}
break
;
}
}
}
public
void
startCDATA
(
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"startCDATA()"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
startCDATA
(
)
;
}
}
public
void
endCDATA
(
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"endCDATA()"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
endCDATA
(
)
;
}
}
public
void
characters
(
int
dataIndex
)
throws
Exception
{
throw
new
RuntimeException
(
"cannot happen 5"
)
;
}
public
void
ignorableWhitespace
(
int
dataIndex
)
throws
Exception
{
throw
new
RuntimeException
(
"cannot happen 6"
)
;
}
public
void
processingInstruction
(
int
piTarget
,
int
piData
)
throws
Exception
{
if
(
fDocumentHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
target
=
fStringPool
.
orphanString
(
piTarget
)
;
String
data
=
piData
==
-
1
?
""
:
fStringPool
.
orphanString
(
piData
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"processingInstruction("
+
target
+
", "
+
data
+
")"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
processingInstruction
(
target
,
data
)
;
}
}
else
{
fStringPool
.
releaseString
(
piTarget
)
;
fStringPool
.
releaseString
(
piData
)
;
}
}
public
void
processingInstructionInDTD
(
int
piTarget
,
int
piData
)
throws
Exception
{
processingInstruction
(
piTarget
,
piData
)
;
}
public
void
comment
(
int
dataIndex
)
throws
Exception
{
if
(
fLexicalHandler
!=
null
||
DEBUG_CALLBACKS
)
{
String
data
=
fStringPool
.
orphanString
(
dataIndex
)
;
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"comment("
+
data
+
")"
)
;
}
if
(
fLexicalHandler
!=
null
)
{
fLexicalHandler
.
comment
(
data
.
toCharArray
(
)
,
0
,
data
.
length
(
)
)
;
}
}
else
{
fStringPool
.
releaseString
(
dataIndex
)
;
}
}
public
void
commentInDTD
(
int
dataIndex
)
throws
Exception
{
comment
(
dataIndex
)
;
}
public
void
characters
(
char
ch
[
]
,
int
start
,
int
length
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"characters(<char-data>) length "
+
length
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
characters
(
ch
,
start
,
length
)
;
}
}
public
void
ignorableWhitespace
(
char
ch
[
]
,
int
start
,
int
length
)
throws
Exception
{
if
(
DEBUG_CALLBACKS
)
{
System
.
err
.
println
(
"ignorableWhitespace(<white-space>)"
)
;
}
if
(
fDocumentHandler
!=
null
)
{
fDocumentHandler
.
ignorableWhitespace
(
ch
,
start
,
length
)
;
}
}
}
