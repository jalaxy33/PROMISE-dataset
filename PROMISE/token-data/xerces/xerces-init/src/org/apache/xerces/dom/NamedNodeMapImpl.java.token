package
org
.
apache
.
xerces
.
dom
;
import
java
.
io
.
*
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Enumeration
;
import
org
.
w3c
.
dom
.
*
;
import
org
.
apache
.
xerces
.
domx
.
events
.
*
;
import
org
.
apache
.
xerces
.
dom
.
events
.
MutationEventImpl
;
public
class
NamedNodeMapImpl
implements
NamedNodeMap
,
Serializable
{
static
final
long
serialVersionUID
=
-
7039242451046758020L
;
protected
Vector
nodes
=
new
Vector
(
)
;
protected
Document
ownerDocument
;
protected
ElementImpl
element
;
protected
NamedNodeMapImpl
defaults
;
protected
int
changes
;
protected
int
lastDefaultsChanges
=
-
1
;
protected
boolean
readOnly
=
false
;
protected
NamedNodeMapImpl
(
Document
ownerDoc
,
NamedNodeMapImpl
defaults
)
{
ownerDocument
=
ownerDoc
;
this
.
defaults
=
defaults
;
}
protected
NamedNodeMapImpl
(
ElementImpl
element
,
NamedNodeMapImpl
defaults
)
{
this
(
element
.
getOwnerDocument
(
)
,
defaults
)
;
this
.
element
=
element
;
}
public
int
getLength
(
)
{
reconcileDefaults
(
)
;
return
(
nodes
!=
null
)
?
nodes
.
size
(
)
:
0
;
}
public
Node
item
(
int
index
)
{
reconcileDefaults
(
)
;
return
(
nodes
!=
null
&&
index
<
nodes
.
size
(
)
)
?
(
Node
)
(
nodes
.
elementAt
(
index
)
)
:
null
;
}
public
Node
getNamedItem
(
String
name
)
{
int
i
=
findNamePoint
(
name
)
;
return
(
i
<
0
)
?
null
:
(
Node
)
(
nodes
.
elementAt
(
i
)
)
;
}
public
Node
getNamedItemNS
(
String
namespaceURI
,
String
localName
)
{
int
i
=
findNamePoint
(
namespaceURI
,
localName
)
;
return
(
i
<
0
)
?
null
:
(
Node
)
(
nodes
.
elementAt
(
i
)
)
;
}
public
Node
setNamedItem
(
Node
arg
)
throws
DOMException
{
if
(
arg
.
getOwnerDocument
(
)
!=
ownerDocument
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
WRONG_DOCUMENT_ERR
,
"WRONG_DOCUMENT_ERR"
)
;
}
if
(
arg
instanceof
AttrImpl
&&
(
(
AttrImpl
)
arg
)
.
owned
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
INUSE_ATTRIBUTE_ERR
,
"INUSE_ATTRIBUTE_ERR"
)
;
}
NodeImpl
argn
=
(
NodeImpl
)
arg
;
int
i
=
findNamePoint
(
arg
.
getNodeName
(
)
)
;
Node
previous
=
null
;
if
(
i
>=
0
)
{
previous
=
(
Node
)
nodes
.
elementAt
(
i
)
;
if
(
element
!=
null
)
{
(
(
NodeImpl
)
arg
)
.
parentNode
=
element
;
}
nodes
.
setElementAt
(
arg
,
i
)
;
}
else
{
i
=
-
1
-
i
;
if
(
null
==
nodes
)
{
nodes
=
new
Vector
(
)
;
}
if
(
element
!=
null
)
{
(
(
NodeImpl
)
arg
)
.
parentNode
=
element
;
}
nodes
.
insertElementAt
(
arg
,
i
)
;
}
if
(
element
!=
null
)
{
(
(
NodeImpl
)
arg
)
.
parentNode
=
element
;
}
++
changes
;
if
(
NodeImpl
.
MUTATIONEVENTS
&&
element
!=
null
)
{
element
.
dispatchAggregateEvents
(
(
AttrImpl
)
arg
,
previous
==
null
?
null
:
previous
.
getNodeValue
(
)
)
;
}
return
previous
;
}
public
Node
removeNamedItem
(
String
name
)
{
return
removeNamedItemNS
(
null
,
name
)
;
}
public
Node
removeNamedItemNS
(
String
namespaceURI
,
String
name
)
throws
DOMException
{
int
i
=
findNamePoint
(
namespaceURI
,
name
)
;
if
(
i
<
0
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NOT_FOUND_ERR
,
"NOT_FOUND_ERR"
)
;
}
LCount
lc
=
null
;
String
oldvalue
=
""
;
AttrImpl
enclosingAttribute
=
null
;
if
(
NodeImpl
.
MUTATIONEVENTS
&&
element
!=
null
)
{
lc
=
LCount
.
lookup
(
MutationEventImpl
.
DOM_ATTR_MODIFIED
)
;
if
(
lc
.
captures
+
lc
.
bubbles
+
lc
.
defaults
>
0
)
{
enclosingAttribute
=
(
AttrImpl
)
(
nodes
.
elementAt
(
i
)
)
;
oldvalue
=
enclosingAttribute
.
getNodeValue
(
)
;
}
}
Node
n
=
(
Node
)
(
nodes
.
elementAt
(
i
)
)
;
Node
d
;
if
(
defaults
!=
null
&&
(
d
=
defaults
.
getNamedItemNS
(
namespaceURI
,
name
)
)
!=
null
)
{
NodeImpl
clone
=
(
NodeImpl
)
d
.
cloneNode
(
true
)
;
clone
.
parentNode
=
element
;
nodes
.
setElementAt
(
clone
,
i
)
;
}
else
{
nodes
.
removeElementAt
(
i
)
;
}
if
(
element
!=
null
)
{
AttrImpl
attr
=
(
AttrImpl
)
n
;
attr
.
parentNode
=
null
;
attr
.
owned
=
false
;
}
++
changes
;
if
(
NodeImpl
.
MUTATIONEVENTS
&&
element
!=
null
)
{
if
(
lc
.
captures
+
lc
.
bubbles
+
lc
.
defaults
>
0
)
{
MutationEvent
me
=
new
MutationEventImpl
(
)
;
me
.
initMutationEvent
(
MutationEventImpl
.
DOM_ATTR_MODIFIED
,
true
,
false
,
null
,
n
.
getNodeValue
(
)
,
element
.
getAttribute
(
name
)
,
name
)
;
element
.
dispatchEvent
(
me
)
;
}
element
.
dispatchAggregateEvents
(
null
,
null
)
;
}
return
n
;
}
public
NamedNodeMapImpl
cloneMap
(
)
{
boolean
deep
=
true
;
NamedNodeMapImpl
newmap
=
new
NamedNodeMapImpl
(
ownerDocument
,
defaults
)
;
if
(
nodes
!=
null
)
{
newmap
.
nodes
=
new
Vector
(
nodes
.
size
(
)
)
;
for
(
int
i
=
0
;
i
<
nodes
.
size
(
)
;
++
i
)
{
NodeImpl
clone
=
(
NodeImpl
)
(
(
Node
)
nodes
.
elementAt
(
i
)
)
.
cloneNode
(
deep
)
;
clone
.
parentNode
=
element
;
newmap
.
nodes
.
addElement
(
clone
)
;
}
}
newmap
.
defaults
=
defaults
;
newmap
.
lastDefaultsChanges
=
lastDefaultsChanges
;
return
newmap
;
}
void
setReadOnly
(
boolean
readOnly
,
boolean
deep
)
{
this
.
readOnly
=
readOnly
;
if
(
deep
&&
nodes
!=
null
)
{
Enumeration
e
=
nodes
.
elements
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
(
(
NodeImpl
)
e
.
nextElement
(
)
)
.
setReadOnly
(
readOnly
,
deep
)
;
}
}
}
protected
void
reconcileDefaults
(
)
{
if
(
defaults
!=
null
&&
lastDefaultsChanges
!=
defaults
.
changes
)
{
int
n
=
0
;
int
d
=
0
;
int
nsize
=
nodes
.
size
(
)
;
int
dsize
=
defaults
.
nodes
.
size
(
)
;
AttrImpl
nnode
=
(
nsize
==
0
)
?
null
:
(
AttrImpl
)
nodes
.
elementAt
(
0
)
;
AttrImpl
dnode
=
(
dsize
==
0
)
?
null
:
(
AttrImpl
)
defaults
.
nodes
.
elementAt
(
0
)
;
while
(
n
<
nsize
&&
d
<
dsize
)
{
nnode
=
(
AttrImpl
)
nodes
.
elementAt
(
n
)
;
dnode
=
(
AttrImpl
)
defaults
.
nodes
.
elementAt
(
d
)
;
int
testNS
;
String
nNSString
=
nnode
.
getNamespaceURI
(
)
;
String
dNSString
=
dnode
.
getNamespaceURI
(
)
;
if
(
nNSString
==
null
)
if
(
dNSString
==
null
)
testNS
=
0
;
else
testNS
=
1
;
else
if
(
dNSString
==
null
)
testNS
=
-
1
;
else
testNS
=
nNSString
.
compareTo
(
dNSString
)
;
System
.
out
.
println
(
"n,d"
+
nnode
.
getLocalName
(
)
+
","
+
dnode
.
getLocalName
(
)
)
;
int
testLocal
=
(
nnode
.
getLocalName
(
)
)
.
compareTo
(
dnode
.
getLocalName
(
)
)
;
int
test
=
(
testNS
!=
0
)
?
testNS
:
testLocal
;
if
(
test
==
0
&&
!
nnode
.
getSpecified
(
)
)
{
NodeImpl
clone
=
(
NodeImpl
)
dnode
.
cloneNode
(
true
)
;
clone
.
parentNode
=
element
;
nodes
.
setElementAt
(
clone
,
n
)
;
++
n
;
++
d
;
}
else
if
(
test
>
0
)
{
NodeImpl
clone
=
(
NodeImpl
)
dnode
.
cloneNode
(
true
)
;
clone
.
parentNode
=
element
;
nodes
.
insertElementAt
(
clone
,
n
)
;
++
n
;
++
d
;
}
else
if
(
!
nnode
.
getSpecified
(
)
)
{
nodes
.
removeElementAt
(
n
)
;
}
else
{
++
n
;
}
}
while
(
d
<
dsize
)
{
dnode
=
(
AttrImpl
)
defaults
.
nodes
.
elementAt
(
d
++
)
;
NodeImpl
clone
=
(
NodeImpl
)
dnode
.
cloneNode
(
true
)
;
clone
.
parentNode
=
element
;
nodes
.
addElement
(
clone
)
;
}
lastDefaultsChanges
=
defaults
.
changes
;
}
}
private
int
findNamePoint
(
String
name
)
{
return
findNamePoint
(
null
,
name
)
;
}
private
int
findNamePoint
(
String
namespaceURI
,
String
name
)
{
reconcileDefaults
(
)
;
int
i
=
0
;
if
(
nodes
!=
null
)
{
int
first
=
0
;
int
last
=
nodes
.
size
(
)
-
1
;
int
testNS
;
int
testLocal
;
while
(
first
<=
last
)
{
i
=
(
first
+
last
)
/
2
;
String
nodeNS
=
(
(
NodeImpl
)
(
nodes
.
elementAt
(
i
)
)
)
.
getNamespaceURI
(
)
;
if
(
namespaceURI
==
null
)
if
(
nodeNS
==
null
)
testNS
=
0
;
else
testNS
=
1
;
else
if
(
nodeNS
==
null
)
testNS
=
-
1
;
else
testNS
=
namespaceURI
.
compareTo
(
nodeNS
)
;
String
local
=
(
(
NodeImpl
)
(
nodes
.
elementAt
(
i
)
)
)
.
getLocalName
(
)
;
if
(
local
==
null
)
testLocal
=
-
1
;
else
testLocal
=
(
name
)
.
compareTo
(
(
(
NodeImpl
)
(
nodes
.
elementAt
(
i
)
)
)
.
getLocalName
(
)
)
;
int
test
=
(
testNS
!=
0
)
?
testNS
:
testLocal
;
if
(
test
==
0
)
{
return
i
;
}
else
if
(
test
<
0
)
{
last
=
i
-
1
;
}
else
{
first
=
i
+
1
;
}
}
if
(
first
>
i
)
{
i
=
first
;
}
}
return
-
1
-
i
;
}
}
