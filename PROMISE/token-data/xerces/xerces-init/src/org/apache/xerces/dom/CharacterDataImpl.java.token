package
org
.
apache
.
xerces
.
dom
;
import
org
.
w3c
.
dom
.
*
;
public
abstract
class
CharacterDataImpl
extends
NodeImpl
implements
CharacterData
{
static
final
long
serialVersionUID
=
7931170150428474230L
;
private
static
transient
NodeList
singletonNodeList
;
protected
CharacterDataImpl
(
DocumentImpl
ownerDocument
,
String
data
)
{
super
(
ownerDocument
,
null
,
data
)
;
}
public
abstract
String
getNodeName
(
)
;
public
NodeList
getChildNodes
(
)
{
if
(
singletonNodeList
==
null
)
{
singletonNodeList
=
new
NodeList
(
)
{
public
Node
item
(
int
index
)
{
return
null
;
}
public
int
getLength
(
)
{
return
0
;
}
}
;
}
return
singletonNodeList
;
}
public
String
getData
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
value
;
}
public
int
getLength
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
value
.
length
(
)
;
}
public
void
appendData
(
String
data
)
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
setNodeValue
(
value
+
data
)
;
}
public
void
deleteData
(
int
offset
,
int
count
)
throws
DOMException
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
count
<
0
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
INDEX_SIZE_ERR
,
"INDEX_SIZE_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
int
tailLength
=
Math
.
max
(
value
.
length
(
)
-
count
-
offset
,
0
)
;
try
{
setNodeValue
(
value
.
substring
(
0
,
offset
)
+
(
tailLength
>
0
?
value
.
substring
(
offset
+
count
,
offset
+
count
+
tailLength
)
:
""
)
)
;
}
catch
(
StringIndexOutOfBoundsException
e
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
INDEX_SIZE_ERR
,
"INDEX_SIZE_ERR"
)
;
}
}
public
void
insertData
(
int
offset
,
String
data
)
throws
DOMException
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
try
{
setNodeValue
(
new
StringBuffer
(
value
)
.
insert
(
offset
,
data
)
.
toString
(
)
)
;
}
catch
(
StringIndexOutOfBoundsException
e
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
INDEX_SIZE_ERR
,
"INDEX_SIZE_ERR"
)
;
}
}
public
void
replaceData
(
int
offset
,
int
count
,
String
data
)
throws
DOMException
{
deleteData
(
offset
,
count
)
;
insertData
(
offset
,
data
)
;
}
public
void
setData
(
String
value
)
throws
DOMException
{
setNodeValue
(
value
)
;
}
public
String
substringData
(
int
offset
,
int
count
)
throws
DOMException
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
int
length
=
value
.
length
(
)
;
if
(
count
<
0
||
offset
<
0
||
offset
>
length
-
1
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
INDEX_SIZE_ERR
,
"INDEX_SIZE_ERR"
)
;
}
int
tailIndex
=
Math
.
min
(
offset
+
count
,
length
)
;
return
value
.
substring
(
offset
,
tailIndex
)
;
}
}
