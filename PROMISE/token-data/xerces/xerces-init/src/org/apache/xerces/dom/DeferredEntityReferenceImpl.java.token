package
org
.
apache
.
xerces
.
dom
;
import
org
.
w3c
.
dom
.
*
;
public
class
DeferredEntityReferenceImpl
extends
EntityReferenceImpl
implements
DeferredNode
{
static
final
long
serialVersionUID
=
390319091370032223L
;
protected
transient
int
fNodeIndex
;
DeferredEntityReferenceImpl
(
DeferredDocumentImpl
ownerDocument
,
int
nodeIndex
)
{
super
(
ownerDocument
,
null
)
;
fNodeIndex
=
nodeIndex
;
syncData
=
true
;
syncChildren
=
true
;
}
public
int
getNodeIndex
(
)
{
return
fNodeIndex
;
}
protected
void
synchronizeData
(
)
{
syncData
=
false
;
DeferredDocumentImpl
ownerDocument
=
(
DeferredDocumentImpl
)
this
.
ownerDocument
;
name
=
ownerDocument
.
getNodeNameString
(
fNodeIndex
)
;
}
protected
void
synchronizeChildren
(
)
{
syncChildren
=
false
;
DocumentType
doctype
=
ownerDocument
.
getDoctype
(
)
;
boolean
found
=
false
;
if
(
doctype
!=
null
)
{
NamedNodeMap
entities
=
doctype
.
getEntities
(
)
;
if
(
entities
!=
null
)
{
Entity
entity
=
(
Entity
)
entities
.
getNamedItem
(
getNodeName
(
)
)
;
if
(
entity
!=
null
)
{
found
=
true
;
readOnly
=
false
;
Node
child
=
entity
.
getFirstChild
(
)
;
while
(
child
!=
null
)
{
appendChild
(
child
.
cloneNode
(
true
)
)
;
child
=
child
.
getNextSibling
(
)
;
}
readOnly
=
true
;
}
}
}
if
(
!
found
)
{
DeferredDocumentImpl
ownerDocument
=
(
DeferredDocumentImpl
)
this
.
ownerDocument
;
int
index
=
ownerDocument
.
getFirstChild
(
fNodeIndex
)
;
readOnly
=
false
;
while
(
index
!=
-
1
)
{
Node
child
=
ownerDocument
.
getNodeObject
(
index
)
;
appendChild
(
child
)
;
index
=
ownerDocument
.
getNextSibling
(
index
)
;
}
readOnly
=
true
;
}
}
}
