package
org
.
apache
.
xerces
.
validators
.
dtd
;
import
org
.
apache
.
xerces
.
framework
.
*
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
apache
.
xerces
.
utils
.
ImplementationMessages
;
public
class
DFAContentModel
implements
XMLContentModel
{
private
static
final
String
fEpsilonString
=
"<<CMNODE_EPSILON>>"
;
private
static
final
String
fEOCString
=
"<<CMNODE_EOC>>"
;
private
static
final
boolean
DEBUG_VALIDATE_CONTENT
=
false
;
public
DFAContentModel
(
StringPool
stringPool
,
CMNode
syntaxTree
,
int
leafCount
)
throws
CMException
{
fStringPool
=
stringPool
;
fLeafCount
=
leafCount
;
fEpsilonIndex
=
fStringPool
.
addSymbol
(
fEpsilonString
)
;
fEOCIndex
=
fStringPool
.
addSymbol
(
fEOCString
)
;
buildDFA
(
syntaxTree
)
;
}
public
int
validateContent
(
int
childCount
,
int
[
]
children
)
throws
CMException
{
if
(
DEBUG_VALIDATE_CONTENT
)
System
.
out
.
println
(
"DFAContentModel#validateContent"
)
;
if
(
childCount
==
0
)
{
if
(
DEBUG_VALIDATE_CONTENT
)
{
System
.
out
.
println
(
"!!! no children"
)
;
System
.
out
.
println
(
"elemMap="
+
fElemMap
)
;
for
(
int
i
=
0
;
i
<
fElemMap
.
length
;
i
++
)
{
int
elemIndex
=
fElemMap
[
i
]
;
System
.
out
.
println
(
"fElemMap["
+
i
+
"]="
+
elemIndex
+
" ("
+
fStringPool
.
toString
(
elemIndex
)
+
')'
)
;
}
System
.
out
.
println
(
"EOCIndex="
+
fEOCIndex
)
;
}
return
fEmptyContentIsValid
?
-
1
:
0
;
}
int
curState
=
0
;
for
(
int
childIndex
=
0
;
childIndex
<
childCount
;
childIndex
++
)
{
final
int
curElem
=
children
[
childIndex
]
;
int
elemIndex
=
0
;
for
(
;
elemIndex
<
fElemMapSize
;
elemIndex
++
)
{
if
(
fElemMap
[
elemIndex
]
==
curElem
)
break
;
}
if
(
elemIndex
==
fElemMapSize
)
{
if
(
DEBUG_VALIDATE_CONTENT
)
System
.
out
.
println
(
"!!! didn't find it"
)
;
return
childIndex
;
}
curState
=
fTransTable
[
curState
]
[
elemIndex
]
;
if
(
curState
==
-
1
)
{
if
(
DEBUG_VALIDATE_CONTENT
)
System
.
out
.
println
(
"!!! not a legal transition"
)
;
return
childIndex
;
}
}
if
(
DEBUG_VALIDATE_CONTENT
)
System
.
out
.
println
(
"curState="
+
curState
+
", childCount="
+
childCount
)
;
if
(
!
fFinalStateFlags
[
curState
]
)
return
childCount
;
return
-
1
;
}
public
int
whatCanGoHere
(
boolean
fullyValid
,
InsertableElementsInfo
info
)
throws
CMException
{
int
curState
=
0
;
for
(
int
childIndex
=
0
;
childIndex
<
info
.
insertAt
;
childIndex
++
)
{
final
int
curElem
=
info
.
curChildren
[
childIndex
]
;
int
elemIndex
=
0
;
for
(
;
elemIndex
<
fElemMapSize
;
elemIndex
++
)
{
if
(
fElemMap
[
elemIndex
]
==
curElem
)
break
;
}
if
(
elemIndex
==
fElemMapSize
)
return
childIndex
;
curState
=
fTransTable
[
curState
]
[
elemIndex
]
;
if
(
curState
==
-
1
)
return
childIndex
;
}
final
int
insertState
=
curState
;
info
.
canHoldPCData
=
false
;
info
.
isValidEOC
=
fFinalStateFlags
[
insertState
]
;
info
.
resultsCount
=
fElemMapSize
;
if
(
(
info
.
results
==
null
)
||
(
info
.
results
.
length
<
info
.
resultsCount
)
)
info
.
results
=
new
boolean
[
info
.
resultsCount
]
;
if
(
(
info
.
possibleChildren
==
null
)
||
(
info
.
possibleChildren
.
length
<
info
.
resultsCount
)
)
{
info
.
possibleChildren
=
new
int
[
info
.
resultsCount
]
;
}
for
(
int
index
=
0
;
index
<
fElemMapSize
;
index
++
)
{
info
.
possibleChildren
[
index
]
=
fElemMap
[
index
]
;
info
.
results
[
index
]
=
(
fTransTable
[
insertState
]
[
index
]
!=
-
1
)
;
}
if
(
fullyValid
)
{
for
(
int
index
=
0
;
index
<
info
.
resultsCount
;
index
++
)
{
if
(
!
info
.
results
[
index
]
)
continue
;
info
.
curChildren
[
info
.
insertAt
]
=
info
.
possibleChildren
[
index
]
;
if
(
validateContent
(
info
.
childCount
,
info
.
curChildren
)
!=
-
1
)
info
.
results
[
index
]
=
false
;
}
}
return
-
1
;
}
private
void
buildDFA
(
CMNode
syntaxTree
)
throws
CMException
{
CMLeaf
nodeEOC
=
new
CMLeaf
(
XMLContentSpecNode
.
CONTENTSPECNODE_LEAF
,
fEOCIndex
)
;
fHeadNode
=
new
CMBinOp
(
XMLContentSpecNode
.
CONTENTSPECNODE_SEQ
,
syntaxTree
,
nodeEOC
)
;
fEOCPos
=
fLeafCount
;
nodeEOC
.
setPosition
(
fLeafCount
++
)
;
fLeafList
=
new
CMLeaf
[
fLeafCount
]
;
postTreeBuildInit
(
fHeadNode
,
0
)
;
fFollowList
=
new
CMStateSet
[
fLeafCount
]
;
for
(
int
index
=
0
;
index
<
fLeafCount
;
index
++
)
fFollowList
[
index
]
=
new
CMStateSet
(
fLeafCount
)
;
calcFollowList
(
fHeadNode
)
;
fElemMap
=
new
int
[
fLeafCount
]
;
fElemMapSize
=
0
;
for
(
int
outIndex
=
0
;
outIndex
<
fLeafCount
;
outIndex
++
)
{
final
int
elemIndex
=
fLeafList
[
outIndex
]
.
getElemIndex
(
)
;
int
inIndex
=
0
;
for
(
;
inIndex
<
fElemMapSize
;
inIndex
++
)
{
if
(
fElemMap
[
inIndex
]
==
elemIndex
)
break
;
}
if
(
inIndex
==
fElemMapSize
)
fElemMap
[
fElemMapSize
++
]
=
elemIndex
;
}
int
curArraySize
=
fLeafCount
*
4
;
CMStateSet
[
]
statesToDo
=
new
CMStateSet
[
curArraySize
]
;
fFinalStateFlags
=
new
boolean
[
curArraySize
]
;
fTransTable
=
new
int
[
curArraySize
]
[
]
;
CMStateSet
setT
=
fHeadNode
.
firstPos
(
)
;
int
unmarkedState
=
0
;
int
curState
=
0
;
fTransTable
[
curState
]
=
makeDefStateList
(
)
;
statesToDo
[
curState
]
=
setT
;
curState
++
;
while
(
unmarkedState
<
curState
)
{
setT
=
statesToDo
[
unmarkedState
]
;
int
[
]
transEntry
=
fTransTable
[
unmarkedState
]
;
fFinalStateFlags
[
unmarkedState
]
=
setT
.
getBit
(
fEOCPos
)
;
unmarkedState
++
;
CMStateSet
newSet
=
null
;
for
(
int
elemIndex
=
0
;
elemIndex
<
fElemMapSize
;
elemIndex
++
)
{
if
(
newSet
==
null
)
newSet
=
new
CMStateSet
(
fLeafCount
)
;
else
newSet
.
zeroBits
(
)
;
for
(
int
leafIndex
=
0
;
leafIndex
<
fLeafCount
;
leafIndex
++
)
{
if
(
setT
.
getBit
(
leafIndex
)
)
{
if
(
fLeafList
[
leafIndex
]
.
getElemIndex
(
)
==
fElemMap
[
elemIndex
]
)
newSet
.
union
(
fFollowList
[
leafIndex
]
)
;
}
}
if
(
!
newSet
.
isEmpty
(
)
)
{
int
stateIndex
=
0
;
for
(
;
stateIndex
<
curState
;
stateIndex
++
)
{
if
(
statesToDo
[
stateIndex
]
.
isSameSet
(
newSet
)
)
break
;
}
if
(
stateIndex
==
curState
)
{
statesToDo
[
curState
]
=
newSet
;
fTransTable
[
curState
]
=
makeDefStateList
(
)
;
curState
++
;
newSet
=
null
;
}
transEntry
[
elemIndex
]
=
stateIndex
;
if
(
curState
==
curArraySize
)
{
final
int
newSize
=
(
int
)
(
curArraySize
*
1.5
)
;
CMStateSet
[
]
newToDo
=
new
CMStateSet
[
newSize
]
;
boolean
[
]
newFinalFlags
=
new
boolean
[
newSize
]
;
int
[
]
[
]
newTransTable
=
new
int
[
newSize
]
[
]
;
for
(
int
expIndex
=
0
;
expIndex
<
curArraySize
;
expIndex
++
)
{
newToDo
[
expIndex
]
=
statesToDo
[
expIndex
]
;
newFinalFlags
[
expIndex
]
=
fFinalStateFlags
[
expIndex
]
;
newTransTable
[
expIndex
]
=
fTransTable
[
expIndex
]
;
}
curArraySize
=
newSize
;
statesToDo
=
newToDo
;
fFinalStateFlags
=
newFinalFlags
;
fTransTable
=
newTransTable
;
}
}
}
}
fEmptyContentIsValid
=
(
(
CMBinOp
)
fHeadNode
)
.
getLeft
(
)
.
isNullable
(
)
;
if
(
DEBUG_VALIDATE_CONTENT
)
dumpTree
(
fHeadNode
,
0
)
;
fHeadNode
=
null
;
fLeafList
=
null
;
fFollowList
=
null
;
}
private
void
calcFollowList
(
CMNode
nodeCur
)
throws
CMException
{
if
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_CHOICE
)
{
calcFollowList
(
(
(
CMBinOp
)
nodeCur
)
.
getLeft
(
)
)
;
calcFollowList
(
(
(
CMBinOp
)
nodeCur
)
.
getRight
(
)
)
;
}
else
if
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_SEQ
)
{
calcFollowList
(
(
(
CMBinOp
)
nodeCur
)
.
getLeft
(
)
)
;
calcFollowList
(
(
(
CMBinOp
)
nodeCur
)
.
getRight
(
)
)
;
final
CMStateSet
last
=
(
(
CMBinOp
)
nodeCur
)
.
getLeft
(
)
.
lastPos
(
)
;
final
CMStateSet
first
=
(
(
CMBinOp
)
nodeCur
)
.
getRight
(
)
.
firstPos
(
)
;
for
(
int
index
=
0
;
index
<
fLeafCount
;
index
++
)
{
if
(
last
.
getBit
(
index
)
)
fFollowList
[
index
]
.
union
(
first
)
;
}
}
else
if
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_ZERO_OR_MORE
)
{
calcFollowList
(
(
(
CMUniOp
)
nodeCur
)
.
getChild
(
)
)
;
final
CMStateSet
first
=
nodeCur
.
firstPos
(
)
;
final
CMStateSet
last
=
nodeCur
.
lastPos
(
)
;
for
(
int
index
=
0
;
index
<
fLeafCount
;
index
++
)
{
if
(
last
.
getBit
(
index
)
)
fFollowList
[
index
]
.
union
(
first
)
;
}
}
else
if
(
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_ONE_OR_MORE
)
||
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_ZERO_OR_ONE
)
)
{
throw
new
CMException
(
ImplementationMessages
.
VAL_NIICM
)
;
}
}
private
void
dumpTree
(
CMNode
nodeCur
,
int
level
)
throws
CMException
{
for
(
int
index
=
0
;
index
<
level
;
index
++
)
System
.
out
.
print
(
"   "
)
;
int
type
=
nodeCur
.
type
(
)
;
if
(
(
type
==
XMLContentSpecNode
.
CONTENTSPECNODE_CHOICE
)
||
(
type
==
XMLContentSpecNode
.
CONTENTSPECNODE_SEQ
)
)
{
if
(
type
==
XMLContentSpecNode
.
CONTENTSPECNODE_CHOICE
)
System
.
out
.
print
(
"Choice Node "
)
;
else
System
.
out
.
print
(
"Seq Node "
)
;
if
(
nodeCur
.
isNullable
(
)
)
System
.
out
.
print
(
"Nullable "
)
;
System
.
out
.
print
(
"firstPos="
)
;
System
.
out
.
print
(
nodeCur
.
firstPos
(
)
.
toString
(
)
)
;
System
.
out
.
print
(
" lastPos="
)
;
System
.
out
.
println
(
nodeCur
.
lastPos
(
)
.
toString
(
)
)
;
dumpTree
(
(
(
CMBinOp
)
nodeCur
)
.
getLeft
(
)
,
level
+
1
)
;
dumpTree
(
(
(
CMBinOp
)
nodeCur
)
.
getRight
(
)
,
level
+
1
)
;
}
else
if
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_ZERO_OR_MORE
)
{
System
.
out
.
print
(
"Rep Node "
)
;
if
(
nodeCur
.
isNullable
(
)
)
System
.
out
.
print
(
"Nullable "
)
;
System
.
out
.
print
(
"firstPos="
)
;
System
.
out
.
print
(
nodeCur
.
firstPos
(
)
.
toString
(
)
)
;
System
.
out
.
print
(
" lastPos="
)
;
System
.
out
.
println
(
nodeCur
.
lastPos
(
)
.
toString
(
)
)
;
dumpTree
(
(
(
CMUniOp
)
nodeCur
)
.
getChild
(
)
,
level
+
1
)
;
}
else
if
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_LEAF
)
{
System
.
out
.
print
(
"Leaf: (pos="
+
(
(
CMLeaf
)
nodeCur
)
.
getPosition
(
)
+
"), "
+
fStringPool
.
toString
(
(
(
CMLeaf
)
nodeCur
)
.
getElemIndex
(
)
)
+
"(elemIndex="
+
(
(
CMLeaf
)
nodeCur
)
.
getElemIndex
(
)
+
") "
)
;
if
(
nodeCur
.
isNullable
(
)
)
System
.
out
.
print
(
" Nullable "
)
;
System
.
out
.
print
(
"firstPos="
)
;
System
.
out
.
print
(
nodeCur
.
firstPos
(
)
.
toString
(
)
)
;
System
.
out
.
print
(
" lastPos="
)
;
System
.
out
.
println
(
nodeCur
.
lastPos
(
)
.
toString
(
)
)
;
}
else
{
throw
new
CMException
(
ImplementationMessages
.
VAL_NIICM
)
;
}
}
private
int
[
]
makeDefStateList
(
)
{
int
[
]
retArray
=
new
int
[
fElemMapSize
]
;
for
(
int
index
=
0
;
index
<
fElemMapSize
;
index
++
)
retArray
[
index
]
=
-
1
;
return
retArray
;
}
private
int
postTreeBuildInit
(
CMNode
nodeCur
,
int
curIndex
)
throws
CMException
{
nodeCur
.
setMaxStates
(
fLeafCount
)
;
if
(
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_CHOICE
)
||
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_SEQ
)
)
{
curIndex
=
postTreeBuildInit
(
(
(
CMBinOp
)
nodeCur
)
.
getLeft
(
)
,
curIndex
)
;
curIndex
=
postTreeBuildInit
(
(
(
CMBinOp
)
nodeCur
)
.
getRight
(
)
,
curIndex
)
;
}
else
if
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_ZERO_OR_MORE
)
{
curIndex
=
postTreeBuildInit
(
(
(
CMUniOp
)
nodeCur
)
.
getChild
(
)
,
curIndex
)
;
}
else
if
(
nodeCur
.
type
(
)
==
XMLContentSpecNode
.
CONTENTSPECNODE_LEAF
)
{
if
(
(
(
CMLeaf
)
nodeCur
)
.
getElemIndex
(
)
!=
fEpsilonIndex
)
fLeafList
[
curIndex
++
]
=
(
CMLeaf
)
nodeCur
;
}
else
{
throw
new
CMException
(
ImplementationMessages
.
VAL_NIICM
)
;
}
return
curIndex
;
}
private
int
[
]
fElemMap
=
null
;
private
int
fElemMapSize
=
0
;
private
int
fEOCIndex
=
0
;
private
int
fEOCPos
=
0
;
private
int
fEpsilonIndex
=
0
;
private
boolean
[
]
fFinalStateFlags
=
null
;
private
CMStateSet
[
]
fFollowList
=
null
;
private
CMNode
fHeadNode
=
null
;
private
int
fLeafCount
=
0
;
private
CMLeaf
[
]
fLeafList
=
null
;
private
StringPool
fStringPool
=
null
;
private
int
[
]
[
]
fTransTable
=
null
;
private
int
fTransTableSize
=
0
;
private
boolean
fEmptyContentIsValid
=
false
;
}
