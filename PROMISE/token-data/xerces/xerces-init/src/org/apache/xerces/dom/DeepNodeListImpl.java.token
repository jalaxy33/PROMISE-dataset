package
org
.
apache
.
xerces
.
dom
;
import
org
.
w3c
.
dom
.
*
;
import
java
.
util
.
Vector
;
public
class
DeepNodeListImpl
implements
NodeList
{
protected
NodeImpl
rootNode
;
protected
String
tagName
;
protected
int
changes
=
0
;
protected
Vector
nodes
;
protected
String
nsName
;
protected
boolean
enableNS
=
false
;
public
DeepNodeListImpl
(
NodeImpl
rootNode
,
String
tagName
)
{
this
.
rootNode
=
rootNode
;
this
.
tagName
=
tagName
;
nodes
=
new
Vector
(
)
;
}
public
DeepNodeListImpl
(
NodeImpl
rootNode
,
String
nsName
,
String
tagName
)
{
this
(
rootNode
,
tagName
)
;
this
.
nsName
=
nsName
;
enableNS
=
(
nsName
==
null
||
nsName
.
equals
(
""
)
||
nsName
.
equals
(
"*"
)
)
?
false
:
true
;
}
public
int
getLength
(
)
{
item
(
java
.
lang
.
Integer
.
MAX_VALUE
)
;
return
nodes
.
size
(
)
;
}
public
Node
item
(
int
index
)
{
Node
thisNode
;
if
(
rootNode
.
changes
!=
changes
)
{
nodes
=
new
Vector
(
)
;
changes
=
rootNode
.
changes
;
}
if
(
index
<
nodes
.
size
(
)
)
return
(
Node
)
nodes
.
elementAt
(
index
)
;
else
{
if
(
nodes
.
size
(
)
==
0
)
thisNode
=
rootNode
;
else
thisNode
=
(
NodeImpl
)
(
nodes
.
lastElement
(
)
)
;
while
(
thisNode
!=
null
&&
index
>=
nodes
.
size
(
)
)
{
thisNode
=
nextMatchingElementAfter
(
thisNode
)
;
if
(
thisNode
!=
null
)
nodes
.
addElement
(
thisNode
)
;
}
return
thisNode
;
}
}
private
Node
nextMatchingElementAfter
(
Node
current
)
{
Node
next
;
while
(
current
!=
null
)
{
if
(
current
.
hasChildNodes
(
)
)
{
current
=
(
current
.
getFirstChild
(
)
)
;
}
else
if
(
current
!=
rootNode
&&
null
!=
(
next
=
current
.
getNextSibling
(
)
)
)
{
current
=
next
;
}
else
{
next
=
null
;
for
(
;
current
!=
rootNode
;
current
=
current
.
getParentNode
(
)
)
{
next
=
current
.
getNextSibling
(
)
;
if
(
next
!=
null
)
break
;
}
current
=
next
;
}
if
(
current
!=
rootNode
&&
current
!=
null
&&
current
.
getNodeType
(
)
==
Node
.
ELEMENT_NODE
&&
(
tagName
.
equals
(
"*"
)
||
(
(
ElementImpl
)
current
)
.
getTagName
(
)
.
equals
(
tagName
)
)
&&
(
!
enableNS
||
(
enableNS
&&
(
(
ElementImpl
)
current
)
.
getNamespaceURI
(
)
!=
null
&&
(
(
ElementImpl
)
current
)
.
getNamespaceURI
(
)
.
equals
(
nsName
)
)
)
)
{
return
current
;
}
}
return
null
;
}
}
