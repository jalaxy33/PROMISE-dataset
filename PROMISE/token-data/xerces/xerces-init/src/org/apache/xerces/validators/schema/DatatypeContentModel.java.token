package
org
.
apache
.
xerces
.
validators
.
schema
;
import
org
.
apache
.
xerces
.
framework
.
XMLContentSpecNode
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
apache
.
xerces
.
validators
.
datatype
.
DatatypeValidator
;
import
org
.
apache
.
xerces
.
validators
.
datatype
.
InvalidDatatypeValueException
;
import
org
.
apache
.
xerces
.
validators
.
dtd
.
XMLContentModel
;
import
org
.
apache
.
xerces
.
validators
.
dtd
.
ElementDeclPool
;
import
org
.
apache
.
xerces
.
validators
.
dtd
.
InsertableElementsInfo
;
public
class
DatatypeContentModel
implements
XMLContentModel
{
XSchemaValidator
.
DatatypeValidatorRegistry
fDatatypeRegistry
=
null
;
ElementDeclPool
fElementDeclPool
=
null
;
StringPool
fStringPool
=
null
;
int
fChild
=
-
1
;
public
DatatypeContentModel
(
XSchemaValidator
.
DatatypeValidatorRegistry
reg
,
ElementDeclPool
elementDeclPool
,
StringPool
stringPool
,
int
childIndex
)
{
fDatatypeRegistry
=
reg
;
fElementDeclPool
=
elementDeclPool
;
fStringPool
=
stringPool
;
fChild
=
childIndex
;
}
public
int
validateContent
(
int
childCount
,
int
[
]
children
)
throws
Exception
{
boolean
DEBUG_DATATYPES
=
false
;
try
{
int
contentSpecIndex
=
fElementDeclPool
.
getContentSpec
(
fChild
)
;
XMLContentSpecNode
csn
=
new
XMLContentSpecNode
(
)
;
fElementDeclPool
.
getContentSpecNode
(
contentSpecIndex
,
csn
)
;
String
type
=
fStringPool
.
toString
(
csn
.
value
)
;
DatatypeValidator
v
=
fDatatypeRegistry
.
getValidatorFor
(
type
)
;
if
(
v
!=
null
)
v
.
validate
(
fStringPool
.
toString
(
children
[
0
]
)
)
;
else
System
.
out
.
println
(
"No validator for datatype "
+
type
)
;
}
catch
(
InvalidDatatypeValueException
idve
)
{
throw
idve
;
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
System
.
out
.
println
(
"Internal error in datatype validation"
)
;
}
return
-
1
;
}
public
int
whatCanGoHere
(
boolean
fullyValid
,
InsertableElementsInfo
info
)
throws
Exception
{
return
-
1
;
}
}
;
