package
org
.
apache
.
xerces
.
dom
;
import
org
.
w3c
.
dom
.
*
;
import
org
.
apache
.
xerces
.
dom
.
events
.
MutationEventImpl
;
public
class
AttrImpl
extends
NodeImpl
implements
Attr
{
static
final
long
serialVersionUID
=
-
4421396439224009670L
;
protected
boolean
owned
;
protected
boolean
specified
=
true
;
protected
String
namespaceURI
;
protected
String
prefix
;
protected
String
localName
;
protected
AttrImpl
(
DocumentImpl
ownerDocument
,
String
name
)
{
super
(
ownerDocument
,
name
,
null
)
;
this
.
localName
=
name
;
syncData
=
true
;
}
protected
AttrImpl
(
DocumentImpl
ownerDocument
,
String
namespaceURI
,
String
qualifiedName
)
{
this
.
ownerDocument
=
ownerDocument
;
this
.
name
=
qualifiedName
;
this
.
namespaceURI
=
namespaceURI
;
int
index
=
qualifiedName
.
indexOf
(
':'
)
;
if
(
index
<
0
)
{
prefix
=
null
;
localName
=
qualifiedName
;
}
else
{
prefix
=
qualifiedName
.
substring
(
0
,
index
)
;
localName
=
qualifiedName
.
substring
(
index
+
1
)
;
}
syncData
=
true
;
}
public
short
getNodeType
(
)
{
return
Node
.
ATTRIBUTE_NODE
;
}
public
void
setNodeValue
(
String
value
)
throws
DOMException
{
setValue
(
value
)
;
}
public
String
getNodeValue
(
)
{
return
getValue
(
)
;
}
public
Node
getParentNode
(
)
{
return
null
;
}
public
String
getName
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
name
;
}
public
void
setValue
(
String
value
)
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
LCount
lc
=
null
;
String
oldvalue
=
""
;
if
(
MUTATIONEVENTS
)
{
lc
=
LCount
.
lookup
(
MutationEventImpl
.
DOM_ATTR_MODIFIED
)
;
if
(
lc
.
captures
+
lc
.
bubbles
+
lc
.
defaults
>
0
&&
parentNode
!=
null
)
{
oldvalue
=
getValue
(
)
;
}
}
if
(
MUTATIONEVENTS
)
{
while
(
firstChild
!=
null
)
internalRemoveChild
(
firstChild
,
MUTATION_LOCAL
)
;
}
else
{
firstChild
=
null
;
lastChild
=
null
;
syncChildren
=
false
;
}
specified
=
true
;
if
(
value
!=
null
)
{
internalInsertBefore
(
ownerDocument
.
createTextNode
(
value
)
,
null
,
MUTATION_LOCAL
)
;
}
changed
(
)
;
if
(
MUTATIONEVENTS
)
{
dispatchAggregateEvents
(
this
,
oldvalue
)
;
}
}
public
String
getValue
(
)
{
StringBuffer
value
=
new
StringBuffer
(
)
;
NodeImpl
node
=
(
NodeImpl
)
getFirstChild
(
)
;
while
(
node
!=
null
)
{
value
.
append
(
node
.
getNodeValue
(
)
)
;
node
=
node
.
nextSibling
;
}
return
value
.
toString
(
)
;
}
public
boolean
getSpecified
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
specified
;
}
public
Element
getElement
(
)
{
return
(
Element
)
parentNode
;
}
public
Element
getOwnerElement
(
)
{
return
(
Element
)
parentNode
;
}
public
String
getNamespaceURI
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
namespaceURI
;
}
public
String
getPrefix
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
prefix
;
}
public
void
setPrefix
(
String
prefix
)
throws
DOMException
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
if
(
!
DocumentImpl
.
isXMLName
(
prefix
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
INVALID_CHARACTER_ERR
,
"INVALID_CHARACTER_ERR"
)
;
}
this
.
prefix
=
prefix
;
this
.
name
=
prefix
+
":"
+
localName
;
}
public
String
getLocalName
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
localName
;
}
public
void
setSpecified
(
boolean
arg
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
specified
=
arg
;
}
public
String
toString
(
)
{
return
getName
(
)
+
"="
+
"\""
+
getValue
(
)
+
"\""
;
}
}
