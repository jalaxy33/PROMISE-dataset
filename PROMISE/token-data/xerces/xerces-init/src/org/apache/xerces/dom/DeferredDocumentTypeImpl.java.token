package
org
.
apache
.
xerces
.
dom
;
import
org
.
w3c
.
dom
.
*
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
public
class
DeferredDocumentTypeImpl
extends
DocumentTypeImpl
implements
DeferredNode
{
static
final
long
serialVersionUID
=
-
2172579663227313509L
;
protected
transient
int
fNodeIndex
;
DeferredDocumentTypeImpl
(
DeferredDocumentImpl
ownerDocument
,
int
nodeIndex
)
{
super
(
ownerDocument
,
null
)
;
fNodeIndex
=
nodeIndex
;
syncData
=
true
;
syncChildren
=
true
;
}
public
int
getNodeIndex
(
)
{
return
fNodeIndex
;
}
protected
void
synchronizeData
(
)
{
syncData
=
false
;
DeferredDocumentImpl
ownerDocument
=
(
DeferredDocumentImpl
)
this
.
ownerDocument
;
name
=
ownerDocument
.
getNodeNameString
(
fNodeIndex
)
;
StringPool
pool
=
ownerDocument
.
getStringPool
(
)
;
int
extraDataIndex
=
ownerDocument
.
getNodeValue
(
fNodeIndex
)
;
publicID
=
pool
.
toString
(
ownerDocument
.
getFirstChild
(
extraDataIndex
)
)
;
systemID
=
pool
.
toString
(
ownerDocument
.
getLastChild
(
extraDataIndex
)
)
;
}
protected
void
synchronizeChildren
(
)
{
syncChildren
=
false
;
DeferredDocumentImpl
ownerDocument
=
(
DeferredDocumentImpl
)
this
.
ownerDocument
;
entities
=
new
NamedNodeMapImpl
(
ownerDocument
,
null
)
;
notations
=
new
NamedNodeMapImpl
(
ownerDocument
,
null
)
;
elements
=
new
NamedNodeMapImpl
(
ownerDocument
,
null
)
;
for
(
int
index
=
ownerDocument
.
getFirstChild
(
fNodeIndex
)
;
index
!=
-
1
;
index
=
ownerDocument
.
getNextSibling
(
index
)
)
{
DeferredNode
node
=
ownerDocument
.
getNodeObject
(
index
)
;
int
type
=
node
.
getNodeType
(
)
;
switch
(
type
)
{
case
Node
.
ENTITY_NODE
:
{
entities
.
setNamedItem
(
node
)
;
break
;
}
case
Node
.
NOTATION_NODE
:
{
notations
.
setNamedItem
(
node
)
;
break
;
}
case
NodeImpl
.
ELEMENT_DEFINITION_NODE
:
{
elements
.
setNamedItem
(
node
)
;
NamedNodeMap
attrs
=
node
.
getAttributes
(
)
;
for
(
int
attrIndex
=
ownerDocument
.
getFirstChild
(
node
.
getNodeIndex
(
)
)
;
attrIndex
!=
-
1
;
attrIndex
=
ownerDocument
.
getNextSibling
(
attrIndex
)
)
{
DeferredNode
attr
=
ownerDocument
.
getNodeObject
(
attrIndex
)
;
attrs
.
setNamedItem
(
attr
)
;
}
break
;
}
case
Node
.
ELEMENT_NODE
:
{
if
(
(
(
DocumentImpl
)
getOwnerDocument
(
)
)
.
allowGrammarAccess
)
{
appendChild
(
node
)
;
break
;
}
}
default
:
{
System
.
out
.
println
(
"DeferredDocumentTypeImpl#synchronizeInfo: node.getNodeType() = "
+
node
.
getNodeType
(
)
+
", class = "
+
node
.
getClass
(
)
.
getName
(
)
)
;
}
}
}
}
}
