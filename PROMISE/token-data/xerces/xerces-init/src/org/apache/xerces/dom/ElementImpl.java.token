package
org
.
apache
.
xerces
.
dom
;
import
java
.
io
.
*
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Vector
;
import
org
.
w3c
.
dom
.
*
;
public
class
ElementImpl
extends
NodeImpl
implements
Element
{
static
final
long
serialVersionUID
=
-
7202454486126245907L
;
protected
NamedNodeMapImpl
attributes
;
protected
String
namespaceURI
;
protected
String
prefix
;
protected
String
localName
;
protected
boolean
enableNamespace
=
false
;
public
ElementImpl
(
DocumentImpl
ownerDoc
,
String
name
)
{
super
(
ownerDoc
,
name
,
null
)
;
this
.
localName
=
name
;
syncData
=
true
;
}
protected
ElementImpl
(
DocumentImpl
ownerDocument
,
String
namespaceURI
,
String
qualifiedName
)
{
this
.
ownerDocument
=
ownerDocument
;
this
.
namespaceURI
=
namespaceURI
;
this
.
name
=
qualifiedName
;
int
index
=
qualifiedName
.
indexOf
(
':'
)
;
if
(
index
<
0
)
{
this
.
prefix
=
null
;
this
.
localName
=
qualifiedName
;
}
else
{
this
.
prefix
=
qualifiedName
.
substring
(
0
,
index
)
;
this
.
localName
=
qualifiedName
.
substring
(
index
+
1
)
;
}
this
.
enableNamespace
=
true
;
syncData
=
true
;
}
public
short
getNodeType
(
)
{
return
Node
.
ELEMENT_NODE
;
}
public
String
getNodeValue
(
)
{
return
null
;
}
public
void
setNodeValue
(
String
value
)
throws
DOMException
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
public
NamedNodeMap
getAttributes
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
attributes
;
}
public
Node
cloneNode
(
boolean
deep
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
ElementImpl
newnode
=
(
ElementImpl
)
super
.
cloneNode
(
deep
)
;
newnode
.
attributes
=
attributes
.
cloneMap
(
)
;
return
newnode
;
}
public
String
getValue
(
)
{
return
null
;
}
public
String
getAttribute
(
String
name
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
Attr
attr
=
(
Attr
)
(
attributes
.
getNamedItem
(
name
)
)
;
return
(
attr
==
null
)
?
""
:
attr
.
getValue
(
)
;
}
public
Attr
getAttributeNode
(
String
name
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
(
Attr
)
attributes
.
getNamedItem
(
name
)
;
}
public
NodeList
getElementsByTagName
(
String
tagname
)
{
return
new
DeepNodeListImpl
(
this
,
tagname
)
;
}
public
String
getNamespaceURI
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
namespaceURI
;
}
public
String
getPrefix
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
prefix
;
}
public
void
setPrefix
(
String
prefix
)
throws
DOMException
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
if
(
!
DocumentImpl
.
isXMLName
(
prefix
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
INVALID_CHARACTER_ERR
,
"INVALID_CHARACTER_ERR"
)
;
}
this
.
prefix
=
prefix
;
this
.
name
=
prefix
+
":"
+
localName
;
}
public
String
getLocalName
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
localName
;
}
public
String
getTagName
(
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
name
;
}
public
void
normalize
(
)
{
Node
kid
,
next
;
for
(
kid
=
getFirstChild
(
)
;
kid
!=
null
;
kid
=
next
)
{
next
=
kid
.
getNextSibling
(
)
;
if
(
next
!=
null
&&
kid
.
getNodeType
(
)
==
Node
.
TEXT_NODE
&&
next
.
getNodeType
(
)
==
Node
.
TEXT_NODE
)
{
(
(
Text
)
kid
)
.
appendData
(
next
.
getNodeValue
(
)
)
;
removeChild
(
next
)
;
next
=
kid
;
}
else
if
(
kid
.
getNodeType
(
)
==
Node
.
ELEMENT_NODE
)
{
(
(
Element
)
kid
)
.
normalize
(
)
;
}
}
}
public
void
removeAttribute
(
String
name
)
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
AttrImpl
att
=
(
AttrImpl
)
attributes
.
getNamedItem
(
name
)
;
if
(
att
!=
null
)
{
att
.
owned
=
false
;
attributes
.
removeNamedItem
(
name
)
;
}
}
public
Attr
removeAttributeNode
(
Attr
oldAttr
)
throws
DOMException
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
AttrImpl
found
=
(
AttrImpl
)
attributes
.
getNamedItem
(
oldAttr
.
getName
(
)
)
;
if
(
found
==
oldAttr
)
{
attributes
.
removeNamedItem
(
oldAttr
.
getName
(
)
)
;
found
.
owned
=
false
;
return
found
;
}
throw
new
DOMExceptionImpl
(
DOMException
.
NOT_FOUND_ERR
,
"NOT_FOUND_ERR"
)
;
}
public
void
setAttribute
(
String
name
,
String
value
)
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
AttrImpl
newAttr
=
(
AttrImpl
)
getOwnerDocument
(
)
.
createAttribute
(
name
)
;
newAttr
.
setNodeValue
(
value
)
;
attributes
.
setNamedItem
(
newAttr
)
;
newAttr
.
owned
=
true
;
}
public
Attr
setAttributeNode
(
Attr
newAttr
)
throws
DOMException
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
if
(
!
(
newAttr
instanceof
AttrImpl
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
WRONG_DOCUMENT_ERR
,
"WRONG_DOCUMENT_ERR"
)
;
}
AttrImpl
na
=
(
AttrImpl
)
newAttr
;
AttrImpl
oldAttr
=
(
AttrImpl
)
attributes
.
getNamedItem
(
newAttr
.
getName
(
)
)
;
attributes
.
setNamedItem
(
na
)
;
na
.
owned
=
true
;
return
oldAttr
;
}
public
String
getAttributeNS
(
String
namespaceURI
,
String
localName
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
Attr
attr
=
(
Attr
)
(
attributes
.
getNamedItemNS
(
namespaceURI
,
localName
)
)
;
return
(
attr
==
null
)
?
""
:
attr
.
getValue
(
)
;
}
public
void
setAttributeNS
(
String
namespaceURI
,
String
localName
,
String
value
)
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
AttrImpl
newAttr
=
(
AttrImpl
)
(
(
DocumentImpl
)
getOwnerDocument
(
)
)
.
createAttributeNS
(
namespaceURI
,
localName
)
;
newAttr
.
setNodeValue
(
value
)
;
attributes
.
setNamedItem
(
newAttr
)
;
newAttr
.
owned
=
true
;
}
public
void
removeAttributeNS
(
String
namespaceURI
,
String
localName
)
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
AttrImpl
att
=
(
AttrImpl
)
attributes
.
getNamedItemNS
(
namespaceURI
,
localName
)
;
if
(
att
!=
null
)
{
att
.
owned
=
false
;
attributes
.
removeNamedItemNS
(
namespaceURI
,
localName
)
;
}
}
public
Attr
getAttributeNodeNS
(
String
namespaceURI
,
String
localName
)
{
if
(
syncData
)
{
synchronizeData
(
)
;
}
return
(
Attr
)
attributes
.
getNamedItemNS
(
namespaceURI
,
localName
)
;
}
public
Attr
setAttributeNodeNS
(
Attr
newAttr
)
throws
DOMException
{
if
(
readOnly
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
,
"NO_MODIFICATION_ALLOWED_ERR"
)
;
}
if
(
syncData
)
{
synchronizeData
(
)
;
}
if
(
!
(
newAttr
instanceof
AttrImpl
)
)
{
throw
new
DOMExceptionImpl
(
DOMException
.
WRONG_DOCUMENT_ERR
,
"WRONG_DOCUMENT_ERR"
)
;
}
AttrImpl
na
=
(
AttrImpl
)
newAttr
;
AttrImpl
oldAttr
=
(
AttrImpl
)
attributes
.
getNamedItemNS
(
na
.
getNamespaceURI
(
)
,
na
.
getLocalName
(
)
)
;
attributes
.
setNamedItem
(
na
)
;
na
.
owned
=
true
;
return
oldAttr
;
}
public
NodeList
getElementsByTagNameNS
(
String
namespaceURI
,
String
localName
)
{
return
new
DeepNodeListImpl
(
this
,
namespaceURI
,
localName
)
;
}
public
void
setReadOnly
(
boolean
readOnly
,
boolean
deep
)
{
super
.
setReadOnly
(
readOnly
,
deep
)
;
if
(
syncChildren
)
{
synchronizeChildren
(
)
;
}
attributes
.
setReadOnly
(
readOnly
,
true
)
;
}
protected
void
synchronizeData
(
)
{
syncData
=
false
;
setupDefaultAttributes
(
)
;
}
protected
void
setupDefaultAttributes
(
)
{
NamedNodeMapImpl
defaultAttrs
=
null
;
DocumentTypeImpl
doctype
=
(
DocumentTypeImpl
)
ownerDocument
.
getDoctype
(
)
;
if
(
doctype
!=
null
)
{
ElementDefinitionImpl
eldef
=
(
ElementDefinitionImpl
)
doctype
.
getElements
(
)
.
getNamedItem
(
getNodeName
(
)
)
;
if
(
eldef
!=
null
)
{
defaultAttrs
=
(
NamedNodeMapImpl
)
eldef
.
getAttributes
(
)
;
}
}
attributes
=
new
NamedNodeMapImpl
(
this
,
defaultAttrs
)
;
}
}
