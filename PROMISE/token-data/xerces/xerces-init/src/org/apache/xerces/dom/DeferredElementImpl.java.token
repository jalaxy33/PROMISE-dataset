package
org
.
apache
.
xerces
.
dom
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
w3c
.
dom
.
*
;
public
class
DeferredElementImpl
extends
ElementImpl
implements
DeferredNode
{
static
final
long
serialVersionUID
=
1698024469924430384L
;
protected
transient
int
fNodeIndex
;
DeferredElementImpl
(
DeferredDocumentImpl
ownerDoc
,
int
nodeIndex
)
{
super
(
ownerDoc
,
null
)
;
fNodeIndex
=
nodeIndex
;
syncData
=
true
;
syncChildren
=
true
;
}
public
final
int
getNodeIndex
(
)
{
return
fNodeIndex
;
}
protected
final
void
synchronizeData
(
)
{
syncData
=
false
;
DeferredDocumentImpl
ownerDocument
=
(
DeferredDocumentImpl
)
this
.
ownerDocument
;
name
=
ownerDocument
.
getNodeNameString
(
fNodeIndex
)
;
if
(
ownerDocument
.
fNamespacesEnabled
)
{
int
elementTypeName
=
ownerDocument
.
getNodeName
(
fNodeIndex
)
;
StringPool
fStringPool
=
ownerDocument
.
fStringPool
;
prefix
=
fStringPool
.
toString
(
fStringPool
.
getPrefixForQName
(
elementTypeName
)
)
;
namespaceURI
=
fStringPool
.
toString
(
fStringPool
.
getURIForQName
(
elementTypeName
)
)
;
localName
=
fStringPool
.
toString
(
fStringPool
.
getLocalPartForQName
(
elementTypeName
)
)
;
}
else
{
localName
=
name
;
}
setupDefaultAttributes
(
)
;
int
index
=
ownerDocument
.
getNodeValue
(
fNodeIndex
)
;
if
(
index
!=
-
1
)
{
NamedNodeMap
attrs
=
getAttributes
(
)
;
do
{
NodeImpl
attr
=
(
NodeImpl
)
ownerDocument
.
getNodeObject
(
index
)
;
attrs
.
setNamedItem
(
attr
)
;
attr
.
parentNode
=
this
;
index
=
ownerDocument
.
getNextSibling
(
index
)
;
}
while
(
index
!=
-
1
)
;
}
}
protected
final
void
synchronizeChildren
(
)
{
syncChildren
=
false
;
DeferredDocumentImpl
ownerDocument
=
(
DeferredDocumentImpl
)
this
.
ownerDocument
;
NodeImpl
last
=
null
;
for
(
int
index
=
ownerDocument
.
getFirstChild
(
fNodeIndex
)
;
index
!=
-
1
;
index
=
ownerDocument
.
getNextSibling
(
index
)
)
{
NodeImpl
node
=
(
NodeImpl
)
ownerDocument
.
getNodeObject
(
index
)
;
if
(
last
==
null
)
{
firstChild
=
node
;
}
else
{
last
.
nextSibling
=
node
;
}
node
.
parentNode
=
this
;
node
.
previousSibling
=
last
;
last
=
node
;
}
if
(
last
!=
null
)
{
lastChild
=
last
;
}
}
}
