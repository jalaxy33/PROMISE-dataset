package
org
.
apache
.
xerces
.
framework
;
import
org
.
apache
.
xerces
.
readers
.
XMLEntityHandler
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
org
.
apache
.
xerces
.
utils
.
XMLMessages
;
import
org
.
xml
.
sax
.
Locator
;
import
org
.
xml
.
sax
.
SAXParseException
;
public
final
class
XMLDTDScanner
{
private
static
final
char
[
]
version_string
=
{
'v'
,
'e'
,
'r'
,
's'
,
'i'
,
'o'
,
'n'
}
;
private
static
final
char
[
]
element_string
=
{
'E'
,
'L'
,
'E'
,
'M'
,
'E'
,
'N'
,
'T'
}
;
private
static
final
char
[
]
empty_string
=
{
'E'
,
'M'
,
'P'
,
'T'
,
'Y'
}
;
private
static
final
char
[
]
any_string
=
{
'A'
,
'N'
,
'Y'
}
;
private
static
final
char
[
]
pcdata_string
=
{
'#'
,
'P'
,
'C'
,
'D'
,
'A'
,
'T'
,
'A'
}
;
private
static
final
char
[
]
attlist_string
=
{
'A'
,
'T'
,
'T'
,
'L'
,
'I'
,
'S'
,
'T'
}
;
private
static
final
char
[
]
cdata_string
=
{
'C'
,
'D'
,
'A'
,
'T'
,
'A'
}
;
private
static
final
char
[
]
id_string
=
{
'I'
,
'D'
}
;
private
static
final
char
[
]
ref_string
=
{
'R'
,
'E'
,
'F'
}
;
private
static
final
char
[
]
entit_string
=
{
'E'
,
'N'
,
'T'
,
'I'
,
'T'
}
;
private
static
final
char
[
]
ies_string
=
{
'I'
,
'E'
,
'S'
}
;
private
static
final
char
[
]
nmtoken_string
=
{
'N'
,
'M'
,
'T'
,
'O'
,
'K'
,
'E'
,
'N'
}
;
private
static
final
char
[
]
notation_string
=
{
'N'
,
'O'
,
'T'
,
'A'
,
'T'
,
'I'
,
'O'
,
'N'
}
;
private
static
final
char
[
]
required_string
=
{
'#'
,
'R'
,
'E'
,
'Q'
,
'U'
,
'I'
,
'R'
,
'E'
,
'D'
}
;
private
static
final
char
[
]
implied_string
=
{
'#'
,
'I'
,
'M'
,
'P'
,
'L'
,
'I'
,
'E'
,
'D'
}
;
private
static
final
char
[
]
fixed_string
=
{
'#'
,
'F'
,
'I'
,
'X'
,
'E'
,
'D'
}
;
private
static
final
char
[
]
include_string
=
{
'I'
,
'N'
,
'C'
,
'L'
,
'U'
,
'D'
,
'E'
}
;
private
static
final
char
[
]
ignore_string
=
{
'I'
,
'G'
,
'N'
,
'O'
,
'R'
,
'E'
}
;
private
static
final
char
[
]
entity_string
=
{
'E'
,
'N'
,
'T'
,
'I'
,
'T'
,
'Y'
}
;
private
static
final
char
[
]
system_string
=
{
'S'
,
'Y'
,
'S'
,
'T'
,
'E'
,
'M'
}
;
private
static
final
char
[
]
public_string
=
{
'P'
,
'U'
,
'B'
,
'L'
,
'I'
,
'C'
}
;
private
static
final
char
[
]
ndata_string
=
{
'N'
,
'D'
,
'A'
,
'T'
,
'A'
}
;
private
static
final
char
[
]
encoding_string
=
{
'e'
,
'n'
,
'c'
,
'o'
,
'd'
,
'i'
,
'n'
,
'g'
}
;
private
EventHandler
fEventHandler
=
null
;
private
StringPool
fStringPool
=
null
;
private
XMLErrorReporter
fErrorReporter
=
null
;
private
XMLEntityHandler
fEntityHandler
=
null
;
private
XMLEntityHandler
.
EntityReader
fEntityReader
=
null
;
private
XMLEntityHandler
.
CharBuffer
fLiteralData
=
null
;
private
int
fReaderId
=
-
1
;
private
int
fSystemLiteral
=
-
1
;
private
int
fPubidLiteral
=
-
1
;
private
int
[
]
opStack
=
null
;
private
int
[
]
nodeIndexStack
=
null
;
private
int
[
]
prevNodeIndexStack
=
null
;
private
int
fScannerState
=
SCANNER_STATE_INVALID
;
private
int
fIncludeSectDepth
=
0
;
private
int
fDoctypeReader
=
-
1
;
private
int
fExternalSubsetReader
=
-
1
;
private
int
fDefaultAttValueReader
=
-
1
;
private
int
fDefaultAttValueElementType
=
-
1
;
private
int
fDefaultAttValueAttrName
=
-
1
;
private
int
fDefaultAttValueOffset
=
-
1
;
private
int
fDefaultAttValueMark
=
-
1
;
private
int
fEntityValueReader
=
-
1
;
private
int
fEntityValueMark
=
-
1
;
private
int
fEMPTY
=
-
1
;
private
int
fANY
=
-
1
;
private
int
fMIXED
=
-
1
;
private
int
fCHILDREN
=
-
1
;
private
int
fCDATA
=
-
1
;
private
int
fID
=
-
1
;
private
int
fIDREF
=
-
1
;
private
int
fIDREFS
=
-
1
;
private
int
fENTITY
=
-
1
;
private
int
fENTITIES
=
-
1
;
private
int
fNMTOKEN
=
-
1
;
private
int
fNMTOKENS
=
-
1
;
private
int
fNOTATION
=
-
1
;
private
int
fENUMERATION
=
-
1
;
private
int
fREQUIRED
=
-
1
;
private
int
fIMPLIED
=
-
1
;
private
int
fFIXED
=
-
1
;
private
int
fDEFAULT
=
-
1
;
private
int
fXMLSpace
=
-
1
;
private
int
fDefault
=
-
1
;
private
int
fPreserve
=
-
1
;
private
int
fScannerMarkupDepth
=
0
;
private
int
fScannerParenDepth
=
0
;
public
XMLDTDScanner
(
EventHandler
eventHandler
,
StringPool
stringPool
,
XMLErrorReporter
errorReporter
,
XMLEntityHandler
entityHandler
,
XMLEntityHandler
.
CharBuffer
literalData
)
{
fEventHandler
=
eventHandler
;
fStringPool
=
stringPool
;
fErrorReporter
=
errorReporter
;
fEntityHandler
=
entityHandler
;
fLiteralData
=
literalData
;
init
(
)
;
}
public
boolean
getReadingExternalEntity
(
)
{
return
fReaderId
!=
fDoctypeReader
;
}
public
boolean
getReadingContentSpec
(
)
{
return
getScannerState
(
)
==
SCANNER_STATE_CONTENTSPEC
;
}
public
int
markupDepth
(
)
{
return
fScannerMarkupDepth
;
}
private
int
increaseMarkupDepth
(
)
{
return
fScannerMarkupDepth
++
;
}
private
int
decreaseMarkupDepth
(
)
{
return
fScannerMarkupDepth
--
;
}
public
int
parenDepth
(
)
{
return
fScannerParenDepth
;
}
private
void
setParenDepth
(
int
parenDepth
)
{
fScannerParenDepth
=
parenDepth
;
}
private
void
increaseParenDepth
(
)
{
fScannerParenDepth
++
;
}
private
void
decreaseParenDepth
(
)
{
fScannerParenDepth
--
;
}
public
void
reset
(
StringPool
stringPool
,
XMLEntityHandler
.
CharBuffer
literalData
)
throws
Exception
{
fStringPool
=
stringPool
;
fLiteralData
=
literalData
;
fEntityReader
=
null
;
fReaderId
=
-
1
;
fSystemLiteral
=
-
1
;
fPubidLiteral
=
-
1
;
opStack
=
null
;
nodeIndexStack
=
null
;
prevNodeIndexStack
=
null
;
fScannerState
=
SCANNER_STATE_INVALID
;
fIncludeSectDepth
=
0
;
fDoctypeReader
=
-
1
;
fExternalSubsetReader
=
-
1
;
fDefaultAttValueReader
=
-
1
;
fDefaultAttValueElementType
=
-
1
;
fDefaultAttValueAttrName
=
-
1
;
fDefaultAttValueOffset
=
-
1
;
fDefaultAttValueMark
=
-
1
;
fEntityValueReader
=
-
1
;
fEntityValueMark
=
-
1
;
fScannerMarkupDepth
=
0
;
fScannerParenDepth
=
0
;
init
(
)
;
}
private
void
init
(
)
{
fEMPTY
=
fStringPool
.
addSymbol
(
"EMPTY"
)
;
fANY
=
fStringPool
.
addSymbol
(
"ANY"
)
;
fMIXED
=
fStringPool
.
addSymbol
(
"MIXED"
)
;
fCHILDREN
=
fStringPool
.
addSymbol
(
"CHILDREN"
)
;
fCDATA
=
fStringPool
.
addSymbol
(
"CDATA"
)
;
fID
=
fStringPool
.
addSymbol
(
"ID"
)
;
fIDREF
=
fStringPool
.
addSymbol
(
"IDREF"
)
;
fIDREFS
=
fStringPool
.
addSymbol
(
"IDREFS"
)
;
fENTITY
=
fStringPool
.
addSymbol
(
"ENTITY"
)
;
fENTITIES
=
fStringPool
.
addSymbol
(
"ENTITIES"
)
;
fNMTOKEN
=
fStringPool
.
addSymbol
(
"NMTOKEN"
)
;
fNMTOKENS
=
fStringPool
.
addSymbol
(
"NMTOKENS"
)
;
fNOTATION
=
fStringPool
.
addSymbol
(
"NOTATION"
)
;
fENUMERATION
=
fStringPool
.
addSymbol
(
"ENUMERATION"
)
;
fREQUIRED
=
fStringPool
.
addSymbol
(
"#REQUIRED"
)
;
fIMPLIED
=
fStringPool
.
addSymbol
(
"#IMPLIED"
)
;
fFIXED
=
fStringPool
.
addSymbol
(
"#FIXED"
)
;
fDEFAULT
=
fStringPool
.
addSymbol
(
""
)
;
fXMLSpace
=
fStringPool
.
addSymbol
(
"xml:space"
)
;
fDefault
=
fStringPool
.
addSymbol
(
"default"
)
;
fPreserve
=
fStringPool
.
addSymbol
(
"preserve"
)
;
}
public
interface
EventHandler
{
public
int
saveCurrentLocation
(
)
throws
Exception
;
public
boolean
validVersionNum
(
String
version
)
throws
Exception
;
public
boolean
validEncName
(
String
encoding
)
throws
Exception
;
public
int
validPublicId
(
String
publicId
)
throws
Exception
;
public
void
doctypeDecl
(
int
rootElementType
,
int
publicId
,
int
systemId
)
throws
Exception
;
public
void
startReadingFromExternalSubset
(
int
publicId
,
int
systemId
)
throws
Exception
;
public
void
stopReadingFromExternalSubset
(
)
throws
Exception
;
public
int
addElementDecl
(
int
elementType
)
throws
Exception
;
public
int
addElementDecl
(
int
elementType
,
int
contentSpecType
,
int
contentSpec
)
throws
Exception
;
public
int
addAttDef
(
int
elementIndex
,
int
attName
,
int
attType
,
int
enumeration
,
int
attDefaultType
,
int
attDefaultValue
)
throws
Exception
;
public
int
addUniqueLeafNode
(
int
nameIndex
)
throws
Exception
;
public
int
addContentSpecNode
(
int
nodeType
,
int
nodeValue
)
throws
Exception
;
public
int
addContentSpecNode
(
int
nodeType
,
int
leftNodeIndex
,
int
rightNodeIndex
)
throws
Exception
;
public
String
getContentSpecNodeAsString
(
int
nodeIndex
)
throws
Exception
;
public
int
addInternalPEDecl
(
int
name
,
int
value
,
int
location
)
throws
Exception
;
public
int
addExternalPEDecl
(
int
name
,
int
publicId
,
int
systemId
)
throws
Exception
;
public
int
addInternalEntityDecl
(
int
name
,
int
value
,
int
location
)
throws
Exception
;
public
int
addExternalEntityDecl
(
int
name
,
int
publicId
,
int
systemId
)
throws
Exception
;
public
int
addUnparsedEntityDecl
(
int
name
,
int
publicId
,
int
systemId
,
int
notationName
)
throws
Exception
;
public
int
startEnumeration
(
)
throws
Exception
;
public
void
addNameToEnumeration
(
int
enumIndex
,
int
elementType
,
int
attrName
,
int
nameIndex
,
boolean
isNotationType
)
throws
Exception
;
public
void
endEnumeration
(
int
enumIndex
)
throws
Exception
;
public
int
addNotationDecl
(
int
notationName
,
int
publicId
,
int
systemId
)
throws
Exception
;
public
void
callComment
(
int
data
)
throws
Exception
;
public
void
callProcessingInstruction
(
int
piTarget
,
int
piData
)
throws
Exception
;
public
int
scanElementType
(
XMLEntityHandler
.
EntityReader
entityReader
,
char
fastchar
)
throws
Exception
;
public
int
checkForElementTypeWithPEReference
(
XMLEntityHandler
.
EntityReader
entityReader
,
char
fastchar
)
throws
Exception
;
public
int
checkForAttributeNameWithPEReference
(
XMLEntityHandler
.
EntityReader
entityReader
,
char
fastcheck
)
throws
Exception
;
public
int
checkForNameWithPEReference
(
XMLEntityHandler
.
EntityReader
entityReader
,
char
fastcheck
)
throws
Exception
;
public
int
checkForNmtokenWithPEReference
(
XMLEntityHandler
.
EntityReader
entityReader
,
char
fastcheck
)
throws
Exception
;
public
int
scanDefaultAttValue
(
int
elementType
,
int
attrName
,
int
attType
,
int
enumeration
)
throws
Exception
;
}
private
void
reportFatalXMLError
(
int
majorCode
,
int
minorCode
)
throws
Exception
{
fErrorReporter
.
reportError
(
fErrorReporter
.
getLocator
(
)
,
XMLMessages
.
XML_DOMAIN
,
majorCode
,
minorCode
,
null
,
XMLErrorReporter
.
ERRORTYPE_FATAL_ERROR
)
;
}
private
void
reportFatalXMLError
(
int
majorCode
,
int
minorCode
,
int
stringIndex1
)
throws
Exception
{
Object
[
]
args
=
{
fStringPool
.
toString
(
stringIndex1
)
}
;
fErrorReporter
.
reportError
(
fErrorReporter
.
getLocator
(
)
,
XMLMessages
.
XML_DOMAIN
,
majorCode
,
minorCode
,
args
,
XMLErrorReporter
.
ERRORTYPE_FATAL_ERROR
)
;
}
private
void
reportFatalXMLError
(
int
majorCode
,
int
minorCode
,
String
string1
)
throws
Exception
{
Object
[
]
args
=
{
string1
}
;
fErrorReporter
.
reportError
(
fErrorReporter
.
getLocator
(
)
,
XMLMessages
.
XML_DOMAIN
,
majorCode
,
minorCode
,
args
,
XMLErrorReporter
.
ERRORTYPE_FATAL_ERROR
)
;
}
private
void
reportFatalXMLError
(
int
majorCode
,
int
minorCode
,
int
stringIndex1
,
int
stringIndex2
)
throws
Exception
{
Object
[
]
args
=
{
fStringPool
.
toString
(
stringIndex1
)
,
fStringPool
.
toString
(
stringIndex2
)
}
;
fErrorReporter
.
reportError
(
fErrorReporter
.
getLocator
(
)
,
XMLMessages
.
XML_DOMAIN
,
majorCode
,
minorCode
,
args
,
XMLErrorReporter
.
ERRORTYPE_FATAL_ERROR
)
;
}
private
void
reportFatalXMLError
(
int
majorCode
,
int
minorCode
,
String
string1
,
String
string2
)
throws
Exception
{
Object
[
]
args
=
{
string1
,
string2
}
;
fErrorReporter
.
reportError
(
fErrorReporter
.
getLocator
(
)
,
XMLMessages
.
XML_DOMAIN
,
majorCode
,
minorCode
,
args
,
XMLErrorReporter
.
ERRORTYPE_FATAL_ERROR
)
;
}
private
void
reportFatalXMLError
(
int
majorCode
,
int
minorCode
,
String
string1
,
String
string2
,
String
string3
)
throws
Exception
{
Object
[
]
args
=
{
string1
,
string2
,
string3
}
;
fErrorReporter
.
reportError
(
fErrorReporter
.
getLocator
(
)
,
XMLMessages
.
XML_DOMAIN
,
majorCode
,
minorCode
,
args
,
XMLErrorReporter
.
ERRORTYPE_FATAL_ERROR
)
;
}
private
void
abortMarkup
(
int
majorCode
,
int
minorCode
)
throws
Exception
{
reportFatalXMLError
(
majorCode
,
minorCode
)
;
skipPastEndOfCurrentMarkup
(
)
;
}
private
void
abortMarkup
(
int
majorCode
,
int
minorCode
,
int
stringIndex1
)
throws
Exception
{
reportFatalXMLError
(
majorCode
,
minorCode
,
stringIndex1
)
;
skipPastEndOfCurrentMarkup
(
)
;
}
private
void
abortMarkup
(
int
majorCode
,
int
minorCode
,
String
string1
)
throws
Exception
{
reportFatalXMLError
(
majorCode
,
minorCode
,
string1
)
;
skipPastEndOfCurrentMarkup
(
)
;
}
private
void
abortMarkup
(
int
majorCode
,
int
minorCode
,
int
stringIndex1
,
int
stringIndex2
)
throws
Exception
{
reportFatalXMLError
(
majorCode
,
minorCode
,
stringIndex1
,
stringIndex2
)
;
skipPastEndOfCurrentMarkup
(
)
;
}
private
void
skipPastEndOfCurrentMarkup
(
)
throws
Exception
{
fEntityReader
.
skipToChar
(
'>'
)
;
if
(
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
decreaseMarkupDepth
(
)
;
}
static
private
final
int
SCANNER_STATE_INVALID
=
-
1
;
static
private
final
int
SCANNER_STATE_END_OF_INPUT
=
0
;
static
private
final
int
SCANNER_STATE_DOCTYPEDECL
=
50
;
static
private
final
int
SCANNER_STATE_MARKUP_DECL
=
51
;
static
private
final
int
SCANNER_STATE_TEXTDECL
=
53
;
static
private
final
int
SCANNER_STATE_COMMENT
=
54
;
static
private
final
int
SCANNER_STATE_PI
=
55
;
static
private
final
int
SCANNER_STATE_DEFAULT_ATTRIBUTE_VALUE
=
56
;
static
private
final
int
SCANNER_STATE_CONTENTSPEC
=
57
;
static
private
final
int
SCANNER_STATE_ENTITY_VALUE
=
58
;
static
private
final
int
SCANNER_STATE_SYSTEMLITERAL
=
59
;
static
private
final
int
SCANNER_STATE_PUBIDLITERAL
=
60
;
private
int
setScannerState
(
int
scannerState
)
{
int
prevState
=
fScannerState
;
fScannerState
=
scannerState
;
return
prevState
;
}
private
int
getScannerState
(
)
{
return
fScannerState
;
}
private
void
restoreScannerState
(
int
scannerState
)
{
if
(
fScannerState
!=
SCANNER_STATE_END_OF_INPUT
)
fScannerState
=
scannerState
;
}
public
void
readerChange
(
XMLEntityHandler
.
EntityReader
nextReader
,
int
nextReaderId
)
throws
Exception
{
fEntityReader
=
nextReader
;
fReaderId
=
nextReaderId
;
if
(
fScannerState
==
SCANNER_STATE_DEFAULT_ATTRIBUTE_VALUE
)
{
fDefaultAttValueOffset
=
fEntityReader
.
currentOffset
(
)
;
fDefaultAttValueMark
=
fDefaultAttValueOffset
;
}
else
if
(
fScannerState
==
SCANNER_STATE_ENTITY_VALUE
)
{
fEntityValueMark
=
fEntityReader
.
currentOffset
(
)
;
}
}
public
void
endOfInput
(
int
entityNameIndex
,
boolean
moreToFollow
)
throws
Exception
{
moreToFollow
=
fReaderId
!=
fExternalSubsetReader
;
switch
(
fScannerState
)
{
case
SCANNER_STATE_INVALID
:
throw
new
RuntimeException
(
"cannot happen 2"
)
;
case
SCANNER_STATE_END_OF_INPUT
:
break
;
case
SCANNER_STATE_MARKUP_DECL
:
if
(
!
moreToFollow
&&
fIncludeSectDepth
>
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_INCLUDESECT_UNTERMINATED
,
XMLMessages
.
P62_UNTERMINATED
)
;
}
break
;
case
SCANNER_STATE_DOCTYPEDECL
:
throw
new
RuntimeException
(
"cannot happen 2.5"
)
;
case
SCANNER_STATE_TEXTDECL
:
break
;
case
SCANNER_STATE_SYSTEMLITERAL
:
if
(
!
moreToFollow
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SYSTEMID_UNTERMINATED
,
XMLMessages
.
P11_UNTERMINATED
)
;
}
else
{
}
break
;
case
SCANNER_STATE_PUBIDLITERAL
:
if
(
!
moreToFollow
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_PUBLICID_UNTERMINATED
,
XMLMessages
.
P12_UNTERMINATED
)
;
}
else
{
}
break
;
case
SCANNER_STATE_COMMENT
:
if
(
!
moreToFollow
&&
!
getReadingExternalEntity
(
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_COMMENT_UNTERMINATED
,
XMLMessages
.
P15_UNTERMINATED
)
;
}
else
{
}
break
;
case
SCANNER_STATE_PI
:
if
(
!
moreToFollow
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_PI_UNTERMINATED
,
XMLMessages
.
P16_UNTERMINATED
)
;
}
else
{
reportFatalXMLError
(
XMLMessages
.
MSG_PI_NOT_IN_ONE_ENTITY
,
XMLMessages
.
P78_NOT_WELLFORMED
)
;
}
break
;
case
SCANNER_STATE_DEFAULT_ATTRIBUTE_VALUE
:
if
(
!
moreToFollow
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_ATTRIBUTE_VALUE_UNTERMINATED
,
XMLMessages
.
P10_UNTERMINATED
,
fDefaultAttValueElementType
,
fDefaultAttValueAttrName
)
;
}
else
if
(
fReaderId
==
fDefaultAttValueReader
)
{
}
else
{
fEntityReader
.
append
(
fLiteralData
,
fDefaultAttValueMark
,
fDefaultAttValueOffset
-
fDefaultAttValueMark
)
;
}
break
;
case
SCANNER_STATE_CONTENTSPEC
:
break
;
case
SCANNER_STATE_ENTITY_VALUE
:
if
(
fReaderId
==
fEntityValueReader
)
{
}
else
{
fEntityReader
.
append
(
fLiteralData
,
fEntityValueMark
,
fEntityReader
.
currentOffset
(
)
-
fEntityValueMark
)
;
}
break
;
default
:
throw
new
RuntimeException
(
"cannot happen 3"
)
;
}
if
(
!
moreToFollow
)
{
setScannerState
(
SCANNER_STATE_END_OF_INPUT
)
;
}
}
private
int
scanCharRef
(
)
throws
Exception
{
int
valueOffset
=
fEntityReader
.
currentOffset
(
)
;
boolean
hex
=
fEntityReader
.
lookingAtChar
(
'x'
,
true
)
;
int
num
=
fEntityReader
.
scanCharRef
(
hex
)
;
if
(
num
<
0
)
{
switch
(
num
)
{
case
XMLEntityHandler
.
CHARREF_RESULT_SEMICOLON_REQUIRED
:
reportFatalXMLError
(
XMLMessages
.
MSG_SEMICOLON_REQUIRED_IN_CHARREF
,
XMLMessages
.
P66_SEMICOLON_REQUIRED
)
;
return
-
1
;
case
XMLEntityHandler
.
CHARREF_RESULT_INVALID_CHAR
:
int
majorCode
=
hex
?
XMLMessages
.
MSG_HEXDIGIT_REQUIRED_IN_CHARREF
:
XMLMessages
.
MSG_DIGIT_REQUIRED_IN_CHARREF
;
int
minorCode
=
hex
?
XMLMessages
.
P66_HEXDIGIT_REQUIRED
:
XMLMessages
.
P66_DIGIT_REQUIRED
;
reportFatalXMLError
(
majorCode
,
minorCode
)
;
return
-
1
;
case
XMLEntityHandler
.
CHARREF_RESULT_OUT_OF_RANGE
:
num
=
0x110000
;
break
;
}
}
if
(
num
<
0x20
)
{
if
(
num
==
0x09
||
num
==
0x0A
||
num
==
0x0D
)
{
return
num
;
}
}
else
if
(
num
<=
0xD7FF
||
(
num
>=
0xE000
&&
(
num
<=
0xFFFD
||
(
num
>=
0x10000
&&
num
<=
0x10FFFF
)
)
)
)
{
return
num
;
}
int
valueLength
=
fEntityReader
.
currentOffset
(
)
-
valueOffset
;
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHARREF
,
XMLMessages
.
WFC_LEGAL_CHARACTER
,
fEntityReader
.
addString
(
valueOffset
,
valueLength
)
)
;
return
-
1
;
}
private
void
scanComment
(
)
throws
Exception
{
int
commentOffset
=
fEntityReader
.
currentOffset
(
)
;
boolean
sawDashDash
=
false
;
int
previousState
=
setScannerState
(
SCANNER_STATE_COMMENT
)
;
while
(
fScannerState
==
SCANNER_STATE_COMMENT
)
{
if
(
fEntityReader
.
lookingAtChar
(
'-'
,
false
)
)
{
int
nextEndOffset
=
fEntityReader
.
currentOffset
(
)
;
int
endOffset
=
0
;
fEntityReader
.
lookingAtChar
(
'-'
,
true
)
;
int
offset
=
fEntityReader
.
currentOffset
(
)
;
int
count
=
1
;
while
(
fEntityReader
.
lookingAtChar
(
'-'
,
true
)
)
{
count
++
;
endOffset
=
nextEndOffset
;
nextEndOffset
=
offset
;
offset
=
fEntityReader
.
currentOffset
(
)
;
}
if
(
count
>
1
)
{
if
(
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
if
(
!
sawDashDash
&&
count
>
2
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_DASH_DASH_IN_COMMENT
,
XMLMessages
.
P15_DASH_DASH
)
;
sawDashDash
=
true
;
}
decreaseMarkupDepth
(
)
;
fEventHandler
.
callComment
(
fEntityReader
.
addString
(
commentOffset
,
endOffset
-
commentOffset
)
)
;
restoreScannerState
(
previousState
)
;
return
;
}
else
if
(
!
sawDashDash
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_DASH_DASH_IN_COMMENT
,
XMLMessages
.
P15_DASH_DASH
)
;
sawDashDash
=
true
;
}
}
}
else
{
if
(
!
fEntityReader
.
lookingAtValidChar
(
true
)
)
{
int
invChar
=
fEntityReader
.
scanInvalidChar
(
)
;
if
(
fScannerState
!=
SCANNER_STATE_END_OF_INPUT
)
{
if
(
invChar
>=
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_COMMENT
,
XMLMessages
.
P15_INVALID_CHARACTER
,
Integer
.
toHexString
(
invChar
)
)
;
}
}
}
}
}
restoreScannerState
(
previousState
)
;
}
private
void
scanPI
(
int
piTarget
)
throws
Exception
{
String
piTargetString
=
fStringPool
.
toString
(
piTarget
)
;
if
(
piTargetString
.
length
(
)
==
3
&&
(
piTargetString
.
charAt
(
0
)
==
'X'
||
piTargetString
.
charAt
(
0
)
==
'x'
)
&&
(
piTargetString
.
charAt
(
1
)
==
'M'
||
piTargetString
.
charAt
(
1
)
==
'm'
)
&&
(
piTargetString
.
charAt
(
2
)
==
'L'
||
piTargetString
.
charAt
(
2
)
==
'l'
)
)
{
abortMarkup
(
XMLMessages
.
MSG_RESERVED_PITARGET
,
XMLMessages
.
P17_RESERVED_PITARGET
)
;
return
;
}
int
prevState
=
setScannerState
(
SCANNER_STATE_PI
)
;
int
piDataOffset
=
-
1
;
int
piDataLength
=
0
;
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
{
if
(
!
fEntityReader
.
lookingAtChar
(
'?'
,
true
)
||
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
if
(
fScannerState
!=
SCANNER_STATE_END_OF_INPUT
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_IN_PI
,
XMLMessages
.
P16_WHITESPACE_REQUIRED
)
;
restoreScannerState
(
prevState
)
;
}
return
;
}
decreaseMarkupDepth
(
)
;
restoreScannerState
(
prevState
)
;
}
else
{
fEntityReader
.
skipPastSpaces
(
)
;
piDataOffset
=
fEntityReader
.
currentOffset
(
)
;
while
(
fScannerState
==
SCANNER_STATE_PI
)
{
while
(
fEntityReader
.
lookingAtChar
(
'?'
,
false
)
)
{
int
offset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
lookingAtChar
(
'?'
,
true
)
;
if
(
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
piDataLength
=
offset
-
piDataOffset
;
decreaseMarkupDepth
(
)
;
restoreScannerState
(
prevState
)
;
break
;
}
}
if
(
fScannerState
!=
SCANNER_STATE_PI
)
break
;
if
(
!
fEntityReader
.
lookingAtValidChar
(
true
)
)
{
int
invChar
=
fEntityReader
.
scanInvalidChar
(
)
;
if
(
fScannerState
!=
SCANNER_STATE_END_OF_INPUT
)
{
if
(
invChar
>=
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_PI
,
XMLMessages
.
P16_INVALID_CHARACTER
,
Integer
.
toHexString
(
invChar
)
)
;
}
skipPastEndOfCurrentMarkup
(
)
;
restoreScannerState
(
prevState
)
;
}
return
;
}
}
}
int
piData
=
piDataLength
==
0
?
StringPool
.
EMPTY_STRING
:
fEntityReader
.
addString
(
piDataOffset
,
piDataLength
)
;
fEventHandler
.
callProcessingInstruction
(
piTarget
,
piData
)
;
}
public
boolean
scanDoctypeDecl
(
)
throws
Exception
{
increaseMarkupDepth
(
)
;
fEntityReader
=
fEntityHandler
.
getEntityReader
(
)
;
fReaderId
=
fEntityHandler
.
getReaderId
(
)
;
fDoctypeReader
=
fReaderId
;
setScannerState
(
SCANNER_STATE_DOCTYPEDECL
)
;
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_ROOT_ELEMENT_TYPE_IN_DOCTYPEDECL
,
XMLMessages
.
P28_SPACE_REQUIRED
)
;
return
false
;
}
fEntityReader
.
skipPastSpaces
(
)
;
int
rootElementType
=
fEventHandler
.
scanElementType
(
fEntityReader
,
' '
)
;
if
(
rootElementType
==
-
1
)
{
abortMarkup
(
XMLMessages
.
MSG_ROOT_ELEMENT_TYPE_REQUIRED
,
XMLMessages
.
P28_ROOT_ELEMENT_TYPE_REQUIRED
)
;
return
false
;
}
boolean
lbrkt
;
boolean
scanExternalSubset
=
false
;
int
publicId
=
-
1
;
int
systemId
=
-
1
;
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
fEntityReader
.
skipPastSpaces
(
)
;
if
(
!
(
lbrkt
=
fEntityReader
.
lookingAtChar
(
'['
,
true
)
)
&&
!
fEntityReader
.
lookingAtChar
(
'>'
,
false
)
)
{
if
(
!
scanExternalID
(
false
)
)
{
skipPastEndOfCurrentMarkup
(
)
;
return
false
;
}
scanExternalSubset
=
true
;
publicId
=
fPubidLiteral
;
systemId
=
fSystemLiteral
;
fEntityReader
.
skipPastSpaces
(
)
;
lbrkt
=
fEntityReader
.
lookingAtChar
(
'['
,
true
)
;
}
}
else
lbrkt
=
fEntityReader
.
lookingAtChar
(
'['
,
true
)
;
fEventHandler
.
doctypeDecl
(
rootElementType
,
publicId
,
systemId
)
;
if
(
lbrkt
)
{
scanDecls
(
false
)
;
fEntityReader
.
skipPastSpaces
(
)
;
}
if
(
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
if
(
fScannerState
!=
SCANNER_STATE_END_OF_INPUT
)
{
abortMarkup
(
XMLMessages
.
MSG_DOCTYPEDECL_UNTERMINATED
,
XMLMessages
.
P28_UNTERMINATED
,
rootElementType
)
;
}
return
false
;
}
decreaseMarkupDepth
(
)
;
if
(
scanExternalSubset
)
fEventHandler
.
startReadingFromExternalSubset
(
publicId
,
systemId
)
;
return
true
;
}
private
boolean
scanExternalID
(
boolean
scanPublicID
)
throws
Exception
{
fSystemLiteral
=
-
1
;
fPubidLiteral
=
-
1
;
int
offset
=
fEntityReader
.
currentOffset
(
)
;
if
(
fEntityReader
.
skippedString
(
system_string
)
)
{
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_SYSTEMLITERAL_IN_EXTERNALID
,
XMLMessages
.
P75_SPACE_REQUIRED
)
;
return
false
;
}
fEntityReader
.
skipPastSpaces
(
)
;
return
scanSystemLiteral
(
)
;
}
if
(
fEntityReader
.
skippedString
(
public_string
)
)
{
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_PUBIDLITERAL_IN_EXTERNALID
,
XMLMessages
.
P75_SPACE_REQUIRED
)
;
return
false
;
}
fEntityReader
.
skipPastSpaces
(
)
;
if
(
!
scanPubidLiteral
(
)
)
return
false
;
if
(
scanPublicID
)
{
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
return
true
;
fEntityReader
.
skipPastSpaces
(
)
;
if
(
fEntityReader
.
lookingAtChar
(
'>'
,
false
)
)
return
true
;
}
else
{
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SPACE_REQUIRED_AFTER_PUBIDLITERAL_IN_EXTERNALID
,
XMLMessages
.
P75_SPACE_REQUIRED
)
;
return
false
;
}
fEntityReader
.
skipPastSpaces
(
)
;
}
return
scanSystemLiteral
(
)
;
}
reportFatalXMLError
(
XMLMessages
.
MSG_EXTERNALID_REQUIRED
,
XMLMessages
.
P75_INVALID
)
;
return
false
;
}
private
boolean
scanSystemLiteral
(
)
throws
Exception
{
boolean
single
;
if
(
!
(
single
=
fEntityReader
.
lookingAtChar
(
'\''
,
true
)
)
&&
!
fEntityReader
.
lookingAtChar
(
'\"'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_QUOTE_REQUIRED_IN_SYSTEMID
,
XMLMessages
.
P11_QUOTE_REQUIRED
)
;
return
false
;
}
int
prevState
=
setScannerState
(
SCANNER_STATE_SYSTEMLITERAL
)
;
int
offset
=
fEntityReader
.
currentOffset
(
)
;
char
qchar
=
single
?
'\''
:
'\"'
;
boolean
dataok
=
true
;
boolean
fragment
=
false
;
while
(
!
fEntityReader
.
lookingAtChar
(
qchar
,
false
)
)
{
if
(
fEntityReader
.
lookingAtChar
(
'#'
,
true
)
)
{
fragment
=
true
;
}
else
if
(
!
fEntityReader
.
lookingAtValidChar
(
true
)
)
{
dataok
=
false
;
int
invChar
=
fEntityReader
.
scanInvalidChar
(
)
;
if
(
fScannerState
==
SCANNER_STATE_END_OF_INPUT
)
return
false
;
if
(
invChar
>=
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_SYSTEMID
,
XMLMessages
.
P11_INVALID_CHARACTER
,
Integer
.
toHexString
(
invChar
)
)
;
}
}
}
if
(
dataok
)
{
fSystemLiteral
=
fEntityReader
.
addString
(
offset
,
fEntityReader
.
currentOffset
(
)
-
offset
)
;
if
(
fragment
)
{
Object
[
]
args
=
{
fStringPool
.
toString
(
fSystemLiteral
)
}
;
fErrorReporter
.
reportError
(
fErrorReporter
.
getLocator
(
)
,
XMLMessages
.
XML_DOMAIN
,
XMLMessages
.
MSG_URI_FRAGMENT_IN_SYSTEMID
,
XMLMessages
.
P11_URI_FRAGMENT
,
args
,
XMLErrorReporter
.
ERRORTYPE_RECOVERABLE_ERROR
)
;
}
}
fEntityReader
.
lookingAtChar
(
qchar
,
true
)
;
restoreScannerState
(
prevState
)
;
return
dataok
;
}
private
boolean
scanPubidLiteral
(
)
throws
Exception
{
boolean
single
;
if
(
!
(
single
=
fEntityReader
.
lookingAtChar
(
'\''
,
true
)
)
&&
!
fEntityReader
.
lookingAtChar
(
'\"'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_QUOTE_REQUIRED_IN_PUBLICID
,
XMLMessages
.
P12_QUOTE_REQUIRED
)
;
return
false
;
}
char
qchar
=
single
?
'\''
:
'\"'
;
int
prevState
=
setScannerState
(
SCANNER_STATE_PUBIDLITERAL
)
;
boolean
dataok
=
true
;
while
(
true
)
{
if
(
fEntityReader
.
lookingAtChar
(
(
char
)
0x09
,
true
)
)
{
dataok
=
false
;
reportFatalXMLError
(
XMLMessages
.
MSG_PUBIDCHAR_ILLEGAL
,
XMLMessages
.
P12_INVALID_CHARACTER
,
"9"
)
;
}
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
break
;
}
int
offset
=
fEntityReader
.
currentOffset
(
)
;
int
dataOffset
=
fLiteralData
.
length
(
)
;
int
toCopy
=
offset
;
while
(
true
)
{
if
(
fEntityReader
.
lookingAtChar
(
qchar
,
true
)
)
{
if
(
dataok
&&
offset
-
toCopy
>
0
)
fEntityReader
.
append
(
fLiteralData
,
toCopy
,
offset
-
toCopy
)
;
break
;
}
if
(
fEntityReader
.
lookingAtChar
(
(
char
)
0x09
,
true
)
)
{
dataok
=
false
;
reportFatalXMLError
(
XMLMessages
.
MSG_PUBIDCHAR_ILLEGAL
,
XMLMessages
.
P12_INVALID_CHARACTER
,
"9"
)
;
continue
;
}
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
if
(
dataok
&&
offset
-
toCopy
>
0
)
fEntityReader
.
append
(
fLiteralData
,
toCopy
,
offset
-
toCopy
)
;
while
(
true
)
{
if
(
fEntityReader
.
lookingAtChar
(
(
char
)
0x09
,
true
)
)
{
dataok
=
false
;
reportFatalXMLError
(
XMLMessages
.
MSG_PUBIDCHAR_ILLEGAL
,
XMLMessages
.
P12_INVALID_CHARACTER
,
"9"
)
;
break
;
}
else
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
{
break
;
}
}
if
(
fEntityReader
.
lookingAtChar
(
qchar
,
true
)
)
break
;
if
(
dataok
)
{
fLiteralData
.
append
(
' '
)
;
offset
=
fEntityReader
.
currentOffset
(
)
;
toCopy
=
offset
;
}
continue
;
}
if
(
!
fEntityReader
.
lookingAtValidChar
(
true
)
)
{
int
invChar
=
fEntityReader
.
scanInvalidChar
(
)
;
if
(
fScannerState
==
SCANNER_STATE_END_OF_INPUT
)
return
false
;
dataok
=
false
;
if
(
invChar
>=
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_PUBLICID
,
XMLMessages
.
P12_INVALID_CHARACTER
,
Integer
.
toHexString
(
invChar
)
)
;
}
}
if
(
dataok
)
offset
=
fEntityReader
.
currentOffset
(
)
;
}
if
(
dataok
)
{
int
dataLength
=
fLiteralData
.
length
(
)
-
dataOffset
;
fPubidLiteral
=
fLiteralData
.
addString
(
dataOffset
,
dataLength
)
;
String
publicId
=
fStringPool
.
toString
(
fPubidLiteral
)
;
int
invCharIndex
=
fEventHandler
.
validPublicId
(
publicId
)
;
if
(
invCharIndex
>=
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_PUBIDCHAR_ILLEGAL
,
XMLMessages
.
P12_INVALID_CHARACTER
,
Integer
.
toHexString
(
publicId
.
charAt
(
invCharIndex
)
)
)
;
return
false
;
}
}
restoreScannerState
(
prevState
)
;
return
dataok
;
}
public
void
scanDecls
(
boolean
extSubset
)
throws
Exception
{
if
(
extSubset
)
fExternalSubsetReader
=
fReaderId
;
fIncludeSectDepth
=
0
;
boolean
parseTextDecl
=
extSubset
;
int
prevState
=
setScannerState
(
SCANNER_STATE_MARKUP_DECL
)
;
while
(
fScannerState
==
SCANNER_STATE_MARKUP_DECL
)
{
boolean
newParseTextDecl
=
false
;
if
(
!
extSubset
&&
fEntityReader
.
lookingAtChar
(
']'
,
true
)
)
{
restoreScannerState
(
prevState
)
;
return
;
}
if
(
fEntityReader
.
lookingAtChar
(
'<'
,
true
)
)
{
int
olddepth
=
markupDepth
(
)
;
increaseMarkupDepth
(
)
;
if
(
fEntityReader
.
lookingAtChar
(
'!'
,
true
)
)
{
if
(
fEntityReader
.
lookingAtChar
(
'-'
,
true
)
)
{
if
(
fEntityReader
.
lookingAtChar
(
'-'
,
true
)
)
{
scanComment
(
)
;
}
else
{
abortMarkup
(
XMLMessages
.
MSG_MARKUP_NOT_RECOGNIZED_IN_DTD
,
XMLMessages
.
P29_NOT_RECOGNIZED
)
;
}
}
else
if
(
fEntityReader
.
lookingAtChar
(
'['
,
true
)
&&
getReadingExternalEntity
(
)
)
{
checkForPEReference
(
false
)
;
if
(
fEntityReader
.
skippedString
(
include_string
)
)
{
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'['
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_MARKUP_NOT_RECOGNIZED_IN_DTD
,
XMLMessages
.
P29_NOT_RECOGNIZED
)
;
}
else
{
fIncludeSectDepth
++
;
}
}
else
if
(
fEntityReader
.
skippedString
(
ignore_string
)
)
{
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'['
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_MARKUP_NOT_RECOGNIZED_IN_DTD
,
XMLMessages
.
P29_NOT_RECOGNIZED
)
;
}
else
scanIgnoreSectContents
(
)
;
}
else
{
abortMarkup
(
XMLMessages
.
MSG_MARKUP_NOT_RECOGNIZED_IN_DTD
,
XMLMessages
.
P29_NOT_RECOGNIZED
)
;
}
}
else
if
(
fEntityReader
.
skippedString
(
element_string
)
)
scanElementDecl
(
)
;
else
if
(
fEntityReader
.
skippedString
(
attlist_string
)
)
scanAttlistDecl
(
)
;
else
if
(
fEntityReader
.
skippedString
(
entity_string
)
)
scanEntityDecl
(
)
;
else
if
(
fEntityReader
.
skippedString
(
notation_string
)
)
scanNotationDecl
(
)
;
else
{
abortMarkup
(
XMLMessages
.
MSG_MARKUP_NOT_RECOGNIZED_IN_DTD
,
XMLMessages
.
P29_NOT_RECOGNIZED
)
;
}
}
else
if
(
fEntityReader
.
lookingAtChar
(
'?'
,
true
)
)
{
int
piTarget
=
fEntityReader
.
scanName
(
' '
)
;
if
(
piTarget
==
-
1
)
{
abortMarkup
(
XMLMessages
.
MSG_PITARGET_REQUIRED
,
XMLMessages
.
P16_REQUIRED
)
;
}
else
if
(
"xml"
.
equals
(
fStringPool
.
toString
(
piTarget
)
)
)
{
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
if
(
parseTextDecl
)
{
scanTextDecl
(
)
;
}
else
{
abortMarkup
(
XMLMessages
.
MSG_TEXTDECL_MUST_BE_FIRST
,
XMLMessages
.
P30_TEXTDECL_MUST_BE_FIRST
)
;
}
}
else
{
abortMarkup
(
XMLMessages
.
MSG_RESERVED_PITARGET
,
XMLMessages
.
P17_RESERVED_PITARGET
)
;
}
}
else
scanPI
(
piTarget
)
;
}
else
{
abortMarkup
(
XMLMessages
.
MSG_MARKUP_NOT_RECOGNIZED_IN_DTD
,
XMLMessages
.
P29_NOT_RECOGNIZED
)
;
}
}
else
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
fEntityReader
.
skipPastSpaces
(
)
;
}
else
if
(
fEntityReader
.
lookingAtChar
(
'%'
,
true
)
)
{
int
nameOffset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
skipPastName
(
';'
)
;
int
nameLength
=
fEntityReader
.
currentOffset
(
)
-
nameOffset
;
if
(
nameLength
==
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_NAME_REQUIRED_IN_PEREFERENCE
,
XMLMessages
.
P69_NAME_REQUIRED
)
;
}
else
if
(
!
fEntityReader
.
lookingAtChar
(
';'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE
,
XMLMessages
.
P69_SEMICOLON_REQUIRED
,
fEntityReader
.
addString
(
nameOffset
,
nameLength
)
)
;
}
else
{
int
peNameIndex
=
fEntityReader
.
addSymbol
(
nameOffset
,
nameLength
)
;
newParseTextDecl
=
fEntityHandler
.
startReadingFromEntity
(
peNameIndex
,
markupDepth
(
)
,
XMLEntityHandler
.
CONTEXT_IN_DTD_AS_MARKUP
)
;
}
}
else
if
(
fIncludeSectDepth
>
0
&&
fEntityReader
.
lookingAtChar
(
']'
,
true
)
)
{
if
(
!
fEntityReader
.
lookingAtChar
(
']'
,
true
)
||
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_INCLUDESECT_UNTERMINATED
,
XMLMessages
.
P62_UNTERMINATED
)
;
}
else
decreaseMarkupDepth
(
)
;
fIncludeSectDepth
--
;
}
else
{
if
(
!
fEntityReader
.
lookingAtValidChar
(
false
)
)
{
int
invChar
=
fEntityReader
.
scanInvalidChar
(
)
;
if
(
fScannerState
==
SCANNER_STATE_END_OF_INPUT
)
break
;
if
(
invChar
>=
0
)
{
if
(
!
extSubset
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_INTERNAL_SUBSET
,
XMLMessages
.
P28_INVALID_CHARACTER
,
Integer
.
toHexString
(
invChar
)
)
;
}
else
{
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_EXTERNAL_SUBSET
,
XMLMessages
.
P30_INVALID_CHARACTER
,
Integer
.
toHexString
(
invChar
)
)
;
}
}
}
else
{
reportFatalXMLError
(
XMLMessages
.
MSG_MARKUP_NOT_RECOGNIZED_IN_DTD
,
XMLMessages
.
P29_NOT_RECOGNIZED
)
;
fEntityReader
.
lookingAtValidChar
(
true
)
;
}
}
parseTextDecl
=
newParseTextDecl
;
}
if
(
extSubset
)
fEventHandler
.
stopReadingFromExternalSubset
(
)
;
}
private
void
scanIgnoreSectContents
(
)
throws
Exception
{
int
initialDepth
=
++
fIncludeSectDepth
;
while
(
true
)
{
if
(
fEntityReader
.
lookingAtChar
(
'<'
,
true
)
)
{
if
(
fEntityReader
.
lookingAtChar
(
'!'
,
true
)
&&
fEntityReader
.
lookingAtChar
(
'['
,
true
)
)
fIncludeSectDepth
++
;
}
else
if
(
fEntityReader
.
lookingAtChar
(
']'
,
true
)
)
{
if
(
fEntityReader
.
lookingAtChar
(
']'
,
true
)
)
{
while
(
fEntityReader
.
lookingAtChar
(
']'
,
true
)
)
{
}
if
(
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
if
(
fIncludeSectDepth
--
==
initialDepth
)
{
decreaseMarkupDepth
(
)
;
return
;
}
}
}
}
else
if
(
!
fEntityReader
.
lookingAtValidChar
(
true
)
)
{
int
invChar
=
fEntityReader
.
scanInvalidChar
(
)
;
if
(
fScannerState
==
SCANNER_STATE_END_OF_INPUT
)
return
;
if
(
invChar
>=
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_IGNORESECT
,
XMLMessages
.
P65_INVALID_CHARACTER
,
Integer
.
toHexString
(
invChar
)
)
;
}
}
}
}
private
void
scanTextDecl
(
)
throws
Exception
{
final
int
TEXTDECL_START
=
0
;
final
int
TEXTDECL_VERSION
=
1
;
final
int
TEXTDECL_ENCODING
=
2
;
final
int
TEXTDECL_FINISHED
=
3
;
int
prevState
=
setScannerState
(
SCANNER_STATE_TEXTDECL
)
;
int
state
=
TEXTDECL_START
;
do
{
fEntityReader
.
skipPastSpaces
(
)
;
int
offset
=
fEntityReader
.
currentOffset
(
)
;
if
(
state
==
TEXTDECL_START
&&
fEntityReader
.
skippedString
(
version_string
)
)
{
state
=
TEXTDECL_VERSION
;
}
else
if
(
fEntityReader
.
skippedString
(
encoding_string
)
)
{
state
=
TEXTDECL_ENCODING
;
}
else
{
abortMarkup
(
XMLMessages
.
MSG_ENCODINGDECL_REQUIRED
,
XMLMessages
.
P77_ENCODINGDECL_REQUIRED
)
;
restoreScannerState
(
prevState
)
;
return
;
}
int
length
=
fEntityReader
.
currentOffset
(
)
-
offset
;
fEntityReader
.
skipPastSpaces
(
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'='
,
true
)
)
{
int
minorCode
=
state
==
TEXTDECL_VERSION
?
XMLMessages
.
P24_EQ_REQUIRED
:
XMLMessages
.
P80_EQ_REQUIRED
;
abortMarkup
(
XMLMessages
.
MSG_EQ_REQUIRED_IN_TEXTDECL
,
minorCode
,
fEntityReader
.
addString
(
offset
,
length
)
)
;
restoreScannerState
(
prevState
)
;
return
;
}
fEntityReader
.
skipPastSpaces
(
)
;
int
index
=
fEntityReader
.
scanStringLiteral
(
)
;
switch
(
index
)
{
case
XMLEntityHandler
.
STRINGLIT_RESULT_QUOTE_REQUIRED
:
{
int
minorCode
=
state
==
TEXTDECL_VERSION
?
XMLMessages
.
P24_QUOTE_REQUIRED
:
XMLMessages
.
P80_QUOTE_REQUIRED
;
abortMarkup
(
XMLMessages
.
MSG_QUOTE_REQUIRED_IN_TEXTDECL
,
minorCode
,
fEntityReader
.
addString
(
offset
,
length
)
)
;
restoreScannerState
(
prevState
)
;
return
;
}
case
XMLEntityHandler
.
STRINGLIT_RESULT_INVALID_CHAR
:
int
invChar
=
fEntityReader
.
scanInvalidChar
(
)
;
if
(
fScannerState
!=
SCANNER_STATE_END_OF_INPUT
)
{
if
(
invChar
>=
0
)
{
int
minorCode
=
state
==
TEXTDECL_VERSION
?
XMLMessages
.
P26_INVALID_CHARACTER
:
XMLMessages
.
P81_INVALID_CHARACTER
;
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_TEXTDECL
,
minorCode
,
Integer
.
toHexString
(
invChar
)
)
;
}
skipPastEndOfCurrentMarkup
(
)
;
restoreScannerState
(
prevState
)
;
}
return
;
default
:
break
;
}
switch
(
state
)
{
case
TEXTDECL_VERSION
:
String
version
=
fStringPool
.
toString
(
index
)
;
if
(
!
"1.0"
.
equals
(
version
)
)
{
if
(
!
fEventHandler
.
validVersionNum
(
version
)
)
{
abortMarkup
(
XMLMessages
.
MSG_VERSIONINFO_INVALID
,
XMLMessages
.
P26_INVALID_VALUE
,
version
)
;
restoreScannerState
(
prevState
)
;
return
;
}
Object
[
]
args
=
{
version
}
;
fErrorReporter
.
reportError
(
fErrorReporter
.
getLocator
(
)
,
XMLMessages
.
XML_DOMAIN
,
XMLMessages
.
MSG_VERSION_NOT_SUPPORTED
,
XMLMessages
.
P26_NOT_SUPPORTED
,
args
,
XMLErrorReporter
.
ERRORTYPE_RECOVERABLE_ERROR
)
;
}
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_IN_TEXTDECL
,
XMLMessages
.
P80_WHITESPACE_REQUIRED
)
;
restoreScannerState
(
prevState
)
;
return
;
}
break
;
case
TEXTDECL_ENCODING
:
String
encoding
=
fStringPool
.
toString
(
index
)
;
if
(
!
fEventHandler
.
validEncName
(
encoding
)
)
{
abortMarkup
(
XMLMessages
.
MSG_ENCODINGDECL_INVALID
,
XMLMessages
.
P81_INVALID_VALUE
,
encoding
)
;
restoreScannerState
(
prevState
)
;
return
;
}
fEntityReader
.
skipPastSpaces
(
)
;
state
=
TEXTDECL_FINISHED
;
break
;
}
}
while
(
state
!=
TEXTDECL_FINISHED
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'?'
,
true
)
||
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_TEXTDECL_UNTERMINATED
,
XMLMessages
.
P77_UNTERMINATED
)
;
restoreScannerState
(
prevState
)
;
return
;
}
decreaseMarkupDepth
(
)
;
restoreScannerState
(
prevState
)
;
}
private
void
scanElementDecl
(
)
throws
Exception
{
if
(
!
checkForPEReference
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ELEMENTDECL
,
XMLMessages
.
P45_SPACE_REQUIRED
)
;
return
;
}
int
elementType
=
fEventHandler
.
checkForElementTypeWithPEReference
(
fEntityReader
,
' '
)
;
if
(
elementType
==
-
1
)
{
abortMarkup
(
XMLMessages
.
MSG_ELEMENT_TYPE_REQUIRED_IN_ELEMENTDECL
,
XMLMessages
.
P45_ELEMENT_TYPE_REQUIRED
)
;
return
;
}
if
(
!
checkForPEReference
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_CONTENTSPEC_IN_ELEMENTDECL
,
XMLMessages
.
P45_SPACE_REQUIRED
,
elementType
)
;
return
;
}
int
contentSpecType
=
-
1
;
int
contentSpec
=
-
1
;
if
(
fEntityReader
.
skippedString
(
empty_string
)
)
{
contentSpecType
=
fEMPTY
;
}
else
if
(
fEntityReader
.
skippedString
(
any_string
)
)
{
contentSpecType
=
fANY
;
}
else
if
(
!
fEntityReader
.
lookingAtChar
(
'('
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_CONTENTSPEC_REQUIRED_IN_ELEMENTDECL
,
XMLMessages
.
P45_CONTENTSPEC_REQUIRED
,
elementType
)
;
return
;
}
else
{
int
contentSpecReader
=
fReaderId
;
int
contentSpecReaderDepth
=
fEntityHandler
.
getReaderDepth
(
)
;
int
prevState
=
setScannerState
(
SCANNER_STATE_CONTENTSPEC
)
;
int
oldDepth
=
parenDepth
(
)
;
fEntityHandler
.
setReaderDepth
(
oldDepth
)
;
increaseParenDepth
(
)
;
checkForPEReference
(
false
)
;
boolean
skippedPCDATA
=
fEntityReader
.
skippedString
(
pcdata_string
)
;
if
(
skippedPCDATA
)
{
contentSpecType
=
fMIXED
;
contentSpec
=
scanMixed
(
elementType
)
;
}
else
{
contentSpecType
=
fCHILDREN
;
contentSpec
=
scanChildren
(
elementType
)
;
}
boolean
success
=
contentSpec
!=
-
1
;
restoreScannerState
(
prevState
)
;
fEntityHandler
.
setReaderDepth
(
contentSpecReaderDepth
)
;
if
(
!
success
)
{
setParenDepth
(
oldDepth
)
;
skipPastEndOfCurrentMarkup
(
)
;
return
;
}
else
{
if
(
parenDepth
(
)
!=
oldDepth
)
;
}
}
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_ELEMENTDECL_UNTERMINATED
,
XMLMessages
.
P45_UNTERMINATED
,
elementType
)
;
return
;
}
decreaseMarkupDepth
(
)
;
int
elementIndex
=
fEventHandler
.
addElementDecl
(
elementType
,
contentSpecType
,
contentSpec
)
;
}
private
int
scanMixed
(
int
elementType
)
throws
Exception
{
int
valueIndex
=
-
1
;
int
prevNodeIndex
=
-
1
;
boolean
starRequired
=
false
;
while
(
true
)
{
int
nodeIndex
=
fEventHandler
.
addUniqueLeafNode
(
valueIndex
)
;
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'|'
,
true
)
)
{
if
(
!
fEntityReader
.
lookingAtChar
(
')'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_CLOSE_PAREN_REQUIRED_IN_MIXED
,
XMLMessages
.
P51_CLOSE_PAREN_REQUIRED
,
elementType
)
;
return
-
1
;
}
decreaseParenDepth
(
)
;
if
(
nodeIndex
==
-
1
)
{
nodeIndex
=
prevNodeIndex
;
}
else
if
(
prevNodeIndex
!=
-
1
)
{
nodeIndex
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_CHOICE
,
prevNodeIndex
,
nodeIndex
)
;
}
if
(
fEntityReader
.
lookingAtChar
(
'*'
,
true
)
)
{
nodeIndex
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_ZERO_OR_MORE
,
nodeIndex
)
;
}
else
if
(
starRequired
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_MIXED_CONTENT_UNTERMINATED
,
XMLMessages
.
P51_UNTERMINATED
,
fStringPool
.
toString
(
elementType
)
,
fEventHandler
.
getContentSpecNodeAsString
(
nodeIndex
)
)
;
return
-
1
;
}
return
nodeIndex
;
}
if
(
nodeIndex
!=
-
1
)
{
if
(
prevNodeIndex
!=
-
1
)
{
nodeIndex
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_CHOICE
,
prevNodeIndex
,
nodeIndex
)
;
}
prevNodeIndex
=
nodeIndex
;
}
starRequired
=
true
;
checkForPEReference
(
false
)
;
valueIndex
=
fEventHandler
.
checkForElementTypeWithPEReference
(
fEntityReader
,
')'
)
;
if
(
valueIndex
==
-
1
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_ELEMENT_TYPE_REQUIRED_IN_MIXED_CONTENT
,
XMLMessages
.
P51_ELEMENT_TYPE_REQUIRED
,
elementType
)
;
return
-
1
;
}
}
}
private
int
scanChildren
(
int
elementType
)
throws
Exception
{
int
depth
=
1
;
initializeContentModelStack
(
depth
)
;
while
(
true
)
{
if
(
fEntityReader
.
lookingAtChar
(
'('
,
true
)
)
{
increaseParenDepth
(
)
;
checkForPEReference
(
false
)
;
depth
++
;
initializeContentModelStack
(
depth
)
;
continue
;
}
int
valueIndex
=
fEventHandler
.
checkForElementTypeWithPEReference
(
fEntityReader
,
')'
)
;
if
(
valueIndex
==
-
1
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_OPEN_PAREN_OR_ELEMENT_TYPE_REQUIRED_IN_CHILDREN
,
XMLMessages
.
P47_OPEN_PAREN_OR_ELEMENT_TYPE_REQUIRED
,
elementType
)
;
return
-
1
;
}
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_LEAF
,
valueIndex
)
;
if
(
fEntityReader
.
lookingAtChar
(
'?'
,
true
)
)
{
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_ZERO_OR_ONE
,
nodeIndexStack
[
depth
]
)
;
}
else
if
(
fEntityReader
.
lookingAtChar
(
'*'
,
true
)
)
{
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_ZERO_OR_MORE
,
nodeIndexStack
[
depth
]
)
;
}
else
if
(
fEntityReader
.
lookingAtChar
(
'+'
,
true
)
)
{
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_ONE_OR_MORE
,
nodeIndexStack
[
depth
]
)
;
}
while
(
true
)
{
checkForPEReference
(
false
)
;
if
(
opStack
[
depth
]
!=
XMLContentSpecNode
.
CONTENTSPECNODE_SEQ
&&
fEntityReader
.
lookingAtChar
(
'|'
,
true
)
)
{
if
(
prevNodeIndexStack
[
depth
]
!=
-
1
)
{
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
opStack
[
depth
]
,
prevNodeIndexStack
[
depth
]
,
nodeIndexStack
[
depth
]
)
;
}
prevNodeIndexStack
[
depth
]
=
nodeIndexStack
[
depth
]
;
opStack
[
depth
]
=
XMLContentSpecNode
.
CONTENTSPECNODE_CHOICE
;
break
;
}
else
if
(
opStack
[
depth
]
!=
XMLContentSpecNode
.
CONTENTSPECNODE_CHOICE
&&
fEntityReader
.
lookingAtChar
(
','
,
true
)
)
{
if
(
prevNodeIndexStack
[
depth
]
!=
-
1
)
{
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
opStack
[
depth
]
,
prevNodeIndexStack
[
depth
]
,
nodeIndexStack
[
depth
]
)
;
}
prevNodeIndexStack
[
depth
]
=
nodeIndexStack
[
depth
]
;
opStack
[
depth
]
=
XMLContentSpecNode
.
CONTENTSPECNODE_SEQ
;
break
;
}
else
{
if
(
!
fEntityReader
.
lookingAtChar
(
')'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_CLOSE_PAREN_REQUIRED_IN_CHILDREN
,
XMLMessages
.
P47_CLOSE_PAREN_REQUIRED
,
elementType
)
;
}
decreaseParenDepth
(
)
;
if
(
prevNodeIndexStack
[
depth
]
!=
-
1
)
{
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
opStack
[
depth
]
,
prevNodeIndexStack
[
depth
]
,
nodeIndexStack
[
depth
]
)
;
}
int
nodeIndex
=
nodeIndexStack
[
depth
--
]
;
nodeIndexStack
[
depth
]
=
nodeIndex
;
if
(
fEntityReader
.
lookingAtChar
(
'?'
,
true
)
)
{
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_ZERO_OR_ONE
,
nodeIndexStack
[
depth
]
)
;
}
else
if
(
fEntityReader
.
lookingAtChar
(
'*'
,
true
)
)
{
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_ZERO_OR_MORE
,
nodeIndexStack
[
depth
]
)
;
}
else
if
(
fEntityReader
.
lookingAtChar
(
'+'
,
true
)
)
{
nodeIndexStack
[
depth
]
=
fEventHandler
.
addContentSpecNode
(
XMLContentSpecNode
.
CONTENTSPECNODE_ONE_OR_MORE
,
nodeIndexStack
[
depth
]
)
;
}
if
(
depth
==
0
)
{
return
nodeIndexStack
[
0
]
;
}
}
}
checkForPEReference
(
false
)
;
}
}
private
void
scanAttlistDecl
(
)
throws
Exception
{
if
(
!
checkForPEReference
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ATTLISTDECL
,
XMLMessages
.
P52_SPACE_REQUIRED
)
;
return
;
}
int
elementTypeIndex
=
fEventHandler
.
checkForElementTypeWithPEReference
(
fEntityReader
,
' '
)
;
if
(
elementTypeIndex
==
-
1
)
{
abortMarkup
(
XMLMessages
.
MSG_ELEMENT_TYPE_REQUIRED_IN_ATTLISTDECL
,
XMLMessages
.
P52_ELEMENT_TYPE_REQUIRED
)
;
return
;
}
int
elementIndex
=
fEventHandler
.
addElementDecl
(
elementTypeIndex
)
;
while
(
true
)
{
boolean
sawSpace
=
checkForPEReference
(
true
)
;
if
(
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
decreaseMarkupDepth
(
)
;
return
;
}
if
(
!
sawSpace
)
{
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
fEntityReader
.
skipPastSpaces
(
)
;
}
else
reportFatalXMLError
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_ATTRIBUTE_NAME_IN_ATTDEF
,
XMLMessages
.
P53_SPACE_REQUIRED
)
;
}
else
{
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
fEntityReader
.
skipPastSpaces
(
)
;
}
}
int
attDefName
=
fEventHandler
.
checkForAttributeNameWithPEReference
(
fEntityReader
,
' '
)
;
if
(
attDefName
==
-
1
)
{
abortMarkup
(
XMLMessages
.
MSG_ATTRIBUTE_NAME_REQUIRED_IN_ATTDEF
,
XMLMessages
.
P53_NAME_REQUIRED
,
elementTypeIndex
)
;
return
;
}
if
(
!
checkForPEReference
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_ATTTYPE_IN_ATTDEF
,
XMLMessages
.
P53_SPACE_REQUIRED
)
;
return
;
}
int
attDefType
=
-
1
;
int
attDefEnumeration
=
-
1
;
if
(
fEntityReader
.
skippedString
(
cdata_string
)
)
{
attDefType
=
fCDATA
;
}
else
if
(
fEntityReader
.
skippedString
(
id_string
)
)
{
if
(
!
fEntityReader
.
skippedString
(
ref_string
)
)
{
attDefType
=
fID
;
}
else
if
(
!
fEntityReader
.
lookingAtChar
(
'S'
,
true
)
)
{
attDefType
=
fIDREF
;
}
else
{
attDefType
=
fIDREFS
;
}
}
else
if
(
fEntityReader
.
skippedString
(
entit_string
)
)
{
if
(
fEntityReader
.
lookingAtChar
(
'Y'
,
true
)
)
{
attDefType
=
fENTITY
;
}
else
if
(
fEntityReader
.
skippedString
(
ies_string
)
)
{
attDefType
=
fENTITIES
;
}
else
{
abortMarkup
(
XMLMessages
.
MSG_ATTTYPE_REQUIRED_IN_ATTDEF
,
XMLMessages
.
P53_ATTTYPE_REQUIRED
,
elementTypeIndex
,
attDefName
)
;
return
;
}
}
else
if
(
fEntityReader
.
skippedString
(
nmtoken_string
)
)
{
if
(
fEntityReader
.
lookingAtChar
(
'S'
,
true
)
)
{
attDefType
=
fNMTOKENS
;
}
else
{
attDefType
=
fNMTOKEN
;
}
}
else
if
(
fEntityReader
.
skippedString
(
notation_string
)
)
{
if
(
!
checkForPEReference
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_AFTER_NOTATION_IN_NOTATIONTYPE
,
XMLMessages
.
P58_SPACE_REQUIRED
,
elementTypeIndex
,
attDefName
)
;
return
;
}
if
(
!
fEntityReader
.
lookingAtChar
(
'('
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_OPEN_PAREN_REQUIRED_IN_NOTATIONTYPE
,
XMLMessages
.
P58_OPEN_PAREN_REQUIRED
,
elementTypeIndex
,
attDefName
)
;
return
;
}
increaseParenDepth
(
)
;
attDefType
=
fNOTATION
;
attDefEnumeration
=
scanEnumeration
(
elementTypeIndex
,
attDefName
,
true
)
;
if
(
attDefEnumeration
==
-
1
)
{
skipPastEndOfCurrentMarkup
(
)
;
return
;
}
}
else
if
(
fEntityReader
.
lookingAtChar
(
'('
,
true
)
)
{
increaseParenDepth
(
)
;
attDefType
=
fENUMERATION
;
attDefEnumeration
=
scanEnumeration
(
elementTypeIndex
,
attDefName
,
false
)
;
if
(
attDefEnumeration
==
-
1
)
{
skipPastEndOfCurrentMarkup
(
)
;
return
;
}
}
else
{
abortMarkup
(
XMLMessages
.
MSG_ATTTYPE_REQUIRED_IN_ATTDEF
,
XMLMessages
.
P53_ATTTYPE_REQUIRED
,
elementTypeIndex
,
attDefName
)
;
return
;
}
if
(
!
checkForPEReference
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_DEFAULTDECL_IN_ATTDEF
,
XMLMessages
.
P53_SPACE_REQUIRED
,
elementTypeIndex
,
attDefName
)
;
return
;
}
int
attDefDefaultType
=
-
1
;
int
attDefDefaultValue
=
-
1
;
if
(
fEntityReader
.
skippedString
(
required_string
)
)
{
attDefDefaultType
=
fREQUIRED
;
}
else
if
(
fEntityReader
.
skippedString
(
implied_string
)
)
{
attDefDefaultType
=
fIMPLIED
;
}
else
{
if
(
fEntityReader
.
skippedString
(
fixed_string
)
)
{
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_AFTER_FIXED_IN_DEFAULTDECL
,
XMLMessages
.
P60_SPACE_REQUIRED
,
elementTypeIndex
,
attDefName
)
;
return
;
}
fEntityReader
.
skipPastSpaces
(
)
;
attDefDefaultType
=
fFIXED
;
}
else
attDefDefaultType
=
fDEFAULT
;
attDefDefaultValue
=
fEventHandler
.
scanDefaultAttValue
(
elementTypeIndex
,
attDefName
,
attDefType
,
attDefEnumeration
)
;
if
(
attDefDefaultValue
==
-
1
)
{
skipPastEndOfCurrentMarkup
(
)
;
return
;
}
}
if
(
attDefName
==
fXMLSpace
)
{
boolean
ok
=
false
;
if
(
attDefType
==
fENUMERATION
)
{
int
index
=
attDefEnumeration
;
if
(
index
!=
-
1
)
{
ok
=
fStringPool
.
stringListLength
(
index
)
==
2
&&
fStringPool
.
stringInList
(
index
,
fDefault
)
&&
fStringPool
.
stringInList
(
index
,
fPreserve
)
;
}
}
if
(
!
ok
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_XML_SPACE_DECLARATION_ILLEGAL
,
XMLMessages
.
S2_10_DECLARATION_ILLEGAL
,
elementTypeIndex
)
;
}
}
int
attDefIndex
=
fEventHandler
.
addAttDef
(
elementIndex
,
attDefName
,
attDefType
,
attDefEnumeration
,
attDefDefaultType
,
attDefDefaultValue
)
;
}
}
private
int
scanEnumeration
(
int
elementType
,
int
attrName
,
boolean
isNotationType
)
throws
Exception
{
int
enumIndex
=
fEventHandler
.
startEnumeration
(
)
;
while
(
true
)
{
checkForPEReference
(
false
)
;
int
nameIndex
=
isNotationType
?
fEventHandler
.
checkForNameWithPEReference
(
fEntityReader
,
')'
)
:
fEventHandler
.
checkForNmtokenWithPEReference
(
fEntityReader
,
')'
)
;
if
(
nameIndex
==
-
1
)
{
if
(
isNotationType
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_NAME_REQUIRED_IN_NOTATIONTYPE
,
XMLMessages
.
P58_NAME_REQUIRED
,
elementType
,
attrName
)
;
}
else
{
reportFatalXMLError
(
XMLMessages
.
MSG_NMTOKEN_REQUIRED_IN_ENUMERATION
,
XMLMessages
.
P59_NMTOKEN_REQUIRED
,
elementType
,
attrName
)
;
}
fEventHandler
.
endEnumeration
(
enumIndex
)
;
return
-
1
;
}
fEventHandler
.
addNameToEnumeration
(
enumIndex
,
elementType
,
attrName
,
nameIndex
,
isNotationType
)
;
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'|'
,
true
)
)
{
fEventHandler
.
endEnumeration
(
enumIndex
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
')'
,
true
)
)
{
if
(
isNotationType
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_NOTATIONTYPE_UNTERMINATED
,
XMLMessages
.
P58_UNTERMINATED
,
elementType
,
attrName
)
;
}
else
{
reportFatalXMLError
(
XMLMessages
.
MSG_ENUMERATION_UNTERMINATED
,
XMLMessages
.
P59_UNTERMINATED
,
elementType
,
attrName
)
;
}
return
-
1
;
}
decreaseParenDepth
(
)
;
return
enumIndex
;
}
}
}
public
int
scanDefaultAttValue
(
int
elementType
,
int
attrName
)
throws
Exception
{
boolean
single
;
if
(
!
(
single
=
fEntityReader
.
lookingAtChar
(
'\''
,
true
)
)
&&
!
fEntityReader
.
lookingAtChar
(
'\"'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_QUOTE_REQUIRED_IN_ATTVALUE
,
XMLMessages
.
P10_QUOTE_REQUIRED
,
elementType
,
attrName
)
;
return
-
1
;
}
int
previousState
=
setScannerState
(
SCANNER_STATE_DEFAULT_ATTRIBUTE_VALUE
)
;
char
qchar
=
single
?
'\''
:
'\"'
;
fDefaultAttValueReader
=
fReaderId
;
fDefaultAttValueElementType
=
elementType
;
fDefaultAttValueAttrName
=
attrName
;
boolean
setMark
=
true
;
int
dataOffset
=
fLiteralData
.
length
(
)
;
while
(
true
)
{
fDefaultAttValueOffset
=
fEntityReader
.
currentOffset
(
)
;
if
(
setMark
)
{
fDefaultAttValueMark
=
fDefaultAttValueOffset
;
setMark
=
false
;
}
if
(
fEntityReader
.
lookingAtChar
(
qchar
,
true
)
)
{
if
(
fReaderId
==
fDefaultAttValueReader
)
break
;
continue
;
}
if
(
fEntityReader
.
lookingAtChar
(
' '
,
true
)
)
{
continue
;
}
boolean
skippedCR
;
if
(
(
skippedCR
=
fEntityReader
.
lookingAtChar
(
(
char
)
0x0D
,
true
)
)
||
fEntityReader
.
lookingAtSpace
(
true
)
)
{
if
(
fDefaultAttValueOffset
-
fDefaultAttValueMark
>
0
)
fEntityReader
.
append
(
fLiteralData
,
fDefaultAttValueMark
,
fDefaultAttValueOffset
-
fDefaultAttValueMark
)
;
setMark
=
true
;
fLiteralData
.
append
(
' '
)
;
if
(
skippedCR
)
fEntityReader
.
lookingAtChar
(
(
char
)
0x0A
,
true
)
;
continue
;
}
if
(
fEntityReader
.
lookingAtChar
(
'&'
,
true
)
)
{
if
(
fDefaultAttValueOffset
-
fDefaultAttValueMark
>
0
)
fEntityReader
.
append
(
fLiteralData
,
fDefaultAttValueMark
,
fDefaultAttValueOffset
-
fDefaultAttValueMark
)
;
setMark
=
true
;
if
(
fEntityReader
.
lookingAtChar
(
'#'
,
true
)
)
{
int
ch
=
scanCharRef
(
)
;
if
(
ch
!=
-
1
)
{
if
(
ch
<
0x10000
)
fLiteralData
.
append
(
(
char
)
ch
)
;
else
{
fLiteralData
.
append
(
(
char
)
(
(
(
ch
-
0x00010000
)
>
>
10
)
+
0xd800
)
)
;
fLiteralData
.
append
(
(
char
)
(
(
(
ch
-
0x00010000
)
&
0x3ff
)
+
0xdc00
)
)
;
}
}
}
else
{
int
nameOffset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
skipPastName
(
';'
)
;
int
nameLength
=
fEntityReader
.
currentOffset
(
)
-
nameOffset
;
if
(
nameLength
==
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_NAME_REQUIRED_IN_REFERENCE
,
XMLMessages
.
P68_NAME_REQUIRED
)
;
}
else
if
(
!
fEntityReader
.
lookingAtChar
(
';'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SEMICOLON_REQUIRED_IN_REFERENCE
,
XMLMessages
.
P68_SEMICOLON_REQUIRED
,
fEntityReader
.
addString
(
nameOffset
,
nameLength
)
)
;
}
else
{
int
entityNameIndex
=
fEntityReader
.
addSymbol
(
nameOffset
,
nameLength
)
;
fEntityHandler
.
startReadingFromEntity
(
entityNameIndex
,
markupDepth
(
)
,
XMLEntityHandler
.
CONTEXT_IN_DEFAULTATTVALUE
)
;
}
}
continue
;
}
if
(
fEntityReader
.
lookingAtChar
(
'<'
,
true
)
)
{
if
(
fDefaultAttValueOffset
-
fDefaultAttValueMark
>
0
)
fEntityReader
.
append
(
fLiteralData
,
fDefaultAttValueMark
,
fDefaultAttValueOffset
-
fDefaultAttValueMark
)
;
setMark
=
true
;
reportFatalXMLError
(
XMLMessages
.
MSG_LESSTHAN_IN_ATTVALUE
,
XMLMessages
.
WFC_NO_LESSTHAN_IN_ATTVALUE
,
elementType
,
attrName
)
;
continue
;
}
if
(
!
getReadingExternalEntity
(
)
&&
fEntityReader
.
lookingAtChar
(
'%'
,
true
)
)
{
int
nameOffset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
skipPastName
(
';'
)
;
int
nameLength
=
fEntityReader
.
currentOffset
(
)
-
nameOffset
;
if
(
nameLength
!=
0
&&
fEntityReader
.
lookingAtChar
(
';'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_PEREFERENCE_WITHIN_MARKUP
,
XMLMessages
.
WFC_PES_IN_INTERNAL_SUBSET
,
fEntityReader
.
addString
(
nameOffset
,
nameLength
)
)
;
}
}
if
(
!
fEntityReader
.
lookingAtValidChar
(
true
)
)
{
if
(
fDefaultAttValueOffset
-
fDefaultAttValueMark
>
0
)
fEntityReader
.
append
(
fLiteralData
,
fDefaultAttValueMark
,
fDefaultAttValueOffset
-
fDefaultAttValueMark
)
;
setMark
=
true
;
int
invChar
=
fEntityReader
.
scanInvalidChar
(
)
;
if
(
fScannerState
==
SCANNER_STATE_END_OF_INPUT
)
return
-
1
;
if
(
invChar
>=
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_ATTVALUE
,
XMLMessages
.
P10_INVALID_CHARACTER
,
fStringPool
.
toString
(
elementType
)
,
fStringPool
.
toString
(
attrName
)
,
Integer
.
toHexString
(
invChar
)
)
;
}
continue
;
}
}
restoreScannerState
(
previousState
)
;
int
dataLength
=
fLiteralData
.
length
(
)
-
dataOffset
;
if
(
dataLength
==
0
)
{
return
fEntityReader
.
addString
(
fDefaultAttValueMark
,
fDefaultAttValueOffset
-
fDefaultAttValueMark
)
;
}
if
(
fDefaultAttValueOffset
-
fDefaultAttValueMark
>
0
)
{
fEntityReader
.
append
(
fLiteralData
,
fDefaultAttValueMark
,
fDefaultAttValueOffset
-
fDefaultAttValueMark
)
;
dataLength
=
fLiteralData
.
length
(
)
-
dataOffset
;
}
return
fLiteralData
.
addString
(
dataOffset
,
dataLength
)
;
}
private
void
scanNotationDecl
(
)
throws
Exception
{
if
(
!
checkForPEReference
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_NOTATIONDECL
,
XMLMessages
.
P82_SPACE_REQUIRED
)
;
return
;
}
int
notationName
=
fEventHandler
.
checkForNameWithPEReference
(
fEntityReader
,
' '
)
;
if
(
notationName
==
-
1
)
{
abortMarkup
(
XMLMessages
.
MSG_NOTATION_NAME_REQUIRED_IN_NOTATIONDECL
,
XMLMessages
.
P82_NAME_REQUIRED
)
;
return
;
}
if
(
!
checkForPEReference
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_AFTER_NOTATION_NAME_IN_NOTATIONDECL
,
XMLMessages
.
P82_SPACE_REQUIRED
,
notationName
)
;
return
;
}
if
(
!
scanExternalID
(
true
)
)
{
skipPastEndOfCurrentMarkup
(
)
;
return
;
}
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_NOTATIONDECL_UNTERMINATED
,
XMLMessages
.
P82_UNTERMINATED
,
notationName
)
;
return
;
}
decreaseMarkupDepth
(
)
;
int
notationIndex
=
fEventHandler
.
addNotationDecl
(
notationName
,
fPubidLiteral
,
fSystemLiteral
)
;
}
private
void
scanEntityDecl
(
)
throws
Exception
{
boolean
isPEDecl
=
false
;
boolean
sawPERef
=
false
;
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
fEntityReader
.
skipPastSpaces
(
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'%'
,
true
)
)
{
isPEDecl
=
false
;
}
else
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
checkForPEReference
(
false
)
;
isPEDecl
=
true
;
}
else
if
(
!
getReadingExternalEntity
(
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_PEDECL
,
XMLMessages
.
P72_SPACE
)
;
isPEDecl
=
true
;
}
else
if
(
fEntityReader
.
lookingAtChar
(
'%'
,
false
)
)
{
checkForPEReference
(
false
)
;
isPEDecl
=
true
;
}
else
{
sawPERef
=
true
;
}
}
else
if
(
!
getReadingExternalEntity
(
)
||
!
fEntityReader
.
lookingAtChar
(
'%'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_ENTITYDECL
,
XMLMessages
.
P70_SPACE
)
;
isPEDecl
=
false
;
}
else
if
(
fEntityReader
.
lookingAtSpace
(
false
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_PERCENT_IN_PEDECL
,
XMLMessages
.
P72_SPACE
)
;
isPEDecl
=
false
;
}
else
{
sawPERef
=
true
;
}
if
(
sawPERef
)
{
while
(
true
)
{
int
nameOffset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
skipPastName
(
';'
)
;
int
nameLength
=
fEntityReader
.
currentOffset
(
)
-
nameOffset
;
if
(
nameLength
==
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_NAME_REQUIRED_IN_PEREFERENCE
,
XMLMessages
.
P69_NAME_REQUIRED
)
;
}
else
if
(
!
fEntityReader
.
lookingAtChar
(
';'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE
,
XMLMessages
.
P69_SEMICOLON_REQUIRED
,
fEntityReader
.
addString
(
nameOffset
,
nameLength
)
)
;
}
else
{
int
peNameIndex
=
fEntityReader
.
addSymbol
(
nameOffset
,
nameLength
)
;
int
readerDepth
=
(
fScannerState
==
SCANNER_STATE_CONTENTSPEC
)
?
parenDepth
(
)
:
markupDepth
(
)
;
fEntityHandler
.
startReadingFromEntity
(
peNameIndex
,
readerDepth
,
XMLEntityHandler
.
CONTEXT_IN_DTD_WITHIN_MARKUP
)
;
}
fEntityReader
.
skipPastSpaces
(
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'%'
,
true
)
)
break
;
if
(
!
isPEDecl
)
{
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
checkForPEReference
(
false
)
;
isPEDecl
=
true
;
break
;
}
isPEDecl
=
fEntityReader
.
lookingAtChar
(
'%'
,
true
)
;
}
}
}
int
entityName
=
fEventHandler
.
checkForNameWithPEReference
(
fEntityReader
,
' '
)
;
if
(
entityName
==
-
1
)
{
abortMarkup
(
XMLMessages
.
MSG_ENTITY_NAME_REQUIRED_IN_ENTITYDECL
,
XMLMessages
.
P70_REQUIRED_NAME
)
;
return
;
}
if
(
!
fEntityHandler
.
startEntityDecl
(
isPEDecl
,
entityName
)
)
{
skipPastEndOfCurrentMarkup
(
)
;
return
;
}
if
(
!
checkForPEReference
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_AFTER_ENTITY_NAME_IN_ENTITYDECL
,
XMLMessages
.
P70_REQUIRED_SPACE
,
entityName
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
if
(
isPEDecl
)
{
boolean
single
;
if
(
(
single
=
fEntityReader
.
lookingAtChar
(
'\''
,
true
)
)
||
fEntityReader
.
lookingAtChar
(
'\"'
,
true
)
)
{
int
location
=
fEventHandler
.
saveCurrentLocation
(
)
;
int
value
=
scanEntityValue
(
single
)
;
if
(
value
==
-
1
)
{
skipPastEndOfCurrentMarkup
(
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_ENTITYDECL_UNTERMINATED
,
XMLMessages
.
P72_UNTERMINATED
,
entityName
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
decreaseMarkupDepth
(
)
;
fEntityHandler
.
endEntityDecl
(
)
;
int
entityIndex
=
fEventHandler
.
addInternalPEDecl
(
entityName
,
value
,
location
)
;
}
else
{
if
(
!
scanExternalID
(
false
)
)
{
skipPastEndOfCurrentMarkup
(
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_ENTITYDECL_UNTERMINATED
,
XMLMessages
.
P72_UNTERMINATED
,
entityName
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
decreaseMarkupDepth
(
)
;
fEntityHandler
.
endEntityDecl
(
)
;
int
entityIndex
=
fEventHandler
.
addExternalPEDecl
(
entityName
,
fPubidLiteral
,
fSystemLiteral
)
;
}
}
else
{
boolean
single
;
if
(
(
single
=
fEntityReader
.
lookingAtChar
(
'\''
,
true
)
)
||
fEntityReader
.
lookingAtChar
(
'\"'
,
true
)
)
{
int
location
=
fEventHandler
.
saveCurrentLocation
(
)
;
int
value
=
scanEntityValue
(
single
)
;
if
(
value
==
-
1
)
{
skipPastEndOfCurrentMarkup
(
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_ENTITYDECL_UNTERMINATED
,
XMLMessages
.
P71_UNTERMINATED
,
entityName
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
decreaseMarkupDepth
(
)
;
fEntityHandler
.
endEntityDecl
(
)
;
int
entityIndex
=
fEventHandler
.
addInternalEntityDecl
(
entityName
,
value
,
location
)
;
}
else
{
if
(
!
scanExternalID
(
false
)
)
{
skipPastEndOfCurrentMarkup
(
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
boolean
unparsed
=
false
;
if
(
fEntityReader
.
lookingAtSpace
(
true
)
)
{
fEntityReader
.
skipPastSpaces
(
)
;
unparsed
=
fEntityReader
.
skippedString
(
ndata_string
)
;
}
if
(
!
unparsed
)
{
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_ENTITYDECL_UNTERMINATED
,
XMLMessages
.
P72_UNTERMINATED
,
entityName
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
decreaseMarkupDepth
(
)
;
fEntityHandler
.
endEntityDecl
(
)
;
int
entityIndex
=
fEventHandler
.
addExternalEntityDecl
(
entityName
,
fPubidLiteral
,
fSystemLiteral
)
;
}
else
{
if
(
!
fEntityReader
.
lookingAtSpace
(
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_UNPARSED_ENTITYDECL
,
XMLMessages
.
P76_SPACE_REQUIRED
,
entityName
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
fEntityReader
.
skipPastSpaces
(
)
;
int
ndataOffset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
skipPastName
(
'>'
)
;
int
ndataLength
=
fEntityReader
.
currentOffset
(
)
-
ndataOffset
;
if
(
ndataLength
==
0
)
{
abortMarkup
(
XMLMessages
.
MSG_NOTATION_NAME_REQUIRED_FOR_UNPARSED_ENTITYDECL
,
XMLMessages
.
P76_REQUIRED
,
entityName
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
int
notationName
=
fEntityReader
.
addSymbol
(
ndataOffset
,
ndataLength
)
;
checkForPEReference
(
false
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'>'
,
true
)
)
{
abortMarkup
(
XMLMessages
.
MSG_ENTITYDECL_UNTERMINATED
,
XMLMessages
.
P72_UNTERMINATED
,
entityName
)
;
fEntityHandler
.
endEntityDecl
(
)
;
return
;
}
decreaseMarkupDepth
(
)
;
fEntityHandler
.
endEntityDecl
(
)
;
int
entityIndex
=
fEventHandler
.
addUnparsedEntityDecl
(
entityName
,
fPubidLiteral
,
fSystemLiteral
,
notationName
)
;
}
}
}
}
private
int
scanEntityValue
(
boolean
single
)
throws
Exception
{
char
qchar
=
single
?
'\''
:
'\"'
;
fEntityValueMark
=
fEntityReader
.
currentOffset
(
)
;
int
entityValue
=
fEntityReader
.
scanEntityValue
(
qchar
,
true
)
;
if
(
entityValue
<
0
)
entityValue
=
scanComplexEntityValue
(
qchar
,
entityValue
)
;
return
entityValue
;
}
private
int
scanComplexEntityValue
(
char
qchar
,
int
result
)
throws
Exception
{
int
previousState
=
setScannerState
(
SCANNER_STATE_ENTITY_VALUE
)
;
fEntityValueReader
=
fReaderId
;
int
dataOffset
=
fLiteralData
.
length
(
)
;
while
(
true
)
{
switch
(
result
)
{
case
XMLEntityHandler
.
ENTITYVALUE_RESULT_FINISHED
:
{
int
offset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
lookingAtChar
(
qchar
,
true
)
;
restoreScannerState
(
previousState
)
;
int
dataLength
=
fLiteralData
.
length
(
)
-
dataOffset
;
if
(
dataLength
==
0
)
{
return
fEntityReader
.
addString
(
fEntityValueMark
,
offset
-
fEntityValueMark
)
;
}
if
(
offset
-
fEntityValueMark
>
0
)
{
fEntityReader
.
append
(
fLiteralData
,
fEntityValueMark
,
offset
-
fEntityValueMark
)
;
dataLength
=
fLiteralData
.
length
(
)
-
dataOffset
;
}
return
fLiteralData
.
addString
(
dataOffset
,
dataLength
)
;
}
case
XMLEntityHandler
.
ENTITYVALUE_RESULT_REFERENCE
:
{
int
offset
=
fEntityReader
.
currentOffset
(
)
;
if
(
offset
-
fEntityValueMark
>
0
)
fEntityReader
.
append
(
fLiteralData
,
fEntityValueMark
,
offset
-
fEntityValueMark
)
;
fEntityReader
.
lookingAtChar
(
'&'
,
true
)
;
if
(
fEntityReader
.
lookingAtChar
(
'#'
,
true
)
)
{
int
ch
=
scanCharRef
(
)
;
if
(
ch
!=
-
1
)
{
if
(
ch
<
0x10000
)
fLiteralData
.
append
(
(
char
)
ch
)
;
else
{
fLiteralData
.
append
(
(
char
)
(
(
(
ch
-
0x00010000
)
>
>
10
)
+
0xd800
)
)
;
fLiteralData
.
append
(
(
char
)
(
(
(
ch
-
0x00010000
)
&
0x3ff
)
+
0xdc00
)
)
;
}
}
fEntityValueMark
=
fEntityReader
.
currentOffset
(
)
;
}
else
{
int
nameOffset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
skipPastName
(
';'
)
;
int
nameLength
=
fEntityReader
.
currentOffset
(
)
-
nameOffset
;
if
(
nameLength
==
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_NAME_REQUIRED_IN_REFERENCE
,
XMLMessages
.
P68_NAME_REQUIRED
)
;
fEntityValueMark
=
fEntityReader
.
currentOffset
(
)
;
}
else
if
(
!
fEntityReader
.
lookingAtChar
(
';'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SEMICOLON_REQUIRED_IN_REFERENCE
,
XMLMessages
.
P68_SEMICOLON_REQUIRED
,
fEntityReader
.
addString
(
nameOffset
,
nameLength
)
)
;
fEntityValueMark
=
fEntityReader
.
currentOffset
(
)
;
}
else
{
fEntityValueMark
=
offset
;
}
}
break
;
}
case
XMLEntityHandler
.
ENTITYVALUE_RESULT_PEREF
:
{
int
offset
=
fEntityReader
.
currentOffset
(
)
;
if
(
offset
-
fEntityValueMark
>
0
)
fEntityReader
.
append
(
fLiteralData
,
fEntityValueMark
,
offset
-
fEntityValueMark
)
;
fEntityReader
.
lookingAtChar
(
'%'
,
true
)
;
int
nameOffset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
skipPastName
(
';'
)
;
int
nameLength
=
fEntityReader
.
currentOffset
(
)
-
nameOffset
;
if
(
nameLength
==
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_NAME_REQUIRED_IN_PEREFERENCE
,
XMLMessages
.
P69_NAME_REQUIRED
)
;
}
else
if
(
!
fEntityReader
.
lookingAtChar
(
';'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE
,
XMLMessages
.
P69_SEMICOLON_REQUIRED
,
fEntityReader
.
addString
(
nameOffset
,
nameLength
)
)
;
}
else
if
(
!
getReadingExternalEntity
(
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_PEREFERENCE_WITHIN_MARKUP
,
XMLMessages
.
WFC_PES_IN_INTERNAL_SUBSET
,
fEntityReader
.
addString
(
nameOffset
,
nameLength
)
)
;
}
else
{
int
peNameIndex
=
fEntityReader
.
addSymbol
(
nameOffset
,
nameLength
)
;
fEntityHandler
.
startReadingFromEntity
(
peNameIndex
,
markupDepth
(
)
,
XMLEntityHandler
.
CONTEXT_IN_ENTITYVALUE
)
;
}
fEntityValueMark
=
fEntityReader
.
currentOffset
(
)
;
break
;
}
case
XMLEntityHandler
.
ENTITYVALUE_RESULT_INVALID_CHAR
:
{
int
offset
=
fEntityReader
.
currentOffset
(
)
;
if
(
offset
-
fEntityValueMark
>
0
)
fEntityReader
.
append
(
fLiteralData
,
fEntityValueMark
,
offset
-
fEntityValueMark
)
;
int
invChar
=
fEntityReader
.
scanInvalidChar
(
)
;
if
(
fScannerState
==
SCANNER_STATE_END_OF_INPUT
)
return
-
1
;
if
(
invChar
>=
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_INVALID_CHAR_IN_ENTITYVALUE
,
XMLMessages
.
P9_INVALID_CHARACTER
,
Integer
.
toHexString
(
invChar
)
)
;
}
fEntityValueMark
=
fEntityReader
.
currentOffset
(
)
;
break
;
}
case
XMLEntityHandler
.
ENTITYVALUE_RESULT_END_OF_INPUT
:
break
;
default
:
break
;
}
result
=
fEntityReader
.
scanEntityValue
(
fReaderId
==
fEntityValueReader
?
qchar
:
-
1
,
false
)
;
}
}
private
boolean
checkForPEReference
(
boolean
spaceRequired
)
throws
Exception
{
boolean
sawSpace
=
true
;
if
(
spaceRequired
)
sawSpace
=
fEntityReader
.
lookingAtSpace
(
true
)
;
fEntityReader
.
skipPastSpaces
(
)
;
if
(
!
getReadingExternalEntity
(
)
)
return
sawSpace
;
if
(
!
fEntityReader
.
lookingAtChar
(
'%'
,
true
)
)
return
sawSpace
;
while
(
true
)
{
int
nameOffset
=
fEntityReader
.
currentOffset
(
)
;
fEntityReader
.
skipPastName
(
';'
)
;
int
nameLength
=
fEntityReader
.
currentOffset
(
)
-
nameOffset
;
if
(
nameLength
==
0
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_NAME_REQUIRED_IN_PEREFERENCE
,
XMLMessages
.
P69_NAME_REQUIRED
)
;
}
else
if
(
!
fEntityReader
.
lookingAtChar
(
';'
,
true
)
)
{
reportFatalXMLError
(
XMLMessages
.
MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE
,
XMLMessages
.
P69_SEMICOLON_REQUIRED
,
fEntityReader
.
addString
(
nameOffset
,
nameLength
)
)
;
}
else
{
int
peNameIndex
=
fEntityReader
.
addSymbol
(
nameOffset
,
nameLength
)
;
int
readerDepth
=
(
fScannerState
==
SCANNER_STATE_CONTENTSPEC
)
?
parenDepth
(
)
:
markupDepth
(
)
;
fEntityHandler
.
startReadingFromEntity
(
peNameIndex
,
readerDepth
,
XMLEntityHandler
.
CONTEXT_IN_DTD_WITHIN_MARKUP
)
;
}
fEntityReader
.
skipPastSpaces
(
)
;
if
(
!
fEntityReader
.
lookingAtChar
(
'%'
,
true
)
)
return
true
;
}
}
private
void
initializeContentModelStack
(
int
depth
)
{
if
(
opStack
==
null
)
{
opStack
=
new
int
[
8
]
;
nodeIndexStack
=
new
int
[
8
]
;
prevNodeIndexStack
=
new
int
[
8
]
;
}
else
if
(
depth
==
opStack
.
length
)
{
int
[
]
newStack
=
new
int
[
depth
*
2
]
;
System
.
arraycopy
(
opStack
,
0
,
newStack
,
0
,
depth
)
;
opStack
=
newStack
;
newStack
=
new
int
[
depth
*
2
]
;
System
.
arraycopy
(
nodeIndexStack
,
0
,
newStack
,
0
,
depth
)
;
nodeIndexStack
=
newStack
;
newStack
=
new
int
[
depth
*
2
]
;
System
.
arraycopy
(
prevNodeIndexStack
,
0
,
newStack
,
0
,
depth
)
;
prevNodeIndexStack
=
newStack
;
}
opStack
[
depth
]
=
-
1
;
nodeIndexStack
[
depth
]
=
-
1
;
prevNodeIndexStack
[
depth
]
=
-
1
;
}
}
