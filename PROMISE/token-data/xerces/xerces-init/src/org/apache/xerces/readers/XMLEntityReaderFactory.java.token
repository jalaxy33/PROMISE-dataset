package
org
.
apache
.
xerces
.
readers
;
import
org
.
apache
.
xerces
.
framework
.
XMLErrorReporter
;
import
org
.
apache
.
xerces
.
utils
.
StringPool
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
Reader
;
public
class
XMLEntityReaderFactory
{
private
static
final
boolean
USE_CHAR_READER_FOR_UTF8
=
false
;
private
static
final
boolean
USE_BYTE_READER_FOR_UTF8
=
true
;
public
XMLEntityReaderFactory
(
)
{
}
public
XMLEntityHandler
.
EntityReader
createCharReader
(
XMLEntityHandler
entityHandler
,
XMLErrorReporter
errorReporter
,
boolean
sendCharDataAsCharArray
,
Reader
reader
,
StringPool
stringPool
)
throws
Exception
{
return
new
CharReader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
reader
,
stringPool
)
;
}
public
XMLEntityHandler
.
EntityReader
createUTF8Reader
(
XMLEntityHandler
entityHandler
,
XMLErrorReporter
errorReporter
,
boolean
sendCharDataAsCharArray
,
InputStream
data
,
StringPool
stringPool
)
throws
Exception
{
XMLEntityHandler
.
EntityReader
reader
;
if
(
USE_CHAR_READER_FOR_UTF8
)
{
reader
=
new
CharReader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
new
InputStreamReader
(
data
,
"UTF8"
)
,
stringPool
)
;
}
else
if
(
USE_BYTE_READER_FOR_UTF8
)
{
reader
=
new
UTF8Reader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
data
,
stringPool
)
;
}
else
{
reader
=
new
UTF8CharReader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
data
,
stringPool
)
;
}
return
reader
;
}
public
XMLEntityHandler
.
EntityReader
createStringReader
(
XMLEntityHandler
entityHandler
,
XMLErrorReporter
errorReporter
,
boolean
sendCharDataAsCharArray
,
int
lineNumber
,
int
columnNumber
,
int
stringHandle
,
StringPool
stringPool
,
boolean
addEnclosingSpaces
)
throws
Exception
{
return
StringReader
.
createStringReader
(
entityHandler
,
errorReporter
,
sendCharDataAsCharArray
,
lineNumber
,
columnNumber
,
stringHandle
,
stringPool
,
addEnclosingSpaces
)
;
}
}
