package
org
.
apache
.
lucene
.
store
;
import
java
.
io
.
IOException
;
public
class
RAMOutputStream
extends
BufferedIndexOutput
{
private
RAMFile
file
;
private
long
pointer
=
0
;
public
RAMOutputStream
(
)
{
this
(
new
RAMFile
(
)
)
;
}
RAMOutputStream
(
RAMFile
f
)
{
file
=
f
;
}
public
void
writeTo
(
IndexOutput
out
)
throws
IOException
{
flush
(
)
;
final
long
end
=
file
.
length
;
long
pos
=
0
;
int
buffer
=
0
;
while
(
pos
<
end
)
{
int
length
=
BUFFER_SIZE
;
long
nextPos
=
pos
+
length
;
if
(
nextPos
>
end
)
{
length
=
(
int
)
(
end
-
pos
)
;
}
out
.
writeBytes
(
(
byte
[
]
)
file
.
buffers
.
elementAt
(
buffer
++
)
,
length
)
;
pos
=
nextPos
;
}
}
public
void
reset
(
)
{
try
{
seek
(
0
)
;
}
catch
(
IOException
e
)
{
throw
new
RuntimeException
(
e
.
toString
(
)
)
;
}
file
.
length
=
0
;
}
public
void
flushBuffer
(
byte
[
]
src
,
int
len
)
{
byte
[
]
buffer
;
int
bufferPos
=
0
;
while
(
bufferPos
!=
len
)
{
int
bufferNumber
=
(
int
)
(
pointer
/
BUFFER_SIZE
)
;
int
bufferOffset
=
(
int
)
(
pointer
%
BUFFER_SIZE
)
;
int
bytesInBuffer
=
BUFFER_SIZE
-
bufferOffset
;
int
remainInSrcBuffer
=
len
-
bufferPos
;
int
bytesToCopy
=
bytesInBuffer
>=
remainInSrcBuffer
?
remainInSrcBuffer
:
bytesInBuffer
;
if
(
bufferNumber
==
file
.
buffers
.
size
(
)
)
{
buffer
=
new
byte
[
BUFFER_SIZE
]
;
file
.
buffers
.
addElement
(
buffer
)
;
}
else
{
buffer
=
(
byte
[
]
)
file
.
buffers
.
elementAt
(
bufferNumber
)
;
}
System
.
arraycopy
(
src
,
bufferPos
,
buffer
,
bufferOffset
,
bytesToCopy
)
;
bufferPos
+=
bytesToCopy
;
pointer
+=
bytesToCopy
;
}
if
(
pointer
>
file
.
length
)
file
.
length
=
pointer
;
file
.
lastModified
=
System
.
currentTimeMillis
(
)
;
}
public
void
close
(
)
throws
IOException
{
super
.
close
(
)
;
}
public
void
seek
(
long
pos
)
throws
IOException
{
super
.
seek
(
pos
)
;
pointer
=
pos
;
}
public
long
length
(
)
{
return
file
.
length
;
}
}
