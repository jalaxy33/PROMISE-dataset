package
org
.
apache
.
lucene
.
index
;
import
org
.
apache
.
lucene
.
analysis
.
Analyzer
;
import
org
.
apache
.
lucene
.
document
.
Document
;
import
org
.
apache
.
lucene
.
store
.
Directory
;
import
org
.
apache
.
lucene
.
store
.
FSDirectory
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
io
.
PrintStream
;
public
class
IndexModifier
{
protected
IndexWriter
indexWriter
=
null
;
protected
IndexReader
indexReader
=
null
;
protected
Directory
directory
=
null
;
protected
Analyzer
analyzer
=
null
;
protected
boolean
open
=
false
;
protected
PrintStream
infoStream
=
null
;
protected
boolean
useCompoundFile
=
true
;
protected
int
maxBufferedDocs
=
IndexWriter
.
DEFAULT_MAX_BUFFERED_DOCS
;
protected
int
maxFieldLength
=
IndexWriter
.
DEFAULT_MAX_FIELD_LENGTH
;
protected
int
mergeFactor
=
IndexWriter
.
DEFAULT_MERGE_FACTOR
;
public
IndexModifier
(
Directory
directory
,
Analyzer
analyzer
,
boolean
create
)
throws
IOException
{
init
(
directory
,
analyzer
,
create
)
;
}
public
IndexModifier
(
String
dirName
,
Analyzer
analyzer
,
boolean
create
)
throws
IOException
{
Directory
dir
=
FSDirectory
.
getDirectory
(
dirName
,
create
)
;
init
(
dir
,
analyzer
,
create
)
;
}
public
IndexModifier
(
File
file
,
Analyzer
analyzer
,
boolean
create
)
throws
IOException
{
Directory
dir
=
FSDirectory
.
getDirectory
(
file
,
create
)
;
init
(
dir
,
analyzer
,
create
)
;
}
protected
void
init
(
Directory
directory
,
Analyzer
analyzer
,
boolean
create
)
throws
IOException
{
this
.
directory
=
directory
;
synchronized
(
this
.
directory
)
{
this
.
analyzer
=
analyzer
;
indexWriter
=
new
IndexWriter
(
directory
,
analyzer
,
create
)
;
open
=
true
;
}
}
protected
void
assureOpen
(
)
{
if
(
!
open
)
{
throw
new
IllegalStateException
(
"Index is closed"
)
;
}
}
protected
void
createIndexWriter
(
)
throws
IOException
{
if
(
indexWriter
==
null
)
{
if
(
indexReader
!=
null
)
{
indexReader
.
close
(
)
;
indexReader
=
null
;
}
indexWriter
=
new
IndexWriter
(
directory
,
analyzer
,
false
)
;
indexWriter
.
setInfoStream
(
infoStream
)
;
indexWriter
.
setUseCompoundFile
(
useCompoundFile
)
;
indexWriter
.
setMaxBufferedDocs
(
maxBufferedDocs
)
;
indexWriter
.
setMaxFieldLength
(
maxFieldLength
)
;
indexWriter
.
setMergeFactor
(
mergeFactor
)
;
}
}
protected
void
createIndexReader
(
)
throws
IOException
{
if
(
indexReader
==
null
)
{
if
(
indexWriter
!=
null
)
{
indexWriter
.
close
(
)
;
indexWriter
=
null
;
}
indexReader
=
IndexReader
.
open
(
directory
)
;
}
}
public
void
flush
(
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
if
(
indexWriter
!=
null
)
{
indexWriter
.
close
(
)
;
indexWriter
=
null
;
createIndexWriter
(
)
;
}
else
{
indexReader
.
close
(
)
;
indexReader
=
null
;
createIndexReader
(
)
;
}
}
}
public
void
addDocument
(
Document
doc
,
Analyzer
docAnalyzer
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
createIndexWriter
(
)
;
if
(
docAnalyzer
!=
null
)
indexWriter
.
addDocument
(
doc
,
docAnalyzer
)
;
else
indexWriter
.
addDocument
(
doc
)
;
}
}
public
void
addDocument
(
Document
doc
)
throws
IOException
{
addDocument
(
doc
,
null
)
;
}
public
int
deleteDocuments
(
Term
term
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
createIndexReader
(
)
;
return
indexReader
.
deleteDocuments
(
term
)
;
}
}
public
void
deleteDocument
(
int
docNum
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
createIndexReader
(
)
;
indexReader
.
deleteDocument
(
docNum
)
;
}
}
public
int
docCount
(
)
{
synchronized
(
directory
)
{
assureOpen
(
)
;
if
(
indexWriter
!=
null
)
{
return
indexWriter
.
docCount
(
)
;
}
else
{
return
indexReader
.
numDocs
(
)
;
}
}
}
public
void
optimize
(
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
createIndexWriter
(
)
;
indexWriter
.
optimize
(
)
;
}
}
public
void
setInfoStream
(
PrintStream
infoStream
)
{
synchronized
(
directory
)
{
assureOpen
(
)
;
if
(
indexWriter
!=
null
)
{
indexWriter
.
setInfoStream
(
infoStream
)
;
}
this
.
infoStream
=
infoStream
;
}
}
public
PrintStream
getInfoStream
(
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
createIndexWriter
(
)
;
return
indexWriter
.
getInfoStream
(
)
;
}
}
public
void
setUseCompoundFile
(
boolean
useCompoundFile
)
{
synchronized
(
directory
)
{
assureOpen
(
)
;
if
(
indexWriter
!=
null
)
{
indexWriter
.
setUseCompoundFile
(
useCompoundFile
)
;
}
this
.
useCompoundFile
=
useCompoundFile
;
}
}
public
boolean
getUseCompoundFile
(
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
createIndexWriter
(
)
;
return
indexWriter
.
getUseCompoundFile
(
)
;
}
}
public
void
setMaxFieldLength
(
int
maxFieldLength
)
{
synchronized
(
directory
)
{
assureOpen
(
)
;
if
(
indexWriter
!=
null
)
{
indexWriter
.
setMaxFieldLength
(
maxFieldLength
)
;
}
this
.
maxFieldLength
=
maxFieldLength
;
}
}
public
int
getMaxFieldLength
(
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
createIndexWriter
(
)
;
return
indexWriter
.
getMaxFieldLength
(
)
;
}
}
public
void
setMaxBufferedDocs
(
int
maxBufferedDocs
)
{
synchronized
(
directory
)
{
assureOpen
(
)
;
if
(
indexWriter
!=
null
)
{
indexWriter
.
setMaxBufferedDocs
(
maxBufferedDocs
)
;
}
this
.
maxBufferedDocs
=
maxBufferedDocs
;
}
}
public
int
getMaxBufferedDocs
(
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
createIndexWriter
(
)
;
return
indexWriter
.
getMaxBufferedDocs
(
)
;
}
}
public
void
setMergeFactor
(
int
mergeFactor
)
{
synchronized
(
directory
)
{
assureOpen
(
)
;
if
(
indexWriter
!=
null
)
{
indexWriter
.
setMergeFactor
(
mergeFactor
)
;
}
this
.
mergeFactor
=
mergeFactor
;
}
}
public
int
getMergeFactor
(
)
throws
IOException
{
synchronized
(
directory
)
{
assureOpen
(
)
;
createIndexWriter
(
)
;
return
indexWriter
.
getMergeFactor
(
)
;
}
}
public
void
close
(
)
throws
IOException
{
synchronized
(
directory
)
{
if
(
!
open
)
throw
new
IllegalStateException
(
"Index is closed already"
)
;
if
(
indexWriter
!=
null
)
{
indexWriter
.
close
(
)
;
indexWriter
=
null
;
}
else
{
indexReader
.
close
(
)
;
indexReader
=
null
;
}
open
=
false
;
}
}
public
String
toString
(
)
{
return
"Index@"
+
directory
;
}
}
