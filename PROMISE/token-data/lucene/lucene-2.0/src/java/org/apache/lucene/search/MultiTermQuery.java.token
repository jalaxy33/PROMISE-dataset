package
org
.
apache
.
lucene
.
search
;
import
java
.
io
.
IOException
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
org
.
apache
.
lucene
.
index
.
Term
;
import
org
.
apache
.
lucene
.
util
.
ToStringUtils
;
public
abstract
class
MultiTermQuery
extends
Query
{
private
Term
term
;
public
MultiTermQuery
(
Term
term
)
{
this
.
term
=
term
;
}
public
Term
getTerm
(
)
{
return
term
;
}
protected
abstract
FilteredTermEnum
getEnum
(
IndexReader
reader
)
throws
IOException
;
public
Query
rewrite
(
IndexReader
reader
)
throws
IOException
{
FilteredTermEnum
enumerator
=
getEnum
(
reader
)
;
BooleanQuery
query
=
new
BooleanQuery
(
true
)
;
try
{
do
{
Term
t
=
enumerator
.
term
(
)
;
if
(
t
!=
null
)
{
TermQuery
tq
=
new
TermQuery
(
t
)
;
tq
.
setBoost
(
getBoost
(
)
*
enumerator
.
difference
(
)
)
;
query
.
add
(
tq
,
BooleanClause
.
Occur
.
SHOULD
)
;
}
}
while
(
enumerator
.
next
(
)
)
;
}
finally
{
enumerator
.
close
(
)
;
}
return
query
;
}
public
String
toString
(
String
field
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
if
(
!
term
.
field
(
)
.
equals
(
field
)
)
{
buffer
.
append
(
term
.
field
(
)
)
;
buffer
.
append
(
":"
)
;
}
buffer
.
append
(
term
.
text
(
)
)
;
buffer
.
append
(
ToStringUtils
.
boost
(
getBoost
(
)
)
)
;
return
buffer
.
toString
(
)
;
}
public
boolean
equals
(
Object
o
)
{
if
(
this
==
o
)
return
true
;
if
(
!
(
o
instanceof
MultiTermQuery
)
)
return
false
;
final
MultiTermQuery
multiTermQuery
=
(
MultiTermQuery
)
o
;
if
(
!
term
.
equals
(
multiTermQuery
.
term
)
)
return
false
;
return
getBoost
(
)
==
multiTermQuery
.
getBoost
(
)
;
}
public
int
hashCode
(
)
{
return
term
.
hashCode
(
)
+
Float
.
floatToRawIntBits
(
getBoost
(
)
)
;
}
}
