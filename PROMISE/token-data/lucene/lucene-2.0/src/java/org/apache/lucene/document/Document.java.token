package
org
.
apache
.
lucene
.
document
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
org
.
apache
.
lucene
.
search
.
Searcher
;
import
org
.
apache
.
lucene
.
search
.
Hits
;
public
final
class
Document
implements
java
.
io
.
Serializable
{
List
fields
=
new
Vector
(
)
;
private
float
boost
=
1.0f
;
public
Document
(
)
{
}
public
void
setBoost
(
float
boost
)
{
this
.
boost
=
boost
;
}
public
float
getBoost
(
)
{
return
boost
;
}
public
final
void
add
(
Field
field
)
{
fields
.
add
(
field
)
;
}
public
final
void
removeField
(
String
name
)
{
Iterator
it
=
fields
.
iterator
(
)
;
while
(
it
.
hasNext
(
)
)
{
Field
field
=
(
Field
)
it
.
next
(
)
;
if
(
field
.
name
(
)
.
equals
(
name
)
)
{
it
.
remove
(
)
;
return
;
}
}
}
public
final
void
removeFields
(
String
name
)
{
Iterator
it
=
fields
.
iterator
(
)
;
while
(
it
.
hasNext
(
)
)
{
Field
field
=
(
Field
)
it
.
next
(
)
;
if
(
field
.
name
(
)
.
equals
(
name
)
)
{
it
.
remove
(
)
;
}
}
}
public
final
Field
getField
(
String
name
)
{
for
(
int
i
=
0
;
i
<
fields
.
size
(
)
;
i
++
)
{
Field
field
=
(
Field
)
fields
.
get
(
i
)
;
if
(
field
.
name
(
)
.
equals
(
name
)
)
return
field
;
}
return
null
;
}
public
final
String
get
(
String
name
)
{
for
(
int
i
=
0
;
i
<
fields
.
size
(
)
;
i
++
)
{
Field
field
=
(
Field
)
fields
.
get
(
i
)
;
if
(
field
.
name
(
)
.
equals
(
name
)
&&
(
!
field
.
isBinary
(
)
)
)
return
field
.
stringValue
(
)
;
}
return
null
;
}
public
final
Enumeration
fields
(
)
{
return
(
(
Vector
)
fields
)
.
elements
(
)
;
}
public
final
Field
[
]
getFields
(
String
name
)
{
List
result
=
new
ArrayList
(
)
;
for
(
int
i
=
0
;
i
<
fields
.
size
(
)
;
i
++
)
{
Field
field
=
(
Field
)
fields
.
get
(
i
)
;
if
(
field
.
name
(
)
.
equals
(
name
)
)
{
result
.
add
(
field
)
;
}
}
if
(
result
.
size
(
)
==
0
)
return
null
;
return
(
Field
[
]
)
result
.
toArray
(
new
Field
[
result
.
size
(
)
]
)
;
}
public
final
String
[
]
getValues
(
String
name
)
{
List
result
=
new
ArrayList
(
)
;
for
(
int
i
=
0
;
i
<
fields
.
size
(
)
;
i
++
)
{
Field
field
=
(
Field
)
fields
.
get
(
i
)
;
if
(
field
.
name
(
)
.
equals
(
name
)
&&
(
!
field
.
isBinary
(
)
)
)
result
.
add
(
field
.
stringValue
(
)
)
;
}
if
(
result
.
size
(
)
==
0
)
return
null
;
return
(
String
[
]
)
result
.
toArray
(
new
String
[
result
.
size
(
)
]
)
;
}
public
final
byte
[
]
[
]
getBinaryValues
(
String
name
)
{
List
result
=
new
ArrayList
(
)
;
for
(
int
i
=
0
;
i
<
fields
.
size
(
)
;
i
++
)
{
Field
field
=
(
Field
)
fields
.
get
(
i
)
;
if
(
field
.
name
(
)
.
equals
(
name
)
&&
(
field
.
isBinary
(
)
)
)
result
.
add
(
field
.
binaryValue
(
)
)
;
}
if
(
result
.
size
(
)
==
0
)
return
null
;
return
(
byte
[
]
[
]
)
result
.
toArray
(
new
byte
[
result
.
size
(
)
]
[
]
)
;
}
public
final
byte
[
]
getBinaryValue
(
String
name
)
{
for
(
int
i
=
0
;
i
<
fields
.
size
(
)
;
i
++
)
{
Field
field
=
(
Field
)
fields
.
get
(
i
)
;
if
(
field
.
name
(
)
.
equals
(
name
)
&&
(
field
.
isBinary
(
)
)
)
return
field
.
binaryValue
(
)
;
}
return
null
;
}
public
final
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"Document<"
)
;
for
(
int
i
=
0
;
i
<
fields
.
size
(
)
;
i
++
)
{
Field
field
=
(
Field
)
fields
.
get
(
i
)
;
buffer
.
append
(
field
.
toString
(
)
)
;
if
(
i
!=
fields
.
size
(
)
-
1
)
buffer
.
append
(
" "
)
;
}
buffer
.
append
(
">"
)
;
return
buffer
.
toString
(
)
;
}
}
