package
org
.
apache
.
lucene
.
search
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Serializable
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
lucene
.
index
.
Term
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
org
.
apache
.
lucene
.
index
.
IndexWriter
;
import
org
.
apache
.
lucene
.
document
.
Field
;
import
org
.
apache
.
lucene
.
util
.
SmallFloat
;
public
abstract
class
Similarity
implements
Serializable
{
private
static
Similarity
defaultImpl
=
new
DefaultSimilarity
(
)
;
public
static
void
setDefault
(
Similarity
similarity
)
{
Similarity
.
defaultImpl
=
similarity
;
}
public
static
Similarity
getDefault
(
)
{
return
Similarity
.
defaultImpl
;
}
private
static
final
float
[
]
NORM_TABLE
=
new
float
[
256
]
;
static
{
for
(
int
i
=
0
;
i
<
256
;
i
++
)
NORM_TABLE
[
i
]
=
SmallFloat
.
byte315ToFloat
(
(
byte
)
i
)
;
}
public
static
float
decodeNorm
(
byte
b
)
{
return
NORM_TABLE
[
b
&
0xFF
]
;
}
public
static
float
[
]
getNormDecoder
(
)
{
return
NORM_TABLE
;
}
public
abstract
float
lengthNorm
(
String
fieldName
,
int
numTokens
)
;
public
abstract
float
queryNorm
(
float
sumOfSquaredWeights
)
;
public
static
byte
encodeNorm
(
float
f
)
{
return
SmallFloat
.
floatToByte315
(
f
)
;
}
public
float
tf
(
int
freq
)
{
return
tf
(
(
float
)
freq
)
;
}
public
abstract
float
sloppyFreq
(
int
distance
)
;
public
abstract
float
tf
(
float
freq
)
;
public
float
idf
(
Term
term
,
Searcher
searcher
)
throws
IOException
{
return
idf
(
searcher
.
docFreq
(
term
)
,
searcher
.
maxDoc
(
)
)
;
}
public
float
idf
(
Collection
terms
,
Searcher
searcher
)
throws
IOException
{
float
idf
=
0.0f
;
Iterator
i
=
terms
.
iterator
(
)
;
while
(
i
.
hasNext
(
)
)
{
idf
+=
idf
(
(
Term
)
i
.
next
(
)
,
searcher
)
;
}
return
idf
;
}
public
abstract
float
idf
(
int
docFreq
,
int
numDocs
)
;
public
abstract
float
coord
(
int
overlap
,
int
maxOverlap
)
;
}
