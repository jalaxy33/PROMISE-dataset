package
org
.
apache
.
lucene
.
store
;
import
java
.
io
.
IOException
;
public
abstract
class
BufferedIndexInput
extends
IndexInput
{
static
final
int
BUFFER_SIZE
=
BufferedIndexOutput
.
BUFFER_SIZE
;
private
byte
[
]
buffer
;
private
long
bufferStart
=
0
;
private
int
bufferLength
=
0
;
private
int
bufferPosition
=
0
;
public
byte
readByte
(
)
throws
IOException
{
if
(
bufferPosition
>=
bufferLength
)
refill
(
)
;
return
buffer
[
bufferPosition
++
]
;
}
public
void
readBytes
(
byte
[
]
b
,
int
offset
,
int
len
)
throws
IOException
{
if
(
len
<
BUFFER_SIZE
)
{
for
(
int
i
=
0
;
i
<
len
;
i
++
)
b
[
i
+
offset
]
=
(
byte
)
readByte
(
)
;
}
else
{
long
start
=
getFilePointer
(
)
;
seekInternal
(
start
)
;
readInternal
(
b
,
offset
,
len
)
;
bufferStart
=
start
+
len
;
bufferPosition
=
0
;
bufferLength
=
0
;
}
}
private
void
refill
(
)
throws
IOException
{
long
start
=
bufferStart
+
bufferPosition
;
long
end
=
start
+
BUFFER_SIZE
;
if
(
end
>
length
(
)
)
end
=
length
(
)
;
bufferLength
=
(
int
)
(
end
-
start
)
;
if
(
bufferLength
<=
0
)
throw
new
IOException
(
"read past EOF"
)
;
if
(
buffer
==
null
)
buffer
=
new
byte
[
BUFFER_SIZE
]
;
readInternal
(
buffer
,
0
,
bufferLength
)
;
bufferStart
=
start
;
bufferPosition
=
0
;
}
protected
abstract
void
readInternal
(
byte
[
]
b
,
int
offset
,
int
length
)
throws
IOException
;
public
long
getFilePointer
(
)
{
return
bufferStart
+
bufferPosition
;
}
public
void
seek
(
long
pos
)
throws
IOException
{
if
(
pos
>=
bufferStart
&&
pos
<
(
bufferStart
+
bufferLength
)
)
bufferPosition
=
(
int
)
(
pos
-
bufferStart
)
;
else
{
bufferStart
=
pos
;
bufferPosition
=
0
;
bufferLength
=
0
;
seekInternal
(
pos
)
;
}
}
protected
abstract
void
seekInternal
(
long
pos
)
throws
IOException
;
public
Object
clone
(
)
{
BufferedIndexInput
clone
=
(
BufferedIndexInput
)
super
.
clone
(
)
;
if
(
buffer
!=
null
)
{
clone
.
buffer
=
new
byte
[
BUFFER_SIZE
]
;
System
.
arraycopy
(
buffer
,
0
,
clone
.
buffer
,
0
,
bufferLength
)
;
}
return
clone
;
}
}
