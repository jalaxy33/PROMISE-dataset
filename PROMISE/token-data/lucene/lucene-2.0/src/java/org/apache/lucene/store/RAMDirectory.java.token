package
org
.
apache
.
lucene
.
store
;
import
java
.
io
.
IOException
;
import
java
.
io
.
File
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Enumeration
;
import
org
.
apache
.
lucene
.
store
.
Directory
;
import
org
.
apache
.
lucene
.
store
.
IndexInput
;
import
org
.
apache
.
lucene
.
store
.
IndexOutput
;
public
final
class
RAMDirectory
extends
Directory
{
Hashtable
files
=
new
Hashtable
(
)
;
public
RAMDirectory
(
)
{
}
public
RAMDirectory
(
Directory
dir
)
throws
IOException
{
this
(
dir
,
false
)
;
}
private
RAMDirectory
(
Directory
dir
,
boolean
closeDir
)
throws
IOException
{
final
String
[
]
files
=
dir
.
list
(
)
;
byte
[
]
buf
=
new
byte
[
BufferedIndexOutput
.
BUFFER_SIZE
]
;
for
(
int
i
=
0
;
i
<
files
.
length
;
i
++
)
{
IndexOutput
os
=
createOutput
(
files
[
i
]
)
;
IndexInput
is
=
dir
.
openInput
(
files
[
i
]
)
;
long
len
=
is
.
length
(
)
;
long
readCount
=
0
;
while
(
readCount
<
len
)
{
int
toRead
=
readCount
+
BufferedIndexOutput
.
BUFFER_SIZE
>
len
?
(
int
)
(
len
-
readCount
)
:
BufferedIndexOutput
.
BUFFER_SIZE
;
is
.
readBytes
(
buf
,
0
,
toRead
)
;
os
.
writeBytes
(
buf
,
toRead
)
;
readCount
+=
toRead
;
}
is
.
close
(
)
;
os
.
close
(
)
;
}
if
(
closeDir
)
dir
.
close
(
)
;
}
public
RAMDirectory
(
File
dir
)
throws
IOException
{
this
(
FSDirectory
.
getDirectory
(
dir
,
false
)
,
true
)
;
}
public
RAMDirectory
(
String
dir
)
throws
IOException
{
this
(
FSDirectory
.
getDirectory
(
dir
,
false
)
,
true
)
;
}
public
final
String
[
]
list
(
)
{
String
[
]
result
=
new
String
[
files
.
size
(
)
]
;
int
i
=
0
;
Enumeration
names
=
files
.
keys
(
)
;
while
(
names
.
hasMoreElements
(
)
)
result
[
i
++
]
=
(
String
)
names
.
nextElement
(
)
;
return
result
;
}
public
final
boolean
fileExists
(
String
name
)
{
RAMFile
file
=
(
RAMFile
)
files
.
get
(
name
)
;
return
file
!=
null
;
}
public
final
long
fileModified
(
String
name
)
{
RAMFile
file
=
(
RAMFile
)
files
.
get
(
name
)
;
return
file
.
lastModified
;
}
public
void
touchFile
(
String
name
)
{
RAMFile
file
=
(
RAMFile
)
files
.
get
(
name
)
;
long
ts2
,
ts1
=
System
.
currentTimeMillis
(
)
;
do
{
try
{
Thread
.
sleep
(
0
,
1
)
;
}
catch
(
InterruptedException
e
)
{
}
ts2
=
System
.
currentTimeMillis
(
)
;
}
while
(
ts1
==
ts2
)
;
file
.
lastModified
=
ts2
;
}
public
final
long
fileLength
(
String
name
)
{
RAMFile
file
=
(
RAMFile
)
files
.
get
(
name
)
;
return
file
.
length
;
}
public
final
void
deleteFile
(
String
name
)
{
files
.
remove
(
name
)
;
}
public
final
void
renameFile
(
String
from
,
String
to
)
{
RAMFile
file
=
(
RAMFile
)
files
.
get
(
from
)
;
files
.
remove
(
from
)
;
files
.
put
(
to
,
file
)
;
}
public
final
IndexOutput
createOutput
(
String
name
)
{
RAMFile
file
=
new
RAMFile
(
)
;
files
.
put
(
name
,
file
)
;
return
new
RAMOutputStream
(
file
)
;
}
public
final
IndexInput
openInput
(
String
name
)
{
RAMFile
file
=
(
RAMFile
)
files
.
get
(
name
)
;
return
new
RAMInputStream
(
file
)
;
}
public
final
Lock
makeLock
(
final
String
name
)
{
return
new
Lock
(
)
{
public
boolean
obtain
(
)
throws
IOException
{
synchronized
(
files
)
{
if
(
!
fileExists
(
name
)
)
{
createOutput
(
name
)
.
close
(
)
;
return
true
;
}
return
false
;
}
}
public
void
release
(
)
{
deleteFile
(
name
)
;
}
public
boolean
isLocked
(
)
{
return
fileExists
(
name
)
;
}
}
;
}
public
final
void
close
(
)
{
}
}
