package
org
.
apache
.
lucene
.
search
;
import
java
.
io
.
IOException
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Set
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
public
abstract
class
Query
implements
java
.
io
.
Serializable
,
Cloneable
{
private
float
boost
=
1.0f
;
public
void
setBoost
(
float
b
)
{
boost
=
b
;
}
public
float
getBoost
(
)
{
return
boost
;
}
public
abstract
String
toString
(
String
field
)
;
public
String
toString
(
)
{
return
toString
(
""
)
;
}
protected
Weight
createWeight
(
Searcher
searcher
)
throws
IOException
{
throw
new
UnsupportedOperationException
(
)
;
}
public
Weight
weight
(
Searcher
searcher
)
throws
IOException
{
Query
query
=
searcher
.
rewrite
(
this
)
;
Weight
weight
=
query
.
createWeight
(
searcher
)
;
float
sum
=
weight
.
sumOfSquaredWeights
(
)
;
float
norm
=
getSimilarity
(
searcher
)
.
queryNorm
(
sum
)
;
weight
.
normalize
(
norm
)
;
return
weight
;
}
public
Query
rewrite
(
IndexReader
reader
)
throws
IOException
{
return
this
;
}
public
Query
combine
(
Query
[
]
queries
)
{
HashSet
uniques
=
new
HashSet
(
)
;
for
(
int
i
=
0
;
i
<
queries
.
length
;
i
++
)
{
Query
query
=
queries
[
i
]
;
BooleanClause
[
]
clauses
=
null
;
boolean
splittable
=
(
query
instanceof
BooleanQuery
)
;
if
(
splittable
)
{
BooleanQuery
bq
=
(
BooleanQuery
)
query
;
splittable
=
bq
.
isCoordDisabled
(
)
;
clauses
=
bq
.
getClauses
(
)
;
for
(
int
j
=
0
;
splittable
&&
j
<
clauses
.
length
;
j
++
)
{
splittable
=
(
clauses
[
j
]
.
getOccur
(
)
==
BooleanClause
.
Occur
.
SHOULD
)
;
}
}
if
(
splittable
)
{
for
(
int
j
=
0
;
j
<
clauses
.
length
;
j
++
)
{
uniques
.
add
(
clauses
[
j
]
.
getQuery
(
)
)
;
}
}
else
{
uniques
.
add
(
query
)
;
}
}
if
(
uniques
.
size
(
)
==
1
)
{
return
(
Query
)
uniques
.
iterator
(
)
.
next
(
)
;
}
Iterator
it
=
uniques
.
iterator
(
)
;
BooleanQuery
result
=
new
BooleanQuery
(
true
)
;
while
(
it
.
hasNext
(
)
)
result
.
add
(
(
Query
)
it
.
next
(
)
,
BooleanClause
.
Occur
.
SHOULD
)
;
return
result
;
}
public
void
extractTerms
(
Set
terms
)
{
throw
new
UnsupportedOperationException
(
)
;
}
public
static
Query
mergeBooleanQueries
(
Query
[
]
queries
)
{
HashSet
allClauses
=
new
HashSet
(
)
;
for
(
int
i
=
0
;
i
<
queries
.
length
;
i
++
)
{
BooleanClause
[
]
clauses
=
(
(
BooleanQuery
)
queries
[
i
]
)
.
getClauses
(
)
;
for
(
int
j
=
0
;
j
<
clauses
.
length
;
j
++
)
{
allClauses
.
add
(
clauses
[
j
]
)
;
}
}
boolean
coordDisabled
=
queries
.
length
==
0
?
false
:
(
(
BooleanQuery
)
queries
[
0
]
)
.
isCoordDisabled
(
)
;
BooleanQuery
result
=
new
BooleanQuery
(
coordDisabled
)
;
Iterator
i
=
allClauses
.
iterator
(
)
;
while
(
i
.
hasNext
(
)
)
{
result
.
add
(
(
BooleanClause
)
i
.
next
(
)
)
;
}
return
result
;
}
public
Similarity
getSimilarity
(
Searcher
searcher
)
{
return
searcher
.
getSimilarity
(
)
;
}
public
Object
clone
(
)
{
try
{
return
(
Query
)
super
.
clone
(
)
;
}
catch
(
CloneNotSupportedException
e
)
{
throw
new
RuntimeException
(
"Clone not supported: "
+
e
.
getMessage
(
)
)
;
}
}
}
