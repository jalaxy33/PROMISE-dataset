package
org
.
apache
.
lucene
.
analysis
;
public
class
ISOLatin1AccentFilter
extends
TokenFilter
{
public
ISOLatin1AccentFilter
(
TokenStream
input
)
{
super
(
input
)
;
}
public
final
Token
next
(
)
throws
java
.
io
.
IOException
{
final
Token
t
=
input
.
next
(
)
;
if
(
t
!=
null
)
t
.
setTermText
(
removeAccents
(
t
.
termText
(
)
)
)
;
return
t
;
}
public
final
static
String
removeAccents
(
String
input
)
{
final
StringBuffer
output
=
new
StringBuffer
(
)
;
for
(
int
i
=
0
;
i
<
input
.
length
(
)
;
i
++
)
{
switch
(
input
.
charAt
(
i
)
)
{
case
'À'
:
case
'Á'
:
case
'Â'
:
case
'Ã'
:
case
'Ä'
:
case
'Å'
:
output
.
append
(
"A"
)
;
break
;
case
'Æ'
:
output
.
append
(
"AE"
)
;
break
;
case
'Ç'
:
output
.
append
(
"C"
)
;
break
;
case
'È'
:
case
'É'
:
case
'Ê'
:
case
'Ë'
:
output
.
append
(
"E"
)
;
break
;
case
'Ì'
:
case
'Í'
:
case
'Î'
:
case
'Ï'
:
output
.
append
(
"I"
)
;
break
;
case
'Ð'
:
output
.
append
(
"D"
)
;
break
;
case
'Ñ'
:
output
.
append
(
"N"
)
;
break
;
case
'Ò'
:
case
'Ó'
:
case
'Ô'
:
case
'Õ'
:
case
'Ö'
:
case
'Ø'
:
output
.
append
(
"O"
)
;
break
;
case
'Œ'
:
output
.
append
(
"OE"
)
;
break
;
case
'Þ'
:
output
.
append
(
"TH"
)
;
break
;
case
'Ù'
:
case
'Ú'
:
case
'Û'
:
case
'Ü'
:
output
.
append
(
"U"
)
;
break
;
case
'Ý'
:
case
'Ÿ'
:
output
.
append
(
"Y"
)
;
break
;
case
'à'
:
case
'á'
:
case
'â'
:
case
'ã'
:
case
'ä'
:
case
'å'
:
output
.
append
(
"a"
)
;
break
;
case
'æ'
:
output
.
append
(
"ae"
)
;
break
;
case
'ç'
:
output
.
append
(
"c"
)
;
break
;
case
'è'
:
case
'é'
:
case
'ê'
:
case
'ë'
:
output
.
append
(
"e"
)
;
break
;
case
'ì'
:
case
'í'
:
case
'î'
:
case
'ï'
:
output
.
append
(
"i"
)
;
break
;
case
'ð'
:
output
.
append
(
"d"
)
;
break
;
case
'ñ'
:
output
.
append
(
"n"
)
;
break
;
case
'ò'
:
case
'ó'
:
case
'ô'
:
case
'õ'
:
case
'ö'
:
case
'ø'
:
output
.
append
(
"o"
)
;
break
;
case
'œ'
:
output
.
append
(
"oe"
)
;
break
;
case
'ß'
:
output
.
append
(
"ss"
)
;
break
;
case
'þ'
:
output
.
append
(
"th"
)
;
break
;
case
'ù'
:
case
'ú'
:
case
'û'
:
case
'ü'
:
output
.
append
(
"u"
)
;
break
;
case
'ý'
:
case
'ÿ'
:
output
.
append
(
"y"
)
;
break
;
default
:
output
.
append
(
input
.
charAt
(
i
)
)
;
break
;
}
}
return
output
.
toString
(
)
;
}
}
