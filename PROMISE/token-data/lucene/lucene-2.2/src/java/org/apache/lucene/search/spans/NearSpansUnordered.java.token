package
org
.
apache
.
lucene
.
search
.
spans
;
import
java
.
io
.
IOException
;
import
java
.
util
.
List
;
import
java
.
util
.
ArrayList
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
org
.
apache
.
lucene
.
util
.
PriorityQueue
;
class
NearSpansUnordered
implements
Spans
{
private
SpanNearQuery
query
;
private
List
ordered
=
new
ArrayList
(
)
;
private
int
slop
;
private
SpansCell
first
;
private
SpansCell
last
;
private
int
totalLength
;
private
CellQueue
queue
;
private
SpansCell
max
;
private
boolean
more
=
true
;
private
boolean
firstTime
=
true
;
private
class
CellQueue
extends
PriorityQueue
{
public
CellQueue
(
int
size
)
{
initialize
(
size
)
;
}
protected
final
boolean
lessThan
(
Object
o1
,
Object
o2
)
{
SpansCell
spans1
=
(
SpansCell
)
o1
;
SpansCell
spans2
=
(
SpansCell
)
o2
;
if
(
spans1
.
doc
(
)
==
spans2
.
doc
(
)
)
{
return
NearSpansOrdered
.
docSpansOrdered
(
spans1
,
spans2
)
;
}
else
{
return
spans1
.
doc
(
)
<
spans2
.
doc
(
)
;
}
}
}
private
class
SpansCell
implements
Spans
{
private
Spans
spans
;
private
SpansCell
next
;
private
int
length
=
-
1
;
private
int
index
;
public
SpansCell
(
Spans
spans
,
int
index
)
{
this
.
spans
=
spans
;
this
.
index
=
index
;
}
public
boolean
next
(
)
throws
IOException
{
return
adjust
(
spans
.
next
(
)
)
;
}
public
boolean
skipTo
(
int
target
)
throws
IOException
{
return
adjust
(
spans
.
skipTo
(
target
)
)
;
}
private
boolean
adjust
(
boolean
condition
)
{
if
(
length
!=
-
1
)
{
totalLength
-=
length
;
}
if
(
condition
)
{
length
=
end
(
)
-
start
(
)
;
totalLength
+=
length
;
if
(
max
==
null
||
doc
(
)
>
max
.
doc
(
)
||
(
doc
(
)
==
max
.
doc
(
)
)
&&
(
end
(
)
>
max
.
end
(
)
)
)
{
max
=
this
;
}
}
more
=
condition
;
return
condition
;
}
public
int
doc
(
)
{
return
spans
.
doc
(
)
;
}
public
int
start
(
)
{
return
spans
.
start
(
)
;
}
public
int
end
(
)
{
return
spans
.
end
(
)
;
}
public
String
toString
(
)
{
return
spans
.
toString
(
)
+
"#"
+
index
;
}
}
public
NearSpansUnordered
(
SpanNearQuery
query
,
IndexReader
reader
)
throws
IOException
{
this
.
query
=
query
;
this
.
slop
=
query
.
getSlop
(
)
;
SpanQuery
[
]
clauses
=
query
.
getClauses
(
)
;
queue
=
new
CellQueue
(
clauses
.
length
)
;
for
(
int
i
=
0
;
i
<
clauses
.
length
;
i
++
)
{
SpansCell
cell
=
new
SpansCell
(
clauses
[
i
]
.
getSpans
(
reader
)
,
i
)
;
ordered
.
add
(
cell
)
;
}
}
public
boolean
next
(
)
throws
IOException
{
if
(
firstTime
)
{
initList
(
true
)
;
listToQueue
(
)
;
firstTime
=
false
;
}
else
if
(
more
)
{
if
(
min
(
)
.
next
(
)
)
{
queue
.
adjustTop
(
)
;
}
else
{
more
=
false
;
}
}
while
(
more
)
{
boolean
queueStale
=
false
;
if
(
min
(
)
.
doc
(
)
!=
max
.
doc
(
)
)
{
queueToList
(
)
;
queueStale
=
true
;
}
while
(
more
&&
first
.
doc
(
)
<
last
.
doc
(
)
)
{
more
=
first
.
skipTo
(
last
.
doc
(
)
)
;
firstToLast
(
)
;
queueStale
=
true
;
}
if
(
!
more
)
return
false
;
if
(
queueStale
)
{
listToQueue
(
)
;
queueStale
=
false
;
}
if
(
atMatch
(
)
)
{
return
true
;
}
more
=
min
(
)
.
next
(
)
;
if
(
more
)
{
queue
.
adjustTop
(
)
;
}
}
return
false
;
}
public
boolean
skipTo
(
int
target
)
throws
IOException
{
if
(
firstTime
)
{
initList
(
false
)
;
for
(
SpansCell
cell
=
first
;
more
&&
cell
!=
null
;
cell
=
cell
.
next
)
{
more
=
cell
.
skipTo
(
target
)
;
}
if
(
more
)
{
listToQueue
(
)
;
}
firstTime
=
false
;
}
else
{
while
(
more
&&
min
(
)
.
doc
(
)
<
target
)
{
if
(
min
(
)
.
skipTo
(
target
)
)
{
queue
.
adjustTop
(
)
;
}
else
{
more
=
false
;
}
}
}
return
more
&&
(
atMatch
(
)
||
next
(
)
)
;
}
private
SpansCell
min
(
)
{
return
(
SpansCell
)
queue
.
top
(
)
;
}
public
int
doc
(
)
{
return
min
(
)
.
doc
(
)
;
}
public
int
start
(
)
{
return
min
(
)
.
start
(
)
;
}
public
int
end
(
)
{
return
max
.
end
(
)
;
}
public
String
toString
(
)
{
return
getClass
(
)
.
getName
(
)
+
"("
+
query
.
toString
(
)
+
")@"
+
(
firstTime
?
"START"
:
(
more
?
(
doc
(
)
+
":"
+
start
(
)
+
"-"
+
end
(
)
)
:
"END"
)
)
;
}
private
void
initList
(
boolean
next
)
throws
IOException
{
for
(
int
i
=
0
;
more
&&
i
<
ordered
.
size
(
)
;
i
++
)
{
SpansCell
cell
=
(
SpansCell
)
ordered
.
get
(
i
)
;
if
(
next
)
more
=
cell
.
next
(
)
;
if
(
more
)
{
addToList
(
cell
)
;
}
}
}
private
void
addToList
(
SpansCell
cell
)
{
if
(
last
!=
null
)
{
last
.
next
=
cell
;
}
else
first
=
cell
;
last
=
cell
;
cell
.
next
=
null
;
}
private
void
firstToLast
(
)
{
last
.
next
=
first
;
last
=
first
;
first
=
first
.
next
;
last
.
next
=
null
;
}
private
void
queueToList
(
)
{
last
=
first
=
null
;
while
(
queue
.
top
(
)
!=
null
)
{
addToList
(
(
SpansCell
)
queue
.
pop
(
)
)
;
}
}
private
void
listToQueue
(
)
{
queue
.
clear
(
)
;
for
(
SpansCell
cell
=
first
;
cell
!=
null
;
cell
=
cell
.
next
)
{
queue
.
put
(
cell
)
;
}
}
private
boolean
atMatch
(
)
{
return
(
min
(
)
.
doc
(
)
==
max
.
doc
(
)
)
&&
(
(
max
.
end
(
)
-
min
(
)
.
start
(
)
-
totalLength
)
<=
slop
)
;
}
}
