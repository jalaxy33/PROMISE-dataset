package
org
.
apache
.
lucene
.
index
;
import
java
.
io
.
IOException
;
import
org
.
apache
.
lucene
.
store
.
IndexOutput
;
import
org
.
apache
.
lucene
.
store
.
Directory
;
import
org
.
apache
.
lucene
.
util
.
StringHelper
;
final
class
TermInfosWriter
{
public
static
final
int
FORMAT
=
-
3
;
private
FieldInfos
fieldInfos
;
private
IndexOutput
output
;
private
Term
lastTerm
=
new
Term
(
""
,
""
)
;
private
TermInfo
lastTi
=
new
TermInfo
(
)
;
private
long
size
=
0
;
int
indexInterval
=
128
;
int
skipInterval
=
16
;
int
maxSkipLevels
=
10
;
private
long
lastIndexPointer
=
0
;
private
boolean
isIndex
=
false
;
private
TermInfosWriter
other
=
null
;
TermInfosWriter
(
Directory
directory
,
String
segment
,
FieldInfos
fis
,
int
interval
)
throws
IOException
{
initialize
(
directory
,
segment
,
fis
,
interval
,
false
)
;
other
=
new
TermInfosWriter
(
directory
,
segment
,
fis
,
interval
,
true
)
;
other
.
other
=
this
;
}
private
TermInfosWriter
(
Directory
directory
,
String
segment
,
FieldInfos
fis
,
int
interval
,
boolean
isIndex
)
throws
IOException
{
initialize
(
directory
,
segment
,
fis
,
interval
,
isIndex
)
;
}
private
void
initialize
(
Directory
directory
,
String
segment
,
FieldInfos
fis
,
int
interval
,
boolean
isi
)
throws
IOException
{
indexInterval
=
interval
;
fieldInfos
=
fis
;
isIndex
=
isi
;
output
=
directory
.
createOutput
(
segment
+
(
isIndex
?
".tii"
:
".tis"
)
)
;
output
.
writeInt
(
FORMAT
)
;
output
.
writeLong
(
0
)
;
output
.
writeInt
(
indexInterval
)
;
output
.
writeInt
(
skipInterval
)
;
output
.
writeInt
(
maxSkipLevels
)
;
}
final
void
add
(
Term
term
,
TermInfo
ti
)
throws
CorruptIndexException
,
IOException
{
if
(
!
isIndex
&&
term
.
compareTo
(
lastTerm
)
<=
0
)
throw
new
CorruptIndexException
(
"term out of order (\""
+
term
+
"\".compareTo(\""
+
lastTerm
+
"\") <= 0)"
)
;
if
(
ti
.
freqPointer
<
lastTi
.
freqPointer
)
throw
new
CorruptIndexException
(
"freqPointer out of order ("
+
ti
.
freqPointer
+
" < "
+
lastTi
.
freqPointer
+
")"
)
;
if
(
ti
.
proxPointer
<
lastTi
.
proxPointer
)
throw
new
CorruptIndexException
(
"proxPointer out of order ("
+
ti
.
proxPointer
+
" < "
+
lastTi
.
proxPointer
+
")"
)
;
if
(
!
isIndex
&&
size
%
indexInterval
==
0
)
other
.
add
(
lastTerm
,
lastTi
)
;
writeTerm
(
term
)
;
output
.
writeVInt
(
ti
.
docFreq
)
;
output
.
writeVLong
(
ti
.
freqPointer
-
lastTi
.
freqPointer
)
;
output
.
writeVLong
(
ti
.
proxPointer
-
lastTi
.
proxPointer
)
;
if
(
ti
.
docFreq
>=
skipInterval
)
{
output
.
writeVInt
(
ti
.
skipOffset
)
;
}
if
(
isIndex
)
{
output
.
writeVLong
(
other
.
output
.
getFilePointer
(
)
-
lastIndexPointer
)
;
lastIndexPointer
=
other
.
output
.
getFilePointer
(
)
;
}
lastTi
.
set
(
ti
)
;
size
++
;
}
private
final
void
writeTerm
(
Term
term
)
throws
IOException
{
int
start
=
StringHelper
.
stringDifference
(
lastTerm
.
text
,
term
.
text
)
;
int
length
=
term
.
text
.
length
(
)
-
start
;
output
.
writeVInt
(
start
)
;
output
.
writeVInt
(
length
)
;
output
.
writeChars
(
term
.
text
,
start
,
length
)
;
output
.
writeVInt
(
fieldInfos
.
fieldNumber
(
term
.
field
)
)
;
lastTerm
=
term
;
}
final
void
close
(
)
throws
IOException
{
output
.
seek
(
4
)
;
output
.
writeLong
(
size
)
;
output
.
close
(
)
;
if
(
!
isIndex
)
other
.
close
(
)
;
}
}
