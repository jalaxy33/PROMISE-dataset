package
org
.
apache
.
lucene
.
search
.
function
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Set
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
org
.
apache
.
lucene
.
search
.
ComplexExplanation
;
import
org
.
apache
.
lucene
.
search
.
Explanation
;
import
org
.
apache
.
lucene
.
search
.
Query
;
import
org
.
apache
.
lucene
.
search
.
Scorer
;
import
org
.
apache
.
lucene
.
search
.
Searcher
;
import
org
.
apache
.
lucene
.
search
.
Similarity
;
import
org
.
apache
.
lucene
.
search
.
Weight
;
import
org
.
apache
.
lucene
.
util
.
ToStringUtils
;
public
class
CustomScoreQuery
extends
Query
{
private
Query
subQuery
;
private
ValueSourceQuery
valSrcQuery
;
private
boolean
strict
=
false
;
public
CustomScoreQuery
(
Query
subQuery
)
{
this
(
subQuery
,
null
)
;
}
public
CustomScoreQuery
(
Query
subQuery
,
ValueSourceQuery
valSrcQuery
)
{
super
(
)
;
this
.
subQuery
=
subQuery
;
this
.
valSrcQuery
=
valSrcQuery
;
if
(
subQuery
==
null
)
throw
new
IllegalArgumentException
(
"<subqyery> must not be null!"
)
;
}
public
Query
rewrite
(
IndexReader
reader
)
throws
IOException
{
subQuery
=
subQuery
.
rewrite
(
reader
)
;
if
(
valSrcQuery
!=
null
)
{
valSrcQuery
=
(
ValueSourceQuery
)
valSrcQuery
.
rewrite
(
reader
)
;
}
return
this
;
}
public
void
extractTerms
(
Set
terms
)
{
subQuery
.
extractTerms
(
terms
)
;
if
(
valSrcQuery
!=
null
)
{
valSrcQuery
.
extractTerms
(
terms
)
;
}
}
public
Object
clone
(
)
{
CustomScoreQuery
clone
=
(
CustomScoreQuery
)
super
.
clone
(
)
;
clone
.
subQuery
=
(
Query
)
subQuery
.
clone
(
)
;
if
(
valSrcQuery
!=
null
)
{
clone
.
valSrcQuery
=
(
ValueSourceQuery
)
valSrcQuery
.
clone
(
)
;
}
return
clone
;
}
public
String
toString
(
String
field
)
{
StringBuffer
sb
=
new
StringBuffer
(
name
(
)
)
.
append
(
"("
)
;
sb
.
append
(
subQuery
.
toString
(
field
)
)
;
if
(
valSrcQuery
!=
null
)
{
sb
.
append
(
", "
)
.
append
(
valSrcQuery
.
toString
(
field
)
)
;
}
sb
.
append
(
")"
)
;
sb
.
append
(
strict
?
" STRICT"
:
""
)
;
return
sb
.
toString
(
)
+
ToStringUtils
.
boost
(
getBoost
(
)
)
;
}
public
boolean
equals
(
Object
o
)
{
if
(
getClass
(
)
!=
o
.
getClass
(
)
)
{
return
false
;
}
CustomScoreQuery
other
=
(
CustomScoreQuery
)
o
;
return
this
.
getBoost
(
)
==
other
.
getBoost
(
)
&&
this
.
subQuery
.
equals
(
other
.
subQuery
)
&&
(
this
.
valSrcQuery
==
null
?
other
.
valSrcQuery
==
null
:
this
.
valSrcQuery
.
equals
(
other
.
valSrcQuery
)
)
;
}
public
int
hashCode
(
)
{
int
valSrcHash
=
valSrcQuery
==
null
?
0
:
valSrcQuery
.
hashCode
(
)
;
return
(
getClass
(
)
.
hashCode
(
)
+
subQuery
.
hashCode
(
)
+
valSrcHash
)
^
Float
.
floatToIntBits
(
getBoost
(
)
)
;
}
public
float
customScore
(
int
doc
,
float
subQueryScore
,
float
valSrcScore
)
{
return
valSrcScore
*
subQueryScore
;
}
public
Explanation
customExplain
(
int
doc
,
Explanation
subQueryExpl
,
Explanation
valSrcExpl
)
{
float
valSrcScore
=
valSrcExpl
==
null
?
1
:
valSrcExpl
.
getValue
(
)
;
Explanation
exp
=
new
Explanation
(
valSrcScore
*
subQueryExpl
.
getValue
(
)
,
"custom score: product of:"
)
;
exp
.
addDetail
(
subQueryExpl
)
;
if
(
valSrcExpl
!=
null
)
{
exp
.
addDetail
(
valSrcExpl
)
;
}
return
exp
;
}
private
class
CustomWeight
implements
Weight
{
Searcher
searcher
;
Weight
subQueryWeight
;
Weight
valSrcWeight
;
boolean
qStrict
;
public
CustomWeight
(
Searcher
searcher
)
throws
IOException
{
this
.
searcher
=
searcher
;
this
.
subQueryWeight
=
subQuery
.
weight
(
searcher
)
;
if
(
valSrcQuery
!=
null
)
{
this
.
valSrcWeight
=
valSrcQuery
.
createWeight
(
searcher
)
;
}
this
.
qStrict
=
strict
;
}
public
Query
getQuery
(
)
{
return
CustomScoreQuery
.
this
;
}
public
float
getValue
(
)
{
return
getBoost
(
)
;
}
public
float
sumOfSquaredWeights
(
)
throws
IOException
{
float
sum
=
subQueryWeight
.
sumOfSquaredWeights
(
)
;
if
(
valSrcWeight
!=
null
)
{
if
(
qStrict
)
{
valSrcWeight
.
sumOfSquaredWeights
(
)
;
}
else
{
sum
+=
valSrcWeight
.
sumOfSquaredWeights
(
)
;
}
}
sum
*=
getBoost
(
)
*
getBoost
(
)
;
return
sum
;
}
public
void
normalize
(
float
norm
)
{
norm
*=
getBoost
(
)
;
subQueryWeight
.
normalize
(
norm
)
;
if
(
valSrcWeight
!=
null
)
{
if
(
qStrict
)
{
valSrcWeight
.
normalize
(
1
)
;
}
else
{
valSrcWeight
.
normalize
(
norm
)
;
}
}
}
public
Scorer
scorer
(
IndexReader
reader
)
throws
IOException
{
Scorer
subQueryScorer
=
subQueryWeight
.
scorer
(
reader
)
;
Scorer
valSrcScorer
=
(
valSrcWeight
==
null
?
null
:
valSrcWeight
.
scorer
(
reader
)
)
;
return
new
CustomScorer
(
getSimilarity
(
searcher
)
,
reader
,
this
,
subQueryScorer
,
valSrcScorer
)
;
}
public
Explanation
explain
(
IndexReader
reader
,
int
doc
)
throws
IOException
{
return
scorer
(
reader
)
.
explain
(
doc
)
;
}
}
private
class
CustomScorer
extends
Scorer
{
private
final
CustomWeight
weight
;
private
final
float
qWeight
;
private
Scorer
subQueryScorer
;
private
Scorer
valSrcScorer
;
private
IndexReader
reader
;
private
CustomScorer
(
Similarity
similarity
,
IndexReader
reader
,
CustomWeight
w
,
Scorer
subQueryScorer
,
Scorer
valSrcScorer
)
throws
IOException
{
super
(
similarity
)
;
this
.
weight
=
w
;
this
.
qWeight
=
w
.
getValue
(
)
;
this
.
subQueryScorer
=
subQueryScorer
;
this
.
valSrcScorer
=
valSrcScorer
;
this
.
reader
=
reader
;
}
public
boolean
next
(
)
throws
IOException
{
boolean
hasNext
=
subQueryScorer
.
next
(
)
;
if
(
valSrcScorer
!=
null
&&
hasNext
)
{
valSrcScorer
.
skipTo
(
subQueryScorer
.
doc
(
)
)
;
}
return
hasNext
;
}
public
int
doc
(
)
{
return
subQueryScorer
.
doc
(
)
;
}
public
float
score
(
)
throws
IOException
{
float
valSrcScore
=
(
valSrcScorer
==
null
?
1
:
valSrcScorer
.
score
(
)
)
;
return
qWeight
*
customScore
(
subQueryScorer
.
doc
(
)
,
subQueryScorer
.
score
(
)
,
valSrcScore
)
;
}
public
boolean
skipTo
(
int
target
)
throws
IOException
{
boolean
hasNext
=
subQueryScorer
.
skipTo
(
target
)
;
if
(
valSrcScorer
!=
null
&&
hasNext
)
{
valSrcScorer
.
skipTo
(
subQueryScorer
.
doc
(
)
)
;
}
return
hasNext
;
}
public
Explanation
explain
(
int
doc
)
throws
IOException
{
Explanation
subQueryExpl
=
weight
.
subQueryWeight
.
explain
(
reader
,
doc
)
;
if
(
!
subQueryExpl
.
isMatch
(
)
)
{
return
subQueryExpl
;
}
Explanation
valSrcExpl
=
valSrcScorer
==
null
?
null
:
valSrcScorer
.
explain
(
doc
)
;
Explanation
customExp
=
customExplain
(
doc
,
subQueryExpl
,
valSrcExpl
)
;
float
sc
=
qWeight
*
customExp
.
getValue
(
)
;
Explanation
res
=
new
ComplexExplanation
(
true
,
sc
,
CustomScoreQuery
.
this
.
toString
(
)
+
", product of:"
)
;
res
.
addDetail
(
customExp
)
;
res
.
addDetail
(
new
Explanation
(
qWeight
,
"queryBoost"
)
)
;
return
res
;
}
}
protected
Weight
createWeight
(
Searcher
searcher
)
throws
IOException
{
return
new
CustomWeight
(
searcher
)
;
}
public
boolean
isStrict
(
)
{
return
strict
;
}
public
void
setStrict
(
boolean
strict
)
{
this
.
strict
=
strict
;
}
public
String
name
(
)
{
return
"custom"
;
}
}
