package
org
.
apache
.
lucene
.
analysis
.
standard
;
import
org
.
apache
.
lucene
.
analysis
.
*
;
public
final
class
StandardFilter
extends
TokenFilter
implements
StandardTokenizerConstants
{
public
StandardFilter
(
TokenStream
in
)
{
super
(
in
)
;
}
private
static
final
String
APOSTROPHE_TYPE
=
tokenImage
[
APOSTROPHE
]
;
private
static
final
String
ACRONYM_TYPE
=
tokenImage
[
ACRONYM
]
;
public
final
org
.
apache
.
lucene
.
analysis
.
Token
next
(
)
throws
java
.
io
.
IOException
{
org
.
apache
.
lucene
.
analysis
.
Token
t
=
input
.
next
(
)
;
if
(
t
==
null
)
return
null
;
String
text
=
t
.
termText
(
)
;
String
type
=
t
.
type
(
)
;
if
(
type
==
APOSTROPHE_TYPE
&&
(
text
.
endsWith
(
"'s"
)
||
text
.
endsWith
(
"'S"
)
)
)
{
return
new
org
.
apache
.
lucene
.
analysis
.
Token
(
text
.
substring
(
0
,
text
.
length
(
)
-
2
)
,
t
.
startOffset
(
)
,
t
.
endOffset
(
)
,
type
)
;
}
else
if
(
type
==
ACRONYM_TYPE
)
{
StringBuffer
trimmed
=
new
StringBuffer
(
)
;
for
(
int
i
=
0
;
i
<
text
.
length
(
)
;
i
++
)
{
char
c
=
text
.
charAt
(
i
)
;
if
(
c
!=
'.'
)
trimmed
.
append
(
c
)
;
}
return
new
org
.
apache
.
lucene
.
analysis
.
Token
(
trimmed
.
toString
(
)
,
t
.
startOffset
(
)
,
t
.
endOffset
(
)
,
type
)
;
}
else
{
return
t
;
}
}
}
