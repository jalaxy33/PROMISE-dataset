package
org
.
apache
.
lucene
.
search
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
org
.
apache
.
lucene
.
index
.
Term
;
import
org
.
apache
.
lucene
.
index
.
TermDocs
;
import
org
.
apache
.
lucene
.
index
.
TermEnum
;
import
java
.
io
.
IOException
;
import
java
.
util
.
BitSet
;
public
class
RangeFilter
extends
Filter
{
private
String
fieldName
;
private
String
lowerTerm
;
private
String
upperTerm
;
private
boolean
includeLower
;
private
boolean
includeUpper
;
public
RangeFilter
(
String
fieldName
,
String
lowerTerm
,
String
upperTerm
,
boolean
includeLower
,
boolean
includeUpper
)
{
this
.
fieldName
=
fieldName
;
this
.
lowerTerm
=
lowerTerm
;
this
.
upperTerm
=
upperTerm
;
this
.
includeLower
=
includeLower
;
this
.
includeUpper
=
includeUpper
;
if
(
null
==
lowerTerm
&&
null
==
upperTerm
)
{
throw
new
IllegalArgumentException
(
"At least one value must be non-null"
)
;
}
if
(
includeLower
&&
null
==
lowerTerm
)
{
throw
new
IllegalArgumentException
(
"The lower bound must be non-null to be inclusive"
)
;
}
if
(
includeUpper
&&
null
==
upperTerm
)
{
throw
new
IllegalArgumentException
(
"The upper bound must be non-null to be inclusive"
)
;
}
}
public
static
RangeFilter
Less
(
String
fieldName
,
String
upperTerm
)
{
return
new
RangeFilter
(
fieldName
,
null
,
upperTerm
,
false
,
true
)
;
}
public
static
RangeFilter
More
(
String
fieldName
,
String
lowerTerm
)
{
return
new
RangeFilter
(
fieldName
,
lowerTerm
,
null
,
true
,
false
)
;
}
public
BitSet
bits
(
IndexReader
reader
)
throws
IOException
{
BitSet
bits
=
new
BitSet
(
reader
.
maxDoc
(
)
)
;
TermEnum
enumerator
=
(
null
!=
lowerTerm
?
reader
.
terms
(
new
Term
(
fieldName
,
lowerTerm
)
)
:
reader
.
terms
(
new
Term
(
fieldName
,
""
)
)
)
;
try
{
if
(
enumerator
.
term
(
)
==
null
)
{
return
bits
;
}
boolean
checkLower
=
false
;
if
(
!
includeLower
)
checkLower
=
true
;
TermDocs
termDocs
=
reader
.
termDocs
(
)
;
try
{
do
{
Term
term
=
enumerator
.
term
(
)
;
if
(
term
!=
null
&&
term
.
field
(
)
.
equals
(
fieldName
)
)
{
if
(
!
checkLower
||
null
==
lowerTerm
||
term
.
text
(
)
.
compareTo
(
lowerTerm
)
>
0
)
{
checkLower
=
false
;
if
(
upperTerm
!=
null
)
{
int
compare
=
upperTerm
.
compareTo
(
term
.
text
(
)
)
;
if
(
(
compare
<
0
)
||
(
!
includeUpper
&&
compare
==
0
)
)
{
break
;
}
}
termDocs
.
seek
(
enumerator
.
term
(
)
)
;
while
(
termDocs
.
next
(
)
)
{
bits
.
set
(
termDocs
.
doc
(
)
)
;
}
}
}
else
{
break
;
}
}
while
(
enumerator
.
next
(
)
)
;
}
finally
{
termDocs
.
close
(
)
;
}
}
finally
{
enumerator
.
close
(
)
;
}
return
bits
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
fieldName
)
;
buffer
.
append
(
":"
)
;
buffer
.
append
(
includeLower
?
"["
:
"{"
)
;
if
(
null
!=
lowerTerm
)
{
buffer
.
append
(
lowerTerm
)
;
}
buffer
.
append
(
"-"
)
;
if
(
null
!=
upperTerm
)
{
buffer
.
append
(
upperTerm
)
;
}
buffer
.
append
(
includeUpper
?
"]"
:
"}"
)
;
return
buffer
.
toString
(
)
;
}
public
boolean
equals
(
Object
o
)
{
if
(
this
==
o
)
return
true
;
if
(
!
(
o
instanceof
RangeFilter
)
)
return
false
;
RangeFilter
other
=
(
RangeFilter
)
o
;
if
(
!
this
.
fieldName
.
equals
(
other
.
fieldName
)
||
this
.
includeLower
!=
other
.
includeLower
||
this
.
includeUpper
!=
other
.
includeUpper
)
{
return
false
;
}
if
(
this
.
lowerTerm
!=
null
?
!
this
.
lowerTerm
.
equals
(
other
.
lowerTerm
)
:
other
.
lowerTerm
!=
null
)
return
false
;
if
(
this
.
upperTerm
!=
null
?
!
this
.
upperTerm
.
equals
(
other
.
upperTerm
)
:
other
.
upperTerm
!=
null
)
return
false
;
return
true
;
}
public
int
hashCode
(
)
{
int
h
=
fieldName
.
hashCode
(
)
;
h
^=
lowerTerm
!=
null
?
lowerTerm
.
hashCode
(
)
:
0xB6ECE882
;
h
=
(
h
<<
1
)
|
(
h
>
>
>
31
)
;
h
^=
(
upperTerm
!=
null
?
(
upperTerm
.
hashCode
(
)
)
:
0x91BEC2C2
)
;
h
^=
(
includeLower
?
0xD484B933
:
0
)
^
(
includeUpper
?
0x6AE423AC
:
0
)
;
return
h
;
}
}
