package
org
.
apache
.
lucene
.
search
.
function
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
org
.
apache
.
lucene
.
search
.
FieldCache
;
import
org
.
apache
.
lucene
.
search
.
function
.
DocValues
;
import
java
.
io
.
IOException
;
public
class
ByteFieldSource
extends
FieldCacheSource
{
private
FieldCache
.
ByteParser
parser
;
public
ByteFieldSource
(
String
field
)
{
this
(
field
,
null
)
;
}
public
ByteFieldSource
(
String
field
,
FieldCache
.
ByteParser
parser
)
{
super
(
field
)
;
this
.
parser
=
parser
;
}
public
String
description
(
)
{
return
"byte("
+
super
.
description
(
)
+
')'
;
}
public
DocValues
getCachedFieldValues
(
FieldCache
cache
,
String
field
,
IndexReader
reader
)
throws
IOException
{
final
byte
[
]
arr
=
(
parser
==
null
)
?
cache
.
getBytes
(
reader
,
field
)
:
cache
.
getBytes
(
reader
,
field
,
parser
)
;
return
new
DocValues
(
reader
.
maxDoc
(
)
)
{
public
float
floatVal
(
int
doc
)
{
return
(
float
)
arr
[
doc
]
;
}
public
int
intVal
(
int
doc
)
{
return
arr
[
doc
]
;
}
public
String
toString
(
int
doc
)
{
return
description
(
)
+
'='
+
intVal
(
doc
)
;
}
Object
getInnerArray
(
)
{
return
arr
;
}
}
;
}
public
boolean
cachedFieldSourceEquals
(
FieldCacheSource
o
)
{
if
(
o
.
getClass
(
)
!=
ByteFieldSource
.
class
)
{
return
false
;
}
ByteFieldSource
other
=
(
ByteFieldSource
)
o
;
return
this
.
parser
==
null
?
other
.
parser
==
null
:
this
.
parser
.
getClass
(
)
==
other
.
parser
.
getClass
(
)
;
}
public
int
cachedFieldSourceHashCode
(
)
{
return
parser
==
null
?
Byte
.
class
.
hashCode
(
)
:
parser
.
getClass
(
)
.
hashCode
(
)
;
}
}
