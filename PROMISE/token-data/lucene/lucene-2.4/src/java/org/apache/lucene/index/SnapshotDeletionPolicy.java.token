package
org
.
apache
.
lucene
.
index
;
import
java
.
util
.
Collection
;
import
java
.
util
.
List
;
import
java
.
util
.
ArrayList
;
import
java
.
io
.
IOException
;
import
org
.
apache
.
lucene
.
store
.
Directory
;
public
class
SnapshotDeletionPolicy
implements
IndexDeletionPolicy
{
private
IndexCommit
lastCommit
;
private
IndexDeletionPolicy
primary
;
private
String
snapshot
;
public
SnapshotDeletionPolicy
(
IndexDeletionPolicy
primary
)
{
this
.
primary
=
primary
;
}
public
synchronized
void
onInit
(
List
commits
)
throws
IOException
{
primary
.
onInit
(
wrapCommits
(
commits
)
)
;
lastCommit
=
(
IndexCommit
)
commits
.
get
(
commits
.
size
(
)
-
1
)
;
}
public
synchronized
void
onCommit
(
List
commits
)
throws
IOException
{
primary
.
onCommit
(
wrapCommits
(
commits
)
)
;
lastCommit
=
(
IndexCommit
)
commits
.
get
(
commits
.
size
(
)
-
1
)
;
}
public
synchronized
IndexCommitPoint
snapshot
(
)
{
if
(
snapshot
==
null
)
snapshot
=
lastCommit
.
getSegmentsFileName
(
)
;
else
throw
new
IllegalStateException
(
"snapshot is already set; please call release() first"
)
;
return
lastCommit
;
}
public
synchronized
void
release
(
)
{
if
(
snapshot
!=
null
)
snapshot
=
null
;
else
throw
new
IllegalStateException
(
"snapshot was not set; please call snapshot() first"
)
;
}
private
class
MyCommitPoint
extends
IndexCommit
{
IndexCommit
cp
;
MyCommitPoint
(
IndexCommit
cp
)
{
this
.
cp
=
cp
;
}
public
String
getSegmentsFileName
(
)
{
return
cp
.
getSegmentsFileName
(
)
;
}
public
Collection
getFileNames
(
)
throws
IOException
{
return
cp
.
getFileNames
(
)
;
}
public
Directory
getDirectory
(
)
{
return
cp
.
getDirectory
(
)
;
}
public
void
delete
(
)
{
synchronized
(
SnapshotDeletionPolicy
.
this
)
{
if
(
snapshot
==
null
||
!
snapshot
.
equals
(
getSegmentsFileName
(
)
)
)
cp
.
delete
(
)
;
}
}
public
boolean
isDeleted
(
)
{
return
cp
.
isDeleted
(
)
;
}
public
long
getVersion
(
)
{
return
cp
.
getVersion
(
)
;
}
public
long
getGeneration
(
)
{
return
cp
.
getGeneration
(
)
;
}
}
private
List
wrapCommits
(
List
commits
)
{
final
int
count
=
commits
.
size
(
)
;
List
myCommits
=
new
ArrayList
(
count
)
;
for
(
int
i
=
0
;
i
<
count
;
i
++
)
myCommits
.
add
(
new
MyCommitPoint
(
(
IndexCommit
)
commits
.
get
(
i
)
)
)
;
return
myCommits
;
}
}
