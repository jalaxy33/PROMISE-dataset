package
org
.
apache
.
lucene
.
search
;
import
org
.
apache
.
lucene
.
util
.
PriorityQueue
;
public
class
TopDocCollector
extends
HitCollector
{
private
ScoreDoc
reusableSD
;
protected
int
totalHits
;
protected
PriorityQueue
hq
;
public
TopDocCollector
(
int
numHits
)
{
this
(
new
HitQueue
(
numHits
)
)
;
}
TopDocCollector
(
int
numHits
,
PriorityQueue
hq
)
{
this
.
hq
=
hq
;
}
protected
TopDocCollector
(
PriorityQueue
hq
)
{
this
.
hq
=
hq
;
}
public
void
collect
(
int
doc
,
float
score
)
{
if
(
score
>
0.0f
)
{
totalHits
++
;
if
(
reusableSD
==
null
)
{
reusableSD
=
new
ScoreDoc
(
doc
,
score
)
;
}
else
if
(
score
>=
reusableSD
.
score
)
{
reusableSD
.
doc
=
doc
;
reusableSD
.
score
=
score
;
}
else
{
return
;
}
reusableSD
=
(
ScoreDoc
)
hq
.
insertWithOverflow
(
reusableSD
)
;
}
}
public
int
getTotalHits
(
)
{
return
totalHits
;
}
public
TopDocs
topDocs
(
)
{
ScoreDoc
[
]
scoreDocs
=
new
ScoreDoc
[
hq
.
size
(
)
]
;
for
(
int
i
=
hq
.
size
(
)
-
1
;
i
>=
0
;
i
--
)
scoreDocs
[
i
]
=
(
ScoreDoc
)
hq
.
pop
(
)
;
float
maxScore
=
(
totalHits
==
0
)
?
Float
.
NEGATIVE_INFINITY
:
scoreDocs
[
0
]
.
score
;
return
new
TopDocs
(
totalHits
,
scoreDocs
,
maxScore
)
;
}
}
