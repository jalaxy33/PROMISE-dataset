package
org
.
apache
.
lucene
.
analysis
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Reader
;
import
java
.
util
.
Set
;
public
final
class
StopAnalyzer
extends
Analyzer
{
private
Set
stopWords
;
public
static
final
String
[
]
ENGLISH_STOP_WORDS
=
{
"a"
,
"an"
,
"and"
,
"are"
,
"as"
,
"at"
,
"be"
,
"but"
,
"by"
,
"for"
,
"if"
,
"in"
,
"into"
,
"is"
,
"it"
,
"no"
,
"not"
,
"of"
,
"on"
,
"or"
,
"such"
,
"that"
,
"the"
,
"their"
,
"then"
,
"there"
,
"these"
,
"they"
,
"this"
,
"to"
,
"was"
,
"will"
,
"with"
}
;
public
StopAnalyzer
(
)
{
stopWords
=
StopFilter
.
makeStopSet
(
ENGLISH_STOP_WORDS
)
;
}
public
StopAnalyzer
(
Set
stopWords
)
{
this
.
stopWords
=
stopWords
;
}
public
StopAnalyzer
(
String
[
]
stopWords
)
{
this
.
stopWords
=
StopFilter
.
makeStopSet
(
stopWords
)
;
}
public
StopAnalyzer
(
File
stopwordsFile
)
throws
IOException
{
stopWords
=
WordlistLoader
.
getWordSet
(
stopwordsFile
)
;
}
public
StopAnalyzer
(
Reader
stopwords
)
throws
IOException
{
stopWords
=
WordlistLoader
.
getWordSet
(
stopwords
)
;
}
public
TokenStream
tokenStream
(
String
fieldName
,
Reader
reader
)
{
return
new
StopFilter
(
new
LowerCaseTokenizer
(
reader
)
,
stopWords
)
;
}
private
class
SavedStreams
{
Tokenizer
source
;
TokenStream
result
;
}
;
public
TokenStream
reusableTokenStream
(
String
fieldName
,
Reader
reader
)
throws
IOException
{
SavedStreams
streams
=
(
SavedStreams
)
getPreviousTokenStream
(
)
;
if
(
streams
==
null
)
{
streams
=
new
SavedStreams
(
)
;
streams
.
source
=
new
LowerCaseTokenizer
(
reader
)
;
streams
.
result
=
new
StopFilter
(
streams
.
source
,
stopWords
)
;
setPreviousTokenStream
(
streams
)
;
}
else
streams
.
source
.
reset
(
reader
)
;
return
streams
.
result
;
}
}
