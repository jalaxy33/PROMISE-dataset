package
org
.
apache
.
lucene
.
analysis
;
import
java
.
io
.
Reader
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Map
;
import
java
.
util
.
HashMap
;
public
class
PerFieldAnalyzerWrapper
extends
Analyzer
{
private
Analyzer
defaultAnalyzer
;
private
Map
analyzerMap
=
new
HashMap
(
)
;
public
PerFieldAnalyzerWrapper
(
Analyzer
defaultAnalyzer
)
{
this
.
defaultAnalyzer
=
defaultAnalyzer
;
}
public
void
addAnalyzer
(
String
fieldName
,
Analyzer
analyzer
)
{
analyzerMap
.
put
(
fieldName
,
analyzer
)
;
}
public
TokenStream
tokenStream
(
String
fieldName
,
Reader
reader
)
{
Analyzer
analyzer
=
(
Analyzer
)
analyzerMap
.
get
(
fieldName
)
;
if
(
analyzer
==
null
)
{
analyzer
=
defaultAnalyzer
;
}
return
analyzer
.
tokenStream
(
fieldName
,
reader
)
;
}
public
TokenStream
reusableTokenStream
(
String
fieldName
,
Reader
reader
)
throws
IOException
{
Analyzer
analyzer
=
(
Analyzer
)
analyzerMap
.
get
(
fieldName
)
;
if
(
analyzer
==
null
)
analyzer
=
defaultAnalyzer
;
return
analyzer
.
reusableTokenStream
(
fieldName
,
reader
)
;
}
public
int
getPositionIncrementGap
(
String
fieldName
)
{
Analyzer
analyzer
=
(
Analyzer
)
analyzerMap
.
get
(
fieldName
)
;
if
(
analyzer
==
null
)
analyzer
=
defaultAnalyzer
;
return
analyzer
.
getPositionIncrementGap
(
fieldName
)
;
}
public
String
toString
(
)
{
return
"PerFieldAnalyzerWrapper("
+
analyzerMap
+
", default="
+
defaultAnalyzer
+
")"
;
}
}
