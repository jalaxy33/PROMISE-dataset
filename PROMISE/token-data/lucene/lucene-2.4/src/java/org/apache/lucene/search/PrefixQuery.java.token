package
org
.
apache
.
lucene
.
search
;
import
java
.
io
.
IOException
;
import
org
.
apache
.
lucene
.
index
.
Term
;
import
org
.
apache
.
lucene
.
index
.
TermEnum
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
org
.
apache
.
lucene
.
util
.
ToStringUtils
;
public
class
PrefixQuery
extends
Query
{
private
Term
prefix
;
public
PrefixQuery
(
Term
prefix
)
{
this
.
prefix
=
prefix
;
}
public
Term
getPrefix
(
)
{
return
prefix
;
}
public
Query
rewrite
(
IndexReader
reader
)
throws
IOException
{
BooleanQuery
query
=
new
BooleanQuery
(
true
)
;
TermEnum
enumerator
=
reader
.
terms
(
prefix
)
;
try
{
String
prefixText
=
prefix
.
text
(
)
;
String
prefixField
=
prefix
.
field
(
)
;
do
{
Term
term
=
enumerator
.
term
(
)
;
if
(
term
!=
null
&&
term
.
text
(
)
.
startsWith
(
prefixText
)
&&
term
.
field
(
)
==
prefixField
)
{
TermQuery
tq
=
new
TermQuery
(
term
)
;
tq
.
setBoost
(
getBoost
(
)
)
;
query
.
add
(
tq
,
BooleanClause
.
Occur
.
SHOULD
)
;
}
else
{
break
;
}
}
while
(
enumerator
.
next
(
)
)
;
}
finally
{
enumerator
.
close
(
)
;
}
return
query
;
}
public
String
toString
(
String
field
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
if
(
!
prefix
.
field
(
)
.
equals
(
field
)
)
{
buffer
.
append
(
prefix
.
field
(
)
)
;
buffer
.
append
(
":"
)
;
}
buffer
.
append
(
prefix
.
text
(
)
)
;
buffer
.
append
(
'*'
)
;
buffer
.
append
(
ToStringUtils
.
boost
(
getBoost
(
)
)
)
;
return
buffer
.
toString
(
)
;
}
public
boolean
equals
(
Object
o
)
{
if
(
!
(
o
instanceof
PrefixQuery
)
)
return
false
;
PrefixQuery
other
=
(
PrefixQuery
)
o
;
return
(
this
.
getBoost
(
)
==
other
.
getBoost
(
)
)
&&
this
.
prefix
.
equals
(
other
.
prefix
)
;
}
public
int
hashCode
(
)
{
return
Float
.
floatToIntBits
(
getBoost
(
)
)
^
prefix
.
hashCode
(
)
^
0x6634D93C
;
}
}
