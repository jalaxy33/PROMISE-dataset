package
org
.
apache
.
lucene
.
search
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
org
.
apache
.
lucene
.
search
.
spans
.
SpanQuery
;
import
org
.
apache
.
lucene
.
search
.
spans
.
Spans
;
import
org
.
apache
.
lucene
.
util
.
OpenBitSet
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
SpanQueryFilter
extends
SpanFilter
{
protected
SpanQuery
query
;
protected
SpanQueryFilter
(
)
{
}
public
SpanQueryFilter
(
SpanQuery
query
)
{
this
.
query
=
query
;
}
public
DocIdSet
getDocIdSet
(
IndexReader
reader
)
throws
IOException
{
SpanFilterResult
result
=
bitSpans
(
reader
)
;
return
result
.
getDocIdSet
(
)
;
}
public
SpanFilterResult
bitSpans
(
IndexReader
reader
)
throws
IOException
{
final
OpenBitSet
bits
=
new
OpenBitSet
(
reader
.
maxDoc
(
)
)
;
Spans
spans
=
query
.
getSpans
(
reader
)
;
List
tmp
=
new
ArrayList
(
20
)
;
int
currentDoc
=
-
1
;
SpanFilterResult
.
PositionInfo
currentInfo
=
null
;
while
(
spans
.
next
(
)
)
{
int
doc
=
spans
.
doc
(
)
;
bits
.
set
(
doc
)
;
if
(
currentDoc
!=
doc
)
{
currentInfo
=
new
SpanFilterResult
.
PositionInfo
(
doc
)
;
tmp
.
add
(
currentInfo
)
;
currentDoc
=
doc
;
}
currentInfo
.
addPosition
(
spans
.
start
(
)
,
spans
.
end
(
)
)
;
}
return
new
SpanFilterResult
(
bits
,
tmp
)
;
}
public
SpanQuery
getQuery
(
)
{
return
query
;
}
public
String
toString
(
)
{
return
"QueryWrapperFilter("
+
query
+
")"
;
}
public
boolean
equals
(
Object
o
)
{
return
o
instanceof
SpanQueryFilter
&&
this
.
query
.
equals
(
(
(
SpanQueryFilter
)
o
)
.
query
)
;
}
public
int
hashCode
(
)
{
return
query
.
hashCode
(
)
^
0x923F64B9
;
}
}
