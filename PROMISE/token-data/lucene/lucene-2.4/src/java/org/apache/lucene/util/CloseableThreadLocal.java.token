package
org
.
apache
.
lucene
.
util
;
import
java
.
util
.
Map
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
lang
.
ref
.
WeakReference
;
public
class
CloseableThreadLocal
{
private
ThreadLocal
t
=
new
ThreadLocal
(
)
;
private
Map
hardRefs
=
new
HashMap
(
)
;
protected
Object
initialValue
(
)
{
return
null
;
}
public
Object
get
(
)
{
WeakReference
weakRef
=
(
WeakReference
)
t
.
get
(
)
;
if
(
weakRef
==
null
)
{
Object
iv
=
initialValue
(
)
;
if
(
iv
!=
null
)
{
set
(
iv
)
;
return
iv
;
}
else
return
null
;
}
else
{
Object
v
=
weakRef
.
get
(
)
;
assert
v
!=
null
;
return
v
;
}
}
public
void
set
(
Object
object
)
{
t
.
set
(
new
WeakReference
(
object
)
)
;
synchronized
(
hardRefs
)
{
hardRefs
.
put
(
Thread
.
currentThread
(
)
,
object
)
;
Iterator
it
=
hardRefs
.
keySet
(
)
.
iterator
(
)
;
while
(
it
.
hasNext
(
)
)
{
Thread
t
=
(
Thread
)
it
.
next
(
)
;
if
(
!
t
.
isAlive
(
)
)
it
.
remove
(
)
;
}
}
}
public
void
close
(
)
{
hardRefs
=
null
;
t
=
null
;
}
}
