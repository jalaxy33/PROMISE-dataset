package
org
.
apache
.
lucene
.
analysis
.
standard
;
import
org
.
apache
.
lucene
.
analysis
.
*
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Reader
;
import
java
.
util
.
Set
;
public
class
StandardAnalyzer
extends
Analyzer
{
private
Set
stopSet
;
private
boolean
replaceInvalidAcronym
=
defaultReplaceInvalidAcronym
;
private
static
boolean
defaultReplaceInvalidAcronym
;
static
{
final
String
v
=
System
.
getProperty
(
"org.apache.lucene.analysis.standard.StandardAnalyzer.replaceInvalidAcronym"
)
;
if
(
v
==
null
||
v
.
equals
(
"true"
)
)
defaultReplaceInvalidAcronym
=
true
;
else
defaultReplaceInvalidAcronym
=
false
;
}
public
static
boolean
getDefaultReplaceInvalidAcronym
(
)
{
return
defaultReplaceInvalidAcronym
;
}
public
static
void
setDefaultReplaceInvalidAcronym
(
boolean
replaceInvalidAcronym
)
{
defaultReplaceInvalidAcronym
=
replaceInvalidAcronym
;
}
public
static
final
String
[
]
STOP_WORDS
=
StopAnalyzer
.
ENGLISH_STOP_WORDS
;
public
StandardAnalyzer
(
)
{
this
(
STOP_WORDS
)
;
}
public
StandardAnalyzer
(
Set
stopWords
)
{
stopSet
=
stopWords
;
}
public
StandardAnalyzer
(
String
[
]
stopWords
)
{
stopSet
=
StopFilter
.
makeStopSet
(
stopWords
)
;
}
public
StandardAnalyzer
(
File
stopwords
)
throws
IOException
{
stopSet
=
WordlistLoader
.
getWordSet
(
stopwords
)
;
}
public
StandardAnalyzer
(
Reader
stopwords
)
throws
IOException
{
stopSet
=
WordlistLoader
.
getWordSet
(
stopwords
)
;
}
public
StandardAnalyzer
(
boolean
replaceInvalidAcronym
)
{
this
(
STOP_WORDS
)
;
this
.
replaceInvalidAcronym
=
replaceInvalidAcronym
;
}
public
StandardAnalyzer
(
Reader
stopwords
,
boolean
replaceInvalidAcronym
)
throws
IOException
{
this
(
stopwords
)
;
this
.
replaceInvalidAcronym
=
replaceInvalidAcronym
;
}
public
StandardAnalyzer
(
File
stopwords
,
boolean
replaceInvalidAcronym
)
throws
IOException
{
this
(
stopwords
)
;
this
.
replaceInvalidAcronym
=
replaceInvalidAcronym
;
}
public
StandardAnalyzer
(
String
[
]
stopwords
,
boolean
replaceInvalidAcronym
)
throws
IOException
{
this
(
stopwords
)
;
this
.
replaceInvalidAcronym
=
replaceInvalidAcronym
;
}
public
StandardAnalyzer
(
Set
stopwords
,
boolean
replaceInvalidAcronym
)
throws
IOException
{
this
(
stopwords
)
;
this
.
replaceInvalidAcronym
=
replaceInvalidAcronym
;
}
public
TokenStream
tokenStream
(
String
fieldName
,
Reader
reader
)
{
StandardTokenizer
tokenStream
=
new
StandardTokenizer
(
reader
,
replaceInvalidAcronym
)
;
tokenStream
.
setMaxTokenLength
(
maxTokenLength
)
;
TokenStream
result
=
new
StandardFilter
(
tokenStream
)
;
result
=
new
LowerCaseFilter
(
result
)
;
result
=
new
StopFilter
(
result
,
stopSet
)
;
return
result
;
}
private
static
final
class
SavedStreams
{
StandardTokenizer
tokenStream
;
TokenStream
filteredTokenStream
;
}
public
static
final
int
DEFAULT_MAX_TOKEN_LENGTH
=
255
;
private
int
maxTokenLength
=
DEFAULT_MAX_TOKEN_LENGTH
;
public
void
setMaxTokenLength
(
int
length
)
{
maxTokenLength
=
length
;
}
public
int
getMaxTokenLength
(
)
{
return
maxTokenLength
;
}
public
TokenStream
reusableTokenStream
(
String
fieldName
,
Reader
reader
)
throws
IOException
{
SavedStreams
streams
=
(
SavedStreams
)
getPreviousTokenStream
(
)
;
if
(
streams
==
null
)
{
streams
=
new
SavedStreams
(
)
;
setPreviousTokenStream
(
streams
)
;
streams
.
tokenStream
=
new
StandardTokenizer
(
reader
)
;
streams
.
filteredTokenStream
=
new
StandardFilter
(
streams
.
tokenStream
)
;
streams
.
filteredTokenStream
=
new
LowerCaseFilter
(
streams
.
filteredTokenStream
)
;
streams
.
filteredTokenStream
=
new
StopFilter
(
streams
.
filteredTokenStream
,
stopSet
)
;
}
else
{
streams
.
tokenStream
.
reset
(
reader
)
;
}
streams
.
tokenStream
.
setMaxTokenLength
(
maxTokenLength
)
;
streams
.
tokenStream
.
setReplaceInvalidAcronym
(
replaceInvalidAcronym
)
;
return
streams
.
filteredTokenStream
;
}
public
boolean
isReplaceInvalidAcronym
(
)
{
return
replaceInvalidAcronym
;
}
public
void
setReplaceInvalidAcronym
(
boolean
replaceInvalidAcronym
)
{
this
.
replaceInvalidAcronym
=
replaceInvalidAcronym
;
}
}
