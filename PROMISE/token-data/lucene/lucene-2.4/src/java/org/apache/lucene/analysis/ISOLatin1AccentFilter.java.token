package
org
.
apache
.
lucene
.
analysis
;
public
class
ISOLatin1AccentFilter
extends
TokenFilter
{
public
ISOLatin1AccentFilter
(
TokenStream
input
)
{
super
(
input
)
;
}
private
char
[
]
output
=
new
char
[
256
]
;
private
int
outputPos
;
public
final
Token
next
(
final
Token
reusableToken
)
throws
java
.
io
.
IOException
{
assert
reusableToken
!=
null
;
Token
nextToken
=
input
.
next
(
reusableToken
)
;
if
(
nextToken
!=
null
)
{
final
char
[
]
buffer
=
nextToken
.
termBuffer
(
)
;
final
int
length
=
nextToken
.
termLength
(
)
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
{
final
char
c
=
buffer
[
i
]
;
if
(
c
>=
'À'
&&
c
<=
'ﬆ'
)
{
removeAccents
(
buffer
,
length
)
;
nextToken
.
setTermBuffer
(
output
,
0
,
outputPos
)
;
break
;
}
}
return
nextToken
;
}
else
return
null
;
}
public
final
void
removeAccents
(
char
[
]
input
,
int
length
)
{
final
int
maxSizeNeeded
=
2
*
length
;
int
size
=
output
.
length
;
while
(
size
<
maxSizeNeeded
)
size
*=
2
;
if
(
size
!=
output
.
length
)
output
=
new
char
[
size
]
;
outputPos
=
0
;
int
pos
=
0
;
for
(
int
i
=
0
;
i
<
length
;
i
++
,
pos
++
)
{
final
char
c
=
input
[
pos
]
;
if
(
c
<
'À'
||
c
>
'ﬆ'
)
output
[
outputPos
++
]
=
c
;
else
{
switch
(
c
)
{
case
'À'
:
case
'Á'
:
case
'Â'
:
case
'Ã'
:
case
'Ä'
:
case
'Å'
:
output
[
outputPos
++
]
=
'A'
;
break
;
case
'Æ'
:
output
[
outputPos
++
]
=
'A'
;
output
[
outputPos
++
]
=
'E'
;
break
;
case
'Ç'
:
output
[
outputPos
++
]
=
'C'
;
break
;
case
'È'
:
case
'É'
:
case
'Ê'
:
case
'Ë'
:
output
[
outputPos
++
]
=
'E'
;
break
;
case
'Ì'
:
case
'Í'
:
case
'Î'
:
case
'Ï'
:
output
[
outputPos
++
]
=
'I'
;
break
;
case
'Ĳ'
:
output
[
outputPos
++
]
=
'I'
;
output
[
outputPos
++
]
=
'J'
;
break
;
case
'Ð'
:
output
[
outputPos
++
]
=
'D'
;
break
;
case
'Ñ'
:
output
[
outputPos
++
]
=
'N'
;
break
;
case
'Ò'
:
case
'Ó'
:
case
'Ô'
:
case
'Õ'
:
case
'Ö'
:
case
'Ø'
:
output
[
outputPos
++
]
=
'O'
;
break
;
case
'Œ'
:
output
[
outputPos
++
]
=
'O'
;
output
[
outputPos
++
]
=
'E'
;
break
;
case
'Þ'
:
output
[
outputPos
++
]
=
'T'
;
output
[
outputPos
++
]
=
'H'
;
break
;
case
'Ù'
:
case
'Ú'
:
case
'Û'
:
case
'Ü'
:
output
[
outputPos
++
]
=
'U'
;
break
;
case
'Ý'
:
case
'Ÿ'
:
output
[
outputPos
++
]
=
'Y'
;
break
;
case
'à'
:
case
'á'
:
case
'â'
:
case
'ã'
:
case
'ä'
:
case
'å'
:
output
[
outputPos
++
]
=
'a'
;
break
;
case
'æ'
:
output
[
outputPos
++
]
=
'a'
;
output
[
outputPos
++
]
=
'e'
;
break
;
case
'ç'
:
output
[
outputPos
++
]
=
'c'
;
break
;
case
'è'
:
case
'é'
:
case
'ê'
:
case
'ë'
:
output
[
outputPos
++
]
=
'e'
;
break
;
case
'ì'
:
case
'í'
:
case
'î'
:
case
'ï'
:
output
[
outputPos
++
]
=
'i'
;
break
;
case
'ĳ'
:
output
[
outputPos
++
]
=
'i'
;
output
[
outputPos
++
]
=
'j'
;
break
;
case
'ð'
:
output
[
outputPos
++
]
=
'd'
;
break
;
case
'ñ'
:
output
[
outputPos
++
]
=
'n'
;
break
;
case
'ò'
:
case
'ó'
:
case
'ô'
:
case
'õ'
:
case
'ö'
:
case
'ø'
:
output
[
outputPos
++
]
=
'o'
;
break
;
case
'œ'
:
output
[
outputPos
++
]
=
'o'
;
output
[
outputPos
++
]
=
'e'
;
break
;
case
'ß'
:
output
[
outputPos
++
]
=
's'
;
output
[
outputPos
++
]
=
's'
;
break
;
case
'þ'
:
output
[
outputPos
++
]
=
't'
;
output
[
outputPos
++
]
=
'h'
;
break
;
case
'ù'
:
case
'ú'
:
case
'û'
:
case
'ü'
:
output
[
outputPos
++
]
=
'u'
;
break
;
case
'ý'
:
case
'ÿ'
:
output
[
outputPos
++
]
=
'y'
;
break
;
case
'ﬀ'
:
output
[
outputPos
++
]
=
'f'
;
output
[
outputPos
++
]
=
'f'
;
break
;
case
'ﬁ'
:
output
[
outputPos
++
]
=
'f'
;
output
[
outputPos
++
]
=
'i'
;
break
;
case
'ﬂ'
:
output
[
outputPos
++
]
=
'f'
;
output
[
outputPos
++
]
=
'l'
;
break
;
case
'ﬅ'
:
output
[
outputPos
++
]
=
'f'
;
output
[
outputPos
++
]
=
't'
;
break
;
case
'ﬆ'
:
output
[
outputPos
++
]
=
's'
;
output
[
outputPos
++
]
=
't'
;
break
;
default
:
output
[
outputPos
++
]
=
c
;
break
;
}
}
}
}
}
