package
org
.
apache
.
lucene
.
document
;
import
org
.
apache
.
lucene
.
search
.
PrefixQuery
;
import
org
.
apache
.
lucene
.
search
.
RangeQuery
;
import
java
.
util
.
Date
;
public
class
DateField
{
private
DateField
(
)
{
}
private
static
int
DATE_LEN
=
Long
.
toString
(
1000L
*
365
*
24
*
60
*
60
*
1000
,
Character
.
MAX_RADIX
)
.
length
(
)
;
public
static
String
MIN_DATE_STRING
(
)
{
return
timeToString
(
0
)
;
}
public
static
String
MAX_DATE_STRING
(
)
{
char
[
]
buffer
=
new
char
[
DATE_LEN
]
;
char
c
=
Character
.
forDigit
(
Character
.
MAX_RADIX
-
1
,
Character
.
MAX_RADIX
)
;
for
(
int
i
=
0
;
i
<
DATE_LEN
;
i
++
)
buffer
[
i
]
=
c
;
return
new
String
(
buffer
)
;
}
public
static
String
dateToString
(
Date
date
)
{
return
timeToString
(
date
.
getTime
(
)
)
;
}
public
static
String
timeToString
(
long
time
)
{
if
(
time
<
0
)
throw
new
RuntimeException
(
"time '"
+
time
+
"' is too early, must be >= 0"
)
;
String
s
=
Long
.
toString
(
time
,
Character
.
MAX_RADIX
)
;
if
(
s
.
length
(
)
>
DATE_LEN
)
throw
new
RuntimeException
(
"time '"
+
time
+
"' is too late, length of string "
+
"representation must be <= "
+
DATE_LEN
)
;
if
(
s
.
length
(
)
<
DATE_LEN
)
{
StringBuffer
sb
=
new
StringBuffer
(
s
)
;
while
(
sb
.
length
(
)
<
DATE_LEN
)
sb
.
insert
(
0
,
0
)
;
s
=
sb
.
toString
(
)
;
}
return
s
;
}
public
static
long
stringToTime
(
String
s
)
{
return
Long
.
parseLong
(
s
,
Character
.
MAX_RADIX
)
;
}
public
static
Date
stringToDate
(
String
s
)
{
return
new
Date
(
stringToTime
(
s
)
)
;
}
}
