package
org
.
apache
.
lucene
.
search
;
public
class
TimeLimitedCollector
extends
HitCollector
{
public
static
final
int
DEFAULT_RESOLUTION
=
20
;
public
boolean
DEFAULT_GREEDY
=
false
;
private
static
long
resolution
=
DEFAULT_RESOLUTION
;
private
boolean
greedy
=
DEFAULT_GREEDY
;
private
static
class
TimerThread
extends
Thread
{
private
volatile
long
time
=
0
;
private
TimerThread
(
)
{
super
(
"TimeLimitedCollector timer thread"
)
;
this
.
setDaemon
(
true
)
;
}
public
void
run
(
)
{
boolean
interrupted
=
false
;
try
{
while
(
true
)
{
time
+=
resolution
;
try
{
Thread
.
sleep
(
resolution
)
;
}
catch
(
final
InterruptedException
e
)
{
interrupted
=
true
;
}
}
}
finally
{
if
(
interrupted
)
{
Thread
.
currentThread
(
)
.
interrupt
(
)
;
}
}
}
public
long
getMilliseconds
(
)
{
return
time
;
}
}
public
static
class
TimeExceededException
extends
RuntimeException
{
private
long
timeAllowed
;
private
long
timeElapsed
;
private
int
lastDocCollected
;
private
TimeExceededException
(
long
timeAllowed
,
long
timeElapsed
,
int
lastDocCollected
)
{
super
(
"Elapsed time: "
+
timeElapsed
+
"Exceeded allowed search time: "
+
timeAllowed
+
" ms."
)
;
this
.
timeAllowed
=
timeAllowed
;
this
.
timeElapsed
=
timeElapsed
;
this
.
lastDocCollected
=
lastDocCollected
;
}
public
long
getTimeAllowed
(
)
{
return
timeAllowed
;
}
public
long
getTimeElapsed
(
)
{
return
timeElapsed
;
}
public
int
getLastDocCollected
(
)
{
return
lastDocCollected
;
}
}
private
final
static
TimerThread
TIMER_THREAD
=
new
TimerThread
(
)
;
static
{
TIMER_THREAD
.
start
(
)
;
}
private
final
long
t0
;
private
final
long
timeout
;
private
final
HitCollector
hc
;
public
TimeLimitedCollector
(
final
HitCollector
hc
,
final
long
timeAllowed
)
{
this
.
hc
=
hc
;
t0
=
TIMER_THREAD
.
getMilliseconds
(
)
;
this
.
timeout
=
t0
+
timeAllowed
;
}
public
void
collect
(
final
int
doc
,
final
float
score
)
{
long
time
=
TIMER_THREAD
.
getMilliseconds
(
)
;
if
(
timeout
<
time
)
{
if
(
greedy
)
{
hc
.
collect
(
doc
,
score
)
;
}
throw
new
TimeExceededException
(
timeout
-
t0
,
time
-
t0
,
doc
)
;
}
hc
.
collect
(
doc
,
score
)
;
}
public
static
long
getResolution
(
)
{
return
resolution
;
}
public
static
void
setResolution
(
long
newResolution
)
{
resolution
=
Math
.
max
(
newResolution
,
5
)
;
}
public
boolean
isGreedy
(
)
{
return
greedy
;
}
public
void
setGreedy
(
boolean
greedy
)
{
this
.
greedy
=
greedy
;
}
}
