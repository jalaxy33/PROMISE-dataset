package
org
.
apache
.
lucene
.
analysis
;
import
java
.
util
.
AbstractSet
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Iterator
;
public
class
CharArraySet
extends
AbstractSet
{
private
final
static
int
INIT_SIZE
=
8
;
private
char
[
]
[
]
entries
;
private
int
count
;
private
final
boolean
ignoreCase
;
public
CharArraySet
(
int
startSize
,
boolean
ignoreCase
)
{
this
.
ignoreCase
=
ignoreCase
;
int
size
=
INIT_SIZE
;
while
(
startSize
+
(
startSize
>
>
2
)
>
size
)
size
<<=
1
;
entries
=
new
char
[
size
]
[
]
;
}
public
CharArraySet
(
Collection
c
,
boolean
ignoreCase
)
{
this
(
c
.
size
(
)
,
ignoreCase
)
;
addAll
(
c
)
;
}
public
boolean
contains
(
char
[
]
text
,
int
off
,
int
len
)
{
return
entries
[
getSlot
(
text
,
off
,
len
)
]
!=
null
;
}
public
boolean
contains
(
CharSequence
cs
)
{
return
entries
[
getSlot
(
cs
)
]
!=
null
;
}
private
int
getSlot
(
char
[
]
text
,
int
off
,
int
len
)
{
int
code
=
getHashCode
(
text
,
off
,
len
)
;
int
pos
=
code
&
(
entries
.
length
-
1
)
;
char
[
]
text2
=
entries
[
pos
]
;
if
(
text2
!=
null
&&
!
equals
(
text
,
off
,
len
,
text2
)
)
{
final
int
inc
=
(
(
code
>
>
8
)
+
code
)
|
1
;
do
{
code
+=
inc
;
pos
=
code
&
(
entries
.
length
-
1
)
;
text2
=
entries
[
pos
]
;
}
while
(
text2
!=
null
&&
!
equals
(
text
,
off
,
len
,
text2
)
)
;
}
return
pos
;
}
private
int
getSlot
(
CharSequence
text
)
{
int
code
=
getHashCode
(
text
)
;
int
pos
=
code
&
(
entries
.
length
-
1
)
;
char
[
]
text2
=
entries
[
pos
]
;
if
(
text2
!=
null
&&
!
equals
(
text
,
text2
)
)
{
final
int
inc
=
(
(
code
>
>
8
)
+
code
)
|
1
;
do
{
code
+=
inc
;
pos
=
code
&
(
entries
.
length
-
1
)
;
text2
=
entries
[
pos
]
;
}
while
(
text2
!=
null
&&
!
equals
(
text
,
text2
)
)
;
}
return
pos
;
}
public
boolean
add
(
CharSequence
text
)
{
return
add
(
text
.
toString
(
)
)
;
}
public
boolean
add
(
String
text
)
{
return
add
(
text
.
toCharArray
(
)
)
;
}
public
boolean
add
(
char
[
]
text
)
{
if
(
ignoreCase
)
for
(
int
i
=
0
;
i
<
text
.
length
;
i
++
)
text
[
i
]
=
Character
.
toLowerCase
(
text
[
i
]
)
;
int
slot
=
getSlot
(
text
,
0
,
text
.
length
)
;
if
(
entries
[
slot
]
!=
null
)
return
false
;
entries
[
slot
]
=
text
;
count
++
;
if
(
count
+
(
count
>
>
2
)
>
entries
.
length
)
{
rehash
(
)
;
}
return
true
;
}
private
boolean
equals
(
char
[
]
text1
,
int
off
,
int
len
,
char
[
]
text2
)
{
if
(
len
!=
text2
.
length
)
return
false
;
if
(
ignoreCase
)
{
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
if
(
Character
.
toLowerCase
(
text1
[
off
+
i
]
)
!=
text2
[
i
]
)
return
false
;
}
}
else
{
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
if
(
text1
[
off
+
i
]
!=
text2
[
i
]
)
return
false
;
}
}
return
true
;
}
private
boolean
equals
(
CharSequence
text1
,
char
[
]
text2
)
{
int
len
=
text1
.
length
(
)
;
if
(
len
!=
text2
.
length
)
return
false
;
if
(
ignoreCase
)
{
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
if
(
Character
.
toLowerCase
(
text1
.
charAt
(
i
)
)
!=
text2
[
i
]
)
return
false
;
}
}
else
{
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
if
(
text1
.
charAt
(
i
)
!=
text2
[
i
]
)
return
false
;
}
}
return
true
;
}
private
void
rehash
(
)
{
final
int
newSize
=
2
*
entries
.
length
;
char
[
]
[
]
oldEntries
=
entries
;
entries
=
new
char
[
newSize
]
[
]
;
for
(
int
i
=
0
;
i
<
oldEntries
.
length
;
i
++
)
{
char
[
]
text
=
oldEntries
[
i
]
;
if
(
text
!=
null
)
{
entries
[
getSlot
(
text
,
0
,
text
.
length
)
]
=
text
;
}
}
}
private
int
getHashCode
(
char
[
]
text
,
int
offset
,
int
len
)
{
int
code
=
0
;
final
int
stop
=
offset
+
len
;
if
(
ignoreCase
)
{
for
(
int
i
=
offset
;
i
<
stop
;
i
++
)
{
code
=
code
*
31
+
Character
.
toLowerCase
(
text
[
i
]
)
;
}
}
else
{
for
(
int
i
=
offset
;
i
<
stop
;
i
++
)
{
code
=
code
*
31
+
text
[
i
]
;
}
}
return
code
;
}
private
int
getHashCode
(
CharSequence
text
)
{
int
code
;
if
(
ignoreCase
)
{
code
=
0
;
int
len
=
text
.
length
(
)
;
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
code
=
code
*
31
+
Character
.
toLowerCase
(
text
.
charAt
(
i
)
)
;
}
}
else
{
if
(
false
&&
text
instanceof
String
)
{
code
=
text
.
hashCode
(
)
;
}
else
{
code
=
0
;
int
len
=
text
.
length
(
)
;
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
code
=
code
*
31
+
text
.
charAt
(
i
)
;
}
}
}
return
code
;
}
public
int
size
(
)
{
return
count
;
}
public
boolean
isEmpty
(
)
{
return
count
==
0
;
}
public
boolean
contains
(
Object
o
)
{
if
(
o
instanceof
char
[
]
)
{
char
[
]
text
=
(
char
[
]
)
o
;
return
contains
(
text
,
0
,
text
.
length
)
;
}
else
if
(
o
instanceof
CharSequence
)
{
return
contains
(
(
CharSequence
)
o
)
;
}
return
false
;
}
public
boolean
add
(
Object
o
)
{
if
(
o
instanceof
char
[
]
)
{
return
add
(
(
char
[
]
)
o
)
;
}
else
if
(
o
instanceof
String
)
{
return
add
(
(
String
)
o
)
;
}
else
if
(
o
instanceof
CharSequence
)
{
return
add
(
(
CharSequence
)
o
)
;
}
else
{
return
add
(
o
.
toString
(
)
)
;
}
}
public
class
CharArraySetIterator
implements
Iterator
{
int
pos
=
-
1
;
char
[
]
next
;
CharArraySetIterator
(
)
{
goNext
(
)
;
}
private
void
goNext
(
)
{
next
=
null
;
pos
++
;
while
(
pos
<
entries
.
length
&&
(
next
=
entries
[
pos
]
)
==
null
)
pos
++
;
}
public
boolean
hasNext
(
)
{
return
next
!=
null
;
}
public
char
[
]
nextCharArray
(
)
{
char
[
]
ret
=
next
;
goNext
(
)
;
return
ret
;
}
public
Object
next
(
)
{
return
new
String
(
nextCharArray
(
)
)
;
}
public
void
remove
(
)
{
throw
new
UnsupportedOperationException
(
)
;
}
}
public
Iterator
iterator
(
)
{
return
new
CharArraySetIterator
(
)
;
}
}
