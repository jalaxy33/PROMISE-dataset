package
org
.
apache
.
lucene
.
search
;
import
org
.
apache
.
lucene
.
index
.
IndexReader
;
import
java
.
io
.
IOException
;
import
java
.
text
.
Collator
;
public
class
ConstantScoreRangeQuery
extends
Query
{
private
final
String
fieldName
;
private
final
String
lowerVal
;
private
final
String
upperVal
;
private
final
boolean
includeLower
;
private
final
boolean
includeUpper
;
private
Collator
collator
;
public
ConstantScoreRangeQuery
(
String
fieldName
,
String
lowerVal
,
String
upperVal
,
boolean
includeLower
,
boolean
includeUpper
)
{
if
(
lowerVal
==
null
)
{
includeLower
=
true
;
}
else
if
(
includeLower
&&
lowerVal
.
equals
(
""
)
)
{
lowerVal
=
null
;
}
if
(
upperVal
==
null
)
{
includeUpper
=
true
;
}
this
.
fieldName
=
fieldName
.
intern
(
)
;
this
.
lowerVal
=
lowerVal
;
this
.
upperVal
=
upperVal
;
this
.
includeLower
=
includeLower
;
this
.
includeUpper
=
includeUpper
;
}
public
ConstantScoreRangeQuery
(
String
fieldName
,
String
lowerVal
,
String
upperVal
,
boolean
includeLower
,
boolean
includeUpper
,
Collator
collator
)
{
this
(
fieldName
,
lowerVal
,
upperVal
,
includeLower
,
includeUpper
)
;
this
.
collator
=
collator
;
}
public
String
getField
(
)
{
return
fieldName
;
}
public
String
getLowerVal
(
)
{
return
lowerVal
;
}
public
String
getUpperVal
(
)
{
return
upperVal
;
}
public
boolean
includesLower
(
)
{
return
includeLower
;
}
public
boolean
includesUpper
(
)
{
return
includeUpper
;
}
public
Query
rewrite
(
IndexReader
reader
)
throws
IOException
{
RangeFilter
rangeFilt
=
new
RangeFilter
(
fieldName
,
lowerVal
!=
null
?
lowerVal
:
""
,
upperVal
,
lowerVal
==
""
?
false
:
includeLower
,
upperVal
==
null
?
false
:
includeUpper
,
collator
)
;
Query
q
=
new
ConstantScoreQuery
(
rangeFilt
)
;
q
.
setBoost
(
getBoost
(
)
)
;
return
q
;
}
public
String
toString
(
String
field
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
if
(
!
getField
(
)
.
equals
(
field
)
)
{
buffer
.
append
(
getField
(
)
)
;
buffer
.
append
(
":"
)
;
}
buffer
.
append
(
includeLower
?
'['
:
'{'
)
;
buffer
.
append
(
lowerVal
!=
null
?
lowerVal
:
"*"
)
;
buffer
.
append
(
" TO "
)
;
buffer
.
append
(
upperVal
!=
null
?
upperVal
:
"*"
)
;
buffer
.
append
(
includeUpper
?
']'
:
'}'
)
;
if
(
getBoost
(
)
!=
1.0f
)
{
buffer
.
append
(
"^"
)
;
buffer
.
append
(
Float
.
toString
(
getBoost
(
)
)
)
;
}
return
buffer
.
toString
(
)
;
}
public
boolean
equals
(
Object
o
)
{
if
(
this
==
o
)
return
true
;
if
(
!
(
o
instanceof
ConstantScoreRangeQuery
)
)
return
false
;
ConstantScoreRangeQuery
other
=
(
ConstantScoreRangeQuery
)
o
;
if
(
this
.
fieldName
!=
other
.
fieldName
||
this
.
includeLower
!=
other
.
includeLower
||
this
.
includeUpper
!=
other
.
includeUpper
||
(
this
.
collator
!=
null
&&
!
this
.
collator
.
equals
(
other
.
collator
)
)
)
{
return
false
;
}
if
(
this
.
lowerVal
!=
null
?
!
this
.
lowerVal
.
equals
(
other
.
lowerVal
)
:
other
.
lowerVal
!=
null
)
return
false
;
if
(
this
.
upperVal
!=
null
?
!
this
.
upperVal
.
equals
(
other
.
upperVal
)
:
other
.
upperVal
!=
null
)
return
false
;
return
this
.
getBoost
(
)
==
other
.
getBoost
(
)
;
}
public
int
hashCode
(
)
{
int
h
=
Float
.
floatToIntBits
(
getBoost
(
)
)
^
fieldName
.
hashCode
(
)
;
h
^=
lowerVal
!=
null
?
lowerVal
.
hashCode
(
)
:
0x965a965a
;
h
^=
(
h
<<
17
)
|
(
h
>
>
>
16
)
;
h
^=
(
upperVal
!=
null
?
(
upperVal
.
hashCode
(
)
)
:
0x5a695a69
)
;
h
^=
(
includeLower
?
0x665599aa
:
0
)
^
(
includeUpper
?
0x99aa5566
:
0
)
;
h
^=
collator
!=
null
?
collator
.
hashCode
(
)
:
0
;
return
h
;
}
}
