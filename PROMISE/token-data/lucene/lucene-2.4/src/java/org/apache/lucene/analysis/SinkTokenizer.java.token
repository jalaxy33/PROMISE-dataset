package
org
.
apache
.
lucene
.
analysis
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
public
class
SinkTokenizer
extends
Tokenizer
{
protected
List
lst
=
new
ArrayList
(
)
;
protected
Iterator
iter
;
public
SinkTokenizer
(
List
input
)
{
this
.
lst
=
input
;
if
(
this
.
lst
==
null
)
this
.
lst
=
new
ArrayList
(
)
;
}
public
SinkTokenizer
(
)
{
this
.
lst
=
new
ArrayList
(
)
;
}
public
SinkTokenizer
(
int
initCap
)
{
this
.
lst
=
new
ArrayList
(
initCap
)
;
}
public
List
getTokens
(
)
{
return
lst
;
}
public
Token
next
(
final
Token
reusableToken
)
throws
IOException
{
assert
reusableToken
!=
null
;
if
(
iter
==
null
)
iter
=
lst
.
iterator
(
)
;
if
(
iter
.
hasNext
(
)
)
{
Token
nextToken
=
(
Token
)
iter
.
next
(
)
;
return
(
Token
)
nextToken
.
clone
(
)
;
}
return
null
;
}
public
void
add
(
Token
t
)
{
if
(
t
==
null
)
return
;
lst
.
add
(
(
Token
)
t
.
clone
(
)
)
;
}
public
void
close
(
)
throws
IOException
{
input
=
null
;
lst
=
null
;
}
public
void
reset
(
)
throws
IOException
{
iter
=
lst
.
iterator
(
)
;
}
}
