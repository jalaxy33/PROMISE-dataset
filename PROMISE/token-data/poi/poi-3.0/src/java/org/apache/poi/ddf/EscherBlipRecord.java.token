package
org
.
apache
.
poi
.
ddf
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
HexDump
;
import
java
.
io
.
ByteArrayOutputStream
;
public
class
EscherBlipRecord
extends
EscherRecord
{
public
static
final
short
RECORD_ID_START
=
(
short
)
0xF018
;
public
static
final
short
RECORD_ID_END
=
(
short
)
0xF117
;
public
static
final
String
RECORD_DESCRIPTION
=
"msofbtBlip"
;
private
static
final
int
HEADER_SIZE
=
8
;
protected
byte
[
]
field_pictureData
;
public
EscherBlipRecord
(
)
{
}
public
int
fillFields
(
byte
[
]
data
,
int
offset
,
EscherRecordFactory
recordFactory
)
{
int
bytesAfterHeader
=
readHeader
(
data
,
offset
)
;
int
pos
=
offset
+
HEADER_SIZE
;
field_pictureData
=
new
byte
[
bytesAfterHeader
]
;
System
.
arraycopy
(
data
,
pos
,
field_pictureData
,
0
,
bytesAfterHeader
)
;
return
bytesAfterHeader
+
8
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
,
EscherSerializationListener
listener
)
{
listener
.
beforeRecordSerialize
(
offset
,
getRecordId
(
)
,
this
)
;
LittleEndian
.
putShort
(
data
,
offset
,
getOptions
(
)
)
;
LittleEndian
.
putShort
(
data
,
offset
+
2
,
getRecordId
(
)
)
;
System
.
arraycopy
(
field_pictureData
,
0
,
data
,
offset
+
4
,
field_pictureData
.
length
)
;
listener
.
afterRecordSerialize
(
offset
+
4
+
field_pictureData
.
length
,
getRecordId
(
)
,
field_pictureData
.
length
+
4
,
this
)
;
return
field_pictureData
.
length
+
4
;
}
public
int
getRecordSize
(
)
{
return
field_pictureData
.
length
+
4
;
}
public
String
getRecordName
(
)
{
return
"Blip"
;
}
public
String
toString
(
)
{
String
nl
=
System
.
getProperty
(
"line.separator"
)
;
String
extraData
;
ByteArrayOutputStream
b
=
new
ByteArrayOutputStream
(
)
;
try
{
HexDump
.
dump
(
this
.
field_pictureData
,
0
,
b
,
0
)
;
extraData
=
b
.
toString
(
)
;
}
catch
(
Exception
e
)
{
extraData
=
e
.
toString
(
)
;
}
return
getClass
(
)
.
getName
(
)
+
":"
+
nl
+
"  RecordId: 0x"
+
HexDump
.
toHex
(
getRecordId
(
)
)
+
nl
+
"  Options: 0x"
+
HexDump
.
toHex
(
getOptions
(
)
)
+
nl
+
"  Extra Data:"
+
nl
+
extraData
;
}
}
