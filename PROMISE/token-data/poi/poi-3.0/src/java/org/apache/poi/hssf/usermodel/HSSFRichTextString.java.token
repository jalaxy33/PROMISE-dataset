package
org
.
apache
.
poi
.
hssf
.
usermodel
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Workbook
;
import
org
.
apache
.
poi
.
hssf
.
record
.
LabelSSTRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
UnicodeString
;
import
java
.
util
.
Iterator
;
public
class
HSSFRichTextString
implements
Comparable
{
public
static
final
short
NO_FONT
=
0
;
private
UnicodeString
string
;
private
Workbook
book
;
private
LabelSSTRecord
record
;
public
HSSFRichTextString
(
)
{
this
(
""
)
;
}
public
HSSFRichTextString
(
String
string
)
{
if
(
string
==
null
)
string
=
""
;
this
.
string
=
new
UnicodeString
(
string
)
;
}
HSSFRichTextString
(
Workbook
book
,
LabelSSTRecord
record
)
{
setWorkbookReferences
(
book
,
record
)
;
this
.
string
=
book
.
getSSTString
(
record
.
getSSTIndex
(
)
)
;
}
void
setWorkbookReferences
(
Workbook
book
,
LabelSSTRecord
record
)
{
this
.
book
=
book
;
this
.
record
=
record
;
}
private
UnicodeString
cloneStringIfRequired
(
)
{
if
(
book
==
null
)
return
string
;
UnicodeString
s
=
(
UnicodeString
)
string
.
clone
(
)
;
return
s
;
}
private
void
addToSSTIfRequired
(
)
{
if
(
book
!=
null
)
{
int
index
=
book
.
addSSTString
(
string
)
;
record
.
setSSTIndex
(
index
)
;
string
=
book
.
getSSTString
(
index
)
;
}
}
public
void
applyFont
(
int
startIndex
,
int
endIndex
,
short
fontIndex
)
{
if
(
startIndex
>
endIndex
)
throw
new
IllegalArgumentException
(
"Start index must be less than end index."
)
;
if
(
startIndex
<
0
||
endIndex
>
length
(
)
)
throw
new
IllegalArgumentException
(
"Start and end index not in range."
)
;
if
(
startIndex
==
endIndex
)
return
;
short
currentFont
=
NO_FONT
;
if
(
endIndex
!=
length
(
)
)
{
currentFont
=
this
.
getFontAtIndex
(
startIndex
)
;
}
string
=
cloneStringIfRequired
(
)
;
Iterator
formatting
=
string
.
formatIterator
(
)
;
if
(
formatting
!=
null
)
{
while
(
formatting
.
hasNext
(
)
)
{
UnicodeString
.
FormatRun
r
=
(
UnicodeString
.
FormatRun
)
formatting
.
next
(
)
;
if
(
(
r
.
getCharacterPos
(
)
>=
startIndex
)
&&
(
r
.
getCharacterPos
(
)
<
endIndex
)
)
formatting
.
remove
(
)
;
}
}
string
.
addFormatRun
(
new
UnicodeString
.
FormatRun
(
(
short
)
startIndex
,
fontIndex
)
)
;
if
(
endIndex
!=
length
(
)
)
string
.
addFormatRun
(
new
UnicodeString
.
FormatRun
(
(
short
)
endIndex
,
currentFont
)
)
;
addToSSTIfRequired
(
)
;
}
public
void
applyFont
(
int
startIndex
,
int
endIndex
,
HSSFFont
font
)
{
applyFont
(
startIndex
,
endIndex
,
font
.
getIndex
(
)
)
;
}
public
void
applyFont
(
HSSFFont
font
)
{
applyFont
(
0
,
string
.
getCharCount
(
)
,
font
)
;
}
public
void
clearFormatting
(
)
{
string
=
cloneStringIfRequired
(
)
;
string
.
clearFormatting
(
)
;
addToSSTIfRequired
(
)
;
}
public
String
getString
(
)
{
return
string
.
getString
(
)
;
}
UnicodeString
getUnicodeString
(
)
{
return
cloneStringIfRequired
(
)
;
}
void
setUnicodeString
(
UnicodeString
str
)
{
this
.
string
=
str
;
}
public
int
length
(
)
{
return
string
.
getCharCount
(
)
;
}
public
short
getFontAtIndex
(
int
index
)
{
int
size
=
string
.
getFormatRunCount
(
)
;
UnicodeString
.
FormatRun
currentRun
=
null
;
for
(
int
i
=
0
;
i
<
size
;
i
++
)
{
UnicodeString
.
FormatRun
r
=
string
.
getFormatRun
(
i
)
;
if
(
r
.
getCharacterPos
(
)
>
index
)
break
;
else
currentRun
=
r
;
}
if
(
currentRun
==
null
)
return
NO_FONT
;
else
return
currentRun
.
getFontIndex
(
)
;
}
public
int
numFormattingRuns
(
)
{
return
string
.
getFormatRunCount
(
)
;
}
public
int
getIndexOfFormattingRun
(
int
index
)
{
UnicodeString
.
FormatRun
r
=
string
.
getFormatRun
(
index
)
;
return
r
.
getCharacterPos
(
)
;
}
public
short
getFontOfFormattingRun
(
int
index
)
{
UnicodeString
.
FormatRun
r
=
string
.
getFormatRun
(
index
)
;
return
r
.
getFontIndex
(
)
;
}
public
int
compareTo
(
Object
o
)
{
HSSFRichTextString
r
=
(
HSSFRichTextString
)
o
;
return
string
.
compareTo
(
r
.
string
)
;
}
public
boolean
equals
(
Object
o
)
{
if
(
o
instanceof
HSSFRichTextString
)
{
return
string
.
equals
(
(
(
HSSFRichTextString
)
o
)
.
string
)
;
}
return
false
;
}
public
String
toString
(
)
{
return
string
.
toString
(
)
;
}
public
void
applyFont
(
short
fontIndex
)
{
applyFont
(
0
,
string
.
getCharCount
(
)
,
fontIndex
)
;
}
}
