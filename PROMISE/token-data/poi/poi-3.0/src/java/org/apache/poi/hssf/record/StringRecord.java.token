package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
public
class
StringRecord
extends
Record
{
public
final
static
short
sid
=
0x207
;
private
int
field_1_string_length
;
private
byte
field_2_unicode_flag
;
private
String
field_3_string
;
public
StringRecord
(
)
{
}
public
StringRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not a valid StringRecord"
)
;
}
}
protected
void
fillFields
(
RecordInputStream
in
)
{
field_1_string_length
=
in
.
readShort
(
)
;
field_2_unicode_flag
=
in
.
readByte
(
)
;
byte
[
]
data
=
in
.
readRemainder
(
)
;
if
(
isUnCompressedUnicode
(
)
)
{
field_3_string
=
StringUtil
.
getFromUnicodeLE
(
data
,
0
,
field_1_string_length
)
;
}
else
{
field_3_string
=
StringUtil
.
getFromCompressedUnicode
(
data
,
0
,
field_1_string_length
)
;
}
}
public
boolean
isInValueSection
(
)
{
return
true
;
}
private
int
getStringByteLength
(
)
{
return
isUnCompressedUnicode
(
)
?
field_1_string_length
*
2
:
field_1_string_length
;
}
public
int
getRecordSize
(
)
{
return
4
+
2
+
1
+
getStringByteLength
(
)
;
}
public
boolean
isUnCompressedUnicode
(
)
{
return
(
field_2_unicode_flag
==
1
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
3
+
getStringByteLength
(
)
)
)
;
LittleEndian
.
putUShort
(
data
,
4
+
offset
,
field_1_string_length
)
;
data
[
6
+
offset
]
=
field_2_unicode_flag
;
if
(
isUnCompressedUnicode
(
)
)
{
StringUtil
.
putUnicodeLE
(
field_3_string
,
data
,
7
+
offset
)
;
}
else
{
StringUtil
.
putCompressedUnicode
(
field_3_string
,
data
,
7
+
offset
)
;
}
return
getRecordSize
(
)
;
}
public
short
getSid
(
)
{
return
sid
;
}
public
String
getString
(
)
{
return
field_3_string
;
}
public
void
setCompressedFlag
(
byte
unicode_flag
)
{
this
.
field_2_unicode_flag
=
unicode_flag
;
}
public
void
setString
(
String
string
)
{
this
.
field_1_string_length
=
string
.
length
(
)
;
this
.
field_3_string
=
string
;
setCompressedFlag
(
StringUtil
.
hasMultibyte
(
string
)
?
(
byte
)
1
:
(
byte
)
0
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[STRING]\n"
)
;
buffer
.
append
(
"    .string            = "
)
.
append
(
field_3_string
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/STRING]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
Object
clone
(
)
{
StringRecord
rec
=
new
StringRecord
(
)
;
rec
.
field_1_string_length
=
this
.
field_1_string_length
;
rec
.
field_2_unicode_flag
=
this
.
field_2_unicode_flag
;
rec
.
field_3_string
=
this
.
field_3_string
;
return
rec
;
}
}
