package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
*
;
public
class
AreaFormatRecord
extends
Record
{
public
final
static
short
sid
=
0x100a
;
private
int
field_1_foregroundColor
;
private
int
field_2_backgroundColor
;
private
short
field_3_pattern
;
private
short
field_4_formatFlags
;
private
BitField
automatic
=
BitFieldFactory
.
getInstance
(
0x1
)
;
private
BitField
invert
=
BitFieldFactory
.
getInstance
(
0x2
)
;
private
short
field_5_forecolorIndex
;
private
short
field_6_backcolorIndex
;
public
AreaFormatRecord
(
)
{
}
public
AreaFormatRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not a AreaFormat record"
)
;
}
}
protected
void
fillFields
(
RecordInputStream
in
)
{
field_1_foregroundColor
=
in
.
readInt
(
)
;
field_2_backgroundColor
=
in
.
readInt
(
)
;
field_3_pattern
=
in
.
readShort
(
)
;
field_4_formatFlags
=
in
.
readShort
(
)
;
field_5_forecolorIndex
=
in
.
readShort
(
)
;
field_6_backcolorIndex
=
in
.
readShort
(
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[AREAFORMAT]\n"
)
;
buffer
.
append
(
"    .foregroundColor      = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
getForegroundColor
(
)
)
)
.
append
(
" ("
)
.
append
(
getForegroundColor
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"    .backgroundColor      = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
getBackgroundColor
(
)
)
)
.
append
(
" ("
)
.
append
(
getBackgroundColor
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"    .pattern              = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
getPattern
(
)
)
)
.
append
(
" ("
)
.
append
(
getPattern
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"    .formatFlags          = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
getFormatFlags
(
)
)
)
.
append
(
" ("
)
.
append
(
getFormatFlags
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"         .automatic                = "
)
.
append
(
isAutomatic
(
)
)
.
append
(
'\n'
)
;
buffer
.
append
(
"         .invert                   = "
)
.
append
(
isInvert
(
)
)
.
append
(
'\n'
)
;
buffer
.
append
(
"    .forecolorIndex       = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
getForecolorIndex
(
)
)
)
.
append
(
" ("
)
.
append
(
getForecolorIndex
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"    .backcolorIndex       = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
getBackcolorIndex
(
)
)
)
.
append
(
" ("
)
.
append
(
getBackcolorIndex
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"[/AREAFORMAT]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
int
pos
=
0
;
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
getRecordSize
(
)
-
4
)
)
;
LittleEndian
.
putInt
(
data
,
4
+
offset
+
pos
,
field_1_foregroundColor
)
;
LittleEndian
.
putInt
(
data
,
8
+
offset
+
pos
,
field_2_backgroundColor
)
;
LittleEndian
.
putShort
(
data
,
12
+
offset
+
pos
,
field_3_pattern
)
;
LittleEndian
.
putShort
(
data
,
14
+
offset
+
pos
,
field_4_formatFlags
)
;
LittleEndian
.
putShort
(
data
,
16
+
offset
+
pos
,
field_5_forecolorIndex
)
;
LittleEndian
.
putShort
(
data
,
18
+
offset
+
pos
,
field_6_backcolorIndex
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
4
+
4
+
4
+
2
+
2
+
2
+
2
;
}
public
short
getSid
(
)
{
return
sid
;
}
public
Object
clone
(
)
{
AreaFormatRecord
rec
=
new
AreaFormatRecord
(
)
;
rec
.
field_1_foregroundColor
=
field_1_foregroundColor
;
rec
.
field_2_backgroundColor
=
field_2_backgroundColor
;
rec
.
field_3_pattern
=
field_3_pattern
;
rec
.
field_4_formatFlags
=
field_4_formatFlags
;
rec
.
field_5_forecolorIndex
=
field_5_forecolorIndex
;
rec
.
field_6_backcolorIndex
=
field_6_backcolorIndex
;
return
rec
;
}
public
int
getForegroundColor
(
)
{
return
field_1_foregroundColor
;
}
public
void
setForegroundColor
(
int
field_1_foregroundColor
)
{
this
.
field_1_foregroundColor
=
field_1_foregroundColor
;
}
public
int
getBackgroundColor
(
)
{
return
field_2_backgroundColor
;
}
public
void
setBackgroundColor
(
int
field_2_backgroundColor
)
{
this
.
field_2_backgroundColor
=
field_2_backgroundColor
;
}
public
short
getPattern
(
)
{
return
field_3_pattern
;
}
public
void
setPattern
(
short
field_3_pattern
)
{
this
.
field_3_pattern
=
field_3_pattern
;
}
public
short
getFormatFlags
(
)
{
return
field_4_formatFlags
;
}
public
void
setFormatFlags
(
short
field_4_formatFlags
)
{
this
.
field_4_formatFlags
=
field_4_formatFlags
;
}
public
short
getForecolorIndex
(
)
{
return
field_5_forecolorIndex
;
}
public
void
setForecolorIndex
(
short
field_5_forecolorIndex
)
{
this
.
field_5_forecolorIndex
=
field_5_forecolorIndex
;
}
public
short
getBackcolorIndex
(
)
{
return
field_6_backcolorIndex
;
}
public
void
setBackcolorIndex
(
short
field_6_backcolorIndex
)
{
this
.
field_6_backcolorIndex
=
field_6_backcolorIndex
;
}
public
void
setAutomatic
(
boolean
value
)
{
field_4_formatFlags
=
automatic
.
setShortBoolean
(
field_4_formatFlags
,
value
)
;
}
public
boolean
isAutomatic
(
)
{
return
automatic
.
isSet
(
field_4_formatFlags
)
;
}
public
void
setInvert
(
boolean
value
)
{
field_4_formatFlags
=
invert
.
setShortBoolean
(
field_4_formatFlags
,
value
)
;
}
public
boolean
isInvert
(
)
{
return
invert
.
isSet
(
field_4_formatFlags
)
;
}
}
