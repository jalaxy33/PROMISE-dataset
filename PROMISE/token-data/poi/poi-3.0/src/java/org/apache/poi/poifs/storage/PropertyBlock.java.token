package
org
.
apache
.
poi
.
poifs
.
storage
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
poifs
.
common
.
POIFSConstants
;
import
org
.
apache
.
poi
.
poifs
.
property
.
Property
;
import
org
.
apache
.
poi
.
util
.
IntegerField
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
LittleEndianConsts
;
public
class
PropertyBlock
extends
BigBlock
{
private
static
final
int
_properties_per_block
=
POIFSConstants
.
BIG_BLOCK_SIZE
/
POIFSConstants
.
PROPERTY_SIZE
;
private
Property
[
]
_properties
;
private
PropertyBlock
(
final
Property
[
]
properties
,
final
int
offset
)
{
_properties
=
new
Property
[
_properties_per_block
]
;
for
(
int
j
=
0
;
j
<
_properties_per_block
;
j
++
)
{
_properties
[
j
]
=
properties
[
j
+
offset
]
;
}
}
public
static
BlockWritable
[
]
createPropertyBlockArray
(
final
List
properties
)
{
int
block_count
=
(
properties
.
size
(
)
+
_properties_per_block
-
1
)
/
_properties_per_block
;
Property
[
]
to_be_written
=
new
Property
[
block_count
*
_properties_per_block
]
;
System
.
arraycopy
(
properties
.
toArray
(
new
Property
[
0
]
)
,
0
,
to_be_written
,
0
,
properties
.
size
(
)
)
;
for
(
int
j
=
properties
.
size
(
)
;
j
<
to_be_written
.
length
;
j
++
)
{
to_be_written
[
j
]
=
new
Property
(
)
{
protected
void
preWrite
(
)
{
}
public
boolean
isDirectory
(
)
{
return
false
;
}
}
;
}
BlockWritable
[
]
rvalue
=
new
BlockWritable
[
block_count
]
;
for
(
int
j
=
0
;
j
<
block_count
;
j
++
)
{
rvalue
[
j
]
=
new
PropertyBlock
(
to_be_written
,
j
*
_properties_per_block
)
;
}
return
rvalue
;
}
void
writeData
(
final
OutputStream
stream
)
throws
IOException
{
for
(
int
j
=
0
;
j
<
_properties_per_block
;
j
++
)
{
_properties
[
j
]
.
writeData
(
stream
)
;
}
}
}
