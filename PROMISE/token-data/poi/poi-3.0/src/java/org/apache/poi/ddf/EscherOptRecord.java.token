package
org
.
apache
.
poi
.
ddf
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
HexDump
;
import
java
.
util
.
*
;
import
java
.
io
.
IOException
;
public
class
EscherOptRecord
extends
EscherRecord
{
public
static
final
short
RECORD_ID
=
(
short
)
0xF00B
;
public
static
final
String
RECORD_DESCRIPTION
=
"msofbtOPT"
;
private
List
properties
=
new
ArrayList
(
)
;
public
int
fillFields
(
byte
[
]
data
,
int
offset
,
EscherRecordFactory
recordFactory
)
{
int
bytesRemaining
=
readHeader
(
data
,
offset
)
;
int
pos
=
offset
+
8
;
EscherPropertyFactory
f
=
new
EscherPropertyFactory
(
)
;
properties
=
f
.
createProperties
(
data
,
pos
,
getInstance
(
)
)
;
return
bytesRemaining
+
8
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
,
EscherSerializationListener
listener
)
{
listener
.
beforeRecordSerialize
(
offset
,
getRecordId
(
)
,
this
)
;
LittleEndian
.
putShort
(
data
,
offset
,
getOptions
(
)
)
;
LittleEndian
.
putShort
(
data
,
offset
+
2
,
getRecordId
(
)
)
;
LittleEndian
.
putInt
(
data
,
offset
+
4
,
getPropertiesSize
(
)
)
;
int
pos
=
offset
+
8
;
for
(
Iterator
iterator
=
properties
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
EscherProperty
escherProperty
=
(
EscherProperty
)
iterator
.
next
(
)
;
pos
+=
escherProperty
.
serializeSimplePart
(
data
,
pos
)
;
}
for
(
Iterator
iterator
=
properties
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
EscherProperty
escherProperty
=
(
EscherProperty
)
iterator
.
next
(
)
;
pos
+=
escherProperty
.
serializeComplexPart
(
data
,
pos
)
;
}
listener
.
afterRecordSerialize
(
pos
,
getRecordId
(
)
,
pos
-
offset
,
this
)
;
return
pos
-
offset
;
}
public
int
getRecordSize
(
)
{
return
8
+
getPropertiesSize
(
)
;
}
public
short
getOptions
(
)
{
setOptions
(
(
short
)
(
(
properties
.
size
(
)
<<
4
)
|
0x3
)
)
;
return
super
.
getOptions
(
)
;
}
public
String
getRecordName
(
)
{
return
"Opt"
;
}
private
int
getPropertiesSize
(
)
{
int
totalSize
=
0
;
for
(
Iterator
iterator
=
properties
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
EscherProperty
escherProperty
=
(
EscherProperty
)
iterator
.
next
(
)
;
totalSize
+=
escherProperty
.
getPropertySize
(
)
;
}
return
totalSize
;
}
public
String
toString
(
)
{
String
nl
=
System
.
getProperty
(
"line.separator"
)
;
StringBuffer
propertiesBuf
=
new
StringBuffer
(
)
;
for
(
Iterator
iterator
=
properties
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
propertiesBuf
.
append
(
"    "
+
iterator
.
next
(
)
.
toString
(
)
+
nl
)
;
return
"org.apache.poi.ddf.EscherOptRecord:"
+
nl
+
"  isContainer: "
+
isContainerRecord
(
)
+
nl
+
"  options: 0x"
+
HexDump
.
toHex
(
getOptions
(
)
)
+
nl
+
"  recordId: 0x"
+
HexDump
.
toHex
(
getRecordId
(
)
)
+
nl
+
"  numchildren: "
+
getChildRecords
(
)
.
size
(
)
+
nl
+
"  properties:"
+
nl
+
propertiesBuf
.
toString
(
)
;
}
public
List
getEscherProperties
(
)
{
return
properties
;
}
public
EscherProperty
getEscherProperty
(
int
index
)
{
return
(
EscherProperty
)
properties
.
get
(
index
)
;
}
public
void
addEscherProperty
(
EscherProperty
prop
)
{
properties
.
add
(
prop
)
;
}
public
void
sortProperties
(
)
{
Collections
.
sort
(
properties
,
new
Comparator
(
)
{
public
int
compare
(
Object
o1
,
Object
o2
)
{
EscherProperty
p1
=
(
EscherProperty
)
o1
;
EscherProperty
p2
=
(
EscherProperty
)
o2
;
return
new
Short
(
p1
.
getPropertyNumber
(
)
)
.
compareTo
(
new
Short
(
p2
.
getPropertyNumber
(
)
)
)
;
}
}
)
;
}
}
