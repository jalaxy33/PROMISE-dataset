package
org
.
apache
.
poi
.
hssf
.
usermodel
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Workbook
;
import
org
.
apache
.
poi
.
hssf
.
record
.
BoundSheetRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
NameRecord
;
import
org
.
apache
.
poi
.
hssf
.
util
.
RangeAddress
;
public
class
HSSFName
{
private
Workbook
book
;
private
NameRecord
name
;
protected
HSSFName
(
Workbook
book
,
NameRecord
name
)
{
this
.
book
=
book
;
this
.
name
=
name
;
}
public
String
getSheetName
(
)
{
String
result
;
short
indexToExternSheet
=
name
.
getExternSheetNumber
(
)
;
result
=
book
.
findSheetNameFromExternSheet
(
indexToExternSheet
)
;
return
result
;
}
public
String
getNameName
(
)
{
String
result
=
name
.
getNameText
(
)
;
return
result
;
}
public
void
setNameName
(
String
nameName
)
{
name
.
setNameText
(
nameName
)
;
name
.
setNameTextLength
(
(
byte
)
nameName
.
length
(
)
)
;
for
(
int
i
=
book
.
getNumNames
(
)
-
1
;
i
>=
0
;
i
--
)
{
NameRecord
rec
=
book
.
getNameRecord
(
i
)
;
if
(
rec
!=
name
)
{
if
(
rec
.
getNameText
(
)
.
equalsIgnoreCase
(
getNameName
(
)
)
)
throw
new
IllegalArgumentException
(
"The workbook already contains this name (case-insensitive)"
)
;
}
}
}
public
String
getReference
(
)
{
String
result
;
result
=
name
.
getAreaReference
(
book
)
;
return
result
;
}
private
void
setSheetName
(
String
sheetName
)
{
int
sheetNumber
=
book
.
getSheetIndex
(
sheetName
)
;
short
externSheetNumber
=
book
.
checkExternSheet
(
sheetNumber
)
;
name
.
setExternSheetNumber
(
externSheetNumber
)
;
}
public
void
setReference
(
String
ref
)
{
RangeAddress
ra
=
new
RangeAddress
(
ref
)
;
String
sheetName
=
ra
.
getSheetName
(
)
;
if
(
ra
.
hasSheetName
(
)
)
{
setSheetName
(
sheetName
)
;
}
name
.
setAreaReference
(
ref
)
;
}
}
