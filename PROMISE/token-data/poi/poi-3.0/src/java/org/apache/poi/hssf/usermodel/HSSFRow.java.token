package
org
.
apache
.
poi
.
hssf
.
usermodel
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Sheet
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Workbook
;
import
org
.
apache
.
poi
.
hssf
.
record
.
CellValueRecordInterface
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RowRecord
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
NoSuchElementException
;
public
class
HSSFRow
implements
Comparable
{
public
final
static
int
INITIAL_CAPACITY
=
5
;
private
int
rowNum
;
private
HSSFCell
[
]
cells
=
new
HSSFCell
[
INITIAL_CAPACITY
]
;
private
RowRecord
row
;
private
Workbook
book
;
private
Sheet
sheet
;
protected
HSSFRow
(
)
{
}
protected
HSSFRow
(
Workbook
book
,
Sheet
sheet
,
int
rowNum
)
{
this
.
rowNum
=
rowNum
;
this
.
book
=
book
;
this
.
sheet
=
sheet
;
row
=
new
RowRecord
(
)
;
row
.
setOptionFlags
(
(
short
)
0x100
)
;
row
.
setHeight
(
(
short
)
0xff
)
;
row
.
setLastCol
(
(
short
)
-
1
)
;
row
.
setFirstCol
(
(
short
)
-
1
)
;
setRowNum
(
rowNum
)
;
}
protected
HSSFRow
(
Workbook
book
,
Sheet
sheet
,
RowRecord
record
)
{
this
.
book
=
book
;
this
.
sheet
=
sheet
;
row
=
record
;
setRowNum
(
record
.
getRowNumber
(
)
)
;
}
public
HSSFCell
createCell
(
short
column
)
{
return
this
.
createCell
(
column
,
HSSFCell
.
CELL_TYPE_BLANK
)
;
}
public
HSSFCell
createCell
(
short
column
,
int
type
)
{
HSSFCell
cell
=
new
HSSFCell
(
book
,
sheet
,
getRowNum
(
)
,
column
,
type
)
;
addCell
(
cell
)
;
sheet
.
addValueRecord
(
getRowNum
(
)
,
cell
.
getCellValueRecord
(
)
)
;
return
cell
;
}
public
void
removeCell
(
HSSFCell
cell
)
{
CellValueRecordInterface
cval
=
cell
.
getCellValueRecord
(
)
;
sheet
.
removeValueRecord
(
getRowNum
(
)
,
cval
)
;
short
column
=
cell
.
getCellNum
(
)
;
if
(
cell
!=
null
&&
column
<
cells
.
length
)
{
cells
[
column
]
=
null
;
}
if
(
cell
.
getCellNum
(
)
==
row
.
getLastCol
(
)
)
{
row
.
setLastCol
(
findLastCell
(
row
.
getLastCol
(
)
)
)
;
}
if
(
cell
.
getCellNum
(
)
==
row
.
getFirstCol
(
)
)
{
row
.
setFirstCol
(
findFirstCell
(
row
.
getFirstCol
(
)
)
)
;
}
}
protected
HSSFCell
createCellFromRecord
(
CellValueRecordInterface
cell
)
{
HSSFCell
hcell
=
new
HSSFCell
(
book
,
sheet
,
getRowNum
(
)
,
cell
)
;
addCell
(
hcell
)
;
return
hcell
;
}
public
void
setRowNum
(
int
rowNum
)
{
if
(
(
rowNum
<
0
)
||
(
rowNum
>
RowRecord
.
MAX_ROW_NUMBER
)
)
throw
new
IndexOutOfBoundsException
(
"Row number must be between 0 and "
+
RowRecord
.
MAX_ROW_NUMBER
+
", was <"
+
rowNum
+
">"
)
;
this
.
rowNum
=
rowNum
;
if
(
row
!=
null
)
{
row
.
setRowNumber
(
rowNum
)
;
}
}
public
int
getRowNum
(
)
{
return
rowNum
;
}
private
void
addCell
(
HSSFCell
cell
)
{
short
column
=
cell
.
getCellNum
(
)
;
if
(
row
.
getFirstCol
(
)
==
-
1
)
{
row
.
setFirstCol
(
column
)
;
}
if
(
row
.
getLastCol
(
)
==
-
1
)
{
row
.
setLastCol
(
column
)
;
}
if
(
column
>=
cells
.
length
)
{
HSSFCell
[
]
oldCells
=
cells
;
int
newSize
=
oldCells
.
length
*
2
;
if
(
newSize
<
column
+
1
)
newSize
=
column
+
1
;
cells
=
new
HSSFCell
[
newSize
]
;
System
.
arraycopy
(
oldCells
,
0
,
cells
,
0
,
oldCells
.
length
)
;
}
cells
[
column
]
=
cell
;
if
(
column
<
row
.
getFirstCol
(
)
)
{
row
.
setFirstCol
(
column
)
;
}
if
(
column
>
row
.
getLastCol
(
)
)
{
row
.
setLastCol
(
column
)
;
}
}
public
HSSFCell
getCell
(
short
cellnum
)
{
if
(
cellnum
<
0
||
cellnum
>=
cells
.
length
)
return
null
;
return
cells
[
cellnum
]
;
}
public
short
getFirstCellNum
(
)
{
if
(
getPhysicalNumberOfCells
(
)
==
0
)
return
-
1
;
else
return
row
.
getFirstCol
(
)
;
}
public
short
getLastCellNum
(
)
{
if
(
getPhysicalNumberOfCells
(
)
==
0
)
return
-
1
;
else
return
row
.
getLastCol
(
)
;
}
public
int
getPhysicalNumberOfCells
(
)
{
int
count
=
0
;
for
(
int
i
=
0
;
i
<
cells
.
length
;
i
++
)
{
if
(
cells
[
i
]
!=
null
)
count
++
;
}
return
count
;
}
public
void
setHeight
(
short
height
)
{
row
.
setBadFontHeight
(
true
)
;
row
.
setHeight
(
height
)
;
}
public
void
setZeroHeight
(
boolean
zHeight
)
{
row
.
setZeroHeight
(
zHeight
)
;
}
public
boolean
getZeroHeight
(
)
{
return
row
.
getZeroHeight
(
)
;
}
public
void
setHeightInPoints
(
float
height
)
{
row
.
setBadFontHeight
(
true
)
;
row
.
setHeight
(
(
short
)
(
height
*
20
)
)
;
}
public
short
getHeight
(
)
{
return
row
.
getHeight
(
)
;
}
public
float
getHeightInPoints
(
)
{
return
(
row
.
getHeight
(
)
/
20
)
;
}
protected
RowRecord
getRowRecord
(
)
{
return
row
;
}
private
short
findLastCell
(
short
lastcell
)
{
short
cellnum
=
(
short
)
(
lastcell
-
1
)
;
HSSFCell
r
=
getCell
(
cellnum
)
;
while
(
r
==
null
&&
cellnum
>=
0
)
{
r
=
getCell
(
--
cellnum
)
;
}
return
cellnum
;
}
private
short
findFirstCell
(
short
firstcell
)
{
short
cellnum
=
(
short
)
(
firstcell
+
1
)
;
HSSFCell
r
=
getCell
(
cellnum
)
;
while
(
r
==
null
&&
cellnum
<=
getLastCellNum
(
)
)
{
r
=
getCell
(
++
cellnum
)
;
}
if
(
cellnum
>
getLastCellNum
(
)
)
return
-
1
;
return
cellnum
;
}
public
Iterator
cellIterator
(
)
{
return
new
CellIterator
(
)
;
}
private
class
CellIterator
implements
Iterator
{
int
thisId
=
-
1
;
int
nextId
=
-
1
;
public
CellIterator
(
)
{
findNext
(
)
;
}
public
boolean
hasNext
(
)
{
return
nextId
<
cells
.
length
;
}
public
Object
next
(
)
{
if
(
!
hasNext
(
)
)
throw
new
NoSuchElementException
(
"At last element"
)
;
HSSFCell
cell
=
cells
[
nextId
]
;
thisId
=
nextId
;
findNext
(
)
;
return
cell
;
}
public
void
remove
(
)
{
if
(
thisId
==
-
1
)
throw
new
IllegalStateException
(
"remove() called before next()"
)
;
cells
[
thisId
]
=
null
;
}
private
void
findNext
(
)
{
int
i
=
nextId
+
1
;
for
(
;
i
<
cells
.
length
;
i
++
)
{
if
(
cells
[
i
]
!=
null
)
break
;
}
nextId
=
i
;
}
}
public
int
compareTo
(
Object
obj
)
{
HSSFRow
loc
=
(
HSSFRow
)
obj
;
if
(
this
.
getRowNum
(
)
==
loc
.
getRowNum
(
)
)
{
return
0
;
}
if
(
this
.
getRowNum
(
)
<
loc
.
getRowNum
(
)
)
{
return
-
1
;
}
if
(
this
.
getRowNum
(
)
>
loc
.
getRowNum
(
)
)
{
return
1
;
}
return
-
1
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
!
(
obj
instanceof
HSSFRow
)
)
{
return
false
;
}
HSSFRow
loc
=
(
HSSFRow
)
obj
;
if
(
this
.
getRowNum
(
)
==
loc
.
getRowNum
(
)
)
{
return
true
;
}
return
false
;
}
}
