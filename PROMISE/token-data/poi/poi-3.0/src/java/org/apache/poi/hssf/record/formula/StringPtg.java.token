package
org
.
apache
.
poi
.
hssf
.
record
.
formula
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Workbook
;
import
org
.
apache
.
poi
.
util
.
BitField
;
import
org
.
apache
.
poi
.
util
.
BitFieldFactory
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RecordInputStream
;
public
class
StringPtg
extends
Ptg
{
public
final
static
int
SIZE
=
9
;
public
final
static
byte
sid
=
0x17
;
int
field_1_length
;
byte
field_2_options
;
BitField
fHighByte
=
BitFieldFactory
.
getInstance
(
0x01
)
;
private
String
field_3_string
;
private
StringPtg
(
)
{
}
public
StringPtg
(
RecordInputStream
in
)
{
field_1_length
=
in
.
readByte
(
)
&
0xFF
;
field_2_options
=
in
.
readByte
(
)
;
if
(
fHighByte
.
isSet
(
field_2_options
)
)
{
field_3_string
=
in
.
readUnicodeLEString
(
field_1_length
)
;
}
else
{
field_3_string
=
in
.
readCompressedUnicode
(
field_1_length
)
;
}
}
public
StringPtg
(
String
value
)
{
if
(
value
.
length
(
)
>
255
)
{
throw
new
IllegalArgumentException
(
"String literals in formulas cant be bigger than 255 characters ASCII"
)
;
}
this
.
field_2_options
=
0
;
field_2_options
=
(
byte
)
this
.
fHighByte
.
setBoolean
(
field_2_options
,
StringUtil
.
hasMultibyte
(
value
)
)
;
this
.
field_3_string
=
value
;
this
.
field_1_length
=
value
.
length
(
)
;
}
public
String
getValue
(
)
{
return
field_3_string
;
}
public
void
writeBytes
(
byte
[
]
array
,
int
offset
)
{
array
[
offset
+
0
]
=
sid
;
array
[
offset
+
1
]
=
(
byte
)
field_1_length
;
array
[
offset
+
2
]
=
field_2_options
;
if
(
fHighByte
.
isSet
(
field_2_options
)
)
{
StringUtil
.
putUnicodeLE
(
getValue
(
)
,
array
,
offset
+
3
)
;
}
else
{
StringUtil
.
putCompressedUnicode
(
getValue
(
)
,
array
,
offset
+
3
)
;
}
}
public
int
getSize
(
)
{
if
(
fHighByte
.
isSet
(
field_2_options
)
)
{
return
2
*
field_1_length
+
3
;
}
else
{
return
field_1_length
+
3
;
}
}
public
String
toFormulaString
(
Workbook
book
)
{
return
"\""
+
getValue
(
)
+
"\""
;
}
public
byte
getDefaultOperandClass
(
)
{
return
Ptg
.
CLASS_VALUE
;
}
public
Object
clone
(
)
{
StringPtg
ptg
=
new
StringPtg
(
)
;
ptg
.
field_1_length
=
field_1_length
;
ptg
.
field_2_options
=
field_2_options
;
ptg
.
field_3_string
=
field_3_string
;
return
ptg
;
}
}
