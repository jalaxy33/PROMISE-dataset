package
org
.
apache
.
poi
.
util
;
import
java
.
util
.
*
;
public
class
DoubleList
{
private
double
[
]
_array
;
private
int
_limit
;
private
static
final
int
_default_size
=
128
;
public
DoubleList
(
)
{
this
(
_default_size
)
;
}
public
DoubleList
(
final
DoubleList
list
)
{
this
(
list
.
_array
.
length
)
;
System
.
arraycopy
(
list
.
_array
,
0
,
_array
,
0
,
_array
.
length
)
;
_limit
=
list
.
_limit
;
}
public
DoubleList
(
final
int
initialCapacity
)
{
_array
=
new
double
[
initialCapacity
]
;
_limit
=
0
;
}
public
void
add
(
final
int
index
,
final
double
value
)
{
if
(
index
>
_limit
)
{
throw
new
IndexOutOfBoundsException
(
)
;
}
else
if
(
index
==
_limit
)
{
add
(
value
)
;
}
else
{
if
(
_limit
==
_array
.
length
)
{
growArray
(
_limit
*
2
)
;
}
System
.
arraycopy
(
_array
,
index
,
_array
,
index
+
1
,
_limit
-
index
)
;
_array
[
index
]
=
value
;
_limit
++
;
}
}
public
boolean
add
(
final
double
value
)
{
if
(
_limit
==
_array
.
length
)
{
growArray
(
_limit
*
2
)
;
}
_array
[
_limit
++
]
=
value
;
return
true
;
}
public
boolean
addAll
(
final
DoubleList
c
)
{
if
(
c
.
_limit
!=
0
)
{
if
(
(
_limit
+
c
.
_limit
)
>
_array
.
length
)
{
growArray
(
_limit
+
c
.
_limit
)
;
}
System
.
arraycopy
(
c
.
_array
,
0
,
_array
,
_limit
,
c
.
_limit
)
;
_limit
+=
c
.
_limit
;
}
return
true
;
}
public
boolean
addAll
(
final
int
index
,
final
DoubleList
c
)
{
if
(
index
>
_limit
)
{
throw
new
IndexOutOfBoundsException
(
)
;
}
if
(
c
.
_limit
!=
0
)
{
if
(
(
_limit
+
c
.
_limit
)
>
_array
.
length
)
{
growArray
(
_limit
+
c
.
_limit
)
;
}
System
.
arraycopy
(
_array
,
index
,
_array
,
index
+
c
.
_limit
,
_limit
-
index
)
;
System
.
arraycopy
(
c
.
_array
,
0
,
_array
,
index
,
c
.
_limit
)
;
_limit
+=
c
.
_limit
;
}
return
true
;
}
public
void
clear
(
)
{
_limit
=
0
;
}
public
boolean
contains
(
final
double
o
)
{
boolean
rval
=
false
;
for
(
int
j
=
0
;
!
rval
&&
(
j
<
_limit
)
;
j
++
)
{
if
(
_array
[
j
]
==
o
)
{
rval
=
true
;
}
}
return
rval
;
}
public
boolean
containsAll
(
final
DoubleList
c
)
{
boolean
rval
=
true
;
if
(
this
!=
c
)
{
for
(
int
j
=
0
;
rval
&&
(
j
<
c
.
_limit
)
;
j
++
)
{
if
(
!
contains
(
c
.
_array
[
j
]
)
)
{
rval
=
false
;
}
}
}
return
rval
;
}
public
boolean
equals
(
final
Object
o
)
{
boolean
rval
=
this
==
o
;
if
(
!
rval
&&
(
o
!=
null
)
&&
(
o
.
getClass
(
)
==
this
.
getClass
(
)
)
)
{
DoubleList
other
=
(
DoubleList
)
o
;
if
(
other
.
_limit
==
_limit
)
{
rval
=
true
;
for
(
int
j
=
0
;
rval
&&
(
j
<
_limit
)
;
j
++
)
{
rval
=
_array
[
j
]
==
other
.
_array
[
j
]
;
}
}
}
return
rval
;
}
public
double
get
(
final
int
index
)
{
if
(
index
>=
_limit
)
{
throw
new
IndexOutOfBoundsException
(
)
;
}
return
_array
[
index
]
;
}
public
int
hashCode
(
)
{
int
hash
=
0
;
for
(
int
j
=
0
;
j
<
_limit
;
j
++
)
{
hash
=
(
31
*
hash
)
+
(
(
int
)
_array
[
j
]
)
;
}
return
hash
;
}
public
int
indexOf
(
final
double
o
)
{
int
rval
=
0
;
for
(
;
rval
<
_limit
;
rval
++
)
{
if
(
o
==
_array
[
rval
]
)
{
break
;
}
}
if
(
rval
==
_limit
)
{
rval
=
-
1
;
}
return
rval
;
}
public
boolean
isEmpty
(
)
{
return
_limit
==
0
;
}
public
int
lastIndexOf
(
final
double
o
)
{
int
rval
=
_limit
-
1
;
for
(
;
rval
>=
0
;
rval
--
)
{
if
(
o
==
_array
[
rval
]
)
{
break
;
}
}
return
rval
;
}
public
double
remove
(
final
int
index
)
{
if
(
index
>=
_limit
)
{
throw
new
IndexOutOfBoundsException
(
)
;
}
double
rval
=
_array
[
index
]
;
System
.
arraycopy
(
_array
,
index
+
1
,
_array
,
index
,
_limit
-
index
)
;
_limit
--
;
return
rval
;
}
public
boolean
removeValue
(
final
double
o
)
{
boolean
rval
=
false
;
for
(
int
j
=
0
;
!
rval
&&
(
j
<
_limit
)
;
j
++
)
{
if
(
o
==
_array
[
j
]
)
{
System
.
arraycopy
(
_array
,
j
+
1
,
_array
,
j
,
_limit
-
j
)
;
_limit
--
;
rval
=
true
;
}
}
return
rval
;
}
public
boolean
removeAll
(
final
DoubleList
c
)
{
boolean
rval
=
false
;
for
(
int
j
=
0
;
j
<
c
.
_limit
;
j
++
)
{
if
(
removeValue
(
c
.
_array
[
j
]
)
)
{
rval
=
true
;
}
}
return
rval
;
}
public
boolean
retainAll
(
final
DoubleList
c
)
{
boolean
rval
=
false
;
for
(
int
j
=
0
;
j
<
_limit
;
)
{
if
(
!
c
.
contains
(
_array
[
j
]
)
)
{
remove
(
j
)
;
rval
=
true
;
}
else
{
j
++
;
}
}
return
rval
;
}
public
double
set
(
final
int
index
,
final
double
element
)
{
if
(
index
>=
_limit
)
{
throw
new
IndexOutOfBoundsException
(
)
;
}
double
rval
=
_array
[
index
]
;
_array
[
index
]
=
element
;
return
rval
;
}
public
int
size
(
)
{
return
_limit
;
}
public
double
[
]
toArray
(
)
{
double
[
]
rval
=
new
double
[
_limit
]
;
System
.
arraycopy
(
_array
,
0
,
rval
,
0
,
_limit
)
;
return
rval
;
}
public
double
[
]
toArray
(
final
double
[
]
a
)
{
double
[
]
rval
;
if
(
a
.
length
==
_limit
)
{
System
.
arraycopy
(
_array
,
0
,
a
,
0
,
_limit
)
;
rval
=
a
;
}
else
{
rval
=
toArray
(
)
;
}
return
rval
;
}
private
void
growArray
(
final
int
new_size
)
{
int
size
=
(
new_size
==
_array
.
length
)
?
new_size
+
1
:
new_size
;
double
[
]
new_array
=
new
double
[
size
]
;
System
.
arraycopy
(
_array
,
0
,
new_array
,
0
,
_limit
)
;
_array
=
new_array
;
}
}
