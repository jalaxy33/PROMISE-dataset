package
org
.
apache
.
poi
.
hssf
.
record
;
public
class
LabelRecord
extends
Record
implements
CellValueRecordInterface
{
public
final
static
short
sid
=
0x204
;
private
int
field_1_row
;
private
short
field_2_column
;
private
short
field_3_xf_index
;
private
short
field_4_string_len
;
private
byte
field_5_unicode_flag
;
private
String
field_6_value
;
public
LabelRecord
(
)
{
}
public
LabelRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not a valid LabelRecord"
)
;
}
}
protected
void
fillFields
(
RecordInputStream
in
)
{
field_1_row
=
in
.
readUShort
(
)
;
field_2_column
=
in
.
readShort
(
)
;
field_3_xf_index
=
in
.
readShort
(
)
;
field_4_string_len
=
in
.
readShort
(
)
;
field_5_unicode_flag
=
in
.
readByte
(
)
;
if
(
field_4_string_len
>
0
)
{
if
(
isUnCompressedUnicode
(
)
)
{
field_6_value
=
in
.
readUnicodeLEString
(
field_4_string_len
)
;
}
else
{
field_6_value
=
in
.
readCompressedUnicode
(
field_4_string_len
)
;
}
}
else
field_6_value
=
null
;
}
public
int
getRow
(
)
{
return
field_1_row
;
}
public
short
getColumn
(
)
{
return
field_2_column
;
}
public
short
getXFIndex
(
)
{
return
field_3_xf_index
;
}
public
short
getStringLength
(
)
{
return
field_4_string_len
;
}
public
boolean
isUnCompressedUnicode
(
)
{
return
(
field_5_unicode_flag
==
1
)
;
}
public
String
getValue
(
)
{
return
field_6_value
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
throw
new
RecordFormatException
(
"Label Records are supported READ ONLY...convert to LabelSST"
)
;
}
public
short
getSid
(
)
{
return
sid
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[LABEL]\n"
)
;
buffer
.
append
(
"    .row            = "
)
.
append
(
Integer
.
toHexString
(
getRow
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .column         = "
)
.
append
(
Integer
.
toHexString
(
getColumn
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .xfindex        = "
)
.
append
(
Integer
.
toHexString
(
getXFIndex
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .string_len       = "
)
.
append
(
Integer
.
toHexString
(
field_4_string_len
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .unicode_flag       = "
)
.
append
(
Integer
.
toHexString
(
field_5_unicode_flag
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .value       = "
)
.
append
(
getValue
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/LABEL]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
boolean
isBefore
(
CellValueRecordInterface
i
)
{
if
(
this
.
getRow
(
)
>
i
.
getRow
(
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
>
i
.
getColumn
(
)
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
{
return
false
;
}
return
true
;
}
public
boolean
isAfter
(
CellValueRecordInterface
i
)
{
if
(
this
.
getRow
(
)
<
i
.
getRow
(
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
<
i
.
getColumn
(
)
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
{
return
false
;
}
return
true
;
}
public
boolean
isEqual
(
CellValueRecordInterface
i
)
{
return
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
;
}
public
boolean
isInValueSection
(
)
{
return
true
;
}
public
boolean
isValue
(
)
{
return
true
;
}
public
void
setColumn
(
short
col
)
{
}
public
void
setRow
(
int
row
)
{
}
public
void
setXFIndex
(
short
xf
)
{
}
public
Object
clone
(
)
{
LabelRecord
rec
=
new
LabelRecord
(
)
;
rec
.
field_1_row
=
field_1_row
;
rec
.
field_2_column
=
field_2_column
;
rec
.
field_3_xf_index
=
field_3_xf_index
;
rec
.
field_4_string_len
=
field_4_string_len
;
rec
.
field_5_unicode_flag
=
field_5_unicode_flag
;
rec
.
field_6_value
=
field_6_value
;
return
rec
;
}
}
