package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
*
;
public
class
SeriesTextRecord
extends
Record
{
public
final
static
short
sid
=
0x100d
;
private
short
field_1_id
;
private
byte
field_2_textLength
;
private
byte
field_3_undocumented
;
private
String
field_4_text
;
public
SeriesTextRecord
(
)
{
}
public
SeriesTextRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not a SeriesText record"
)
;
}
}
protected
void
fillFields
(
RecordInputStream
in
)
{
field_1_id
=
in
.
readShort
(
)
;
field_2_textLength
=
in
.
readByte
(
)
;
field_3_undocumented
=
in
.
readByte
(
)
;
field_4_text
=
in
.
readUnicodeLEString
(
field_2_textLength
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[SERIESTEXT]\n"
)
;
buffer
.
append
(
"    .id                   = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
getId
(
)
)
)
.
append
(
" ("
)
.
append
(
getId
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"    .textLength           = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
getTextLength
(
)
)
)
.
append
(
" ("
)
.
append
(
getTextLength
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"    .undocumented         = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
getUndocumented
(
)
)
)
.
append
(
" ("
)
.
append
(
getUndocumented
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"    .text                 = "
)
.
append
(
" ("
)
.
append
(
getText
(
)
)
.
append
(
" )"
)
;
buffer
.
append
(
System
.
getProperty
(
"line.separator"
)
)
;
buffer
.
append
(
"[/SERIESTEXT]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
int
pos
=
0
;
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
getRecordSize
(
)
-
4
)
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
+
pos
,
field_1_id
)
;
data
[
6
+
offset
+
pos
]
=
field_2_textLength
;
data
[
7
+
offset
+
pos
]
=
field_3_undocumented
;
StringUtil
.
putUnicodeLE
(
field_4_text
,
data
,
8
+
offset
+
pos
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
4
+
2
+
1
+
1
+
(
field_2_textLength
*
2
)
;
}
public
short
getSid
(
)
{
return
sid
;
}
public
Object
clone
(
)
{
SeriesTextRecord
rec
=
new
SeriesTextRecord
(
)
;
rec
.
field_1_id
=
field_1_id
;
rec
.
field_2_textLength
=
field_2_textLength
;
rec
.
field_3_undocumented
=
field_3_undocumented
;
rec
.
field_4_text
=
field_4_text
;
return
rec
;
}
public
short
getId
(
)
{
return
field_1_id
;
}
public
void
setId
(
short
field_1_id
)
{
this
.
field_1_id
=
field_1_id
;
}
public
byte
getTextLength
(
)
{
return
field_2_textLength
;
}
public
void
setTextLength
(
byte
field_2_textLength
)
{
this
.
field_2_textLength
=
field_2_textLength
;
}
public
byte
getUndocumented
(
)
{
return
field_3_undocumented
;
}
public
void
setUndocumented
(
byte
field_3_undocumented
)
{
this
.
field_3_undocumented
=
field_3_undocumented
;
}
public
String
getText
(
)
{
return
field_4_text
;
}
public
void
setText
(
String
field_4_text
)
{
this
.
field_4_text
=
field_4_text
;
}
}
