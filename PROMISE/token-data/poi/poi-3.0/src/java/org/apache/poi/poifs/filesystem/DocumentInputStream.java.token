package
org
.
apache
.
poi
.
poifs
.
filesystem
;
import
java
.
io
.
*
;
public
class
DocumentInputStream
extends
InputStream
{
private
int
_current_offset
;
private
int
_marked_offset
;
private
int
_document_size
;
private
boolean
_closed
;
private
POIFSDocument
_document
;
private
byte
[
]
_tiny_buffer
;
static
private
final
int
EOD
=
-
1
;
public
DocumentInputStream
(
final
DocumentEntry
document
)
throws
IOException
{
_current_offset
=
0
;
_marked_offset
=
0
;
_document_size
=
document
.
getSize
(
)
;
_closed
=
false
;
_tiny_buffer
=
null
;
if
(
document
instanceof
DocumentNode
)
{
_document
=
(
(
DocumentNode
)
document
)
.
getDocument
(
)
;
}
else
{
throw
new
IOException
(
"Cannot open internal document storage"
)
;
}
}
public
DocumentInputStream
(
final
POIFSDocument
document
)
throws
IOException
{
_current_offset
=
0
;
_marked_offset
=
0
;
_document_size
=
document
.
getSize
(
)
;
_closed
=
false
;
_tiny_buffer
=
null
;
_document
=
document
;
}
public
int
available
(
)
throws
IOException
{
dieIfClosed
(
)
;
return
_document_size
-
_current_offset
;
}
public
void
close
(
)
throws
IOException
{
_closed
=
true
;
}
public
void
mark
(
int
ignoredReadlimit
)
{
_marked_offset
=
_current_offset
;
}
public
boolean
markSupported
(
)
{
return
true
;
}
public
int
read
(
)
throws
IOException
{
dieIfClosed
(
)
;
if
(
atEOD
(
)
)
{
return
EOD
;
}
if
(
_tiny_buffer
==
null
)
{
_tiny_buffer
=
new
byte
[
1
]
;
}
_document
.
read
(
_tiny_buffer
,
_current_offset
++
)
;
return
(
(
int
)
_tiny_buffer
[
0
]
)
&
0x000000FF
;
}
public
int
read
(
final
byte
[
]
b
)
throws
IOException
,
NullPointerException
{
return
read
(
b
,
0
,
b
.
length
)
;
}
public
int
read
(
final
byte
[
]
b
,
final
int
off
,
final
int
len
)
throws
IOException
,
NullPointerException
,
IndexOutOfBoundsException
{
dieIfClosed
(
)
;
if
(
b
==
null
)
{
throw
new
NullPointerException
(
"buffer is null"
)
;
}
if
(
(
off
<
0
)
||
(
len
<
0
)
||
(
b
.
length
<
(
off
+
len
)
)
)
{
throw
new
IndexOutOfBoundsException
(
"can't read past buffer boundaries"
)
;
}
if
(
len
==
0
)
{
return
0
;
}
if
(
atEOD
(
)
)
{
return
EOD
;
}
int
limit
=
Math
.
min
(
available
(
)
,
len
)
;
if
(
(
off
==
0
)
&&
(
limit
==
b
.
length
)
)
{
_document
.
read
(
b
,
_current_offset
)
;
}
else
{
byte
[
]
buffer
=
new
byte
[
limit
]
;
_document
.
read
(
buffer
,
_current_offset
)
;
System
.
arraycopy
(
buffer
,
0
,
b
,
off
,
limit
)
;
}
_current_offset
+=
limit
;
return
limit
;
}
public
void
reset
(
)
{
_current_offset
=
_marked_offset
;
}
public
long
skip
(
final
long
n
)
throws
IOException
{
dieIfClosed
(
)
;
if
(
n
<
0
)
{
return
0
;
}
int
new_offset
=
_current_offset
+
(
int
)
n
;
if
(
new_offset
<
_current_offset
)
{
new_offset
=
_document_size
;
}
else
if
(
new_offset
>
_document_size
)
{
new_offset
=
_document_size
;
}
long
rval
=
new_offset
-
_current_offset
;
_current_offset
=
new_offset
;
return
rval
;
}
private
void
dieIfClosed
(
)
throws
IOException
{
if
(
_closed
)
{
throw
new
IOException
(
"cannot perform requested operation on a closed stream"
)
;
}
}
private
boolean
atEOD
(
)
{
return
_current_offset
==
_document_size
;
}
}
