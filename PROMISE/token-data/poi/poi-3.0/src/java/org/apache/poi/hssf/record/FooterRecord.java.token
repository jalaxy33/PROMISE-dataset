package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
public
class
FooterRecord
extends
Record
{
public
final
static
short
sid
=
0x15
;
private
byte
field_1_footer_len
;
private
byte
field_2_reserved
;
private
byte
field_3_unicode_flag
;
private
String
field_4_footer
;
public
FooterRecord
(
)
{
}
public
FooterRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A FooterRECORD"
)
;
}
}
protected
void
fillFields
(
RecordInputStream
in
)
{
if
(
in
.
remaining
(
)
>
0
)
{
field_1_footer_len
=
in
.
readByte
(
)
;
field_2_reserved
=
in
.
readByte
(
)
;
field_3_unicode_flag
=
in
.
readByte
(
)
;
if
(
isMultibyte
(
)
)
{
field_4_footer
=
in
.
readUnicodeLEString
(
LittleEndian
.
ubyteToInt
(
field_1_footer_len
)
)
;
}
else
{
field_4_footer
=
in
.
readCompressedUnicode
(
LittleEndian
.
ubyteToInt
(
field_1_footer_len
)
)
;
}
}
}
public
boolean
isMultibyte
(
)
{
return
(
(
field_3_unicode_flag
&
0xFF
)
==
1
)
;
}
public
void
setFooterLength
(
byte
len
)
{
field_1_footer_len
=
len
;
}
public
void
setFooter
(
String
footer
)
{
field_4_footer
=
footer
;
field_3_unicode_flag
=
(
byte
)
(
StringUtil
.
hasMultibyte
(
field_4_footer
)
?
1
:
0
)
;
}
public
short
getFooterLength
(
)
{
return
(
short
)
(
0xFF
&
field_1_footer_len
)
;
}
public
String
getFooter
(
)
{
return
field_4_footer
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[FOOTER]\n"
)
;
buffer
.
append
(
"    .footerlen      = "
)
.
append
(
Integer
.
toHexString
(
getFooterLength
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .footer         = "
)
.
append
(
getFooter
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/FOOTER]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
int
len
=
4
;
if
(
getFooterLength
(
)
>
0
)
{
len
+=
3
;
}
short
bytelen
=
(
short
)
(
isMultibyte
(
)
?
getFooterLength
(
)
*
2
:
getFooterLength
(
)
)
;
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
(
len
-
4
)
+
bytelen
)
)
;
if
(
getFooterLength
(
)
>
0
)
{
data
[
4
+
offset
]
=
(
byte
)
getFooterLength
(
)
;
data
[
6
+
offset
]
=
field_3_unicode_flag
;
if
(
isMultibyte
(
)
)
{
StringUtil
.
putUnicodeLE
(
getFooter
(
)
,
data
,
7
+
offset
)
;
}
else
{
StringUtil
.
putCompressedUnicode
(
getFooter
(
)
,
data
,
7
+
offset
)
;
}
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
int
retval
=
4
;
if
(
getFooterLength
(
)
>
0
)
{
retval
+=
3
;
}
return
(
isMultibyte
(
)
?
(
retval
+
getFooterLength
(
)
*
2
)
:
(
retval
+
getFooterLength
(
)
)
)
;
}
public
short
getSid
(
)
{
return
sid
;
}
public
Object
clone
(
)
{
FooterRecord
rec
=
new
FooterRecord
(
)
;
rec
.
field_1_footer_len
=
field_1_footer_len
;
rec
.
field_2_reserved
=
field_2_reserved
;
rec
.
field_3_unicode_flag
=
field_3_unicode_flag
;
rec
.
field_4_footer
=
field_4_footer
;
return
rec
;
}
}
