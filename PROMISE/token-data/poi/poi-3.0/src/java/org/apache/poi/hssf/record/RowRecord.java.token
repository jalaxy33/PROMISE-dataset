package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
BitField
;
import
org
.
apache
.
poi
.
util
.
BitFieldFactory
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
RowRecord
extends
Record
implements
Comparable
{
public
final
static
short
sid
=
0x208
;
public
final
static
int
MAX_ROW_NUMBER
=
65535
;
private
int
field_1_row_number
;
private
short
field_2_first_col
;
private
short
field_3_last_col
;
private
short
field_4_height
;
private
short
field_5_optimize
;
private
short
field_6_reserved
;
private
short
field_7_option_flags
;
private
static
final
BitField
outlineLevel
=
BitFieldFactory
.
getInstance
(
0x07
)
;
private
static
final
BitField
colapsed
=
BitFieldFactory
.
getInstance
(
0x10
)
;
private
static
final
BitField
zeroHeight
=
BitFieldFactory
.
getInstance
(
0x20
)
;
private
static
final
BitField
badFontHeight
=
BitFieldFactory
.
getInstance
(
0x40
)
;
private
static
final
BitField
formatted
=
BitFieldFactory
.
getInstance
(
0x80
)
;
private
short
field_8_xf_index
;
public
RowRecord
(
)
{
}
public
RowRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A valid ROW RECORD"
)
;
}
}
protected
void
fillFields
(
RecordInputStream
in
)
{
field_1_row_number
=
in
.
readUShort
(
)
;
field_2_first_col
=
in
.
readShort
(
)
;
field_3_last_col
=
in
.
readShort
(
)
;
field_4_height
=
in
.
readShort
(
)
;
field_5_optimize
=
in
.
readShort
(
)
;
field_6_reserved
=
in
.
readShort
(
)
;
field_7_option_flags
=
in
.
readShort
(
)
;
field_8_xf_index
=
in
.
readShort
(
)
;
}
public
void
setRowNumber
(
int
row
)
{
field_1_row_number
=
row
;
}
public
void
setFirstCol
(
short
col
)
{
field_2_first_col
=
col
;
}
public
void
setLastCol
(
short
col
)
{
field_3_last_col
=
col
;
}
public
void
setHeight
(
short
height
)
{
field_4_height
=
height
;
}
public
void
setOptimize
(
short
optimize
)
{
field_5_optimize
=
optimize
;
}
public
void
setOptionFlags
(
short
options
)
{
field_7_option_flags
=
options
;
}
public
void
setOutlineLevel
(
short
ol
)
{
field_7_option_flags
=
outlineLevel
.
setShortValue
(
field_7_option_flags
,
ol
)
;
}
public
void
setColapsed
(
boolean
c
)
{
field_7_option_flags
=
colapsed
.
setShortBoolean
(
field_7_option_flags
,
c
)
;
}
public
void
setZeroHeight
(
boolean
z
)
{
field_7_option_flags
=
zeroHeight
.
setShortBoolean
(
field_7_option_flags
,
z
)
;
}
public
void
setBadFontHeight
(
boolean
f
)
{
field_7_option_flags
=
badFontHeight
.
setShortBoolean
(
field_7_option_flags
,
f
)
;
}
public
void
setFormatted
(
boolean
f
)
{
field_7_option_flags
=
formatted
.
setShortBoolean
(
field_7_option_flags
,
f
)
;
}
public
void
setXFIndex
(
short
index
)
{
field_8_xf_index
=
index
;
}
public
int
getRowNumber
(
)
{
return
field_1_row_number
;
}
public
short
getFirstCol
(
)
{
return
field_2_first_col
;
}
public
short
getLastCol
(
)
{
return
field_3_last_col
;
}
public
short
getHeight
(
)
{
return
field_4_height
;
}
public
short
getOptimize
(
)
{
return
field_5_optimize
;
}
public
short
getOptionFlags
(
)
{
return
field_7_option_flags
;
}
public
short
getOutlineLevel
(
)
{
return
outlineLevel
.
getShortValue
(
field_7_option_flags
)
;
}
public
boolean
getColapsed
(
)
{
return
(
colapsed
.
isSet
(
field_7_option_flags
)
)
;
}
public
boolean
getZeroHeight
(
)
{
return
zeroHeight
.
isSet
(
field_7_option_flags
)
;
}
public
boolean
getBadFontHeight
(
)
{
return
badFontHeight
.
isSet
(
field_7_option_flags
)
;
}
public
boolean
getFormatted
(
)
{
return
formatted
.
isSet
(
field_7_option_flags
)
;
}
public
short
getXFIndex
(
)
{
return
field_8_xf_index
;
}
public
boolean
isInValueSection
(
)
{
return
true
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[ROW]\n"
)
;
buffer
.
append
(
"    .rownumber      = "
)
.
append
(
Integer
.
toHexString
(
getRowNumber
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .firstcol       = "
)
.
append
(
Integer
.
toHexString
(
getFirstCol
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .lastcol        = "
)
.
append
(
Integer
.
toHexString
(
getLastCol
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .height         = "
)
.
append
(
Integer
.
toHexString
(
getHeight
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .optimize       = "
)
.
append
(
Integer
.
toHexString
(
getOptimize
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .reserved       = "
)
.
append
(
Integer
.
toHexString
(
field_6_reserved
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .optionflags    = "
)
.
append
(
Integer
.
toHexString
(
getOptionFlags
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .outlinelvl = "
)
.
append
(
Integer
.
toHexString
(
getOutlineLevel
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .colapsed   = "
)
.
append
(
getColapsed
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .zeroheight = "
)
.
append
(
getZeroHeight
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .badfontheig= "
)
.
append
(
getBadFontHeight
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .formatted  = "
)
.
append
(
getFormatted
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .xfindex        = "
)
.
append
(
Integer
.
toHexString
(
getXFIndex
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/ROW]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
16
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
(
short
)
getRowNumber
(
)
)
;
LittleEndian
.
putShort
(
data
,
6
+
offset
,
getFirstCol
(
)
==
-
1
?
(
short
)
0
:
getFirstCol
(
)
)
;
LittleEndian
.
putShort
(
data
,
8
+
offset
,
getLastCol
(
)
==
-
1
?
(
short
)
0
:
getLastCol
(
)
)
;
LittleEndian
.
putShort
(
data
,
10
+
offset
,
getHeight
(
)
)
;
LittleEndian
.
putShort
(
data
,
12
+
offset
,
getOptimize
(
)
)
;
LittleEndian
.
putShort
(
data
,
14
+
offset
,
field_6_reserved
)
;
LittleEndian
.
putShort
(
data
,
16
+
offset
,
getOptionFlags
(
)
)
;
LittleEndian
.
putShort
(
data
,
18
+
offset
,
getXFIndex
(
)
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
20
;
}
public
short
getSid
(
)
{
return
sid
;
}
public
int
compareTo
(
Object
obj
)
{
RowRecord
loc
=
(
RowRecord
)
obj
;
if
(
this
.
getRowNumber
(
)
==
loc
.
getRowNumber
(
)
)
{
return
0
;
}
if
(
this
.
getRowNumber
(
)
<
loc
.
getRowNumber
(
)
)
{
return
-
1
;
}
if
(
this
.
getRowNumber
(
)
>
loc
.
getRowNumber
(
)
)
{
return
1
;
}
return
-
1
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
!
(
obj
instanceof
RowRecord
)
)
{
return
false
;
}
RowRecord
loc
=
(
RowRecord
)
obj
;
if
(
this
.
getRowNumber
(
)
==
loc
.
getRowNumber
(
)
)
{
return
true
;
}
return
false
;
}
public
Object
clone
(
)
{
RowRecord
rec
=
new
RowRecord
(
)
;
rec
.
field_1_row_number
=
field_1_row_number
;
rec
.
field_2_first_col
=
field_2_first_col
;
rec
.
field_3_last_col
=
field_3_last_col
;
rec
.
field_4_height
=
field_4_height
;
rec
.
field_5_optimize
=
field_5_optimize
;
rec
.
field_6_reserved
=
field_6_reserved
;
rec
.
field_7_option_flags
=
field_7_option_flags
;
rec
.
field_8_xf_index
=
field_8_xf_index
;
return
rec
;
}
}
