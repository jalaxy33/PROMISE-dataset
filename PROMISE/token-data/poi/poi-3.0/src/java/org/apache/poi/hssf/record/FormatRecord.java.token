package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
public
class
FormatRecord
extends
Record
{
public
final
static
short
sid
=
0x41e
;
private
short
field_1_index_code
;
private
short
field_3_unicode_len
;
private
boolean
field_3_unicode_flag
;
private
String
field_4_formatstring
;
public
FormatRecord
(
)
{
}
public
FormatRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A FORMAT RECORD"
)
;
}
}
protected
void
fillFields
(
RecordInputStream
in
)
{
field_1_index_code
=
in
.
readShort
(
)
;
field_3_unicode_len
=
in
.
readShort
(
)
;
field_3_unicode_flag
=
(
in
.
readByte
(
)
&
(
byte
)
0x01
)
!=
0
;
if
(
field_3_unicode_flag
)
{
field_4_formatstring
=
in
.
readUnicodeLEString
(
field_3_unicode_len
)
;
}
else
{
field_4_formatstring
=
in
.
readCompressedUnicode
(
field_3_unicode_len
)
;
}
}
public
void
setIndexCode
(
short
index
)
{
field_1_index_code
=
index
;
}
public
void
setFormatStringLength
(
byte
len
)
{
field_3_unicode_len
=
len
;
}
public
void
setUnicodeFlag
(
boolean
unicode
)
{
field_3_unicode_flag
=
unicode
;
}
public
void
setFormatString
(
String
fs
)
{
field_4_formatstring
=
fs
;
setUnicodeFlag
(
StringUtil
.
hasMultibyte
(
fs
)
)
;
}
public
short
getIndexCode
(
)
{
return
field_1_index_code
;
}
public
boolean
getUnicodeFlag
(
)
{
return
field_3_unicode_flag
;
}
public
String
getFormatString
(
)
{
return
field_4_formatstring
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[FORMAT]\n"
)
;
buffer
.
append
(
"    .indexcode       = "
)
.
append
(
Integer
.
toHexString
(
getIndexCode
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .unicode length  = "
)
.
append
(
Integer
.
toHexString
(
field_3_unicode_len
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .isUnicode       = "
)
.
append
(
field_3_unicode_flag
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .formatstring    = "
)
.
append
(
getFormatString
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/FORMAT]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
2
+
2
+
1
+
(
(
field_3_unicode_flag
)
?
2
*
field_3_unicode_len
:
field_3_unicode_len
)
)
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
getIndexCode
(
)
)
;
LittleEndian
.
putShort
(
data
,
6
+
offset
,
field_3_unicode_len
)
;
data
[
8
+
offset
]
=
(
byte
)
(
(
field_3_unicode_flag
)
?
0x01
:
0x00
)
;
if
(
field_3_unicode_flag
)
{
StringUtil
.
putUnicodeLE
(
getFormatString
(
)
,
data
,
9
+
offset
)
;
}
else
{
StringUtil
.
putCompressedUnicode
(
getFormatString
(
)
,
data
,
9
+
offset
)
;
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
9
+
(
(
field_3_unicode_flag
)
?
2
*
field_3_unicode_len
:
field_3_unicode_len
)
;
}
public
short
getSid
(
)
{
return
sid
;
}
}
