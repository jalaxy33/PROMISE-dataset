package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
IntMapper
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
class
SSTSerializer
{
private
IntMapper
strings
;
private
SSTRecordHeader
sstRecordHeader
;
int
[
]
bucketAbsoluteOffsets
;
int
[
]
bucketRelativeOffsets
;
int
startOfSST
,
startOfRecord
;
public
SSTSerializer
(
IntMapper
strings
,
int
numStrings
,
int
numUniqueStrings
)
{
this
.
strings
=
strings
;
this
.
sstRecordHeader
=
new
SSTRecordHeader
(
numStrings
,
numUniqueStrings
)
;
int
infoRecs
=
ExtSSTRecord
.
getNumberOfInfoRecsForStrings
(
strings
.
size
(
)
)
;
this
.
bucketAbsoluteOffsets
=
new
int
[
infoRecs
]
;
this
.
bucketRelativeOffsets
=
new
int
[
infoRecs
]
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
UnicodeString
.
UnicodeRecordStats
stats
=
new
UnicodeString
.
UnicodeRecordStats
(
)
;
sstRecordHeader
.
writeSSTHeader
(
stats
,
data
,
0
+
offset
,
0
)
;
int
pos
=
offset
+
SSTRecord
.
SST_RECORD_OVERHEAD
;
for
(
int
k
=
0
;
k
<
strings
.
size
(
)
;
k
++
)
{
if
(
k
%
ExtSSTRecord
.
DEFAULT_BUCKET_SIZE
==
0
)
{
int
index
=
k
/
ExtSSTRecord
.
DEFAULT_BUCKET_SIZE
;
if
(
index
<
ExtSSTRecord
.
MAX_BUCKETS
)
{
bucketAbsoluteOffsets
[
index
]
=
pos
-
offset
;
bucketRelativeOffsets
[
index
]
=
pos
-
offset
;
}
}
UnicodeString
s
=
getUnicodeString
(
k
)
;
pos
+=
s
.
serialize
(
stats
,
pos
,
data
)
;
}
if
(
stats
.
lastLengthPos
!=
-
1
)
{
short
lastRecordLength
=
(
short
)
(
pos
-
stats
.
lastLengthPos
-
2
)
;
if
(
lastRecordLength
>
8224
)
throw
new
InternalError
(
)
;
LittleEndian
.
putShort
(
data
,
stats
.
lastLengthPos
,
lastRecordLength
)
;
}
return
pos
-
offset
;
}
private
UnicodeString
getUnicodeString
(
int
index
)
{
return
getUnicodeString
(
strings
,
index
)
;
}
private
static
UnicodeString
getUnicodeString
(
IntMapper
strings
,
int
index
)
{
return
(
(
UnicodeString
)
strings
.
get
(
index
)
)
;
}
public
int
[
]
getBucketAbsoluteOffsets
(
)
{
return
bucketAbsoluteOffsets
;
}
public
int
[
]
getBucketRelativeOffsets
(
)
{
return
bucketRelativeOffsets
;
}
}
