package
org
.
apache
.
poi
.
util
;
import
java
.
util
.
*
;
public
abstract
class
POILogger
{
public
static
final
int
DEBUG
=
1
;
public
static
final
int
INFO
=
3
;
public
static
final
int
WARN
=
5
;
public
static
final
int
ERROR
=
7
;
public
static
final
int
FATAL
=
9
;
POILogger
(
)
{
}
abstract
public
void
initialize
(
final
String
cat
)
;
abstract
public
void
log
(
final
int
level
,
final
Object
obj1
)
;
abstract
public
boolean
check
(
final
int
level
)
;
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
32
)
.
append
(
obj1
)
.
append
(
obj2
)
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
48
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
64
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
,
final
Object
obj5
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
80
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
.
append
(
obj5
)
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
,
final
Object
obj5
,
final
Object
obj6
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
96
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
.
append
(
obj5
)
.
append
(
obj6
)
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
,
final
Object
obj5
,
final
Object
obj6
,
final
Object
obj7
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
112
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
.
append
(
obj5
)
.
append
(
obj6
)
.
append
(
obj7
)
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
,
final
Object
obj5
,
final
Object
obj6
,
final
Object
obj7
,
final
Object
obj8
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
128
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
.
append
(
obj5
)
.
append
(
obj6
)
.
append
(
obj7
)
.
append
(
obj8
)
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Throwable
exception
)
{
log
(
level
,
obj1
,
exception
)
;
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Throwable
exception
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
32
)
.
append
(
obj1
)
.
append
(
obj2
)
,
exception
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Throwable
exception
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
48
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
,
exception
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
,
final
Throwable
exception
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
64
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
,
exception
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
,
final
Object
obj5
,
final
Throwable
exception
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
80
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
.
append
(
obj5
)
,
exception
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
,
final
Object
obj5
,
final
Object
obj6
,
final
Throwable
exception
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
96
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
.
append
(
obj5
)
.
append
(
obj6
)
,
exception
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
,
final
Object
obj5
,
final
Object
obj6
,
final
Object
obj7
,
final
Throwable
exception
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
112
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
.
append
(
obj5
)
.
append
(
obj6
)
.
append
(
obj7
)
,
exception
)
;
}
}
public
void
log
(
final
int
level
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
,
final
Object
obj5
,
final
Object
obj6
,
final
Object
obj7
,
final
Object
obj8
,
final
Throwable
exception
)
{
if
(
check
(
level
)
)
{
log
(
level
,
new
StringBuffer
(
128
)
.
append
(
obj1
)
.
append
(
obj2
)
.
append
(
obj3
)
.
append
(
obj4
)
.
append
(
obj5
)
.
append
(
obj6
)
.
append
(
obj7
)
.
append
(
obj8
)
,
exception
)
;
}
}
public
void
logFormatted
(
final
int
level
,
final
String
message
,
final
Object
obj1
)
{
commonLogFormatted
(
level
,
message
,
new
Object
[
]
{
obj1
}
)
;
}
public
void
logFormatted
(
final
int
level
,
final
String
message
,
final
Object
obj1
,
final
Object
obj2
)
{
commonLogFormatted
(
level
,
message
,
new
Object
[
]
{
obj1
,
obj2
}
)
;
}
public
void
logFormatted
(
final
int
level
,
final
String
message
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
)
{
commonLogFormatted
(
level
,
message
,
new
Object
[
]
{
obj1
,
obj2
,
obj3
}
)
;
}
public
void
logFormatted
(
final
int
level
,
final
String
message
,
final
Object
obj1
,
final
Object
obj2
,
final
Object
obj3
,
final
Object
obj4
)
{
commonLogFormatted
(
level
,
message
,
new
Object
[
]
{
obj1
,
obj2
,
obj3
,
obj4
}
)
;
}
private
void
commonLogFormatted
(
final
int
level
,
final
String
message
,
final
Object
[
]
unflatParams
)
{
if
(
check
(
level
)
)
{
Object
[
]
params
=
flattenArrays
(
unflatParams
)
;
if
(
params
[
params
.
length
-
1
]
instanceof
Throwable
)
{
log
(
level
,
StringUtil
.
format
(
message
,
params
)
,
(
Throwable
)
params
[
params
.
length
-
1
]
)
;
}
else
{
log
(
level
,
StringUtil
.
format
(
message
,
params
)
)
;
}
}
}
private
Object
[
]
flattenArrays
(
final
Object
[
]
objects
)
{
List
results
=
new
ArrayList
(
)
;
for
(
int
i
=
0
;
i
<
objects
.
length
;
i
++
)
{
results
.
addAll
(
objectToObjectArray
(
objects
[
i
]
)
)
;
}
return
(
Object
[
]
)
results
.
toArray
(
new
Object
[
results
.
size
(
)
]
)
;
}
private
List
objectToObjectArray
(
Object
object
)
{
List
results
=
new
ArrayList
(
)
;
if
(
object
instanceof
byte
[
]
)
{
byte
[
]
array
=
(
byte
[
]
)
object
;
for
(
int
j
=
0
;
j
<
array
.
length
;
j
++
)
{
results
.
add
(
new
Byte
(
array
[
j
]
)
)
;
}
}
if
(
object
instanceof
char
[
]
)
{
char
[
]
array
=
(
char
[
]
)
object
;
for
(
int
j
=
0
;
j
<
array
.
length
;
j
++
)
{
results
.
add
(
new
Character
(
array
[
j
]
)
)
;
}
}
else
if
(
object
instanceof
short
[
]
)
{
short
[
]
array
=
(
short
[
]
)
object
;
for
(
int
j
=
0
;
j
<
array
.
length
;
j
++
)
{
results
.
add
(
new
Short
(
array
[
j
]
)
)
;
}
}
else
if
(
object
instanceof
int
[
]
)
{
int
[
]
array
=
(
int
[
]
)
object
;
for
(
int
j
=
0
;
j
<
array
.
length
;
j
++
)
{
results
.
add
(
new
Integer
(
array
[
j
]
)
)
;
}
}
else
if
(
object
instanceof
long
[
]
)
{
long
[
]
array
=
(
long
[
]
)
object
;
for
(
int
j
=
0
;
j
<
array
.
length
;
j
++
)
{
results
.
add
(
new
Long
(
array
[
j
]
)
)
;
}
}
else
if
(
object
instanceof
float
[
]
)
{
float
[
]
array
=
(
float
[
]
)
object
;
for
(
int
j
=
0
;
j
<
array
.
length
;
j
++
)
{
results
.
add
(
new
Float
(
array
[
j
]
)
)
;
}
}
else
if
(
object
instanceof
double
[
]
)
{
double
[
]
array
=
(
double
[
]
)
object
;
for
(
int
j
=
0
;
j
<
array
.
length
;
j
++
)
{
results
.
add
(
new
Double
(
array
[
j
]
)
)
;
}
}
else
if
(
object
instanceof
Object
[
]
)
{
Object
[
]
array
=
(
Object
[
]
)
object
;
for
(
int
j
=
0
;
j
<
array
.
length
;
j
++
)
{
results
.
add
(
array
[
j
]
)
;
}
}
else
{
results
.
add
(
object
)
;
}
return
results
;
}
}
