package
org
.
apache
.
poi
.
hssf
.
model
;
import
org
.
apache
.
poi
.
hssf
.
record
.
*
;
import
org
.
apache
.
poi
.
hssf
.
usermodel
.
HSSFComment
;
import
org
.
apache
.
poi
.
hssf
.
usermodel
.
HSSFShape
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
ddf
.
*
;
import
java
.
util
.
List
;
import
java
.
util
.
Iterator
;
public
class
CommentShape
extends
TextboxShape
{
private
NoteRecord
note
;
public
CommentShape
(
HSSFComment
hssfShape
,
int
shapeId
)
{
super
(
hssfShape
,
shapeId
)
;
note
=
createNoteRecord
(
hssfShape
,
shapeId
)
;
ObjRecord
obj
=
getObjRecord
(
)
;
List
records
=
obj
.
getSubRecords
(
)
;
int
cmoIdx
=
0
;
for
(
int
i
=
0
;
i
<
records
.
size
(
)
;
i
++
)
{
Object
r
=
records
.
get
(
i
)
;
if
(
r
instanceof
CommonObjectDataSubRecord
)
{
CommonObjectDataSubRecord
cmo
=
(
CommonObjectDataSubRecord
)
r
;
cmo
.
setAutofill
(
false
)
;
cmoIdx
=
i
;
}
}
NoteStructureSubRecord
u
=
new
NoteStructureSubRecord
(
)
;
obj
.
addSubRecord
(
cmoIdx
+
1
,
u
)
;
}
private
NoteRecord
createNoteRecord
(
HSSFComment
shape
,
int
shapeId
)
{
NoteRecord
note
=
new
NoteRecord
(
)
;
note
.
setColumn
(
shape
.
getColumn
(
)
)
;
note
.
setRow
(
(
short
)
shape
.
getRow
(
)
)
;
note
.
setFlags
(
shape
.
isVisible
(
)
?
NoteRecord
.
NOTE_VISIBLE
:
NoteRecord
.
NOTE_HIDDEN
)
;
note
.
setShapeId
(
(
short
)
shapeId
)
;
note
.
setAuthor
(
shape
.
getAuthor
(
)
==
null
?
""
:
shape
.
getAuthor
(
)
)
;
return
note
;
}
protected
int
addStandardOptions
(
HSSFShape
shape
,
EscherOptRecord
opt
)
{
super
.
addStandardOptions
(
shape
,
opt
)
;
java
.
util
.
List
props
=
opt
.
getEscherProperties
(
)
;
for
(
Iterator
iterator
=
props
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
EscherProperty
prop
=
(
EscherProperty
)
iterator
.
next
(
)
;
switch
(
prop
.
getId
(
)
)
{
case
EscherProperties
.
TEXT__TEXTLEFT
:
case
EscherProperties
.
TEXT__TEXTRIGHT
:
case
EscherProperties
.
TEXT__TEXTTOP
:
case
EscherProperties
.
TEXT__TEXTBOTTOM
:
case
EscherProperties
.
GROUPSHAPE__PRINT
:
case
EscherProperties
.
FILL__FILLBACKCOLOR
:
case
EscherProperties
.
LINESTYLE__COLOR
:
iterator
.
remove
(
)
;
break
;
}
}
HSSFComment
comment
=
(
HSSFComment
)
shape
;
opt
.
addEscherProperty
(
new
EscherSimpleProperty
(
EscherProperties
.
GROUPSHAPE__PRINT
,
comment
.
isVisible
(
)
?
0x000A0000
:
0x000A0002
)
)
;
opt
.
addEscherProperty
(
new
EscherSimpleProperty
(
EscherProperties
.
SHADOWSTYLE__SHADOWOBSURED
,
0x00030003
)
)
;
opt
.
addEscherProperty
(
new
EscherSimpleProperty
(
EscherProperties
.
SHADOWSTYLE__COLOR
,
0x00000000
)
)
;
opt
.
sortProperties
(
)
;
return
opt
.
getEscherProperties
(
)
.
size
(
)
;
}
public
NoteRecord
getNoteRecord
(
)
{
return
note
;
}
}
