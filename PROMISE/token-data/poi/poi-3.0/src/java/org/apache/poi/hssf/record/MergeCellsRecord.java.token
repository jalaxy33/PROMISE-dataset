package
org
.
apache
.
poi
.
hssf
.
record
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
MergeCellsRecord
extends
Record
{
public
final
static
short
sid
=
0xe5
;
private
ArrayList
field_2_regions
;
public
MergeCellsRecord
(
)
{
}
public
MergeCellsRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
protected
void
fillFields
(
RecordInputStream
in
)
{
short
numAreas
=
in
.
readShort
(
)
;
field_2_regions
=
new
ArrayList
(
numAreas
+
10
)
;
for
(
int
k
=
0
;
k
<
numAreas
;
k
++
)
{
MergedRegion
region
=
new
MergedRegion
(
in
.
readShort
(
)
,
in
.
readShort
(
)
,
in
.
readShort
(
)
,
in
.
readShort
(
)
)
;
field_2_regions
.
add
(
region
)
;
}
}
public
short
getNumAreas
(
)
{
if
(
field_2_regions
==
null
)
return
0
;
return
(
short
)
field_2_regions
.
size
(
)
;
}
public
void
setNumAreas
(
short
numareas
)
{
}
public
int
addArea
(
int
rowfrom
,
short
colfrom
,
int
rowto
,
short
colto
)
{
if
(
field_2_regions
==
null
)
{
field_2_regions
=
new
ArrayList
(
10
)
;
}
MergedRegion
region
=
new
MergedRegion
(
rowfrom
,
rowto
,
colfrom
,
colto
)
;
field_2_regions
.
add
(
region
)
;
return
field_2_regions
.
size
(
)
-
1
;
}
public
void
removeAreaAt
(
int
area
)
{
field_2_regions
.
remove
(
area
)
;
}
public
MergedRegion
getAreaAt
(
int
index
)
{
return
(
MergedRegion
)
field_2_regions
.
get
(
index
)
;
}
public
int
getRecordSize
(
)
{
int
retValue
;
retValue
=
6
+
(
8
*
field_2_regions
.
size
(
)
)
;
return
retValue
;
}
public
short
getSid
(
)
{
return
sid
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
int
recordsize
=
getRecordSize
(
)
;
int
pos
=
6
;
LittleEndian
.
putShort
(
data
,
offset
+
0
,
sid
)
;
LittleEndian
.
putShort
(
data
,
offset
+
2
,
(
short
)
(
recordsize
-
4
)
)
;
LittleEndian
.
putShort
(
data
,
offset
+
4
,
getNumAreas
(
)
)
;
for
(
int
k
=
0
;
k
<
getNumAreas
(
)
;
k
++
)
{
MergedRegion
region
=
getAreaAt
(
k
)
;
LittleEndian
.
putShort
(
data
,
offset
+
pos
,
(
short
)
region
.
row_from
)
;
pos
+=
2
;
LittleEndian
.
putShort
(
data
,
offset
+
pos
,
(
short
)
region
.
row_to
)
;
pos
+=
2
;
LittleEndian
.
putShort
(
data
,
offset
+
pos
,
region
.
col_from
)
;
pos
+=
2
;
LittleEndian
.
putShort
(
data
,
offset
+
pos
,
region
.
col_to
)
;
pos
+=
2
;
}
return
recordsize
;
}
public
String
toString
(
)
{
StringBuffer
retval
=
new
StringBuffer
(
)
;
retval
.
append
(
"[MERGEDCELLS]"
)
.
append
(
"\n"
)
;
retval
.
append
(
"     .sid        ="
)
.
append
(
sid
)
.
append
(
"\n"
)
;
retval
.
append
(
"     .numregions ="
)
.
append
(
getNumAreas
(
)
)
.
append
(
"\n"
)
;
for
(
int
k
=
0
;
k
<
getNumAreas
(
)
;
k
++
)
{
MergedRegion
region
=
(
MergedRegion
)
field_2_regions
.
get
(
k
)
;
retval
.
append
(
"     .rowfrom    ="
)
.
append
(
region
.
row_from
)
.
append
(
"\n"
)
;
retval
.
append
(
"     .colfrom    ="
)
.
append
(
region
.
col_from
)
.
append
(
"\n"
)
;
retval
.
append
(
"     .rowto      ="
)
.
append
(
region
.
row_to
)
.
append
(
"\n"
)
;
retval
.
append
(
"     .colto      ="
)
.
append
(
region
.
col_to
)
.
append
(
"\n"
)
;
}
retval
.
append
(
"[MERGEDCELLS]"
)
.
append
(
"\n"
)
;
return
retval
.
toString
(
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A MERGEDCELLS RECORD!! "
+
id
)
;
}
}
public
class
MergedRegion
{
public
MergedRegion
(
int
row_from
,
int
row_to
,
short
col_from
,
short
col_to
)
{
this
.
row_from
=
row_from
;
this
.
row_to
=
row_to
;
this
.
col_from
=
col_from
;
this
.
col_to
=
col_to
;
}
public
int
row_from
;
public
int
row_to
;
public
short
col_from
;
public
short
col_to
;
}
public
Object
clone
(
)
{
MergeCellsRecord
rec
=
new
MergeCellsRecord
(
)
;
rec
.
field_2_regions
=
new
ArrayList
(
)
;
Iterator
iterator
=
field_2_regions
.
iterator
(
)
;
while
(
iterator
.
hasNext
(
)
)
{
MergedRegion
oldRegion
=
(
MergedRegion
)
iterator
.
next
(
)
;
rec
.
addArea
(
oldRegion
.
row_from
,
oldRegion
.
col_from
,
oldRegion
.
row_to
,
oldRegion
.
col_to
)
;
}
return
rec
;
}
}
