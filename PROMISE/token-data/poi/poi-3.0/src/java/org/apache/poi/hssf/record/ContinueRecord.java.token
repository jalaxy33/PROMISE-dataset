package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
ContinueRecord
extends
Record
{
public
final
static
short
sid
=
0x003C
;
private
byte
[
]
field_1_data
;
public
ContinueRecord
(
)
{
}
public
ContinueRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
public
byte
[
]
serialize
(
)
{
byte
[
]
retval
=
new
byte
[
field_1_data
.
length
+
4
]
;
serialize
(
0
,
retval
)
;
return
retval
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
offset
+
2
,
(
short
)
field_1_data
.
length
)
;
System
.
arraycopy
(
field_1_data
,
0
,
data
,
offset
+
4
,
field_1_data
.
length
)
;
return
field_1_data
.
length
+
4
;
}
public
void
setData
(
byte
[
]
data
)
{
field_1_data
=
data
;
}
public
byte
[
]
getData
(
)
{
return
field_1_data
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
ContinueRecord
.
sid
)
{
throw
new
RecordFormatException
(
"Not a Continue Record"
)
;
}
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[CONTINUE RECORD]\n"
)
;
buffer
.
append
(
"    .id        = "
)
.
append
(
Integer
.
toHexString
(
sid
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/CONTINUE RECORD]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
short
getSid
(
)
{
return
sid
;
}
protected
void
fillFields
(
RecordInputStream
in
)
{
field_1_data
=
in
.
readRemainder
(
)
;
}
public
Object
clone
(
)
{
ContinueRecord
clone
=
new
ContinueRecord
(
)
;
clone
.
setData
(
field_1_data
)
;
return
clone
;
}
}
