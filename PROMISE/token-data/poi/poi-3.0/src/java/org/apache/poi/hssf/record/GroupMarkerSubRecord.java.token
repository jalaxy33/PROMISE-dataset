package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
*
;
public
class
GroupMarkerSubRecord
extends
SubRecord
{
public
final
static
short
sid
=
0x06
;
private
byte
[
]
reserved
=
new
byte
[
0
]
;
public
GroupMarkerSubRecord
(
)
{
}
public
GroupMarkerSubRecord
(
RecordInputStream
in
)
{
super
(
in
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not a Group Marker record"
)
;
}
}
protected
void
fillFields
(
RecordInputStream
in
)
{
reserved
=
in
.
readRemainder
(
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
String
nl
=
System
.
getProperty
(
"line.separator"
)
;
buffer
.
append
(
"[ftGmo]"
+
nl
)
;
buffer
.
append
(
"  reserved = "
)
.
append
(
HexDump
.
toHex
(
reserved
)
)
.
append
(
nl
)
;
buffer
.
append
(
"[/ftGmo]"
+
nl
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
getRecordSize
(
)
-
4
)
)
;
System
.
arraycopy
(
reserved
,
0
,
data
,
offset
+
4
,
getRecordSize
(
)
-
4
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
4
+
reserved
.
length
;
}
public
short
getSid
(
)
{
return
sid
;
}
public
Object
clone
(
)
{
GroupMarkerSubRecord
rec
=
new
GroupMarkerSubRecord
(
)
;
rec
.
reserved
=
new
byte
[
reserved
.
length
]
;
for
(
int
i
=
0
;
i
<
reserved
.
length
;
i
++
)
rec
.
reserved
[
i
]
=
reserved
[
i
]
;
return
rec
;
}
}
