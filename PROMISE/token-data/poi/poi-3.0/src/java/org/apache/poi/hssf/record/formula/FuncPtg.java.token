package
org
.
apache
.
poi
.
hssf
.
record
.
formula
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RecordInputStream
;
public
class
FuncPtg
extends
AbstractFunctionPtg
{
public
final
static
byte
sid
=
0x21
;
public
final
static
int
SIZE
=
3
;
private
int
numParams
=
0
;
private
FuncPtg
(
)
{
}
public
FuncPtg
(
RecordInputStream
in
)
{
field_2_fnc_index
=
in
.
readShort
(
)
;
try
{
numParams
=
(
(
Integer
)
functionData
[
field_2_fnc_index
]
[
2
]
)
.
intValue
(
)
;
}
catch
(
NullPointerException
npe
)
{
numParams
=
0
;
}
}
public
void
writeBytes
(
byte
[
]
array
,
int
offset
)
{
array
[
offset
+
0
]
=
(
byte
)
(
sid
+
ptgClass
)
;
LittleEndian
.
putShort
(
array
,
offset
+
1
,
field_2_fnc_index
)
;
}
public
int
getNumberOfOperands
(
)
{
return
numParams
;
}
public
Object
clone
(
)
{
FuncPtg
ptg
=
new
FuncPtg
(
)
;
ptg
.
field_2_fnc_index
=
field_2_fnc_index
;
ptg
.
setClass
(
ptgClass
)
;
return
ptg
;
}
public
int
getSize
(
)
{
return
SIZE
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"<FunctionPtg>"
)
.
append
(
"\n"
)
.
append
(
"   numArgs(internal)="
)
.
append
(
this
.
numParams
)
.
append
(
"\n"
)
.
append
(
"      name         ="
)
.
append
(
lookupName
(
field_2_fnc_index
)
)
.
append
(
"\n"
)
.
append
(
"   field_2_fnc_index="
)
.
append
(
field_2_fnc_index
)
.
append
(
"\n"
)
.
append
(
"</FunctionPtg>"
)
;
return
buffer
.
toString
(
)
;
}
}
