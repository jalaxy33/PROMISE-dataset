package
org
.
apache
.
poi
.
poifs
.
storage
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
poifs
.
common
.
POIFSConstants
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
OfficeXmlFileException
;
import
org
.
apache
.
poi
.
util
.
IOUtils
;
import
org
.
apache
.
poi
.
util
.
IntegerField
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
LittleEndianConsts
;
import
org
.
apache
.
poi
.
util
.
LongField
;
import
org
.
apache
.
poi
.
util
.
ShortField
;
public
class
HeaderBlockReader
implements
HeaderBlockConstants
{
private
IntegerField
_bat_count
;
private
IntegerField
_property_start
;
private
IntegerField
_sbat_start
;
private
IntegerField
_xbat_start
;
private
IntegerField
_xbat_count
;
private
byte
[
]
_data
;
public
HeaderBlockReader
(
final
InputStream
stream
)
throws
IOException
{
_data
=
new
byte
[
POIFSConstants
.
BIG_BLOCK_SIZE
]
;
int
byte_count
=
IOUtils
.
readFully
(
stream
,
_data
)
;
if
(
byte_count
!=
POIFSConstants
.
BIG_BLOCK_SIZE
)
{
if
(
byte_count
==
-
1
)
byte_count
=
0
;
String
type
=
" byte"
+
(
(
byte_count
==
1
)
?
(
""
)
:
(
"s"
)
)
;
throw
new
IOException
(
"Unable to read entire header; "
+
byte_count
+
type
+
" read; expected "
+
POIFSConstants
.
BIG_BLOCK_SIZE
+
" bytes"
)
;
}
LongField
signature
=
new
LongField
(
_signature_offset
,
_data
)
;
if
(
signature
.
get
(
)
!=
_signature
)
{
if
(
_data
[
0
]
==
0x50
&&
_data
[
1
]
==
0x4b
&&
_data
[
2
]
==
0x03
&&
_data
[
3
]
==
0x04
)
{
throw
new
OfficeXmlFileException
(
"The supplied data appears to be in the Office 2007+ XML. POI only supports OLE2 Office documents"
)
;
}
throw
new
IOException
(
"Invalid header signature; read "
+
signature
.
get
(
)
+
", expected "
+
_signature
)
;
}
_bat_count
=
new
IntegerField
(
_bat_count_offset
,
_data
)
;
_property_start
=
new
IntegerField
(
_property_start_offset
,
_data
)
;
_sbat_start
=
new
IntegerField
(
_sbat_start_offset
,
_data
)
;
_xbat_start
=
new
IntegerField
(
_xbat_start_offset
,
_data
)
;
_xbat_count
=
new
IntegerField
(
_xbat_count_offset
,
_data
)
;
}
public
int
getPropertyStart
(
)
{
return
_property_start
.
get
(
)
;
}
public
int
getSBATStart
(
)
{
return
_sbat_start
.
get
(
)
;
}
public
int
getBATCount
(
)
{
return
_bat_count
.
get
(
)
;
}
public
int
[
]
getBATArray
(
)
{
int
[
]
result
=
new
int
[
_max_bats_in_header
]
;
int
offset
=
_bat_array_offset
;
for
(
int
j
=
0
;
j
<
_max_bats_in_header
;
j
++
)
{
result
[
j
]
=
LittleEndian
.
getInt
(
_data
,
offset
)
;
offset
+=
LittleEndianConsts
.
INT_SIZE
;
}
return
result
;
}
public
int
getXBATCount
(
)
{
return
_xbat_count
.
get
(
)
;
}
public
int
getXBATIndex
(
)
{
return
_xbat_start
.
get
(
)
;
}
}
