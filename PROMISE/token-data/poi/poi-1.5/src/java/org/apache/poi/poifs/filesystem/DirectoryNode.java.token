package
org
.
apache
.
poi
.
poifs
.
filesystem
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
poifs
.
dev
.
POIFSViewable
;
import
org
.
apache
.
poi
.
poifs
.
property
.
DirectoryProperty
;
import
org
.
apache
.
poi
.
poifs
.
property
.
DocumentProperty
;
import
org
.
apache
.
poi
.
poifs
.
property
.
Property
;
public
class
DirectoryNode
extends
EntryNode
implements
DirectoryEntry
,
POIFSViewable
{
private
Map
_entries
;
private
POIFSFileSystem
_filesystem
;
private
POIFSDocumentPath
_path
;
DirectoryNode
(
final
DirectoryProperty
property
,
final
POIFSFileSystem
filesystem
,
final
DirectoryNode
parent
)
{
super
(
property
,
parent
)
;
if
(
parent
==
null
)
{
_path
=
new
POIFSDocumentPath
(
)
;
}
else
{
_path
=
new
POIFSDocumentPath
(
parent
.
_path
,
new
String
[
]
{
property
.
getName
(
)
}
)
;
}
_filesystem
=
filesystem
;
_entries
=
new
HashMap
(
)
;
Iterator
iter
=
property
.
getChildren
(
)
;
while
(
iter
.
hasNext
(
)
)
{
Property
child
=
(
Property
)
iter
.
next
(
)
;
Entry
childNode
=
null
;
if
(
child
.
isDirectory
(
)
)
{
childNode
=
new
DirectoryNode
(
(
DirectoryProperty
)
child
,
_filesystem
,
this
)
;
}
else
{
childNode
=
new
DocumentNode
(
(
DocumentProperty
)
child
,
this
)
;
}
_entries
.
put
(
childNode
.
getName
(
)
,
childNode
)
;
}
}
public
POIFSDocumentPath
getPath
(
)
{
return
_path
;
}
DocumentEntry
createDocument
(
final
POIFSDocument
document
)
throws
IOException
{
DocumentProperty
property
=
document
.
getDocumentProperty
(
)
;
DocumentNode
rval
=
new
DocumentNode
(
property
,
this
)
;
(
(
DirectoryProperty
)
getProperty
(
)
)
.
addChild
(
property
)
;
_filesystem
.
addDocument
(
document
)
;
_entries
.
put
(
property
.
getName
(
)
,
rval
)
;
return
rval
;
}
boolean
changeName
(
final
String
oldName
,
final
String
newName
)
{
boolean
rval
=
false
;
EntryNode
child
=
(
EntryNode
)
_entries
.
get
(
oldName
)
;
if
(
child
!=
null
)
{
rval
=
(
(
DirectoryProperty
)
getProperty
(
)
)
.
changeName
(
child
.
getProperty
(
)
,
newName
)
;
if
(
rval
)
{
_entries
.
remove
(
oldName
)
;
_entries
.
put
(
child
.
getProperty
(
)
.
getName
(
)
,
child
)
;
}
}
return
rval
;
}
boolean
deleteEntry
(
final
EntryNode
entry
)
{
boolean
rval
=
(
(
DirectoryProperty
)
getProperty
(
)
)
.
deleteChild
(
entry
.
getProperty
(
)
)
;
if
(
rval
)
{
_entries
.
remove
(
entry
.
getName
(
)
)
;
_filesystem
.
remove
(
entry
)
;
}
return
rval
;
}
public
Iterator
getEntries
(
)
{
return
_entries
.
values
(
)
.
iterator
(
)
;
}
public
boolean
isEmpty
(
)
{
return
_entries
.
isEmpty
(
)
;
}
public
int
getEntryCount
(
)
{
return
_entries
.
size
(
)
;
}
public
Entry
getEntry
(
final
String
name
)
throws
FileNotFoundException
{
Entry
rval
=
null
;
if
(
name
!=
null
)
{
rval
=
(
Entry
)
_entries
.
get
(
name
)
;
}
if
(
rval
==
null
)
{
throw
new
FileNotFoundException
(
"no such entry: \""
+
name
+
"\""
)
;
}
return
rval
;
}
public
DocumentEntry
createDocument
(
final
String
name
,
final
InputStream
stream
)
throws
IOException
{
return
createDocument
(
new
POIFSDocument
(
name
,
stream
)
)
;
}
public
DocumentEntry
createDocument
(
final
String
name
,
final
int
size
,
final
POIFSWriterListener
writer
)
throws
IOException
{
return
createDocument
(
new
POIFSDocument
(
name
,
size
,
_path
,
writer
)
)
;
}
public
DirectoryEntry
createDirectory
(
final
String
name
)
throws
IOException
{
DirectoryProperty
property
=
new
DirectoryProperty
(
name
)
;
DirectoryNode
rval
=
new
DirectoryNode
(
property
,
_filesystem
,
this
)
;
(
(
DirectoryProperty
)
getProperty
(
)
)
.
addChild
(
property
)
;
_filesystem
.
addDirectory
(
property
)
;
_entries
.
put
(
name
,
rval
)
;
return
rval
;
}
public
boolean
isDirectoryEntry
(
)
{
return
true
;
}
protected
boolean
isDeleteOK
(
)
{
return
isEmpty
(
)
;
}
public
Object
[
]
getViewableArray
(
)
{
return
new
Object
[
0
]
;
}
public
Iterator
getViewableIterator
(
)
{
List
components
=
new
ArrayList
(
)
;
components
.
add
(
getProperty
(
)
)
;
SortedMap
sortedEntries
=
new
TreeMap
(
_entries
)
;
Iterator
iter
=
sortedEntries
.
values
(
)
.
iterator
(
)
;
while
(
iter
.
hasNext
(
)
)
{
components
.
add
(
iter
.
next
(
)
)
;
}
return
components
.
iterator
(
)
;
}
public
boolean
preferArray
(
)
{
return
false
;
}
public
String
getShortDescription
(
)
{
return
getName
(
)
;
}
}
