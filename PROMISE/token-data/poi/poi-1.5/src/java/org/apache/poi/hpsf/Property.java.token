package
org
.
apache
.
poi
.
hpsf
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
hpsf
.
littleendian
.
*
;
public
class
Property
{
private
int
id
;
public
int
getID
(
)
{
return
id
;
}
private
int
type
;
public
int
getType
(
)
{
return
type
;
}
private
Object
value
;
public
Object
getValue
(
)
{
return
value
;
}
public
Property
(
final
int
id
,
final
byte
[
]
src
,
final
int
offset
,
final
int
length
)
{
this
.
id
=
id
;
if
(
id
==
0
)
{
value
=
readDictionary
(
src
,
offset
,
length
)
;
return
;
}
int
o
=
offset
;
type
=
new
DWord
(
src
,
o
)
.
intValue
(
)
;
o
+=
DWord
.
LENGTH
;
switch
(
type
)
{
case
Variant
.
VT_I4
:
{
value
=
new
Integer
(
new
DWord
(
src
,
o
)
.
intValue
(
)
)
;
break
;
}
case
Variant
.
VT_FILETIME
:
{
final
int
low
=
new
DWord
(
src
,
o
)
.
intValue
(
)
;
o
+=
DWord
.
LENGTH
;
final
int
high
=
new
DWord
(
src
,
o
)
.
intValue
(
)
;
value
=
Util
.
filetimeToDate
(
high
,
low
)
;
break
;
}
case
Variant
.
VT_LPSTR
:
{
final
int
first
=
o
+
DWord
.
LENGTH
;
int
last
=
first
+
new
DWord
(
src
,
o
)
.
intValue
(
)
-
1
;
o
+=
DWord
.
LENGTH
;
while
(
src
[
last
]
==
0
&&
first
<=
last
)
last
--
;
value
=
new
String
(
src
,
first
,
last
-
first
+
1
)
;
break
;
}
default
:
{
final
byte
[
]
v
=
new
byte
[
length
]
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
v
[
i
]
=
src
[
offset
+
i
]
;
value
=
v
;
break
;
}
}
}
protected
Map
readDictionary
(
final
byte
[
]
src
,
final
int
offset
,
final
int
length
)
{
int
o
=
offset
;
final
int
nrEntries
=
new
DWord
(
src
,
o
)
.
intValue
(
)
;
o
+=
DWord
.
LENGTH
;
final
Map
m
=
new
HashMap
(
nrEntries
,
(
float
)
1.0
)
;
for
(
int
i
=
0
;
i
<
nrEntries
;
i
++
)
{
final
Integer
id
=
new
Integer
(
new
DWord
(
src
,
o
)
.
intValue
(
)
)
;
o
+=
DWord
.
LENGTH
;
final
int
sLength
=
new
DWord
(
src
,
o
)
.
intValue
(
)
;
o
+=
DWord
.
LENGTH
;
int
l
=
sLength
;
while
(
src
[
o
+
l
-
1
]
==
0x00
)
l
--
;
final
String
s
=
new
String
(
src
,
o
,
l
)
;
o
+=
sLength
;
m
.
put
(
id
,
s
)
;
}
return
m
;
}
protected
int
readCodePage
(
final
byte
[
]
src
,
final
int
offset
)
{
throw
new
UnsupportedOperationException
(
"FIXME"
)
;
}
}
