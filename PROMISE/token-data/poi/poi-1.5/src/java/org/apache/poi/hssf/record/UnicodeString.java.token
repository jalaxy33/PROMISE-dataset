package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
public
class
UnicodeString
extends
Record
implements
Comparable
{
public
final
static
short
sid
=
0xFFF
;
private
short
field_1_charCount
;
private
byte
field_2_optionflags
;
private
String
field_3_string
;
public
int
hashCode
(
)
{
return
field_1_charCount
;
}
public
boolean
equals
(
Object
o
)
{
if
(
(
o
==
null
)
||
(
o
.
getClass
(
)
!=
this
.
getClass
(
)
)
)
{
return
false
;
}
UnicodeString
other
=
(
UnicodeString
)
o
;
return
(
(
field_1_charCount
==
other
.
field_1_charCount
)
&&
(
field_2_optionflags
==
other
.
field_2_optionflags
)
&&
field_3_string
.
equals
(
other
.
field_3_string
)
)
;
}
public
UnicodeString
(
)
{
}
public
UnicodeString
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
UnicodeString
(
short
id
,
short
size
,
byte
[
]
data
,
String
prefix
)
{
this
(
id
,
size
,
data
)
;
field_3_string
=
prefix
+
field_3_string
;
setCharCount
(
)
;
}
protected
void
validateSid
(
short
id
)
{
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
)
{
field_1_charCount
=
LittleEndian
.
getShort
(
data
,
0
)
;
field_2_optionflags
=
data
[
2
]
;
if
(
(
field_2_optionflags
&
1
)
==
0
)
{
field_3_string
=
new
String
(
data
,
3
,
getCharCount
(
)
)
;
}
else
{
char
[
]
array
=
new
char
[
getCharCount
(
)
]
;
for
(
int
j
=
0
;
j
<
array
.
length
;
j
++
)
{
array
[
j
]
=
(
char
)
LittleEndian
.
getShort
(
data
,
3
+
(
j
*
2
)
)
;
}
field_3_string
=
new
String
(
array
)
;
}
}
public
short
getCharCount
(
)
{
return
field_1_charCount
;
}
public
void
setCharCount
(
short
cc
)
{
field_1_charCount
=
cc
;
}
public
void
setCharCount
(
)
{
field_1_charCount
=
(
short
)
field_3_string
.
length
(
)
;
}
public
byte
getOptionFlags
(
)
{
return
field_2_optionflags
;
}
public
void
setOptionFlags
(
byte
of
)
{
field_2_optionflags
=
of
;
}
public
String
getString
(
)
{
return
field_3_string
;
}
public
void
setString
(
String
string
)
{
field_3_string
=
string
;
if
(
getCharCount
(
)
<
field_3_string
.
length
(
)
)
{
setCharCount
(
)
;
}
}
public
String
toString
(
)
{
return
getString
(
)
;
}
public
String
getDebugInfo
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[UNICODESTRING]\n"
)
;
buffer
.
append
(
"    .charcount       = "
)
.
append
(
Integer
.
toHexString
(
getCharCount
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .optionflags     = "
)
.
append
(
Integer
.
toHexString
(
getOptionFlags
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .string          = "
)
.
append
(
getString
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/UNICODESTRING]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
int
charsize
=
1
;
if
(
getOptionFlags
(
)
==
1
)
{
charsize
=
2
;
}
LittleEndian
.
putShort
(
data
,
0
+
offset
,
getCharCount
(
)
)
;
data
[
2
+
offset
]
=
getOptionFlags
(
)
;
if
(
getOptionFlags
(
)
==
0
)
{
StringUtil
.
putCompressedUnicode
(
getString
(
)
,
data
,
0x3
+
offset
)
;
}
else
{
StringUtil
.
putUncompressedUnicode
(
getString
(
)
,
data
,
0x3
+
offset
)
;
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
int
charsize
=
1
;
if
(
getOptionFlags
(
)
==
1
)
{
charsize
=
2
;
}
return
3
+
(
getString
(
)
.
length
(
)
*
charsize
)
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
}
public
int
compareTo
(
Object
obj
)
{
UnicodeString
str
=
(
UnicodeString
)
obj
;
return
this
.
getString
(
)
.
compareTo
(
str
.
getString
(
)
)
;
}
int
maxBrokenLength
(
final
int
proposedBrokenLength
)
{
int
rval
=
proposedBrokenLength
;
if
(
(
field_2_optionflags
&
1
)
==
1
)
{
int
proposedStringLength
=
proposedBrokenLength
-
3
;
if
(
(
proposedStringLength
%
2
)
==
1
)
{
proposedStringLength
--
;
}
rval
=
proposedStringLength
+
3
;
}
return
rval
;
}
}
