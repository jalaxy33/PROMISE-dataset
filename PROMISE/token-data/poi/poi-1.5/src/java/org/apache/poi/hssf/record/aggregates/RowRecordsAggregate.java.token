package
org
.
apache
.
poi
.
hssf
.
record
.
aggregates
;
import
org
.
apache
.
poi
.
hssf
.
record
.
Record
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RowRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
UnknownRecord
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
public
class
RowRecordsAggregate
extends
Record
{
int
firstrow
=
-
1
;
int
lastrow
=
-
1
;
HashMap
records
=
null
;
int
size
=
0
;
public
RowRecordsAggregate
(
)
{
records
=
new
HashMap
(
)
;
}
public
void
insertRow
(
RowRecord
row
)
{
size
+=
row
.
getRecordSize
(
)
;
records
.
put
(
row
,
row
)
;
if
(
(
row
.
getRowNumber
(
)
<
firstrow
)
||
(
firstrow
==
-
1
)
)
{
firstrow
=
row
.
getRowNumber
(
)
;
}
if
(
(
row
.
getRowNumber
(
)
>
lastrow
)
||
(
lastrow
==
-
1
)
)
{
lastrow
=
row
.
getRowNumber
(
)
;
}
}
public
void
removeRow
(
RowRecord
row
)
{
size
-=
row
.
getRecordSize
(
)
;
records
.
remove
(
row
)
;
}
public
RowRecord
getRow
(
int
rownum
)
{
RowRecord
row
=
new
RowRecord
(
)
;
row
.
setRowNumber
(
(
short
)
rownum
)
;
return
(
RowRecord
)
records
.
get
(
row
)
;
}
public
int
getPhysicalNumberOfRows
(
)
{
return
records
.
size
(
)
;
}
public
int
getFirstRowNum
(
)
{
return
firstrow
;
}
public
int
getLastRowNum
(
)
{
return
lastrow
;
}
public
int
construct
(
int
offset
,
List
records
)
{
int
k
=
0
;
for
(
k
=
offset
;
k
<
records
.
size
(
)
;
k
++
)
{
Record
rec
=
(
Record
)
records
.
get
(
k
)
;
if
(
!
rec
.
isInValueSection
(
)
&&
!
(
rec
instanceof
UnknownRecord
)
)
{
break
;
}
if
(
rec
.
getSid
(
)
==
RowRecord
.
sid
)
{
insertRow
(
(
RowRecord
)
rec
)
;
}
}
return
k
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
Iterator
itr
=
records
.
values
(
)
.
iterator
(
)
;
int
pos
=
offset
;
while
(
itr
.
hasNext
(
)
)
{
pos
+=
(
(
Record
)
itr
.
next
(
)
)
.
serialize
(
pos
,
data
)
;
}
return
pos
-
offset
;
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
}
protected
void
validateSid
(
short
id
)
{
}
public
short
getSid
(
)
{
return
-
1000
;
}
public
int
getRecordSize
(
)
{
return
size
;
}
public
Iterator
getIterator
(
)
{
return
records
.
values
(
)
.
iterator
(
)
;
}
}
