package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
import
org
.
apache
.
poi
.
util
.
BitField
;
public
class
FontRecord
extends
Record
{
public
final
static
short
sid
=
0x31
;
public
final
static
short
SS_NONE
=
0
;
public
final
static
short
SS_SUPER
=
1
;
public
final
static
short
SS_SUB
=
2
;
public
final
static
byte
U_NONE
=
0
;
public
final
static
byte
U_SINGLE
=
1
;
public
final
static
byte
U_DOUBLE
=
2
;
public
final
static
byte
U_SINGLE_ACCOUNTING
=
0x21
;
public
final
static
byte
U_DOUBLE_ACCOUNTING
=
0x22
;
private
short
field_1_font_height
;
private
short
field_2_attributes
;
static
final
private
BitField
italic
=
new
BitField
(
0x02
)
;
static
final
private
BitField
strikeout
=
new
BitField
(
0x08
)
;
static
final
private
BitField
macoutline
=
new
BitField
(
0x10
)
;
static
final
private
BitField
macshadow
=
new
BitField
(
0x20
)
;
private
short
field_3_color_palette_index
;
private
short
field_4_bold_weight
;
private
short
field_5_super_sub_script
;
private
byte
field_6_underline
;
private
byte
field_7_family
;
private
byte
field_8_charset
;
private
byte
field_9_zero
=
0
;
private
byte
field_10_font_name_len
;
private
String
field_11_font_name
;
public
FontRecord
(
)
{
}
public
FontRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
FontRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A FONT RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_font_height
=
LittleEndian
.
getShort
(
data
,
0
+
offset
)
;
field_2_attributes
=
LittleEndian
.
getShort
(
data
,
2
+
offset
)
;
field_3_color_palette_index
=
LittleEndian
.
getShort
(
data
,
4
+
offset
)
;
field_4_bold_weight
=
LittleEndian
.
getShort
(
data
,
6
+
offset
)
;
field_5_super_sub_script
=
LittleEndian
.
getShort
(
data
,
8
+
offset
)
;
field_6_underline
=
data
[
10
+
offset
]
;
field_7_family
=
data
[
11
+
offset
]
;
field_8_charset
=
data
[
12
+
offset
]
;
field_9_zero
=
data
[
13
+
offset
]
;
field_10_font_name_len
=
data
[
14
+
offset
]
;
if
(
field_10_font_name_len
>
0
)
{
if
(
data
[
15
]
==
0
)
{
field_11_font_name
=
new
String
(
data
,
16
,
LittleEndian
.
ubyteToInt
(
field_10_font_name_len
)
)
;
}
else
{
field_11_font_name
=
StringUtil
.
getFromUnicode
(
data
,
15
,
field_10_font_name_len
)
;
}
}
}
public
void
setFontHeight
(
short
height
)
{
field_1_font_height
=
height
;
}
public
void
setAttributes
(
short
attributes
)
{
field_2_attributes
=
attributes
;
}
public
void
setItalic
(
boolean
italics
)
{
field_2_attributes
=
italic
.
setShortBoolean
(
field_2_attributes
,
italics
)
;
}
public
void
setStrikeout
(
boolean
strike
)
{
field_2_attributes
=
strikeout
.
setShortBoolean
(
field_2_attributes
,
strike
)
;
}
public
void
setMacoutline
(
boolean
mac
)
{
field_2_attributes
=
macoutline
.
setShortBoolean
(
field_2_attributes
,
mac
)
;
}
public
void
setMacshadow
(
boolean
mac
)
{
field_2_attributes
=
macshadow
.
setShortBoolean
(
field_2_attributes
,
mac
)
;
}
public
void
setColorPaletteIndex
(
short
cpi
)
{
field_3_color_palette_index
=
cpi
;
}
public
void
setBoldWeight
(
short
bw
)
{
field_4_bold_weight
=
bw
;
}
public
void
setSuperSubScript
(
short
sss
)
{
field_5_super_sub_script
=
sss
;
}
public
void
setUnderline
(
byte
u
)
{
field_6_underline
=
u
;
}
public
void
setFamily
(
byte
f
)
{
field_7_family
=
f
;
}
public
void
setCharset
(
byte
charset
)
{
field_8_charset
=
charset
;
}
public
void
setFontNameLength
(
byte
len
)
{
field_10_font_name_len
=
len
;
}
public
void
setFontName
(
String
fn
)
{
field_11_font_name
=
fn
;
}
public
short
getFontHeight
(
)
{
return
field_1_font_height
;
}
public
short
getAttributes
(
)
{
return
field_2_attributes
;
}
public
boolean
isItalic
(
)
{
return
italic
.
isSet
(
field_2_attributes
)
;
}
public
boolean
isStruckout
(
)
{
return
strikeout
.
isSet
(
field_2_attributes
)
;
}
public
boolean
isMacoutlined
(
)
{
return
macoutline
.
isSet
(
field_2_attributes
)
;
}
public
boolean
isMacshadowed
(
)
{
return
macshadow
.
isSet
(
field_2_attributes
)
;
}
public
short
getColorPaletteIndex
(
)
{
return
field_3_color_palette_index
;
}
public
short
getBoldWeight
(
)
{
return
field_4_bold_weight
;
}
public
short
getSuperSubScript
(
)
{
return
field_5_super_sub_script
;
}
public
byte
getUnderline
(
)
{
return
field_6_underline
;
}
public
byte
getFamily
(
)
{
return
field_7_family
;
}
public
byte
getCharset
(
)
{
return
field_8_charset
;
}
public
byte
getFontNameLength
(
)
{
return
field_10_font_name_len
;
}
public
String
getFontName
(
)
{
return
field_11_font_name
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[FONT]\n"
)
;
buffer
.
append
(
"    .fontheight      = "
)
.
append
(
Integer
.
toHexString
(
getFontHeight
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .attributes      = "
)
.
append
(
Integer
.
toHexString
(
getAttributes
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"         .italic     = "
)
.
append
(
isItalic
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"         .strikout   = "
)
.
append
(
isStruckout
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"         .macoutlined= "
)
.
append
(
isMacoutlined
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"         .macshadowed= "
)
.
append
(
isMacshadowed
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .colorpalette    = "
)
.
append
(
Integer
.
toHexString
(
getColorPaletteIndex
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .boldweight      = "
)
.
append
(
Integer
.
toHexString
(
getBoldWeight
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .supersubscript  = "
)
.
append
(
Integer
.
toHexString
(
getSuperSubScript
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .underline       = "
)
.
append
(
Integer
.
toHexString
(
getUnderline
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .family          = "
)
.
append
(
Integer
.
toHexString
(
getFamily
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .charset         = "
)
.
append
(
Integer
.
toHexString
(
getCharset
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .namelength      = "
)
.
append
(
Integer
.
toHexString
(
getFontNameLength
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .fontname        = "
)
.
append
(
getFontName
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/FONT]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
int
realflen
=
getFontNameLength
(
)
*
2
;
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
15
+
realflen
+
1
)
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
getFontHeight
(
)
)
;
LittleEndian
.
putShort
(
data
,
6
+
offset
,
getAttributes
(
)
)
;
LittleEndian
.
putShort
(
data
,
8
+
offset
,
getColorPaletteIndex
(
)
)
;
LittleEndian
.
putShort
(
data
,
10
+
offset
,
getBoldWeight
(
)
)
;
LittleEndian
.
putShort
(
data
,
12
+
offset
,
getSuperSubScript
(
)
)
;
data
[
14
+
offset
]
=
getUnderline
(
)
;
data
[
15
+
offset
]
=
getFamily
(
)
;
data
[
16
+
offset
]
=
getCharset
(
)
;
data
[
17
+
offset
]
=
(
(
byte
)
0
)
;
data
[
18
+
offset
]
=
getFontNameLength
(
)
;
data
[
19
+
offset
]
=
(
byte
)
1
;
StringUtil
.
putUncompressedUnicode
(
getFontName
(
)
,
data
,
20
+
offset
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
(
getFontNameLength
(
)
*
2
)
+
20
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
}
