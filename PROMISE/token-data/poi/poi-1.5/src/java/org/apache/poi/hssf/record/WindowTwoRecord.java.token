package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
BitField
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
WindowTwoRecord
extends
Record
{
public
final
static
short
sid
=
0x23e
;
private
short
field_1_options
;
private
BitField
displayFormulas
=
new
BitField
(
0x01
)
;
private
BitField
displayGridlines
=
new
BitField
(
0x02
)
;
private
BitField
displayRowColHeadings
=
new
BitField
(
0x04
)
;
private
BitField
freezePanes
=
new
BitField
(
0x08
)
;
private
BitField
displayZeros
=
new
BitField
(
0x10
)
;
private
BitField
defaultHeader
=
new
BitField
(
0x20
)
;
private
BitField
arabic
=
new
BitField
(
0x40
)
;
private
BitField
displayGuts
=
new
BitField
(
0x80
)
;
private
BitField
freezePanesNoSplit
=
new
BitField
(
0x100
)
;
private
BitField
selected
=
new
BitField
(
0x200
)
;
private
BitField
paged
=
new
BitField
(
0x400
)
;
private
BitField
savedInPageBreakPreview
=
new
BitField
(
0x800
)
;
private
short
field_2_top_row
;
private
short
field_3_left_col
;
private
int
field_4_header_color
;
private
short
field_5_page_break_zoom
;
private
short
field_6_normal_zoom
;
private
int
field_7_reserved
;
public
WindowTwoRecord
(
)
{
}
public
WindowTwoRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
WindowTwoRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A valid WindowTwo RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_options
=
LittleEndian
.
getShort
(
data
,
0
+
offset
)
;
field_2_top_row
=
LittleEndian
.
getShort
(
data
,
2
+
offset
)
;
field_3_left_col
=
LittleEndian
.
getShort
(
data
,
4
+
offset
)
;
field_4_header_color
=
LittleEndian
.
getInt
(
data
,
6
+
offset
)
;
if
(
size
>
10
)
{
field_5_page_break_zoom
=
LittleEndian
.
getShort
(
data
,
10
+
offset
)
;
field_6_normal_zoom
=
LittleEndian
.
getShort
(
data
,
12
+
offset
)
;
}
if
(
size
>
14
)
{
field_7_reserved
=
LittleEndian
.
getInt
(
data
,
14
+
offset
)
;
}
}
public
void
setOptions
(
short
options
)
{
field_1_options
=
options
;
}
public
void
setDisplayFormulas
(
boolean
formulas
)
{
field_1_options
=
displayFormulas
.
setShortBoolean
(
field_1_options
,
formulas
)
;
}
public
void
setDisplayGridlines
(
boolean
gridlines
)
{
field_1_options
=
displayGridlines
.
setShortBoolean
(
field_1_options
,
gridlines
)
;
}
public
void
setDisplayRowColHeadings
(
boolean
headings
)
{
field_1_options
=
displayRowColHeadings
.
setShortBoolean
(
field_1_options
,
headings
)
;
}
public
void
setFreezePanes
(
boolean
freezepanes
)
{
field_1_options
=
freezePanes
.
setShortBoolean
(
field_1_options
,
freezepanes
)
;
}
public
void
setDisplayZeros
(
boolean
zeros
)
{
field_1_options
=
displayZeros
.
setShortBoolean
(
field_1_options
,
zeros
)
;
}
public
void
setDefaultHeader
(
boolean
header
)
{
field_1_options
=
defaultHeader
.
setShortBoolean
(
field_1_options
,
header
)
;
}
public
void
setArabic
(
boolean
isarabic
)
{
field_1_options
=
arabic
.
setShortBoolean
(
field_1_options
,
isarabic
)
;
}
public
void
setDisplayGuts
(
boolean
guts
)
{
field_1_options
=
displayGuts
.
setShortBoolean
(
field_1_options
,
guts
)
;
}
public
void
setFreezePanesNoSplit
(
boolean
freeze
)
{
field_1_options
=
freezePanesNoSplit
.
setShortBoolean
(
field_1_options
,
freeze
)
;
}
public
void
setSelected
(
boolean
sel
)
{
field_1_options
=
selected
.
setShortBoolean
(
field_1_options
,
sel
)
;
}
public
void
setPaged
(
boolean
p
)
{
field_1_options
=
paged
.
setShortBoolean
(
field_1_options
,
p
)
;
}
public
void
setSavedInPageBreakPreview
(
boolean
p
)
{
field_1_options
=
savedInPageBreakPreview
.
setShortBoolean
(
field_1_options
,
p
)
;
}
public
void
setTopRow
(
short
topRow
)
{
field_2_top_row
=
topRow
;
}
public
void
setLeftCol
(
short
leftCol
)
{
field_3_left_col
=
leftCol
;
}
public
void
setHeaderColor
(
int
color
)
{
field_4_header_color
=
color
;
}
public
void
setPageBreakZoom
(
short
zoom
)
{
field_5_page_break_zoom
=
zoom
;
}
public
void
setNormalZoom
(
short
zoom
)
{
field_6_normal_zoom
=
zoom
;
}
public
void
setReserved
(
int
reserved
)
{
field_7_reserved
=
reserved
;
}
public
short
getOptions
(
)
{
return
field_1_options
;
}
public
boolean
getDisplayFormulas
(
)
{
return
displayFormulas
.
isSet
(
field_1_options
)
;
}
public
boolean
getDisplayGridlines
(
)
{
return
displayGridlines
.
isSet
(
field_1_options
)
;
}
public
boolean
getDisplayRowColHeadings
(
)
{
return
displayRowColHeadings
.
isSet
(
field_1_options
)
;
}
public
boolean
getFreezePanes
(
)
{
return
freezePanes
.
isSet
(
field_1_options
)
;
}
public
boolean
getDisplayZeros
(
)
{
return
displayZeros
.
isSet
(
field_1_options
)
;
}
public
boolean
getDefaultHeader
(
)
{
return
defaultHeader
.
isSet
(
field_1_options
)
;
}
public
boolean
getArabic
(
)
{
return
arabic
.
isSet
(
field_1_options
)
;
}
public
boolean
getDisplayGuts
(
)
{
return
displayGuts
.
isSet
(
field_1_options
)
;
}
public
boolean
getFreezePanesNoSplit
(
)
{
return
freezePanesNoSplit
.
isSet
(
field_1_options
)
;
}
public
boolean
getSelected
(
)
{
return
selected
.
isSet
(
field_1_options
)
;
}
public
boolean
getPaged
(
)
{
return
paged
.
isSet
(
field_1_options
)
;
}
public
boolean
getSavedInPageBreakPreview
(
)
{
return
savedInPageBreakPreview
.
isSet
(
field_1_options
)
;
}
public
short
getTopRow
(
)
{
return
field_2_top_row
;
}
public
short
getLeftCol
(
)
{
return
field_3_left_col
;
}
public
int
getHeaderColor
(
)
{
return
field_4_header_color
;
}
public
short
getPageBreakZoom
(
)
{
return
field_5_page_break_zoom
;
}
public
short
getNormalZoom
(
)
{
return
field_6_normal_zoom
;
}
public
int
getReserved
(
)
{
return
field_7_reserved
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[WINDOW2]\n"
)
;
buffer
.
append
(
"    .options        = "
)
.
append
(
Integer
.
toHexString
(
getOptions
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .dispformulas= "
)
.
append
(
getDisplayFormulas
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .dispgridlins= "
)
.
append
(
getDisplayGridlines
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .disprcheadin= "
)
.
append
(
getDisplayRowColHeadings
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .freezepanes = "
)
.
append
(
getFreezePanes
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .displayzeros= "
)
.
append
(
getDisplayZeros
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .defaultheadr= "
)
.
append
(
getDefaultHeader
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .arabic      = "
)
.
append
(
getArabic
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .displayguts = "
)
.
append
(
getDisplayGuts
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .frzpnsnosplt= "
)
.
append
(
getFreezePanesNoSplit
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .selected    = "
)
.
append
(
getSelected
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .paged       = "
)
.
append
(
getPaged
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"       .svdinpgbrkpv= "
)
.
append
(
getSavedInPageBreakPreview
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .toprow         = "
)
.
append
(
Integer
.
toHexString
(
getTopRow
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .leftcol        = "
)
.
append
(
Integer
.
toHexString
(
getLeftCol
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .headercolor    = "
)
.
append
(
Integer
.
toHexString
(
getHeaderColor
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .pagebreakzoom  = "
)
.
append
(
Integer
.
toHexString
(
getPageBreakZoom
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .normalzoom     = "
)
.
append
(
Integer
.
toHexString
(
getNormalZoom
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .reserved       = "
)
.
append
(
Integer
.
toHexString
(
getReserved
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/WINDOW2]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
18
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
getOptions
(
)
)
;
LittleEndian
.
putShort
(
data
,
6
+
offset
,
getTopRow
(
)
)
;
LittleEndian
.
putShort
(
data
,
8
+
offset
,
getLeftCol
(
)
)
;
LittleEndian
.
putInt
(
data
,
10
+
offset
,
getHeaderColor
(
)
)
;
LittleEndian
.
putShort
(
data
,
14
+
offset
,
getPageBreakZoom
(
)
)
;
LittleEndian
.
putShort
(
data
,
16
+
offset
,
getNormalZoom
(
)
)
;
LittleEndian
.
putInt
(
data
,
18
+
offset
,
getReserved
(
)
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
22
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
}
