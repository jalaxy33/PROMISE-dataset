package
org
.
apache
.
poi
.
hssf
.
record
;
import
java
.
util
.
Stack
;
import
java
.
util
.
List
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
hssf
.
record
.
formula
.
*
;
public
class
FormulaRecord
extends
Record
implements
CellValueRecordInterface
,
Comparable
{
public
static
final
boolean
EXPERIMENTAL_FORMULA_SUPPORT_ENABLED
=
false
;
public
static
final
short
sid
=
0x06
;
private
short
field_1_row
;
private
short
field_2_column
;
private
short
field_3_xf
;
private
double
field_4_value
;
private
short
field_5_options
;
private
int
field_6_zero
;
private
short
field_7_expression_len
;
private
Stack
field_8_parsed_expr
;
private
byte
[
]
all_data
;
public
FormulaRecord
(
)
{
field_8_parsed_expr
=
new
Stack
(
)
;
}
public
FormulaRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
FormulaRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
if
(
EXPERIMENTAL_FORMULA_SUPPORT_ENABLED
)
{
field_1_row
=
LittleEndian
.
getShort
(
data
,
0
+
offset
)
;
field_2_column
=
LittleEndian
.
getShort
(
data
,
2
+
offset
)
;
field_3_xf
=
LittleEndian
.
getShort
(
data
,
4
+
offset
)
;
field_4_value
=
LittleEndian
.
getDouble
(
data
,
6
+
offset
)
;
field_5_options
=
LittleEndian
.
getShort
(
data
,
14
+
offset
)
;
field_6_zero
=
LittleEndian
.
getInt
(
data
,
16
+
offset
)
;
field_7_expression_len
=
LittleEndian
.
getShort
(
data
,
20
+
offset
)
;
field_8_parsed_expr
=
getParsedExpressionTokens
(
data
,
size
,
offset
)
;
}
else
{
all_data
=
new
byte
[
size
+
4
]
;
LittleEndian
.
putShort
(
all_data
,
0
,
sid
)
;
LittleEndian
.
putShort
(
all_data
,
2
,
size
)
;
System
.
arraycopy
(
data
,
offset
,
all_data
,
4
,
size
)
;
}
}
private
Stack
getParsedExpressionTokens
(
byte
[
]
data
,
short
size
,
int
offset
)
{
Stack
stack
=
new
Stack
(
)
;
return
stack
;
}
public
void
setRow
(
short
row
)
{
field_1_row
=
row
;
}
public
void
setColumn
(
short
column
)
{
field_2_column
=
column
;
}
public
void
setXFIndex
(
short
xf
)
{
field_3_xf
=
xf
;
}
public
void
setValue
(
double
value
)
{
field_4_value
=
value
;
}
public
void
setOptions
(
short
options
)
{
field_5_options
=
options
;
}
public
void
setExpressionLength
(
short
len
)
{
field_7_expression_len
=
len
;
}
public
short
getRow
(
)
{
return
field_1_row
;
}
public
short
getColumn
(
)
{
return
field_2_column
;
}
public
short
getXFIndex
(
)
{
return
field_3_xf
;
}
public
double
getValue
(
)
{
return
field_4_value
;
}
public
short
getOptions
(
)
{
return
field_5_options
;
}
public
short
getExpressionLength
(
)
{
return
field_7_expression_len
;
}
public
void
pushExpressionToken
(
Ptg
ptg
)
{
field_8_parsed_expr
.
push
(
ptg
)
;
}
public
Ptg
popExpressionToken
(
)
{
return
(
Ptg
)
field_8_parsed_expr
.
pop
(
)
;
}
public
Ptg
peekExpressionToken
(
)
{
return
(
Ptg
)
field_8_parsed_expr
.
peek
(
)
;
}
public
int
getNumberOfExpressionTokens
(
)
{
return
field_8_parsed_expr
.
size
(
)
;
}
public
List
getParsedExpression
(
)
{
return
(
List
)
field_8_parsed_expr
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A FORMULA RECORD"
)
;
}
}
public
short
getSid
(
)
{
return
sid
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
if
(
EXPERIMENTAL_FORMULA_SUPPORT_ENABLED
)
{
int
ptgSize
=
getTotalPtgSize
(
)
;
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
24
+
ptgSize
)
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
getRow
(
)
)
;
LittleEndian
.
putShort
(
data
,
6
+
offset
,
getColumn
(
)
)
;
LittleEndian
.
putShort
(
data
,
8
+
offset
,
getXFIndex
(
)
)
;
LittleEndian
.
putDouble
(
data
,
10
+
offset
,
getValue
(
)
)
;
LittleEndian
.
putShort
(
data
,
18
+
offset
,
getOptions
(
)
)
;
LittleEndian
.
putInt
(
data
,
20
+
offset
,
field_6_zero
)
;
LittleEndian
.
putShort
(
data
,
24
+
offset
,
getExpressionLength
(
)
)
;
}
else
{
System
.
arraycopy
(
all_data
,
0
,
data
,
offset
,
all_data
.
length
)
;
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
int
retval
=
0
;
if
(
EXPERIMENTAL_FORMULA_SUPPORT_ENABLED
)
{
retval
=
getTotalPtgSize
(
)
+
28
;
}
else
{
retval
=
all_data
.
length
;
}
return
retval
;
}
private
int
getTotalPtgSize
(
)
{
List
list
=
getParsedExpression
(
)
;
int
retval
=
0
;
for
(
int
k
=
0
;
k
<
list
.
size
(
)
;
k
++
)
{
Ptg
ptg
=
(
Ptg
)
list
.
get
(
k
)
;
retval
+=
ptg
.
getSize
(
)
;
}
return
retval
;
}
private
void
serializePtgs
(
byte
[
]
data
,
int
offset
)
{
int
pos
=
offset
;
for
(
int
k
=
0
;
k
<
field_8_parsed_expr
.
size
(
)
;
k
++
)
{
Ptg
ptg
=
(
Ptg
)
field_8_parsed_expr
.
get
(
k
)
;
ptg
.
writeBytes
(
data
,
pos
)
;
pos
+=
ptg
.
getSize
(
)
;
}
}
public
boolean
isBefore
(
CellValueRecordInterface
i
)
{
if
(
this
.
getRow
(
)
>
i
.
getRow
(
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
>
i
.
getColumn
(
)
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
{
return
false
;
}
return
true
;
}
public
boolean
isAfter
(
CellValueRecordInterface
i
)
{
if
(
this
.
getRow
(
)
<
i
.
getRow
(
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
<
i
.
getColumn
(
)
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
{
return
false
;
}
return
true
;
}
public
boolean
isEqual
(
CellValueRecordInterface
i
)
{
return
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
;
}
public
boolean
isInValueSection
(
)
{
return
true
;
}
public
boolean
isValue
(
)
{
return
true
;
}
public
int
compareTo
(
Object
obj
)
{
CellValueRecordInterface
loc
=
(
CellValueRecordInterface
)
obj
;
if
(
(
this
.
getRow
(
)
==
loc
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
loc
.
getColumn
(
)
)
)
{
return
0
;
}
if
(
this
.
getRow
(
)
<
loc
.
getRow
(
)
)
{
return
-
1
;
}
if
(
this
.
getRow
(
)
>
loc
.
getRow
(
)
)
{
return
1
;
}
if
(
this
.
getColumn
(
)
<
loc
.
getColumn
(
)
)
{
return
-
1
;
}
if
(
this
.
getColumn
(
)
>
loc
.
getColumn
(
)
)
{
return
1
;
}
return
-
1
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
!
(
obj
instanceof
CellValueRecordInterface
)
)
{
return
false
;
}
CellValueRecordInterface
loc
=
(
CellValueRecordInterface
)
obj
;
if
(
(
this
.
getRow
(
)
==
loc
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
loc
.
getColumn
(
)
)
)
{
return
true
;
}
return
false
;
}
}
