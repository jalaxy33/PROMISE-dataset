package
org
.
apache
.
poi
.
hssf
.
usermodel
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Sheet
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Workbook
;
import
org
.
apache
.
poi
.
hssf
.
record
.
CellValueRecordInterface
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RowRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
VCenterRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
WSBoolRecord
;
import
org
.
apache
.
poi
.
hssf
.
util
.
Region
;
import
org
.
apache
.
poi
.
util
.
POILogFactory
;
import
org
.
apache
.
poi
.
util
.
POILogger
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
TreeMap
;
public
class
HSSFSheet
{
private
static
final
int
DEBUG
=
POILogger
.
DEBUG
;
public
final
static
int
INITIAL_CAPACITY
=
20
;
private
Sheet
sheet
;
private
TreeMap
rows
;
private
Workbook
book
;
private
int
firstrow
;
private
int
lastrow
;
private
static
POILogger
log
=
POILogFactory
.
getLogger
(
HSSFSheet
.
class
)
;
protected
HSSFSheet
(
Workbook
book
)
{
sheet
=
Sheet
.
createSheet
(
)
;
rows
=
new
TreeMap
(
)
;
this
.
book
=
book
;
}
protected
HSSFSheet
(
Workbook
book
,
Sheet
sheet
)
{
this
.
sheet
=
sheet
;
rows
=
new
TreeMap
(
)
;
this
.
book
=
book
;
setPropertiesFromSheet
(
sheet
)
;
}
private
void
setPropertiesFromSheet
(
Sheet
sheet
)
{
int
sloc
=
sheet
.
getLoc
(
)
;
RowRecord
row
=
sheet
.
getNextRow
(
)
;
while
(
row
!=
null
)
{
createRowFromRecord
(
row
)
;
row
=
sheet
.
getNextRow
(
)
;
}
sheet
.
setLoc
(
sloc
)
;
CellValueRecordInterface
cval
=
sheet
.
getNextValueRecord
(
)
;
long
timestart
=
System
.
currentTimeMillis
(
)
;
log
.
log
(
DEBUG
,
"Time at start of cell creating in HSSF sheet = "
,
new
Long
(
timestart
)
)
;
HSSFRow
lastrow
=
null
;
while
(
cval
!=
null
)
{
long
cellstart
=
System
.
currentTimeMillis
(
)
;
HSSFRow
hrow
=
lastrow
;
if
(
(
lastrow
==
null
)
||
(
lastrow
.
getRowNum
(
)
!=
cval
.
getRow
(
)
)
)
{
hrow
=
getRow
(
cval
.
getRow
(
)
)
;
}
lastrow
=
hrow
;
hrow
.
createCellFromRecord
(
cval
)
;
cval
=
sheet
.
getNextValueRecord
(
)
;
log
.
log
(
DEBUG
,
"record took "
,
new
Long
(
System
.
currentTimeMillis
(
)
-
cellstart
)
)
;
}
log
.
log
(
DEBUG
,
"total sheet cell creation took "
,
new
Long
(
System
.
currentTimeMillis
(
)
-
timestart
)
)
;
}
public
HSSFRow
createRow
(
short
rownum
)
{
HSSFRow
row
=
new
HSSFRow
(
book
,
sheet
,
rownum
)
;
addRow
(
row
,
true
)
;
return
row
;
}
private
HSSFRow
createRowFromRecord
(
RowRecord
row
)
{
HSSFRow
hrow
=
new
HSSFRow
(
book
,
sheet
,
row
)
;
addRow
(
hrow
,
false
)
;
return
hrow
;
}
public
void
removeRow
(
HSSFRow
row
)
{
sheet
.
setLoc
(
sheet
.
getDimsLoc
(
)
)
;
if
(
rows
.
size
(
)
>
0
)
{
rows
.
remove
(
row
)
;
if
(
row
.
getRowNum
(
)
==
getLastRowNum
(
)
)
{
lastrow
=
findLastRow
(
lastrow
)
;
}
if
(
row
.
getRowNum
(
)
==
getFirstRowNum
(
)
)
{
firstrow
=
findFirstRow
(
firstrow
)
;
}
Iterator
iter
=
row
.
cellIterator
(
)
;
while
(
iter
.
hasNext
(
)
)
{
HSSFCell
cell
=
(
HSSFCell
)
iter
.
next
(
)
;
sheet
.
removeValueRecord
(
row
.
getRowNum
(
)
,
cell
.
getCellValueRecord
(
)
)
;
}
sheet
.
removeRow
(
row
.
getRowRecord
(
)
)
;
}
}
private
int
findLastRow
(
int
lastrow
)
{
int
rownum
=
lastrow
-
1
;
HSSFRow
r
=
getRow
(
rownum
)
;
while
(
r
==
null
&&
rownum
>=
0
)
{
r
=
getRow
(
--
rownum
)
;
}
return
rownum
;
}
private
int
findFirstRow
(
int
firstrow
)
{
int
rownum
=
firstrow
+
1
;
HSSFRow
r
=
getRow
(
rownum
)
;
while
(
r
==
null
&&
rownum
<=
getLastRowNum
(
)
)
{
r
=
getRow
(
++
rownum
)
;
}
if
(
rownum
>
getLastRowNum
(
)
)
return
-
1
;
return
rownum
;
}
private
void
addRow
(
HSSFRow
row
,
boolean
addLow
)
{
rows
.
put
(
row
,
row
)
;
if
(
addLow
)
{
sheet
.
addRow
(
row
.
getRowRecord
(
)
)
;
}
if
(
row
.
getRowNum
(
)
>
getLastRowNum
(
)
)
{
lastrow
=
row
.
getRowNum
(
)
;
}
if
(
row
.
getRowNum
(
)
<
getFirstRowNum
(
)
)
{
firstrow
=
row
.
getRowNum
(
)
;
}
}
public
HSSFRow
getRow
(
int
rownum
)
{
HSSFRow
row
=
new
HSSFRow
(
)
;
row
.
setRowNum
(
(
short
)
rownum
)
;
return
(
HSSFRow
)
rows
.
get
(
row
)
;
}
public
int
getPhysicalNumberOfRows
(
)
{
return
rows
.
size
(
)
;
}
public
int
getFirstRowNum
(
)
{
return
firstrow
;
}
public
int
getLastRowNum
(
)
{
return
lastrow
;
}
public
void
setColumnWidth
(
short
column
,
short
width
)
{
sheet
.
setColumnWidth
(
column
,
width
)
;
}
public
short
getColumnWidth
(
short
column
)
{
return
sheet
.
getColumnWidth
(
column
)
;
}
public
short
getDefaultColumnWidth
(
)
{
return
sheet
.
getDefaultColumnWidth
(
)
;
}
public
short
getDefaultRowHeight
(
)
{
return
sheet
.
getDefaultRowHeight
(
)
;
}
public
float
getDefaultRowHeightInPoints
(
)
{
return
(
sheet
.
getDefaultRowHeight
(
)
/
20
)
;
}
public
void
setDefaultColumnWidth
(
short
width
)
{
sheet
.
setDefaultColumnWidth
(
width
)
;
}
public
void
setDefaultRowHeight
(
short
height
)
{
sheet
.
setDefaultRowHeight
(
height
)
;
}
public
void
setDefaultRowHeightInPoints
(
float
height
)
{
sheet
.
setDefaultRowHeight
(
(
short
)
(
height
*
20
)
)
;
}
public
boolean
isGridsPrinted
(
)
{
return
sheet
.
isGridsPrinted
(
)
;
}
public
void
setGridsPrinted
(
boolean
value
)
{
sheet
.
setGridsPrinted
(
value
)
;
}
public
int
addMergedRegion
(
Region
region
)
{
return
sheet
.
addMergedRegion
(
(
short
)
region
.
getRowFrom
(
)
,
region
.
getColumnFrom
(
)
,
(
short
)
region
.
getRowTo
(
)
,
region
.
getColumnTo
(
)
)
;
}
public
void
setVerticallyCenter
(
boolean
value
)
{
VCenterRecord
record
=
(
VCenterRecord
)
sheet
.
findFirstRecordBySid
(
VCenterRecord
.
sid
)
;
record
.
setVCenter
(
value
)
;
}
public
boolean
getVerticallyCenter
(
boolean
value
)
{
VCenterRecord
record
=
(
VCenterRecord
)
sheet
.
findFirstRecordBySid
(
VCenterRecord
.
sid
)
;
return
record
.
getVCenter
(
)
;
}
public
void
removeMergedRegion
(
int
index
)
{
sheet
.
removeMergedRegion
(
index
)
;
}
public
int
getNumMergedRegions
(
)
{
return
sheet
.
getNumMergedRegions
(
)
;
}
public
Region
getMergedRegionAt
(
int
index
)
{
return
new
Region
(
sheet
.
getMergedRegionAt
(
index
)
)
;
}
public
Iterator
rowIterator
(
)
{
return
rows
.
values
(
)
.
iterator
(
)
;
}
protected
Sheet
getSheet
(
)
{
return
sheet
;
}
public
void
setAlternativeExpression
(
boolean
b
)
{
WSBoolRecord
record
=
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
;
record
.
setAlternateExpression
(
b
)
;
}
public
void
setAlternativeFormula
(
boolean
b
)
{
WSBoolRecord
record
=
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
;
record
.
setAlternateFormula
(
b
)
;
}
public
void
setAutobreaks
(
boolean
b
)
{
WSBoolRecord
record
=
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
;
record
.
setAutobreaks
(
b
)
;
}
public
void
setDialog
(
boolean
b
)
{
WSBoolRecord
record
=
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
;
record
.
setDialog
(
b
)
;
}
public
void
setDisplayGuts
(
boolean
b
)
{
WSBoolRecord
record
=
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
;
record
.
setDisplayGuts
(
b
)
;
}
public
void
setFitToPage
(
boolean
b
)
{
WSBoolRecord
record
=
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
;
record
.
setFitToPage
(
b
)
;
}
public
void
setRowSumsBelow
(
boolean
b
)
{
WSBoolRecord
record
=
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
;
record
.
setRowSumsBelow
(
b
)
;
}
public
void
setRowSumsRight
(
boolean
b
)
{
WSBoolRecord
record
=
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
;
record
.
setRowSumsRight
(
b
)
;
}
public
boolean
getAlternateExpression
(
)
{
return
(
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
)
.
getAlternateExpression
(
)
;
}
public
boolean
getAlternateFormula
(
)
{
return
(
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
)
.
getAlternateFormula
(
)
;
}
public
boolean
getAutobreaks
(
)
{
return
(
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
)
.
getAutobreaks
(
)
;
}
public
boolean
getDialog
(
)
{
return
(
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
)
.
getDialog
(
)
;
}
public
boolean
getDisplayGuts
(
)
{
return
(
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
)
.
getDisplayGuts
(
)
;
}
public
boolean
getFitToPage
(
)
{
return
(
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
)
.
getFitToPage
(
)
;
}
public
boolean
getRowSumsBelow
(
)
{
return
(
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
)
.
getRowSumsBelow
(
)
;
}
public
boolean
getRowSumsRight
(
)
{
return
(
(
WSBoolRecord
)
sheet
.
findFirstRecordBySid
(
WSBoolRecord
.
sid
)
)
.
getRowSumsRight
(
)
;
}
}
