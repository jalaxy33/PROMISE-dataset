package
org
.
apache
.
poi
.
poifs
.
filesystem
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
poifs
.
common
.
POIFSConstants
;
import
org
.
apache
.
poi
.
poifs
.
dev
.
POIFSViewable
;
import
org
.
apache
.
poi
.
poifs
.
property
.
DirectoryProperty
;
import
org
.
apache
.
poi
.
poifs
.
property
.
DocumentProperty
;
import
org
.
apache
.
poi
.
poifs
.
property
.
Property
;
import
org
.
apache
.
poi
.
poifs
.
property
.
PropertyTable
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
BATBlock
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
BlockAllocationTableReader
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
BlockAllocationTableWriter
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
BlockList
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
BlockWritable
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
HeaderBlockReader
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
HeaderBlockWriter
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
RawDataBlock
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
RawDataBlockList
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
SmallBlockTableReader
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
SmallBlockTableWriter
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
SmallDocumentBlock
;
public
class
POIFSFileSystem
implements
POIFSViewable
{
private
PropertyTable
_property_table
;
private
List
_documents
;
private
DirectoryNode
_root
;
public
POIFSFileSystem
(
)
{
_property_table
=
new
PropertyTable
(
)
;
_documents
=
new
ArrayList
(
)
;
_root
=
null
;
}
public
POIFSFileSystem
(
final
InputStream
stream
)
throws
IOException
{
this
(
)
;
HeaderBlockReader
header_block_reader
=
new
HeaderBlockReader
(
stream
)
;
RawDataBlockList
data_blocks
=
new
RawDataBlockList
(
stream
)
;
new
BlockAllocationTableReader
(
header_block_reader
.
getBATCount
(
)
,
header_block_reader
.
getBATArray
(
)
,
header_block_reader
.
getXBATCount
(
)
,
header_block_reader
.
getXBATIndex
(
)
,
data_blocks
)
;
PropertyTable
properties
=
new
PropertyTable
(
header_block_reader
.
getPropertyStart
(
)
,
data_blocks
)
;
processProperties
(
SmallBlockTableReader
.
getSmallDocumentBlocks
(
data_blocks
,
properties
.
getRoot
(
)
,
header_block_reader
.
getSBATStart
(
)
)
,
data_blocks
,
properties
.
getRoot
(
)
.
getChildren
(
)
,
null
)
;
}
public
DocumentEntry
createDocument
(
final
InputStream
stream
,
final
String
name
)
throws
IOException
{
return
getRoot
(
)
.
createDocument
(
name
,
stream
)
;
}
public
DocumentEntry
createDocument
(
final
String
name
,
final
int
size
,
final
POIFSWriterListener
writer
)
throws
IOException
{
return
getRoot
(
)
.
createDocument
(
name
,
size
,
writer
)
;
}
public
DirectoryEntry
createDirectory
(
final
String
name
)
throws
IOException
{
return
getRoot
(
)
.
createDirectory
(
name
)
;
}
public
void
writeFilesystem
(
final
OutputStream
stream
)
throws
IOException
{
_property_table
.
preWrite
(
)
;
SmallBlockTableWriter
sbtw
=
new
SmallBlockTableWriter
(
_documents
,
_property_table
.
getRoot
(
)
)
;
BlockAllocationTableWriter
bat
=
new
BlockAllocationTableWriter
(
)
;
List
bm_objects
=
new
ArrayList
(
)
;
bm_objects
.
addAll
(
_documents
)
;
bm_objects
.
add
(
_property_table
)
;
bm_objects
.
add
(
sbtw
)
;
bm_objects
.
add
(
sbtw
.
getSBAT
(
)
)
;
Iterator
iter
=
bm_objects
.
iterator
(
)
;
while
(
iter
.
hasNext
(
)
)
{
BATManaged
bmo
=
(
BATManaged
)
iter
.
next
(
)
;
int
block_count
=
bmo
.
countBlocks
(
)
;
if
(
block_count
!=
0
)
{
bmo
.
setStartBlock
(
bat
.
allocateSpace
(
block_count
)
)
;
}
else
{
}
}
int
batStartBlock
=
bat
.
createBlocks
(
)
;
HeaderBlockWriter
header_block_writer
=
new
HeaderBlockWriter
(
)
;
BATBlock
[
]
xbat_blocks
=
header_block_writer
.
setBATBlocks
(
bat
.
countBlocks
(
)
,
batStartBlock
)
;
header_block_writer
.
setPropertyStart
(
_property_table
.
getStartBlock
(
)
)
;
header_block_writer
.
setSBATStart
(
sbtw
.
getSBAT
(
)
.
getStartBlock
(
)
)
;
List
writers
=
new
ArrayList
(
)
;
writers
.
add
(
header_block_writer
)
;
writers
.
addAll
(
_documents
)
;
writers
.
add
(
_property_table
)
;
writers
.
add
(
sbtw
)
;
writers
.
add
(
sbtw
.
getSBAT
(
)
)
;
writers
.
add
(
bat
)
;
for
(
int
j
=
0
;
j
<
xbat_blocks
.
length
;
j
++
)
{
writers
.
add
(
xbat_blocks
[
j
]
)
;
}
iter
=
writers
.
iterator
(
)
;
while
(
iter
.
hasNext
(
)
)
{
BlockWritable
writer
=
(
BlockWritable
)
iter
.
next
(
)
;
writer
.
writeBlocks
(
stream
)
;
}
}
public
static
void
main
(
String
args
[
]
)
throws
IOException
{
if
(
args
.
length
!=
2
)
{
System
.
err
.
println
(
"two arguments required: input filename and output filename"
)
;
System
.
exit
(
1
)
;
}
FileInputStream
istream
=
new
FileInputStream
(
args
[
0
]
)
;
FileOutputStream
ostream
=
new
FileOutputStream
(
args
[
1
]
)
;
new
POIFSFileSystem
(
istream
)
.
writeFilesystem
(
ostream
)
;
istream
.
close
(
)
;
ostream
.
close
(
)
;
}
public
DirectoryEntry
getRoot
(
)
{
if
(
_root
==
null
)
{
_root
=
new
DirectoryNode
(
_property_table
.
getRoot
(
)
,
this
,
null
)
;
}
return
_root
;
}
public
DocumentInputStream
createDocumentInputStream
(
final
String
documentName
)
throws
IOException
{
Entry
document
=
getRoot
(
)
.
getEntry
(
documentName
)
;
if
(
!
document
.
isDocumentEntry
(
)
)
{
throw
new
IOException
(
"Entry '"
+
documentName
+
"' is not a DocumentEntry"
)
;
}
return
new
DocumentInputStream
(
(
DocumentEntry
)
document
)
;
}
void
addDocument
(
final
POIFSDocument
document
)
{
_documents
.
add
(
document
)
;
_property_table
.
addProperty
(
document
.
getDocumentProperty
(
)
)
;
}
void
addDirectory
(
final
DirectoryProperty
directory
)
{
_property_table
.
addProperty
(
directory
)
;
}
void
remove
(
EntryNode
entry
)
{
_property_table
.
removeProperty
(
entry
.
getProperty
(
)
)
;
if
(
entry
.
isDocumentEntry
(
)
)
{
_documents
.
remove
(
(
(
DocumentNode
)
entry
)
.
getDocument
(
)
)
;
}
}
private
void
processProperties
(
final
BlockList
small_blocks
,
final
BlockList
big_blocks
,
final
Iterator
properties
,
final
DirectoryNode
dir
)
throws
IOException
{
while
(
properties
.
hasNext
(
)
)
{
Property
property
=
(
Property
)
properties
.
next
(
)
;
String
name
=
property
.
getName
(
)
;
DirectoryNode
parent
=
(
dir
==
null
)
?
(
(
DirectoryNode
)
getRoot
(
)
)
:
dir
;
if
(
property
.
isDirectory
(
)
)
{
DirectoryNode
new_dir
=
(
DirectoryNode
)
parent
.
createDirectory
(
name
)
;
processProperties
(
small_blocks
,
big_blocks
,
(
(
DirectoryProperty
)
property
)
.
getChildren
(
)
,
new_dir
)
;
}
else
{
int
startBlock
=
property
.
getStartBlock
(
)
;
int
size
=
property
.
getSize
(
)
;
POIFSDocument
document
=
null
;
if
(
property
.
shouldUseSmallBlocks
(
)
)
{
document
=
new
POIFSDocument
(
name
,
small_blocks
.
fetchBlocks
(
startBlock
)
,
size
)
;
}
else
{
document
=
new
POIFSDocument
(
name
,
big_blocks
.
fetchBlocks
(
startBlock
)
,
size
)
;
}
parent
.
createDocument
(
document
)
;
}
}
}
public
Object
[
]
getViewableArray
(
)
{
if
(
preferArray
(
)
)
{
return
(
(
POIFSViewable
)
getRoot
(
)
)
.
getViewableArray
(
)
;
}
else
{
return
new
Object
[
0
]
;
}
}
public
Iterator
getViewableIterator
(
)
{
if
(
!
preferArray
(
)
)
{
return
(
(
POIFSViewable
)
getRoot
(
)
)
.
getViewableIterator
(
)
;
}
else
{
return
Collections
.
EMPTY_LIST
.
iterator
(
)
;
}
}
public
boolean
preferArray
(
)
{
return
(
(
POIFSViewable
)
getRoot
(
)
)
.
preferArray
(
)
;
}
public
String
getShortDescription
(
)
{
return
"POIFS FileSystem"
;
}
}
