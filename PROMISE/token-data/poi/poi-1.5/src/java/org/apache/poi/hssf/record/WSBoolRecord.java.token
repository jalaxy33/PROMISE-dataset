package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
BitField
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
WSBoolRecord
extends
Record
{
public
final
static
short
sid
=
0x81
;
private
byte
field_1_wsbool
;
private
byte
field_2_wsbool
;
static
final
private
BitField
autobreaks
=
new
BitField
(
0x01
)
;
static
final
private
BitField
dialog
=
new
BitField
(
0x10
)
;
static
final
private
BitField
applystyles
=
new
BitField
(
0x20
)
;
static
final
private
BitField
rowsumsbelow
=
new
BitField
(
0x40
)
;
static
final
private
BitField
rowsumsright
=
new
BitField
(
0x80
)
;
static
final
private
BitField
fittopage
=
new
BitField
(
0x01
)
;
static
final
private
BitField
displayguts
=
new
BitField
(
0x06
)
;
static
final
private
BitField
alternateexpression
=
new
BitField
(
0x40
)
;
static
final
private
BitField
alternateformula
=
new
BitField
(
0x80
)
;
public
WSBoolRecord
(
)
{
}
public
WSBoolRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
WSBoolRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A WSBoolRECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_wsbool
=
data
[
1
+
offset
]
;
field_2_wsbool
=
data
[
0
+
offset
]
;
}
public
void
setWSBool1
(
byte
bool1
)
{
field_1_wsbool
=
bool1
;
}
public
void
setAutobreaks
(
boolean
ab
)
{
field_1_wsbool
=
autobreaks
.
setByteBoolean
(
field_1_wsbool
,
ab
)
;
}
public
void
setDialog
(
boolean
isDialog
)
{
field_1_wsbool
=
dialog
.
setByteBoolean
(
field_1_wsbool
,
isDialog
)
;
}
public
void
setRowSumsBelow
(
boolean
below
)
{
field_1_wsbool
=
rowsumsbelow
.
setByteBoolean
(
field_1_wsbool
,
below
)
;
}
public
void
setRowSumsRight
(
boolean
right
)
{
field_1_wsbool
=
rowsumsright
.
setByteBoolean
(
field_1_wsbool
,
right
)
;
}
public
void
setWSBool2
(
byte
bool2
)
{
field_2_wsbool
=
field_2_wsbool
=
bool2
;
}
public
void
setFitToPage
(
boolean
fit2page
)
{
field_2_wsbool
=
fittopage
.
setByteBoolean
(
field_2_wsbool
,
fit2page
)
;
}
public
void
setDisplayGuts
(
boolean
guts
)
{
field_2_wsbool
=
displayguts
.
setByteBoolean
(
field_2_wsbool
,
guts
)
;
}
public
void
setAlternateExpression
(
boolean
altexp
)
{
field_2_wsbool
=
alternateexpression
.
setByteBoolean
(
field_2_wsbool
,
altexp
)
;
}
public
void
setAlternateFormula
(
boolean
formula
)
{
field_2_wsbool
=
alternateformula
.
setByteBoolean
(
field_2_wsbool
,
formula
)
;
}
public
byte
getWSBool1
(
)
{
return
field_1_wsbool
;
}
public
boolean
getAutobreaks
(
)
{
return
autobreaks
.
isSet
(
field_1_wsbool
)
;
}
public
boolean
getDialog
(
)
{
return
dialog
.
isSet
(
field_1_wsbool
)
;
}
public
boolean
getRowSumsBelow
(
)
{
return
rowsumsbelow
.
isSet
(
field_1_wsbool
)
;
}
public
boolean
getRowSumsRight
(
)
{
return
rowsumsright
.
isSet
(
field_1_wsbool
)
;
}
public
byte
getWSBool2
(
)
{
return
field_2_wsbool
;
}
public
boolean
getFitToPage
(
)
{
return
fittopage
.
isSet
(
field_2_wsbool
)
;
}
public
boolean
getDisplayGuts
(
)
{
return
displayguts
.
isSet
(
field_2_wsbool
)
;
}
public
boolean
getAlternateExpression
(
)
{
return
alternateexpression
.
isSet
(
field_2_wsbool
)
;
}
public
boolean
getAlternateFormula
(
)
{
return
alternateformula
.
isSet
(
field_2_wsbool
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[WSBOOL]\n"
)
;
buffer
.
append
(
"    .wsbool1        = "
)
.
append
(
Integer
.
toHexString
(
getWSBool1
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .autobreaks = "
)
.
append
(
getAutobreaks
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .dialog     = "
)
.
append
(
getDialog
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .rowsumsbelw= "
)
.
append
(
getRowSumsBelow
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .rowsumsrigt= "
)
.
append
(
getRowSumsRight
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .wsbool2        = "
)
.
append
(
Integer
.
toHexString
(
getWSBool2
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .fittopage  = "
)
.
append
(
getFitToPage
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .displayguts= "
)
.
append
(
getDisplayGuts
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .alternateex= "
)
.
append
(
getAlternateExpression
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .alternatefo= "
)
.
append
(
getAlternateFormula
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/WSBOOL]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
0x2
)
;
data
[
5
+
offset
]
=
getWSBool1
(
)
;
data
[
4
+
offset
]
=
getWSBool2
(
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
6
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
}
