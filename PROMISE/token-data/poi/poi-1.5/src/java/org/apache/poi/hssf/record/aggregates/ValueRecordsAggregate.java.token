package
org
.
apache
.
poi
.
hssf
.
record
.
aggregates
;
import
org
.
apache
.
poi
.
hssf
.
record
.
CellValueRecordInterface
;
import
org
.
apache
.
poi
.
hssf
.
record
.
Record
;
import
org
.
apache
.
poi
.
hssf
.
record
.
UnknownRecord
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
TreeMap
;
public
class
ValueRecordsAggregate
extends
Record
{
public
final
static
short
sid
=
-
1000
;
int
firstcell
=
-
1
;
int
lastcell
=
-
1
;
TreeMap
records
=
null
;
int
size
=
0
;
public
ValueRecordsAggregate
(
)
{
records
=
new
TreeMap
(
)
;
}
public
void
insertCell
(
CellValueRecordInterface
cell
)
{
if
(
records
.
get
(
cell
)
==
null
)
{
size
+=
(
(
Record
)
cell
)
.
getRecordSize
(
)
;
}
else
{
size
+=
(
(
Record
)
cell
)
.
getRecordSize
(
)
-
(
(
Record
)
records
.
get
(
cell
)
)
.
getRecordSize
(
)
;
}
records
.
put
(
cell
,
cell
)
;
if
(
(
cell
.
getColumn
(
)
<
firstcell
)
||
(
firstcell
==
-
1
)
)
{
firstcell
=
cell
.
getColumn
(
)
;
}
if
(
(
cell
.
getColumn
(
)
>
lastcell
)
||
(
lastcell
==
-
1
)
)
{
lastcell
=
cell
.
getColumn
(
)
;
}
}
public
void
removeCell
(
CellValueRecordInterface
cell
)
{
size
-=
(
(
Record
)
cell
)
.
getRecordSize
(
)
;
records
.
remove
(
cell
)
;
}
public
int
getPhysicalNumberOfCells
(
)
{
return
records
.
size
(
)
;
}
public
int
getFirstCellNum
(
)
{
return
firstcell
;
}
public
int
getLastCellNum
(
)
{
return
lastcell
;
}
public
int
construct
(
int
offset
,
List
records
)
{
int
k
=
0
;
for
(
k
=
offset
;
k
<
records
.
size
(
)
;
k
++
)
{
Record
rec
=
(
Record
)
records
.
get
(
k
)
;
if
(
!
rec
.
isInValueSection
(
)
&&
!
(
rec
instanceof
UnknownRecord
)
)
{
break
;
}
if
(
rec
.
isValue
(
)
)
{
insertCell
(
(
CellValueRecordInterface
)
rec
)
;
}
}
return
k
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
Iterator
itr
=
records
.
values
(
)
.
iterator
(
)
;
int
pos
=
offset
;
while
(
itr
.
hasNext
(
)
)
{
pos
+=
(
(
Record
)
itr
.
next
(
)
)
.
serialize
(
pos
,
data
)
;
}
return
pos
-
offset
;
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
}
protected
void
validateSid
(
short
id
)
{
}
public
short
getSid
(
)
{
return
sid
;
}
public
int
getRecordSize
(
)
{
return
size
;
}
public
Iterator
getIterator
(
)
{
return
records
.
values
(
)
.
iterator
(
)
;
}
}
