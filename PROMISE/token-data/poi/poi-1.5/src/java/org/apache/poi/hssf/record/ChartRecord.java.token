package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
BitField
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
import
org
.
apache
.
poi
.
util
.
HexDump
;
public
class
ChartRecord
extends
Record
{
public
final
static
short
sid
=
0x1002
;
private
int
field_1_x
;
private
int
field_2_y
;
private
int
field_3_width
;
private
int
field_4_height
;
public
ChartRecord
(
)
{
}
public
ChartRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
ChartRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not a Chart record"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_x
=
LittleEndian
.
getInt
(
data
,
0x0
+
offset
)
;
field_2_y
=
LittleEndian
.
getInt
(
data
,
0x4
+
offset
)
;
field_3_width
=
LittleEndian
.
getInt
(
data
,
0x8
+
offset
)
;
field_4_height
=
LittleEndian
.
getInt
(
data
,
0xc
+
offset
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[Chart]\n"
)
;
buffer
.
append
(
"    .x                    = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
int
)
getX
(
)
)
)
.
append
(
" ("
)
.
append
(
getX
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .y                    = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
int
)
getY
(
)
)
)
.
append
(
" ("
)
.
append
(
getY
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .width                = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
int
)
getWidth
(
)
)
)
.
append
(
" ("
)
.
append
(
getWidth
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .height               = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
int
)
getHeight
(
)
)
)
.
append
(
" ("
)
.
append
(
getHeight
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"[/Chart]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
getRecordSize
(
)
-
4
)
)
;
LittleEndian
.
putInt
(
data
,
4
+
offset
,
field_1_x
)
;
LittleEndian
.
putInt
(
data
,
8
+
offset
,
field_2_y
)
;
LittleEndian
.
putInt
(
data
,
12
+
offset
,
field_3_width
)
;
LittleEndian
.
putInt
(
data
,
16
+
offset
,
field_4_height
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
4
+
4
+
4
+
4
+
4
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
int
getX
(
)
{
return
field_1_x
;
}
public
void
setX
(
int
field_1_x
)
{
this
.
field_1_x
=
field_1_x
;
}
public
int
getY
(
)
{
return
field_2_y
;
}
public
void
setY
(
int
field_2_y
)
{
this
.
field_2_y
=
field_2_y
;
}
public
int
getWidth
(
)
{
return
field_3_width
;
}
public
void
setWidth
(
int
field_3_width
)
{
this
.
field_3_width
=
field_3_width
;
}
public
int
getHeight
(
)
{
return
field_4_height
;
}
public
void
setHeight
(
int
field_4_height
)
{
this
.
field_4_height
=
field_4_height
;
}
}
