package
org
.
apache
.
poi
.
hssf
.
usermodel
;
import
java
.
util
.
Calendar
;
import
java
.
util
.
Date
;
import
java
.
util
.
GregorianCalendar
;
public
class
HSSFDateUtil
{
private
HSSFDateUtil
(
)
{
}
private
static
final
int
BAD_DATE
=
-
1
;
private
static
final
long
DAY_MILLISECONDS
=
24
*
60
*
60
*
1000
;
private
static
final
double
CAL_1900_ABSOLUTE
=
(
double
)
absoluteDay
(
new
GregorianCalendar
(
1900
,
Calendar
.
JANUARY
,
1
)
)
-
2.0
;
public
static
double
getExcelDate
(
Date
date
)
{
Calendar
calStart
=
new
GregorianCalendar
(
)
;
calStart
.
setTime
(
date
)
;
if
(
calStart
.
get
(
Calendar
.
YEAR
)
<
1900
)
{
return
BAD_DATE
;
}
else
{
calStart
=
dayStart
(
calStart
)
;
double
fraction
=
(
date
.
getTime
(
)
-
calStart
.
getTime
(
)
.
getTime
(
)
)
/
(
double
)
DAY_MILLISECONDS
;
return
fraction
+
(
double
)
absoluteDay
(
calStart
)
-
CAL_1900_ABSOLUTE
;
}
}
public
static
Date
getJavaDate
(
double
date
)
{
if
(
isValidExcelDate
(
date
)
)
{
int
wholeDaysSince1900
=
(
int
)
Math
.
floor
(
date
)
;
GregorianCalendar
calendar
=
new
GregorianCalendar
(
1900
,
0
,
wholeDaysSince1900
-
1
)
;
int
millisecondsInDay
=
(
int
)
(
(
date
-
Math
.
floor
(
date
)
)
*
(
double
)
DAY_MILLISECONDS
+
0.5
)
;
calendar
.
set
(
GregorianCalendar
.
MILLISECOND
,
millisecondsInDay
)
;
return
calendar
.
getTime
(
)
;
}
else
{
return
null
;
}
}
public
static
boolean
isValidExcelDate
(
double
value
)
{
return
(
value
>
-
Double
.
MIN_VALUE
)
;
}
private
static
int
absoluteDay
(
Calendar
cal
)
{
return
cal
.
get
(
Calendar
.
DAY_OF_YEAR
)
+
daysInPriorYears
(
cal
.
get
(
Calendar
.
YEAR
)
)
;
}
private
static
int
daysInPriorYears
(
int
yr
)
{
if
(
yr
<
1601
)
{
throw
new
IllegalArgumentException
(
"'year' must be 1601 or greater"
)
;
}
int
y
=
yr
-
1601
;
int
days
=
365
*
y
+
y
/
4
-
y
/
100
+
y
/
400
;
return
days
;
}
private
static
Calendar
dayStart
(
final
Calendar
cal
)
{
cal
.
get
(
Calendar
.
HOUR_OF_DAY
)
;
cal
.
set
(
Calendar
.
HOUR_OF_DAY
,
0
)
;
cal
.
set
(
Calendar
.
MINUTE
,
0
)
;
cal
.
set
(
Calendar
.
SECOND
,
0
)
;
cal
.
set
(
Calendar
.
MILLISECOND
,
0
)
;
cal
.
get
(
Calendar
.
HOUR_OF_DAY
)
;
return
cal
;
}
}
