package
org
.
apache
.
poi
.
poifs
.
property
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
poifs
.
common
.
POIFSConstants
;
import
org
.
apache
.
poi
.
poifs
.
dev
.
POIFSViewable
;
import
org
.
apache
.
poi
.
util
.
ByteField
;
import
org
.
apache
.
poi
.
util
.
IntegerField
;
import
org
.
apache
.
poi
.
util
.
LittleEndianConsts
;
import
org
.
apache
.
poi
.
util
.
ShortField
;
public
abstract
class
Property
implements
Child
,
POIFSViewable
{
static
final
private
byte
_default_fill
=
(
byte
)
0x00
;
static
final
private
int
_name_size_offset
=
0x40
;
static
final
private
int
_max_name_length
=
(
_name_size_offset
/
LittleEndianConsts
.
SHORT_SIZE
)
-
1
;
static
final
protected
int
_NO_INDEX
=
-
1
;
static
final
private
int
_node_color_offset
=
0x43
;
static
final
private
int
_previous_property_offset
=
0x44
;
static
final
private
int
_next_property_offset
=
0x48
;
static
final
private
int
_child_property_offset
=
0x4C
;
static
final
private
int
_seconds_1_offset
=
0x64
;
static
final
private
int
_days_1_offset
=
0x68
;
static
final
private
int
_seconds_2_offset
=
0x6C
;
static
final
private
int
_days_2_offset
=
0x70
;
static
final
private
int
_start_block_offset
=
0x74
;
static
final
private
int
_size_offset
=
0x78
;
static
final
protected
byte
_NODE_BLACK
=
1
;
static
final
protected
byte
_NODE_RED
=
0
;
static
final
private
int
_big_block_minimum_bytes
=
4096
;
private
String
_name
;
private
ShortField
_name_size
;
private
ByteField
_property_type
;
private
ByteField
_node_color
;
private
IntegerField
_previous_property
;
private
IntegerField
_next_property
;
private
IntegerField
_child_property
;
private
IntegerField
_seconds_1
;
private
IntegerField
_days_1
;
private
IntegerField
_seconds_2
;
private
IntegerField
_days_2
;
private
IntegerField
_start_block
;
private
IntegerField
_size
;
private
byte
[
]
_raw_data
;
private
int
_index
;
private
Child
_next_child
;
private
Child
_previous_child
;
protected
Property
(
)
{
_raw_data
=
new
byte
[
POIFSConstants
.
PROPERTY_SIZE
]
;
Arrays
.
fill
(
_raw_data
,
_default_fill
)
;
_name_size
=
new
ShortField
(
_name_size_offset
)
;
_property_type
=
new
ByteField
(
PropertyConstants
.
PROPERTY_TYPE_OFFSET
)
;
_node_color
=
new
ByteField
(
_node_color_offset
)
;
_previous_property
=
new
IntegerField
(
_previous_property_offset
,
_NO_INDEX
,
_raw_data
)
;
_next_property
=
new
IntegerField
(
_next_property_offset
,
_NO_INDEX
,
_raw_data
)
;
_child_property
=
new
IntegerField
(
_child_property_offset
,
_NO_INDEX
,
_raw_data
)
;
_seconds_1
=
new
IntegerField
(
_seconds_1_offset
,
0
,
_raw_data
)
;
_days_1
=
new
IntegerField
(
_days_1_offset
,
0
,
_raw_data
)
;
_seconds_2
=
new
IntegerField
(
_seconds_2_offset
,
0
,
_raw_data
)
;
_days_2
=
new
IntegerField
(
_days_2_offset
,
0
,
_raw_data
)
;
_start_block
=
new
IntegerField
(
_start_block_offset
)
;
_size
=
new
IntegerField
(
_size_offset
,
0
,
_raw_data
)
;
_index
=
_NO_INDEX
;
setName
(
""
)
;
setNextChild
(
null
)
;
setPreviousChild
(
null
)
;
}
protected
Property
(
final
int
index
,
final
byte
[
]
array
,
final
int
offset
)
{
_raw_data
=
new
byte
[
POIFSConstants
.
PROPERTY_SIZE
]
;
System
.
arraycopy
(
array
,
offset
,
_raw_data
,
0
,
POIFSConstants
.
PROPERTY_SIZE
)
;
_name_size
=
new
ShortField
(
_name_size_offset
,
_raw_data
)
;
_property_type
=
new
ByteField
(
PropertyConstants
.
PROPERTY_TYPE_OFFSET
,
_raw_data
)
;
_node_color
=
new
ByteField
(
_node_color_offset
,
_raw_data
)
;
_previous_property
=
new
IntegerField
(
_previous_property_offset
,
_raw_data
)
;
_next_property
=
new
IntegerField
(
_next_property_offset
,
_raw_data
)
;
_child_property
=
new
IntegerField
(
_child_property_offset
,
_raw_data
)
;
_seconds_1
=
new
IntegerField
(
_seconds_1_offset
,
_raw_data
)
;
_days_1
=
new
IntegerField
(
_days_1_offset
,
_raw_data
)
;
_seconds_2
=
new
IntegerField
(
_seconds_2_offset
,
_raw_data
)
;
_days_2
=
new
IntegerField
(
_days_2_offset
,
_raw_data
)
;
_start_block
=
new
IntegerField
(
_start_block_offset
,
_raw_data
)
;
_size
=
new
IntegerField
(
_size_offset
,
_raw_data
)
;
_index
=
index
;
int
name_length
=
(
_name_size
.
get
(
)
/
LittleEndianConsts
.
SHORT_SIZE
)
-
1
;
if
(
name_length
<
1
)
{
_name
=
""
;
}
else
{
char
[
]
char_array
=
new
char
[
name_length
]
;
int
name_offset
=
0
;
for
(
int
j
=
0
;
j
<
name_length
;
j
++
)
{
char_array
[
j
]
=
(
char
)
new
ShortField
(
name_offset
,
_raw_data
)
.
get
(
)
;
name_offset
+=
LittleEndianConsts
.
SHORT_SIZE
;
}
_name
=
new
String
(
char_array
,
0
,
name_length
)
;
}
_next_child
=
null
;
_previous_child
=
null
;
}
public
void
writeData
(
final
OutputStream
stream
)
throws
IOException
{
stream
.
write
(
_raw_data
)
;
}
public
void
setStartBlock
(
final
int
startBlock
)
{
_start_block
.
set
(
startBlock
,
_raw_data
)
;
}
public
int
getStartBlock
(
)
{
return
_start_block
.
get
(
)
;
}
public
int
getSize
(
)
{
return
_size
.
get
(
)
;
}
public
boolean
shouldUseSmallBlocks
(
)
{
return
Property
.
isSmall
(
_size
.
get
(
)
)
;
}
public
static
boolean
isSmall
(
final
int
length
)
{
return
length
<
_big_block_minimum_bytes
;
}
public
String
getName
(
)
{
return
_name
;
}
abstract
public
boolean
isDirectory
(
)
;
protected
final
void
setName
(
final
String
name
)
{
char
[
]
char_array
=
name
.
toCharArray
(
)
;
int
limit
=
Math
.
min
(
char_array
.
length
,
_max_name_length
)
;
_name
=
new
String
(
char_array
,
0
,
limit
)
;
short
offset
=
0
;
int
j
=
0
;
for
(
;
j
<
limit
;
j
++
)
{
new
ShortField
(
offset
,
(
short
)
char_array
[
j
]
,
_raw_data
)
;
offset
+=
LittleEndianConsts
.
SHORT_SIZE
;
}
for
(
;
j
<
_max_name_length
+
1
;
j
++
)
{
new
ShortField
(
offset
,
(
short
)
0
,
_raw_data
)
;
offset
+=
LittleEndianConsts
.
SHORT_SIZE
;
}
_name_size
.
set
(
(
short
)
(
(
limit
+
1
)
*
LittleEndianConsts
.
SHORT_SIZE
)
,
_raw_data
)
;
}
protected
void
setPropertyType
(
final
byte
propertyType
)
{
_property_type
.
set
(
propertyType
,
_raw_data
)
;
}
protected
void
setNodeColor
(
final
byte
nodeColor
)
{
_node_color
.
set
(
nodeColor
,
_raw_data
)
;
}
protected
void
setChildProperty
(
final
int
child
)
{
_child_property
.
set
(
child
,
_raw_data
)
;
}
protected
int
getChildIndex
(
)
{
return
_child_property
.
get
(
)
;
}
protected
void
setSize
(
final
int
size
)
{
_size
.
set
(
size
,
_raw_data
)
;
}
protected
void
setIndex
(
final
int
index
)
{
_index
=
index
;
}
protected
int
getIndex
(
)
{
return
_index
;
}
abstract
protected
void
preWrite
(
)
;
int
getNextChildIndex
(
)
{
return
_next_property
.
get
(
)
;
}
int
getPreviousChildIndex
(
)
{
return
_previous_property
.
get
(
)
;
}
static
boolean
isValidIndex
(
int
index
)
{
return
index
!=
_NO_INDEX
;
}
public
Child
getNextChild
(
)
{
return
_next_child
;
}
public
Child
getPreviousChild
(
)
{
return
_previous_child
;
}
public
void
setNextChild
(
final
Child
child
)
{
_next_child
=
child
;
_next_property
.
set
(
(
child
==
null
)
?
_NO_INDEX
:
(
(
Property
)
child
)
.
getIndex
(
)
,
_raw_data
)
;
}
public
void
setPreviousChild
(
final
Child
child
)
{
_previous_child
=
child
;
_previous_property
.
set
(
(
child
==
null
)
?
_NO_INDEX
:
(
(
Property
)
child
)
.
getIndex
(
)
,
_raw_data
)
;
}
public
Object
[
]
getViewableArray
(
)
{
Object
[
]
results
=
new
Object
[
5
]
;
results
[
0
]
=
"Name          = \""
+
getName
(
)
+
"\""
;
results
[
1
]
=
"Property Type = "
+
_property_type
.
get
(
)
;
results
[
2
]
=
"Node Color    = "
+
_node_color
.
get
(
)
;
long
time
=
_days_1
.
get
(
)
;
time
<<=
32
;
time
+=
(
(
long
)
_seconds_1
.
get
(
)
)
&
0x0000FFFFL
;
results
[
3
]
=
"Time 1        = "
+
time
;
time
=
_days_2
.
get
(
)
;
time
<<=
32
;
time
+=
(
(
long
)
_seconds_2
.
get
(
)
)
&
0x0000FFFFL
;
results
[
4
]
=
"Time 2        = "
+
time
;
return
results
;
}
public
Iterator
getViewableIterator
(
)
{
return
Collections
.
EMPTY_LIST
.
iterator
(
)
;
}
public
boolean
preferArray
(
)
{
return
true
;
}
public
String
getShortDescription
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"Property: \""
)
.
append
(
getName
(
)
)
.
append
(
"\""
)
;
return
buffer
.
toString
(
)
;
}
}
