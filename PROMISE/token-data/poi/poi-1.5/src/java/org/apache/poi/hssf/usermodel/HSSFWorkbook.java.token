package
org
.
apache
.
poi
.
hssf
.
usermodel
;
import
org
.
apache
.
poi
.
util
.
POILogFactory
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Sheet
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Workbook
;
import
org
.
apache
.
poi
.
hssf
.
record
.
*
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
POIFSFileSystem
;
import
org
.
apache
.
poi
.
util
.
POILogger
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
HSSFWorkbook
extends
java
.
lang
.
Object
{
private
static
final
int
DEBUG
=
POILogger
.
DEBUG
;
public
final
static
int
INITIAL_CAPACITY
=
3
;
private
Workbook
workbook
;
private
ArrayList
sheets
;
private
static
POILogger
log
=
POILogFactory
.
getLogger
(
HSSFWorkbook
.
class
)
;
public
HSSFWorkbook
(
)
{
workbook
=
Workbook
.
createWorkbook
(
)
;
sheets
=
new
ArrayList
(
INITIAL_CAPACITY
)
;
}
public
HSSFWorkbook
(
POIFSFileSystem
fs
)
throws
IOException
{
sheets
=
new
ArrayList
(
INITIAL_CAPACITY
)
;
InputStream
stream
=
fs
.
createDocumentInputStream
(
"Workbook"
)
;
List
records
=
RecordFactory
.
createRecords
(
stream
)
;
workbook
=
Workbook
.
createWorkbook
(
records
)
;
setPropertiesFromWorkbook
(
workbook
)
;
int
numRecords
=
workbook
.
getNumRecords
(
)
;
int
sheetNum
=
0
;
while
(
numRecords
<
records
.
size
(
)
)
{
Sheet
sheet
=
Sheet
.
createSheet
(
records
,
sheetNum
++
,
numRecords
)
;
numRecords
+=
sheet
.
getNumRecords
(
)
;
sheet
.
convertLabelRecords
(
workbook
)
;
HSSFSheet
hsheet
=
new
HSSFSheet
(
workbook
,
sheet
)
;
sheets
.
add
(
hsheet
)
;
}
}
public
HSSFWorkbook
(
InputStream
s
)
throws
IOException
{
this
(
(
new
POIFSFileSystem
(
s
)
)
)
;
}
private
void
setPropertiesFromWorkbook
(
Workbook
book
)
{
this
.
workbook
=
book
;
}
public
void
setSheetName
(
int
sheet
,
String
name
)
{
if
(
sheet
>
(
sheets
.
size
(
)
-
1
)
)
{
throw
new
RuntimeException
(
"Sheet out of bounds"
)
;
}
workbook
.
setSheetName
(
sheet
,
name
)
;
}
public
String
getSheetName
(
int
sheet
)
{
if
(
sheet
>
(
sheets
.
size
(
)
-
1
)
)
{
throw
new
RuntimeException
(
"Sheet out of bounds"
)
;
}
return
workbook
.
getSheetName
(
sheet
)
;
}
public
int
getSheetIndex
(
String
name
)
{
int
retval
=
-
1
;
for
(
int
k
=
0
;
k
<
sheets
.
size
(
)
;
k
++
)
{
String
sheet
=
workbook
.
getSheetName
(
k
)
;
if
(
sheet
.
equals
(
name
)
)
{
retval
=
k
;
break
;
}
}
return
retval
;
}
public
HSSFSheet
createSheet
(
)
{
HSSFSheet
sheet
=
new
HSSFSheet
(
workbook
)
;
sheets
.
add
(
sheet
)
;
workbook
.
setSheetName
(
sheets
.
size
(
)
-
1
,
"Sheet"
+
(
sheets
.
size
(
)
-
1
)
)
;
WindowTwoRecord
windowTwo
=
(
WindowTwoRecord
)
sheet
.
getSheet
(
)
.
findFirstRecordBySid
(
WindowTwoRecord
.
sid
)
;
windowTwo
.
setSelected
(
sheets
.
size
(
)
==
1
)
;
windowTwo
.
setPaged
(
sheets
.
size
(
)
==
1
)
;
return
sheet
;
}
public
HSSFSheet
createSheet
(
String
sheetname
)
{
HSSFSheet
sheet
=
new
HSSFSheet
(
workbook
)
;
sheets
.
add
(
sheet
)
;
workbook
.
setSheetName
(
sheets
.
size
(
)
-
1
,
sheetname
)
;
WindowTwoRecord
windowTwo
=
(
WindowTwoRecord
)
sheet
.
getSheet
(
)
.
findFirstRecordBySid
(
WindowTwoRecord
.
sid
)
;
windowTwo
.
setSelected
(
sheets
.
size
(
)
==
1
)
;
windowTwo
.
setPaged
(
sheets
.
size
(
)
==
1
)
;
return
sheet
;
}
public
int
getNumberOfSheets
(
)
{
return
sheets
.
size
(
)
;
}
public
HSSFSheet
getSheetAt
(
int
index
)
{
return
(
HSSFSheet
)
sheets
.
get
(
index
)
;
}
public
HSSFSheet
getSheet
(
String
name
)
{
HSSFSheet
retval
=
null
;
for
(
int
k
=
0
;
k
<
sheets
.
size
(
)
;
k
++
)
{
String
sheetname
=
workbook
.
getSheetName
(
k
)
;
if
(
sheetname
.
equals
(
name
)
)
{
retval
=
(
HSSFSheet
)
sheets
.
get
(
k
)
;
}
}
return
retval
;
}
public
void
removeSheetAt
(
int
index
)
{
sheets
.
remove
(
index
)
;
workbook
.
removeSheet
(
index
)
;
}
public
void
setBackupFlag
(
boolean
backupValue
)
{
BackupRecord
backupRecord
=
workbook
.
getBackupRecord
(
)
;
backupRecord
.
setBackup
(
backupValue
?
(
short
)
1
:
(
short
)
0
)
;
}
public
boolean
getBackupFlag
(
)
{
BackupRecord
backupRecord
=
workbook
.
getBackupRecord
(
)
;
return
(
backupRecord
.
getBackup
(
)
==
0
)
?
false
:
true
;
}
public
HSSFFont
createFont
(
)
{
FontRecord
font
=
workbook
.
createNewFont
(
)
;
short
fontindex
=
(
short
)
(
getNumberOfFonts
(
)
-
1
)
;
if
(
fontindex
>
3
)
{
fontindex
++
;
}
HSSFFont
retval
=
new
HSSFFont
(
fontindex
,
font
)
;
return
retval
;
}
public
short
getNumberOfFonts
(
)
{
return
(
short
)
workbook
.
getNumberOfFontRecords
(
)
;
}
public
HSSFFont
getFontAt
(
short
idx
)
{
FontRecord
font
=
workbook
.
getFontRecordAt
(
idx
)
;
HSSFFont
retval
=
new
HSSFFont
(
idx
,
font
)
;
return
retval
;
}
public
HSSFCellStyle
createCellStyle
(
)
{
ExtendedFormatRecord
xfr
=
workbook
.
createCellXF
(
)
;
short
index
=
(
short
)
(
getNumCellStyles
(
)
-
1
)
;
HSSFCellStyle
style
=
new
HSSFCellStyle
(
index
,
xfr
)
;
return
style
;
}
public
short
getNumCellStyles
(
)
{
return
(
short
)
workbook
.
getNumExFormats
(
)
;
}
public
HSSFCellStyle
getCellStyleAt
(
short
idx
)
{
ExtendedFormatRecord
xfr
=
workbook
.
getExFormatAt
(
idx
)
;
HSSFCellStyle
style
=
new
HSSFCellStyle
(
idx
,
xfr
)
;
return
style
;
}
public
void
write
(
OutputStream
stream
)
throws
IOException
{
byte
[
]
bytes
=
getBytes
(
)
;
POIFSFileSystem
fs
=
new
POIFSFileSystem
(
)
;
fs
.
createDocument
(
new
ByteArrayInputStream
(
bytes
)
,
"Workbook"
)
;
fs
.
writeFilesystem
(
stream
)
;
}
public
byte
[
]
getBytes
(
)
{
log
.
log
(
DEBUG
,
"HSSFWorkbook.getBytes()"
)
;
int
wbsize
=
workbook
.
getSize
(
)
;
int
totalsize
=
wbsize
;
for
(
int
k
=
0
;
k
<
sheets
.
size
(
)
;
k
++
)
{
workbook
.
setSheetBof
(
k
,
totalsize
)
;
totalsize
+=
(
(
HSSFSheet
)
sheets
.
get
(
k
)
)
.
getSheet
(
)
.
getSize
(
)
;
}
if
(
totalsize
<
4096
)
{
totalsize
=
4096
;
}
byte
[
]
retval
=
new
byte
[
totalsize
]
;
int
pos
=
workbook
.
serialize
(
0
,
retval
)
;
for
(
int
k
=
0
;
k
<
sheets
.
size
(
)
;
k
++
)
{
pos
+=
(
(
HSSFSheet
)
sheets
.
get
(
k
)
)
.
getSheet
(
)
.
serialize
(
pos
,
retval
)
;
}
for
(
int
k
=
pos
;
k
<
totalsize
;
k
++
)
{
retval
[
k
]
=
0
;
}
return
retval
;
}
public
int
addSSTString
(
String
string
)
{
return
workbook
.
addSSTString
(
string
)
;
}
public
String
getSSTString
(
int
index
)
{
return
workbook
.
getSSTString
(
index
)
;
}
Workbook
getWorkbook
(
)
{
return
workbook
;
}
}
