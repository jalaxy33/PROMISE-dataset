package
org
.
apache
.
poi
.
hpsf
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
hpsf
.
wellknown
.
*
;
public
class
DocumentSummaryInformation
extends
SpecialPropertySet
{
public
DocumentSummaryInformation
(
final
PropertySet
ps
)
throws
UnexpectedPropertySetTypeException
{
super
(
ps
)
;
if
(
!
isDocumentSummaryInformation
(
)
)
throw
new
UnexpectedPropertySetTypeException
(
"Not a "
+
getClass
(
)
.
getName
(
)
)
;
}
public
String
getCategory
(
)
{
return
(
String
)
getProperty
(
PropertyIDMap
.
PID_CATEGORY
)
;
}
public
String
getPresentationFormat
(
)
{
return
(
String
)
getProperty
(
PropertyIDMap
.
PID_PRESFORMAT
)
;
}
public
int
getByteCount
(
)
{
return
getPropertyIntValue
(
PropertyIDMap
.
PID_BYTECOUNT
)
;
}
public
int
getLineCount
(
)
{
return
getPropertyIntValue
(
PropertyIDMap
.
PID_LINECOUNT
)
;
}
public
int
getParCount
(
)
{
return
getPropertyIntValue
(
PropertyIDMap
.
PID_PARCOUNT
)
;
}
public
int
getSlideCount
(
)
{
return
getPropertyIntValue
(
PropertyIDMap
.
PID_SLIDECOUNT
)
;
}
public
int
getNoteCount
(
)
{
return
getPropertyIntValue
(
PropertyIDMap
.
PID_NOTECOUNT
)
;
}
public
int
getHiddenCount
(
)
{
return
getPropertyIntValue
(
PropertyIDMap
.
PID_HIDDENCOUNT
)
;
}
public
int
getMMClipCount
(
)
{
return
getPropertyIntValue
(
PropertyIDMap
.
PID_MMCLIPCOUNT
)
;
}
public
byte
[
]
getScale
(
)
{
if
(
true
)
throw
new
UnsupportedOperationException
(
"FIXME"
)
;
return
(
byte
[
]
)
getProperty
(
PropertyIDMap
.
PID_SCALE
)
;
}
public
byte
[
]
getHeadingPair
(
)
{
if
(
true
)
throw
new
UnsupportedOperationException
(
"FIXME"
)
;
return
(
byte
[
]
)
getProperty
(
PropertyIDMap
.
PID_HEADINGPAIR
)
;
}
public
byte
[
]
getDocparts
(
)
{
if
(
true
)
throw
new
UnsupportedOperationException
(
"FIXME"
)
;
return
(
byte
[
]
)
getProperty
(
PropertyIDMap
.
PID_DOCPARTS
)
;
}
public
String
getManager
(
)
{
return
(
String
)
getProperty
(
PropertyIDMap
.
PID_MANAGER
)
;
}
public
String
getCompany
(
)
{
return
(
String
)
getProperty
(
PropertyIDMap
.
PID_COMPANY
)
;
}
public
byte
[
]
getLinksDirty
(
)
{
if
(
true
)
throw
new
UnsupportedOperationException
(
"FIXME"
)
;
return
(
byte
[
]
)
getProperty
(
PropertyIDMap
.
PID_LINKSDIRTY
)
;
}
}
