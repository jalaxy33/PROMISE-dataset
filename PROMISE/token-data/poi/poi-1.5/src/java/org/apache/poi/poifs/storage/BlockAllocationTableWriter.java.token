package
org
.
apache
.
poi
.
poifs
.
storage
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
poifs
.
common
.
POIFSConstants
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
BATManaged
;
import
org
.
apache
.
poi
.
util
.
IntList
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
LittleEndianConsts
;
public
class
BlockAllocationTableWriter
implements
BlockWritable
,
BATManaged
{
private
IntList
_entries
;
private
BATBlock
[
]
_blocks
;
private
int
_start_block
;
public
BlockAllocationTableWriter
(
)
{
_start_block
=
POIFSConstants
.
END_OF_CHAIN
;
_entries
=
new
IntList
(
)
;
_blocks
=
new
BATBlock
[
0
]
;
}
public
int
createBlocks
(
)
{
int
xbat_blocks
=
0
;
int
bat_blocks
=
0
;
while
(
true
)
{
int
calculated_bat_blocks
=
BATBlock
.
calculateStorageRequirements
(
bat_blocks
+
xbat_blocks
+
_entries
.
size
(
)
)
;
int
calculated_xbat_blocks
=
HeaderBlockWriter
.
calculateXBATStorageRequirements
(
calculated_bat_blocks
)
;
if
(
(
bat_blocks
==
calculated_bat_blocks
)
&&
(
xbat_blocks
==
calculated_xbat_blocks
)
)
{
break
;
}
else
{
bat_blocks
=
calculated_bat_blocks
;
xbat_blocks
=
calculated_xbat_blocks
;
}
}
int
startBlock
=
allocateSpace
(
bat_blocks
)
;
allocateSpace
(
xbat_blocks
)
;
simpleCreateBlocks
(
)
;
return
startBlock
;
}
public
int
allocateSpace
(
final
int
blockCount
)
{
int
startBlock
=
_entries
.
size
(
)
;
if
(
blockCount
>
0
)
{
int
limit
=
blockCount
-
1
;
int
index
=
startBlock
+
1
;
for
(
int
k
=
0
;
k
<
limit
;
k
++
)
{
_entries
.
add
(
index
++
)
;
}
_entries
.
add
(
POIFSConstants
.
END_OF_CHAIN
)
;
}
return
startBlock
;
}
public
int
getStartBlock
(
)
{
return
_start_block
;
}
void
simpleCreateBlocks
(
)
{
_blocks
=
BATBlock
.
createBATBlocks
(
_entries
.
toArray
(
)
)
;
}
public
void
writeBlocks
(
final
OutputStream
stream
)
throws
IOException
{
for
(
int
j
=
0
;
j
<
_blocks
.
length
;
j
++
)
{
_blocks
[
j
]
.
writeBlocks
(
stream
)
;
}
}
public
int
countBlocks
(
)
{
return
_blocks
.
length
;
}
public
void
setStartBlock
(
int
start_block
)
{
_start_block
=
start_block
;
}
}
