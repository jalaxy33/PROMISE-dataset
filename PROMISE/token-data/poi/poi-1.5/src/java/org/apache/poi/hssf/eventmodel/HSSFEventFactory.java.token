package
org
.
apache
.
poi
.
hssf
.
eventmodel
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
IOException
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RecordFormatException
;
import
org
.
apache
.
poi
.
hssf
.
record
.
Record
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RecordFactory
;
import
org
.
apache
.
poi
.
hssf
.
record
.
ContinueRecord
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
POIFSFileSystem
;
public
class
HSSFEventFactory
{
public
HSSFEventFactory
(
)
{
}
public
void
processWorkbookEvents
(
HSSFRequest
req
,
POIFSFileSystem
fs
)
throws
IOException
{
InputStream
in
=
fs
.
createDocumentInputStream
(
"Workbook"
)
;
processEvents
(
req
,
in
)
;
}
public
void
processEvents
(
HSSFRequest
req
,
InputStream
in
)
throws
IOException
{
try
{
byte
[
]
sidbytes
=
new
byte
[
2
]
;
int
bytesread
=
in
.
read
(
sidbytes
)
;
Record
rec
=
null
;
while
(
bytesread
>
0
)
{
short
sid
=
0
;
sid
=
LittleEndian
.
getShort
(
sidbytes
)
;
if
(
(
rec
!=
null
)
&&
(
sid
!=
ContinueRecord
.
sid
)
)
{
req
.
processRecord
(
rec
)
;
}
if
(
sid
!=
ContinueRecord
.
sid
)
{
short
size
=
LittleEndian
.
readShort
(
in
)
;
byte
[
]
data
=
new
byte
[
size
]
;
if
(
data
.
length
>
0
)
{
in
.
read
(
data
)
;
}
Record
[
]
recs
=
RecordFactory
.
createRecord
(
sid
,
size
,
data
)
;
if
(
recs
.
length
>
1
)
{
for
(
int
k
=
0
;
k
<
(
recs
.
length
-
1
)
;
k
++
)
{
req
.
processRecord
(
recs
[
k
]
)
;
}
}
rec
=
recs
[
recs
.
length
-
1
]
;
}
else
{
short
size
=
LittleEndian
.
readShort
(
in
)
;
byte
[
]
data
=
new
byte
[
size
]
;
if
(
data
.
length
>
0
)
{
in
.
read
(
data
)
;
}
rec
.
processContinueRecord
(
data
)
;
}
bytesread
=
in
.
read
(
sidbytes
)
;
}
if
(
rec
!=
null
)
{
req
.
processRecord
(
rec
)
;
}
}
catch
(
IOException
e
)
{
throw
new
RecordFormatException
(
"Error reading bytes"
)
;
}
}
}
