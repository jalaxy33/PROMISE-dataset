package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
BitField
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
import
org
.
apache
.
poi
.
util
.
HexDump
;
public
class
LegendRecord
extends
Record
{
public
final
static
short
sid
=
0x1015
;
private
int
field_1_xPosition
;
private
int
field_2_yPosition
;
private
int
field_3_xSize
;
private
int
field_4_ySize
;
private
byte
field_5_type
;
public
final
static
byte
TYPE_BOTTOM
=
0
;
public
final
static
byte
TYPE_CORNER
=
1
;
public
final
static
byte
TYPE_TOP
=
2
;
public
final
static
byte
TYPE_RIGHT
=
3
;
public
final
static
byte
TYPE_LEFT
=
4
;
public
final
static
byte
TYPE_NOT_DOCKED
=
7
;
private
byte
field_6_spacing
;
public
final
static
byte
SPACING_CLOSE
=
0
;
public
final
static
byte
SPACING_MEDIUM
=
1
;
public
final
static
byte
SPACING_OPEN
=
2
;
private
short
field_7_options
;
private
BitField
autoPosition
=
new
BitField
(
0x1
)
;
private
BitField
autoSeries
=
new
BitField
(
0x2
)
;
private
BitField
autoPosX
=
new
BitField
(
0x4
)
;
private
BitField
autoPosY
=
new
BitField
(
0x8
)
;
private
BitField
vert
=
new
BitField
(
0x10
)
;
private
BitField
containsDataTable
=
new
BitField
(
0x20
)
;
public
LegendRecord
(
)
{
}
public
LegendRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
LegendRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not a Legend record"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_xPosition
=
LittleEndian
.
getInt
(
data
,
0x0
+
offset
)
;
field_2_yPosition
=
LittleEndian
.
getInt
(
data
,
0x4
+
offset
)
;
field_3_xSize
=
LittleEndian
.
getInt
(
data
,
0x8
+
offset
)
;
field_4_ySize
=
LittleEndian
.
getInt
(
data
,
0xc
+
offset
)
;
field_5_type
=
data
[
0x10
+
offset
]
;
field_6_spacing
=
data
[
0x11
+
offset
]
;
field_7_options
=
LittleEndian
.
getShort
(
data
,
0x12
+
offset
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[Legend]\n"
)
;
buffer
.
append
(
"    .xPosition            = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
int
)
getXPosition
(
)
)
)
.
append
(
" ("
)
.
append
(
getXPosition
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .yPosition            = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
int
)
getYPosition
(
)
)
)
.
append
(
" ("
)
.
append
(
getYPosition
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .xSize                = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
int
)
getXSize
(
)
)
)
.
append
(
" ("
)
.
append
(
getXSize
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .ySize                = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
int
)
getYSize
(
)
)
)
.
append
(
" ("
)
.
append
(
getYSize
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .type                 = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
byte
)
getType
(
)
)
)
.
append
(
" ("
)
.
append
(
getType
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .spacing              = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
byte
)
getSpacing
(
)
)
)
.
append
(
" ("
)
.
append
(
getSpacing
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .options              = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
short
)
getOptions
(
)
)
)
.
append
(
" ("
)
.
append
(
getOptions
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"         .autoPosition             = "
)
.
append
(
isAutoPosition
(
)
)
.
append
(
'\n'
)
;
buffer
.
append
(
"         .autoSeries               = "
)
.
append
(
isAutoSeries
(
)
)
.
append
(
'\n'
)
;
buffer
.
append
(
"         .autoPosX                 = "
)
.
append
(
isAutoPosX
(
)
)
.
append
(
'\n'
)
;
buffer
.
append
(
"         .autoPosY                 = "
)
.
append
(
isAutoPosY
(
)
)
.
append
(
'\n'
)
;
buffer
.
append
(
"         .vert                     = "
)
.
append
(
isVert
(
)
)
.
append
(
'\n'
)
;
buffer
.
append
(
"         .containsDataTable        = "
)
.
append
(
isContainsDataTable
(
)
)
.
append
(
'\n'
)
;
buffer
.
append
(
"[/Legend]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
getRecordSize
(
)
-
4
)
)
;
LittleEndian
.
putInt
(
data
,
4
+
offset
,
field_1_xPosition
)
;
LittleEndian
.
putInt
(
data
,
8
+
offset
,
field_2_yPosition
)
;
LittleEndian
.
putInt
(
data
,
12
+
offset
,
field_3_xSize
)
;
LittleEndian
.
putInt
(
data
,
16
+
offset
,
field_4_ySize
)
;
data
[
20
+
offset
]
=
field_5_type
;
data
[
21
+
offset
]
=
field_6_spacing
;
LittleEndian
.
putShort
(
data
,
22
+
offset
,
field_7_options
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
4
+
4
+
4
+
4
+
4
+
1
+
1
+
2
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
int
getXPosition
(
)
{
return
field_1_xPosition
;
}
public
void
setXPosition
(
int
field_1_xPosition
)
{
this
.
field_1_xPosition
=
field_1_xPosition
;
}
public
int
getYPosition
(
)
{
return
field_2_yPosition
;
}
public
void
setYPosition
(
int
field_2_yPosition
)
{
this
.
field_2_yPosition
=
field_2_yPosition
;
}
public
int
getXSize
(
)
{
return
field_3_xSize
;
}
public
void
setXSize
(
int
field_3_xSize
)
{
this
.
field_3_xSize
=
field_3_xSize
;
}
public
int
getYSize
(
)
{
return
field_4_ySize
;
}
public
void
setYSize
(
int
field_4_ySize
)
{
this
.
field_4_ySize
=
field_4_ySize
;
}
public
byte
getType
(
)
{
return
field_5_type
;
}
public
void
setType
(
byte
field_5_type
)
{
this
.
field_5_type
=
field_5_type
;
}
public
byte
getSpacing
(
)
{
return
field_6_spacing
;
}
public
void
setSpacing
(
byte
field_6_spacing
)
{
this
.
field_6_spacing
=
field_6_spacing
;
}
public
short
getOptions
(
)
{
return
field_7_options
;
}
public
void
setOptions
(
short
field_7_options
)
{
this
.
field_7_options
=
field_7_options
;
}
public
void
setAutoPosition
(
boolean
value
)
{
field_7_options
=
autoPosition
.
setShortBoolean
(
field_7_options
,
value
)
;
}
public
boolean
isAutoPosition
(
)
{
return
autoPosition
.
isSet
(
field_7_options
)
;
}
public
void
setAutoSeries
(
boolean
value
)
{
field_7_options
=
autoSeries
.
setShortBoolean
(
field_7_options
,
value
)
;
}
public
boolean
isAutoSeries
(
)
{
return
autoSeries
.
isSet
(
field_7_options
)
;
}
public
void
setAutoPosX
(
boolean
value
)
{
field_7_options
=
autoPosX
.
setShortBoolean
(
field_7_options
,
value
)
;
}
public
boolean
isAutoPosX
(
)
{
return
autoPosX
.
isSet
(
field_7_options
)
;
}
public
void
setAutoPosY
(
boolean
value
)
{
field_7_options
=
autoPosY
.
setShortBoolean
(
field_7_options
,
value
)
;
}
public
boolean
isAutoPosY
(
)
{
return
autoPosY
.
isSet
(
field_7_options
)
;
}
public
void
setVert
(
boolean
value
)
{
field_7_options
=
vert
.
setShortBoolean
(
field_7_options
,
value
)
;
}
public
boolean
isVert
(
)
{
return
vert
.
isSet
(
field_7_options
)
;
}
public
void
setContainsDataTable
(
boolean
value
)
{
field_7_options
=
containsDataTable
.
setShortBoolean
(
field_7_options
,
value
)
;
}
public
boolean
isContainsDataTable
(
)
{
return
containsDataTable
.
isSet
(
field_7_options
)
;
}
}
