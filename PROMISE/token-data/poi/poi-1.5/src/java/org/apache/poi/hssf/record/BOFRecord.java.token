package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
BOFRecord
extends
Record
{
public
final
static
short
sid
=
0x809
;
private
short
field_1_version
;
private
short
field_2_type
;
private
short
field_3_build
;
private
short
field_4_year
;
private
int
field_5_history
;
private
int
field_6_rversion
;
public
final
static
short
VERSION
=
0x06
;
public
final
static
short
BUILD
=
0x10d3
;
public
final
static
short
BUILD_YEAR
=
0x07CC
;
public
final
static
short
HISTORY_MASK
=
0x41
;
public
final
static
short
TYPE_WORKBOOK
=
0x05
;
public
final
static
short
TYPE_VB_MODULE
=
0x06
;
public
final
static
short
TYPE_WORKSHEET
=
0x10
;
public
final
static
short
TYPE_CHART
=
0x20
;
public
final
static
short
TYPE_EXCEL_4_MACRO
=
0x40
;
public
final
static
short
TYPE_WORKSPACE_FILE
=
0x100
;
public
BOFRecord
(
)
{
}
public
BOFRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
BOFRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A BOF RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_version
=
LittleEndian
.
getShort
(
data
,
0
+
offset
)
;
field_2_type
=
LittleEndian
.
getShort
(
data
,
2
+
offset
)
;
field_3_build
=
LittleEndian
.
getShort
(
data
,
4
+
offset
)
;
field_4_year
=
LittleEndian
.
getShort
(
data
,
6
+
offset
)
;
field_5_history
=
LittleEndian
.
getInt
(
data
,
8
+
offset
)
;
field_6_rversion
=
LittleEndian
.
getInt
(
data
,
12
+
offset
)
;
}
public
void
setVersion
(
short
version
)
{
field_1_version
=
version
;
}
public
void
setType
(
short
type
)
{
field_2_type
=
type
;
}
public
void
setBuild
(
short
build
)
{
field_3_build
=
build
;
}
public
void
setBuildYear
(
short
year
)
{
field_4_year
=
year
;
}
public
void
setHistoryBitMask
(
int
bitmask
)
{
field_5_history
=
bitmask
;
}
public
void
setRequiredVersion
(
int
version
)
{
field_6_rversion
=
version
;
}
public
short
getVersion
(
)
{
return
field_1_version
;
}
public
short
getType
(
)
{
return
field_2_type
;
}
public
short
getBuild
(
)
{
return
field_3_build
;
}
public
short
getBuildYear
(
)
{
return
field_4_year
;
}
public
int
getHistoryBitMask
(
)
{
return
field_5_history
;
}
public
int
getRequiredVersion
(
)
{
return
field_6_rversion
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[BOF RECORD]\n"
)
;
buffer
.
append
(
"    .version         = "
)
.
append
(
Integer
.
toHexString
(
getVersion
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .type            = "
)
.
append
(
Integer
.
toHexString
(
getType
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .build           = "
)
.
append
(
Integer
.
toHexString
(
getBuild
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .buildyear       = "
)
.
append
(
getBuildYear
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .history         = "
)
.
append
(
Integer
.
toHexString
(
getHistoryBitMask
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .requiredversion = "
)
.
append
(
Integer
.
toHexString
(
getRequiredVersion
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/BOF RECORD]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
(
short
)
0x10
)
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
getVersion
(
)
)
;
LittleEndian
.
putShort
(
data
,
6
+
offset
,
getType
(
)
)
;
LittleEndian
.
putShort
(
data
,
8
+
offset
,
getBuild
(
)
)
;
LittleEndian
.
putShort
(
data
,
10
+
offset
,
getBuildYear
(
)
)
;
LittleEndian
.
putInt
(
data
,
12
+
offset
,
getHistoryBitMask
(
)
)
;
LittleEndian
.
putInt
(
data
,
16
+
offset
,
getRequiredVersion
(
)
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
20
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
}
