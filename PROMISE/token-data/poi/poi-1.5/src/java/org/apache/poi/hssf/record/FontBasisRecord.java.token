package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
BitField
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
import
org
.
apache
.
poi
.
util
.
HexDump
;
public
class
FontBasisRecord
extends
Record
{
public
final
static
short
sid
=
0x1060
;
private
short
field_1_xBasis
;
private
short
field_2_yBasis
;
private
short
field_3_heightBasis
;
private
short
field_4_scale
;
private
short
field_5_indexToFontTable
;
public
FontBasisRecord
(
)
{
}
public
FontBasisRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
FontBasisRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not a FontBasis record"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_xBasis
=
LittleEndian
.
getShort
(
data
,
0x0
+
offset
)
;
field_2_yBasis
=
LittleEndian
.
getShort
(
data
,
0x2
+
offset
)
;
field_3_heightBasis
=
LittleEndian
.
getShort
(
data
,
0x4
+
offset
)
;
field_4_scale
=
LittleEndian
.
getShort
(
data
,
0x6
+
offset
)
;
field_5_indexToFontTable
=
LittleEndian
.
getShort
(
data
,
0x8
+
offset
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[FontBasis]\n"
)
;
buffer
.
append
(
"    .xBasis               = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
short
)
getXBasis
(
)
)
)
.
append
(
" ("
)
.
append
(
getXBasis
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .yBasis               = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
short
)
getYBasis
(
)
)
)
.
append
(
" ("
)
.
append
(
getYBasis
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .heightBasis          = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
short
)
getHeightBasis
(
)
)
)
.
append
(
" ("
)
.
append
(
getHeightBasis
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .scale                = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
short
)
getScale
(
)
)
)
.
append
(
" ("
)
.
append
(
getScale
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"    .indexToFontTable     = "
)
.
append
(
"0x"
)
.
append
(
HexDump
.
toHex
(
(
short
)
getIndexToFontTable
(
)
)
)
.
append
(
" ("
)
.
append
(
getIndexToFontTable
(
)
)
.
append
(
" )\n"
)
;
buffer
.
append
(
"[/FontBasis]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
getRecordSize
(
)
-
4
)
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
field_1_xBasis
)
;
LittleEndian
.
putShort
(
data
,
6
+
offset
,
field_2_yBasis
)
;
LittleEndian
.
putShort
(
data
,
8
+
offset
,
field_3_heightBasis
)
;
LittleEndian
.
putShort
(
data
,
10
+
offset
,
field_4_scale
)
;
LittleEndian
.
putShort
(
data
,
12
+
offset
,
field_5_indexToFontTable
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
4
+
2
+
2
+
2
+
2
+
2
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
short
getXBasis
(
)
{
return
field_1_xBasis
;
}
public
void
setXBasis
(
short
field_1_xBasis
)
{
this
.
field_1_xBasis
=
field_1_xBasis
;
}
public
short
getYBasis
(
)
{
return
field_2_yBasis
;
}
public
void
setYBasis
(
short
field_2_yBasis
)
{
this
.
field_2_yBasis
=
field_2_yBasis
;
}
public
short
getHeightBasis
(
)
{
return
field_3_heightBasis
;
}
public
void
setHeightBasis
(
short
field_3_heightBasis
)
{
this
.
field_3_heightBasis
=
field_3_heightBasis
;
}
public
short
getScale
(
)
{
return
field_4_scale
;
}
public
void
setScale
(
short
field_4_scale
)
{
this
.
field_4_scale
=
field_4_scale
;
}
public
short
getIndexToFontTable
(
)
{
return
field_5_indexToFontTable
;
}
public
void
setIndexToFontTable
(
short
field_5_indexToFontTable
)
{
this
.
field_5_indexToFontTable
=
field_5_indexToFontTable
;
}
}
