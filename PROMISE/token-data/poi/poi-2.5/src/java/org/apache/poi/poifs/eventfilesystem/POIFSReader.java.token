package
org
.
apache
.
poi
.
poifs
.
eventfilesystem
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
DocumentInputStream
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
POIFSDocument
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
POIFSDocumentPath
;
import
org
.
apache
.
poi
.
poifs
.
property
.
DirectoryProperty
;
import
org
.
apache
.
poi
.
poifs
.
property
.
Property
;
import
org
.
apache
.
poi
.
poifs
.
property
.
PropertyTable
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
BlockAllocationTableReader
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
BlockList
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
HeaderBlockReader
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
RawDataBlockList
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
SmallBlockTableReader
;
public
class
POIFSReader
{
private
POIFSReaderRegistry
registry
;
private
boolean
registryClosed
;
public
POIFSReader
(
)
{
registry
=
new
POIFSReaderRegistry
(
)
;
registryClosed
=
false
;
}
public
void
read
(
final
InputStream
stream
)
throws
IOException
{
registryClosed
=
true
;
HeaderBlockReader
header_block_reader
=
new
HeaderBlockReader
(
stream
)
;
RawDataBlockList
data_blocks
=
new
RawDataBlockList
(
stream
)
;
new
BlockAllocationTableReader
(
header_block_reader
.
getBATCount
(
)
,
header_block_reader
.
getBATArray
(
)
,
header_block_reader
.
getXBATCount
(
)
,
header_block_reader
.
getXBATIndex
(
)
,
data_blocks
)
;
PropertyTable
properties
=
new
PropertyTable
(
header_block_reader
.
getPropertyStart
(
)
,
data_blocks
)
;
processProperties
(
SmallBlockTableReader
.
getSmallDocumentBlocks
(
data_blocks
,
properties
.
getRoot
(
)
,
header_block_reader
.
getSBATStart
(
)
)
,
data_blocks
,
properties
.
getRoot
(
)
.
getChildren
(
)
,
new
POIFSDocumentPath
(
)
)
;
}
public
void
registerListener
(
final
POIFSReaderListener
listener
)
{
if
(
listener
==
null
)
{
throw
new
NullPointerException
(
)
;
}
if
(
registryClosed
)
{
throw
new
IllegalStateException
(
)
;
}
registry
.
registerListener
(
listener
)
;
}
public
void
registerListener
(
final
POIFSReaderListener
listener
,
final
String
name
)
{
registerListener
(
listener
,
null
,
name
)
;
}
public
void
registerListener
(
final
POIFSReaderListener
listener
,
final
POIFSDocumentPath
path
,
final
String
name
)
{
if
(
(
listener
==
null
)
||
(
name
==
null
)
||
(
name
.
length
(
)
==
0
)
)
{
throw
new
NullPointerException
(
)
;
}
if
(
registryClosed
)
{
throw
new
IllegalStateException
(
)
;
}
registry
.
registerListener
(
listener
,
(
path
==
null
)
?
new
POIFSDocumentPath
(
)
:
path
,
name
)
;
}
public
static
void
main
(
String
args
[
]
)
throws
IOException
{
if
(
args
.
length
==
0
)
{
System
.
err
.
println
(
"at least one argument required: input filename(s)"
)
;
System
.
exit
(
1
)
;
}
for
(
int
j
=
0
;
j
<
args
.
length
;
j
++
)
{
POIFSReader
reader
=
new
POIFSReader
(
)
;
POIFSReaderListener
listener
=
new
SampleListener
(
)
;
reader
.
registerListener
(
listener
)
;
System
.
out
.
println
(
"reading "
+
args
[
j
]
)
;
FileInputStream
istream
=
new
FileInputStream
(
args
[
j
]
)
;
reader
.
read
(
istream
)
;
istream
.
close
(
)
;
}
}
private
void
processProperties
(
final
BlockList
small_blocks
,
final
BlockList
big_blocks
,
final
Iterator
properties
,
final
POIFSDocumentPath
path
)
throws
IOException
{
while
(
properties
.
hasNext
(
)
)
{
Property
property
=
(
Property
)
properties
.
next
(
)
;
String
name
=
property
.
getName
(
)
;
if
(
property
.
isDirectory
(
)
)
{
POIFSDocumentPath
new_path
=
new
POIFSDocumentPath
(
path
,
new
String
[
]
{
name
}
)
;
processProperties
(
small_blocks
,
big_blocks
,
(
(
DirectoryProperty
)
property
)
.
getChildren
(
)
,
new_path
)
;
}
else
{
int
startBlock
=
property
.
getStartBlock
(
)
;
Iterator
listeners
=
registry
.
getListeners
(
path
,
name
)
;
if
(
listeners
.
hasNext
(
)
)
{
int
size
=
property
.
getSize
(
)
;
POIFSDocument
document
=
null
;
if
(
property
.
shouldUseSmallBlocks
(
)
)
{
document
=
new
POIFSDocument
(
name
,
small_blocks
.
fetchBlocks
(
startBlock
)
,
size
)
;
}
else
{
document
=
new
POIFSDocument
(
name
,
big_blocks
.
fetchBlocks
(
startBlock
)
,
size
)
;
}
while
(
listeners
.
hasNext
(
)
)
{
POIFSReaderListener
listener
=
(
POIFSReaderListener
)
listeners
.
next
(
)
;
listener
.
processPOIFSReaderEvent
(
new
POIFSReaderEvent
(
new
DocumentInputStream
(
document
)
,
path
,
name
)
)
;
}
}
else
{
if
(
property
.
shouldUseSmallBlocks
(
)
)
{
small_blocks
.
fetchBlocks
(
startBlock
)
;
}
else
{
big_blocks
.
fetchBlocks
(
startBlock
)
;
}
}
}
}
}
private
static
class
SampleListener
implements
POIFSReaderListener
{
SampleListener
(
)
{
}
public
void
processPOIFSReaderEvent
(
final
POIFSReaderEvent
event
)
{
DocumentInputStream
istream
=
event
.
getStream
(
)
;
POIFSDocumentPath
path
=
event
.
getPath
(
)
;
String
name
=
event
.
getName
(
)
;
try
{
byte
[
]
data
=
new
byte
[
istream
.
available
(
)
]
;
istream
.
read
(
data
)
;
int
pathLength
=
path
.
length
(
)
;
for
(
int
k
=
0
;
k
<
pathLength
;
k
++
)
{
System
.
out
.
print
(
"/"
+
path
.
getComponent
(
k
)
)
;
}
System
.
out
.
println
(
"/"
+
name
+
": "
+
data
.
length
+
" bytes read"
)
;
}
catch
(
IOException
ignored
)
{
}
}
}
}
