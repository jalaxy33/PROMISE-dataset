package
org
.
apache
.
poi
.
util
;
import
java
.
io
.
*
;
public
class
HexDump
{
public
static
final
String
EOL
=
System
.
getProperty
(
"line.separator"
)
;
private
static
final
char
_hexcodes
[
]
=
{
'0'
,
'1'
,
'2'
,
'3'
,
'4'
,
'5'
,
'6'
,
'7'
,
'8'
,
'9'
,
'A'
,
'B'
,
'C'
,
'D'
,
'E'
,
'F'
}
;
private
static
final
int
_shifts
[
]
=
{
28
,
24
,
20
,
16
,
12
,
8
,
4
,
0
}
;
private
HexDump
(
)
{
}
public
synchronized
static
void
dump
(
final
byte
[
]
data
,
final
long
offset
,
final
OutputStream
stream
,
final
int
index
,
final
int
length
)
throws
IOException
,
ArrayIndexOutOfBoundsException
,
IllegalArgumentException
{
if
(
(
index
<
0
)
||
(
data
.
length
!=
0
&&
index
>=
data
.
length
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"illegal index: "
+
index
+
" into array of length "
+
data
.
length
)
;
}
if
(
data
.
length
==
0
)
return
;
if
(
stream
==
null
)
{
throw
new
IllegalArgumentException
(
"cannot write to nullstream"
)
;
}
long
display_offset
=
offset
+
index
;
StringBuffer
buffer
=
new
StringBuffer
(
74
)
;
int
data_length
=
Math
.
min
(
data
.
length
,
index
+
length
)
;
for
(
int
j
=
index
;
j
<
data_length
;
j
+=
16
)
{
int
chars_read
=
data_length
-
j
;
if
(
chars_read
>
16
)
{
chars_read
=
16
;
}
buffer
.
append
(
dump
(
display_offset
)
)
.
append
(
' '
)
;
for
(
int
k
=
0
;
k
<
16
;
k
++
)
{
if
(
k
<
chars_read
)
{
buffer
.
append
(
dump
(
data
[
k
+
j
]
)
)
;
}
else
{
buffer
.
append
(
"  "
)
;
}
buffer
.
append
(
' '
)
;
}
for
(
int
k
=
0
;
k
<
chars_read
;
k
++
)
{
if
(
(
data
[
k
+
j
]
>=
' '
)
&&
(
data
[
k
+
j
]
<
127
)
)
{
buffer
.
append
(
(
char
)
data
[
k
+
j
]
)
;
}
else
{
buffer
.
append
(
'.'
)
;
}
}
buffer
.
append
(
EOL
)
;
stream
.
write
(
buffer
.
toString
(
)
.
getBytes
(
)
)
;
stream
.
flush
(
)
;
buffer
.
setLength
(
0
)
;
display_offset
+=
chars_read
;
}
}
public
synchronized
static
void
dump
(
final
byte
[
]
data
,
final
long
offset
,
final
OutputStream
stream
,
final
int
index
)
throws
IOException
,
ArrayIndexOutOfBoundsException
,
IllegalArgumentException
{
dump
(
data
,
offset
,
stream
,
index
,
data
.
length
-
index
)
;
}
public
static
String
dump
(
final
byte
[
]
data
,
final
long
offset
,
final
int
index
)
{
StringBuffer
buffer
;
if
(
(
index
<
0
)
||
(
index
>=
data
.
length
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"illegal index: "
+
index
+
" into array of length "
+
data
.
length
)
;
}
long
display_offset
=
offset
+
index
;
buffer
=
new
StringBuffer
(
74
)
;
for
(
int
j
=
index
;
j
<
data
.
length
;
j
+=
16
)
{
int
chars_read
=
data
.
length
-
j
;
if
(
chars_read
>
16
)
{
chars_read
=
16
;
}
buffer
.
append
(
dump
(
display_offset
)
)
.
append
(
' '
)
;
for
(
int
k
=
0
;
k
<
16
;
k
++
)
{
if
(
k
<
chars_read
)
{
buffer
.
append
(
dump
(
data
[
k
+
j
]
)
)
;
}
else
{
buffer
.
append
(
"  "
)
;
}
buffer
.
append
(
' '
)
;
}
for
(
int
k
=
0
;
k
<
chars_read
;
k
++
)
{
if
(
(
data
[
k
+
j
]
>=
' '
)
&&
(
data
[
k
+
j
]
<
127
)
)
{
buffer
.
append
(
(
char
)
data
[
k
+
j
]
)
;
}
else
{
buffer
.
append
(
'.'
)
;
}
}
buffer
.
append
(
EOL
)
;
display_offset
+=
chars_read
;
}
return
buffer
.
toString
(
)
;
}
private
static
String
dump
(
final
long
value
)
{
StringBuffer
buf
=
new
StringBuffer
(
)
;
buf
.
setLength
(
0
)
;
for
(
int
j
=
0
;
j
<
8
;
j
++
)
{
buf
.
append
(
_hexcodes
[
(
(
int
)
(
value
>
>
_shifts
[
j
]
)
)
&
15
]
)
;
}
return
buf
.
toString
(
)
;
}
private
static
String
dump
(
final
byte
value
)
{
StringBuffer
buf
=
new
StringBuffer
(
)
;
buf
.
setLength
(
0
)
;
for
(
int
j
=
0
;
j
<
2
;
j
++
)
{
buf
.
append
(
_hexcodes
[
(
value
>
>
_shifts
[
j
+
6
]
)
&
15
]
)
;
}
return
buf
.
toString
(
)
;
}
public
static
String
toHex
(
final
byte
[
]
value
)
{
StringBuffer
retVal
=
new
StringBuffer
(
)
;
retVal
.
append
(
'['
)
;
for
(
int
x
=
0
;
x
<
value
.
length
;
x
++
)
{
retVal
.
append
(
toHex
(
value
[
x
]
)
)
;
retVal
.
append
(
", "
)
;
}
retVal
.
append
(
']'
)
;
return
retVal
.
toString
(
)
;
}
public
static
String
toHex
(
final
short
value
)
{
return
toHex
(
value
,
4
)
;
}
public
static
String
toHex
(
final
byte
value
)
{
return
toHex
(
value
,
2
)
;
}
public
static
String
toHex
(
final
int
value
)
{
return
toHex
(
value
,
8
)
;
}
private
static
String
toHex
(
final
long
value
,
final
int
digits
)
{
StringBuffer
result
=
new
StringBuffer
(
digits
)
;
for
(
int
j
=
0
;
j
<
digits
;
j
++
)
{
result
.
append
(
_hexcodes
[
(
int
)
(
(
value
>
>
_shifts
[
j
+
(
8
-
digits
)
]
)
&
15
)
]
)
;
}
return
result
.
toString
(
)
;
}
public
static
void
dump
(
InputStream
in
,
PrintStream
out
,
int
start
,
int
bytesToDump
)
throws
IOException
{
ByteArrayOutputStream
buf
=
new
ByteArrayOutputStream
(
)
;
if
(
bytesToDump
==
-
1
)
{
int
c
=
in
.
read
(
)
;
while
(
c
!=
-
1
)
{
buf
.
write
(
c
)
;
c
=
in
.
read
(
)
;
}
}
else
{
int
bytesRemaining
=
bytesToDump
;
while
(
bytesRemaining
--
>
0
)
{
int
c
=
in
.
read
(
)
;
if
(
c
==
-
1
)
break
;
else
buf
.
write
(
c
)
;
}
}
byte
[
]
data
=
buf
.
toByteArray
(
)
;
dump
(
data
,
0
,
out
,
start
,
data
.
length
)
;
}
}
