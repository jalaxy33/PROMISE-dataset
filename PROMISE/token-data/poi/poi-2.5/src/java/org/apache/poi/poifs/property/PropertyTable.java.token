package
org
.
apache
.
poi
.
poifs
.
property
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
poifs
.
common
.
POIFSConstants
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
BATManaged
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
BlockWritable
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
PropertyBlock
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
RawDataBlock
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
RawDataBlockList
;
public
class
PropertyTable
implements
BATManaged
,
BlockWritable
{
private
int
_start_block
;
private
List
_properties
;
private
BlockWritable
[
]
_blocks
;
public
PropertyTable
(
)
{
_start_block
=
POIFSConstants
.
END_OF_CHAIN
;
_properties
=
new
ArrayList
(
)
;
addProperty
(
new
RootProperty
(
)
)
;
_blocks
=
null
;
}
public
PropertyTable
(
final
int
startBlock
,
final
RawDataBlockList
blockList
)
throws
IOException
{
_start_block
=
POIFSConstants
.
END_OF_CHAIN
;
_blocks
=
null
;
_properties
=
PropertyFactory
.
convertToProperties
(
blockList
.
fetchBlocks
(
startBlock
)
)
;
populatePropertyTree
(
(
DirectoryProperty
)
_properties
.
get
(
0
)
)
;
}
public
void
addProperty
(
final
Property
property
)
{
_properties
.
add
(
property
)
;
}
public
void
removeProperty
(
final
Property
property
)
{
_properties
.
remove
(
property
)
;
}
public
RootProperty
getRoot
(
)
{
return
(
RootProperty
)
_properties
.
get
(
0
)
;
}
public
void
preWrite
(
)
{
Property
[
]
properties
=
(
Property
[
]
)
_properties
.
toArray
(
new
Property
[
0
]
)
;
for
(
int
k
=
0
;
k
<
properties
.
length
;
k
++
)
{
properties
[
k
]
.
setIndex
(
k
)
;
}
_blocks
=
PropertyBlock
.
createPropertyBlockArray
(
_properties
)
;
for
(
int
k
=
0
;
k
<
properties
.
length
;
k
++
)
{
properties
[
k
]
.
preWrite
(
)
;
}
}
public
int
getStartBlock
(
)
{
return
_start_block
;
}
private
void
populatePropertyTree
(
DirectoryProperty
root
)
throws
IOException
{
int
index
=
root
.
getChildIndex
(
)
;
if
(
!
Property
.
isValidIndex
(
index
)
)
{
return
;
}
Stack
children
=
new
Stack
(
)
;
children
.
push
(
_properties
.
get
(
index
)
)
;
while
(
!
children
.
empty
(
)
)
{
Property
property
=
(
Property
)
children
.
pop
(
)
;
root
.
addChild
(
property
)
;
if
(
property
.
isDirectory
(
)
)
{
populatePropertyTree
(
(
DirectoryProperty
)
property
)
;
}
index
=
property
.
getPreviousChildIndex
(
)
;
if
(
Property
.
isValidIndex
(
index
)
)
{
children
.
push
(
_properties
.
get
(
index
)
)
;
}
index
=
property
.
getNextChildIndex
(
)
;
if
(
Property
.
isValidIndex
(
index
)
)
{
children
.
push
(
_properties
.
get
(
index
)
)
;
}
}
}
public
int
countBlocks
(
)
{
return
(
_blocks
==
null
)
?
0
:
_blocks
.
length
;
}
public
void
setStartBlock
(
final
int
index
)
{
_start_block
=
index
;
}
public
void
writeBlocks
(
final
OutputStream
stream
)
throws
IOException
{
if
(
_blocks
!=
null
)
{
for
(
int
j
=
0
;
j
<
_blocks
.
length
;
j
++
)
{
_blocks
[
j
]
.
writeBlocks
(
stream
)
;
}
}
}
}
