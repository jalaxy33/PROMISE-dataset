package
org
.
apache
.
poi
.
ddf
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RecordFormatException
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
DefaultEscherRecordFactory
implements
EscherRecordFactory
{
private
static
Class
[
]
escherRecordClasses
=
{
EscherBSERecord
.
class
,
EscherOptRecord
.
class
,
EscherClientAnchorRecord
.
class
,
EscherDgRecord
.
class
,
EscherSpgrRecord
.
class
,
EscherSpRecord
.
class
,
EscherClientDataRecord
.
class
,
EscherDggRecord
.
class
,
EscherSplitMenuColorsRecord
.
class
,
EscherChildAnchorRecord
.
class
,
EscherTextboxRecord
.
class
}
;
private
static
Map
recordsMap
=
recordsToMap
(
escherRecordClasses
)
;
public
DefaultEscherRecordFactory
(
)
{
}
public
EscherRecord
createRecord
(
byte
[
]
data
,
int
offset
)
{
EscherRecord
.
EscherRecordHeader
header
=
EscherRecord
.
EscherRecordHeader
.
readHeader
(
data
,
offset
)
;
if
(
(
header
.
getOptions
(
)
&
(
short
)
0x000F
)
==
(
short
)
0x000F
)
{
EscherContainerRecord
r
=
new
EscherContainerRecord
(
)
;
r
.
setRecordId
(
header
.
getRecordId
(
)
)
;
r
.
setOptions
(
header
.
getOptions
(
)
)
;
return
r
;
}
else
if
(
header
.
getRecordId
(
)
>=
EscherBlipRecord
.
RECORD_ID_START
&&
header
.
getRecordId
(
)
<=
EscherBlipRecord
.
RECORD_ID_END
)
{
EscherBlipRecord
r
=
new
EscherBlipRecord
(
)
;
r
.
setRecordId
(
header
.
getRecordId
(
)
)
;
r
.
setOptions
(
header
.
getOptions
(
)
)
;
return
r
;
}
else
{
Constructor
recordConstructor
=
(
Constructor
)
recordsMap
.
get
(
new
Short
(
header
.
getRecordId
(
)
)
)
;
EscherRecord
escherRecord
=
null
;
if
(
recordConstructor
!=
null
)
{
try
{
escherRecord
=
(
EscherRecord
)
recordConstructor
.
newInstance
(
new
Object
[
]
{
}
)
;
escherRecord
.
setRecordId
(
header
.
getRecordId
(
)
)
;
escherRecord
.
setOptions
(
header
.
getOptions
(
)
)
;
}
catch
(
Exception
e
)
{
escherRecord
=
null
;
}
}
return
escherRecord
==
null
?
new
UnknownEscherRecord
(
)
:
escherRecord
;
}
}
private
static
Map
recordsToMap
(
Class
[
]
records
)
{
Map
result
=
new
HashMap
(
)
;
Constructor
constructor
;
for
(
int
i
=
0
;
i
<
records
.
length
;
i
++
)
{
Class
record
=
null
;
short
sid
=
0
;
record
=
records
[
i
]
;
try
{
sid
=
record
.
getField
(
"RECORD_ID"
)
.
getShort
(
null
)
;
constructor
=
record
.
getConstructor
(
new
Class
[
]
{
}
)
;
}
catch
(
Exception
illegalArgumentException
)
{
throw
new
RecordFormatException
(
"Unable to determine record types"
)
;
}
result
.
put
(
new
Short
(
sid
)
,
constructor
)
;
}
return
result
;
}
}
