package
org
.
apache
.
poi
.
hssf
.
usermodel
;
import
java
.
util
.
Map
;
import
java
.
util
.
SortedMap
;
import
java
.
util
.
TreeMap
;
public
class
HSSFRichTextString
implements
Comparable
{
public
static
final
short
NO_FONT
=
-
1
;
String
string
;
SortedMap
formattingRuns
=
new
TreeMap
(
)
;
public
HSSFRichTextString
(
)
{
this
(
""
)
;
}
public
HSSFRichTextString
(
String
string
)
{
this
.
string
=
string
;
this
.
formattingRuns
.
put
(
new
Integer
(
0
)
,
new
Short
(
NO_FONT
)
)
;
}
public
void
applyFont
(
int
startIndex
,
int
endIndex
,
short
fontIndex
)
{
if
(
startIndex
>
endIndex
)
throw
new
IllegalArgumentException
(
"Start index must be less than end index."
)
;
if
(
startIndex
<
0
||
endIndex
>
length
(
)
)
throw
new
IllegalArgumentException
(
"Start and end index not in range."
)
;
if
(
startIndex
==
endIndex
)
return
;
Integer
from
=
new
Integer
(
startIndex
)
;
Integer
to
=
new
Integer
(
endIndex
)
;
short
fontAtIndex
=
NO_FONT
;
if
(
endIndex
!=
length
(
)
)
fontAtIndex
=
getFontAtIndex
(
endIndex
)
;
formattingRuns
.
subMap
(
from
,
to
)
.
clear
(
)
;
formattingRuns
.
put
(
from
,
new
Short
(
fontIndex
)
)
;
if
(
endIndex
!=
length
(
)
)
{
if
(
fontIndex
!=
fontAtIndex
)
formattingRuns
.
put
(
to
,
new
Short
(
fontAtIndex
)
)
;
}
}
public
void
applyFont
(
int
startIndex
,
int
endIndex
,
HSSFFont
font
)
{
applyFont
(
startIndex
,
endIndex
,
font
.
getIndex
(
)
)
;
}
public
void
applyFont
(
HSSFFont
font
)
{
applyFont
(
0
,
string
.
length
(
)
,
font
)
;
}
public
String
getString
(
)
{
return
string
;
}
public
int
length
(
)
{
return
string
.
length
(
)
;
}
public
short
getFontAtIndex
(
int
index
)
{
if
(
index
<
0
||
index
>=
string
.
length
(
)
)
throw
new
ArrayIndexOutOfBoundsException
(
"Font index "
+
index
+
" out of bounds of string"
)
;
Integer
key
=
new
Integer
(
index
+
1
)
;
SortedMap
head
=
formattingRuns
.
headMap
(
key
)
;
if
(
head
.
isEmpty
(
)
)
throw
new
IllegalStateException
(
"Should not reach here.  No font found."
)
;
else
return
(
(
Short
)
head
.
get
(
head
.
lastKey
(
)
)
)
.
shortValue
(
)
;
}
public
int
numFormattingRuns
(
)
{
return
formattingRuns
.
size
(
)
;
}
public
int
getIndexOfFormattingRun
(
int
index
)
{
Map
.
Entry
[
]
runs
=
(
Map
.
Entry
[
]
)
formattingRuns
.
entrySet
(
)
.
toArray
(
new
Map
.
Entry
[
formattingRuns
.
size
(
)
]
)
;
return
(
(
Integer
)
runs
[
index
]
.
getKey
(
)
)
.
intValue
(
)
;
}
public
short
getFontOfFormattingRun
(
int
index
)
{
Map
.
Entry
[
]
runs
=
(
Map
.
Entry
[
]
)
formattingRuns
.
entrySet
(
)
.
toArray
(
new
Map
.
Entry
[
formattingRuns
.
size
(
)
]
)
;
return
(
(
Short
)
(
runs
[
index
]
.
getValue
(
)
)
)
.
shortValue
(
)
;
}
public
int
compareTo
(
Object
o
)
{
return
0
;
}
public
String
toString
(
)
{
return
string
;
}
public
void
applyFont
(
short
fontIndex
)
{
applyFont
(
0
,
string
.
length
(
)
,
fontIndex
)
;
}
}
