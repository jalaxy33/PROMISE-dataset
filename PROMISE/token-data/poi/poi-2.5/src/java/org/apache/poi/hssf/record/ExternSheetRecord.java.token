package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
java
.
util
.
ArrayList
;
public
class
ExternSheetRecord
extends
Record
{
public
final
static
short
sid
=
0x17
;
private
short
field_1_number_of_REF_sturcutres
;
private
ArrayList
field_2_REF_structures
;
public
ExternSheetRecord
(
)
{
field_2_REF_structures
=
new
ArrayList
(
)
;
}
public
ExternSheetRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
ExternSheetRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT An ExternSheet RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_2_REF_structures
=
new
ArrayList
(
)
;
field_1_number_of_REF_sturcutres
=
LittleEndian
.
getShort
(
data
,
0
+
offset
)
;
int
pos
=
2
+
offset
;
for
(
int
i
=
0
;
i
<
field_1_number_of_REF_sturcutres
;
++
i
)
{
ExternSheetSubRecord
rec
=
new
ExternSheetSubRecord
(
(
short
)
0
,
(
short
)
6
,
data
,
pos
)
;
pos
+=
6
;
field_2_REF_structures
.
add
(
rec
)
;
}
}
public
void
setNumOfREFStructures
(
short
numStruct
)
{
field_1_number_of_REF_sturcutres
=
numStruct
;
}
public
short
getNumOfREFStructures
(
)
{
return
field_1_number_of_REF_sturcutres
;
}
public
void
addREFRecord
(
ExternSheetSubRecord
rec
)
{
field_2_REF_structures
.
add
(
rec
)
;
}
public
int
getNumOfREFRecords
(
)
{
return
field_2_REF_structures
.
size
(
)
;
}
public
ExternSheetSubRecord
getREFRecordAt
(
int
elem
)
{
ExternSheetSubRecord
result
=
(
ExternSheetSubRecord
)
field_2_REF_structures
.
get
(
elem
)
;
return
result
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[EXTERNSHEET]\n"
)
;
buffer
.
append
(
"   numOfRefs     = "
)
.
append
(
getNumOfREFStructures
(
)
)
.
append
(
"\n"
)
;
for
(
int
k
=
0
;
k
<
this
.
getNumOfREFRecords
(
)
;
k
++
)
{
buffer
.
append
(
"refrec         #"
)
.
append
(
k
)
.
append
(
'\n'
)
;
buffer
.
append
(
getREFRecordAt
(
k
)
.
toString
(
)
)
;
buffer
.
append
(
"----refrec     #"
)
.
append
(
k
)
.
append
(
'\n'
)
;
}
buffer
.
append
(
"[/EXTERNSHEET]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
2
+
(
getNumOfREFRecords
(
)
*
6
)
)
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
getNumOfREFStructures
(
)
)
;
int
pos
=
6
;
for
(
int
k
=
0
;
k
<
getNumOfREFRecords
(
)
;
k
++
)
{
ExternSheetSubRecord
record
=
getREFRecordAt
(
k
)
;
System
.
arraycopy
(
record
.
serialize
(
)
,
0
,
data
,
pos
+
offset
,
6
)
;
pos
+=
6
;
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
4
+
2
+
getNumOfREFRecords
(
)
*
6
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
}
