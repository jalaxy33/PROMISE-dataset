package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
ddf
.
DefaultEscherRecordFactory
;
import
org
.
apache
.
poi
.
ddf
.
EscherRecord
;
import
org
.
apache
.
poi
.
ddf
.
EscherRecordFactory
;
import
org
.
apache
.
poi
.
ddf
.
NullEscherSerializationListener
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
public
abstract
class
AbstractEscherHolderRecord
extends
Record
{
private
static
final
boolean
DESERIALISE
=
System
.
getProperty
(
"poi.deserialize.escher"
)
!=
null
;
private
List
escherRecords
;
private
byte
[
]
rawData
;
public
AbstractEscherHolderRecord
(
)
{
escherRecords
=
new
ArrayList
(
)
;
}
public
AbstractEscherHolderRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
AbstractEscherHolderRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
getSid
(
)
)
{
throw
new
RecordFormatException
(
"Not a Bar record"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
escherRecords
=
new
ArrayList
(
)
;
if
(
!
DESERIALISE
)
{
rawData
=
new
byte
[
size
]
;
System
.
arraycopy
(
data
,
offset
,
rawData
,
0
,
size
)
;
}
else
{
EscherRecordFactory
recordFactory
=
new
DefaultEscherRecordFactory
(
)
;
int
pos
=
offset
;
while
(
pos
<
offset
+
size
)
{
EscherRecord
r
=
recordFactory
.
createRecord
(
data
,
pos
)
;
int
bytesRead
=
r
.
fillFields
(
data
,
pos
,
recordFactory
)
;
escherRecords
.
add
(
r
)
;
pos
+=
bytesRead
;
}
}
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
final
String
nl
=
System
.
getProperty
(
"line.separator"
)
;
buffer
.
append
(
'['
+
getRecordName
(
)
+
']'
+
nl
)
;
for
(
Iterator
iterator
=
escherRecords
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
EscherRecord
r
=
(
EscherRecord
)
iterator
.
next
(
)
;
buffer
.
append
(
r
.
toString
(
)
)
;
}
buffer
.
append
(
"[/"
+
getRecordName
(
)
+
']'
+
nl
)
;
return
buffer
.
toString
(
)
;
}
protected
abstract
String
getRecordName
(
)
;
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
getSid
(
)
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
getRecordSize
(
)
-
4
)
)
;
if
(
escherRecords
.
size
(
)
==
0
&&
rawData
!=
null
)
{
System
.
arraycopy
(
rawData
,
0
,
data
,
offset
+
4
,
rawData
.
length
)
;
}
else
{
int
pos
=
offset
+
4
;
for
(
Iterator
iterator
=
escherRecords
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
EscherRecord
r
=
(
EscherRecord
)
iterator
.
next
(
)
;
pos
+=
r
.
serialize
(
pos
,
data
,
new
NullEscherSerializationListener
(
)
)
;
}
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
if
(
escherRecords
.
size
(
)
==
0
&&
rawData
!=
null
)
{
return
rawData
.
length
+
4
;
}
else
{
int
size
=
4
;
for
(
Iterator
iterator
=
escherRecords
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
EscherRecord
r
=
(
EscherRecord
)
iterator
.
next
(
)
;
size
+=
r
.
getRecordSize
(
)
;
}
return
size
;
}
}
public
abstract
short
getSid
(
)
;
public
Object
clone
(
)
{
throw
new
IllegalStateException
(
"Not implemented yet."
)
;
}
public
void
addEscherRecord
(
int
index
,
EscherRecord
element
)
{
escherRecords
.
add
(
index
,
element
)
;
}
public
boolean
addEscherRecord
(
EscherRecord
element
)
{
return
escherRecords
.
add
(
element
)
;
}
public
List
getEscherRecords
(
)
{
return
escherRecords
;
}
public
void
clearEscherRecords
(
)
{
escherRecords
.
clear
(
)
;
}
public
EscherRecord
getEscherRecord
(
int
index
)
{
return
(
EscherRecord
)
escherRecords
.
get
(
index
)
;
}
}
