package
org
.
apache
.
poi
.
hssf
.
usermodel
;
import
org
.
apache
.
poi
.
hssf
.
record
.
ExtendedFormatRecord
;
public
class
HSSFCellStyle
{
private
ExtendedFormatRecord
format
=
null
;
private
short
index
=
0
;
private
short
fontindex
=
0
;
public
final
static
short
ALIGN_GENERAL
=
0x0
;
public
final
static
short
ALIGN_LEFT
=
0x1
;
public
final
static
short
ALIGN_CENTER
=
0x2
;
public
final
static
short
ALIGN_RIGHT
=
0x3
;
public
final
static
short
ALIGN_FILL
=
0x4
;
public
final
static
short
ALIGN_JUSTIFY
=
0x5
;
public
final
static
short
ALIGN_CENTER_SELECTION
=
0x6
;
public
final
static
short
VERTICAL_TOP
=
0x0
;
public
final
static
short
VERTICAL_CENTER
=
0x1
;
public
final
static
short
VERTICAL_BOTTOM
=
0x2
;
public
final
static
short
VERTICAL_JUSTIFY
=
0x3
;
public
final
static
short
BORDER_NONE
=
0x0
;
public
final
static
short
BORDER_THIN
=
0x1
;
public
final
static
short
BORDER_MEDIUM
=
0x2
;
public
final
static
short
BORDER_DASHED
=
0x3
;
public
final
static
short
BORDER_HAIR
=
0x4
;
public
final
static
short
BORDER_THICK
=
0x5
;
public
final
static
short
BORDER_DOUBLE
=
0x6
;
public
final
static
short
BORDER_DOTTED
=
0x7
;
public
final
static
short
BORDER_MEDIUM_DASHED
=
0x8
;
public
final
static
short
BORDER_DASH_DOT
=
0x9
;
public
final
static
short
BORDER_MEDIUM_DASH_DOT
=
0xA
;
public
final
static
short
BORDER_DASH_DOT_DOT
=
0xB
;
public
final
static
short
BORDER_MEDIUM_DASH_DOT_DOT
=
0xC
;
public
final
static
short
BORDER_SLANTED_DASH_DOT
=
0xD
;
public
final
static
short
NO_FILL
=
0
;
public
final
static
short
SOLID_FOREGROUND
=
1
;
public
final
static
short
FINE_DOTS
=
2
;
public
final
static
short
ALT_BARS
=
3
;
public
final
static
short
SPARSE_DOTS
=
4
;
public
final
static
short
THICK_HORZ_BANDS
=
5
;
public
final
static
short
THICK_VERT_BANDS
=
6
;
public
final
static
short
THICK_BACKWARD_DIAG
=
7
;
public
final
static
short
THICK_FORWARD_DIAG
=
8
;
public
final
static
short
BIG_SPOTS
=
9
;
public
final
static
short
BRICKS
=
10
;
public
final
static
short
THIN_HORZ_BANDS
=
11
;
public
final
static
short
THIN_VERT_BANDS
=
12
;
public
final
static
short
THIN_BACKWARD_DIAG
=
13
;
public
final
static
short
THIN_FORWARD_DIAG
=
14
;
public
final
static
short
SQUARES
=
15
;
public
final
static
short
DIAMONDS
=
16
;
protected
HSSFCellStyle
(
short
index
,
ExtendedFormatRecord
rec
)
{
this
.
index
=
index
;
format
=
rec
;
}
public
short
getIndex
(
)
{
return
index
;
}
public
void
setDataFormat
(
short
fmt
)
{
format
.
setFormatIndex
(
fmt
)
;
}
public
short
getDataFormat
(
)
{
return
format
.
getFormatIndex
(
)
;
}
public
void
setFont
(
HSSFFont
font
)
{
format
.
setIndentNotParentFont
(
true
)
;
fontindex
=
font
.
getIndex
(
)
;
format
.
setFontIndex
(
fontindex
)
;
}
public
short
getFontIndex
(
)
{
return
format
.
getFontIndex
(
)
;
}
public
void
setHidden
(
boolean
hidden
)
{
format
.
setIndentNotParentCellOptions
(
true
)
;
format
.
setHidden
(
hidden
)
;
}
public
boolean
getHidden
(
)
{
return
format
.
isHidden
(
)
;
}
public
void
setLocked
(
boolean
locked
)
{
format
.
setIndentNotParentCellOptions
(
true
)
;
format
.
setLocked
(
locked
)
;
}
public
boolean
getLocked
(
)
{
return
format
.
isLocked
(
)
;
}
public
void
setAlignment
(
short
align
)
{
format
.
setIndentNotParentAlignment
(
true
)
;
format
.
setAlignment
(
align
)
;
}
public
short
getAlignment
(
)
{
return
format
.
getAlignment
(
)
;
}
public
void
setWrapText
(
boolean
wrapped
)
{
format
.
setIndentNotParentAlignment
(
true
)
;
format
.
setWrapText
(
wrapped
)
;
}
public
boolean
getWrapText
(
)
{
return
format
.
getWrapText
(
)
;
}
public
void
setVerticalAlignment
(
short
align
)
{
format
.
setVerticalAlignment
(
align
)
;
}
public
short
getVerticalAlignment
(
)
{
return
format
.
getVerticalAlignment
(
)
;
}
public
void
setRotation
(
short
rotation
)
{
if
(
(
rotation
<
0
)
&&
(
rotation
>=
-
90
)
)
{
rotation
=
(
short
)
(
90
-
rotation
)
;
}
else
if
(
(
rotation
<
-
90
)
||
(
rotation
>
90
)
)
throw
new
IllegalArgumentException
(
"The rotation must be between -90 and 90 degrees"
)
;
format
.
setRotation
(
rotation
)
;
}
public
short
getRotation
(
)
{
short
rotation
=
format
.
getRotation
(
)
;
if
(
rotation
>
90
)
rotation
=
(
short
)
(
90
-
rotation
)
;
return
rotation
;
}
public
void
setIndention
(
short
indent
)
{
format
.
setIndent
(
indent
)
;
}
public
short
getIndention
(
)
{
return
format
.
getIndent
(
)
;
}
public
void
setBorderLeft
(
short
border
)
{
format
.
setIndentNotParentBorder
(
true
)
;
format
.
setBorderLeft
(
border
)
;
}
public
short
getBorderLeft
(
)
{
return
format
.
getBorderLeft
(
)
;
}
public
void
setBorderRight
(
short
border
)
{
format
.
setIndentNotParentBorder
(
true
)
;
format
.
setBorderRight
(
border
)
;
}
public
short
getBorderRight
(
)
{
return
format
.
getBorderRight
(
)
;
}
public
void
setBorderTop
(
short
border
)
{
format
.
setIndentNotParentBorder
(
true
)
;
format
.
setBorderTop
(
border
)
;
}
public
short
getBorderTop
(
)
{
return
format
.
getBorderTop
(
)
;
}
public
void
setBorderBottom
(
short
border
)
{
format
.
setIndentNotParentBorder
(
true
)
;
format
.
setBorderBottom
(
border
)
;
}
public
short
getBorderBottom
(
)
{
return
format
.
getBorderBottom
(
)
;
}
public
void
setLeftBorderColor
(
short
color
)
{
format
.
setLeftBorderPaletteIdx
(
color
)
;
}
public
short
getLeftBorderColor
(
)
{
return
format
.
getLeftBorderPaletteIdx
(
)
;
}
public
void
setRightBorderColor
(
short
color
)
{
format
.
setRightBorderPaletteIdx
(
color
)
;
}
public
short
getRightBorderColor
(
)
{
return
format
.
getRightBorderPaletteIdx
(
)
;
}
public
void
setTopBorderColor
(
short
color
)
{
format
.
setTopBorderPaletteIdx
(
color
)
;
}
public
short
getTopBorderColor
(
)
{
return
format
.
getTopBorderPaletteIdx
(
)
;
}
public
void
setBottomBorderColor
(
short
color
)
{
format
.
setBottomBorderPaletteIdx
(
color
)
;
}
public
short
getBottomBorderColor
(
)
{
return
format
.
getBottomBorderPaletteIdx
(
)
;
}
public
void
setFillPattern
(
short
fp
)
{
format
.
setAdtlFillPattern
(
fp
)
;
}
public
short
getFillPattern
(
)
{
return
format
.
getAdtlFillPattern
(
)
;
}
public
void
setFillBackgroundColor
(
short
bg
)
{
format
.
setFillBackground
(
bg
)
;
}
public
short
getFillBackgroundColor
(
)
{
return
format
.
getFillBackground
(
)
;
}
public
void
setFillForegroundColor
(
short
bg
)
{
format
.
setFillForeground
(
bg
)
;
}
public
short
getFillForegroundColor
(
)
{
return
format
.
getFillForeground
(
)
;
}
}
