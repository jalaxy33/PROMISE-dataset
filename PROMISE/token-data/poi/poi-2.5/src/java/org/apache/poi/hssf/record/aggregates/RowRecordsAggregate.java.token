package
org
.
apache
.
poi
.
hssf
.
record
.
aggregates
;
import
org
.
apache
.
poi
.
hssf
.
record
.
Record
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RowRecord
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Map
;
import
java
.
util
.
TreeMap
;
public
class
RowRecordsAggregate
extends
Record
{
int
firstrow
=
-
1
;
int
lastrow
=
-
1
;
Map
records
=
null
;
int
size
=
0
;
public
RowRecordsAggregate
(
)
{
records
=
new
TreeMap
(
)
;
}
public
void
insertRow
(
RowRecord
row
)
{
size
+=
row
.
getRecordSize
(
)
;
records
.
put
(
row
,
row
)
;
if
(
(
row
.
getRowNumber
(
)
<
firstrow
)
||
(
firstrow
==
-
1
)
)
{
firstrow
=
row
.
getRowNumber
(
)
;
}
if
(
(
row
.
getRowNumber
(
)
>
lastrow
)
||
(
lastrow
==
-
1
)
)
{
lastrow
=
row
.
getRowNumber
(
)
;
}
}
public
void
removeRow
(
RowRecord
row
)
{
size
-=
row
.
getRecordSize
(
)
;
records
.
remove
(
row
)
;
}
public
RowRecord
getRow
(
int
rownum
)
{
RowRecord
row
=
new
RowRecord
(
)
;
row
.
setRowNumber
(
(
short
)
rownum
)
;
return
(
RowRecord
)
records
.
get
(
row
)
;
}
public
int
getPhysicalNumberOfRows
(
)
{
return
records
.
size
(
)
;
}
public
int
getFirstRowNum
(
)
{
return
firstrow
;
}
public
int
getLastRowNum
(
)
{
return
lastrow
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
Iterator
itr
=
records
.
values
(
)
.
iterator
(
)
;
int
pos
=
offset
;
while
(
itr
.
hasNext
(
)
)
{
pos
+=
(
(
Record
)
itr
.
next
(
)
)
.
serialize
(
pos
,
data
)
;
}
return
pos
-
offset
;
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
}
protected
void
validateSid
(
short
id
)
{
}
public
short
getSid
(
)
{
return
-
1000
;
}
public
int
getRecordSize
(
)
{
return
size
;
}
public
Iterator
getIterator
(
)
{
return
records
.
values
(
)
.
iterator
(
)
;
}
public
Object
clone
(
)
{
RowRecordsAggregate
rec
=
new
RowRecordsAggregate
(
)
;
for
(
Iterator
rowIter
=
getIterator
(
)
;
rowIter
.
hasNext
(
)
;
)
{
RowRecord
row
=
(
RowRecord
)
(
(
RowRecord
)
rowIter
.
next
(
)
)
.
clone
(
)
;
rec
.
insertRow
(
row
)
;
}
return
rec
;
}
public
int
findStartOfRowOutlineGroup
(
int
row
)
{
RowRecord
rowRecord
=
this
.
getRow
(
row
)
;
int
level
=
rowRecord
.
getOutlineLevel
(
)
;
int
currentRow
=
row
;
while
(
this
.
getRow
(
currentRow
)
!=
null
)
{
rowRecord
=
this
.
getRow
(
currentRow
)
;
if
(
rowRecord
.
getOutlineLevel
(
)
<
level
)
return
currentRow
+
1
;
currentRow
--
;
}
return
currentRow
+
1
;
}
public
int
findEndOfRowOutlineGroup
(
int
row
)
{
int
level
=
getRow
(
row
)
.
getOutlineLevel
(
)
;
int
currentRow
;
for
(
currentRow
=
row
;
currentRow
<
this
.
getLastRowNum
(
)
;
currentRow
++
)
{
if
(
getRow
(
currentRow
)
==
null
||
getRow
(
currentRow
)
.
getOutlineLevel
(
)
<
level
)
{
break
;
}
}
return
currentRow
-
1
;
}
public
int
writeHidden
(
RowRecord
rowRecord
,
int
row
,
boolean
hidden
)
{
int
level
=
rowRecord
.
getOutlineLevel
(
)
;
while
(
rowRecord
!=
null
&&
this
.
getRow
(
row
)
.
getOutlineLevel
(
)
>=
level
)
{
rowRecord
.
setZeroHeight
(
hidden
)
;
row
++
;
rowRecord
=
this
.
getRow
(
row
)
;
}
return
row
-
1
;
}
public
void
collapseRow
(
int
rowNumber
)
{
int
startRow
=
findStartOfRowOutlineGroup
(
rowNumber
)
;
RowRecord
rowRecord
=
(
RowRecord
)
getRow
(
startRow
)
;
int
lastRow
=
writeHidden
(
rowRecord
,
startRow
,
true
)
;
if
(
getRow
(
lastRow
+
1
)
!=
null
)
{
getRow
(
lastRow
+
1
)
.
setColapsed
(
true
)
;
}
else
{
RowRecord
row
=
createRow
(
lastRow
+
1
)
;
row
.
setColapsed
(
true
)
;
insertRow
(
row
)
;
}
}
public
static
RowRecord
createRow
(
int
row
)
{
RowRecord
rowrec
=
new
RowRecord
(
)
;
rowrec
.
setRowNumber
(
row
)
;
rowrec
.
setHeight
(
(
short
)
0xff
)
;
rowrec
.
setOptimize
(
(
short
)
0x0
)
;
rowrec
.
setOptionFlags
(
(
short
)
0x100
)
;
rowrec
.
setXFIndex
(
(
short
)
0xf
)
;
return
rowrec
;
}
public
boolean
isRowGroupCollapsed
(
int
row
)
{
int
collapseRow
=
findEndOfRowOutlineGroup
(
row
)
+
1
;
if
(
getRow
(
collapseRow
)
==
null
)
return
false
;
else
return
getRow
(
collapseRow
)
.
getColapsed
(
)
;
}
public
void
expandRow
(
int
rowNumber
)
{
int
idx
=
rowNumber
;
if
(
idx
==
-
1
)
return
;
if
(
!
isRowGroupCollapsed
(
idx
)
)
return
;
int
startIdx
=
findStartOfRowOutlineGroup
(
idx
)
;
RowRecord
row
=
getRow
(
startIdx
)
;
int
endIdx
=
findEndOfRowOutlineGroup
(
idx
)
;
if
(
!
isRowGroupHiddenByParent
(
idx
)
)
{
for
(
int
i
=
startIdx
;
i
<=
endIdx
;
i
++
)
{
if
(
row
.
getOutlineLevel
(
)
==
getRow
(
i
)
.
getOutlineLevel
(
)
)
getRow
(
i
)
.
setZeroHeight
(
false
)
;
else
if
(
!
isRowGroupCollapsed
(
i
)
)
getRow
(
i
)
.
setZeroHeight
(
false
)
;
}
}
getRow
(
endIdx
+
1
)
.
setColapsed
(
false
)
;
}
public
boolean
isRowGroupHiddenByParent
(
int
row
)
{
int
endLevel
;
boolean
endHidden
;
int
endOfOutlineGroupIdx
=
findEndOfRowOutlineGroup
(
row
)
;
if
(
getRow
(
endOfOutlineGroupIdx
+
1
)
==
null
)
{
endLevel
=
0
;
endHidden
=
false
;
}
else
{
endLevel
=
getRow
(
endOfOutlineGroupIdx
+
1
)
.
getOutlineLevel
(
)
;
endHidden
=
getRow
(
endOfOutlineGroupIdx
+
1
)
.
getZeroHeight
(
)
;
}
int
startLevel
;
boolean
startHidden
;
int
startOfOutlineGroupIdx
=
findStartOfRowOutlineGroup
(
row
)
;
if
(
startOfOutlineGroupIdx
-
1
<
0
||
getRow
(
startOfOutlineGroupIdx
-
1
)
==
null
)
{
startLevel
=
0
;
startHidden
=
false
;
}
else
{
startLevel
=
getRow
(
startOfOutlineGroupIdx
-
1
)
.
getOutlineLevel
(
)
;
startHidden
=
getRow
(
startOfOutlineGroupIdx
-
1
)
.
getZeroHeight
(
)
;
}
if
(
endLevel
>
startLevel
)
{
return
endHidden
;
}
else
{
return
startHidden
;
}
}
}
