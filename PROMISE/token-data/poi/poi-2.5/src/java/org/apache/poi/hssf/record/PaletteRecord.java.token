package
org
.
apache
.
poi
.
hssf
.
record
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
PaletteRecord
extends
Record
{
public
final
static
short
sid
=
0x92
;
public
final
static
byte
STANDARD_PALETTE_SIZE
=
(
byte
)
56
;
public
final
static
short
FIRST_COLOR_INDEX
=
(
short
)
0x8
;
private
short
field_1_numcolors
;
private
List
field_2_colors
;
public
PaletteRecord
(
)
{
}
public
PaletteRecord
(
short
id
)
{
super
(
id
,
STANDARD_PALETTE_SIZE
,
getDefaultData
(
)
)
;
}
public
PaletteRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
PaletteRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT An Palette RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_numcolors
=
LittleEndian
.
getShort
(
data
,
offset
+
0
)
;
field_2_colors
=
new
ArrayList
(
field_1_numcolors
)
;
for
(
int
k
=
0
;
k
<
field_1_numcolors
;
k
++
)
{
field_2_colors
.
add
(
new
PColor
(
data
[
2
+
offset
+
(
k
*
4
)
+
0
]
,
data
[
2
+
offset
+
(
k
*
4
)
+
1
]
,
data
[
2
+
offset
+
(
k
*
4
)
+
2
]
)
)
;
}
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[PALETTE]\n"
)
;
buffer
.
append
(
"  numcolors     = "
)
.
append
(
field_1_numcolors
)
.
append
(
'\n'
)
;
for
(
int
k
=
0
;
k
<
field_1_numcolors
;
k
++
)
{
PColor
c
=
(
PColor
)
field_2_colors
.
get
(
k
)
;
buffer
.
append
(
"* colornum      = "
)
.
append
(
k
)
.
append
(
'\n'
)
;
buffer
.
append
(
c
.
toString
(
)
)
;
buffer
.
append
(
"/*colornum      = "
)
.
append
(
k
)
.
append
(
'\n'
)
;
}
buffer
.
append
(
"[/PALETTE]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
getRecordSize
(
)
-
4
)
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
field_1_numcolors
)
;
for
(
int
k
=
0
;
k
<
field_1_numcolors
;
k
++
)
{
PColor
c
=
(
PColor
)
field_2_colors
.
get
(
k
)
;
c
.
serialize
(
data
,
(
6
+
offset
+
(
k
*
4
)
)
)
;
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
4
+
2
+
(
field_1_numcolors
*
4
)
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
byte
[
]
getColor
(
short
byteIndex
)
{
int
i
=
byteIndex
-
FIRST_COLOR_INDEX
;
if
(
i
<
0
||
i
>=
field_2_colors
.
size
(
)
)
{
return
null
;
}
PColor
color
=
(
PColor
)
field_2_colors
.
get
(
i
)
;
return
new
byte
[
]
{
color
.
red
,
color
.
green
,
color
.
blue
}
;
}
public
void
setColor
(
short
byteIndex
,
byte
red
,
byte
green
,
byte
blue
)
{
int
i
=
byteIndex
-
FIRST_COLOR_INDEX
;
if
(
i
<
0
||
i
>=
STANDARD_PALETTE_SIZE
)
{
return
;
}
while
(
field_2_colors
.
size
(
)
<=
i
)
{
field_2_colors
.
add
(
new
PColor
(
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
)
)
;
}
PColor
custColor
=
new
PColor
(
red
,
green
,
blue
)
;
field_2_colors
.
set
(
i
,
custColor
)
;
}
public
static
byte
[
]
getDefaultData
(
)
{
return
new
byte
[
]
{
STANDARD_PALETTE_SIZE
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
192
,
(
byte
)
192
,
(
byte
)
192
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
128
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
153
,
(
byte
)
153
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
153
,
(
byte
)
51
,
(
byte
)
102
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
204
,
(
byte
)
0
,
(
byte
)
204
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
102
,
(
byte
)
0
,
(
byte
)
102
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
128
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
102
,
(
byte
)
204
,
(
byte
)
0
,
(
byte
)
204
,
(
byte
)
204
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
128
,
(
byte
)
128
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
204
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
204
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
204
,
(
byte
)
255
,
(
byte
)
204
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
255
,
(
byte
)
153
,
(
byte
)
0
,
(
byte
)
153
,
(
byte
)
204
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
153
,
(
byte
)
204
,
(
byte
)
0
,
(
byte
)
204
,
(
byte
)
153
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
204
,
(
byte
)
153
,
(
byte
)
0
,
(
byte
)
51
,
(
byte
)
102
,
(
byte
)
255
,
(
byte
)
0
,
(
byte
)
51
,
(
byte
)
204
,
(
byte
)
204
,
(
byte
)
0
,
(
byte
)
153
,
(
byte
)
204
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
204
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
153
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
255
,
(
byte
)
102
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
102
,
(
byte
)
102
,
(
byte
)
153
,
(
byte
)
0
,
(
byte
)
150
,
(
byte
)
150
,
(
byte
)
150
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
51
,
(
byte
)
102
,
(
byte
)
0
,
(
byte
)
51
,
(
byte
)
153
,
(
byte
)
102
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
51
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
51
,
(
byte
)
51
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
153
,
(
byte
)
51
,
(
byte
)
0
,
(
byte
)
0
,
(
byte
)
153
,
(
byte
)
51
,
(
byte
)
102
,
(
byte
)
0
,
(
byte
)
51
,
(
byte
)
51
,
(
byte
)
153
,
(
byte
)
0
,
(
byte
)
51
,
(
byte
)
51
,
(
byte
)
51
,
(
byte
)
0
}
;
}
}
class
PColor
{
public
byte
red
;
public
byte
green
;
public
byte
blue
;
public
PColor
(
byte
red
,
byte
green
,
byte
blue
)
{
this
.
red
=
red
;
this
.
green
=
green
;
this
.
blue
=
blue
;
}
public
void
serialize
(
byte
[
]
data
,
int
offset
)
{
data
[
offset
+
0
]
=
red
;
data
[
offset
+
1
]
=
green
;
data
[
offset
+
2
]
=
blue
;
data
[
offset
+
3
]
=
0
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"  red           = "
)
.
append
(
red
&
0xff
)
.
append
(
'\n'
)
;
buffer
.
append
(
"  green         = "
)
.
append
(
green
&
0xff
)
.
append
(
'\n'
)
;
buffer
.
append
(
"  blue          = "
)
.
append
(
blue
&
0xff
)
.
append
(
'\n'
)
;
return
buffer
.
toString
(
)
;
}
}
