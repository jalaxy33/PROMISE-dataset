package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
*
;
import
java
.
util
.
List
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
ArrayList
;
public
class
ObjRecord
extends
Record
{
public
final
static
short
sid
=
0x5D
;
private
List
subrecords
;
public
ObjRecord
(
)
{
subrecords
=
new
ArrayList
(
2
)
;
}
public
ObjRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
ObjRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not an OBJ record"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
subrecords
=
new
ArrayList
(
)
;
int
pos
=
offset
;
while
(
pos
-
offset
<
size
)
{
short
subRecordSid
=
LittleEndian
.
getShort
(
data
,
pos
)
;
short
subRecordSize
=
LittleEndian
.
getShort
(
data
,
pos
+
2
)
;
Record
subRecord
=
SubRecord
.
createSubRecord
(
subRecordSid
,
subRecordSize
,
data
,
pos
+
4
)
;
subrecords
.
add
(
subRecord
)
;
pos
+=
4
+
subRecordSize
;
}
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[OBJ]\n"
)
;
for
(
Iterator
iterator
=
subrecords
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Record
record
=
(
Record
)
iterator
.
next
(
)
;
buffer
.
append
(
"SUBRECORD: "
+
record
.
toString
(
)
)
;
}
buffer
.
append
(
"[/OBJ]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
int
pos
=
0
;
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
getRecordSize
(
)
-
4
)
)
;
pos
=
offset
+
4
;
for
(
Iterator
iterator
=
subrecords
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Record
record
=
(
Record
)
iterator
.
next
(
)
;
pos
+=
record
.
serialize
(
pos
,
data
)
;
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
int
size
=
0
;
for
(
Iterator
iterator
=
subrecords
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Record
record
=
(
Record
)
iterator
.
next
(
)
;
size
+=
record
.
getRecordSize
(
)
;
}
return
4
+
size
;
}
public
short
getSid
(
)
{
return
sid
;
}
public
List
getSubRecords
(
)
{
return
subrecords
;
}
public
void
clearSubRecords
(
)
{
subrecords
.
clear
(
)
;
}
public
void
addSubRecord
(
int
index
,
Object
element
)
{
subrecords
.
add
(
index
,
element
)
;
}
public
boolean
addSubRecord
(
Object
o
)
{
return
subrecords
.
add
(
o
)
;
}
public
Object
clone
(
)
{
ObjRecord
rec
=
new
ObjRecord
(
)
;
rec
.
subrecords
=
new
ArrayList
(
)
;
for
(
Iterator
iterator
=
subrecords
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
subrecords
.
add
(
(
(
Record
)
iterator
.
next
(
)
)
.
clone
(
)
)
;
return
rec
;
}
}
