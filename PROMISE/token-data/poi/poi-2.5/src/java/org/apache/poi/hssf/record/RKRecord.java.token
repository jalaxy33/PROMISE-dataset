package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
hssf
.
util
.
RKUtil
;
public
class
RKRecord
extends
Record
implements
CellValueRecordInterface
{
public
final
static
short
sid
=
0x27e
;
public
final
static
short
RK_IEEE_NUMBER
=
0
;
public
final
static
short
RK_IEEE_NUMBER_TIMES_100
=
1
;
public
final
static
short
RK_INTEGER
=
2
;
public
final
static
short
RK_INTEGER_TIMES_100
=
3
;
private
int
field_1_row
;
private
short
field_2_col
;
private
short
field_3_xf_index
;
private
int
field_4_rk_number
;
public
RKRecord
(
)
{
}
public
RKRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
RKRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A valid RK RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_row
=
LittleEndian
.
getUShort
(
data
,
0
+
offset
)
;
field_2_col
=
LittleEndian
.
getShort
(
data
,
2
+
offset
)
;
field_3_xf_index
=
LittleEndian
.
getShort
(
data
,
4
+
offset
)
;
field_4_rk_number
=
LittleEndian
.
getInt
(
data
,
6
+
offset
)
;
}
public
int
getRow
(
)
{
return
field_1_row
;
}
public
short
getColumn
(
)
{
return
field_2_col
;
}
public
short
getXFIndex
(
)
{
return
field_3_xf_index
;
}
public
int
getRKField
(
)
{
return
field_4_rk_number
;
}
public
short
getRKType
(
)
{
return
(
short
)
(
field_4_rk_number
&
3
)
;
}
public
double
getRKNumber
(
)
{
return
RKUtil
.
decodeNumber
(
field_4_rk_number
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[RK]\n"
)
;
buffer
.
append
(
"    .row            = "
)
.
append
(
Integer
.
toHexString
(
getRow
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .col            = "
)
.
append
(
Integer
.
toHexString
(
getColumn
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .xfindex        = "
)
.
append
(
Integer
.
toHexString
(
getXFIndex
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .rknumber       = "
)
.
append
(
Integer
.
toHexString
(
getRKField
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .rktype     = "
)
.
append
(
Integer
.
toHexString
(
getRKType
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"        .rknumber   = "
)
.
append
(
getRKNumber
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/RK]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
NumberRecord
rec
=
new
NumberRecord
(
)
;
rec
.
setColumn
(
getColumn
(
)
)
;
rec
.
setRow
(
getRow
(
)
)
;
rec
.
setValue
(
getRKNumber
(
)
)
;
rec
.
setXFIndex
(
getXFIndex
(
)
)
;
return
rec
.
serialize
(
offset
,
data
)
;
}
public
static
void
main
(
String
ignored_args
[
]
)
{
int
[
]
values
=
{
0x3FF00000
,
0x405EC001
,
0x02F1853A
,
0x02F1853B
,
0xFCDD699A
}
;
double
[
]
rvalues
=
{
1
,
1.23
,
12345678
,
123456.78
,
-
13149594
}
;
for
(
int
j
=
0
;
j
<
values
.
length
;
j
++
)
{
System
.
out
.
println
(
"input = "
+
Integer
.
toHexString
(
values
[
j
]
)
+
" -> "
+
rvalues
[
j
]
+
": "
+
RKUtil
.
decodeNumber
(
values
[
j
]
)
)
;
}
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
boolean
isBefore
(
CellValueRecordInterface
i
)
{
if
(
this
.
getRow
(
)
>
i
.
getRow
(
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
>
i
.
getColumn
(
)
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
{
return
false
;
}
return
true
;
}
public
boolean
isAfter
(
CellValueRecordInterface
i
)
{
if
(
this
.
getRow
(
)
<
i
.
getRow
(
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
<
i
.
getColumn
(
)
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
{
return
false
;
}
return
true
;
}
public
boolean
isEqual
(
CellValueRecordInterface
i
)
{
return
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
;
}
public
boolean
isInValueSection
(
)
{
return
true
;
}
public
boolean
isValue
(
)
{
return
true
;
}
public
void
setColumn
(
short
col
)
{
}
public
void
setRow
(
int
row
)
{
}
public
void
setXFIndex
(
short
xf
)
{
}
public
Object
clone
(
)
{
RKRecord
rec
=
new
RKRecord
(
)
;
rec
.
field_1_row
=
field_1_row
;
rec
.
field_2_col
=
field_2_col
;
rec
.
field_3_xf_index
=
field_3_xf_index
;
rec
.
field_4_rk_number
=
field_4_rk_number
;
return
rec
;
}
}
