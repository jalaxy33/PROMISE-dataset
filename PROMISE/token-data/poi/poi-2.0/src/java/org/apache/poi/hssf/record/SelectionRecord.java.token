package
org
.
apache
.
poi
.
hssf
.
record
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
SelectionRecord
extends
Record
{
public
final
static
short
sid
=
0x1d
;
private
byte
field_1_pane
;
private
int
field_2_row_active_cell
;
private
short
field_3_col_active_cell
;
private
short
field_4_ref_active_cell
;
private
short
field_5_num_refs
;
private
ArrayList
field_6_refs
;
public
SelectionRecord
(
)
{
}
public
SelectionRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
SelectionRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A valid Selection RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_pane
=
data
[
0
+
offset
]
;
field_2_row_active_cell
=
LittleEndian
.
getUShort
(
data
,
1
+
offset
)
;
field_3_col_active_cell
=
LittleEndian
.
getShort
(
data
,
3
+
offset
)
;
field_4_ref_active_cell
=
LittleEndian
.
getShort
(
data
,
5
+
offset
)
;
field_5_num_refs
=
LittleEndian
.
getShort
(
data
,
7
+
offset
)
;
}
public
void
setPane
(
byte
pane
)
{
field_1_pane
=
pane
;
}
public
void
setActiveCellRow
(
int
row
)
{
field_2_row_active_cell
=
row
;
}
public
void
setActiveCellCol
(
short
col
)
{
field_3_col_active_cell
=
col
;
}
public
void
setActiveCellRef
(
short
ref
)
{
field_4_ref_active_cell
=
ref
;
}
public
void
setNumRefs
(
short
refs
)
{
field_5_num_refs
=
refs
;
}
public
byte
getPane
(
)
{
return
field_1_pane
;
}
public
int
getActiveCellRow
(
)
{
return
field_2_row_active_cell
;
}
public
short
getActiveCellCol
(
)
{
return
field_3_col_active_cell
;
}
public
short
getActiveCellRef
(
)
{
return
field_4_ref_active_cell
;
}
public
short
getNumRefs
(
)
{
return
field_5_num_refs
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[SELECTION]\n"
)
;
buffer
.
append
(
"    .pane            = "
)
.
append
(
Integer
.
toHexString
(
getPane
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .activecellrow   = "
)
.
append
(
Integer
.
toHexString
(
getActiveCellRow
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .activecellcol   = "
)
.
append
(
Integer
.
toHexString
(
getActiveCellCol
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .activecellref   = "
)
.
append
(
Integer
.
toHexString
(
getActiveCellRef
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .numrefs         = "
)
.
append
(
Integer
.
toHexString
(
getNumRefs
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/SELECTION]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
15
)
;
data
[
4
+
offset
]
=
getPane
(
)
;
LittleEndian
.
putShort
(
data
,
5
+
offset
,
(
short
)
getActiveCellRow
(
)
)
;
LittleEndian
.
putShort
(
data
,
7
+
offset
,
getActiveCellCol
(
)
)
;
LittleEndian
.
putShort
(
data
,
9
+
offset
,
getActiveCellRef
(
)
)
;
LittleEndian
.
putShort
(
data
,
11
+
offset
,
(
short
)
1
)
;
LittleEndian
.
putShort
(
data
,
13
+
offset
,
(
short
)
getActiveCellRow
(
)
)
;
LittleEndian
.
putShort
(
data
,
15
+
offset
,
(
short
)
getActiveCellRow
(
)
)
;
data
[
17
+
offset
]
=
(
byte
)
getActiveCellCol
(
)
;
data
[
18
+
offset
]
=
(
byte
)
getActiveCellCol
(
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
19
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
Object
clone
(
)
{
SelectionRecord
rec
=
new
SelectionRecord
(
)
;
rec
.
field_1_pane
=
field_1_pane
;
rec
.
field_2_row_active_cell
=
field_2_row_active_cell
;
rec
.
field_3_col_active_cell
=
field_3_col_active_cell
;
rec
.
field_4_ref_active_cell
=
field_4_ref_active_cell
;
rec
.
field_5_num_refs
=
field_5_num_refs
;
rec
.
field_6_refs
=
field_6_refs
;
return
rec
;
}
}
