package
org
.
apache
.
poi
.
hssf
.
record
.
aggregates
;
import
org
.
apache
.
poi
.
hssf
.
record
.
*
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
TreeMap
;
public
class
ValueRecordsAggregate
extends
Record
{
public
final
static
short
sid
=
-
1000
;
int
firstcell
=
-
1
;
int
lastcell
=
-
1
;
TreeMap
records
=
null
;
public
ValueRecordsAggregate
(
)
{
records
=
new
TreeMap
(
)
;
}
public
void
insertCell
(
CellValueRecordInterface
cell
)
{
Object
o
=
records
.
put
(
cell
,
cell
)
;
if
(
(
cell
.
getColumn
(
)
<
firstcell
)
||
(
firstcell
==
-
1
)
)
{
firstcell
=
cell
.
getColumn
(
)
;
}
if
(
(
cell
.
getColumn
(
)
>
lastcell
)
||
(
lastcell
==
-
1
)
)
{
lastcell
=
cell
.
getColumn
(
)
;
}
}
public
void
removeCell
(
CellValueRecordInterface
cell
)
{
records
.
remove
(
cell
)
;
}
public
int
getPhysicalNumberOfCells
(
)
{
return
records
.
size
(
)
;
}
public
int
getFirstCellNum
(
)
{
return
firstcell
;
}
public
int
getLastCellNum
(
)
{
return
lastcell
;
}
public
int
construct
(
int
offset
,
List
records
)
{
int
k
=
0
;
FormulaRecordAggregate
lastFormulaAggregate
=
null
;
for
(
k
=
offset
;
k
<
records
.
size
(
)
;
k
++
)
{
Record
rec
=
(
Record
)
records
.
get
(
k
)
;
if
(
rec
instanceof
StringRecord
==
false
&&
!
rec
.
isInValueSection
(
)
&&
!
(
rec
instanceof
UnknownRecord
)
)
{
break
;
}
if
(
rec
instanceof
FormulaRecord
)
{
lastFormulaAggregate
=
new
FormulaRecordAggregate
(
(
FormulaRecord
)
rec
,
null
)
;
insertCell
(
lastFormulaAggregate
)
;
}
else
if
(
rec
instanceof
StringRecord
)
{
lastFormulaAggregate
.
setStringRecord
(
(
StringRecord
)
rec
)
;
}
else
if
(
rec
instanceof
SharedFormulaRecord
)
{
lastFormulaAggregate
.
setSharedFormulaRecord
(
(
SharedFormulaRecord
)
rec
)
;
}
else
if
(
rec
.
isValue
(
)
)
{
insertCell
(
(
CellValueRecordInterface
)
rec
)
;
}
}
return
k
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
Iterator
itr
=
records
.
values
(
)
.
iterator
(
)
;
int
pos
=
offset
;
while
(
itr
.
hasNext
(
)
)
{
pos
+=
(
(
Record
)
itr
.
next
(
)
)
.
serialize
(
pos
,
data
)
;
}
return
pos
-
offset
;
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
}
protected
void
validateSid
(
short
id
)
{
}
public
short
getSid
(
)
{
return
sid
;
}
public
int
getRecordSize
(
)
{
int
size
=
0
;
Iterator
irecs
=
records
.
values
(
)
.
iterator
(
)
;
while
(
irecs
.
hasNext
(
)
)
{
size
+=
(
(
Record
)
irecs
.
next
(
)
)
.
getRecordSize
(
)
;
}
return
size
;
}
public
Iterator
getIterator
(
)
{
return
records
.
values
(
)
.
iterator
(
)
;
}
public
Object
clone
(
)
{
ValueRecordsAggregate
rec
=
new
ValueRecordsAggregate
(
)
;
for
(
Iterator
valIter
=
getIterator
(
)
;
valIter
.
hasNext
(
)
;
)
{
CellValueRecordInterface
val
=
(
CellValueRecordInterface
)
(
(
CellValueRecordInterface
)
valIter
.
next
(
)
)
.
clone
(
)
;
rec
.
insertCell
(
val
)
;
}
return
rec
;
}
}
