package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
IntList
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
IndexRecord
extends
Record
{
public
final
static
short
sid
=
0x20B
;
public
final
static
int
DBCELL_CAPACITY
=
30
;
public
int
field_1_zero
;
public
int
field_2_first_row
;
public
int
field_3_last_row_add1
;
public
int
field_4_zero
;
public
IntList
field_5_dbcells
;
public
IndexRecord
(
)
{
}
public
IndexRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
IndexRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT An Index RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_5_dbcells
=
new
IntList
(
DBCELL_CAPACITY
)
;
field_1_zero
=
LittleEndian
.
getInt
(
data
,
0
+
offset
)
;
field_2_first_row
=
LittleEndian
.
getInt
(
data
,
4
+
offset
)
;
field_3_last_row_add1
=
LittleEndian
.
getInt
(
data
,
8
+
offset
)
;
field_4_zero
=
LittleEndian
.
getInt
(
data
,
12
+
offset
)
;
for
(
int
k
=
16
;
k
<
size
;
k
=
k
+
4
)
{
field_5_dbcells
.
add
(
LittleEndian
.
getInt
(
data
,
k
+
offset
)
)
;
}
}
public
void
setFirstRow
(
int
row
)
{
field_2_first_row
=
row
;
}
public
void
setLastRowAdd1
(
int
row
)
{
field_3_last_row_add1
=
row
;
}
public
void
addDbcell
(
int
cell
)
{
if
(
field_5_dbcells
==
null
)
{
field_5_dbcells
=
new
IntList
(
)
;
}
field_5_dbcells
.
add
(
cell
)
;
}
public
void
setDbcell
(
int
cell
,
int
value
)
{
field_5_dbcells
.
set
(
cell
,
value
)
;
}
public
int
getFirstRow
(
)
{
return
field_2_first_row
;
}
public
int
getLastRowAdd1
(
)
{
return
field_3_last_row_add1
;
}
public
int
getNumDbcells
(
)
{
if
(
field_5_dbcells
==
null
)
{
return
0
;
}
return
field_5_dbcells
.
size
(
)
;
}
public
int
getDbcellAt
(
int
cellnum
)
{
return
field_5_dbcells
.
get
(
cellnum
)
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[INDEX]\n"
)
;
buffer
.
append
(
"    .firstrow       = "
)
.
append
(
Integer
.
toHexString
(
getFirstRow
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .lastrowadd1    = "
)
.
append
(
Integer
.
toHexString
(
getLastRowAdd1
(
)
)
)
.
append
(
"\n"
)
;
for
(
int
k
=
0
;
k
<
getNumDbcells
(
)
;
k
++
)
{
buffer
.
append
(
"    .dbcell_"
+
k
+
"       = "
)
.
append
(
Integer
.
toHexString
(
getDbcellAt
(
k
)
)
)
.
append
(
"\n"
)
;
}
buffer
.
append
(
"[/INDEX]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
16
+
(
getNumDbcells
(
)
*
4
)
)
)
;
LittleEndian
.
putInt
(
data
,
4
+
offset
,
0
)
;
LittleEndian
.
putInt
(
data
,
8
+
offset
,
getFirstRow
(
)
)
;
LittleEndian
.
putInt
(
data
,
12
+
offset
,
getLastRowAdd1
(
)
)
;
LittleEndian
.
putInt
(
data
,
16
+
offset
,
0
)
;
for
(
int
k
=
0
;
k
<
getNumDbcells
(
)
;
k
++
)
{
LittleEndian
.
putInt
(
data
,
(
k
*
4
)
+
20
+
offset
,
getDbcellAt
(
k
)
)
;
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
20
+
(
getNumDbcells
(
)
*
4
)
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
Object
clone
(
)
{
IndexRecord
rec
=
new
IndexRecord
(
)
;
rec
.
field_1_zero
=
field_1_zero
;
rec
.
field_2_first_row
=
field_2_first_row
;
rec
.
field_3_last_row_add1
=
field_3_last_row_add1
;
rec
.
field_4_zero
=
field_4_zero
;
rec
.
field_5_dbcells
=
new
IntList
(
)
;
rec
.
field_5_dbcells
.
addAll
(
field_5_dbcells
)
;
return
rec
;
}
}
