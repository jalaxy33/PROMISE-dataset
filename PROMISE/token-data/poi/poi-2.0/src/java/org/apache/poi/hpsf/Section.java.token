package
org
.
apache
.
poi
.
hpsf
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
hpsf
.
wellknown
.
*
;
public
class
Section
{
protected
Map
dictionary
;
protected
ClassID
formatID
;
public
ClassID
getFormatID
(
)
{
return
formatID
;
}
protected
long
offset
;
public
long
getOffset
(
)
{
return
offset
;
}
protected
int
size
;
public
int
getSize
(
)
{
return
size
;
}
protected
int
propertyCount
;
public
int
getPropertyCount
(
)
{
return
propertyCount
;
}
protected
Property
[
]
properties
;
public
Property
[
]
getProperties
(
)
{
return
properties
;
}
protected
Section
(
)
{
}
public
Section
(
final
byte
[
]
src
,
int
offset
)
{
formatID
=
new
ClassID
(
src
,
offset
)
;
offset
+=
ClassID
.
LENGTH
;
this
.
offset
=
LittleEndian
.
getUInt
(
src
,
offset
)
;
offset
=
(
int
)
this
.
offset
;
size
=
(
int
)
LittleEndian
.
getUInt
(
src
,
offset
)
;
offset
+=
LittleEndian
.
INT_SIZE
;
propertyCount
=
(
int
)
LittleEndian
.
getUInt
(
src
,
offset
)
;
offset
+=
LittleEndian
.
INT_SIZE
;
properties
=
new
Property
[
propertyCount
]
;
Property
propertyOne
;
int
codepage
=
-
1
;
int
pass1Offset
=
offset
;
for
(
int
i
=
0
;
i
<
properties
.
length
;
i
++
)
{
final
int
id
=
(
int
)
LittleEndian
.
getUInt
(
src
,
pass1Offset
)
;
pass1Offset
+=
LittleEndian
.
INT_SIZE
;
final
int
sOffset
=
(
int
)
LittleEndian
.
getUInt
(
src
,
pass1Offset
)
;
pass1Offset
+=
LittleEndian
.
INT_SIZE
;
int
length
;
if
(
i
==
properties
.
length
-
1
)
length
=
(
int
)
(
src
.
length
-
this
.
offset
-
sOffset
)
;
else
length
=
(
int
)
LittleEndian
.
getUInt
(
src
,
pass1Offset
+
LittleEndian
.
INT_SIZE
)
-
sOffset
;
if
(
id
==
PropertyIDMap
.
PID_CODEPAGE
)
{
int
o
=
(
int
)
(
this
.
offset
+
sOffset
)
;
final
long
type
=
LittleEndian
.
getUInt
(
src
,
o
)
;
o
+=
LittleEndian
.
INT_SIZE
;
if
(
type
!=
Variant
.
VT_I2
)
throw
new
HPSFRuntimeException
(
"Value type of property ID 1 is not VT_I2 but "
+
type
+
"."
)
;
codepage
=
LittleEndian
.
getUShort
(
src
,
o
)
;
}
}
for
(
int
i
=
0
;
i
<
properties
.
length
;
i
++
)
{
final
int
id
=
(
int
)
LittleEndian
.
getUInt
(
src
,
offset
)
;
offset
+=
LittleEndian
.
INT_SIZE
;
final
int
sOffset
=
(
int
)
LittleEndian
.
getUInt
(
src
,
offset
)
;
offset
+=
LittleEndian
.
INT_SIZE
;
int
length
;
if
(
i
==
properties
.
length
-
1
)
length
=
(
int
)
(
src
.
length
-
this
.
offset
-
sOffset
)
;
else
length
=
(
int
)
LittleEndian
.
getUInt
(
src
,
offset
+
LittleEndian
.
INT_SIZE
)
-
sOffset
;
properties
[
i
]
=
new
Property
(
id
,
src
,
this
.
offset
+
sOffset
,
length
,
codepage
)
;
}
dictionary
=
(
Map
)
getProperty
(
0
)
;
}
public
Object
getProperty
(
final
int
id
)
{
wasNull
=
false
;
for
(
int
i
=
0
;
i
<
properties
.
length
;
i
++
)
if
(
id
==
properties
[
i
]
.
getID
(
)
)
return
properties
[
i
]
.
getValue
(
)
;
wasNull
=
true
;
return
null
;
}
protected
int
getPropertyIntValue
(
final
int
id
)
{
final
Long
i
=
(
Long
)
getProperty
(
id
)
;
if
(
i
!=
null
)
return
i
.
intValue
(
)
;
else
return
0
;
}
protected
boolean
getPropertyBooleanValue
(
final
int
id
)
{
final
Boolean
b
=
(
Boolean
)
getProperty
(
id
)
;
if
(
b
!=
null
)
return
b
.
booleanValue
(
)
;
else
return
false
;
}
private
boolean
wasNull
;
public
boolean
wasNull
(
)
{
return
wasNull
;
}
public
String
getPIDString
(
final
int
pid
)
{
String
s
=
null
;
if
(
dictionary
!=
null
)
s
=
(
String
)
dictionary
.
get
(
new
Integer
(
pid
)
)
;
if
(
s
==
null
)
s
=
SectionIDMap
.
getPIDString
(
getFormatID
(
)
.
getBytes
(
)
,
pid
)
;
if
(
s
==
null
)
s
=
SectionIDMap
.
UNDEFINED
;
return
s
;
}
}
