package
org
.
apache
.
poi
.
hssf
.
eventmodel
;
import
java
.
io
.
InputStream
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Model
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Sheet
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Workbook
;
import
org
.
apache
.
poi
.
hssf
.
record
.
BOFRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
EOFRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
Record
;
public
class
ModelFactory
implements
ERFListener
{
List
listeners
;
Model
currentmodel
;
boolean
lastEOF
;
public
ModelFactory
(
)
{
super
(
)
;
listeners
=
new
ArrayList
(
1
)
;
}
public
void
registerListener
(
ModelFactoryListener
listener
)
{
listeners
.
add
(
listener
)
;
}
public
void
run
(
InputStream
stream
)
{
EventRecordFactory
factory
=
new
EventRecordFactory
(
true
)
;
factory
.
registerListener
(
this
,
null
)
;
lastEOF
=
true
;
factory
.
processRecords
(
stream
)
;
}
public
boolean
processRecord
(
Record
rec
)
{
if
(
rec
.
getSid
(
)
==
BOFRecord
.
sid
)
{
if
(
lastEOF
!=
true
)
{
throw
new
RuntimeException
(
"Not yet handled embedded models"
)
;
}
else
{
BOFRecord
bof
=
(
BOFRecord
)
rec
;
switch
(
bof
.
getType
(
)
)
{
case
BOFRecord
.
TYPE_WORKBOOK
:
currentmodel
=
new
Workbook
(
)
;
break
;
case
BOFRecord
.
TYPE_WORKSHEET
:
currentmodel
=
new
Sheet
(
)
;
break
;
default
:
throw
new
RuntimeException
(
"Unsupported model type "
+
bof
.
getType
(
)
)
;
}
}
}
if
(
rec
.
getSid
(
)
==
EOFRecord
.
sid
)
{
lastEOF
=
true
;
throwEvent
(
currentmodel
)
;
}
else
{
lastEOF
=
false
;
}
return
true
;
}
private
void
throwEvent
(
Model
model
)
{
Iterator
i
=
listeners
.
iterator
(
)
;
while
(
i
.
hasNext
(
)
)
{
ModelFactoryListener
mfl
=
(
ModelFactoryListener
)
i
.
next
(
)
;
mfl
.
process
(
model
)
;
}
}
}
