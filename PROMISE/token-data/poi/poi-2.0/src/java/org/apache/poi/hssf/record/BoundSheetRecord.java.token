package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
StringUtil
;
public
class
BoundSheetRecord
extends
Record
{
public
final
static
short
sid
=
0x85
;
private
int
field_1_position_of_BOF
;
private
short
field_2_option_flags
;
private
byte
field_3_sheetname_length
;
private
byte
field_4_compressed_unicode_flag
;
private
String
field_5_sheetname
;
public
BoundSheetRecord
(
)
{
}
public
BoundSheetRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
BoundSheetRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A Bound Sheet RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_position_of_BOF
=
LittleEndian
.
getInt
(
data
,
0
+
offset
)
;
field_2_option_flags
=
LittleEndian
.
getShort
(
data
,
4
+
offset
)
;
field_3_sheetname_length
=
data
[
6
+
offset
]
;
field_4_compressed_unicode_flag
=
data
[
7
+
offset
]
;
int
nameLength
=
LittleEndian
.
ubyteToInt
(
field_3_sheetname_length
)
;
if
(
(
field_4_compressed_unicode_flag
&
0x01
)
==
1
)
{
field_5_sheetname
=
StringUtil
.
getFromUnicodeHigh
(
data
,
8
+
offset
,
nameLength
)
;
}
else
{
field_5_sheetname
=
StringUtil
.
getFromCompressedUnicode
(
data
,
8
+
offset
,
nameLength
)
;
}
}
public
void
setPositionOfBof
(
int
pos
)
{
field_1_position_of_BOF
=
pos
;
}
public
void
setOptionFlags
(
short
flags
)
{
field_2_option_flags
=
flags
;
}
public
void
setSheetnameLength
(
byte
len
)
{
field_3_sheetname_length
=
len
;
}
public
void
setCompressedUnicodeFlag
(
byte
flag
)
{
field_4_compressed_unicode_flag
=
flag
;
}
public
void
setSheetname
(
String
sheetname
)
{
if
(
(
sheetname
==
null
)
||
(
sheetname
.
length
(
)
==
0
)
||
(
sheetname
.
length
(
)
>
31
)
||
(
sheetname
.
indexOf
(
"/"
)
>
-
1
)
||
(
sheetname
.
indexOf
(
"\\"
)
>
-
1
)
||
(
sheetname
.
indexOf
(
"?"
)
>
-
1
)
||
(
sheetname
.
indexOf
(
"*"
)
>
-
1
)
||
(
sheetname
.
indexOf
(
"]"
)
>
-
1
)
||
(
sheetname
.
indexOf
(
"["
)
>
-
1
)
)
{
throw
new
IllegalArgumentException
(
"Sheet name cannot be blank, greater than 31 chars, or contain any of /\\*?[]"
)
;
}
field_5_sheetname
=
sheetname
;
}
public
int
getPositionOfBof
(
)
{
return
field_1_position_of_BOF
;
}
public
short
getOptionFlags
(
)
{
return
field_2_option_flags
;
}
public
byte
getSheetnameLength
(
)
{
return
field_3_sheetname_length
;
}
public
byte
getRawSheetnameLength
(
)
{
return
(
byte
)
(
(
(
field_4_compressed_unicode_flag
&
0x01
)
==
1
)
?
2
*
field_3_sheetname_length
:
field_3_sheetname_length
)
;
}
public
byte
getCompressedUnicodeFlag
(
)
{
return
field_4_compressed_unicode_flag
;
}
public
String
getSheetname
(
)
{
return
field_5_sheetname
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[BOUNDSHEET]\n"
)
;
buffer
.
append
(
"    .bof             = "
)
.
append
(
Integer
.
toHexString
(
getPositionOfBof
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .optionflags     = "
)
.
append
(
Integer
.
toHexString
(
getOptionFlags
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .sheetname length= "
)
.
append
(
Integer
.
toHexString
(
getSheetnameLength
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .unicodeflag     = "
)
.
append
(
Integer
.
toHexString
(
getCompressedUnicodeFlag
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .sheetname       = "
)
.
append
(
getSheetname
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/BOUNDSHEET]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
(
8
+
getRawSheetnameLength
(
)
)
)
;
LittleEndian
.
putInt
(
data
,
4
+
offset
,
getPositionOfBof
(
)
)
;
LittleEndian
.
putShort
(
data
,
8
+
offset
,
getOptionFlags
(
)
)
;
data
[
10
+
offset
]
=
(
byte
)
(
getSheetnameLength
(
)
)
;
data
[
11
+
offset
]
=
getCompressedUnicodeFlag
(
)
;
if
(
(
field_4_compressed_unicode_flag
&
0x01
)
==
1
)
StringUtil
.
putUncompressedUnicode
(
getSheetname
(
)
,
data
,
12
+
offset
)
;
else
StringUtil
.
putCompressedUnicode
(
getSheetname
(
)
,
data
,
12
+
offset
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
12
+
getRawSheetnameLength
(
)
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
}
