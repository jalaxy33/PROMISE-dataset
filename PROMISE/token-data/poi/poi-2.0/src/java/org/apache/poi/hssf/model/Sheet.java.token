package
org
.
apache
.
poi
.
hssf
.
model
;
import
java
.
util
.
List
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
poi
.
hssf
.
record
.
*
;
import
org
.
apache
.
poi
.
hssf
.
record
.
formula
.
Ptg
;
import
org
.
apache
.
poi
.
util
.
*
;
import
org
.
apache
.
poi
.
hssf
.
record
.
aggregates
.
*
;
public
class
Sheet
implements
Model
{
public
static
final
short
LeftMargin
=
0
;
public
static
final
short
RightMargin
=
1
;
public
static
final
short
TopMargin
=
2
;
public
static
final
short
BottomMargin
=
3
;
protected
ArrayList
records
=
null
;
int
preoffset
=
0
;
int
loc
=
0
;
protected
boolean
containsLabels
=
false
;
protected
int
dimsloc
=
0
;
protected
DimensionsRecord
dims
;
protected
DefaultColWidthRecord
defaultcolwidth
=
null
;
protected
DefaultRowHeightRecord
defaultrowheight
=
null
;
protected
GridsetRecord
gridset
=
null
;
protected
PrintSetupRecord
printSetup
=
null
;
protected
HeaderRecord
header
=
null
;
protected
FooterRecord
footer
=
null
;
protected
PrintGridlinesRecord
printGridlines
=
null
;
protected
WindowTwoRecord
windowTwo
=
null
;
protected
MergeCellsRecord
merged
=
null
;
protected
Margin
margins
[
]
=
null
;
protected
List
mergedRecords
=
new
ArrayList
(
)
;
protected
int
numMergedRegions
=
0
;
protected
SelectionRecord
selection
=
null
;
private
static
POILogger
log
=
POILogFactory
.
getLogger
(
Sheet
.
class
)
;
private
ArrayList
columnSizes
=
null
;
protected
ValueRecordsAggregate
cells
=
null
;
protected
RowRecordsAggregate
rows
=
null
;
private
Iterator
valueRecIterator
=
null
;
private
Iterator
rowRecIterator
=
null
;
protected
int
eofLoc
=
0
;
protected
ProtectRecord
protect
=
null
;
public
static
final
byte
PANE_LOWER_RIGHT
=
(
byte
)
0
;
public
static
final
byte
PANE_UPPER_RIGHT
=
(
byte
)
1
;
public
static
final
byte
PANE_LOWER_LEFT
=
(
byte
)
2
;
public
static
final
byte
PANE_UPPER_LEFT
=
(
byte
)
3
;
public
Sheet
(
)
{
}
public
static
Sheet
createSheet
(
List
recs
,
int
sheetnum
,
int
offset
)
{
log
.
logFormatted
(
log
.
DEBUG
,
"Sheet createSheet (existing file) with %"
,
new
Integer
(
recs
.
size
(
)
)
)
;
Sheet
retval
=
new
Sheet
(
)
;
ArrayList
records
=
new
ArrayList
(
recs
.
size
(
)
/
5
)
;
boolean
isfirstcell
=
true
;
boolean
isfirstrow
=
true
;
int
bofEofNestingLevel
=
0
;
for
(
int
k
=
offset
;
k
<
recs
.
size
(
)
;
k
++
)
{
Record
rec
=
(
Record
)
recs
.
get
(
k
)
;
if
(
rec
.
getSid
(
)
==
LabelRecord
.
sid
)
{
log
.
log
(
log
.
DEBUG
,
"Hit label record."
)
;
retval
.
containsLabels
=
true
;
}
else
if
(
rec
.
getSid
(
)
==
BOFRecord
.
sid
)
{
bofEofNestingLevel
++
;
log
.
log
(
log
.
DEBUG
,
"Hit BOF record. Nesting increased to "
+
bofEofNestingLevel
)
;
}
else
if
(
rec
.
getSid
(
)
==
EOFRecord
.
sid
)
{
--
bofEofNestingLevel
;
log
.
log
(
log
.
DEBUG
,
"Hit EOF record. Nesting decreased to "
+
bofEofNestingLevel
)
;
if
(
bofEofNestingLevel
==
0
)
{
records
.
add
(
rec
)
;
retval
.
eofLoc
=
k
;
break
;
}
}
else
if
(
rec
.
getSid
(
)
==
DimensionsRecord
.
sid
)
{
retval
.
dims
=
(
DimensionsRecord
)
rec
;
retval
.
dimsloc
=
records
.
size
(
)
;
}
else
if
(
rec
.
getSid
(
)
==
MergeCellsRecord
.
sid
)
{
retval
.
mergedRecords
.
add
(
rec
)
;
retval
.
merged
=
(
MergeCellsRecord
)
rec
;
retval
.
numMergedRegions
+=
retval
.
merged
.
getNumAreas
(
)
;
}
else
if
(
rec
.
getSid
(
)
==
ColumnInfoRecord
.
sid
)
{
if
(
retval
.
columnSizes
==
null
)
{
retval
.
columnSizes
=
new
ArrayList
(
)
;
}
retval
.
columnSizes
.
add
(
rec
)
;
}
else
if
(
rec
.
getSid
(
)
==
DefaultColWidthRecord
.
sid
)
{
retval
.
defaultcolwidth
=
(
DefaultColWidthRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
DefaultRowHeightRecord
.
sid
)
{
retval
.
defaultrowheight
=
(
DefaultRowHeightRecord
)
rec
;
}
else
if
(
rec
.
isValue
(
)
&&
bofEofNestingLevel
==
1
)
{
if
(
isfirstcell
)
{
retval
.
cells
=
new
ValueRecordsAggregate
(
)
;
rec
=
retval
.
cells
;
retval
.
cells
.
construct
(
k
,
recs
)
;
isfirstcell
=
false
;
}
else
{
rec
=
null
;
}
}
else
if
(
rec
.
getSid
(
)
==
StringRecord
.
sid
)
{
rec
=
null
;
}
else
if
(
rec
.
getSid
(
)
==
RowRecord
.
sid
)
{
RowRecord
row
=
(
RowRecord
)
rec
;
if
(
!
isfirstrow
)
rec
=
null
;
if
(
isfirstrow
)
{
retval
.
rows
=
new
RowRecordsAggregate
(
)
;
rec
=
retval
.
rows
;
isfirstrow
=
false
;
}
retval
.
rows
.
insertRow
(
row
)
;
}
else
if
(
rec
.
getSid
(
)
==
PrintGridlinesRecord
.
sid
)
{
retval
.
printGridlines
=
(
PrintGridlinesRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
HeaderRecord
.
sid
&&
bofEofNestingLevel
==
1
)
{
retval
.
header
=
(
HeaderRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
FooterRecord
.
sid
&&
bofEofNestingLevel
==
1
)
{
retval
.
footer
=
(
FooterRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
PrintSetupRecord
.
sid
&&
bofEofNestingLevel
==
1
)
{
retval
.
printSetup
=
(
PrintSetupRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
LeftMarginRecord
.
sid
)
{
retval
.
getMargins
(
)
[
LeftMargin
]
=
(
LeftMarginRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
RightMarginRecord
.
sid
)
{
retval
.
getMargins
(
)
[
RightMargin
]
=
(
RightMarginRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
TopMarginRecord
.
sid
)
{
retval
.
getMargins
(
)
[
TopMargin
]
=
(
TopMarginRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
BottomMarginRecord
.
sid
)
{
retval
.
getMargins
(
)
[
BottomMargin
]
=
(
BottomMarginRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
SelectionRecord
.
sid
)
{
retval
.
selection
=
(
SelectionRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
WindowTwoRecord
.
sid
)
{
retval
.
windowTwo
=
(
WindowTwoRecord
)
rec
;
}
else
if
(
rec
.
getSid
(
)
==
ProtectRecord
.
sid
)
{
retval
.
protect
=
(
ProtectRecord
)
rec
;
}
if
(
rec
!=
null
)
{
records
.
add
(
rec
)
;
}
}
retval
.
records
=
records
;
retval
.
checkCells
(
)
;
retval
.
checkRows
(
)
;
log
.
log
(
log
.
DEBUG
,
"sheet createSheet (existing file) exited"
)
;
return
retval
;
}
public
Sheet
cloneSheet
(
)
{
ArrayList
clonedRecords
=
new
ArrayList
(
this
.
records
.
size
(
)
)
;
for
(
int
i
=
0
;
i
<
this
.
records
.
size
(
)
;
i
++
)
{
Record
rec
=
(
Record
)
(
(
Record
)
this
.
records
.
get
(
i
)
)
.
clone
(
)
;
if
(
rec
instanceof
RowRecordsAggregate
)
{
RowRecordsAggregate
rrAgg
=
(
RowRecordsAggregate
)
rec
;
for
(
Iterator
rowIter
=
rrAgg
.
getIterator
(
)
;
rowIter
.
hasNext
(
)
;
)
{
Record
rowRec
=
(
Record
)
rowIter
.
next
(
)
;
clonedRecords
.
add
(
rowRec
)
;
}
}
else
if
(
rec
instanceof
ValueRecordsAggregate
)
{
ValueRecordsAggregate
vrAgg
=
(
ValueRecordsAggregate
)
rec
;
for
(
Iterator
cellIter
=
vrAgg
.
getIterator
(
)
;
cellIter
.
hasNext
(
)
;
)
{
Record
valRec
=
(
Record
)
cellIter
.
next
(
)
;
clonedRecords
.
add
(
valRec
)
;
}
}
else
if
(
rec
instanceof
FormulaRecordAggregate
)
{
FormulaRecordAggregate
fmAgg
=
(
FormulaRecordAggregate
)
rec
;
Record
fmAggRec
=
fmAgg
.
getFormulaRecord
(
)
;
if
(
fmAggRec
!=
null
)
clonedRecords
.
add
(
fmAggRec
)
;
fmAggRec
=
fmAgg
.
getStringRecord
(
)
;
if
(
fmAggRec
!=
null
)
clonedRecords
.
add
(
fmAggRec
)
;
}
else
{
clonedRecords
.
add
(
rec
)
;
}
}
return
createSheet
(
clonedRecords
,
0
,
0
)
;
}
public
static
Sheet
createSheet
(
List
records
,
int
sheetnum
)
{
log
.
log
(
log
.
DEBUG
,
"Sheet createSheet (exisiting file) assumed offset 0"
)
;
return
createSheet
(
records
,
sheetnum
,
0
)
;
}
public
static
Sheet
createSheet
(
)
{
log
.
log
(
log
.
DEBUG
,
"Sheet createsheet from scratch called"
)
;
Sheet
retval
=
new
Sheet
(
)
;
ArrayList
records
=
new
ArrayList
(
30
)
;
records
.
add
(
retval
.
createBOF
(
)
)
;
records
.
add
(
retval
.
createCalcMode
(
)
)
;
records
.
add
(
retval
.
createCalcCount
(
)
)
;
records
.
add
(
retval
.
createRefMode
(
)
)
;
records
.
add
(
retval
.
createIteration
(
)
)
;
records
.
add
(
retval
.
createDelta
(
)
)
;
records
.
add
(
retval
.
createSaveRecalc
(
)
)
;
records
.
add
(
retval
.
createPrintHeaders
(
)
)
;
retval
.
printGridlines
=
(
PrintGridlinesRecord
)
retval
.
createPrintGridlines
(
)
;
records
.
add
(
retval
.
printGridlines
)
;
retval
.
gridset
=
(
GridsetRecord
)
retval
.
createGridset
(
)
;
records
.
add
(
retval
.
gridset
)
;
records
.
add
(
retval
.
createGuts
(
)
)
;
retval
.
defaultrowheight
=
(
DefaultRowHeightRecord
)
retval
.
createDefaultRowHeight
(
)
;
records
.
add
(
retval
.
defaultrowheight
)
;
records
.
add
(
retval
.
createWSBool
(
)
)
;
retval
.
header
=
(
HeaderRecord
)
retval
.
createHeader
(
)
;
records
.
add
(
retval
.
header
)
;
retval
.
footer
=
(
FooterRecord
)
retval
.
createFooter
(
)
;
records
.
add
(
retval
.
footer
)
;
records
.
add
(
retval
.
createHCenter
(
)
)
;
records
.
add
(
retval
.
createVCenter
(
)
)
;
retval
.
printSetup
=
(
PrintSetupRecord
)
retval
.
createPrintSetup
(
)
;
records
.
add
(
retval
.
printSetup
)
;
retval
.
defaultcolwidth
=
(
DefaultColWidthRecord
)
retval
.
createDefaultColWidth
(
)
;
records
.
add
(
retval
.
defaultcolwidth
)
;
retval
.
dims
=
(
DimensionsRecord
)
retval
.
createDimensions
(
)
;
retval
.
dimsloc
=
19
;
records
.
add
(
retval
.
dims
)
;
records
.
add
(
retval
.
windowTwo
=
retval
.
createWindowTwo
(
)
)
;
retval
.
setLoc
(
records
.
size
(
)
-
1
)
;
retval
.
selection
=
(
SelectionRecord
)
retval
.
createSelection
(
)
;
records
.
add
(
retval
.
selection
)
;
retval
.
protect
=
(
ProtectRecord
)
retval
.
createProtect
(
)
;
records
.
add
(
retval
.
protect
)
;
records
.
add
(
retval
.
createEOF
(
)
)
;
retval
.
records
=
records
;
log
.
log
(
log
.
DEBUG
,
"Sheet createsheet from scratch exit"
)
;
return
retval
;
}
private
void
checkCells
(
)
{
if
(
cells
==
null
)
{
cells
=
new
ValueRecordsAggregate
(
)
;
records
.
add
(
getDimsLoc
(
)
+
1
,
cells
)
;
}
}
private
void
checkRows
(
)
{
if
(
rows
==
null
)
{
rows
=
new
RowRecordsAggregate
(
)
;
records
.
add
(
getDimsLoc
(
)
+
1
,
rows
)
;
}
}
public
int
addMergedRegion
(
int
rowFrom
,
short
colFrom
,
int
rowTo
,
short
colTo
)
{
if
(
merged
==
null
||
merged
.
getNumAreas
(
)
==
1027
)
{
merged
=
(
MergeCellsRecord
)
createMergedCells
(
)
;
mergedRecords
.
add
(
merged
)
;
records
.
add
(
records
.
size
(
)
-
1
,
merged
)
;
}
merged
.
addArea
(
rowFrom
,
colFrom
,
rowTo
,
colTo
)
;
return
numMergedRegions
++
;
}
public
void
removeMergedRegion
(
int
index
)
{
if
(
index
>=
numMergedRegions
||
mergedRecords
.
size
(
)
==
0
)
return
;
int
pos
=
0
;
int
startNumRegions
=
0
;
if
(
numMergedRegions
-
index
<
merged
.
getNumAreas
(
)
)
{
pos
=
mergedRecords
.
size
(
)
-
1
;
startNumRegions
=
numMergedRegions
-
merged
.
getNumAreas
(
)
;
}
else
{
for
(
int
n
=
0
;
n
<
mergedRecords
.
size
(
)
;
n
++
)
{
MergeCellsRecord
record
=
(
MergeCellsRecord
)
mergedRecords
.
get
(
n
)
;
if
(
startNumRegions
+
record
.
getNumAreas
(
)
>
index
)
{
pos
=
n
;
break
;
}
startNumRegions
+=
record
.
getNumAreas
(
)
;
}
}
MergeCellsRecord
rec
=
(
MergeCellsRecord
)
mergedRecords
.
get
(
pos
)
;
rec
.
removeAreaAt
(
index
-
startNumRegions
)
;
numMergedRegions
--
;
if
(
rec
.
getNumAreas
(
)
==
0
)
{
mergedRecords
.
remove
(
pos
)
;
records
.
remove
(
merged
)
;
if
(
merged
==
rec
)
{
if
(
mergedRecords
.
size
(
)
>
0
)
{
merged
=
(
MergeCellsRecord
)
mergedRecords
.
get
(
mergedRecords
.
size
(
)
-
1
)
;
}
else
{
merged
=
null
;
}
}
}
}
public
MergeCellsRecord
.
MergedRegion
getMergedRegionAt
(
int
index
)
{
if
(
index
>=
numMergedRegions
||
mergedRecords
.
size
(
)
==
0
)
return
null
;
int
pos
=
0
;
int
startNumRegions
=
0
;
if
(
numMergedRegions
-
index
<
merged
.
getNumAreas
(
)
)
{
pos
=
mergedRecords
.
size
(
)
-
1
;
startNumRegions
=
numMergedRegions
-
merged
.
getNumAreas
(
)
;
}
else
{
for
(
int
n
=
0
;
n
<
mergedRecords
.
size
(
)
;
n
++
)
{
MergeCellsRecord
record
=
(
MergeCellsRecord
)
mergedRecords
.
get
(
n
)
;
if
(
startNumRegions
+
record
.
getNumAreas
(
)
>
index
)
{
pos
=
n
;
break
;
}
startNumRegions
+=
record
.
getNumAreas
(
)
;
}
}
return
(
(
MergeCellsRecord
)
mergedRecords
.
get
(
pos
)
)
.
getAreaAt
(
index
-
startNumRegions
)
;
}
public
int
getNumMergedRegions
(
)
{
return
numMergedRegions
;
}
public
void
convertLabelRecords
(
Workbook
wb
)
{
log
.
log
(
log
.
DEBUG
,
"convertLabelRecords called"
)
;
if
(
containsLabels
)
{
for
(
int
k
=
0
;
k
<
records
.
size
(
)
;
k
++
)
{
Record
rec
=
(
Record
)
records
.
get
(
k
)
;
if
(
rec
.
getSid
(
)
==
LabelRecord
.
sid
)
{
LabelRecord
oldrec
=
(
LabelRecord
)
rec
;
records
.
remove
(
k
)
;
LabelSSTRecord
newrec
=
new
LabelSSTRecord
(
)
;
int
stringid
=
wb
.
addSSTString
(
oldrec
.
getValue
(
)
)
;
newrec
.
setRow
(
oldrec
.
getRow
(
)
)
;
newrec
.
setColumn
(
oldrec
.
getColumn
(
)
)
;
newrec
.
setXFIndex
(
oldrec
.
getXFIndex
(
)
)
;
newrec
.
setSSTIndex
(
stringid
)
;
records
.
add
(
k
,
newrec
)
;
}
}
}
log
.
log
(
log
.
DEBUG
,
"convertLabelRecords exit"
)
;
}
public
int
getNumRecords
(
)
{
checkCells
(
)
;
checkRows
(
)
;
log
.
log
(
log
.
DEBUG
,
"Sheet.getNumRecords"
)
;
log
.
logFormatted
(
log
.
DEBUG
,
"returning % + % + % - 2 = %"
,
new
int
[
]
{
records
.
size
(
)
,
cells
.
getPhysicalNumberOfCells
(
)
,
rows
.
getPhysicalNumberOfRows
(
)
,
records
.
size
(
)
+
cells
.
getPhysicalNumberOfCells
(
)
+
rows
.
getPhysicalNumberOfRows
(
)
-
2
}
)
;
return
records
.
size
(
)
+
cells
.
getPhysicalNumberOfCells
(
)
+
rows
.
getPhysicalNumberOfRows
(
)
-
2
;
}
public
void
setDimensions
(
int
firstrow
,
short
firstcol
,
int
lastrow
,
short
lastcol
)
{
log
.
log
(
log
.
DEBUG
,
"Sheet.setDimensions"
)
;
log
.
log
(
log
.
DEBUG
,
(
new
StringBuffer
(
"firstrow"
)
)
.
append
(
firstrow
)
.
append
(
"firstcol"
)
.
append
(
firstcol
)
.
append
(
"lastrow"
)
.
append
(
lastrow
)
.
append
(
"lastcol"
)
.
append
(
lastcol
)
.
toString
(
)
)
;
dims
.
setFirstCol
(
firstcol
)
;
dims
.
setFirstRow
(
firstrow
)
;
dims
.
setLastCol
(
lastcol
)
;
dims
.
setLastRow
(
lastrow
)
;
log
.
log
(
log
.
DEBUG
,
"Sheet.setDimensions exiting"
)
;
}
public
void
setLoc
(
int
loc
)
{
valueRecIterator
=
null
;
log
.
log
(
log
.
DEBUG
,
"sheet.setLoc(): "
+
loc
)
;
this
.
loc
=
loc
;
}
public
int
getLoc
(
)
{
log
.
log
(
log
.
DEBUG
,
"sheet.getLoc():"
+
loc
)
;
return
loc
;
}
public
void
setPreOffset
(
int
offset
)
{
this
.
preoffset
=
offset
;
}
public
int
getPreOffset
(
)
{
return
preoffset
;
}
public
byte
[
]
serialize
(
)
{
log
.
log
(
log
.
DEBUG
,
"Sheet.serialize"
)
;
byte
[
]
retval
=
null
;
int
arraysize
=
getSize
(
)
;
int
pos
=
0
;
retval
=
new
byte
[
arraysize
]
;
for
(
int
k
=
0
;
k
<
records
.
size
(
)
;
k
++
)
{
pos
+=
(
(
Record
)
records
.
get
(
k
)
)
.
serialize
(
pos
,
retval
)
;
}
log
.
log
(
log
.
DEBUG
,
"Sheet.serialize returning "
+
retval
)
;
return
retval
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
log
.
log
(
log
.
DEBUG
,
"Sheet.serialize using offsets"
)
;
int
pos
=
0
;
for
(
int
k
=
0
;
k
<
records
.
size
(
)
;
k
++
)
{
Record
record
=
(
(
Record
)
records
.
get
(
k
)
)
;
pos
+=
record
.
serialize
(
pos
+
offset
,
data
)
;
}
log
.
log
(
log
.
DEBUG
,
"Sheet.serialize returning "
)
;
return
pos
;
}
public
RowRecord
createRow
(
int
row
)
{
log
.
log
(
log
.
DEBUG
,
"create row number "
+
row
)
;
RowRecord
rowrec
=
new
RowRecord
(
)
;
rowrec
.
setRowNumber
(
row
)
;
rowrec
.
setHeight
(
(
short
)
0xff
)
;
rowrec
.
setOptimize
(
(
short
)
0x0
)
;
rowrec
.
setOptionFlags
(
(
short
)
0x0
)
;
rowrec
.
setXFIndex
(
(
short
)
0x0
)
;
return
rowrec
;
}
public
LabelSSTRecord
createLabelSST
(
int
row
,
short
col
,
int
index
)
{
log
.
logFormatted
(
log
.
DEBUG
,
"create labelsst row,col,index %,%,%"
,
new
int
[
]
{
row
,
col
,
index
}
)
;
LabelSSTRecord
rec
=
new
LabelSSTRecord
(
)
;
rec
.
setRow
(
row
)
;
rec
.
setColumn
(
col
)
;
rec
.
setSSTIndex
(
index
)
;
rec
.
setXFIndex
(
(
short
)
0x0f
)
;
return
rec
;
}
public
NumberRecord
createNumber
(
int
row
,
short
col
,
double
value
)
{
log
.
logFormatted
(
log
.
DEBUG
,
"create number row,col,value %,%,%"
,
new
double
[
]
{
row
,
col
,
value
}
)
;
NumberRecord
rec
=
new
NumberRecord
(
)
;
rec
.
setRow
(
row
)
;
rec
.
setColumn
(
col
)
;
rec
.
setValue
(
value
)
;
rec
.
setXFIndex
(
(
short
)
0x0f
)
;
return
rec
;
}
public
BlankRecord
createBlank
(
int
row
,
short
col
)
{
log
.
logFormatted
(
log
.
DEBUG
,
"create blank row,col %,%"
,
new
int
[
]
{
row
,
col
}
)
;
BlankRecord
rec
=
new
BlankRecord
(
)
;
rec
.
setRow
(
row
)
;
rec
.
setColumn
(
col
)
;
rec
.
setXFIndex
(
(
short
)
0x0f
)
;
return
rec
;
}
public
FormulaRecord
createFormula
(
int
row
,
short
col
,
String
formula
)
{
log
.
logFormatted
(
log
.
DEBUG
,
"create formula row,col,formula %,%,%"
,
new
int
[
]
{
row
,
col
}
,
formula
)
;
FormulaRecord
rec
=
new
FormulaRecord
(
)
;
rec
.
setRow
(
row
)
;
rec
.
setColumn
(
col
)
;
rec
.
setOptions
(
(
short
)
2
)
;
rec
.
setValue
(
0
)
;
rec
.
setXFIndex
(
(
short
)
0x0f
)
;
FormulaParser
fp
=
new
FormulaParser
(
formula
,
null
)
;
fp
.
parse
(
)
;
Ptg
[
]
ptg
=
fp
.
getRPNPtg
(
)
;
int
size
=
0
;
for
(
int
k
=
0
;
k
<
ptg
.
length
;
k
++
)
{
size
+=
ptg
[
k
]
.
getSize
(
)
;
rec
.
pushExpressionToken
(
ptg
[
k
]
)
;
}
rec
.
setExpressionLength
(
(
short
)
size
)
;
return
rec
;
}
public
void
addValueRecord
(
int
row
,
CellValueRecordInterface
col
)
{
checkCells
(
)
;
log
.
logFormatted
(
log
.
DEBUG
,
"add value record  row,loc %,%"
,
new
int
[
]
{
row
,
loc
}
)
;
DimensionsRecord
d
=
(
DimensionsRecord
)
records
.
get
(
getDimsLoc
(
)
)
;
if
(
col
.
getColumn
(
)
>
d
.
getLastCol
(
)
)
{
d
.
setLastCol
(
(
short
)
(
col
.
getColumn
(
)
+
1
)
)
;
}
if
(
col
.
getColumn
(
)
<
d
.
getFirstCol
(
)
)
{
d
.
setFirstCol
(
col
.
getColumn
(
)
)
;
}
cells
.
insertCell
(
col
)
;
}
public
void
removeValueRecord
(
int
row
,
CellValueRecordInterface
col
)
{
checkCells
(
)
;
log
.
logFormatted
(
log
.
DEBUG
,
"remove value record row,dimsloc %,%"
,
new
int
[
]
{
row
,
dimsloc
}
)
;
loc
=
dimsloc
;
cells
.
removeCell
(
col
)
;
}
public
void
replaceValueRecord
(
CellValueRecordInterface
newval
)
{
checkCells
(
)
;
setLoc
(
dimsloc
)
;
log
.
log
(
log
.
DEBUG
,
"replaceValueRecord "
)
;
cells
.
insertCell
(
newval
)
;
}
public
void
addRow
(
RowRecord
row
)
{
checkRows
(
)
;
log
.
log
(
log
.
DEBUG
,
"addRow "
)
;
DimensionsRecord
d
=
(
DimensionsRecord
)
records
.
get
(
getDimsLoc
(
)
)
;
if
(
row
.
getRowNumber
(
)
>
d
.
getLastRow
(
)
)
{
d
.
setLastRow
(
row
.
getRowNumber
(
)
+
1
)
;
}
if
(
row
.
getRowNumber
(
)
<
d
.
getFirstRow
(
)
)
{
d
.
setFirstRow
(
row
.
getRowNumber
(
)
)
;
}
RowRecord
existingRow
=
rows
.
getRow
(
row
.
getRowNumber
(
)
)
;
if
(
existingRow
!=
null
)
rows
.
removeRow
(
existingRow
)
;
rows
.
insertRow
(
row
)
;
log
.
log
(
log
.
DEBUG
,
"exit addRow"
)
;
}
public
void
removeRow
(
RowRecord
row
)
{
checkRows
(
)
;
setLoc
(
getDimsLoc
(
)
)
;
rows
.
removeRow
(
row
)
;
}
public
CellValueRecordInterface
getNextValueRecord
(
)
{
log
.
log
(
log
.
DEBUG
,
"getNextValue loc= "
+
loc
)
;
if
(
valueRecIterator
==
null
)
{
valueRecIterator
=
cells
.
getIterator
(
)
;
}
if
(
!
valueRecIterator
.
hasNext
(
)
)
{
return
null
;
}
return
(
CellValueRecordInterface
)
valueRecIterator
.
next
(
)
;
}
public
RowRecord
getNextRow
(
)
{
log
.
log
(
log
.
DEBUG
,
"getNextRow loc= "
+
loc
)
;
if
(
rowRecIterator
==
null
)
{
rowRecIterator
=
rows
.
getIterator
(
)
;
}
if
(
!
rowRecIterator
.
hasNext
(
)
)
{
return
null
;
}
return
(
RowRecord
)
rowRecIterator
.
next
(
)
;
}
public
RowRecord
getRow
(
int
rownum
)
{
log
.
log
(
log
.
DEBUG
,
"getNextRow loc= "
+
loc
)
;
return
rows
.
getRow
(
rownum
)
;
}
public
void
addDBCellRecords
(
)
{
int
offset
=
0
;
int
recnum
=
0
;
int
rownum
=
0
;
IndexRecord
index
=
null
;
IntList
rowOffsets
=
new
IntList
(
)
;
for
(
recnum
=
0
;
recnum
<
records
.
size
(
)
;
recnum
++
)
{
Record
rec
=
(
Record
)
records
.
get
(
recnum
)
;
if
(
rec
.
getSid
(
)
==
IndexRecord
.
sid
)
{
index
=
(
IndexRecord
)
rec
;
}
if
(
rec
.
getSid
(
)
!=
RowRecord
.
sid
)
{
offset
+=
rec
.
serialize
(
)
.
length
;
}
else
{
break
;
}
}
for
(
;
recnum
<
records
.
size
(
)
;
recnum
++
)
{
Record
rec
=
(
Record
)
records
.
get
(
recnum
)
;
if
(
rec
.
getSid
(
)
==
RowRecord
.
sid
)
{
rownum
++
;
rowOffsets
.
add
(
offset
)
;
if
(
(
rownum
%
32
)
==
0
)
{
for
(
int
rn
=
recnum
;
rn
<
records
.
size
(
)
;
rn
++
)
{
rec
=
(
Record
)
records
.
get
(
rn
)
;
if
(
(
!
rec
.
isInValueSection
(
)
)
||
(
rec
.
getSid
(
)
==
RowRecord
.
sid
)
)
{
records
.
add
(
rn
,
createDBCell
(
offset
,
rowOffsets
,
index
)
)
;
recnum
=
rn
;
break
;
}
}
}
else
{
}
}
if
(
!
rec
.
isInValueSection
(
)
)
{
records
.
add
(
recnum
,
createDBCell
(
offset
,
rowOffsets
,
index
)
)
;
break
;
}
offset
+=
rec
.
serialize
(
)
.
length
;
}
}
private
DBCellRecord
createDBCell
(
int
offset
,
IntList
rowoffsets
,
IndexRecord
index
)
{
DBCellRecord
rec
=
new
DBCellRecord
(
)
;
rec
.
setRowOffset
(
offset
-
rowoffsets
.
get
(
0
)
)
;
rec
.
addCellOffset
(
(
short
)
0x0
)
;
addDbCellToIndex
(
offset
,
index
)
;
return
rec
;
}
private
void
addDbCellToIndex
(
int
offset
,
IndexRecord
index
)
{
int
numdbcells
=
index
.
getNumDbcells
(
)
+
1
;
index
.
addDbcell
(
offset
+
preoffset
)
;
for
(
int
k
=
0
;
k
<
numdbcells
;
k
++
)
{
int
dbval
=
index
.
getDbcellAt
(
k
)
;
index
.
setDbcell
(
k
,
dbval
+
4
)
;
}
}
protected
Record
createBOF
(
)
{
BOFRecord
retval
=
new
BOFRecord
(
)
;
retval
.
setVersion
(
(
short
)
0x600
)
;
retval
.
setType
(
(
short
)
0x010
)
;
retval
.
setBuild
(
(
short
)
0x0dbb
)
;
retval
.
setBuildYear
(
(
short
)
1996
)
;
retval
.
setHistoryBitMask
(
0xc1
)
;
retval
.
setRequiredVersion
(
0x6
)
;
return
retval
;
}
protected
Record
createIndex
(
)
{
IndexRecord
retval
=
new
IndexRecord
(
)
;
retval
.
setFirstRow
(
0
)
;
retval
.
setLastRowAdd1
(
0
)
;
return
retval
;
}
protected
Record
createCalcMode
(
)
{
CalcModeRecord
retval
=
new
CalcModeRecord
(
)
;
retval
.
setCalcMode
(
(
short
)
1
)
;
return
retval
;
}
protected
Record
createCalcCount
(
)
{
CalcCountRecord
retval
=
new
CalcCountRecord
(
)
;
retval
.
setIterations
(
(
short
)
0x64
)
;
return
retval
;
}
protected
Record
createRefMode
(
)
{
RefModeRecord
retval
=
new
RefModeRecord
(
)
;
retval
.
setMode
(
retval
.
USE_A1_MODE
)
;
return
retval
;
}
protected
Record
createIteration
(
)
{
IterationRecord
retval
=
new
IterationRecord
(
)
;
retval
.
setIteration
(
false
)
;
return
retval
;
}
protected
Record
createDelta
(
)
{
DeltaRecord
retval
=
new
DeltaRecord
(
)
;
retval
.
setMaxChange
(
0.0010
)
;
return
retval
;
}
protected
Record
createSaveRecalc
(
)
{
SaveRecalcRecord
retval
=
new
SaveRecalcRecord
(
)
;
retval
.
setRecalc
(
true
)
;
return
retval
;
}
protected
Record
createPrintHeaders
(
)
{
PrintHeadersRecord
retval
=
new
PrintHeadersRecord
(
)
;
retval
.
setPrintHeaders
(
false
)
;
return
retval
;
}
protected
Record
createPrintGridlines
(
)
{
PrintGridlinesRecord
retval
=
new
PrintGridlinesRecord
(
)
;
retval
.
setPrintGridlines
(
false
)
;
return
retval
;
}
protected
Record
createGridset
(
)
{
GridsetRecord
retval
=
new
GridsetRecord
(
)
;
retval
.
setGridset
(
true
)
;
return
retval
;
}
protected
Record
createGuts
(
)
{
GutsRecord
retval
=
new
GutsRecord
(
)
;
retval
.
setLeftRowGutter
(
(
short
)
0
)
;
retval
.
setTopColGutter
(
(
short
)
0
)
;
retval
.
setRowLevelMax
(
(
short
)
0
)
;
retval
.
setColLevelMax
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createDefaultRowHeight
(
)
{
DefaultRowHeightRecord
retval
=
new
DefaultRowHeightRecord
(
)
;
retval
.
setOptionFlags
(
(
short
)
0
)
;
retval
.
setRowHeight
(
(
short
)
0xff
)
;
return
retval
;
}
protected
Record
createWSBool
(
)
{
WSBoolRecord
retval
=
new
WSBoolRecord
(
)
;
retval
.
setWSBool1
(
(
byte
)
0x4
)
;
retval
.
setWSBool2
(
(
byte
)
0xffffffc1
)
;
return
retval
;
}
protected
Record
createHeader
(
)
{
HeaderRecord
retval
=
new
HeaderRecord
(
)
;
retval
.
setHeaderLength
(
(
byte
)
0
)
;
retval
.
setHeader
(
null
)
;
return
retval
;
}
protected
Record
createFooter
(
)
{
FooterRecord
retval
=
new
FooterRecord
(
)
;
retval
.
setFooterLength
(
(
byte
)
0
)
;
retval
.
setFooter
(
null
)
;
return
retval
;
}
protected
Record
createHCenter
(
)
{
HCenterRecord
retval
=
new
HCenterRecord
(
)
;
retval
.
setHCenter
(
false
)
;
return
retval
;
}
protected
Record
createVCenter
(
)
{
VCenterRecord
retval
=
new
VCenterRecord
(
)
;
retval
.
setVCenter
(
false
)
;
return
retval
;
}
protected
Record
createPrintSetup
(
)
{
PrintSetupRecord
retval
=
new
PrintSetupRecord
(
)
;
retval
.
setPaperSize
(
(
short
)
1
)
;
retval
.
setScale
(
(
short
)
100
)
;
retval
.
setPageStart
(
(
short
)
1
)
;
retval
.
setFitWidth
(
(
short
)
1
)
;
retval
.
setFitHeight
(
(
short
)
1
)
;
retval
.
setOptions
(
(
short
)
2
)
;
retval
.
setHResolution
(
(
short
)
300
)
;
retval
.
setVResolution
(
(
short
)
300
)
;
retval
.
setHeaderMargin
(
0.5
)
;
retval
.
setFooterMargin
(
0.5
)
;
retval
.
setCopies
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createDefaultColWidth
(
)
{
DefaultColWidthRecord
retval
=
new
DefaultColWidthRecord
(
)
;
retval
.
setColWidth
(
(
short
)
8
)
;
return
retval
;
}
protected
Record
createColInfo
(
)
{
ColumnInfoRecord
retval
=
new
ColumnInfoRecord
(
)
;
retval
.
setColumnWidth
(
(
short
)
0x8
)
;
retval
.
setOptions
(
(
short
)
6
)
;
retval
.
setXFIndex
(
(
short
)
0x0f
)
;
return
retval
;
}
public
short
getDefaultColumnWidth
(
)
{
return
defaultcolwidth
.
getColWidth
(
)
;
}
public
boolean
isGridsPrinted
(
)
{
return
!
gridset
.
getGridset
(
)
;
}
public
void
setGridsPrinted
(
boolean
value
)
{
gridset
.
setGridset
(
!
value
)
;
}
public
void
setDefaultColumnWidth
(
short
dcw
)
{
defaultcolwidth
.
setColWidth
(
dcw
)
;
}
public
void
setDefaultRowHeight
(
short
dch
)
{
defaultrowheight
.
setRowHeight
(
dch
)
;
}
public
short
getDefaultRowHeight
(
)
{
return
defaultrowheight
.
getRowHeight
(
)
;
}
public
short
getColumnWidth
(
short
column
)
{
short
retval
=
0
;
ColumnInfoRecord
ci
=
null
;
int
k
=
0
;
if
(
columnSizes
!=
null
)
{
for
(
k
=
0
;
k
<
columnSizes
.
size
(
)
;
k
++
)
{
ci
=
(
ColumnInfoRecord
)
columnSizes
.
get
(
k
)
;
if
(
(
ci
.
getFirstColumn
(
)
<=
column
)
&&
(
column
<=
ci
.
getLastColumn
(
)
)
)
{
break
;
}
ci
=
null
;
}
}
if
(
ci
!=
null
)
{
retval
=
ci
.
getColumnWidth
(
)
;
}
else
{
retval
=
defaultcolwidth
.
getColWidth
(
)
;
}
return
retval
;
}
public
void
setColumnWidth
(
short
column
,
short
width
)
{
ColumnInfoRecord
ci
=
null
;
int
k
=
0
;
if
(
columnSizes
==
null
)
{
columnSizes
=
new
ArrayList
(
)
;
}
for
(
k
=
0
;
k
<
columnSizes
.
size
(
)
;
k
++
)
{
ci
=
(
ColumnInfoRecord
)
columnSizes
.
get
(
k
)
;
if
(
(
ci
.
getFirstColumn
(
)
<=
column
)
&&
(
column
<=
ci
.
getLastColumn
(
)
)
)
{
break
;
}
ci
=
null
;
}
if
(
ci
!=
null
)
{
if
(
ci
.
getColumnWidth
(
)
==
width
)
{
}
else
if
(
(
ci
.
getFirstColumn
(
)
==
column
)
&&
(
ci
.
getLastColumn
(
)
==
column
)
)
{
ci
.
setColumnWidth
(
width
)
;
}
else
if
(
(
ci
.
getFirstColumn
(
)
==
column
)
||
(
ci
.
getLastColumn
(
)
==
column
)
)
{
if
(
ci
.
getFirstColumn
(
)
==
column
)
{
ci
.
setFirstColumn
(
(
short
)
(
column
+
1
)
)
;
}
else
{
ci
.
setLastColumn
(
(
short
)
(
column
-
1
)
)
;
}
ColumnInfoRecord
nci
=
(
ColumnInfoRecord
)
createColInfo
(
)
;
nci
.
setFirstColumn
(
column
)
;
nci
.
setLastColumn
(
column
)
;
nci
.
setOptions
(
ci
.
getOptions
(
)
)
;
nci
.
setXFIndex
(
ci
.
getXFIndex
(
)
)
;
nci
.
setColumnWidth
(
width
)
;
columnSizes
.
add
(
k
,
nci
)
;
records
.
add
(
(
1
+
getDimsLoc
(
)
-
columnSizes
.
size
(
)
)
+
k
,
nci
)
;
dimsloc
++
;
}
else
{
short
lastcolumn
=
ci
.
getLastColumn
(
)
;
ci
.
setLastColumn
(
(
short
)
(
column
-
1
)
)
;
ColumnInfoRecord
nci
=
(
ColumnInfoRecord
)
createColInfo
(
)
;
nci
.
setFirstColumn
(
column
)
;
nci
.
setLastColumn
(
column
)
;
nci
.
setOptions
(
ci
.
getOptions
(
)
)
;
nci
.
setXFIndex
(
ci
.
getXFIndex
(
)
)
;
nci
.
setColumnWidth
(
width
)
;
columnSizes
.
add
(
k
,
nci
)
;
records
.
add
(
(
1
+
getDimsLoc
(
)
-
columnSizes
.
size
(
)
)
+
k
,
nci
)
;
dimsloc
++
;
nci
=
(
ColumnInfoRecord
)
createColInfo
(
)
;
nci
.
setFirstColumn
(
(
short
)
(
column
+
1
)
)
;
nci
.
setLastColumn
(
lastcolumn
)
;
nci
.
setOptions
(
ci
.
getOptions
(
)
)
;
nci
.
setXFIndex
(
ci
.
getXFIndex
(
)
)
;
nci
.
setColumnWidth
(
ci
.
getColumnWidth
(
)
)
;
columnSizes
.
add
(
k
,
nci
)
;
records
.
add
(
(
1
+
getDimsLoc
(
)
-
columnSizes
.
size
(
)
)
+
k
,
nci
)
;
dimsloc
++
;
}
}
else
{
ColumnInfoRecord
nci
=
(
ColumnInfoRecord
)
createColInfo
(
)
;
nci
.
setFirstColumn
(
column
)
;
nci
.
setLastColumn
(
column
)
;
nci
.
setColumnWidth
(
width
)
;
columnSizes
.
add
(
k
,
nci
)
;
records
.
add
(
(
1
+
getDimsLoc
(
)
-
columnSizes
.
size
(
)
)
+
k
,
nci
)
;
dimsloc
++
;
}
}
protected
Record
createDimensions
(
)
{
DimensionsRecord
retval
=
new
DimensionsRecord
(
)
;
retval
.
setFirstCol
(
(
short
)
0
)
;
retval
.
setLastRow
(
1
)
;
retval
.
setFirstRow
(
0
)
;
retval
.
setLastCol
(
(
short
)
1
)
;
return
retval
;
}
protected
WindowTwoRecord
createWindowTwo
(
)
{
WindowTwoRecord
retval
=
new
WindowTwoRecord
(
)
;
retval
.
setOptions
(
(
short
)
0x6b6
)
;
retval
.
setTopRow
(
(
short
)
0
)
;
retval
.
setLeftCol
(
(
short
)
0
)
;
retval
.
setHeaderColor
(
0x40
)
;
retval
.
setPageBreakZoom
(
(
short
)
0
)
;
retval
.
setNormalZoom
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createSelection
(
)
{
SelectionRecord
retval
=
new
SelectionRecord
(
)
;
retval
.
setPane
(
(
byte
)
0x3
)
;
retval
.
setActiveCellCol
(
(
short
)
0x0
)
;
retval
.
setActiveCellRow
(
(
short
)
0x0
)
;
retval
.
setNumRefs
(
(
short
)
0x0
)
;
return
retval
;
}
public
int
getActiveCellRow
(
)
{
if
(
selection
==
null
)
{
return
0
;
}
return
selection
.
getActiveCellRow
(
)
;
}
public
void
setActiveCellRow
(
int
row
)
{
if
(
selection
!=
null
)
{
selection
.
setActiveCellRow
(
row
)
;
}
}
public
short
getActiveCellCol
(
)
{
if
(
selection
==
null
)
{
return
(
short
)
0
;
}
return
selection
.
getActiveCellCol
(
)
;
}
public
void
setActiveCellCol
(
short
col
)
{
if
(
selection
!=
null
)
{
selection
.
setActiveCellCol
(
col
)
;
}
}
protected
Record
createMergedCells
(
)
{
MergeCellsRecord
retval
=
new
MergeCellsRecord
(
)
;
retval
.
setNumAreas
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createEOF
(
)
{
return
new
EOFRecord
(
)
;
}
public
int
getDimsLoc
(
)
{
log
.
log
(
log
.
DEBUG
,
"getDimsLoc dimsloc= "
+
dimsloc
)
;
return
dimsloc
;
}
public
void
checkDimsLoc
(
Record
rec
,
int
recloc
)
{
if
(
rec
.
getSid
(
)
==
DimensionsRecord
.
sid
)
{
loc
=
recloc
;
dimsloc
=
recloc
;
}
}
public
int
getSize
(
)
{
int
retval
=
0
;
for
(
int
k
=
0
;
k
<
records
.
size
(
)
;
k
++
)
{
retval
+=
(
(
Record
)
records
.
get
(
k
)
)
.
getRecordSize
(
)
;
}
return
retval
;
}
public
List
getRecords
(
)
{
return
records
;
}
public
GridsetRecord
getGridsetRecord
(
)
{
return
gridset
;
}
public
Record
findFirstRecordBySid
(
short
sid
)
{
for
(
Iterator
iterator
=
records
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Record
record
=
(
Record
)
iterator
.
next
(
)
;
if
(
record
.
getSid
(
)
==
sid
)
{
return
record
;
}
}
return
null
;
}
public
void
setSCLRecord
(
SCLRecord
sclRecord
)
{
int
oldRecordLoc
=
findFirstRecordLocBySid
(
SCLRecord
.
sid
)
;
if
(
oldRecordLoc
==
-
1
)
{
int
windowRecordLoc
=
findFirstRecordLocBySid
(
WindowTwoRecord
.
sid
)
;
records
.
add
(
windowRecordLoc
+
1
,
sclRecord
)
;
}
else
{
records
.
set
(
oldRecordLoc
,
sclRecord
)
;
}
}
public
int
findFirstRecordLocBySid
(
short
sid
)
{
int
index
=
0
;
for
(
Iterator
iterator
=
records
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Record
record
=
(
Record
)
iterator
.
next
(
)
;
if
(
record
.
getSid
(
)
==
sid
)
{
return
index
;
}
index
++
;
}
return
-
1
;
}
public
HeaderRecord
getHeader
(
)
{
return
header
;
}
public
void
setHeader
(
HeaderRecord
newHeader
)
{
header
=
newHeader
;
}
public
FooterRecord
getFooter
(
)
{
return
footer
;
}
public
void
setFooter
(
FooterRecord
newFooter
)
{
footer
=
newFooter
;
}
public
PrintSetupRecord
getPrintSetup
(
)
{
return
printSetup
;
}
public
void
setPrintSetup
(
PrintSetupRecord
newPrintSetup
)
{
printSetup
=
newPrintSetup
;
}
public
PrintGridlinesRecord
getPrintGridlines
(
)
{
return
printGridlines
;
}
public
void
setPrintGridlines
(
PrintGridlinesRecord
newPrintGridlines
)
{
printGridlines
=
newPrintGridlines
;
}
public
void
setSelected
(
boolean
sel
)
{
windowTwo
.
setSelected
(
sel
)
;
}
public
double
getMargin
(
short
margin
)
{
if
(
getMargins
(
)
[
margin
]
!=
null
)
return
margins
[
margin
]
.
getMargin
(
)
;
else
{
switch
(
margin
)
{
case
LeftMargin
:
return
.75
;
case
RightMargin
:
return
.75
;
case
TopMargin
:
return
1.0
;
case
BottomMargin
:
return
1.0
;
default
:
throw
new
RuntimeException
(
"Unknown margin constant:  "
+
margin
)
;
}
}
}
public
void
setMargin
(
short
margin
,
double
size
)
{
Margin
m
=
getMargins
(
)
[
margin
]
;
if
(
m
==
null
)
{
switch
(
margin
)
{
case
LeftMargin
:
m
=
new
LeftMarginRecord
(
)
;
records
.
add
(
getDimsLoc
(
)
+
1
,
m
)
;
break
;
case
RightMargin
:
m
=
new
RightMarginRecord
(
)
;
records
.
add
(
getDimsLoc
(
)
+
1
,
m
)
;
break
;
case
TopMargin
:
m
=
new
TopMarginRecord
(
)
;
records
.
add
(
getDimsLoc
(
)
+
1
,
m
)
;
break
;
case
BottomMargin
:
m
=
new
BottomMarginRecord
(
)
;
records
.
add
(
getDimsLoc
(
)
+
1
,
m
)
;
break
;
default
:
throw
new
RuntimeException
(
"Unknown margin constant:  "
+
margin
)
;
}
margins
[
margin
]
=
m
;
}
m
.
setMargin
(
size
)
;
}
public
int
getEofLoc
(
)
{
return
eofLoc
;
}
public
void
createFreezePane
(
int
colSplit
,
int
rowSplit
,
int
topRow
,
int
leftmostColumn
)
{
int
loc
=
findFirstRecordLocBySid
(
WindowTwoRecord
.
sid
)
;
PaneRecord
pane
=
new
PaneRecord
(
)
;
pane
.
setX
(
(
short
)
colSplit
)
;
pane
.
setY
(
(
short
)
rowSplit
)
;
pane
.
setTopRow
(
(
short
)
topRow
)
;
pane
.
setLeftColumn
(
(
short
)
leftmostColumn
)
;
if
(
rowSplit
==
0
)
{
pane
.
setTopRow
(
(
short
)
0
)
;
pane
.
setActivePane
(
(
short
)
1
)
;
}
else
if
(
colSplit
==
0
)
{
pane
.
setLeftColumn
(
(
short
)
64
)
;
pane
.
setActivePane
(
(
short
)
2
)
;
}
else
{
pane
.
setActivePane
(
(
short
)
0
)
;
}
records
.
add
(
loc
+
1
,
pane
)
;
windowTwo
.
setFreezePanes
(
true
)
;
windowTwo
.
setFreezePanesNoSplit
(
true
)
;
SelectionRecord
sel
=
(
SelectionRecord
)
findFirstRecordBySid
(
SelectionRecord
.
sid
)
;
sel
.
setPane
(
(
byte
)
pane
.
getActivePane
(
)
)
;
int
selLoc
=
findFirstRecordLocBySid
(
SelectionRecord
.
sid
)
;
}
public
void
createSplitPane
(
int
xSplitPos
,
int
ySplitPos
,
int
topRow
,
int
leftmostColumn
,
int
activePane
)
{
int
loc
=
findFirstRecordLocBySid
(
WindowTwoRecord
.
sid
)
;
PaneRecord
r
=
new
PaneRecord
(
)
;
r
.
setX
(
(
short
)
xSplitPos
)
;
r
.
setY
(
(
short
)
ySplitPos
)
;
r
.
setTopRow
(
(
short
)
topRow
)
;
r
.
setLeftColumn
(
(
short
)
leftmostColumn
)
;
r
.
setActivePane
(
(
short
)
activePane
)
;
records
.
add
(
loc
+
1
,
r
)
;
windowTwo
.
setFreezePanes
(
false
)
;
windowTwo
.
setFreezePanesNoSplit
(
false
)
;
SelectionRecord
sel
=
(
SelectionRecord
)
findFirstRecordBySid
(
SelectionRecord
.
sid
)
;
sel
.
setPane
(
PANE_LOWER_RIGHT
)
;
int
selLoc
=
findFirstRecordLocBySid
(
SelectionRecord
.
sid
)
;
}
public
SelectionRecord
getSelection
(
)
{
return
selection
;
}
public
void
setSelection
(
SelectionRecord
selection
)
{
this
.
selection
=
selection
;
}
protected
Record
createProtect
(
)
{
log
.
log
(
log
.
DEBUG
,
"create protect record with protection disabled"
)
;
ProtectRecord
retval
=
new
ProtectRecord
(
)
;
retval
.
setProtect
(
false
)
;
return
retval
;
}
public
ProtectRecord
getProtect
(
)
{
return
protect
;
}
public
void
setDisplayGridlines
(
boolean
show
)
{
windowTwo
.
setDisplayGridlines
(
show
)
;
}
public
boolean
isDisplayGridlines
(
)
{
return
windowTwo
.
getDisplayGridlines
(
)
;
}
public
void
setDisplayFormulas
(
boolean
show
)
{
windowTwo
.
setDisplayFormulas
(
show
)
;
}
public
boolean
isDisplayFormulas
(
)
{
return
windowTwo
.
getDisplayFormulas
(
)
;
}
public
void
setDisplayRowColHeadings
(
boolean
show
)
{
windowTwo
.
setDisplayRowColHeadings
(
show
)
;
}
public
boolean
isDisplayRowColHeadings
(
)
{
return
windowTwo
.
getDisplayRowColHeadings
(
)
;
}
protected
Margin
[
]
getMargins
(
)
{
if
(
margins
==
null
)
margins
=
new
Margin
[
4
]
;
return
margins
;
}
}
