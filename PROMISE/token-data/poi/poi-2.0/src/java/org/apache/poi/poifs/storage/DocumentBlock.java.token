package
org
.
apache
.
poi
.
poifs
.
storage
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
util
.
Arrays
;
import
org
.
apache
.
poi
.
poifs
.
common
.
POIFSConstants
;
import
org
.
apache
.
poi
.
util
.
IOUtils
;
import
org
.
apache
.
poi
.
util
.
IntegerField
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
util
.
LittleEndianConsts
;
public
class
DocumentBlock
extends
BigBlock
{
private
static
final
byte
_default_value
=
(
byte
)
0xFF
;
private
byte
[
]
_data
;
private
int
_bytes_read
;
public
DocumentBlock
(
final
RawDataBlock
block
)
throws
IOException
{
_data
=
block
.
getData
(
)
;
_bytes_read
=
_data
.
length
;
}
public
DocumentBlock
(
final
InputStream
stream
)
throws
IOException
{
this
(
)
;
int
count
=
IOUtils
.
readFully
(
stream
,
_data
)
;
_bytes_read
=
(
count
==
-
1
)
?
0
:
count
;
}
private
DocumentBlock
(
)
{
_data
=
new
byte
[
POIFSConstants
.
BIG_BLOCK_SIZE
]
;
Arrays
.
fill
(
_data
,
_default_value
)
;
}
public
int
size
(
)
{
return
_bytes_read
;
}
public
boolean
partiallyRead
(
)
{
return
_bytes_read
!=
POIFSConstants
.
BIG_BLOCK_SIZE
;
}
public
static
byte
getFillByte
(
)
{
return
_default_value
;
}
public
static
DocumentBlock
[
]
convert
(
final
byte
[
]
array
,
final
int
size
)
{
DocumentBlock
[
]
rval
=
new
DocumentBlock
[
(
size
+
POIFSConstants
.
BIG_BLOCK_SIZE
-
1
)
/
POIFSConstants
.
BIG_BLOCK_SIZE
]
;
int
offset
=
0
;
for
(
int
k
=
0
;
k
<
rval
.
length
;
k
++
)
{
rval
[
k
]
=
new
DocumentBlock
(
)
;
if
(
offset
<
array
.
length
)
{
int
length
=
Math
.
min
(
POIFSConstants
.
BIG_BLOCK_SIZE
,
array
.
length
-
offset
)
;
System
.
arraycopy
(
array
,
offset
,
rval
[
k
]
.
_data
,
0
,
length
)
;
if
(
length
!=
POIFSConstants
.
BIG_BLOCK_SIZE
)
{
Arrays
.
fill
(
rval
[
k
]
.
_data
,
length
,
POIFSConstants
.
BIG_BLOCK_SIZE
,
_default_value
)
;
}
}
else
{
Arrays
.
fill
(
rval
[
k
]
.
_data
,
_default_value
)
;
}
offset
+=
POIFSConstants
.
BIG_BLOCK_SIZE
;
}
return
rval
;
}
public
static
void
read
(
final
DocumentBlock
[
]
blocks
,
final
byte
[
]
buffer
,
final
int
offset
)
{
int
firstBlockIndex
=
offset
/
POIFSConstants
.
BIG_BLOCK_SIZE
;
int
firstBlockOffset
=
offset
%
POIFSConstants
.
BIG_BLOCK_SIZE
;
int
lastBlockIndex
=
(
offset
+
buffer
.
length
-
1
)
/
POIFSConstants
.
BIG_BLOCK_SIZE
;
if
(
firstBlockIndex
==
lastBlockIndex
)
{
System
.
arraycopy
(
blocks
[
firstBlockIndex
]
.
_data
,
firstBlockOffset
,
buffer
,
0
,
buffer
.
length
)
;
}
else
{
int
buffer_offset
=
0
;
System
.
arraycopy
(
blocks
[
firstBlockIndex
]
.
_data
,
firstBlockOffset
,
buffer
,
buffer_offset
,
POIFSConstants
.
BIG_BLOCK_SIZE
-
firstBlockOffset
)
;
buffer_offset
+=
POIFSConstants
.
BIG_BLOCK_SIZE
-
firstBlockOffset
;
for
(
int
j
=
firstBlockIndex
+
1
;
j
<
lastBlockIndex
;
j
++
)
{
System
.
arraycopy
(
blocks
[
j
]
.
_data
,
0
,
buffer
,
buffer_offset
,
POIFSConstants
.
BIG_BLOCK_SIZE
)
;
buffer_offset
+=
POIFSConstants
.
BIG_BLOCK_SIZE
;
}
System
.
arraycopy
(
blocks
[
lastBlockIndex
]
.
_data
,
0
,
buffer
,
buffer_offset
,
buffer
.
length
-
buffer_offset
)
;
}
}
void
writeData
(
final
OutputStream
stream
)
throws
IOException
{
doWriteData
(
stream
,
_data
)
;
}
}
