package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
DBCellRecord
extends
Record
{
public
final
static
short
sid
=
0xd7
;
private
int
field_1_row_offset
;
private
short
[
]
field_2_cell_offsets
;
public
DBCellRecord
(
)
{
}
public
DBCellRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
DBCellRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A valid DBCell RECORD"
)
;
}
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_row_offset
=
LittleEndian
.
getUShort
(
data
,
0
+
offset
)
;
field_2_cell_offsets
=
new
short
[
(
size
-
4
)
/
2
]
;
int
element
=
0
;
for
(
int
k
=
4
;
k
<
data
.
length
;
k
+=
2
)
{
field_2_cell_offsets
[
element
++
]
=
LittleEndian
.
getShort
(
data
,
k
+
offset
)
;
}
}
public
void
setRowOffset
(
int
offset
)
{
field_1_row_offset
=
offset
;
}
public
void
addCellOffset
(
short
offset
)
{
if
(
field_2_cell_offsets
==
null
)
{
field_2_cell_offsets
=
new
short
[
1
]
;
}
else
{
short
[
]
temp
=
new
short
[
field_2_cell_offsets
.
length
+
1
]
;
System
.
arraycopy
(
field_2_cell_offsets
,
0
,
temp
,
0
,
field_2_cell_offsets
.
length
)
;
field_2_cell_offsets
=
temp
;
}
field_2_cell_offsets
[
field_2_cell_offsets
.
length
-
1
]
=
offset
;
}
public
int
getRowOffset
(
)
{
return
field_1_row_offset
;
}
public
short
getCellOffsetAt
(
int
index
)
{
return
field_2_cell_offsets
[
index
]
;
}
public
int
getNumCellOffsets
(
)
{
return
field_2_cell_offsets
.
length
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[DBCELL]\n"
)
;
buffer
.
append
(
"    .rowoffset       = "
)
.
append
(
Integer
.
toHexString
(
getRowOffset
(
)
)
)
.
append
(
"\n"
)
;
for
(
int
k
=
0
;
k
<
getNumCellOffsets
(
)
;
k
++
)
{
buffer
.
append
(
"    .cell_"
+
k
+
"          = "
)
.
append
(
Integer
.
toHexString
(
getCellOffsetAt
(
k
)
)
)
.
append
(
"\n"
)
;
}
buffer
.
append
(
"[/DBCELL]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
if
(
field_2_cell_offsets
==
null
)
{
field_2_cell_offsets
=
new
short
[
0
]
;
}
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
(
short
)
(
4
+
(
getNumCellOffsets
(
)
*
2
)
)
)
)
;
LittleEndian
.
putInt
(
data
,
4
+
offset
,
getRowOffset
(
)
)
;
for
(
int
k
=
0
;
k
<
getNumCellOffsets
(
)
;
k
++
)
{
LittleEndian
.
putShort
(
data
,
8
+
k
+
offset
,
getCellOffsetAt
(
k
)
)
;
}
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
8
+
(
getNumCellOffsets
(
)
*
2
)
;
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
boolean
isInValueSection
(
)
{
return
true
;
}
}
