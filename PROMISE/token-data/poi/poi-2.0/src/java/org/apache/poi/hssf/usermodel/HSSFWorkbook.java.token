package
org
.
apache
.
poi
.
hssf
.
usermodel
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Stack
;
import
org
.
apache
.
poi
.
hssf
.
eventmodel
.
EventRecordFactory
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Sheet
;
import
org
.
apache
.
poi
.
hssf
.
model
.
Workbook
;
import
org
.
apache
.
poi
.
hssf
.
record
.
BackupRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
ExtendedFormatRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
FontRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
NameRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
RecordFactory
;
import
org
.
apache
.
poi
.
hssf
.
record
.
SSTRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
UnknownRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
WindowTwoRecord
;
import
org
.
apache
.
poi
.
hssf
.
record
.
formula
.
Area3DPtg
;
import
org
.
apache
.
poi
.
hssf
.
record
.
formula
.
MemFuncPtg
;
import
org
.
apache
.
poi
.
hssf
.
record
.
formula
.
UnionPtg
;
import
org
.
apache
.
poi
.
hssf
.
util
.
CellReference
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
DirectoryEntry
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
DocumentEntry
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
DocumentInputStream
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
Entry
;
import
org
.
apache
.
poi
.
poifs
.
filesystem
.
POIFSFileSystem
;
import
org
.
apache
.
poi
.
util
.
POILogFactory
;
import
org
.
apache
.
poi
.
util
.
POILogger
;
public
class
HSSFWorkbook
extends
java
.
lang
.
Object
{
private
static
final
int
DEBUG
=
POILogger
.
DEBUG
;
public
final
static
int
INITIAL_CAPACITY
=
3
;
private
Workbook
workbook
;
private
ArrayList
sheets
;
private
ArrayList
names
;
private
boolean
preserveNodes
;
private
POIFSFileSystem
poifs
;
private
HSSFDataFormat
formatter
;
private
static
POILogger
log
=
POILogFactory
.
getLogger
(
HSSFWorkbook
.
class
)
;
public
HSSFWorkbook
(
)
{
workbook
=
Workbook
.
createWorkbook
(
)
;
sheets
=
new
ArrayList
(
INITIAL_CAPACITY
)
;
names
=
new
ArrayList
(
INITIAL_CAPACITY
)
;
}
public
HSSFWorkbook
(
POIFSFileSystem
fs
)
throws
IOException
{
this
(
fs
,
true
)
;
}
public
HSSFWorkbook
(
POIFSFileSystem
fs
,
boolean
preserveNodes
)
throws
IOException
{
this
.
preserveNodes
=
preserveNodes
;
if
(
preserveNodes
)
{
this
.
poifs
=
fs
;
}
sheets
=
new
ArrayList
(
INITIAL_CAPACITY
)
;
names
=
new
ArrayList
(
INITIAL_CAPACITY
)
;
InputStream
stream
=
fs
.
createDocumentInputStream
(
"Workbook"
)
;
EventRecordFactory
factory
=
new
EventRecordFactory
(
)
;
List
records
=
RecordFactory
.
createRecords
(
stream
)
;
workbook
=
Workbook
.
createWorkbook
(
records
)
;
setPropertiesFromWorkbook
(
workbook
)
;
int
recOffset
=
workbook
.
getNumRecords
(
)
;
int
sheetNum
=
0
;
while
(
recOffset
<
records
.
size
(
)
)
{
Sheet
sheet
=
Sheet
.
createSheet
(
records
,
sheetNum
++
,
recOffset
)
;
recOffset
=
sheet
.
getEofLoc
(
)
+
1
;
sheet
.
convertLabelRecords
(
workbook
)
;
HSSFSheet
hsheet
=
new
HSSFSheet
(
workbook
,
sheet
)
;
sheets
.
add
(
hsheet
)
;
}
for
(
int
i
=
0
;
i
<
workbook
.
getNumNames
(
)
;
++
i
)
{
HSSFName
name
=
new
HSSFName
(
workbook
,
workbook
.
getNameRecord
(
i
)
)
;
names
.
add
(
name
)
;
}
}
public
HSSFWorkbook
(
InputStream
s
)
throws
IOException
{
this
(
s
,
true
)
;
}
public
HSSFWorkbook
(
InputStream
s
,
boolean
preserveNodes
)
throws
IOException
{
this
(
new
POIFSFileSystem
(
s
)
,
preserveNodes
)
;
}
private
void
setPropertiesFromWorkbook
(
Workbook
book
)
{
this
.
workbook
=
book
;
}
public
void
setSheetOrder
(
String
sheetname
,
int
pos
)
{
workbook
.
setSheetOrder
(
sheetname
,
pos
)
;
}
public
final
static
byte
ENCODING_COMPRESSED_UNICODE
=
0
;
public
final
static
byte
ENCODING_UTF_16
=
1
;
public
void
setSheetName
(
int
sheet
,
String
name
)
{
workbook
.
setSheetName
(
sheet
,
name
,
ENCODING_COMPRESSED_UNICODE
)
;
}
public
void
setSheetName
(
int
sheet
,
String
name
,
short
encoding
)
{
if
(
sheet
>
(
sheets
.
size
(
)
-
1
)
)
{
throw
new
RuntimeException
(
"Sheet out of bounds"
)
;
}
switch
(
encoding
)
{
case
ENCODING_COMPRESSED_UNICODE
:
case
ENCODING_UTF_16
:
break
;
default
:
throw
new
RuntimeException
(
"Unsupported encoding"
)
;
}
workbook
.
setSheetName
(
sheet
,
name
,
encoding
)
;
}
public
String
getSheetName
(
int
sheet
)
{
if
(
sheet
>
(
sheets
.
size
(
)
-
1
)
)
{
throw
new
RuntimeException
(
"Sheet out of bounds"
)
;
}
return
workbook
.
getSheetName
(
sheet
)
;
}
public
int
getSheetIndex
(
String
name
)
{
int
retval
=
workbook
.
getSheetIndex
(
name
)
;
return
retval
;
}
public
HSSFSheet
createSheet
(
)
{
HSSFSheet
sheet
=
new
HSSFSheet
(
workbook
)
;
sheets
.
add
(
sheet
)
;
workbook
.
setSheetName
(
sheets
.
size
(
)
-
1
,
"Sheet"
+
(
sheets
.
size
(
)
-
1
)
)
;
WindowTwoRecord
windowTwo
=
(
WindowTwoRecord
)
sheet
.
getSheet
(
)
.
findFirstRecordBySid
(
WindowTwoRecord
.
sid
)
;
windowTwo
.
setSelected
(
sheets
.
size
(
)
==
1
)
;
windowTwo
.
setPaged
(
sheets
.
size
(
)
==
1
)
;
return
sheet
;
}
public
HSSFSheet
cloneSheet
(
int
sheetNum
)
{
HSSFSheet
srcSheet
=
(
HSSFSheet
)
sheets
.
get
(
sheetNum
)
;
String
srcName
=
workbook
.
getSheetName
(
sheetNum
)
;
if
(
srcSheet
!=
null
)
{
HSSFSheet
clonedSheet
=
srcSheet
.
cloneSheet
(
workbook
)
;
WindowTwoRecord
windowTwo
=
(
WindowTwoRecord
)
clonedSheet
.
getSheet
(
)
.
findFirstRecordBySid
(
WindowTwoRecord
.
sid
)
;
windowTwo
.
setSelected
(
sheets
.
size
(
)
==
1
)
;
windowTwo
.
setPaged
(
sheets
.
size
(
)
==
1
)
;
sheets
.
add
(
clonedSheet
)
;
if
(
srcName
.
length
(
)
<
28
)
{
workbook
.
setSheetName
(
sheets
.
size
(
)
-
1
,
srcName
+
"(2)"
)
;
}
else
{
workbook
.
setSheetName
(
sheets
.
size
(
)
-
1
,
srcName
.
substring
(
0
,
28
)
+
"(2)"
)
;
}
return
clonedSheet
;
}
return
null
;
}
public
HSSFSheet
createSheet
(
String
sheetname
)
{
HSSFSheet
sheet
=
new
HSSFSheet
(
workbook
)
;
sheets
.
add
(
sheet
)
;
workbook
.
setSheetName
(
sheets
.
size
(
)
-
1
,
sheetname
)
;
WindowTwoRecord
windowTwo
=
(
WindowTwoRecord
)
sheet
.
getSheet
(
)
.
findFirstRecordBySid
(
WindowTwoRecord
.
sid
)
;
windowTwo
.
setSelected
(
sheets
.
size
(
)
==
1
)
;
windowTwo
.
setPaged
(
sheets
.
size
(
)
==
1
)
;
return
sheet
;
}
public
int
getNumberOfSheets
(
)
{
return
sheets
.
size
(
)
;
}
public
HSSFSheet
getSheetAt
(
int
index
)
{
return
(
HSSFSheet
)
sheets
.
get
(
index
)
;
}
public
HSSFSheet
getSheet
(
String
name
)
{
HSSFSheet
retval
=
null
;
for
(
int
k
=
0
;
k
<
sheets
.
size
(
)
;
k
++
)
{
String
sheetname
=
workbook
.
getSheetName
(
k
)
;
if
(
sheetname
.
equals
(
name
)
)
{
retval
=
(
HSSFSheet
)
sheets
.
get
(
k
)
;
}
}
return
retval
;
}
public
void
removeSheetAt
(
int
index
)
{
sheets
.
remove
(
index
)
;
workbook
.
removeSheet
(
index
)
;
}
public
void
setBackupFlag
(
boolean
backupValue
)
{
BackupRecord
backupRecord
=
workbook
.
getBackupRecord
(
)
;
backupRecord
.
setBackup
(
backupValue
?
(
short
)
1
:
(
short
)
0
)
;
}
public
boolean
getBackupFlag
(
)
{
BackupRecord
backupRecord
=
workbook
.
getBackupRecord
(
)
;
return
(
backupRecord
.
getBackup
(
)
==
0
)
?
false
:
true
;
}
public
void
setRepeatingRowsAndColumns
(
int
sheetIndex
,
int
startColumn
,
int
endColumn
,
int
startRow
,
int
endRow
)
{
if
(
startColumn
==
-
1
&&
endColumn
!=
-
1
)
throw
new
IllegalArgumentException
(
"Invalid column range specification"
)
;
if
(
startRow
==
-
1
&&
endRow
!=
-
1
)
throw
new
IllegalArgumentException
(
"Invalid row range specification"
)
;
if
(
startColumn
<
-
1
||
startColumn
>=
0xFF
)
throw
new
IllegalArgumentException
(
"Invalid column range specification"
)
;
if
(
endColumn
<
-
1
||
endColumn
>=
0xFF
)
throw
new
IllegalArgumentException
(
"Invalid column range specification"
)
;
if
(
startRow
<
-
1
||
startRow
>
65535
)
throw
new
IllegalArgumentException
(
"Invalid row range specification"
)
;
if
(
endRow
<
-
1
||
endRow
>
65535
)
throw
new
IllegalArgumentException
(
"Invalid row range specification"
)
;
if
(
startColumn
>
endColumn
)
throw
new
IllegalArgumentException
(
"Invalid column range specification"
)
;
if
(
startRow
>
endRow
)
throw
new
IllegalArgumentException
(
"Invalid row range specification"
)
;
HSSFSheet
sheet
=
getSheetAt
(
sheetIndex
)
;
short
externSheetIndex
=
getWorkbook
(
)
.
checkExternSheet
(
sheetIndex
)
;
boolean
settingRowAndColumn
=
startColumn
!=
-
1
&&
endColumn
!=
-
1
&&
startRow
!=
-
1
&&
endRow
!=
-
1
;
boolean
removingRange
=
startColumn
==
-
1
&&
endColumn
==
-
1
&&
startRow
==
-
1
&&
endRow
==
-
1
;
boolean
isNewRecord
=
false
;
NameRecord
nameRecord
;
nameRecord
=
findExistingRowColHeaderNameRecord
(
sheetIndex
)
;
if
(
removingRange
)
{
if
(
nameRecord
!=
null
)
workbook
.
removeName
(
findExistingRowColHeaderNameRecordIdx
(
sheetIndex
)
)
;
return
;
}
if
(
nameRecord
==
null
)
{
nameRecord
=
workbook
.
createBuiltInName
(
NameRecord
.
BUILTIN_PRINT_TITLE
,
externSheetIndex
+
1
)
;
isNewRecord
=
true
;
}
short
definitionTextLength
=
settingRowAndColumn
?
(
short
)
0x001a
:
(
short
)
0x000b
;
nameRecord
.
setDefinitionTextLength
(
definitionTextLength
)
;
Stack
ptgs
=
new
Stack
(
)
;
if
(
settingRowAndColumn
)
{
MemFuncPtg
memFuncPtg
=
new
MemFuncPtg
(
)
;
memFuncPtg
.
setLenRefSubexpression
(
23
)
;
ptgs
.
add
(
memFuncPtg
)
;
}
if
(
startColumn
>=
0
)
{
Area3DPtg
area3DPtg1
=
new
Area3DPtg
(
)
;
area3DPtg1
.
setExternSheetIndex
(
externSheetIndex
)
;
area3DPtg1
.
setFirstColumn
(
(
short
)
startColumn
)
;
area3DPtg1
.
setLastColumn
(
(
short
)
endColumn
)
;
area3DPtg1
.
setFirstRow
(
(
short
)
0
)
;
area3DPtg1
.
setLastRow
(
(
short
)
0xFFFF
)
;
ptgs
.
add
(
area3DPtg1
)
;
}
if
(
startRow
>=
0
)
{
Area3DPtg
area3DPtg2
=
new
Area3DPtg
(
)
;
area3DPtg2
.
setExternSheetIndex
(
externSheetIndex
)
;
area3DPtg2
.
setFirstColumn
(
(
short
)
0
)
;
area3DPtg2
.
setLastColumn
(
(
short
)
0x00FF
)
;
area3DPtg2
.
setFirstRow
(
(
short
)
startRow
)
;
area3DPtg2
.
setLastRow
(
(
short
)
endRow
)
;
ptgs
.
add
(
area3DPtg2
)
;
}
if
(
settingRowAndColumn
)
{
UnionPtg
unionPtg
=
new
UnionPtg
(
)
;
ptgs
.
add
(
unionPtg
)
;
}
nameRecord
.
setNameDefinition
(
ptgs
)
;
if
(
isNewRecord
)
{
HSSFName
newName
=
new
HSSFName
(
workbook
,
nameRecord
)
;
names
.
add
(
newName
)
;
}
HSSFPrintSetup
printSetup
=
sheet
.
getPrintSetup
(
)
;
printSetup
.
setValidSettings
(
false
)
;
WindowTwoRecord
w2
=
(
WindowTwoRecord
)
sheet
.
getSheet
(
)
.
findFirstRecordBySid
(
WindowTwoRecord
.
sid
)
;
w2
.
setPaged
(
true
)
;
}
private
NameRecord
findExistingRowColHeaderNameRecord
(
int
sheetIndex
)
{
int
index
=
findExistingRowColHeaderNameRecordIdx
(
sheetIndex
)
;
if
(
index
==
-
1
)
return
null
;
else
return
(
NameRecord
)
workbook
.
findNextRecordBySid
(
NameRecord
.
sid
,
index
)
;
}
private
int
findExistingRowColHeaderNameRecordIdx
(
int
sheetIndex
)
{
int
index
=
0
;
NameRecord
r
=
null
;
while
(
(
r
=
(
NameRecord
)
workbook
.
findNextRecordBySid
(
NameRecord
.
sid
,
index
)
)
!=
null
)
{
int
nameRecordSheetIndex
=
workbook
.
getSheetIndexFromExternSheetIndex
(
r
.
getEqualsToIndexToSheet
(
)
-
1
)
;
if
(
isRowColHeaderRecord
(
r
)
&&
nameRecordSheetIndex
==
sheetIndex
)
{
return
index
;
}
index
++
;
}
return
-
1
;
}
private
boolean
isRowColHeaderRecord
(
NameRecord
r
)
{
return
r
.
getOptionFlag
(
)
==
0x20
&&
(
""
+
(
(
char
)
7
)
)
.
equals
(
r
.
getNameText
(
)
)
;
}
public
HSSFFont
createFont
(
)
{
FontRecord
font
=
workbook
.
createNewFont
(
)
;
short
fontindex
=
(
short
)
(
getNumberOfFonts
(
)
-
1
)
;
if
(
fontindex
>
3
)
{
fontindex
++
;
}
HSSFFont
retval
=
new
HSSFFont
(
fontindex
,
font
)
;
return
retval
;
}
public
short
getNumberOfFonts
(
)
{
return
(
short
)
workbook
.
getNumberOfFontRecords
(
)
;
}
public
HSSFFont
getFontAt
(
short
idx
)
{
FontRecord
font
=
workbook
.
getFontRecordAt
(
idx
)
;
HSSFFont
retval
=
new
HSSFFont
(
idx
,
font
)
;
return
retval
;
}
public
HSSFCellStyle
createCellStyle
(
)
{
ExtendedFormatRecord
xfr
=
workbook
.
createCellXF
(
)
;
short
index
=
(
short
)
(
getNumCellStyles
(
)
-
1
)
;
HSSFCellStyle
style
=
new
HSSFCellStyle
(
index
,
xfr
)
;
return
style
;
}
public
short
getNumCellStyles
(
)
{
return
(
short
)
workbook
.
getNumExFormats
(
)
;
}
public
HSSFCellStyle
getCellStyleAt
(
short
idx
)
{
ExtendedFormatRecord
xfr
=
workbook
.
getExFormatAt
(
idx
)
;
HSSFCellStyle
style
=
new
HSSFCellStyle
(
idx
,
xfr
)
;
return
style
;
}
public
void
write
(
OutputStream
stream
)
throws
IOException
{
byte
[
]
bytes
=
getBytes
(
)
;
POIFSFileSystem
fs
=
new
POIFSFileSystem
(
)
;
fs
.
createDocument
(
new
ByteArrayInputStream
(
bytes
)
,
"Workbook"
)
;
if
(
preserveNodes
)
{
List
excepts
=
new
ArrayList
(
1
)
;
excepts
.
add
(
"Workbook"
)
;
copyNodes
(
this
.
poifs
,
fs
,
excepts
)
;
}
fs
.
writeFilesystem
(
stream
)
;
}
public
byte
[
]
getBytes
(
)
{
log
.
log
(
DEBUG
,
"HSSFWorkbook.getBytes()"
)
;
int
wbsize
=
workbook
.
getSize
(
)
;
int
totalsize
=
wbsize
;
for
(
int
k
=
0
;
k
<
sheets
.
size
(
)
;
k
++
)
{
workbook
.
setSheetBof
(
k
,
totalsize
)
;
totalsize
+=
(
(
HSSFSheet
)
sheets
.
get
(
k
)
)
.
getSheet
(
)
.
getSize
(
)
;
}
byte
[
]
retval
=
new
byte
[
totalsize
]
;
int
pos
=
workbook
.
serialize
(
0
,
retval
)
;
for
(
int
k
=
0
;
k
<
sheets
.
size
(
)
;
k
++
)
{
pos
+=
(
(
HSSFSheet
)
sheets
.
get
(
k
)
)
.
getSheet
(
)
.
serialize
(
pos
,
retval
)
;
}
return
retval
;
}
public
int
addSSTString
(
String
string
)
{
return
workbook
.
addSSTString
(
string
)
;
}
public
String
getSSTString
(
int
index
)
{
return
workbook
.
getSSTString
(
index
)
;
}
Workbook
getWorkbook
(
)
{
return
workbook
;
}
public
int
getNumberOfNames
(
)
{
int
result
=
names
.
size
(
)
;
return
result
;
}
public
HSSFName
getNameAt
(
int
index
)
{
HSSFName
result
=
(
HSSFName
)
names
.
get
(
index
)
;
return
result
;
}
public
String
getNameName
(
int
index
)
{
String
result
=
getNameAt
(
index
)
.
getNameName
(
)
;
return
result
;
}
public
void
setPrintArea
(
int
sheetIndex
,
String
reference
)
{
NameRecord
name
=
workbook
.
getSpecificBuiltinRecord
(
NameRecord
.
BUILTIN_PRINT_AREA
,
sheetIndex
+
1
)
;
if
(
name
==
null
)
name
=
workbook
.
createBuiltInName
(
NameRecord
.
BUILTIN_PRINT_AREA
,
sheetIndex
+
1
)
;
short
externSheetIndex
=
getWorkbook
(
)
.
checkExternSheet
(
sheetIndex
)
;
name
.
setExternSheetNumber
(
externSheetIndex
)
;
name
.
setAreaReference
(
reference
)
;
}
public
void
setPrintArea
(
int
sheetIndex
,
int
startColumn
,
int
endColumn
,
int
startRow
,
int
endRow
)
{
CellReference
cell
=
new
CellReference
(
startRow
,
startColumn
,
true
,
true
)
;
String
reference
=
cell
.
toString
(
)
;
cell
=
new
CellReference
(
endRow
,
endColumn
,
true
,
true
)
;
reference
=
reference
+
":"
+
cell
.
toString
(
)
;
setPrintArea
(
sheetIndex
,
reference
)
;
}
public
String
getPrintArea
(
int
sheetIndex
)
{
NameRecord
name
=
workbook
.
getSpecificBuiltinRecord
(
NameRecord
.
BUILTIN_PRINT_AREA
,
sheetIndex
+
1
)
;
if
(
name
==
null
)
return
null
;
return
name
.
getAreaReference
(
workbook
)
;
}
public
void
removePrintArea
(
int
sheetIndex
)
{
getWorkbook
(
)
.
removeBuiltinRecord
(
NameRecord
.
BUILTIN_PRINT_AREA
,
sheetIndex
+
1
)
;
}
public
HSSFName
createName
(
)
{
NameRecord
nameRecord
=
workbook
.
createName
(
)
;
HSSFName
newName
=
new
HSSFName
(
workbook
,
nameRecord
)
;
names
.
add
(
newName
)
;
return
newName
;
}
public
int
getNameIndex
(
String
name
)
{
int
retval
=
-
1
;
for
(
int
k
=
0
;
k
<
names
.
size
(
)
;
k
++
)
{
String
nameName
=
getNameName
(
k
)
;
if
(
nameName
.
equals
(
name
)
)
{
retval
=
k
;
break
;
}
}
return
retval
;
}
public
void
removeName
(
int
index
)
{
names
.
remove
(
index
)
;
workbook
.
removeName
(
index
)
;
}
public
HSSFDataFormat
createDataFormat
(
)
{
if
(
formatter
==
null
)
formatter
=
new
HSSFDataFormat
(
workbook
)
;
return
formatter
;
}
public
void
removeName
(
String
name
)
{
int
index
=
getNameIndex
(
name
)
;
removeName
(
index
)
;
}
public
HSSFPalette
getCustomPalette
(
)
{
return
new
HSSFPalette
(
workbook
.
getCustomPalette
(
)
)
;
}
private
void
copyNodes
(
POIFSFileSystem
source
,
POIFSFileSystem
target
,
List
excepts
)
throws
IOException
{
DirectoryEntry
root
=
source
.
getRoot
(
)
;
DirectoryEntry
newRoot
=
target
.
getRoot
(
)
;
Iterator
entries
=
root
.
getEntries
(
)
;
while
(
entries
.
hasNext
(
)
)
{
Entry
entry
=
(
Entry
)
entries
.
next
(
)
;
if
(
!
isInList
(
entry
.
getName
(
)
,
excepts
)
)
{
copyNodeRecursively
(
entry
,
newRoot
)
;
}
}
}
private
boolean
isInList
(
String
entry
,
List
list
)
{
for
(
int
k
=
0
;
k
<
list
.
size
(
)
;
k
++
)
{
if
(
list
.
get
(
k
)
.
equals
(
entry
)
)
{
return
true
;
}
}
return
false
;
}
private
void
copyNodeRecursively
(
Entry
entry
,
DirectoryEntry
target
)
throws
IOException
{
DirectoryEntry
newTarget
=
null
;
if
(
entry
.
isDirectoryEntry
(
)
)
{
newTarget
=
target
.
createDirectory
(
entry
.
getName
(
)
)
;
Iterator
entries
=
(
(
DirectoryEntry
)
entry
)
.
getEntries
(
)
;
while
(
entries
.
hasNext
(
)
)
{
copyNodeRecursively
(
(
Entry
)
entries
.
next
(
)
,
newTarget
)
;
}
}
else
{
DocumentEntry
dentry
=
(
DocumentEntry
)
entry
;
DocumentInputStream
dstream
=
new
DocumentInputStream
(
dentry
)
;
target
.
createDocument
(
dentry
.
getName
(
)
,
dstream
)
;
dstream
.
close
(
)
;
}
}
public
void
insertChartRecord
(
)
{
int
loc
=
workbook
.
findFirstRecordLocBySid
(
SSTRecord
.
sid
)
;
byte
[
]
data
=
{
(
byte
)
0x0F
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0xF0
,
(
byte
)
0x52
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x06
,
(
byte
)
0xF0
,
(
byte
)
0x18
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x01
,
(
byte
)
0x08
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x02
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x02
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x01
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x01
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x03
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x33
,
(
byte
)
0x00
,
(
byte
)
0x0B
,
(
byte
)
0xF0
,
(
byte
)
0x12
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0xBF
,
(
byte
)
0x00
,
(
byte
)
0x08
,
(
byte
)
0x00
,
(
byte
)
0x08
,
(
byte
)
0x00
,
(
byte
)
0x81
,
(
byte
)
0x01
,
(
byte
)
0x09
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x08
,
(
byte
)
0xC0
,
(
byte
)
0x01
,
(
byte
)
0x40
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x08
,
(
byte
)
0x40
,
(
byte
)
0x00
,
(
byte
)
0x1E
,
(
byte
)
0xF1
,
(
byte
)
0x10
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x0D
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x08
,
(
byte
)
0x0C
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x08
,
(
byte
)
0x17
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x08
,
(
byte
)
0xF7
,
(
byte
)
0x00
,
(
byte
)
0x00
,
(
byte
)
0x10
,
}
;
UnknownRecord
r
=
new
UnknownRecord
(
(
short
)
0x00EB
,
(
short
)
0x005a
,
data
)
;
workbook
.
getRecords
(
)
.
add
(
loc
,
r
)
;
}
}
