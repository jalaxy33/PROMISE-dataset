package
org
.
apache
.
poi
.
hssf
.
record
;
import
java
.
util
.
ArrayList
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
hssf
.
util
.
RKUtil
;
public
class
MulRKRecord
extends
Record
{
public
final
static
short
sid
=
0xbd
;
private
int
field_1_row
;
private
short
field_2_first_col
;
private
ArrayList
field_3_rks
;
private
short
field_4_last_col
;
public
MulRKRecord
(
)
{
}
public
MulRKRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
MulRKRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
public
int
getRow
(
)
{
return
field_1_row
;
}
public
short
getFirstColumn
(
)
{
return
field_2_first_col
;
}
public
short
getLastColumn
(
)
{
return
field_4_last_col
;
}
public
int
getNumColumns
(
)
{
return
field_4_last_col
-
field_2_first_col
+
1
;
}
public
short
getXFAt
(
int
coffset
)
{
return
(
(
RkRec
)
field_3_rks
.
get
(
coffset
)
)
.
xf
;
}
public
double
getRKNumberAt
(
int
coffset
)
{
return
RKUtil
.
decodeNumber
(
(
(
RkRec
)
field_3_rks
.
get
(
coffset
)
)
.
rk
)
;
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_row
=
LittleEndian
.
getUShort
(
data
,
0
+
offset
)
;
field_2_first_col
=
LittleEndian
.
getShort
(
data
,
2
+
offset
)
;
field_3_rks
=
parseRKs
(
data
,
4
,
offset
,
size
)
;
field_4_last_col
=
LittleEndian
.
getShort
(
data
,
(
field_3_rks
.
size
(
)
*
6
)
+
4
+
offset
)
;
}
private
ArrayList
parseRKs
(
byte
[
]
data
,
int
offset
,
int
recoffset
,
short
size
)
{
ArrayList
retval
=
new
ArrayList
(
)
;
for
(
;
offset
<
size
-
2
;
)
{
RkRec
rec
=
new
RkRec
(
)
;
rec
.
xf
=
LittleEndian
.
getShort
(
data
,
offset
+
recoffset
)
;
offset
+=
2
;
rec
.
rk
=
LittleEndian
.
getInt
(
data
,
offset
+
recoffset
)
;
offset
+=
4
;
retval
.
add
(
rec
)
;
}
return
retval
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[MULRK]\n"
)
;
buffer
.
append
(
"firstcol  = "
)
.
append
(
Integer
.
toHexString
(
getFirstColumn
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
" lastcol  = "
)
.
append
(
Integer
.
toHexString
(
getLastColumn
(
)
)
)
.
append
(
"\n"
)
;
for
(
int
k
=
0
;
k
<
getNumColumns
(
)
;
k
++
)
{
buffer
.
append
(
"xf"
)
.
append
(
k
)
.
append
(
"        = "
)
.
append
(
Integer
.
toHexString
(
getXFAt
(
k
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"rk"
)
.
append
(
k
)
.
append
(
"        = "
)
.
append
(
getRKNumberAt
(
k
)
)
.
append
(
"\n"
)
;
}
buffer
.
append
(
"[/MULRK]\n"
)
;
return
buffer
.
toString
(
)
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"Not a MulRKRecord!"
)
;
}
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
throw
new
RecordFormatException
(
"Sorry, you can't serialize a MulRK in this release"
)
;
}
}
class
RkRec
{
public
short
xf
;
public
int
rk
;
}
