package
org
.
apache
.
poi
.
hssf
.
record
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
import
org
.
apache
.
poi
.
hssf
.
record
.
Record
;
public
class
NumberRecord
extends
Record
implements
CellValueRecordInterface
,
Comparable
{
public
static
final
short
sid
=
0x203
;
private
int
field_1_row
;
private
short
field_2_col
;
private
short
field_3_xf
;
private
double
field_4_value
;
public
NumberRecord
(
)
{
}
public
NumberRecord
(
short
id
,
short
size
,
byte
[
]
data
)
{
super
(
id
,
size
,
data
)
;
}
public
NumberRecord
(
short
id
,
short
size
,
byte
[
]
data
,
int
offset
)
{
super
(
id
,
size
,
data
,
offset
)
;
}
protected
void
fillFields
(
byte
[
]
data
,
short
size
,
int
offset
)
{
field_1_row
=
LittleEndian
.
getUShort
(
data
,
0
+
offset
)
;
field_2_col
=
LittleEndian
.
getShort
(
data
,
2
+
offset
)
;
field_3_xf
=
LittleEndian
.
getShort
(
data
,
4
+
offset
)
;
field_4_value
=
LittleEndian
.
getDouble
(
data
,
6
+
offset
)
;
}
public
void
setRow
(
int
row
)
{
field_1_row
=
row
;
}
public
void
setColumn
(
short
col
)
{
field_2_col
=
col
;
}
public
void
setXFIndex
(
short
xf
)
{
field_3_xf
=
xf
;
}
public
void
setValue
(
double
value
)
{
field_4_value
=
value
;
}
public
int
getRow
(
)
{
return
field_1_row
;
}
public
short
getColumn
(
)
{
return
field_2_col
;
}
public
short
getXFIndex
(
)
{
return
field_3_xf
;
}
public
double
getValue
(
)
{
return
field_4_value
;
}
public
String
toString
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"[NUMBER]\n"
)
;
buffer
.
append
(
"    .row            = "
)
.
append
(
Integer
.
toHexString
(
getRow
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .col            = "
)
.
append
(
Integer
.
toHexString
(
getColumn
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .xfindex        = "
)
.
append
(
Integer
.
toHexString
(
getXFIndex
(
)
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"    .value          = "
)
.
append
(
getValue
(
)
)
.
append
(
"\n"
)
;
buffer
.
append
(
"[/NUMBER]\n"
)
;
return
buffer
.
toString
(
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
LittleEndian
.
putShort
(
data
,
0
+
offset
,
sid
)
;
LittleEndian
.
putShort
(
data
,
2
+
offset
,
(
short
)
14
)
;
LittleEndian
.
putShort
(
data
,
4
+
offset
,
(
short
)
getRow
(
)
)
;
LittleEndian
.
putShort
(
data
,
6
+
offset
,
getColumn
(
)
)
;
LittleEndian
.
putShort
(
data
,
8
+
offset
,
getXFIndex
(
)
)
;
LittleEndian
.
putDouble
(
data
,
10
+
offset
,
getValue
(
)
)
;
return
getRecordSize
(
)
;
}
public
int
getRecordSize
(
)
{
return
18
;
}
protected
void
validateSid
(
short
id
)
{
if
(
id
!=
sid
)
{
throw
new
RecordFormatException
(
"NOT A Number RECORD"
)
;
}
}
public
short
getSid
(
)
{
return
this
.
sid
;
}
public
boolean
isBefore
(
CellValueRecordInterface
i
)
{
if
(
this
.
getRow
(
)
>
i
.
getRow
(
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
>
i
.
getColumn
(
)
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
{
return
false
;
}
return
true
;
}
public
boolean
isAfter
(
CellValueRecordInterface
i
)
{
if
(
this
.
getRow
(
)
<
i
.
getRow
(
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
<
i
.
getColumn
(
)
)
)
{
return
false
;
}
if
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
{
return
false
;
}
return
true
;
}
public
boolean
isEqual
(
CellValueRecordInterface
i
)
{
return
(
(
this
.
getRow
(
)
==
i
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
i
.
getColumn
(
)
)
)
;
}
public
boolean
isInValueSection
(
)
{
return
true
;
}
public
boolean
isValue
(
)
{
return
true
;
}
public
int
compareTo
(
Object
obj
)
{
CellValueRecordInterface
loc
=
(
CellValueRecordInterface
)
obj
;
if
(
(
this
.
getRow
(
)
==
loc
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
loc
.
getColumn
(
)
)
)
{
return
0
;
}
if
(
this
.
getRow
(
)
<
loc
.
getRow
(
)
)
{
return
-
1
;
}
if
(
this
.
getRow
(
)
>
loc
.
getRow
(
)
)
{
return
1
;
}
if
(
this
.
getColumn
(
)
<
loc
.
getColumn
(
)
)
{
return
-
1
;
}
if
(
this
.
getColumn
(
)
>
loc
.
getColumn
(
)
)
{
return
1
;
}
return
-
1
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
!
(
obj
instanceof
CellValueRecordInterface
)
)
{
return
false
;
}
CellValueRecordInterface
loc
=
(
CellValueRecordInterface
)
obj
;
if
(
(
this
.
getRow
(
)
==
loc
.
getRow
(
)
)
&&
(
this
.
getColumn
(
)
==
loc
.
getColumn
(
)
)
)
{
return
true
;
}
return
false
;
}
public
Object
clone
(
)
{
NumberRecord
rec
=
new
NumberRecord
(
)
;
rec
.
field_1_row
=
field_1_row
;
rec
.
field_2_col
=
field_2_col
;
rec
.
field_3_xf
=
field_3_xf
;
rec
.
field_4_value
=
field_4_value
;
return
rec
;
}
}
