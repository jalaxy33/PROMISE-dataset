package
org
.
apache
.
poi
.
poifs
.
filesystem
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
apache
.
poi
.
poifs
.
common
.
POIFSConstants
;
import
org
.
apache
.
poi
.
poifs
.
dev
.
POIFSViewable
;
import
org
.
apache
.
poi
.
poifs
.
property
.
DocumentProperty
;
import
org
.
apache
.
poi
.
poifs
.
property
.
Property
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
BlockWritable
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
ListManagedBlock
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
DocumentBlock
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
RawDataBlock
;
import
org
.
apache
.
poi
.
poifs
.
storage
.
SmallDocumentBlock
;
import
org
.
apache
.
poi
.
util
.
HexDump
;
public
class
POIFSDocument
implements
BATManaged
,
BlockWritable
,
POIFSViewable
{
private
DocumentProperty
_property
;
private
int
_size
;
private
SmallBlockStore
_small_store
;
private
BigBlockStore
_big_store
;
public
POIFSDocument
(
final
String
name
,
final
RawDataBlock
[
]
blocks
,
final
int
length
)
throws
IOException
{
_size
=
length
;
_big_store
=
new
BigBlockStore
(
blocks
)
;
_property
=
new
DocumentProperty
(
name
,
_size
)
;
_small_store
=
new
SmallBlockStore
(
new
BlockWritable
[
0
]
)
;
_property
.
setDocument
(
this
)
;
}
public
POIFSDocument
(
final
String
name
,
final
SmallDocumentBlock
[
]
blocks
,
final
int
length
)
{
_size
=
length
;
try
{
_big_store
=
new
BigBlockStore
(
new
RawDataBlock
[
0
]
)
;
}
catch
(
IOException
ignored
)
{
}
_property
=
new
DocumentProperty
(
name
,
_size
)
;
_small_store
=
new
SmallBlockStore
(
blocks
)
;
_property
.
setDocument
(
this
)
;
}
public
POIFSDocument
(
final
String
name
,
final
ListManagedBlock
[
]
blocks
,
final
int
length
)
throws
IOException
{
_size
=
length
;
_property
=
new
DocumentProperty
(
name
,
_size
)
;
_property
.
setDocument
(
this
)
;
if
(
Property
.
isSmall
(
_size
)
)
{
_big_store
=
new
BigBlockStore
(
new
RawDataBlock
[
0
]
)
;
_small_store
=
new
SmallBlockStore
(
blocks
)
;
}
else
{
_big_store
=
new
BigBlockStore
(
blocks
)
;
_small_store
=
new
SmallBlockStore
(
new
BlockWritable
[
0
]
)
;
}
}
public
POIFSDocument
(
final
String
name
,
final
InputStream
stream
)
throws
IOException
{
List
blocks
=
new
ArrayList
(
)
;
_size
=
0
;
while
(
true
)
{
DocumentBlock
block
=
new
DocumentBlock
(
stream
)
;
int
blockSize
=
block
.
size
(
)
;
if
(
blockSize
>
0
)
{
blocks
.
add
(
block
)
;
_size
+=
blockSize
;
}
if
(
block
.
partiallyRead
(
)
)
{
break
;
}
}
DocumentBlock
[
]
bigBlocks
=
(
DocumentBlock
[
]
)
blocks
.
toArray
(
new
DocumentBlock
[
0
]
)
;
_big_store
=
new
BigBlockStore
(
bigBlocks
)
;
_property
=
new
DocumentProperty
(
name
,
_size
)
;
_property
.
setDocument
(
this
)
;
if
(
_property
.
shouldUseSmallBlocks
(
)
)
{
_small_store
=
new
SmallBlockStore
(
SmallDocumentBlock
.
convert
(
bigBlocks
,
_size
)
)
;
_big_store
=
new
BigBlockStore
(
new
DocumentBlock
[
0
]
)
;
}
else
{
_small_store
=
new
SmallBlockStore
(
new
BlockWritable
[
0
]
)
;
}
}
public
POIFSDocument
(
final
String
name
,
final
int
size
,
final
POIFSDocumentPath
path
,
final
POIFSWriterListener
writer
)
throws
IOException
{
_size
=
size
;
_property
=
new
DocumentProperty
(
name
,
_size
)
;
_property
.
setDocument
(
this
)
;
if
(
_property
.
shouldUseSmallBlocks
(
)
)
{
_small_store
=
new
SmallBlockStore
(
path
,
name
,
size
,
writer
)
;
_big_store
=
new
BigBlockStore
(
new
Object
[
0
]
)
;
}
else
{
_small_store
=
new
SmallBlockStore
(
new
BlockWritable
[
0
]
)
;
_big_store
=
new
BigBlockStore
(
path
,
name
,
size
,
writer
)
;
}
}
public
BlockWritable
[
]
getSmallBlocks
(
)
{
return
_small_store
.
getBlocks
(
)
;
}
public
int
getSize
(
)
{
return
_size
;
}
void
read
(
final
byte
[
]
buffer
,
final
int
offset
)
{
if
(
_property
.
shouldUseSmallBlocks
(
)
)
{
SmallDocumentBlock
.
read
(
_small_store
.
getBlocks
(
)
,
buffer
,
offset
)
;
}
else
{
DocumentBlock
.
read
(
_big_store
.
getBlocks
(
)
,
buffer
,
offset
)
;
}
}
DocumentProperty
getDocumentProperty
(
)
{
return
_property
;
}
public
void
writeBlocks
(
final
OutputStream
stream
)
throws
IOException
{
_big_store
.
writeBlocks
(
stream
)
;
}
public
int
countBlocks
(
)
{
return
_big_store
.
countBlocks
(
)
;
}
public
void
setStartBlock
(
final
int
index
)
{
_property
.
setStartBlock
(
index
)
;
}
public
Object
[
]
getViewableArray
(
)
{
Object
[
]
results
=
new
Object
[
1
]
;
String
result
;
try
{
ByteArrayOutputStream
output
=
new
ByteArrayOutputStream
(
)
;
BlockWritable
[
]
blocks
=
null
;
if
(
_big_store
.
isValid
(
)
)
{
blocks
=
_big_store
.
getBlocks
(
)
;
}
else
if
(
_small_store
.
isValid
(
)
)
{
blocks
=
_small_store
.
getBlocks
(
)
;
}
if
(
blocks
!=
null
)
{
for
(
int
k
=
0
;
k
<
blocks
.
length
;
k
++
)
{
blocks
[
k
]
.
writeBlocks
(
output
)
;
}
byte
[
]
data
=
output
.
toByteArray
(
)
;
if
(
data
.
length
>
_property
.
getSize
(
)
)
{
byte
[
]
tmp
=
new
byte
[
_property
.
getSize
(
)
]
;
System
.
arraycopy
(
data
,
0
,
tmp
,
0
,
tmp
.
length
)
;
data
=
tmp
;
}
output
=
new
ByteArrayOutputStream
(
)
;
HexDump
.
dump
(
data
,
0
,
output
,
0
)
;
result
=
output
.
toString
(
)
;
}
else
{
result
=
"<NO DATA>"
;
}
}
catch
(
IOException
e
)
{
result
=
e
.
getMessage
(
)
;
}
results
[
0
]
=
result
;
return
results
;
}
public
Iterator
getViewableIterator
(
)
{
return
Collections
.
EMPTY_LIST
.
iterator
(
)
;
}
public
boolean
preferArray
(
)
{
return
true
;
}
public
String
getShortDescription
(
)
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
"Document: \""
)
.
append
(
_property
.
getName
(
)
)
.
append
(
"\""
)
;
buffer
.
append
(
" size = "
)
.
append
(
getSize
(
)
)
;
return
buffer
.
toString
(
)
;
}
private
class
SmallBlockStore
{
private
SmallDocumentBlock
[
]
smallBlocks
;
private
POIFSDocumentPath
path
;
private
String
name
;
private
int
size
;
private
POIFSWriterListener
writer
;
SmallBlockStore
(
final
Object
[
]
blocks
)
{
smallBlocks
=
new
SmallDocumentBlock
[
blocks
.
length
]
;
for
(
int
j
=
0
;
j
<
blocks
.
length
;
j
++
)
{
smallBlocks
[
j
]
=
(
SmallDocumentBlock
)
blocks
[
j
]
;
}
this
.
path
=
null
;
this
.
name
=
null
;
this
.
size
=
-
1
;
this
.
writer
=
null
;
}
SmallBlockStore
(
final
POIFSDocumentPath
path
,
final
String
name
,
final
int
size
,
final
POIFSWriterListener
writer
)
{
smallBlocks
=
new
SmallDocumentBlock
[
0
]
;
this
.
path
=
path
;
this
.
name
=
name
;
this
.
size
=
size
;
this
.
writer
=
writer
;
}
boolean
isValid
(
)
{
return
(
(
smallBlocks
.
length
>
0
)
||
(
writer
!=
null
)
)
;
}
BlockWritable
[
]
getBlocks
(
)
{
if
(
isValid
(
)
&&
(
writer
!=
null
)
)
{
ByteArrayOutputStream
stream
=
new
ByteArrayOutputStream
(
size
)
;
DocumentOutputStream
dstream
=
new
DocumentOutputStream
(
stream
,
size
)
;
writer
.
processPOIFSWriterEvent
(
new
POIFSWriterEvent
(
dstream
,
path
,
name
,
size
)
)
;
smallBlocks
=
SmallDocumentBlock
.
convert
(
stream
.
toByteArray
(
)
,
size
)
;
}
return
smallBlocks
;
}
}
private
class
BigBlockStore
{
private
DocumentBlock
[
]
bigBlocks
;
private
POIFSDocumentPath
path
;
private
String
name
;
private
int
size
;
private
POIFSWriterListener
writer
;
BigBlockStore
(
final
Object
[
]
blocks
)
throws
IOException
{
bigBlocks
=
new
DocumentBlock
[
blocks
.
length
]
;
for
(
int
j
=
0
;
j
<
blocks
.
length
;
j
++
)
{
if
(
blocks
[
j
]
instanceof
DocumentBlock
)
{
bigBlocks
[
j
]
=
(
DocumentBlock
)
blocks
[
j
]
;
}
else
{
bigBlocks
[
j
]
=
new
DocumentBlock
(
(
RawDataBlock
)
blocks
[
j
]
)
;
}
}
this
.
path
=
null
;
this
.
name
=
null
;
this
.
size
=
-
1
;
this
.
writer
=
null
;
}
BigBlockStore
(
final
POIFSDocumentPath
path
,
final
String
name
,
final
int
size
,
final
POIFSWriterListener
writer
)
{
bigBlocks
=
new
DocumentBlock
[
0
]
;
this
.
path
=
path
;
this
.
name
=
name
;
this
.
size
=
size
;
this
.
writer
=
writer
;
}
boolean
isValid
(
)
{
return
(
(
bigBlocks
.
length
>
0
)
||
(
writer
!=
null
)
)
;
}
DocumentBlock
[
]
getBlocks
(
)
{
if
(
isValid
(
)
&&
(
writer
!=
null
)
)
{
ByteArrayOutputStream
stream
=
new
ByteArrayOutputStream
(
size
)
;
DocumentOutputStream
dstream
=
new
DocumentOutputStream
(
stream
,
size
)
;
writer
.
processPOIFSWriterEvent
(
new
POIFSWriterEvent
(
dstream
,
path
,
name
,
size
)
)
;
bigBlocks
=
DocumentBlock
.
convert
(
stream
.
toByteArray
(
)
,
size
)
;
}
return
bigBlocks
;
}
void
writeBlocks
(
OutputStream
stream
)
throws
IOException
{
if
(
isValid
(
)
)
{
if
(
writer
!=
null
)
{
DocumentOutputStream
dstream
=
new
DocumentOutputStream
(
stream
,
size
)
;
writer
.
processPOIFSWriterEvent
(
new
POIFSWriterEvent
(
dstream
,
path
,
name
,
size
)
)
;
dstream
.
writeFiller
(
countBlocks
(
)
*
POIFSConstants
.
BIG_BLOCK_SIZE
,
DocumentBlock
.
getFillByte
(
)
)
;
}
else
{
for
(
int
k
=
0
;
k
<
bigBlocks
.
length
;
k
++
)
{
bigBlocks
[
k
]
.
writeBlocks
(
stream
)
;
}
}
}
}
int
countBlocks
(
)
{
int
rval
=
0
;
if
(
isValid
(
)
)
{
if
(
writer
!=
null
)
{
rval
=
(
size
+
POIFSConstants
.
BIG_BLOCK_SIZE
-
1
)
/
POIFSConstants
.
BIG_BLOCK_SIZE
;
}
else
{
rval
=
bigBlocks
.
length
;
}
}
return
rval
;
}
}
}
