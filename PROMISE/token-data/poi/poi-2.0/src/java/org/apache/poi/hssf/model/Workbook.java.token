package
org
.
apache
.
poi
.
hssf
.
model
;
import
org
.
apache
.
poi
.
hssf
.
record
.
*
;
import
org
.
apache
.
poi
.
hssf
.
util
.
HSSFColor
;
import
org
.
apache
.
poi
.
hssf
.
util
.
SheetReferences
;
import
org
.
apache
.
poi
.
util
.
POILogFactory
;
import
org
.
apache
.
poi
.
util
.
POILogger
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Locale
;
public
class
Workbook
implements
Model
{
private
static
final
int
DEBUG
=
POILogger
.
DEBUG
;
private
final
static
short
CODEPAGE
=
(
short
)
0x4b0
;
protected
WorkbookRecordList
records
=
new
WorkbookRecordList
(
)
;
protected
SSTRecord
sst
=
null
;
protected
ExternSheetRecord
externSheet
=
null
;
protected
ArrayList
boundsheets
=
new
ArrayList
(
)
;
protected
ArrayList
formats
=
new
ArrayList
(
)
;
protected
ArrayList
names
=
new
ArrayList
(
)
;
protected
int
numxfs
=
0
;
protected
int
numfonts
=
0
;
private
short
maxformatid
=
-
1
;
private
boolean
uses1904datewindowing
=
false
;
private
static
POILogger
log
=
POILogFactory
.
getLogger
(
Workbook
.
class
)
;
public
Workbook
(
)
{
}
public
static
Workbook
createWorkbook
(
List
recs
)
{
log
.
log
(
DEBUG
,
"Workbook (readfile) created with reclen="
,
new
Integer
(
recs
.
size
(
)
)
)
;
Workbook
retval
=
new
Workbook
(
)
;
ArrayList
records
=
new
ArrayList
(
recs
.
size
(
)
/
3
)
;
for
(
int
k
=
0
;
k
<
recs
.
size
(
)
;
k
++
)
{
Record
rec
=
(
Record
)
recs
.
get
(
k
)
;
if
(
rec
.
getSid
(
)
==
EOFRecord
.
sid
)
{
records
.
add
(
rec
)
;
log
.
log
(
DEBUG
,
"found workbook eof record at "
+
k
)
;
break
;
}
switch
(
rec
.
getSid
(
)
)
{
case
BoundSheetRecord
.
sid
:
log
.
log
(
DEBUG
,
"found boundsheet record at "
+
k
)
;
retval
.
boundsheets
.
add
(
rec
)
;
retval
.
records
.
setBspos
(
k
)
;
break
;
case
SSTRecord
.
sid
:
log
.
log
(
DEBUG
,
"found sst record at "
+
k
)
;
retval
.
sst
=
(
SSTRecord
)
rec
;
break
;
case
FontRecord
.
sid
:
log
.
log
(
DEBUG
,
"found font record at "
+
k
)
;
retval
.
records
.
setFontpos
(
k
)
;
retval
.
numfonts
++
;
break
;
case
ExtendedFormatRecord
.
sid
:
log
.
log
(
DEBUG
,
"found XF record at "
+
k
)
;
retval
.
records
.
setXfpos
(
k
)
;
retval
.
numxfs
++
;
break
;
case
TabIdRecord
.
sid
:
log
.
log
(
DEBUG
,
"found tabid record at "
+
k
)
;
retval
.
records
.
setTabpos
(
k
)
;
break
;
case
ProtectRecord
.
sid
:
log
.
log
(
DEBUG
,
"found protect record at "
+
k
)
;
retval
.
records
.
setProtpos
(
k
)
;
break
;
case
BackupRecord
.
sid
:
log
.
log
(
DEBUG
,
"found backup record at "
+
k
)
;
retval
.
records
.
setBackuppos
(
k
)
;
break
;
case
ExternSheetRecord
.
sid
:
log
.
log
(
DEBUG
,
"found extern sheet record at "
+
k
)
;
retval
.
externSheet
=
(
ExternSheetRecord
)
rec
;
break
;
case
NameRecord
.
sid
:
log
.
log
(
DEBUG
,
"found name record at "
+
k
)
;
retval
.
names
.
add
(
rec
)
;
break
;
case
SupBookRecord
.
sid
:
log
.
log
(
DEBUG
,
"found SupBook record at "
+
k
)
;
break
;
case
FormatRecord
.
sid
:
log
.
log
(
DEBUG
,
"found format record at "
+
k
)
;
retval
.
formats
.
add
(
rec
)
;
retval
.
maxformatid
=
retval
.
maxformatid
>=
(
(
FormatRecord
)
rec
)
.
getIndexCode
(
)
?
retval
.
maxformatid
:
(
(
FormatRecord
)
rec
)
.
getIndexCode
(
)
;
break
;
case
DateWindow1904Record
.
sid
:
log
.
log
(
DEBUG
,
"found datewindow1904 record at "
+
k
)
;
retval
.
uses1904datewindowing
=
(
(
DateWindow1904Record
)
rec
)
.
getWindowing
(
)
==
1
;
break
;
case
PaletteRecord
.
sid
:
log
.
log
(
DEBUG
,
"found palette record at "
+
k
)
;
retval
.
records
.
setPalettepos
(
k
)
;
default
:
}
records
.
add
(
rec
)
;
}
retval
.
records
.
setRecords
(
records
)
;
log
.
log
(
DEBUG
,
"exit create workbook from existing file function"
)
;
return
retval
;
}
public
static
Workbook
createWorkbook
(
)
{
log
.
log
(
DEBUG
,
"creating new workbook from scratch"
)
;
Workbook
retval
=
new
Workbook
(
)
;
ArrayList
records
=
new
ArrayList
(
30
)
;
ArrayList
formats
=
new
ArrayList
(
8
)
;
records
.
add
(
retval
.
createBOF
(
)
)
;
records
.
add
(
retval
.
createInterfaceHdr
(
)
)
;
records
.
add
(
retval
.
createMMS
(
)
)
;
records
.
add
(
retval
.
createInterfaceEnd
(
)
)
;
records
.
add
(
retval
.
createWriteAccess
(
)
)
;
records
.
add
(
retval
.
createCodepage
(
)
)
;
records
.
add
(
retval
.
createDSF
(
)
)
;
records
.
add
(
retval
.
createTabId
(
)
)
;
retval
.
records
.
setTabpos
(
records
.
size
(
)
-
1
)
;
records
.
add
(
retval
.
createFnGroupCount
(
)
)
;
records
.
add
(
retval
.
createWindowProtect
(
)
)
;
records
.
add
(
retval
.
createProtect
(
)
)
;
retval
.
records
.
setProtpos
(
records
.
size
(
)
-
1
)
;
records
.
add
(
retval
.
createPassword
(
)
)
;
records
.
add
(
retval
.
createProtectionRev4
(
)
)
;
records
.
add
(
retval
.
createPasswordRev4
(
)
)
;
records
.
add
(
retval
.
createWindowOne
(
)
)
;
records
.
add
(
retval
.
createBackup
(
)
)
;
retval
.
records
.
setBackuppos
(
records
.
size
(
)
-
1
)
;
records
.
add
(
retval
.
createHideObj
(
)
)
;
records
.
add
(
retval
.
createDateWindow1904
(
)
)
;
records
.
add
(
retval
.
createPrecision
(
)
)
;
records
.
add
(
retval
.
createRefreshAll
(
)
)
;
records
.
add
(
retval
.
createBookBool
(
)
)
;
records
.
add
(
retval
.
createFont
(
)
)
;
records
.
add
(
retval
.
createFont
(
)
)
;
records
.
add
(
retval
.
createFont
(
)
)
;
records
.
add
(
retval
.
createFont
(
)
)
;
retval
.
records
.
setFontpos
(
records
.
size
(
)
-
1
)
;
retval
.
numfonts
=
4
;
for
(
int
i
=
0
;
i
<=
7
;
i
++
)
{
Record
rec
;
rec
=
retval
.
createFormat
(
i
)
;
retval
.
maxformatid
=
retval
.
maxformatid
>=
(
(
FormatRecord
)
rec
)
.
getIndexCode
(
)
?
retval
.
maxformatid
:
(
(
FormatRecord
)
rec
)
.
getIndexCode
(
)
;
formats
.
add
(
rec
)
;
records
.
add
(
rec
)
;
}
retval
.
formats
=
formats
;
for
(
int
k
=
0
;
k
<
21
;
k
++
)
{
records
.
add
(
retval
.
createExtendedFormat
(
k
)
)
;
retval
.
numxfs
++
;
}
retval
.
records
.
setXfpos
(
records
.
size
(
)
-
1
)
;
for
(
int
k
=
0
;
k
<
6
;
k
++
)
{
records
.
add
(
retval
.
createStyle
(
k
)
)
;
}
records
.
add
(
retval
.
createUseSelFS
(
)
)
;
for
(
int
k
=
0
;
k
<
1
;
k
++
)
{
BoundSheetRecord
bsr
=
(
BoundSheetRecord
)
retval
.
createBoundSheet
(
k
)
;
records
.
add
(
bsr
)
;
retval
.
boundsheets
.
add
(
bsr
)
;
retval
.
records
.
setBspos
(
records
.
size
(
)
-
1
)
;
}
records
.
add
(
retval
.
createCountry
(
)
)
;
retval
.
sst
=
(
SSTRecord
)
retval
.
createSST
(
)
;
records
.
add
(
retval
.
sst
)
;
records
.
add
(
retval
.
createExtendedSST
(
)
)
;
records
.
add
(
retval
.
createEOF
(
)
)
;
retval
.
records
.
setRecords
(
records
)
;
log
.
log
(
DEBUG
,
"exit create new workbook from scratch"
)
;
return
retval
;
}
public
NameRecord
getSpecificBuiltinRecord
(
byte
name
,
int
sheetIndex
)
{
Iterator
iterator
=
names
.
iterator
(
)
;
while
(
iterator
.
hasNext
(
)
)
{
NameRecord
record
=
(
NameRecord
)
iterator
.
next
(
)
;
if
(
record
.
getBuiltInName
(
)
==
name
&&
record
.
getIndexToSheet
(
)
==
sheetIndex
)
{
return
record
;
}
}
return
null
;
}
public
void
removeBuiltinRecord
(
byte
name
,
int
sheetIndex
)
{
NameRecord
record
=
getSpecificBuiltinRecord
(
name
,
sheetIndex
)
;
if
(
record
!=
null
)
{
names
.
remove
(
record
)
;
}
}
public
int
getNumRecords
(
)
{
return
records
.
size
(
)
;
}
public
FontRecord
getFontRecordAt
(
int
idx
)
{
int
index
=
idx
;
if
(
index
>
4
)
{
index
-=
1
;
}
if
(
index
>
(
numfonts
-
1
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"There are only "
+
numfonts
+
" font records, you asked for "
+
idx
)
;
}
FontRecord
retval
=
(
FontRecord
)
records
.
get
(
(
records
.
getFontpos
(
)
-
(
numfonts
-
1
)
)
+
index
)
;
return
retval
;
}
public
FontRecord
createNewFont
(
)
{
FontRecord
rec
=
(
FontRecord
)
createFont
(
)
;
records
.
add
(
records
.
getFontpos
(
)
+
1
,
rec
)
;
records
.
setFontpos
(
records
.
getFontpos
(
)
+
1
)
;
numfonts
++
;
return
rec
;
}
public
int
getNumberOfFontRecords
(
)
{
return
numfonts
;
}
public
void
setSheetBof
(
int
sheetnum
,
int
pos
)
{
log
.
log
(
DEBUG
,
"setting bof for sheetnum ="
,
new
Integer
(
sheetnum
)
,
" at pos="
,
new
Integer
(
pos
)
)
;
checkSheets
(
sheetnum
)
;
(
(
BoundSheetRecord
)
boundsheets
.
get
(
sheetnum
)
)
.
setPositionOfBof
(
pos
)
;
}
public
BackupRecord
getBackupRecord
(
)
{
return
(
BackupRecord
)
records
.
get
(
records
.
getBackuppos
(
)
)
;
}
public
void
setSheetName
(
int
sheetnum
,
String
sheetname
)
{
setSheetName
(
sheetnum
,
sheetname
,
(
byte
)
0
)
;
}
public
void
setSheetName
(
int
sheetnum
,
String
sheetname
,
short
encoding
)
{
checkSheets
(
sheetnum
)
;
BoundSheetRecord
sheet
=
(
BoundSheetRecord
)
boundsheets
.
get
(
sheetnum
)
;
sheet
.
setSheetname
(
sheetname
)
;
sheet
.
setSheetnameLength
(
(
byte
)
sheetname
.
length
(
)
)
;
sheet
.
setCompressedUnicodeFlag
(
(
byte
)
encoding
)
;
}
public
void
setSheetOrder
(
String
sheetname
,
int
pos
)
{
int
sheetNumber
=
getSheetIndex
(
sheetname
)
;
boundsheets
.
add
(
pos
,
boundsheets
.
remove
(
sheetNumber
)
)
;
}
public
String
getSheetName
(
int
sheetnum
)
{
return
(
(
BoundSheetRecord
)
boundsheets
.
get
(
sheetnum
)
)
.
getSheetname
(
)
;
}
public
int
getSheetIndex
(
String
name
)
{
int
retval
=
-
1
;
for
(
int
k
=
0
;
k
<
boundsheets
.
size
(
)
;
k
++
)
{
String
sheet
=
getSheetName
(
k
)
;
if
(
sheet
.
equalsIgnoreCase
(
name
)
)
{
retval
=
k
;
break
;
}
}
return
retval
;
}
private
void
checkSheets
(
int
sheetnum
)
{
if
(
(
boundsheets
.
size
(
)
)
<=
sheetnum
)
{
if
(
(
boundsheets
.
size
(
)
+
1
)
<=
sheetnum
)
{
throw
new
RuntimeException
(
"Sheet number out of bounds!"
)
;
}
BoundSheetRecord
bsr
=
(
BoundSheetRecord
)
createBoundSheet
(
sheetnum
)
;
records
.
add
(
records
.
getBspos
(
)
+
1
,
bsr
)
;
records
.
setBspos
(
records
.
getBspos
(
)
+
1
)
;
boundsheets
.
add
(
bsr
)
;
fixTabIdRecord
(
)
;
}
}
public
void
removeSheet
(
int
sheetnum
)
{
if
(
boundsheets
.
size
(
)
>
sheetnum
)
{
records
.
remove
(
records
.
getBspos
(
)
-
(
boundsheets
.
size
(
)
-
1
)
+
sheetnum
)
;
boundsheets
.
remove
(
sheetnum
)
;
fixTabIdRecord
(
)
;
}
}
private
void
fixTabIdRecord
(
)
{
TabIdRecord
tir
=
(
TabIdRecord
)
records
.
get
(
records
.
getTabpos
(
)
)
;
short
[
]
tia
=
new
short
[
boundsheets
.
size
(
)
]
;
for
(
short
k
=
0
;
k
<
tia
.
length
;
k
++
)
{
tia
[
k
]
=
k
;
}
tir
.
setTabIdArray
(
tia
)
;
}
public
int
getNumSheets
(
)
{
log
.
log
(
DEBUG
,
"getNumSheets="
,
new
Integer
(
boundsheets
.
size
(
)
)
)
;
return
boundsheets
.
size
(
)
;
}
public
int
getNumExFormats
(
)
{
log
.
log
(
DEBUG
,
"getXF="
,
new
Integer
(
numxfs
)
)
;
return
numxfs
;
}
public
ExtendedFormatRecord
getExFormatAt
(
int
index
)
{
int
xfptr
=
records
.
getXfpos
(
)
-
(
numxfs
-
1
)
;
xfptr
+=
index
;
ExtendedFormatRecord
retval
=
(
ExtendedFormatRecord
)
records
.
get
(
xfptr
)
;
return
retval
;
}
public
ExtendedFormatRecord
createCellXF
(
)
{
ExtendedFormatRecord
xf
=
createExtendedFormat
(
)
;
records
.
add
(
records
.
getXfpos
(
)
+
1
,
xf
)
;
records
.
setXfpos
(
records
.
getXfpos
(
)
+
1
)
;
numxfs
++
;
return
xf
;
}
public
int
addSSTString
(
String
string
,
boolean
use16bits
)
{
log
.
log
(
DEBUG
,
"insert to sst string='"
,
string
,
"' and use16bits= "
,
new
Boolean
(
use16bits
)
)
;
if
(
sst
==
null
)
{
insertSST
(
)
;
}
return
sst
.
addString
(
string
,
use16bits
)
;
}
public
int
addSSTString
(
String
string
)
{
return
addSSTString
(
string
,
false
)
;
}
public
String
getSSTString
(
int
str
)
{
if
(
sst
==
null
)
{
insertSST
(
)
;
}
String
retval
=
sst
.
getString
(
str
)
;
log
.
log
(
DEBUG
,
"Returning SST for index="
,
new
Integer
(
str
)
,
" String= "
,
retval
)
;
return
retval
;
}
public
void
insertSST
(
)
{
log
.
log
(
DEBUG
,
"creating new SST via insertSST!"
)
;
sst
=
(
SSTRecord
)
createSST
(
)
;
records
.
add
(
records
.
size
(
)
-
1
,
createExtendedSST
(
)
)
;
records
.
add
(
records
.
size
(
)
-
2
,
sst
)
;
}
public
int
serialize
(
int
offset
,
byte
[
]
data
)
{
log
.
log
(
DEBUG
,
"Serializing Workbook with offsets"
)
;
int
pos
=
0
;
SSTRecord
sst
=
null
;
int
sstPos
=
0
;
for
(
int
k
=
0
;
k
<
records
.
size
(
)
;
k
++
)
{
Record
record
=
records
.
get
(
k
)
;
if
(
record
.
getSid
(
)
!=
RecalcIdRecord
.
sid
||
(
(
RecalcIdRecord
)
record
)
.
isNeeded
(
)
)
{
if
(
record
instanceof
SSTRecord
)
{
sst
=
(
SSTRecord
)
record
;
sstPos
=
pos
;
}
if
(
record
.
getSid
(
)
==
ExtSSTRecord
.
sid
&&
sst
!=
null
)
{
record
=
sst
.
createExtSSTRecord
(
sstPos
+
offset
)
;
}
pos
+=
record
.
serialize
(
pos
+
offset
,
data
)
;
}
}
log
.
log
(
DEBUG
,
"Exiting serialize workbook"
)
;
return
pos
;
}
public
int
getSize
(
)
{
int
retval
=
0
;
SSTRecord
sst
=
null
;
for
(
int
k
=
0
;
k
<
records
.
size
(
)
;
k
++
)
{
Record
record
=
records
.
get
(
k
)
;
if
(
record
.
getSid
(
)
!=
RecalcIdRecord
.
sid
||
(
(
RecalcIdRecord
)
record
)
.
isNeeded
(
)
)
{
if
(
record
instanceof
SSTRecord
)
sst
=
(
SSTRecord
)
record
;
if
(
record
.
getSid
(
)
==
ExtSSTRecord
.
sid
&&
sst
!=
null
)
retval
+=
sst
.
calcExtSSTRecordSize
(
)
;
else
retval
+=
record
.
getRecordSize
(
)
;
}
}
return
retval
;
}
protected
Record
createBOF
(
)
{
BOFRecord
retval
=
new
BOFRecord
(
)
;
retval
.
setVersion
(
(
short
)
0x600
)
;
retval
.
setType
(
(
short
)
5
)
;
retval
.
setBuild
(
(
short
)
0x10d3
)
;
retval
.
setBuildYear
(
(
short
)
1996
)
;
retval
.
setHistoryBitMask
(
0x41
)
;
retval
.
setRequiredVersion
(
0x6
)
;
return
retval
;
}
protected
Record
createInterfaceHdr
(
)
{
InterfaceHdrRecord
retval
=
new
InterfaceHdrRecord
(
)
;
retval
.
setCodepage
(
CODEPAGE
)
;
return
retval
;
}
protected
Record
createMMS
(
)
{
MMSRecord
retval
=
new
MMSRecord
(
)
;
retval
.
setAddMenuCount
(
(
byte
)
0
)
;
retval
.
setDelMenuCount
(
(
byte
)
0
)
;
return
retval
;
}
protected
Record
createInterfaceEnd
(
)
{
return
new
InterfaceEndRecord
(
)
;
}
protected
Record
createWriteAccess
(
)
{
WriteAccessRecord
retval
=
new
WriteAccessRecord
(
)
;
retval
.
setUsername
(
System
.
getProperty
(
"user.name"
)
)
;
return
retval
;
}
protected
Record
createCodepage
(
)
{
CodepageRecord
retval
=
new
CodepageRecord
(
)
;
retval
.
setCodepage
(
CODEPAGE
)
;
return
retval
;
}
protected
Record
createDSF
(
)
{
DSFRecord
retval
=
new
DSFRecord
(
)
;
retval
.
setDsf
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createTabId
(
)
{
TabIdRecord
retval
=
new
TabIdRecord
(
)
;
short
[
]
tabidarray
=
{
0
}
;
retval
.
setTabIdArray
(
tabidarray
)
;
return
retval
;
}
protected
Record
createFnGroupCount
(
)
{
FnGroupCountRecord
retval
=
new
FnGroupCountRecord
(
)
;
retval
.
setCount
(
(
short
)
14
)
;
return
retval
;
}
protected
Record
createWindowProtect
(
)
{
WindowProtectRecord
retval
=
new
WindowProtectRecord
(
)
;
retval
.
setProtect
(
false
)
;
return
retval
;
}
protected
Record
createProtect
(
)
{
ProtectRecord
retval
=
new
ProtectRecord
(
)
;
retval
.
setProtect
(
false
)
;
return
retval
;
}
protected
Record
createPassword
(
)
{
PasswordRecord
retval
=
new
PasswordRecord
(
)
;
retval
.
setPassword
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createProtectionRev4
(
)
{
ProtectionRev4Record
retval
=
new
ProtectionRev4Record
(
)
;
retval
.
setProtect
(
false
)
;
return
retval
;
}
protected
Record
createPasswordRev4
(
)
{
PasswordRev4Record
retval
=
new
PasswordRev4Record
(
)
;
retval
.
setPassword
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createWindowOne
(
)
{
WindowOneRecord
retval
=
new
WindowOneRecord
(
)
;
retval
.
setHorizontalHold
(
(
short
)
0x168
)
;
retval
.
setVerticalHold
(
(
short
)
0x10e
)
;
retval
.
setWidth
(
(
short
)
0x3a5c
)
;
retval
.
setHeight
(
(
short
)
0x23be
)
;
retval
.
setOptions
(
(
short
)
0x38
)
;
retval
.
setSelectedTab
(
(
short
)
0x0
)
;
retval
.
setDisplayedTab
(
(
short
)
0x0
)
;
retval
.
setNumSelectedTabs
(
(
short
)
1
)
;
retval
.
setTabWidthRatio
(
(
short
)
0x258
)
;
return
retval
;
}
protected
Record
createBackup
(
)
{
BackupRecord
retval
=
new
BackupRecord
(
)
;
retval
.
setBackup
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createHideObj
(
)
{
HideObjRecord
retval
=
new
HideObjRecord
(
)
;
retval
.
setHideObj
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createDateWindow1904
(
)
{
DateWindow1904Record
retval
=
new
DateWindow1904Record
(
)
;
retval
.
setWindowing
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createPrecision
(
)
{
PrecisionRecord
retval
=
new
PrecisionRecord
(
)
;
retval
.
setFullPrecision
(
true
)
;
return
retval
;
}
protected
Record
createRefreshAll
(
)
{
RefreshAllRecord
retval
=
new
RefreshAllRecord
(
)
;
retval
.
setRefreshAll
(
false
)
;
return
retval
;
}
protected
Record
createBookBool
(
)
{
BookBoolRecord
retval
=
new
BookBoolRecord
(
)
;
retval
.
setSaveLinkValues
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createFont
(
)
{
FontRecord
retval
=
new
FontRecord
(
)
;
retval
.
setFontHeight
(
(
short
)
0xc8
)
;
retval
.
setAttributes
(
(
short
)
0x0
)
;
retval
.
setColorPaletteIndex
(
(
short
)
0x7fff
)
;
retval
.
setBoldWeight
(
(
short
)
0x190
)
;
retval
.
setFontNameLength
(
(
byte
)
5
)
;
retval
.
setFontName
(
"Arial"
)
;
return
retval
;
}
protected
Record
createFormat
(
int
id
)
{
FormatRecord
retval
=
new
FormatRecord
(
)
;
switch
(
id
)
{
case
0
:
retval
.
setIndexCode
(
(
short
)
5
)
;
retval
.
setFormatStringLength
(
(
byte
)
0x17
)
;
retval
.
setFormatString
(
"\"$\"#,##0_);\\(\"$\"#,##0\\)"
)
;
break
;
case
1
:
retval
.
setIndexCode
(
(
short
)
6
)
;
retval
.
setFormatStringLength
(
(
byte
)
0x1c
)
;
retval
.
setFormatString
(
"\"$\"#,##0_);[Red]\\(\"$\"#,##0\\)"
)
;
break
;
case
2
:
retval
.
setIndexCode
(
(
short
)
7
)
;
retval
.
setFormatStringLength
(
(
byte
)
0x1d
)
;
retval
.
setFormatString
(
"\"$\"#,##0.00_);\\(\"$\"#,##0.00\\)"
)
;
break
;
case
3
:
retval
.
setIndexCode
(
(
short
)
8
)
;
retval
.
setFormatStringLength
(
(
byte
)
0x22
)
;
retval
.
setFormatString
(
"\"$\"#,##0.00_);[Red]\\(\"$\"#,##0.00\\)"
)
;
break
;
case
4
:
retval
.
setIndexCode
(
(
short
)
0x2a
)
;
retval
.
setFormatStringLength
(
(
byte
)
0x32
)
;
retval
.
setFormatString
(
"_(\"$\"* #,##0_);_(\"$\"* \\(#,##0\\);_(\"$\"* \"-\"_);_(@_)"
)
;
break
;
case
5
:
retval
.
setIndexCode
(
(
short
)
0x29
)
;
retval
.
setFormatStringLength
(
(
byte
)
0x29
)
;
retval
.
setFormatString
(
"_(* #,##0_);_(* \\(#,##0\\);_(* \"-\"_);_(@_)"
)
;
break
;
case
6
:
retval
.
setIndexCode
(
(
short
)
0x2c
)
;
retval
.
setFormatStringLength
(
(
byte
)
0x3a
)
;
retval
.
setFormatString
(
"_(\"$\"* #,##0.00_);_(\"$\"* \\(#,##0.00\\);_(\"$\"* \"-\"??_);_(@_)"
)
;
break
;
case
7
:
retval
.
setIndexCode
(
(
short
)
0x2b
)
;
retval
.
setFormatStringLength
(
(
byte
)
0x31
)
;
retval
.
setFormatString
(
"_(* #,##0.00_);_(* \\(#,##0.00\\);_(* \"-\"??_);_(@_)"
)
;
break
;
}
return
retval
;
}
protected
Record
createExtendedFormat
(
int
id
)
{
ExtendedFormatRecord
retval
=
new
ExtendedFormatRecord
(
)
;
switch
(
id
)
{
case
0
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
1
:
retval
.
setFontIndex
(
(
short
)
1
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
2
:
retval
.
setFontIndex
(
(
short
)
1
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
3
:
retval
.
setFontIndex
(
(
short
)
2
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
4
:
retval
.
setFontIndex
(
(
short
)
2
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
5
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
6
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
7
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
8
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
9
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
10
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
11
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
12
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
13
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
14
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff400
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
15
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0
)
;
retval
.
setCellOptions
(
(
short
)
0x1
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0x0
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
16
:
retval
.
setFontIndex
(
(
short
)
1
)
;
retval
.
setFormatIndex
(
(
short
)
0x2b
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff800
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
17
:
retval
.
setFontIndex
(
(
short
)
1
)
;
retval
.
setFormatIndex
(
(
short
)
0x29
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff800
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
18
:
retval
.
setFontIndex
(
(
short
)
1
)
;
retval
.
setFormatIndex
(
(
short
)
0x2c
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff800
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
19
:
retval
.
setFontIndex
(
(
short
)
1
)
;
retval
.
setFormatIndex
(
(
short
)
0x2a
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff800
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
20
:
retval
.
setFontIndex
(
(
short
)
1
)
;
retval
.
setFormatIndex
(
(
short
)
0x9
)
;
retval
.
setCellOptions
(
(
short
)
0xfffffff5
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0xfffff800
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
21
:
retval
.
setFontIndex
(
(
short
)
5
)
;
retval
.
setFormatIndex
(
(
short
)
0x0
)
;
retval
.
setCellOptions
(
(
short
)
0x1
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0x800
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
22
:
retval
.
setFontIndex
(
(
short
)
6
)
;
retval
.
setFormatIndex
(
(
short
)
0x0
)
;
retval
.
setCellOptions
(
(
short
)
0x1
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0x5c00
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
23
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0x31
)
;
retval
.
setCellOptions
(
(
short
)
0x1
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0x5c00
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
24
:
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0x8
)
;
retval
.
setCellOptions
(
(
short
)
0x1
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0x5c00
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
case
25
:
retval
.
setFontIndex
(
(
short
)
6
)
;
retval
.
setFormatIndex
(
(
short
)
0x8
)
;
retval
.
setCellOptions
(
(
short
)
0x1
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0x5c00
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
break
;
}
return
retval
;
}
protected
ExtendedFormatRecord
createExtendedFormat
(
)
{
ExtendedFormatRecord
retval
=
new
ExtendedFormatRecord
(
)
;
retval
.
setFontIndex
(
(
short
)
0
)
;
retval
.
setFormatIndex
(
(
short
)
0x0
)
;
retval
.
setCellOptions
(
(
short
)
0x1
)
;
retval
.
setAlignmentOptions
(
(
short
)
0x20
)
;
retval
.
setIndentionOptions
(
(
short
)
0
)
;
retval
.
setBorderOptions
(
(
short
)
0
)
;
retval
.
setPaletteOptions
(
(
short
)
0
)
;
retval
.
setAdtlPaletteOptions
(
(
short
)
0
)
;
retval
.
setFillPaletteOptions
(
(
short
)
0x20c0
)
;
retval
.
setTopBorderPaletteIdx
(
HSSFColor
.
BLACK
.
index
)
;
retval
.
setBottomBorderPaletteIdx
(
HSSFColor
.
BLACK
.
index
)
;
retval
.
setLeftBorderPaletteIdx
(
HSSFColor
.
BLACK
.
index
)
;
retval
.
setRightBorderPaletteIdx
(
HSSFColor
.
BLACK
.
index
)
;
return
retval
;
}
protected
Record
createStyle
(
int
id
)
{
StyleRecord
retval
=
new
StyleRecord
(
)
;
switch
(
id
)
{
case
0
:
retval
.
setIndex
(
(
short
)
0xffff8010
)
;
retval
.
setBuiltin
(
(
byte
)
3
)
;
retval
.
setOutlineStyleLevel
(
(
byte
)
0xffffffff
)
;
break
;
case
1
:
retval
.
setIndex
(
(
short
)
0xffff8011
)
;
retval
.
setBuiltin
(
(
byte
)
6
)
;
retval
.
setOutlineStyleLevel
(
(
byte
)
0xffffffff
)
;
break
;
case
2
:
retval
.
setIndex
(
(
short
)
0xffff8012
)
;
retval
.
setBuiltin
(
(
byte
)
4
)
;
retval
.
setOutlineStyleLevel
(
(
byte
)
0xffffffff
)
;
break
;
case
3
:
retval
.
setIndex
(
(
short
)
0xffff8013
)
;
retval
.
setBuiltin
(
(
byte
)
7
)
;
retval
.
setOutlineStyleLevel
(
(
byte
)
0xffffffff
)
;
break
;
case
4
:
retval
.
setIndex
(
(
short
)
0xffff8000
)
;
retval
.
setBuiltin
(
(
byte
)
0
)
;
retval
.
setOutlineStyleLevel
(
(
byte
)
0xffffffff
)
;
break
;
case
5
:
retval
.
setIndex
(
(
short
)
0xffff8014
)
;
retval
.
setBuiltin
(
(
byte
)
5
)
;
retval
.
setOutlineStyleLevel
(
(
byte
)
0xffffffff
)
;
break
;
}
return
retval
;
}
protected
PaletteRecord
createPalette
(
)
{
return
new
PaletteRecord
(
PaletteRecord
.
sid
)
;
}
protected
Record
createUseSelFS
(
)
{
UseSelFSRecord
retval
=
new
UseSelFSRecord
(
)
;
retval
.
setFlag
(
(
short
)
0
)
;
return
retval
;
}
protected
Record
createBoundSheet
(
int
id
)
{
BoundSheetRecord
retval
=
new
BoundSheetRecord
(
)
;
switch
(
id
)
{
case
0
:
retval
.
setPositionOfBof
(
0x0
)
;
retval
.
setOptionFlags
(
(
short
)
0
)
;
retval
.
setSheetnameLength
(
(
byte
)
0x6
)
;
retval
.
setCompressedUnicodeFlag
(
(
byte
)
0
)
;
retval
.
setSheetname
(
"Sheet1"
)
;
break
;
case
1
:
retval
.
setPositionOfBof
(
0x0
)
;
retval
.
setOptionFlags
(
(
short
)
0
)
;
retval
.
setSheetnameLength
(
(
byte
)
0x6
)
;
retval
.
setCompressedUnicodeFlag
(
(
byte
)
0
)
;
retval
.
setSheetname
(
"Sheet2"
)
;
break
;
case
2
:
retval
.
setPositionOfBof
(
0x0
)
;
retval
.
setOptionFlags
(
(
short
)
0
)
;
retval
.
setSheetnameLength
(
(
byte
)
0x6
)
;
retval
.
setCompressedUnicodeFlag
(
(
byte
)
0
)
;
retval
.
setSheetname
(
"Sheet3"
)
;
break
;
}
return
retval
;
}
protected
Record
createCountry
(
)
{
CountryRecord
retval
=
new
CountryRecord
(
)
;
retval
.
setDefaultCountry
(
(
short
)
1
)
;
if
(
Locale
.
getDefault
(
)
.
toString
(
)
.
equals
(
"ru_RU"
)
)
{
retval
.
setCurrentCountry
(
(
short
)
7
)
;
}
else
{
retval
.
setCurrentCountry
(
(
short
)
1
)
;
}
return
retval
;
}
protected
Record
createSST
(
)
{
return
new
SSTRecord
(
)
;
}
protected
Record
createExtendedSST
(
)
{
ExtSSTRecord
retval
=
new
ExtSSTRecord
(
)
;
retval
.
setNumStringsPerBucket
(
(
short
)
0x8
)
;
return
retval
;
}
protected
Record
createEOF
(
)
{
return
new
EOFRecord
(
)
;
}
public
SheetReferences
getSheetReferences
(
)
{
SheetReferences
refs
=
new
SheetReferences
(
)
;
if
(
externSheet
!=
null
)
{
for
(
int
k
=
0
;
k
<
externSheet
.
getNumOfREFStructures
(
)
;
k
++
)
{
String
sheetName
=
findSheetNameFromExternSheet
(
(
short
)
k
)
;
refs
.
addSheetReference
(
sheetName
,
k
)
;
}
}
return
refs
;
}
public
String
findSheetNameFromExternSheet
(
short
num
)
{
String
result
=
""
;
short
indexToSheet
=
externSheet
.
getREFRecordAt
(
num
)
.
getIndexToFirstSupBook
(
)
;
if
(
indexToSheet
>
-
1
)
{
result
=
getSheetName
(
indexToSheet
)
;
}
return
result
;
}
public
int
getSheetIndexFromExternSheetIndex
(
int
externSheetNumber
)
{
if
(
externSheetNumber
>=
externSheet
.
getNumOfREFStructures
(
)
)
return
-
1
;
else
return
externSheet
.
getREFRecordAt
(
externSheetNumber
)
.
getIndexToFirstSupBook
(
)
;
}
public
short
checkExternSheet
(
int
sheetNumber
)
{
int
i
=
0
;
boolean
flag
=
false
;
short
result
=
0
;
if
(
externSheet
==
null
)
{
externSheet
=
createExternSheet
(
)
;
}
while
(
i
<
externSheet
.
getNumOfREFStructures
(
)
&&
!
flag
)
{
ExternSheetSubRecord
record
=
externSheet
.
getREFRecordAt
(
i
)
;
if
(
record
.
getIndexToFirstSupBook
(
)
==
sheetNumber
&&
record
.
getIndexToLastSupBook
(
)
==
sheetNumber
)
{
flag
=
true
;
result
=
(
short
)
i
;
}
++
i
;
}
if
(
!
flag
)
{
result
=
addSheetIndexToExternSheet
(
(
short
)
sheetNumber
)
;
}
return
result
;
}
private
short
addSheetIndexToExternSheet
(
short
sheetNumber
)
{
short
result
;
ExternSheetSubRecord
record
=
new
ExternSheetSubRecord
(
)
;
record
.
setIndexToFirstSupBook
(
sheetNumber
)
;
record
.
setIndexToLastSupBook
(
sheetNumber
)
;
externSheet
.
addREFRecord
(
record
)
;
externSheet
.
setNumOfREFStructures
(
(
short
)
(
externSheet
.
getNumOfREFStructures
(
)
+
1
)
)
;
result
=
(
short
)
(
externSheet
.
getNumOfREFStructures
(
)
-
1
)
;
return
result
;
}
public
int
getNumNames
(
)
{
int
result
=
names
.
size
(
)
;
return
result
;
}
public
NameRecord
getNameRecord
(
int
index
)
{
NameRecord
result
=
(
NameRecord
)
names
.
get
(
index
)
;
return
result
;
}
public
NameRecord
createName
(
)
{
NameRecord
name
=
new
NameRecord
(
)
;
int
idx
=
findFirstRecordLocBySid
(
ExternSheetRecord
.
sid
)
;
if
(
idx
==
-
1
)
idx
=
findFirstRecordLocBySid
(
SupBookRecord
.
sid
)
;
if
(
idx
==
-
1
)
idx
=
findFirstRecordLocBySid
(
CountryRecord
.
sid
)
;
records
.
add
(
idx
+
names
.
size
(
)
+
1
,
name
)
;
names
.
add
(
name
)
;
return
name
;
}
public
NameRecord
addName
(
NameRecord
name
)
{
int
idx
=
findFirstRecordLocBySid
(
ExternSheetRecord
.
sid
)
;
if
(
idx
==
-
1
)
idx
=
findFirstRecordLocBySid
(
SupBookRecord
.
sid
)
;
if
(
idx
==
-
1
)
idx
=
findFirstRecordLocBySid
(
CountryRecord
.
sid
)
;
records
.
add
(
idx
+
names
.
size
(
)
+
1
,
name
)
;
names
.
add
(
name
)
;
return
name
;
}
public
NameRecord
createBuiltInName
(
byte
builtInName
,
int
index
)
{
if
(
index
==
-
1
||
index
+
1
>
(
int
)
Short
.
MAX_VALUE
)
throw
new
IllegalArgumentException
(
"Index is not valid ["
+
index
+
"]"
)
;
NameRecord
name
=
new
NameRecord
(
builtInName
,
(
short
)
(
index
)
)
;
addName
(
name
)
;
return
name
;
}
public
void
removeName
(
int
namenum
)
{
if
(
names
.
size
(
)
>
namenum
)
{
int
idx
=
findFirstRecordLocBySid
(
NameRecord
.
sid
)
;
records
.
remove
(
idx
+
namenum
)
;
names
.
remove
(
namenum
)
;
}
}
protected
ExternSheetRecord
createExternSheet
(
)
{
ExternSheetRecord
externSheet
=
new
ExternSheetRecord
(
)
;
int
idx
=
findFirstRecordLocBySid
(
CountryRecord
.
sid
)
;
records
.
add
(
idx
+
1
,
externSheet
)
;
SupBookRecord
supbook
=
new
SupBookRecord
(
)
;
supbook
.
setNumberOfSheets
(
(
short
)
getNumSheets
(
)
)
;
records
.
add
(
idx
+
1
,
supbook
)
;
return
externSheet
;
}
public
short
getFormat
(
String
format
,
boolean
createIfNotFound
)
{
Iterator
iterator
;
for
(
iterator
=
formats
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
FormatRecord
r
=
(
FormatRecord
)
iterator
.
next
(
)
;
if
(
r
.
getFormatString
(
)
.
equals
(
format
)
)
{
return
r
.
getIndexCode
(
)
;
}
}
if
(
createIfNotFound
)
{
return
createFormat
(
format
)
;
}
return
-
1
;
}
public
ArrayList
getFormats
(
)
{
return
formats
;
}
public
short
createFormat
(
String
format
)
{
FormatRecord
rec
=
new
FormatRecord
(
)
;
maxformatid
=
maxformatid
>=
(
short
)
0xa4
?
(
short
)
(
maxformatid
+
1
)
:
(
short
)
0xa4
;
rec
.
setIndexCode
(
maxformatid
)
;
rec
.
setFormatStringLength
(
(
byte
)
format
.
length
(
)
)
;
rec
.
setFormatString
(
format
)
;
int
pos
=
0
;
while
(
pos
<
records
.
size
(
)
&&
records
.
get
(
pos
)
.
getSid
(
)
!=
FormatRecord
.
sid
)
pos
++
;
pos
+=
formats
.
size
(
)
;
formats
.
add
(
rec
)
;
records
.
add
(
pos
,
rec
)
;
return
maxformatid
;
}
public
Record
findFirstRecordBySid
(
short
sid
)
{
for
(
Iterator
iterator
=
records
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Record
record
=
(
Record
)
iterator
.
next
(
)
;
if
(
record
.
getSid
(
)
==
sid
)
{
return
record
;
}
}
return
null
;
}
public
int
findFirstRecordLocBySid
(
short
sid
)
{
int
index
=
0
;
for
(
Iterator
iterator
=
records
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Record
record
=
(
Record
)
iterator
.
next
(
)
;
if
(
record
.
getSid
(
)
==
sid
)
{
return
index
;
}
index
++
;
}
return
-
1
;
}
public
Record
findNextRecordBySid
(
short
sid
,
int
pos
)
{
int
matches
=
0
;
for
(
Iterator
iterator
=
records
.
iterator
(
)
;
iterator
.
hasNext
(
)
;
)
{
Record
record
=
(
Record
)
iterator
.
next
(
)
;
if
(
record
.
getSid
(
)
==
sid
)
{
if
(
matches
++
==
pos
)
return
record
;
}
}
return
null
;
}
public
List
getRecords
(
)
{
return
records
.
getRecords
(
)
;
}
public
boolean
isUsing1904DateWindowing
(
)
{
return
uses1904datewindowing
;
}
public
PaletteRecord
getCustomPalette
(
)
{
PaletteRecord
palette
;
int
palettePos
=
records
.
getPalettepos
(
)
;
if
(
palettePos
!=
-
1
)
{
Record
rec
=
records
.
get
(
palettePos
)
;
if
(
rec
instanceof
PaletteRecord
)
{
palette
=
(
PaletteRecord
)
rec
;
}
else
throw
new
RuntimeException
(
"InternalError: Expected PaletteRecord but got a '"
+
rec
+
"'"
)
;
}
else
{
palette
=
createPalette
(
)
;
records
.
add
(
1
,
palette
)
;
records
.
setPalettepos
(
1
)
;
}
return
palette
;
}
}
