package
org
.
apache
.
poi
.
hpsf
;
import
org
.
apache
.
poi
.
util
.
LittleEndian
;
public
class
TypeReader
{
public
static
Object
read
(
final
byte
[
]
src
,
int
offset
,
int
length
,
final
int
type
)
{
Object
value
;
length
=
length
-
LittleEndian
.
INT_SIZE
;
switch
(
type
)
{
case
Variant
.
VT_EMPTY
:
{
value
=
null
;
break
;
}
case
Variant
.
VT_I2
:
{
value
=
new
Integer
(
LittleEndian
.
getUShort
(
src
,
offset
)
)
;
break
;
}
case
Variant
.
VT_I4
:
{
value
=
new
Long
(
LittleEndian
.
getUInt
(
src
,
offset
)
)
;
break
;
}
case
Variant
.
VT_FILETIME
:
{
final
long
low
=
LittleEndian
.
getUInt
(
src
,
offset
)
;
offset
+=
LittleEndian
.
INT_SIZE
;
final
long
high
=
LittleEndian
.
getUInt
(
src
,
offset
)
;
value
=
Util
.
filetimeToDate
(
(
int
)
high
,
(
int
)
low
)
;
break
;
}
case
Variant
.
VT_LPSTR
:
{
final
int
first
=
offset
+
LittleEndian
.
INT_SIZE
;
long
last
=
first
+
LittleEndian
.
getUInt
(
src
,
offset
)
-
1
;
offset
+=
LittleEndian
.
INT_SIZE
;
while
(
src
[
(
int
)
last
]
==
0
&&
first
<=
last
)
last
--
;
value
=
new
String
(
src
,
(
int
)
first
,
(
int
)
(
last
-
first
+
1
)
)
;
break
;
}
case
Variant
.
VT_LPWSTR
:
{
final
int
first
=
offset
+
LittleEndian
.
INT_SIZE
;
long
last
=
first
+
LittleEndian
.
getUInt
(
src
,
offset
)
-
1
;
long
l
=
last
-
first
;
offset
+=
LittleEndian
.
INT_SIZE
;
StringBuffer
b
=
new
StringBuffer
(
(
int
)
(
last
-
first
)
)
;
for
(
int
i
=
0
;
i
<=
l
;
i
++
)
{
final
int
i1
=
offset
+
(
i
*
2
)
;
final
int
i2
=
i1
+
1
;
b
.
append
(
(
char
)
(
(
src
[
i2
]
<<
8
)
+
src
[
i1
]
)
)
;
}
while
(
b
.
charAt
(
b
.
length
(
)
-
1
)
==
0x00
)
b
.
setLength
(
b
.
length
(
)
-
1
)
;
value
=
b
.
toString
(
)
;
break
;
}
case
Variant
.
VT_CF
:
{
final
byte
[
]
v
=
new
byte
[
length
]
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
v
[
i
]
=
src
[
(
int
)
(
offset
+
i
)
]
;
value
=
v
;
break
;
}
case
Variant
.
VT_BOOL
:
{
long
bool
=
LittleEndian
.
getUInt
(
src
,
offset
)
;
if
(
bool
!=
0
)
value
=
new
Boolean
(
true
)
;
else
value
=
new
Boolean
(
false
)
;
break
;
}
default
:
{
final
byte
[
]
v
=
new
byte
[
length
]
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
v
[
i
]
=
src
[
(
int
)
(
offset
+
i
)
]
;
value
=
v
;
break
;
}
}
return
value
;
}
}
