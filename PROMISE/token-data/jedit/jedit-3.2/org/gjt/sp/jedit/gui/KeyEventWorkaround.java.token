package
org
.
gjt
.
sp
.
jedit
.
gui
;
import
java
.
awt
.
event
.
*
;
import
java
.
awt
.
*
;
public
class
KeyEventWorkaround
{
public
static
final
int
ALT_GRAPH_MASK
=
1
<<
5
;
public
static
KeyEvent
processKeyEvent
(
KeyEvent
evt
)
{
int
keyCode
=
evt
.
getKeyCode
(
)
;
char
ch
=
evt
.
getKeyChar
(
)
;
switch
(
evt
.
getID
(
)
)
{
case
KeyEvent
.
KEY_PRESSED
:
if
(
keyCode
==
KeyEvent
.
VK_CONTROL
||
keyCode
==
KeyEvent
.
VK_SHIFT
||
keyCode
==
KeyEvent
.
VK_ALT
||
keyCode
==
KeyEvent
.
VK_META
||
keyCode
==
'\0'
)
return
null
;
if
(
!
java14
)
handleBrokenKeys
(
evt
.
getModifiers
(
)
,
keyCode
)
;
return
evt
;
case
KeyEvent
.
KEY_TYPED
:
if
(
(
ch
<
0x20
||
ch
==
0x7f
||
ch
==
0xff
)
&&
ch
!=
'\b'
)
return
null
;
if
(
(
evt
.
isControlDown
(
)
^
evt
.
isAltDown
(
)
)
||
evt
.
isMetaDown
(
)
)
return
null
;
if
(
!
java14
)
{
if
(
last
==
LAST_BROKEN
&&
System
.
currentTimeMillis
(
)
-
lastKeyTime
<
750
&&
!
Character
.
isLetter
(
ch
)
)
{
last
=
LAST_NOTHING
;
return
null
;
}
else
if
(
last
==
LAST_ALT
&&
System
.
currentTimeMillis
(
)
-
lastKeyTime
<
750
)
{
last
=
LAST_NOTHING
;
return
null
;
}
}
return
evt
;
default
:
return
evt
;
}
}
private
static
boolean
java14
;
private
static
long
lastKeyTime
;
private
static
int
last
;
private
static
final
int
LAST_NOTHING
=
0
;
private
static
final
int
LAST_ALTGR
=
1
;
private
static
final
int
LAST_ALT
=
2
;
private
static
final
int
LAST_BROKEN
=
3
;
static
{
java14
=
(
System
.
getProperty
(
"java.version"
)
.
compareTo
(
"1.4"
)
>=
0
)
;
}
private
static
void
handleBrokenKeys
(
int
modifiers
,
int
keyCode
)
{
if
(
modifiers
==
(
KeyEvent
.
ALT_MASK
|
KeyEvent
.
CTRL_MASK
)
||
modifiers
==
(
KeyEvent
.
ALT_MASK
|
KeyEvent
.
CTRL_MASK
|
KeyEvent
.
SHIFT_MASK
)
)
{
last
=
LAST_ALTGR
;
return
;
}
else
if
(
(
modifiers
&
(
~
(
ALT_GRAPH_MASK
|
KeyEvent
.
SHIFT_MASK
)
)
)
==
0
)
{
last
=
LAST_NOTHING
;
return
;
}
if
(
(
modifiers
&
KeyEvent
.
ALT_MASK
)
!=
0
)
last
=
LAST_ALT
;
else
if
(
(
keyCode
<
KeyEvent
.
VK_A
||
keyCode
>
KeyEvent
.
VK_Z
)
&&
keyCode
!=
KeyEvent
.
VK_LEFT
&&
keyCode
!=
KeyEvent
.
VK_RIGHT
&&
keyCode
!=
KeyEvent
.
VK_UP
&&
keyCode
!=
KeyEvent
.
VK_DOWN
&&
keyCode
!=
KeyEvent
.
VK_DELETE
&&
keyCode
!=
KeyEvent
.
VK_BACK_SPACE
&&
keyCode
!=
KeyEvent
.
VK_TAB
&&
keyCode
!=
KeyEvent
.
VK_ENTER
)
last
=
LAST_BROKEN
;
else
last
=
LAST_NOTHING
;
lastKeyTime
=
System
.
currentTimeMillis
(
)
;
}
}
