package
org
.
gjt
.
sp
.
jedit
.
gui
;
import
javax
.
swing
.
*
;
import
java
.
awt
.
event
.
*
;
import
java
.
awt
.
Component
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
StringTokenizer
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
class
OpenWithEncodingMenu
extends
EnhancedMenu
{
public
OpenWithEncodingMenu
(
)
{
super
(
"open-encoding"
)
;
ActionListener
listener
=
new
ActionListener
(
)
{
public
void
actionPerformed
(
ActionEvent
evt
)
{
Hashtable
props
=
new
Hashtable
(
)
;
props
.
put
(
"encoding"
,
evt
.
getActionCommand
(
)
)
;
jEdit
.
showOpenFileDialog
(
EditAction
.
getView
(
(
Component
)
evt
.
getSource
(
)
)
,
props
)
;
}
}
;
String
systemEncoding
=
System
.
getProperty
(
"file.encoding"
)
;
JMenuItem
mi
=
new
JMenuItem
(
jEdit
.
getProperty
(
"os-encoding"
)
)
;
mi
.
setActionCommand
(
systemEncoding
)
;
mi
.
addActionListener
(
listener
)
;
add
(
mi
)
;
mi
=
new
JMenuItem
(
jEdit
.
getProperty
(
"jedit-encoding"
)
)
;
mi
.
setActionCommand
(
jEdit
.
getProperty
(
"buffer.encoding"
,
systemEncoding
)
)
;
mi
.
addActionListener
(
listener
)
;
add
(
mi
)
;
addSeparator
(
)
;
StringTokenizer
st
=
new
StringTokenizer
(
jEdit
.
getProperty
(
"encodings"
)
)
;
while
(
st
.
hasMoreTokens
(
)
)
{
mi
=
new
JMenuItem
(
st
.
nextToken
(
)
)
;
mi
.
addActionListener
(
listener
)
;
add
(
mi
)
;
}
addSeparator
(
)
;
add
(
GUIUtilities
.
loadMenuItem
(
"other-encoding"
)
)
;
}
}
