package
org
.
gjt
.
sp
.
jedit
.
io
;
import
java
.
awt
.
Component
;
import
java
.
io
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
abstract
class
VFS
{
public
static
final
int
READ_CAP
=
1
<<
0
;
public
static
final
int
WRITE_CAP
=
1
<<
1
;
public
static
final
int
BROWSE_CAP
=
1
<<
2
;
public
static
final
int
DELETE_CAP
=
1
<<
3
;
public
static
final
int
RENAME_CAP
=
1
<<
4
;
public
static
final
int
MKDIR_CAP
=
1
<<
5
;
public
VFS
(
String
name
)
{
this
.
name
=
name
;
}
public
String
getName
(
)
{
return
name
;
}
public
abstract
int
getCapabilities
(
)
;
public
String
showBrowseDialog
(
Object
[
]
session
,
Component
comp
)
{
return
null
;
}
public
String
getFileName
(
String
path
)
{
return
MiscUtilities
.
getFileName
(
path
)
;
}
public
String
getParentOfPath
(
String
path
)
{
return
null
;
}
public
String
constructPath
(
String
parent
,
String
path
)
{
return
parent
+
path
;
}
public
char
getFileSeparator
(
)
{
return
'/'
;
}
public
Object
createVFSSession
(
String
path
,
Component
comp
)
{
return
new
Object
(
)
;
}
public
boolean
load
(
View
view
,
Buffer
buffer
,
String
path
)
{
if
(
(
getCapabilities
(
)
&
READ_CAP
)
==
0
)
{
VFSManager
.
error
(
view
,
"vfs.not-supported.load"
,
new
String
[
]
{
name
}
)
;
return
false
;
}
Object
session
=
createVFSSession
(
path
,
view
)
;
if
(
session
==
null
)
return
false
;
BufferIORequest
request
=
new
BufferIORequest
(
BufferIORequest
.
LOAD
,
view
,
buffer
,
session
,
this
,
path
)
;
if
(
buffer
.
isTemporary
(
)
)
request
.
run
(
)
;
else
VFSManager
.
runInWorkThread
(
request
)
;
return
true
;
}
public
boolean
save
(
View
view
,
Buffer
buffer
,
String
path
)
{
if
(
(
getCapabilities
(
)
&
WRITE_CAP
)
==
0
)
{
VFSManager
.
error
(
view
,
"vfs.not-supported.save"
,
new
String
[
]
{
name
}
)
;
return
false
;
}
Object
session
=
createVFSSession
(
path
,
view
)
;
if
(
session
==
null
)
return
false
;
if
(
!
path
.
equals
(
buffer
.
getPath
(
)
)
)
buffer
.
getDocumentProperties
(
)
.
remove
(
Buffer
.
BACKED_UP
)
;
VFSManager
.
runInWorkThread
(
new
BufferIORequest
(
BufferIORequest
.
SAVE
,
view
,
buffer
,
session
,
this
,
path
)
)
;
return
true
;
}
public
boolean
insert
(
View
view
,
Buffer
buffer
,
String
path
)
{
if
(
(
getCapabilities
(
)
&
READ_CAP
)
==
0
)
{
VFSManager
.
error
(
view
,
"vfs.not-supported.load"
,
new
String
[
]
{
name
}
)
;
return
false
;
}
Object
session
=
createVFSSession
(
path
,
view
)
;
if
(
session
==
null
)
return
false
;
VFSManager
.
runInWorkThread
(
new
BufferIORequest
(
BufferIORequest
.
INSERT
,
view
,
buffer
,
session
,
this
,
path
)
)
;
return
true
;
}
public
DirectoryEntry
[
]
_listDirectory
(
Object
session
,
String
directory
,
Component
comp
)
throws
IOException
{
VFSManager
.
error
(
comp
,
"vfs.not-supported.list"
,
new
String
[
]
{
name
}
)
;
return
null
;
}
public
DirectoryEntry
_getDirectoryEntry
(
Object
session
,
String
path
,
Component
comp
)
throws
IOException
{
return
null
;
}
public
static
class
DirectoryEntry
implements
Serializable
{
public
static
final
int
FILE
=
0
;
public
static
final
int
DIRECTORY
=
1
;
public
static
final
int
FILESYSTEM
=
2
;
public
String
name
;
public
String
path
;
public
String
deletePath
;
public
int
type
;
public
long
length
;
public
boolean
hidden
;
public
DirectoryEntry
(
String
name
,
String
path
,
String
deletePath
,
int
type
,
long
length
,
boolean
hidden
)
{
this
.
name
=
name
;
this
.
path
=
path
;
this
.
deletePath
=
deletePath
;
this
.
type
=
type
;
this
.
length
=
length
;
this
.
hidden
=
hidden
;
}
public
String
toString
(
)
{
return
name
;
}
}
public
boolean
_delete
(
Object
session
,
String
path
,
Component
comp
)
throws
IOException
{
return
false
;
}
public
boolean
_rename
(
Object
session
,
String
from
,
String
to
,
Component
comp
)
throws
IOException
{
return
false
;
}
public
boolean
_mkdir
(
Object
session
,
String
directory
,
Component
comp
)
throws
IOException
{
return
false
;
}
public
void
_backup
(
Object
session
,
String
path
,
Component
comp
)
throws
IOException
{
}
public
InputStream
_createInputStream
(
Object
session
,
String
path
,
boolean
ignoreErrors
,
Component
comp
)
throws
IOException
{
VFSManager
.
error
(
comp
,
"vfs.not-supported.load"
,
new
String
[
]
{
name
}
)
;
return
null
;
}
public
OutputStream
_createOutputStream
(
Object
session
,
String
path
,
Component
comp
)
throws
IOException
{
VFSManager
.
error
(
comp
,
"vfs.not-supported.save"
,
new
String
[
]
{
name
}
)
;
return
null
;
}
public
void
_saveComplete
(
Object
session
,
Buffer
buffer
,
Component
comp
)
throws
IOException
{
}
public
void
_endVFSSession
(
Object
session
,
Component
comp
)
throws
IOException
{
}
private
String
name
;
}
