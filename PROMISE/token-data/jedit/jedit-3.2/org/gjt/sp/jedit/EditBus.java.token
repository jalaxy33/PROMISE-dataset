package
org
.
gjt
.
sp
.
jedit
;
import
java
.
util
.
*
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
EditBus
{
public
static
void
addToBus
(
EBComponent
comp
)
{
synchronized
(
components
)
{
components
.
addElement
(
comp
)
;
copyComponents
=
null
;
}
}
public
static
void
removeFromBus
(
EBComponent
comp
)
{
synchronized
(
components
)
{
components
.
removeElement
(
comp
)
;
copyComponents
=
null
;
}
}
public
static
EBComponent
[
]
getComponents
(
)
{
synchronized
(
components
)
{
if
(
copyComponents
==
null
)
{
copyComponents
=
new
EBComponent
[
components
.
size
(
)
]
;
components
.
copyInto
(
copyComponents
)
;
}
return
copyComponents
;
}
}
public
static
void
send
(
EBMessage
message
)
{
Log
.
log
(
Log
.
DEBUG
,
EditBus
.
class
,
message
.
toString
(
)
)
;
EBComponent
[
]
comps
=
getComponents
(
)
;
for
(
int
i
=
0
;
i
<
comps
.
length
;
i
++
)
{
try
{
comps
[
i
]
.
handleMessage
(
message
)
;
if
(
message
.
isVetoed
(
)
)
break
;
}
catch
(
Throwable
t
)
{
Log
.
log
(
Log
.
ERROR
,
EditBus
.
class
,
"Exception"
+
" while sending message on EditBus:"
)
;
Log
.
log
(
Log
.
ERROR
,
EditBus
.
class
,
t
)
;
}
}
}
public
static
Object
[
]
getNamedList
(
Object
tag
)
{
Object
[
]
list
=
(
Object
[
]
)
listArrays
.
get
(
tag
)
;
if
(
list
!=
null
)
return
list
;
Vector
listVector
=
(
Vector
)
listVectors
.
get
(
tag
)
;
if
(
listVector
!=
null
)
{
list
=
new
Object
[
listVector
.
size
(
)
]
;
listVector
.
copyInto
(
list
)
;
listArrays
.
put
(
tag
,
list
)
;
return
list
;
}
return
null
;
}
public
static
Enumeration
getNamedLists
(
)
{
return
listVectors
.
keys
(
)
;
}
public
static
void
addToNamedList
(
Object
tag
,
Object
entry
)
{
Vector
listVector
=
(
Vector
)
listVectors
.
get
(
tag
)
;
if
(
listVector
==
null
)
{
listVector
=
new
Vector
(
)
;
listVectors
.
put
(
tag
,
listVector
)
;
}
listVector
.
addElement
(
entry
)
;
listArrays
.
remove
(
tag
)
;
}
public
static
void
removeFromNamedList
(
Object
tag
,
Object
entry
)
{
Vector
listVector
=
(
Vector
)
listVectors
.
get
(
tag
)
;
if
(
listVector
==
null
)
return
;
listVector
.
removeElement
(
entry
)
;
listArrays
.
remove
(
tag
)
;
}
private
static
Vector
components
=
new
Vector
(
)
;
private
static
EBComponent
[
]
copyComponents
;
private
static
Hashtable
listVectors
=
new
Hashtable
(
)
;
private
static
Hashtable
listArrays
=
new
Hashtable
(
)
;
private
EditBus
(
)
{
}
}
