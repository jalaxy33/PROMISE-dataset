package
org
.
gjt
.
sp
.
jedit
.
gui
;
import
javax
.
swing
.
*
;
import
javax
.
swing
.
event
.
*
;
import
java
.
awt
.
*
;
import
java
.
awt
.
event
.
*
;
import
java
.
util
.
Vector
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
class
CompleteWord
extends
JWindow
{
public
CompleteWord
(
View
view
,
String
word
,
Vector
completions
,
Point
location
)
{
super
(
view
)
;
this
.
view
=
view
;
this
.
word
=
word
;
words
=
new
JList
(
completions
)
;
words
.
setVisibleRowCount
(
Math
.
min
(
completions
.
size
(
)
,
8
)
)
;
words
.
addMouseListener
(
new
MouseHandler
(
)
)
;
words
.
setSelectedIndex
(
0
)
;
words
.
setSelectionMode
(
ListSelectionModel
.
SINGLE_SELECTION
)
;
JScrollPane
scroller
=
new
JScrollPane
(
words
,
JScrollPane
.
VERTICAL_SCROLLBAR_ALWAYS
,
JScrollPane
.
HORIZONTAL_SCROLLBAR_NEVER
)
;
getContentPane
(
)
.
add
(
scroller
,
BorderLayout
.
CENTER
)
;
GUIUtilities
.
requestFocus
(
this
,
words
)
;
pack
(
)
;
setLocation
(
location
)
;
show
(
)
;
KeyHandler
keyHandler
=
new
KeyHandler
(
)
;
addKeyListener
(
keyHandler
)
;
getRootPane
(
)
.
addKeyListener
(
keyHandler
)
;
words
.
addKeyListener
(
keyHandler
)
;
view
.
setKeyEventInterceptor
(
keyHandler
)
;
}
public
void
dispose
(
)
{
view
.
setKeyEventInterceptor
(
null
)
;
super
.
dispose
(
)
;
}
private
View
view
;
private
String
word
;
private
JList
words
;
private
void
insertSelected
(
)
{
view
.
getTextArea
(
)
.
setSelectedText
(
(
(
String
)
words
.
getSelectedValue
(
)
)
.
substring
(
word
.
length
(
)
)
)
;
dispose
(
)
;
}
class
KeyHandler
extends
KeyAdapter
{
public
void
keyPressed
(
KeyEvent
evt
)
{
switch
(
evt
.
getKeyCode
(
)
)
{
case
KeyEvent
.
VK_TAB
:
case
KeyEvent
.
VK_ENTER
:
insertSelected
(
)
;
evt
.
consume
(
)
;
break
;
case
KeyEvent
.
VK_ESCAPE
:
dispose
(
)
;
evt
.
consume
(
)
;
break
;
case
KeyEvent
.
VK_UP
:
if
(
getFocusOwner
(
)
==
words
)
return
;
int
selected
=
words
.
getSelectedIndex
(
)
;
if
(
selected
==
0
)
return
;
selected
=
selected
-
1
;
words
.
setSelectedIndex
(
selected
)
;
words
.
ensureIndexIsVisible
(
selected
)
;
evt
.
consume
(
)
;
break
;
case
KeyEvent
.
VK_DOWN
:
if
(
getFocusOwner
(
)
==
words
)
return
;
selected
=
words
.
getSelectedIndex
(
)
;
if
(
selected
==
words
.
getModel
(
)
.
getSize
(
)
-
1
)
return
;
selected
=
selected
+
1
;
words
.
setSelectedIndex
(
selected
)
;
words
.
ensureIndexIsVisible
(
selected
)
;
evt
.
consume
(
)
;
break
;
default
:
dispose
(
)
;
view
.
processKeyEvent
(
evt
)
;
break
;
}
}
public
void
keyTyped
(
KeyEvent
evt
)
{
evt
=
KeyEventWorkaround
.
processKeyEvent
(
evt
)
;
if
(
evt
==
null
)
return
;
else
{
dispose
(
)
;
view
.
processKeyEvent
(
evt
)
;
}
}
}
class
MouseHandler
extends
MouseAdapter
{
public
void
mouseClicked
(
MouseEvent
evt
)
{
insertSelected
(
)
;
}
}
}
