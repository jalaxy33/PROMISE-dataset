package
org
.
gjt
.
sp
.
jedit
;
import
javax
.
swing
.
JPopupMenu
;
import
java
.
awt
.
event
.
ActionEvent
;
import
java
.
awt
.
event
.
ActionListener
;
import
java
.
awt
.
Component
;
import
java
.
util
.
EventObject
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
abstract
class
EditAction
{
public
EditAction
(
String
name
)
{
this
(
name
,
true
)
;
}
EditAction
(
String
name
,
boolean
plugin
)
{
this
.
name
=
name
;
this
.
plugin
=
plugin
;
}
public
final
String
getName
(
)
{
return
name
;
}
public
boolean
isPluginAction
(
)
{
return
plugin
;
}
public
void
invoke
(
View
view
)
{
ActionEvent
evt
=
new
ActionEvent
(
view
,
ActionEvent
.
ACTION_PERFORMED
,
null
)
;
actionPerformed
(
evt
)
;
}
public
void
actionPerformed
(
ActionEvent
evt
)
{
}
public
static
View
getView
(
EventObject
evt
)
{
if
(
evt
!=
null
)
{
Object
o
=
evt
.
getSource
(
)
;
if
(
o
instanceof
Component
)
return
getView
(
(
Component
)
o
)
;
}
return
null
;
}
public
static
Buffer
getBuffer
(
EventObject
evt
)
{
View
view
=
getView
(
evt
)
;
if
(
view
!=
null
)
return
view
.
getBuffer
(
)
;
return
null
;
}
public
static
View
getView
(
Component
comp
)
{
for
(
;
;
)
{
if
(
comp
instanceof
View
)
return
(
View
)
comp
;
else
if
(
comp
instanceof
JPopupMenu
)
comp
=
(
(
JPopupMenu
)
comp
)
.
getInvoker
(
)
;
else
if
(
comp
!=
null
)
comp
=
comp
.
getParent
(
)
;
else
break
;
}
return
null
;
}
public
boolean
isToggle
(
)
{
return
false
;
}
public
boolean
isSelected
(
View
view
)
{
return
isSelected
(
(
Component
)
view
)
;
}
public
boolean
isSelected
(
Component
comp
)
{
return
false
;
}
public
boolean
noRepeat
(
)
{
return
false
;
}
public
boolean
noRecord
(
)
{
return
false
;
}
public
String
getCode
(
)
{
return
"view.getInputHandler().invokeAction("
+
"jEdit.getAction(\""
+
name
+
"\"))"
;
}
public
String
toString
(
)
{
return
name
;
}
private
String
name
;
private
boolean
plugin
;
public
static
class
Wrapper
implements
ActionListener
{
public
Wrapper
(
EditAction
action
)
{
this
.
action
=
action
;
}
public
void
actionPerformed
(
ActionEvent
evt
)
{
EditAction
.
getView
(
evt
)
.
getInputHandler
(
)
.
invokeAction
(
action
)
;
}
private
EditAction
action
;
}
}
