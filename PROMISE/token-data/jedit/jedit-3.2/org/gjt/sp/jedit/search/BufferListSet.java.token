package
org
.
gjt
.
sp
.
jedit
.
search
;
import
javax
.
swing
.
SwingUtilities
;
import
java
.
util
.
Vector
;
import
org
.
gjt
.
sp
.
jedit
.
io
.
VFSManager
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
BufferListSet
implements
SearchFileSet
{
public
BufferListSet
(
Object
[
]
files
)
{
this
.
files
=
new
Vector
(
files
.
length
)
;
for
(
int
i
=
0
;
i
<
files
.
length
;
i
++
)
{
this
.
files
.
addElement
(
(
(
Buffer
)
files
[
i
]
)
.
getPath
(
)
)
;
}
}
public
BufferListSet
(
Vector
files
)
{
this
.
files
=
files
;
}
public
Buffer
getFirstBuffer
(
View
view
)
{
return
getBuffer
(
(
String
)
files
.
elementAt
(
0
)
)
;
}
public
Buffer
getNextBuffer
(
View
view
,
Buffer
buffer
)
{
if
(
buffer
==
null
)
{
buffer
=
view
.
getBuffer
(
)
;
for
(
int
i
=
0
;
i
<
files
.
size
(
)
;
i
++
)
{
if
(
files
.
elementAt
(
i
)
.
equals
(
buffer
.
getPath
(
)
)
)
return
buffer
;
}
return
getFirstBuffer
(
view
)
;
}
else
{
for
(
int
i
=
0
;
i
<
files
.
size
(
)
-
1
;
i
++
)
{
if
(
files
.
elementAt
(
i
)
.
equals
(
buffer
.
getPath
(
)
)
)
return
getBuffer
(
(
String
)
files
.
elementAt
(
i
+
1
)
)
;
}
return
null
;
}
}
public
void
matchFound
(
final
Buffer
buffer
)
{
if
(
!
SwingUtilities
.
isEventDispatchThread
(
)
)
{
try
{
SwingUtilities
.
invokeAndWait
(
new
Runnable
(
)
{
public
void
run
(
)
{
jEdit
.
commitTemporary
(
buffer
)
;
}
}
)
;
}
catch
(
Exception
e
)
{
}
}
else
jEdit
.
commitTemporary
(
buffer
)
;
}
public
int
getBufferCount
(
)
{
return
files
.
size
(
)
;
}
public
boolean
isValid
(
)
{
return
files
.
size
(
)
!=
0
;
}
public
String
getCode
(
)
{
return
null
;
}
private
Vector
files
;
private
Buffer
getBuffer
(
final
String
path
)
{
if
(
!
SwingUtilities
.
isEventDispatchThread
(
)
)
{
final
Buffer
[
]
retVal
=
new
Buffer
[
1
]
;
try
{
SwingUtilities
.
invokeAndWait
(
new
Runnable
(
)
{
public
void
run
(
)
{
retVal
[
0
]
=
jEdit
.
openTemporary
(
null
,
null
,
path
,
false
)
;
}
}
)
;
return
retVal
[
0
]
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
this
,
e
)
;
return
null
;
}
}
else
return
jEdit
.
openTemporary
(
null
,
null
,
path
,
false
)
;
}
}
