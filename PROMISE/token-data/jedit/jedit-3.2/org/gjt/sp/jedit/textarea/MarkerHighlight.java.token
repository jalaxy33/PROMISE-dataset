package
org
.
gjt
.
sp
.
jedit
.
textarea
;
import
java
.
awt
.
*
;
import
java
.
awt
.
event
.
MouseEvent
;
import
java
.
util
.
Vector
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
class
MarkerHighlight
implements
TextAreaHighlight
{
public
void
init
(
JEditTextArea
textArea
,
TextAreaHighlight
next
)
{
this
.
textArea
=
textArea
;
this
.
next
=
next
;
}
public
void
paintHighlight
(
Graphics
gfx
,
int
line
,
int
y
)
{
if
(
textArea
.
getBuffer
(
)
.
isLoaded
(
)
&&
highlightEnabled
)
{
Buffer
buffer
=
textArea
.
getBuffer
(
)
;
if
(
buffer
.
getMarkerAtLine
(
buffer
.
virtualToPhysical
(
line
)
)
!=
null
)
{
int
firstLine
=
textArea
.
getFirstLine
(
)
;
line
-=
firstLine
;
FontMetrics
fm
=
textArea
.
getPainter
(
)
.
getFontMetrics
(
)
;
gfx
.
setColor
(
markerHighlightColor
)
;
gfx
.
fillRect
(
0
,
line
*
fm
.
getHeight
(
)
,
textArea
.
getGutter
(
)
.
getWidth
(
)
,
fm
.
getHeight
(
)
)
;
}
}
if
(
next
!=
null
)
next
.
paintHighlight
(
gfx
,
line
,
y
)
;
}
public
String
getToolTipText
(
MouseEvent
evt
)
{
if
(
textArea
.
getBuffer
(
)
.
isLoaded
(
)
&&
highlightEnabled
)
{
FontMetrics
fm
=
textArea
.
getPainter
(
)
.
getFontMetrics
(
)
;
int
line
=
textArea
.
getFirstLine
(
)
+
evt
.
getY
(
)
/
fm
.
getHeight
(
)
;
Buffer
buffer
=
textArea
.
getBuffer
(
)
;
Marker
marker
=
buffer
.
getMarkerAtLine
(
buffer
.
virtualToPhysical
(
line
)
)
;
if
(
marker
!=
null
)
{
char
shortcut
=
marker
.
getShortcut
(
)
;
if
(
shortcut
==
'\0'
)
return
jEdit
.
getProperty
(
"view.gutter.marker.no-name"
)
;
else
{
String
[
]
args
=
{
String
.
valueOf
(
shortcut
)
}
;
return
jEdit
.
getProperty
(
"view.gutter.marker"
,
args
)
;
}
}
}
if
(
next
!=
null
)
return
next
.
getToolTipText
(
evt
)
;
else
return
null
;
}
public
Color
getMarkerHighlightColor
(
)
{
return
markerHighlightColor
;
}
public
void
setMarkerHighlightColor
(
Color
markerHighlightColor
)
{
this
.
markerHighlightColor
=
markerHighlightColor
;
}
public
boolean
isHighlightEnabled
(
)
{
return
highlightEnabled
;
}
public
void
setHighlightEnabled
(
boolean
highlightEnabled
)
{
this
.
highlightEnabled
=
highlightEnabled
;
}
private
JEditTextArea
textArea
;
private
TextAreaHighlight
next
;
private
boolean
highlightEnabled
;
private
Color
markerHighlightColor
;
}
