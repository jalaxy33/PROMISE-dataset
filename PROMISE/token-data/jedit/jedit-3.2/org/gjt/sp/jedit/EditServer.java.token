package
org
.
gjt
.
sp
.
jedit
;
import
javax
.
swing
.
SwingUtilities
;
import
java
.
io
.
*
;
import
java
.
net
.
*
;
import
java
.
util
.
Random
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
EditServer
extends
Thread
{
EditServer
(
String
portFile
)
{
super
(
"jEdit server daemon ["
+
portFile
+
"]"
)
;
setDaemon
(
true
)
;
this
.
portFile
=
portFile
;
try
{
socket
=
new
ServerSocket
(
0
,
2
,
InetAddress
.
getByName
(
"127.0.0.1"
)
)
;
authKey
=
Math
.
abs
(
new
Random
(
)
.
nextInt
(
)
)
;
int
port
=
socket
.
getLocalPort
(
)
;
FileWriter
out
=
new
FileWriter
(
portFile
)
;
out
.
write
(
String
.
valueOf
(
port
)
)
;
out
.
write
(
"\n"
)
;
out
.
write
(
String
.
valueOf
(
authKey
)
)
;
out
.
write
(
"\n"
)
;
out
.
close
(
)
;
Log
.
log
(
Log
.
DEBUG
,
this
,
"jEdit server started on port "
+
socket
.
getLocalPort
(
)
)
;
Log
.
log
(
Log
.
DEBUG
,
this
,
"Authorization key is "
+
authKey
)
;
ok
=
true
;
}
catch
(
IOException
io
)
{
Log
.
log
(
Log
.
NOTICE
,
this
,
io
)
;
}
}
public
boolean
isOK
(
)
{
return
ok
;
}
public
void
run
(
)
{
try
{
for
(
;
;
)
{
Socket
client
=
socket
.
accept
(
)
;
Log
.
log
(
Log
.
MESSAGE
,
this
,
client
+
": connected"
)
;
BufferedReader
in
=
new
BufferedReader
(
new
InputStreamReader
(
client
.
getInputStream
(
)
,
"UTF8"
)
)
;
try
{
int
key
=
Integer
.
parseInt
(
in
.
readLine
(
)
)
;
if
(
key
!=
authKey
)
{
Log
.
log
(
Log
.
ERROR
,
this
,
client
+
": wrong"
+
" authorization key"
)
;
in
.
close
(
)
;
client
.
close
(
)
;
return
;
}
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
this
,
client
+
": invalid"
+
" authorization key"
)
;
in
.
close
(
)
;
client
.
close
(
)
;
return
;
}
Log
.
log
(
Log
.
DEBUG
,
this
,
client
+
": authenticated"
+
" successfully"
)
;
handleClient
(
client
,
in
)
;
client
.
close
(
)
;
}
}
catch
(
IOException
io
)
{
Log
.
log
(
Log
.
ERROR
,
this
,
io
)
;
}
}
public
static
void
handleClient
(
boolean
restore
,
String
parent
,
String
[
]
args
)
{
String
splitConfig
=
null
;
boolean
newView
=
jEdit
.
getBooleanProperty
(
"client.newView"
)
;
if
(
jEdit
.
getFirstView
(
)
==
null
||
newView
)
{
Buffer
buffer
=
jEdit
.
openFiles
(
null
,
parent
,
args
)
;
if
(
restore
)
{
if
(
jEdit
.
getFirstBuffer
(
)
==
null
)
splitConfig
=
jEdit
.
restoreOpenFiles
(
)
;
else
if
(
jEdit
.
getBooleanProperty
(
"restore.cli"
)
)
{
jEdit
.
restoreOpenFiles
(
)
;
}
}
if
(
jEdit
.
getFirstBuffer
(
)
==
null
)
buffer
=
jEdit
.
newFile
(
null
)
;
if
(
splitConfig
!=
null
)
jEdit
.
newView
(
null
,
splitConfig
)
;
else
jEdit
.
newView
(
null
,
buffer
)
;
}
else
{
View
view
=
jEdit
.
getFirstView
(
)
;
jEdit
.
openFiles
(
view
,
parent
,
args
)
;
view
.
requestFocus
(
)
;
view
.
toFront
(
)
;
return
;
}
}
void
stopServer
(
)
{
stop
(
)
;
new
File
(
portFile
)
.
delete
(
)
;
}
private
String
portFile
;
private
ServerSocket
socket
;
private
int
authKey
;
private
boolean
ok
;
private
void
handleClient
(
Socket
client
,
Reader
in
)
throws
IOException
{
final
StringBuffer
script
=
new
StringBuffer
(
)
;
char
[
]
buf
=
new
char
[
1024
]
;
int
count
;
while
(
(
count
=
in
.
read
(
buf
,
0
,
buf
.
length
)
)
!=
-
1
)
{
script
.
append
(
buf
,
0
,
count
)
;
}
SwingUtilities
.
invokeLater
(
new
Runnable
(
)
{
public
void
run
(
)
{
String
scriptString
=
script
.
toString
(
)
;
Log
.
log
(
Log
.
DEBUG
,
this
,
scriptString
)
;
BeanShell
.
eval
(
null
,
scriptString
,
false
)
;
}
}
)
;
}
}
