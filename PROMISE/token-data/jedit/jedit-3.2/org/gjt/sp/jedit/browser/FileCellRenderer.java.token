package
org
.
gjt
.
sp
.
jedit
.
browser
;
import
java
.
awt
.
*
;
import
javax
.
swing
.
*
;
import
javax
.
swing
.
tree
.
*
;
import
javax
.
swing
.
border
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
io
.
VFS
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
final
class
FileCellRenderer
extends
JLabel
implements
TreeCellRenderer
{
public
FileCellRenderer
(
)
{
Font
font
=
UIManager
.
getFont
(
"Tree.font"
)
;
setFont
(
new
Font
(
font
.
getFamily
(
)
,
font
.
getStyle
(
)
,
font
.
getSize
(
)
)
)
;
UIDefaults
metalDefaults
=
new
javax
.
swing
.
plaf
.
metal
.
MetalLookAndFeel
(
)
.
getDefaults
(
)
;
fileIcon
=
metalDefaults
.
getIcon
(
"FileView.fileIcon"
)
;
dirIcon
=
metalDefaults
.
getIcon
(
"FileView.directoryIcon"
)
;
filesystemIcon
=
metalDefaults
.
getIcon
(
"FileView.hardDriveIcon"
)
;
loadingIcon
=
metalDefaults
.
getIcon
(
"FileView.hardDriveIcon"
)
;
setOpaque
(
true
)
;
}
public
Component
getTreeCellRendererComponent
(
JTree
tree
,
Object
value
,
boolean
sel
,
boolean
expanded
,
boolean
leaf
,
int
row
,
boolean
focus
)
{
if
(
sel
)
{
setBackground
(
treeSelectionBackground
)
;
setForeground
(
treeSelectionForeground
)
;
}
else
{
setBackground
(
treeNoSelectionBackground
)
;
setForeground
(
treeNoSelectionForeground
)
;
}
DefaultMutableTreeNode
treeNode
=
(
DefaultMutableTreeNode
)
value
;
Object
userObject
=
treeNode
.
getUserObject
(
)
;
if
(
userObject
instanceof
VFS
.
DirectoryEntry
)
{
VFS
.
DirectoryEntry
file
=
(
VFS
.
DirectoryEntry
)
userObject
;
boolean
opened
=
(
jEdit
.
getBuffer
(
file
.
path
)
!=
null
)
;
setBorder
(
opened
?
openBorder
:
closedBorder
)
;
if
(
showIcons
)
{
setIcon
(
getIconForFile
(
file
)
)
;
setText
(
file
.
name
)
;
}
else
{
setIcon
(
null
)
;
setText
(
file
.
type
==
VFS
.
DirectoryEntry
.
DIRECTORY
?
file
.
name
+
"/"
:
file
.
name
)
;
}
}
else
if
(
userObject
instanceof
BrowserView
.
LoadingPlaceholder
)
{
if
(
showIcons
)
setIcon
(
loadingIcon
)
;
else
setIcon
(
null
)
;
setText
(
jEdit
.
getProperty
(
"vfs.browser.tree.loading"
)
)
;
setBorder
(
closedBorder
)
;
}
else
if
(
userObject
instanceof
String
)
{
if
(
showIcons
)
{
setIcon
(
dirIcon
)
;
setText
(
(
String
)
userObject
)
;
}
else
{
setIcon
(
null
)
;
setText
(
userObject
+
"/"
)
;
}
setBorder
(
closedBorder
)
;
}
else
{
setIcon
(
null
)
;
setText
(
null
)
;
}
return
this
;
}
protected
Icon
getIconForFile
(
VFS
.
DirectoryEntry
file
)
{
if
(
file
.
type
==
VFS
.
DirectoryEntry
.
DIRECTORY
)
return
dirIcon
;
else
if
(
file
.
type
==
VFS
.
DirectoryEntry
.
FILESYSTEM
)
return
filesystemIcon
;
else
return
fileIcon
;
}
boolean
showIcons
;
void
propertiesChanged
(
)
{
setBackground
(
UIManager
.
getColor
(
"Tree.textBackground"
)
)
;
showIcons
=
jEdit
.
getBooleanProperty
(
"vfs.browser.showIcons"
)
;
if
(
showIcons
)
{
closedBorder
=
new
EmptyBorder
(
0
,
3
,
0
,
0
)
;
openBorder
=
new
CompoundBorder
(
new
MatteBorder
(
0
,
2
,
0
,
0
,
UIManager
.
getColor
(
"Tree.textForeground"
)
)
,
new
EmptyBorder
(
0
,
1
,
0
,
0
)
)
;
}
else
{
closedBorder
=
new
EmptyBorder
(
1
,
4
,
1
,
1
)
;
openBorder
=
new
CompoundBorder
(
new
MatteBorder
(
0
,
2
,
0
,
0
,
UIManager
.
getColor
(
"Tree.textForeground"
)
)
,
new
EmptyBorder
(
1
,
2
,
1
,
1
)
)
;
}
treeSelectionForeground
=
UIManager
.
getColor
(
"Tree.selectionForeground"
)
;
treeNoSelectionForeground
=
UIManager
.
getColor
(
"Tree.textForeground"
)
;
treeSelectionBackground
=
UIManager
.
getColor
(
"Tree.selectionBackground"
)
;
treeNoSelectionBackground
=
UIManager
.
getColor
(
"Tree.textBackground"
)
;
}
private
Icon
fileIcon
;
private
Icon
dirIcon
;
private
Icon
filesystemIcon
;
private
Icon
loadingIcon
;
private
Border
closedBorder
;
private
Border
openBorder
;
private
Color
treeSelectionForeground
;
private
Color
treeNoSelectionForeground
;
private
Color
treeSelectionBackground
;
private
Color
treeNoSelectionBackground
;
}
