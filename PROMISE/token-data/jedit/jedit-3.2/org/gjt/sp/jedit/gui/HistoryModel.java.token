package
org
.
gjt
.
sp
.
jedit
.
gui
;
import
javax
.
swing
.
*
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
jEdit
;
import
org
.
gjt
.
sp
.
jedit
.
MiscUtilities
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
HistoryModel
{
public
HistoryModel
(
String
name
)
{
this
.
name
=
name
;
try
{
max
=
Integer
.
parseInt
(
jEdit
.
getProperty
(
"history"
)
)
;
}
catch
(
NumberFormatException
nf
)
{
max
=
25
;
}
data
=
new
Vector
(
max
)
;
}
public
void
addItem
(
String
text
)
{
if
(
text
==
null
||
text
.
length
(
)
==
0
)
return
;
int
index
=
data
.
indexOf
(
text
)
;
if
(
index
!=
-
1
)
data
.
removeElementAt
(
index
)
;
data
.
insertElementAt
(
text
,
0
)
;
if
(
getSize
(
)
>
max
)
data
.
removeElementAt
(
getSize
(
)
-
1
)
;
}
public
String
getItem
(
int
index
)
{
return
(
String
)
data
.
elementAt
(
index
)
;
}
public
int
getSize
(
)
{
return
data
.
size
(
)
;
}
public
String
getName
(
)
{
return
name
;
}
public
static
HistoryModel
getModel
(
String
name
)
{
if
(
models
==
null
)
models
=
new
Hashtable
(
)
;
HistoryModel
model
=
(
HistoryModel
)
models
.
get
(
name
)
;
if
(
model
==
null
)
{
model
=
new
HistoryModel
(
name
)
;
models
.
put
(
name
,
model
)
;
}
return
model
;
}
public
static
void
loadHistory
(
File
file
)
{
if
(
models
==
null
)
models
=
new
Hashtable
(
)
;
try
{
BufferedReader
in
=
new
BufferedReader
(
new
FileReader
(
file
)
)
;
HistoryModel
currentModel
=
null
;
String
line
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
if
(
line
.
startsWith
(
"["
)
&&
line
.
endsWith
(
"]"
)
)
{
if
(
currentModel
!=
null
)
{
models
.
put
(
currentModel
.
getName
(
)
,
currentModel
)
;
}
currentModel
=
new
HistoryModel
(
line
.
substring
(
1
,
line
.
length
(
)
-
1
)
)
;
}
else
if
(
currentModel
==
null
)
{
throw
new
IOException
(
"History data starts"
+
" before model name"
)
;
}
else
{
currentModel
.
addItemToEnd
(
MiscUtilities
.
escapesToChars
(
line
)
)
;
}
}
if
(
currentModel
!=
null
)
{
models
.
put
(
currentModel
.
getName
(
)
,
currentModel
)
;
}
in
.
close
(
)
;
}
catch
(
FileNotFoundException
fnf
)
{
Log
.
log
(
Log
.
DEBUG
,
HistoryModel
.
class
,
fnf
)
;
}
catch
(
IOException
io
)
{
Log
.
log
(
Log
.
ERROR
,
HistoryModel
.
class
,
io
)
;
}
}
public
static
void
saveHistory
(
File
file
)
{
String
lineSep
=
System
.
getProperty
(
"line.separator"
)
;
try
{
BufferedWriter
out
=
new
BufferedWriter
(
new
FileWriter
(
file
)
)
;
if
(
models
==
null
)
{
out
.
close
(
)
;
return
;
}
Enumeration
modelEnum
=
models
.
elements
(
)
;
while
(
modelEnum
.
hasMoreElements
(
)
)
{
HistoryModel
model
=
(
HistoryModel
)
modelEnum
.
nextElement
(
)
;
out
.
write
(
'['
)
;
out
.
write
(
model
.
getName
(
)
)
;
out
.
write
(
']'
)
;
out
.
write
(
lineSep
)
;
for
(
int
i
=
0
;
i
<
model
.
getSize
(
)
;
i
++
)
{
out
.
write
(
MiscUtilities
.
charsToEscapes
(
model
.
getItem
(
i
)
,
true
)
)
;
out
.
write
(
lineSep
)
;
}
}
out
.
close
(
)
;
}
catch
(
IOException
io
)
{
Log
.
log
(
Log
.
ERROR
,
HistoryModel
.
class
,
io
)
;
}
}
private
String
name
;
private
int
max
;
private
Vector
data
;
private
static
Hashtable
models
;
private
void
addItemToEnd
(
String
item
)
{
data
.
addElement
(
item
)
;
}
}
