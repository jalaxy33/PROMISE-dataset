package
org
.
gjt
.
sp
.
jedit
.
textarea
;
import
java
.
awt
.
font
.
*
;
import
java
.
awt
.
*
;
import
java
.
util
.
Hashtable
;
class
TextRenderer2D
extends
TextRenderer
{
public
void
setupGraphics
(
Graphics
g
)
{
(
(
Graphics2D
)
g
)
.
setRenderingHints
(
renderingHints
)
;
}
public
void
configure
(
boolean
antiAlias
,
boolean
fracFontMetrics
)
{
Hashtable
hints
=
new
Hashtable
(
)
;
if
(
antiAlias
)
{
hints
.
put
(
RenderingHints
.
KEY_ANTIALIASING
,
RenderingHints
.
VALUE_ANTIALIAS_ON
)
;
hints
.
put
(
RenderingHints
.
KEY_RENDERING
,
RenderingHints
.
VALUE_RENDER_QUALITY
)
;
hints
.
put
(
RenderingHints
.
KEY_TEXT_ANTIALIASING
,
RenderingHints
.
VALUE_TEXT_ANTIALIAS_ON
)
;
hints
.
put
(
RenderingHints
.
KEY_FRACTIONALMETRICS
,
fracFontMetrics
?
RenderingHints
.
VALUE_FRACTIONALMETRICS_ON
:
RenderingHints
.
VALUE_FRACTIONALMETRICS_OFF
)
;
}
else
hints
.
put
(
RenderingHints
.
KEY_ANTIALIASING
,
RenderingHints
.
VALUE_ANTIALIAS_OFF
)
;
renderingHints
=
new
RenderingHints
(
hints
)
;
fontRenderContext
=
new
FontRenderContext
(
null
,
antiAlias
,
fracFontMetrics
)
;
}
float
_drawChars
(
char
[
]
text
,
int
start
,
int
len
,
Graphics
_g
,
float
x
,
float
y
)
{
Graphics2D
g
=
(
Graphics2D
)
_g
;
Font
font
=
g
.
getFont
(
)
;
fontRenderContext
=
g
.
getFontRenderContext
(
)
;
GlyphVector
glyphs
=
font
.
createGlyphVector
(
fontRenderContext
,
new
String
(
text
,
start
,
len
)
)
;
(
(
Graphics2D
)
g
)
.
drawGlyphVector
(
glyphs
,
x
,
y
)
;
return
(
float
)
glyphs
.
getLogicalBounds
(
)
.
getWidth
(
)
;
}
float
_getWidth
(
char
[
]
text
,
int
start
,
int
len
,
Font
font
)
{
GlyphVector
glyphs
=
font
.
createGlyphVector
(
fontRenderContext
,
new
String
(
text
,
start
,
len
)
)
;
return
(
float
)
glyphs
.
getLogicalBounds
(
)
.
getWidth
(
)
;
}
int
_xToOffset
(
char
[
]
text
,
int
start
,
int
len
,
Font
font
,
float
x
,
boolean
round
)
{
TextLayout
layout
=
new
TextLayout
(
new
String
(
text
,
start
,
len
)
,
font
,
fontRenderContext
)
;
TextHitInfo
info
=
layout
.
hitTestChar
(
x
,
0
)
;
return
(
round
?
info
.
getInsertionIndex
(
)
:
info
.
getCharIndex
(
)
)
;
}
private
RenderingHints
renderingHints
;
private
FontRenderContext
fontRenderContext
;
}
