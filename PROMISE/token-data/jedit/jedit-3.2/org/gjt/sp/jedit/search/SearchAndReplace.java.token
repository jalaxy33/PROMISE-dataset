package
org
.
gjt
.
sp
.
jedit
.
search
;
import
javax
.
swing
.
text
.
BadLocationException
;
import
javax
.
swing
.
text
.
Segment
;
import
javax
.
swing
.
JOptionPane
;
import
java
.
awt
.
Component
;
import
org
.
gjt
.
sp
.
jedit
.
io
.
VFSManager
;
import
org
.
gjt
.
sp
.
jedit
.
msg
.
SearchSettingsChanged
;
import
org
.
gjt
.
sp
.
jedit
.
textarea
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
SearchAndReplace
{
public
static
void
setSearchString
(
String
search
)
{
if
(
search
.
equals
(
SearchAndReplace
.
search
)
)
return
;
SearchAndReplace
.
search
=
search
;
matcher
=
null
;
EditBus
.
send
(
new
SearchSettingsChanged
(
null
)
)
;
}
public
static
String
getSearchString
(
)
{
return
search
;
}
public
static
void
setReplaceString
(
String
replace
)
{
if
(
replace
.
equals
(
SearchAndReplace
.
replace
)
)
return
;
SearchAndReplace
.
replace
=
replace
;
matcher
=
null
;
EditBus
.
send
(
new
SearchSettingsChanged
(
null
)
)
;
}
public
static
String
getReplaceString
(
)
{
return
replace
;
}
public
static
void
setIgnoreCase
(
boolean
ignoreCase
)
{
if
(
ignoreCase
==
SearchAndReplace
.
ignoreCase
)
return
;
SearchAndReplace
.
ignoreCase
=
ignoreCase
;
matcher
=
null
;
EditBus
.
send
(
new
SearchSettingsChanged
(
null
)
)
;
}
public
static
boolean
getIgnoreCase
(
)
{
return
ignoreCase
;
}
public
static
void
setRegexp
(
boolean
regexp
)
{
if
(
regexp
==
SearchAndReplace
.
regexp
)
return
;
SearchAndReplace
.
regexp
=
regexp
;
matcher
=
null
;
EditBus
.
send
(
new
SearchSettingsChanged
(
null
)
)
;
}
public
static
boolean
getRegexp
(
)
{
return
regexp
;
}
public
static
void
setReverseSearch
(
boolean
reverse
)
{
if
(
reverse
==
SearchAndReplace
.
reverse
)
return
;
SearchAndReplace
.
reverse
=
reverse
;
matcher
=
null
;
EditBus
.
send
(
new
SearchSettingsChanged
(
null
)
)
;
}
public
static
boolean
getReverseSearch
(
)
{
return
reverse
;
}
public
static
void
setBeanShellReplace
(
boolean
beanshell
)
{
if
(
beanshell
==
SearchAndReplace
.
beanshell
)
return
;
SearchAndReplace
.
beanshell
=
beanshell
;
matcher
=
null
;
EditBus
.
send
(
new
SearchSettingsChanged
(
null
)
)
;
}
public
static
boolean
getBeanShellReplace
(
)
{
return
beanshell
;
}
public
static
void
setAutoWrapAround
(
boolean
wrap
)
{
if
(
wrap
==
SearchAndReplace
.
wrap
)
return
;
SearchAndReplace
.
wrap
=
wrap
;
EditBus
.
send
(
new
SearchSettingsChanged
(
null
)
)
;
}
public
static
boolean
getAutoWrapAround
(
)
{
return
wrap
;
}
public
static
void
setSearchMatcher
(
SearchMatcher
matcher
)
{
SearchAndReplace
.
matcher
=
matcher
;
EditBus
.
send
(
new
SearchSettingsChanged
(
null
)
)
;
}
public
static
SearchMatcher
getSearchMatcher
(
)
throws
Exception
{
return
getSearchMatcher
(
true
)
;
}
public
static
SearchMatcher
getSearchMatcher
(
boolean
reverseOK
)
throws
Exception
{
reverseOK
&=
(
fileset
instanceof
CurrentBufferSet
)
;
if
(
matcher
!=
null
&&
(
reverseOK
||
!
reverse
)
)
return
matcher
;
if
(
search
==
null
||
""
.
equals
(
search
)
)
return
null
;
String
replace
=
(
SearchAndReplace
.
replace
==
null
?
""
:
SearchAndReplace
.
replace
)
;
String
replaceMethod
;
if
(
beanshell
&&
replace
.
length
(
)
!=
0
)
{
replaceMethod
=
BeanShell
.
cacheBlock
(
"replace"
,
"return ("
+
replace
+
");"
,
false
)
;
}
else
replaceMethod
=
null
;
if
(
regexp
)
matcher
=
new
RESearchMatcher
(
search
,
replace
,
ignoreCase
,
beanshell
,
replaceMethod
)
;
else
{
matcher
=
new
BoyerMooreSearchMatcher
(
search
,
replace
,
ignoreCase
,
reverse
&&
reverseOK
,
beanshell
,
replaceMethod
)
;
}
return
matcher
;
}
public
static
void
setSearchFileSet
(
SearchFileSet
fileset
)
{
SearchAndReplace
.
fileset
=
fileset
;
EditBus
.
send
(
new
SearchSettingsChanged
(
null
)
)
;
}
public
static
SearchFileSet
getSearchFileSet
(
)
{
return
fileset
;
}
public
static
boolean
hyperSearch
(
View
view
)
{
record
(
view
,
"hyperSearch(view)"
,
false
,
true
)
;
view
.
getDockableWindowManager
(
)
.
addDockableWindow
(
HyperSearchResults
.
NAME
)
;
final
HyperSearchResults
results
=
(
HyperSearchResults
)
view
.
getDockableWindowManager
(
)
.
getDockableWindow
(
HyperSearchResults
.
NAME
)
;
results
.
searchStarted
(
)
;
try
{
VFSManager
.
runInWorkThread
(
new
HyperSearchRequest
(
view
,
getSearchMatcher
(
false
)
,
results
)
)
;
return
true
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
SearchAndReplace
.
class
,
e
)
;
Object
[
]
args
=
{
e
.
getMessage
(
)
}
;
if
(
args
[
0
]
==
null
)
args
[
0
]
=
e
.
toString
(
)
;
GUIUtilities
.
error
(
view
,
"searcherror"
,
args
)
;
return
false
;
}
}
public
static
boolean
find
(
View
view
)
{
boolean
repeat
=
false
;
Buffer
buffer
=
fileset
.
getNextBuffer
(
view
,
null
)
;
try
{
SearchMatcher
matcher
=
getSearchMatcher
(
true
)
;
if
(
matcher
==
null
)
{
view
.
getToolkit
(
)
.
beep
(
)
;
return
false
;
}
record
(
view
,
"find(view)"
,
false
,
true
)
;
view
.
showWaitCursor
(
)
;
loop
:
for
(
;
;
)
{
while
(
buffer
!=
null
)
{
if
(
!
buffer
.
isLoaded
(
)
)
VFSManager
.
waitForRequests
(
)
;
int
start
;
if
(
view
.
getBuffer
(
)
==
buffer
&&
!
repeat
)
{
JEditTextArea
textArea
=
view
.
getTextArea
(
)
;
Selection
s
=
textArea
.
getSelectionAtOffset
(
textArea
.
getCaretPosition
(
)
)
;
if
(
s
==
null
)
start
=
textArea
.
getCaretPosition
(
)
;
else
if
(
reverse
)
start
=
s
.
getStart
(
)
;
else
start
=
s
.
getEnd
(
)
;
}
else
if
(
reverse
)
start
=
buffer
.
getLength
(
)
;
else
start
=
0
;
if
(
find
(
view
,
buffer
,
start
)
)
return
true
;
buffer
=
fileset
.
getNextBuffer
(
view
,
buffer
)
;
}
if
(
repeat
)
{
view
.
getToolkit
(
)
.
beep
(
)
;
return
false
;
}
if
(
BeanShell
.
isScriptRunning
(
)
)
break
loop
;
boolean
restart
;
if
(
wrap
)
{
view
.
getStatus
(
)
.
setMessageAndClear
(
jEdit
.
getProperty
(
"view.status.auto-wrap"
)
)
;
restart
=
true
;
}
else
{
Integer
[
]
args
=
{
new
Integer
(
reverse
?
1
:
0
)
}
;
int
result
=
GUIUtilities
.
confirm
(
view
,
"keepsearching"
,
args
,
JOptionPane
.
YES_NO_OPTION
,
JOptionPane
.
QUESTION_MESSAGE
)
;
restart
=
(
result
==
JOptionPane
.
YES_OPTION
)
;
}
if
(
restart
)
{
buffer
=
fileset
.
getFirstBuffer
(
view
)
;
repeat
=
true
;
}
else
break
loop
;
}
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
SearchAndReplace
.
class
,
e
)
;
Object
[
]
args
=
{
e
.
getMessage
(
)
}
;
if
(
args
[
0
]
==
null
)
args
[
0
]
=
e
.
toString
(
)
;
GUIUtilities
.
error
(
view
,
"searcherror"
,
args
)
;
}
finally
{
view
.
hideWaitCursor
(
)
;
}
return
false
;
}
public
static
boolean
find
(
final
View
view
,
final
Buffer
buffer
,
final
int
start
)
throws
Exception
{
SearchMatcher
matcher
=
getSearchMatcher
(
true
)
;
Segment
text
=
new
Segment
(
)
;
if
(
reverse
)
buffer
.
getText
(
0
,
start
,
text
)
;
else
buffer
.
getText
(
start
,
buffer
.
getLength
(
)
-
start
,
text
)
;
int
[
]
match
=
matcher
.
nextMatch
(
text
)
;
if
(
match
!=
null
)
{
fileset
.
matchFound
(
buffer
)
;
view
.
setBuffer
(
buffer
)
;
JEditTextArea
textArea
=
view
.
getTextArea
(
)
;
int
matchStart
=
(
reverse
?
0
:
start
)
;
textArea
.
setSelection
(
new
Selection
.
Range
(
matchStart
+
match
[
0
]
,
matchStart
+
match
[
1
]
)
)
;
textArea
.
moveCaretPosition
(
matchStart
+
match
[
1
]
)
;
return
true
;
}
else
return
false
;
}
public
static
boolean
replace
(
View
view
)
{
JEditTextArea
textArea
=
view
.
getTextArea
(
)
;
Selection
[
]
selection
=
textArea
.
getSelection
(
)
;
if
(
selection
.
length
==
0
)
{
view
.
getToolkit
(
)
.
beep
(
)
;
return
false
;
}
record
(
view
,
"replace(view)"
,
true
,
false
)
;
Buffer
buffer
=
view
.
getBuffer
(
)
;
try
{
buffer
.
beginCompoundEdit
(
)
;
int
retVal
=
0
;
for
(
int
i
=
0
;
i
<
selection
.
length
;
i
++
)
{
Selection
s
=
selection
[
i
]
;
int
start
=
s
.
getStart
(
)
;
retVal
+=
_replace
(
view
,
buffer
,
s
.
getStart
(
)
,
s
.
getEnd
(
)
)
;
textArea
.
removeFromSelection
(
s
)
;
if
(
s
instanceof
Selection
.
Range
)
{
textArea
.
addToSelection
(
new
Selection
.
Range
(
start
,
s
.
getEnd
(
)
)
)
;
}
else
if
(
s
instanceof
Selection
.
Rect
)
{
textArea
.
addToSelection
(
new
Selection
.
Rect
(
start
,
s
.
getEnd
(
)
)
)
;
}
}
if
(
retVal
==
0
)
{
view
.
getToolkit
(
)
.
beep
(
)
;
return
false
;
}
return
true
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
SearchAndReplace
.
class
,
e
)
;
Object
[
]
args
=
{
e
.
getMessage
(
)
}
;
if
(
args
[
0
]
==
null
)
args
[
0
]
=
e
.
toString
(
)
;
GUIUtilities
.
error
(
view
,
"searcherror"
,
args
)
;
}
finally
{
buffer
.
endCompoundEdit
(
)
;
}
return
false
;
}
public
static
boolean
replace
(
View
view
,
Buffer
buffer
,
int
start
,
int
end
)
{
JEditTextArea
textArea
=
view
.
getTextArea
(
)
;
try
{
int
retVal
=
0
;
buffer
.
beginCompoundEdit
(
)
;
retVal
+=
_replace
(
view
,
buffer
,
start
,
end
)
;
if
(
retVal
!=
0
)
return
true
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
SearchAndReplace
.
class
,
e
)
;
Object
[
]
args
=
{
e
.
getMessage
(
)
}
;
if
(
args
[
0
]
==
null
)
args
[
0
]
=
e
.
toString
(
)
;
GUIUtilities
.
error
(
view
,
"searcherror"
,
args
)
;
}
finally
{
buffer
.
endCompoundEdit
(
)
;
}
return
false
;
}
public
static
boolean
replaceAll
(
View
view
)
{
int
fileCount
=
0
;
int
occurCount
=
0
;
record
(
view
,
"replaceAll(view)"
,
true
,
true
)
;
view
.
showWaitCursor
(
)
;
try
{
Buffer
buffer
=
fileset
.
getFirstBuffer
(
view
)
;
do
{
if
(
buffer
.
isPerformingIO
(
)
)
VFSManager
.
waitForRequests
(
)
;
try
{
buffer
.
beginCompoundEdit
(
)
;
int
retVal
=
_replace
(
view
,
buffer
,
0
,
buffer
.
getLength
(
)
)
;
if
(
retVal
!=
0
)
{
fileCount
++
;
occurCount
+=
retVal
;
fileset
.
matchFound
(
buffer
)
;
}
}
finally
{
buffer
.
endCompoundEdit
(
)
;
}
}
while
(
(
buffer
=
fileset
.
getNextBuffer
(
view
,
buffer
)
)
!=
null
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
SearchAndReplace
.
class
,
e
)
;
Object
[
]
args
=
{
e
.
getMessage
(
)
}
;
if
(
args
[
0
]
==
null
)
args
[
0
]
=
e
.
toString
(
)
;
GUIUtilities
.
error
(
view
,
"searcherror"
,
args
)
;
}
finally
{
view
.
hideWaitCursor
(
)
;
}
if
(
!
BeanShell
.
isScriptRunning
(
)
)
{
Object
[
]
args
=
{
new
Integer
(
occurCount
)
,
new
Integer
(
fileCount
)
}
;
view
.
getStatus
(
)
.
setMessageAndClear
(
jEdit
.
getProperty
(
"view.status.replace-all"
,
args
)
)
;
}
return
(
fileCount
!=
0
)
;
}
public
static
void
load
(
)
{
search
=
jEdit
.
getProperty
(
"search.find.value"
)
;
replace
=
jEdit
.
getProperty
(
"search.replace.value"
)
;
ignoreCase
=
jEdit
.
getBooleanProperty
(
"search.ignoreCase.toggle"
)
;
regexp
=
jEdit
.
getBooleanProperty
(
"search.regexp.toggle"
)
;
reverse
=
jEdit
.
getBooleanProperty
(
"search.reverse.toggle"
)
;
beanshell
=
jEdit
.
getBooleanProperty
(
"search.beanshell.toggle"
)
;
wrap
=
jEdit
.
getBooleanProperty
(
"search.wrap.toggle"
)
;
String
filesetCode
=
jEdit
.
getProperty
(
"search.fileset.value"
)
;
if
(
filesetCode
!=
null
)
{
fileset
=
(
SearchFileSet
)
BeanShell
.
eval
(
null
,
filesetCode
,
true
)
;
}
if
(
fileset
==
null
)
fileset
=
new
CurrentBufferSet
(
)
;
}
public
static
void
save
(
)
{
jEdit
.
setProperty
(
"search.find.value"
,
search
)
;
jEdit
.
setProperty
(
"search.replace.value"
,
replace
)
;
jEdit
.
setBooleanProperty
(
"search.ignoreCase.toggle"
,
ignoreCase
)
;
jEdit
.
setBooleanProperty
(
"search.regexp.toggle"
,
regexp
)
;
jEdit
.
setBooleanProperty
(
"search.reverse.toggle"
,
reverse
)
;
jEdit
.
setBooleanProperty
(
"search.beanshell.toggle"
,
beanshell
)
;
jEdit
.
setBooleanProperty
(
"search.wrap.toggle"
,
wrap
)
;
String
code
=
fileset
.
getCode
(
)
;
if
(
code
!=
null
)
jEdit
.
setProperty
(
"search.fileset.value"
,
code
)
;
else
jEdit
.
unsetProperty
(
"search.fileset.value"
)
;
}
private
static
String
search
;
private
static
String
replace
;
private
static
boolean
regexp
;
private
static
boolean
ignoreCase
;
private
static
boolean
reverse
;
private
static
boolean
beanshell
;
private
static
boolean
wrap
;
private
static
SearchMatcher
matcher
;
private
static
SearchFileSet
fileset
;
private
static
void
record
(
View
view
,
String
action
,
boolean
replaceAction
,
boolean
recordFileSet
)
{
Macros
.
Recorder
recorder
=
view
.
getMacroRecorder
(
)
;
if
(
recorder
!=
null
)
{
recorder
.
record
(
"SearchAndReplace.setSearchString(\""
+
MiscUtilities
.
charsToEscapes
(
search
)
+
"\");"
)
;
if
(
replaceAction
)
{
recorder
.
record
(
"SearchAndReplace.setReplaceString(\""
+
MiscUtilities
.
charsToEscapes
(
replace
)
+
"\");"
)
;
recorder
.
record
(
"SearchAndReplace.setBeanShellReplace("
+
beanshell
+
");"
)
;
}
else
{
recorder
.
record
(
"SearchAndReplace.setAutoWrapAround("
+
wrap
+
");"
)
;
recorder
.
record
(
"SearchAndReplace.setReverseSearch("
+
reverse
+
");"
)
;
}
recorder
.
record
(
"SearchAndReplace.setIgnoreCase("
+
ignoreCase
+
");"
)
;
recorder
.
record
(
"SearchAndReplace.setRegexp("
+
regexp
+
");"
)
;
if
(
recordFileSet
)
{
recorder
.
record
(
"SearchAndReplace.setSearchFileSet("
+
fileset
.
getCode
(
)
+
");"
)
;
}
recorder
.
record
(
"SearchAndReplace."
+
action
+
";"
)
;
}
}
private
static
int
_replace
(
View
view
,
Buffer
buffer
,
int
start
,
int
end
)
throws
Exception
{
if
(
!
buffer
.
isEditable
(
)
)
return
0
;
SearchMatcher
matcher
=
getSearchMatcher
(
false
)
;
if
(
matcher
==
null
)
return
0
;
int
occurCount
=
0
;
Segment
text
=
new
Segment
(
)
;
int
offset
=
start
;
loop
:
for
(
;
;
)
{
buffer
.
getText
(
offset
,
end
-
offset
,
text
)
;
int
[
]
occur
=
matcher
.
nextMatch
(
text
)
;
if
(
occur
==
null
)
break
loop
;
int
_start
=
occur
[
0
]
;
int
_length
=
occur
[
1
]
-
occur
[
0
]
;
String
found
=
new
String
(
text
.
array
,
text
.
offset
+
_start
,
_length
)
;
String
subst
=
matcher
.
substitute
(
found
)
;
if
(
subst
!=
null
)
{
buffer
.
remove
(
offset
+
_start
,
_length
)
;
buffer
.
insertString
(
offset
+
_start
,
subst
,
null
)
;
occurCount
++
;
offset
+=
_start
+
subst
.
length
(
)
;
end
+=
(
subst
.
length
(
)
-
found
.
length
(
)
)
;
}
else
offset
+=
_start
+
_length
;
}
return
occurCount
;
}
}
