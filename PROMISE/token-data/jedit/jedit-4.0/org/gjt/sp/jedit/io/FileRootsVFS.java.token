package
org
.
gjt
.
sp
.
jedit
.
io
;
import
javax
.
swing
.
filechooser
.
FileSystemView
;
import
java
.
awt
.
Component
;
import
java
.
lang
.
reflect
.
*
;
import
java
.
io
.
File
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
FileRootsVFS
extends
VFS
{
public
static
final
String
PROTOCOL
=
"roots"
;
public
FileRootsVFS
(
)
{
super
(
"roots"
)
;
try
{
method
=
FileSystemView
.
class
.
getMethod
(
"getSystemDisplayName"
,
new
Class
[
]
{
java
.
io
.
File
.
class
}
)
;
fsView
=
FileSystemView
.
getFileSystemView
(
)
;
Log
.
log
(
Log
.
DEBUG
,
this
,
"FileSystemView.getSystemDisplayName() detected"
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
DEBUG
,
this
,
"FileSystemView.getSystemDisplayName() not detected"
)
;
}
}
public
int
getCapabilities
(
)
{
return
0
;
}
public
String
getParentOfPath
(
String
path
)
{
return
PROTOCOL
+
":"
;
}
public
VFS
.
DirectoryEntry
[
]
_listDirectory
(
Object
session
,
String
url
,
Component
comp
)
{
File
[
]
roots
=
File
.
listRoots
(
)
;
if
(
roots
==
null
)
return
null
;
VFS
.
DirectoryEntry
[
]
rootDE
=
new
VFS
.
DirectoryEntry
[
roots
.
length
]
;
for
(
int
i
=
0
;
i
<
roots
.
length
;
i
++
)
{
String
name
=
roots
[
i
]
.
getPath
(
)
;
rootDE
[
i
]
=
_getDirectoryEntry
(
session
,
name
,
comp
)
;
}
return
rootDE
;
}
public
DirectoryEntry
_getDirectoryEntry
(
Object
session
,
String
path
,
Component
comp
)
{
String
name
=
path
;
if
(
method
!=
null
&&
!
name
.
startsWith
(
"A:"
)
&&
!
name
.
startsWith
(
"B:"
)
)
{
try
{
name
=
name
+
" "
+
(
String
)
method
.
invoke
(
fsView
,
new
Object
[
]
{
new
File
(
path
)
}
)
;
}
catch
(
Exception
e
)
{
}
}
return
new
VFS
.
DirectoryEntry
(
name
,
path
,
path
,
VFS
.
DirectoryEntry
.
FILESYSTEM
,
0L
,
false
)
;
}
private
FileSystemView
fsView
;
private
Method
method
;
}
