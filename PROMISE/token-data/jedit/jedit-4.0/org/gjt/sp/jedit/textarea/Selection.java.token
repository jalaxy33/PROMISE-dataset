package
org
.
gjt
.
sp
.
jedit
.
textarea
;
import
org
.
gjt
.
sp
.
jedit
.
Buffer
;
public
abstract
class
Selection
implements
Cloneable
{
public
int
getStart
(
)
{
return
start
;
}
public
int
getEnd
(
)
{
return
end
;
}
public
int
getStartLine
(
)
{
return
startLine
;
}
public
int
getEndLine
(
)
{
return
endLine
;
}
public
abstract
int
getStart
(
Buffer
buffer
,
int
line
)
;
public
abstract
int
getEnd
(
Buffer
buffer
,
int
line
)
;
public
String
toString
(
)
{
return
getClass
(
)
.
getName
(
)
+
"[start="
+
start
+
",end="
+
end
+
",startLine="
+
startLine
+
",endLine="
+
endLine
+
"]"
;
}
public
Object
clone
(
)
{
try
{
return
super
.
clone
(
)
;
}
catch
(
CloneNotSupportedException
e
)
{
throw
new
InternalError
(
"I just drank a whole "
+
"bottle of cough syrup and I feel "
+
"funny!"
)
;
}
}
int
start
,
end
,
startLine
,
endLine
;
protected
Selection
(
)
{
}
protected
Selection
(
Selection
copy
)
{
start
=
copy
.
start
;
end
=
copy
.
end
;
}
protected
Selection
(
int
start
,
int
end
)
{
this
.
start
=
start
;
this
.
end
=
end
;
}
public
static
class
Range
extends
Selection
{
public
Range
(
)
{
super
(
)
;
}
public
Range
(
Selection
sel
)
{
super
(
sel
)
;
}
public
Range
(
int
start
,
int
end
)
{
super
(
start
,
end
)
;
}
public
int
getStart
(
Buffer
buffer
,
int
line
)
{
if
(
line
==
startLine
)
return
start
;
else
return
buffer
.
getLineStartOffset
(
line
)
;
}
public
int
getEnd
(
Buffer
buffer
,
int
line
)
{
if
(
line
==
endLine
)
return
end
;
else
return
buffer
.
getLineEndOffset
(
line
)
-
1
;
}
}
public
static
class
Rect
extends
Selection
{
public
Rect
(
)
{
super
(
)
;
}
public
Rect
(
Selection
sel
)
{
super
(
sel
)
;
}
public
Rect
(
int
start
,
int
end
)
{
super
(
start
,
end
)
;
}
public
int
getStart
(
Buffer
buffer
,
int
line
)
{
if
(
line
==
startLine
)
return
start
;
else
{
int
_start
=
start
-
buffer
.
getLineStartOffset
(
startLine
)
;
int
_end
=
end
-
buffer
.
getLineStartOffset
(
endLine
)
;
return
Math
.
min
(
buffer
.
getLineEndOffset
(
line
)
-
1
,
buffer
.
getLineStartOffset
(
line
)
+
Math
.
min
(
_start
,
_end
)
)
;
}
}
public
int
getEnd
(
Buffer
buffer
,
int
line
)
{
if
(
line
==
endLine
)
return
end
;
else
{
int
_start
=
start
-
buffer
.
getLineStartOffset
(
startLine
)
;
int
_end
=
end
-
buffer
.
getLineStartOffset
(
endLine
)
;
return
Math
.
min
(
buffer
.
getLineEndOffset
(
line
)
-
1
,
buffer
.
getLineStartOffset
(
line
)
+
Math
.
max
(
_start
,
_end
)
)
;
}
}
}
}
