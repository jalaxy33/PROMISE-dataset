package
org
.
gjt
.
sp
.
jedit
.
buffer
;
import
javax
.
swing
.
text
.
Segment
;
public
class
ContentManager
{
public
ContentManager
(
)
{
text
=
new
char
[
1024
]
;
}
public
final
int
getLength
(
)
{
return
length
;
}
public
String
getText
(
int
start
,
int
len
)
{
if
(
start
>=
gapStart
)
return
new
String
(
text
,
start
+
gapEnd
-
gapStart
,
len
)
;
else
if
(
start
+
len
<=
gapStart
)
return
new
String
(
text
,
start
,
len
)
;
else
{
return
new
String
(
text
,
start
,
gapStart
-
start
)
.
concat
(
new
String
(
text
,
gapEnd
,
start
+
len
-
gapStart
)
)
;
}
}
public
void
getText
(
int
start
,
int
len
,
Segment
seg
)
{
if
(
start
>=
gapStart
)
{
seg
.
array
=
text
;
seg
.
offset
=
start
+
gapEnd
-
gapStart
;
seg
.
count
=
len
;
}
else
if
(
start
+
len
<=
gapStart
)
{
seg
.
array
=
text
;
seg
.
offset
=
start
;
seg
.
count
=
len
;
}
else
{
seg
.
array
=
new
char
[
len
]
;
System
.
arraycopy
(
text
,
start
,
seg
.
array
,
0
,
gapStart
-
start
)
;
System
.
arraycopy
(
text
,
gapEnd
,
seg
.
array
,
gapStart
-
start
,
len
+
start
-
gapStart
)
;
seg
.
offset
=
0
;
seg
.
count
=
len
;
}
}
public
void
insert
(
int
start
,
String
str
)
{
int
len
=
str
.
length
(
)
;
if
(
gapStart
!=
start
||
gapEnd
-
gapStart
<
len
)
{
ensureCapacity
(
length
+
len
+
200
)
;
close
(
start
,
start
+
len
+
200
)
;
}
str
.
getChars
(
0
,
len
,
text
,
start
)
;
gapStart
+=
len
;
length
+=
len
;
}
public
void
insert
(
int
start
,
Segment
seg
)
{
if
(
gapStart
!=
start
||
gapEnd
-
gapStart
<
seg
.
count
)
{
ensureCapacity
(
length
+
seg
.
count
+
200
)
;
close
(
start
,
start
+
seg
.
count
+
200
)
;
}
System
.
arraycopy
(
seg
.
array
,
seg
.
offset
,
text
,
start
,
seg
.
count
)
;
gapStart
+=
seg
.
count
;
length
+=
seg
.
count
;
}
public
void
_setContent
(
char
[
]
text
,
int
length
)
{
this
.
text
=
text
;
this
.
gapStart
=
this
.
gapEnd
=
0
;
this
.
length
=
length
;
}
public
void
remove
(
int
start
,
int
len
)
{
close
(
start
,
start
)
;
gapEnd
+=
len
;
length
-=
len
;
}
private
char
[
]
text
;
private
int
gapStart
;
private
int
gapEnd
;
private
int
length
;
private
void
close
(
int
newStart
,
int
newEnd
)
{
if
(
gapStart
==
newStart
)
{
System
.
arraycopy
(
text
,
gapEnd
,
text
,
newEnd
,
length
-
gapStart
)
;
}
else
{
if
(
gapStart
!=
gapEnd
&&
gapStart
!=
length
)
{
System
.
arraycopy
(
text
,
gapEnd
,
text
,
gapStart
,
length
-
gapStart
)
;
}
if
(
newStart
!=
newEnd
&&
newStart
!=
length
)
{
System
.
arraycopy
(
text
,
newStart
,
text
,
newEnd
,
length
-
newStart
)
;
}
}
gapStart
=
newStart
;
gapEnd
=
newEnd
;
}
private
void
ensureCapacity
(
int
capacity
)
{
if
(
capacity
>=
text
.
length
)
{
char
[
]
textN
=
new
char
[
capacity
*
2
]
;
System
.
arraycopy
(
text
,
0
,
textN
,
0
,
length
+
(
gapEnd
-
gapStart
)
)
;
text
=
textN
;
}
}
}
