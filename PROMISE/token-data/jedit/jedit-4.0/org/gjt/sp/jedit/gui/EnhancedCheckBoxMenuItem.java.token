package
org
.
gjt
.
sp
.
jedit
.
gui
;
import
javax
.
swing
.
*
;
import
java
.
awt
.
event
.
*
;
import
java
.
awt
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
textarea
.
JEditTextArea
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
EnhancedCheckBoxMenuItem
extends
JCheckBoxMenuItem
{
public
EnhancedCheckBoxMenuItem
(
String
label
,
EditAction
action
)
{
super
(
label
)
;
this
.
action
=
action
;
if
(
action
!=
null
)
{
setEnabled
(
true
)
;
addActionListener
(
new
EditAction
.
Wrapper
(
action
)
)
;
shortcutProp1
=
action
.
getName
(
)
+
".shortcut"
;
shortcutProp2
=
action
.
getName
(
)
+
".shortcut2"
;
addMouseListener
(
new
MouseHandler
(
)
)
;
}
else
setEnabled
(
false
)
;
setModel
(
new
Model
(
)
)
;
}
public
Dimension
getPreferredSize
(
)
{
Dimension
d
=
super
.
getPreferredSize
(
)
;
String
shortcut
=
getShortcut
(
)
;
if
(
shortcut
!=
null
)
{
d
.
width
+=
(
getFontMetrics
(
acceleratorFont
)
.
stringWidth
(
shortcut
)
+
15
)
;
}
return
d
;
}
public
void
paint
(
Graphics
g
)
{
super
.
paint
(
g
)
;
String
shortcut
=
getShortcut
(
)
;
if
(
shortcut
!=
null
)
{
g
.
setFont
(
acceleratorFont
)
;
g
.
setColor
(
getModel
(
)
.
isArmed
(
)
?
acceleratorSelectionForeground
:
acceleratorForeground
)
;
FontMetrics
fm
=
g
.
getFontMetrics
(
)
;
Insets
insets
=
getInsets
(
)
;
g
.
drawString
(
shortcut
,
getWidth
(
)
-
(
fm
.
stringWidth
(
shortcut
)
+
insets
.
right
+
insets
.
left
+
5
)
,
getFont
(
)
.
getSize
(
)
+
(
insets
.
top
-
1
)
)
;
}
}
public
String
getActionCommand
(
)
{
return
getModel
(
)
.
getActionCommand
(
)
;
}
private
String
shortcutProp1
;
private
String
shortcutProp2
;
private
EditAction
action
;
private
static
Font
acceleratorFont
;
private
static
Color
acceleratorForeground
;
private
static
Color
acceleratorSelectionForeground
;
private
String
getShortcut
(
)
{
if
(
action
==
null
)
return
null
;
else
{
String
shortcut1
=
jEdit
.
getProperty
(
shortcutProp1
)
;
String
shortcut2
=
jEdit
.
getProperty
(
shortcutProp2
)
;
if
(
shortcut1
==
null
||
shortcut1
.
length
(
)
==
0
)
{
if
(
shortcut2
==
null
||
shortcut2
.
length
(
)
==
0
)
return
null
;
else
return
shortcut2
;
}
else
{
if
(
shortcut2
==
null
||
shortcut2
.
length
(
)
==
0
)
return
shortcut1
;
else
return
shortcut1
+
" or "
+
shortcut2
;
}
}
}
static
{
acceleratorFont
=
UIManager
.
getFont
(
"MenuItem.acceleratorFont"
)
;
acceleratorFont
=
new
Font
(
"Monospaced"
,
acceleratorFont
.
getStyle
(
)
,
acceleratorFont
.
getSize
(
)
)
;
acceleratorForeground
=
UIManager
.
getColor
(
"MenuItem.acceleratorForeground"
)
;
acceleratorSelectionForeground
=
UIManager
.
getColor
(
"MenuItem.acceleratorSelectionForeground"
)
;
}
class
Model
extends
DefaultButtonModel
{
public
boolean
isSelected
(
)
{
if
(
!
isShowing
(
)
)
return
false
;
try
{
return
action
.
isSelected
(
GUIUtilities
.
getView
(
EnhancedCheckBoxMenuItem
.
this
)
)
;
}
catch
(
Throwable
t
)
{
Log
.
log
(
Log
.
ERROR
,
this
,
t
)
;
return
false
;
}
}
public
void
setSelected
(
boolean
b
)
{
}
}
class
MouseHandler
extends
MouseAdapter
{
public
void
mouseReleased
(
MouseEvent
evt
)
{
GUIUtilities
.
getView
(
(
Component
)
evt
.
getSource
(
)
)
.
getStatus
(
)
.
setMessage
(
null
)
;
}
public
void
mouseEntered
(
MouseEvent
evt
)
{
String
msg
=
action
.
getMouseOverText
(
)
;
if
(
msg
!=
null
)
{
GUIUtilities
.
getView
(
(
Component
)
evt
.
getSource
(
)
)
.
getStatus
(
)
.
setMessage
(
msg
)
;
}
}
public
void
mouseExited
(
MouseEvent
evt
)
{
GUIUtilities
.
getView
(
(
Component
)
evt
.
getSource
(
)
)
.
getStatus
(
)
.
setMessage
(
null
)
;
}
}
}
