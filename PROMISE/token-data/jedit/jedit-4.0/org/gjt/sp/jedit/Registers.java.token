package
org
.
gjt
.
sp
.
jedit
;
import
javax
.
swing
.
text
.
*
;
import
java
.
awt
.
datatransfer
.
*
;
import
java
.
awt
.
Toolkit
;
import
java
.
io
.
*
;
import
java
.
util
.
Vector
;
import
org
.
gjt
.
sp
.
jedit
.
gui
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
textarea
.
JEditTextArea
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
Registers
{
public
static
void
copy
(
JEditTextArea
textArea
,
char
register
)
{
String
selection
=
textArea
.
getSelectedText
(
)
;
if
(
selection
==
null
)
return
;
setRegister
(
register
,
selection
)
;
HistoryModel
.
getModel
(
"clipboard"
)
.
addItem
(
selection
)
;
}
public
static
void
append
(
JEditTextArea
textArea
,
char
register
)
{
append
(
textArea
,
register
,
"\n"
,
false
)
;
}
public
static
void
append
(
JEditTextArea
textArea
,
char
register
,
String
separator
)
{
append
(
textArea
,
register
,
separator
,
false
)
;
}
public
static
void
append
(
JEditTextArea
textArea
,
char
register
,
String
separator
,
boolean
cut
)
{
if
(
cut
&&
!
textArea
.
isEditable
(
)
)
{
textArea
.
getToolkit
(
)
.
beep
(
)
;
return
;
}
String
selection
=
textArea
.
getSelectedText
(
)
;
if
(
selection
==
null
)
return
;
Register
reg
=
getRegister
(
register
)
;
String
registerContents
=
reg
.
toString
(
)
;
if
(
reg
!=
null
&&
registerContents
!=
null
)
{
if
(
registerContents
.
endsWith
(
separator
)
)
selection
=
registerContents
+
selection
;
else
selection
=
registerContents
+
separator
+
selection
;
}
setRegister
(
register
,
selection
)
;
HistoryModel
.
getModel
(
"clipboard"
)
.
addItem
(
selection
)
;
if
(
cut
)
textArea
.
setSelectedText
(
""
)
;
}
public
static
void
cut
(
JEditTextArea
textArea
,
char
register
)
{
if
(
textArea
.
isEditable
(
)
)
{
String
selection
=
textArea
.
getSelectedText
(
)
;
if
(
selection
==
null
)
return
;
setRegister
(
register
,
selection
)
;
HistoryModel
.
getModel
(
"clipboard"
)
.
addItem
(
selection
)
;
textArea
.
setSelectedText
(
""
)
;
}
else
textArea
.
getToolkit
(
)
.
beep
(
)
;
}
public
static
void
paste
(
JEditTextArea
textArea
,
char
register
)
{
if
(
!
textArea
.
isEditable
(
)
)
{
textArea
.
getToolkit
(
)
.
beep
(
)
;
return
;
}
Register
reg
=
getRegister
(
register
)
;
if
(
reg
==
null
)
{
textArea
.
getToolkit
(
)
.
beep
(
)
;
return
;
}
else
{
String
selection
=
reg
.
toString
(
)
;
if
(
selection
==
null
)
{
textArea
.
getToolkit
(
)
.
beep
(
)
;
return
;
}
int
magic
=
textArea
.
getMagicCaretPosition
(
)
;
textArea
.
setSelectedText
(
selection
)
;
if
(
textArea
.
getCaretPosition
(
)
!=
textArea
.
getLineEndOffset
(
textArea
.
getCaretLine
(
)
)
-
1
)
{
textArea
.
setMagicCaretPosition
(
magic
)
;
}
else
{
}
HistoryModel
.
getModel
(
"clipboard"
)
.
addItem
(
selection
)
;
}
}
public
static
Register
getRegister
(
char
name
)
{
if
(
registers
==
null
||
name
>=
registers
.
length
)
return
null
;
else
return
registers
[
name
]
;
}
public
static
void
setRegister
(
char
name
,
Register
newRegister
)
{
if
(
name
>=
registers
.
length
)
{
Register
[
]
newRegisters
=
new
Register
[
Math
.
min
(
1
<<
16
,
name
*
2
)
]
;
System
.
arraycopy
(
registers
,
0
,
newRegisters
,
0
,
registers
.
length
)
;
registers
=
newRegisters
;
}
registers
[
name
]
=
newRegister
;
}
public
static
void
setRegister
(
char
name
,
String
value
)
{
if
(
name
>=
registers
.
length
)
{
Register
[
]
newRegisters
=
new
Register
[
Math
.
min
(
1
<<
16
,
name
*
2
)
]
;
System
.
arraycopy
(
registers
,
0
,
newRegisters
,
0
,
registers
.
length
)
;
registers
=
newRegisters
;
registers
[
name
]
=
new
StringRegister
(
value
)
;
}
else
{
Register
register
=
registers
[
name
]
;
if
(
register
!=
null
)
register
.
setValue
(
value
)
;
else
registers
[
name
]
=
new
StringRegister
(
value
)
;
}
}
public
static
void
clearRegister
(
char
name
)
{
if
(
name
>=
registers
.
length
)
return
;
Register
register
=
registers
[
name
]
;
if
(
name
==
'$'
||
name
==
'%'
)
register
.
setValue
(
""
)
;
else
registers
[
name
]
=
null
;
}
public
static
Register
[
]
getRegisters
(
)
{
return
registers
;
}
public
interface
Register
{
String
toString
(
)
;
void
setValue
(
String
value
)
;
}
public
static
class
ClipboardRegister
implements
Register
{
Clipboard
clipboard
;
public
ClipboardRegister
(
Clipboard
clipboard
)
{
this
.
clipboard
=
clipboard
;
}
public
void
setValue
(
String
value
)
{
StringSelection
selection
=
new
StringSelection
(
value
)
;
clipboard
.
setContents
(
selection
,
null
)
;
}
public
String
toString
(
)
{
try
{
String
selection
=
(
String
)
(
clipboard
.
getContents
(
this
)
.
getTransferData
(
DataFlavor
.
stringFlavor
)
)
;
boolean
trailingEOL
=
(
selection
.
endsWith
(
"\n"
)
||
selection
.
endsWith
(
System
.
getProperty
(
"line.separator"
)
)
)
;
BufferedReader
in
=
new
BufferedReader
(
new
StringReader
(
selection
)
)
;
StringBuffer
buf
=
new
StringBuffer
(
)
;
String
line
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
buf
.
append
(
line
)
;
buf
.
append
(
'\n'
)
;
}
if
(
!
trailingEOL
)
buf
.
setLength
(
buf
.
length
(
)
-
1
)
;
return
buf
.
toString
(
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
NOTICE
,
this
,
e
)
;
return
null
;
}
}
}
public
static
class
StringRegister
implements
Register
{
private
String
value
;
public
StringRegister
(
String
value
)
{
this
.
value
=
value
;
}
public
void
setValue
(
String
value
)
{
this
.
value
=
value
;
}
public
String
toString
(
)
{
return
value
;
}
public
void
dispose
(
)
{
}
}
private
static
Register
[
]
registers
;
private
Registers
(
)
{
}
static
{
registers
=
new
Register
[
256
]
;
registers
[
'$'
]
=
new
ClipboardRegister
(
Toolkit
.
getDefaultToolkit
(
)
.
getSystemClipboard
(
)
)
;
}
}
