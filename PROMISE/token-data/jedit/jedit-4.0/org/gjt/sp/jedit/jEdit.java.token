package
org
.
gjt
.
sp
.
jedit
;
import
com
.
microstar
.
xml
.
*
;
import
javax
.
swing
.
plaf
.
metal
.
*
;
import
javax
.
swing
.
plaf
.
FontUIResource
;
import
javax
.
swing
.
text
.
DefaultEditorKit
;
import
javax
.
swing
.
text
.
Element
;
import
javax
.
swing
.
text
.
JTextComponent
;
import
javax
.
swing
.
text
.
Keymap
;
import
javax
.
swing
.
*
;
import
java
.
awt
.
*
;
import
java
.
awt
.
event
.
*
;
import
java
.
io
.
*
;
import
java
.
net
.
*
;
import
java
.
text
.
MessageFormat
;
import
java
.
util
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
browser
.
VFSBrowser
;
import
org
.
gjt
.
sp
.
jedit
.
msg
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
gui
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
io
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
search
.
SearchAndReplace
;
import
org
.
gjt
.
sp
.
jedit
.
syntax
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
textarea
.
*
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
jEdit
{
public
static
String
getVersion
(
)
{
return
MiscUtilities
.
buildToVersion
(
getBuild
(
)
)
;
}
public
static
String
getBuild
(
)
{
return
"04.00.99.00"
;
}
public
static
void
main
(
String
[
]
args
)
{
String
javaVersion
=
System
.
getProperty
(
"java.version"
)
;
if
(
javaVersion
.
compareTo
(
"1.3"
)
<
0
)
{
System
.
err
.
println
(
"You are running Java version "
+
javaVersion
+
"."
)
;
System
.
err
.
println
(
"jEdit requires Java 1.3 or later."
)
;
System
.
exit
(
1
)
;
}
int
level
=
Log
.
WARNING
;
if
(
args
.
length
>=
1
)
{
String
levelStr
=
args
[
0
]
;
if
(
levelStr
.
length
(
)
==
1
&&
Character
.
isDigit
(
levelStr
.
charAt
(
0
)
)
)
{
level
=
Integer
.
parseInt
(
levelStr
)
;
args
[
0
]
=
null
;
}
}
boolean
endOpts
=
false
;
settingsDirectory
=
MiscUtilities
.
constructPath
(
System
.
getProperty
(
"user.home"
)
,
".jedit"
)
;
String
portFile
=
"server"
;
boolean
restore
=
true
;
boolean
gui
=
true
;
boolean
noPlugins
=
false
;
boolean
noStartupScripts
=
false
;
String
userDir
=
System
.
getProperty
(
"user.dir"
)
;
String
scriptFile
=
null
;
for
(
int
i
=
0
;
i
<
args
.
length
;
i
++
)
{
String
arg
=
args
[
i
]
;
if
(
arg
==
null
)
continue
;
else
if
(
arg
.
length
(
)
==
0
)
args
[
i
]
=
null
;
else
if
(
arg
.
startsWith
(
"-"
)
&&
!
endOpts
)
{
if
(
arg
.
equals
(
"--"
)
)
endOpts
=
true
;
else
if
(
arg
.
equals
(
"-usage"
)
)
{
version
(
)
;
System
.
err
.
println
(
)
;
usage
(
)
;
System
.
exit
(
1
)
;
}
else
if
(
arg
.
equals
(
"-version"
)
)
{
version
(
)
;
System
.
exit
(
1
)
;
}
else
if
(
arg
.
equals
(
"-nosettings"
)
)
settingsDirectory
=
null
;
else
if
(
arg
.
startsWith
(
"-settings="
)
)
settingsDirectory
=
arg
.
substring
(
10
)
;
else
if
(
arg
.
startsWith
(
"-noserver"
)
)
portFile
=
null
;
else
if
(
arg
.
equals
(
"-server"
)
)
portFile
=
"server"
;
else
if
(
arg
.
startsWith
(
"-server="
)
)
portFile
=
arg
.
substring
(
8
)
;
else
if
(
arg
.
startsWith
(
"-background"
)
)
background
=
true
;
else
if
(
arg
.
equals
(
"-nogui"
)
)
gui
=
false
;
else
if
(
arg
.
equals
(
"-norestore"
)
)
restore
=
false
;
else
if
(
arg
.
equals
(
"-noplugins"
)
)
noPlugins
=
true
;
else
if
(
arg
.
equals
(
"-nostartupscripts"
)
)
noStartupScripts
=
true
;
else
if
(
arg
.
startsWith
(
"-run="
)
)
scriptFile
=
arg
.
substring
(
5
)
;
else
{
System
.
err
.
println
(
"Unknown option: "
+
arg
)
;
usage
(
)
;
System
.
exit
(
1
)
;
}
args
[
i
]
=
null
;
}
}
if
(
settingsDirectory
!=
null
&&
portFile
!=
null
)
portFile
=
MiscUtilities
.
constructPath
(
settingsDirectory
,
portFile
)
;
else
portFile
=
null
;
Log
.
init
(
true
,
level
)
;
if
(
portFile
!=
null
&&
new
File
(
portFile
)
.
exists
(
)
)
{
int
port
,
key
;
try
{
BufferedReader
in
=
new
BufferedReader
(
new
FileReader
(
portFile
)
)
;
String
check
=
in
.
readLine
(
)
;
if
(
!
check
.
equals
(
"b"
)
)
throw
new
Exception
(
"Wrong port file format"
)
;
port
=
Integer
.
parseInt
(
in
.
readLine
(
)
)
;
key
=
Integer
.
parseInt
(
in
.
readLine
(
)
)
;
in
.
close
(
)
;
Socket
socket
=
new
Socket
(
InetAddress
.
getByName
(
"127.0.0.1"
)
,
port
)
;
DataOutputStream
out
=
new
DataOutputStream
(
socket
.
getOutputStream
(
)
)
;
out
.
writeInt
(
key
)
;
String
script
=
makeServerScript
(
restore
,
args
,
scriptFile
)
;
out
.
writeUTF
(
script
)
;
out
.
close
(
)
;
System
.
exit
(
0
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
NOTICE
,
jEdit
.
class
,
"An error occurred"
+
" while connecting to the jEdit server instance."
)
;
Log
.
log
(
Log
.
NOTICE
,
jEdit
.
class
,
"This probably means that"
+
" jEdit crashed and/or exited abnormally"
)
;
Log
.
log
(
Log
.
NOTICE
,
jEdit
.
class
,
"the last time it was run."
)
;
Log
.
log
(
Log
.
NOTICE
,
jEdit
.
class
,
"If you don't"
+
" know what this means, don't worry."
)
;
Log
.
log
(
Log
.
NOTICE
,
jEdit
.
class
,
e
)
;
}
}
if
(
!
new
File
(
settingsDirectory
,
"nosplash"
)
.
exists
(
)
)
GUIUtilities
.
showSplashScreen
(
)
;
Writer
stream
;
if
(
settingsDirectory
!=
null
)
{
File
_settingsDirectory
=
new
File
(
settingsDirectory
)
;
if
(
!
_settingsDirectory
.
exists
(
)
)
_settingsDirectory
.
mkdirs
(
)
;
File
_macrosDirectory
=
new
File
(
settingsDirectory
,
"macros"
)
;
if
(
!
_macrosDirectory
.
exists
(
)
)
_macrosDirectory
.
mkdir
(
)
;
String
logPath
=
MiscUtilities
.
constructPath
(
settingsDirectory
,
"activity.log"
)
;
backupSettingsFile
(
new
File
(
logPath
)
)
;
try
{
stream
=
new
BufferedWriter
(
new
FileWriter
(
logPath
)
)
;
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
stream
=
null
;
}
}
else
{
stream
=
null
;
}
Log
.
setLogWriter
(
stream
)
;
Log
.
log
(
Log
.
NOTICE
,
jEdit
.
class
,
"jEdit version "
+
getVersion
(
)
)
;
Log
.
log
(
Log
.
MESSAGE
,
jEdit
.
class
,
"Settings directory is "
+
settingsDirectory
)
;
if
(
portFile
!=
null
)
{
server
=
new
EditServer
(
portFile
)
;
if
(
!
server
.
isOK
(
)
)
server
=
null
;
}
else
{
if
(
background
)
{
background
=
false
;
System
.
err
.
println
(
"You cannot specify both the"
+
" -background and -noserver switches"
)
;
}
}
initMisc
(
)
;
initSystemProperties
(
)
;
if
(
jEditHome
!=
null
)
initSiteProperties
(
)
;
GUIUtilities
.
advanceSplashProgress
(
)
;
BeanShell
.
init
(
)
;
initUserProperties
(
)
;
initPLAF
(
)
;
if
(
OperatingSystem
.
hasJava14
(
)
&&
System
.
getProperty
(
"jedit.nojava14"
)
==
null
)
{
try
{
ClassLoader
loader
=
jEdit
.
class
.
getClassLoader
(
)
;
Class
clazz
;
if
(
loader
!=
null
)
clazz
=
loader
.
loadClass
(
"org.gjt.sp.jedit.Java14"
)
;
else
clazz
=
Class
.
forName
(
"org.gjt.sp.jedit.Java14"
)
;
java
.
lang
.
reflect
.
Method
meth
=
clazz
.
getMethod
(
"init"
,
new
Class
[
0
]
)
;
meth
.
invoke
(
null
,
new
Object
[
0
]
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
e
)
;
System
.
exit
(
1
)
;
}
}
initActions
(
)
;
initDockables
(
)
;
GUIUtilities
.
advanceSplashProgress
(
)
;
VFSManager
.
init
(
)
;
if
(
!
noPlugins
)
initPlugins
(
)
;
if
(
settingsDirectory
!=
null
)
{
File
history
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"history"
)
)
;
if
(
history
.
exists
(
)
)
historyModTime
=
history
.
lastModified
(
)
;
HistoryModel
.
loadHistory
(
history
)
;
File
recent
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"recent.xml"
)
)
;
if
(
recent
.
exists
(
)
)
recentModTime
=
recent
.
lastModified
(
)
;
BufferHistory
.
load
(
recent
)
;
}
GUIUtilities
.
advanceSplashProgress
(
)
;
sortBuffers
=
getBooleanProperty
(
"sortBuffers"
)
;
sortByName
=
getBooleanProperty
(
"sortByName"
)
;
reloadModes
(
)
;
GUIUtilities
.
advanceSplashProgress
(
)
;
SearchAndReplace
.
load
(
)
;
GUIUtilities
.
advanceSplashProgress
(
)
;
for
(
int
i
=
0
;
i
<
jars
.
size
(
)
;
i
++
)
{
(
(
EditPlugin
.
JAR
)
jars
.
elementAt
(
i
)
)
.
getClassLoader
(
)
.
startAllPlugins
(
)
;
}
Macros
.
loadMacros
(
)
;
if
(
!
noStartupScripts
&&
jEditHome
!=
null
)
{
String
path
=
MiscUtilities
.
constructPath
(
jEditHome
,
"startup"
)
;
File
file
=
new
File
(
path
)
;
if
(
file
.
exists
(
)
)
runStartupScripts
(
file
)
;
}
if
(
!
noStartupScripts
&&
settingsDirectory
!=
null
)
{
String
path
=
MiscUtilities
.
constructPath
(
settingsDirectory
,
"startup"
)
;
File
file
=
new
File
(
path
)
;
if
(
!
file
.
exists
(
)
)
file
.
mkdirs
(
)
;
else
runStartupScripts
(
file
)
;
}
if
(
scriptFile
!=
null
)
{
scriptFile
=
MiscUtilities
.
constructPath
(
userDir
,
scriptFile
)
;
BeanShell
.
runScript
(
null
,
scriptFile
,
null
,
false
)
;
}
propertiesChanged
(
)
;
GUIUtilities
.
advanceSplashProgress
(
)
;
Buffer
buffer
=
openFiles
(
null
,
userDir
,
args
)
;
if
(
buffer
!=
null
)
{
gui
=
true
;
}
String
splitConfig
=
null
;
if
(
restore
&&
settingsDirectory
!=
null
&&
jEdit
.
getBooleanProperty
(
"restore"
)
&&
(
bufferCount
==
0
||
jEdit
.
getBooleanProperty
(
"restore.cli"
)
)
)
{
splitConfig
=
restoreOpenFiles
(
)
;
}
if
(
bufferCount
==
0
&&
gui
)
newFile
(
null
)
;
final
Buffer
_buffer
=
buffer
;
final
String
_splitConfig
=
splitConfig
;
final
boolean
_gui
=
gui
;
GUIUtilities
.
advanceSplashProgress
(
)
;
SwingUtilities
.
invokeLater
(
new
Runnable
(
)
{
public
void
run
(
)
{
EditBus
.
send
(
new
EditorStarted
(
null
)
)
;
if
(
_gui
)
{
View
view
;
if
(
_buffer
!=
null
)
view
=
newView
(
null
,
_buffer
)
;
else
view
=
newView
(
null
,
_splitConfig
)
;
}
VFSManager
.
start
(
)
;
if
(
server
!=
null
)
server
.
start
(
)
;
GUIUtilities
.
hideSplashScreen
(
)
;
Log
.
log
(
Log
.
MESSAGE
,
jEdit
.
class
,
"Startup "
+
"complete"
)
;
if
(
pluginErrors
!=
null
)
{
String
caption
=
jEdit
.
getProperty
(
"plugin-error.caption"
+
(
pluginErrors
.
size
(
)
==
1
?
"-1"
:
""
)
,
new
Integer
[
]
{
new
Integer
(
pluginErrors
.
size
(
)
)
}
)
;
new
ErrorListDialog
(
jEdit
.
getFirstView
(
)
,
jEdit
.
getProperty
(
"plugin-error.title"
)
,
caption
,
pluginErrors
,
true
)
;
pluginErrors
.
removeAllElements
(
)
;
}
}
}
)
;
}
public
static
final
Properties
getProperties
(
)
{
return
props
;
}
public
static
final
String
getProperty
(
String
name
)
{
return
props
.
getProperty
(
name
)
;
}
public
static
final
String
getProperty
(
String
name
,
String
def
)
{
return
props
.
getProperty
(
name
,
def
)
;
}
public
static
final
String
getProperty
(
String
name
,
Object
[
]
args
)
{
if
(
name
==
null
)
return
null
;
if
(
args
==
null
)
return
props
.
getProperty
(
name
)
;
else
{
String
value
=
props
.
getProperty
(
name
)
;
if
(
value
==
null
)
return
null
;
else
return
MessageFormat
.
format
(
value
,
args
)
;
}
}
public
static
final
boolean
getBooleanProperty
(
String
name
)
{
return
getBooleanProperty
(
name
,
false
)
;
}
public
static
final
boolean
getBooleanProperty
(
String
name
,
boolean
def
)
{
String
value
=
getProperty
(
name
)
;
if
(
value
==
null
)
return
def
;
else
if
(
value
.
equals
(
"true"
)
||
value
.
equals
(
"yes"
)
||
value
.
equals
(
"on"
)
)
return
true
;
else
if
(
value
.
equals
(
"false"
)
||
value
.
equals
(
"no"
)
||
value
.
equals
(
"off"
)
)
return
false
;
else
return
def
;
}
public
static
final
int
getIntegerProperty
(
String
name
,
int
def
)
{
String
value
=
getProperty
(
name
)
;
if
(
value
==
null
)
return
def
;
else
{
try
{
return
Integer
.
parseInt
(
value
)
;
}
catch
(
NumberFormatException
nf
)
{
return
def
;
}
}
}
public
static
final
Font
getFontProperty
(
String
name
)
{
return
getFontProperty
(
name
,
null
)
;
}
public
static
final
Font
getFontProperty
(
String
name
,
Font
def
)
{
String
family
=
getProperty
(
name
)
;
String
sizeString
=
getProperty
(
name
+
"size"
)
;
String
styleString
=
getProperty
(
name
+
"style"
)
;
if
(
family
==
null
||
sizeString
==
null
||
styleString
==
null
)
return
def
;
else
{
int
size
,
style
;
try
{
size
=
Integer
.
parseInt
(
sizeString
)
;
}
catch
(
NumberFormatException
nf
)
{
return
def
;
}
try
{
style
=
Integer
.
parseInt
(
styleString
)
;
}
catch
(
NumberFormatException
nf
)
{
return
def
;
}
return
new
Font
(
family
,
style
,
size
)
;
}
}
public
static
Color
getColorProperty
(
String
name
)
{
return
getColorProperty
(
name
,
Color
.
black
)
;
}
public
static
Color
getColorProperty
(
String
name
,
Color
def
)
{
String
value
=
getProperty
(
name
)
;
if
(
value
==
null
)
return
def
;
else
return
GUIUtilities
.
parseColor
(
value
,
def
)
;
}
public
static
void
setColorProperty
(
String
name
,
Color
value
)
{
setProperty
(
name
,
GUIUtilities
.
getColorHexString
(
value
)
)
;
}
public
static
final
void
setProperty
(
String
name
,
String
value
)
{
if
(
value
==
null
||
value
.
length
(
)
==
0
)
{
String
prop
=
(
String
)
defaultProps
.
get
(
name
)
;
if
(
prop
==
null
||
prop
.
length
(
)
==
0
)
props
.
remove
(
name
)
;
else
props
.
put
(
name
,
""
)
;
}
else
{
String
prop
=
(
String
)
defaultProps
.
get
(
name
)
;
if
(
value
.
equals
(
prop
)
)
props
.
remove
(
name
)
;
else
props
.
put
(
name
,
value
)
;
}
}
public
static
final
void
setTemporaryProperty
(
String
name
,
String
value
)
{
props
.
remove
(
name
)
;
defaultProps
.
put
(
name
,
value
)
;
}
public
static
final
void
setBooleanProperty
(
String
name
,
boolean
value
)
{
setProperty
(
name
,
value
?
"true"
:
"false"
)
;
}
public
static
final
void
setIntegerProperty
(
String
name
,
int
value
)
{
setProperty
(
name
,
String
.
valueOf
(
value
)
)
;
}
public
static
final
void
setFontProperty
(
String
name
,
Font
value
)
{
setProperty
(
name
,
value
.
getFamily
(
)
)
;
setIntegerProperty
(
name
+
"size"
,
value
.
getSize
(
)
)
;
setIntegerProperty
(
name
+
"style"
,
value
.
getStyle
(
)
)
;
}
public
static
final
void
unsetProperty
(
String
name
)
{
if
(
defaultProps
.
get
(
name
)
!=
null
)
props
.
put
(
name
,
""
)
;
else
props
.
remove
(
name
)
;
}
public
static
final
void
resetProperty
(
String
name
)
{
props
.
remove
(
name
)
;
}
public
static
void
propertiesChanged
(
)
{
initKeyBindings
(
)
;
Autosave
.
setInterval
(
getIntegerProperty
(
"autosave"
,
30
)
)
;
saveCaret
=
getBooleanProperty
(
"saveCaret"
)
;
UIDefaults
defaults
=
UIManager
.
getDefaults
(
)
;
Font
font
=
getFontProperty
(
"view.font"
)
;
defaults
.
put
(
"TextArea.font"
,
font
)
;
defaults
.
put
(
"TextPane.font"
,
font
)
;
initProxy
(
)
;
EditBus
.
send
(
new
PropertiesChanged
(
null
)
)
;
}
public
static
String
[
]
getNotLoadedPluginJARs
(
)
{
Vector
returnValue
=
new
Vector
(
)
;
if
(
jEditHome
!=
null
)
{
String
systemPluginDir
=
MiscUtilities
.
constructPath
(
jEditHome
,
"jars"
)
;
String
[
]
list
=
new
File
(
systemPluginDir
)
.
list
(
)
;
if
(
list
!=
null
)
getNotLoadedPluginJARs
(
returnValue
,
systemPluginDir
,
list
)
;
}
if
(
settingsDirectory
!=
null
)
{
String
userPluginDir
=
MiscUtilities
.
constructPath
(
settingsDirectory
,
"jars"
)
;
String
[
]
list
=
new
File
(
userPluginDir
)
.
list
(
)
;
if
(
list
!=
null
)
{
getNotLoadedPluginJARs
(
returnValue
,
userPluginDir
,
list
)
;
}
}
String
[
]
_returnValue
=
new
String
[
returnValue
.
size
(
)
]
;
returnValue
.
copyInto
(
_returnValue
)
;
return
_returnValue
;
}
public
static
EditPlugin
getPlugin
(
String
name
)
{
EditPlugin
[
]
plugins
=
getPlugins
(
)
;
for
(
int
i
=
0
;
i
<
plugins
.
length
;
i
++
)
{
if
(
plugins
[
i
]
.
getClassName
(
)
.
equals
(
name
)
)
return
plugins
[
i
]
;
}
return
null
;
}
public
static
EditPlugin
[
]
getPlugins
(
)
{
Vector
vector
=
new
Vector
(
)
;
for
(
int
i
=
0
;
i
<
jars
.
size
(
)
;
i
++
)
{
(
(
EditPlugin
.
JAR
)
jars
.
elementAt
(
i
)
)
.
getPlugins
(
vector
)
;
}
EditPlugin
[
]
array
=
new
EditPlugin
[
vector
.
size
(
)
]
;
vector
.
copyInto
(
array
)
;
return
array
;
}
public
static
EditPlugin
.
JAR
[
]
getPluginJARs
(
)
{
EditPlugin
.
JAR
[
]
array
=
new
EditPlugin
.
JAR
[
jars
.
size
(
)
]
;
jars
.
copyInto
(
array
)
;
return
array
;
}
public
static
EditPlugin
.
JAR
getPluginJAR
(
String
path
)
{
for
(
int
i
=
0
;
i
<
jars
.
size
(
)
;
i
++
)
{
EditPlugin
.
JAR
jar
=
(
EditPlugin
.
JAR
)
jars
.
elementAt
(
i
)
;
if
(
jar
.
getPath
(
)
.
equals
(
path
)
)
return
jar
;
}
return
null
;
}
public
static
void
addPluginJAR
(
EditPlugin
.
JAR
plugin
)
{
addActionSet
(
plugin
.
getActions
(
)
)
;
jars
.
addElement
(
plugin
)
;
}
public
static
void
addActionSet
(
ActionSet
actionSet
)
{
actionSets
.
addElement
(
actionSet
)
;
}
public
static
ActionSet
[
]
getActionSets
(
)
{
ActionSet
[
]
retVal
=
new
ActionSet
[
actionSets
.
size
(
)
]
;
actionSets
.
copyInto
(
retVal
)
;
return
retVal
;
}
public
static
EditAction
getAction
(
String
name
)
{
for
(
int
i
=
0
;
i
<
actionSets
.
size
(
)
;
i
++
)
{
EditAction
action
=
(
(
ActionSet
)
actionSets
.
elementAt
(
i
)
)
.
getAction
(
name
)
;
if
(
action
!=
null
)
return
action
;
}
return
null
;
}
public
static
ActionSet
getActionSetForAction
(
EditAction
action
)
{
for
(
int
i
=
0
;
i
<
actionSets
.
size
(
)
;
i
++
)
{
ActionSet
set
=
(
ActionSet
)
actionSets
.
elementAt
(
i
)
;
if
(
set
.
contains
(
action
)
)
return
set
;
}
return
null
;
}
public
static
EditAction
[
]
getActions
(
)
{
Vector
vec
=
new
Vector
(
)
;
for
(
int
i
=
0
;
i
<
actionSets
.
size
(
)
;
i
++
)
(
(
ActionSet
)
actionSets
.
elementAt
(
i
)
)
.
getActions
(
vec
)
;
EditAction
[
]
retVal
=
new
EditAction
[
vec
.
size
(
)
]
;
vec
.
copyInto
(
retVal
)
;
return
retVal
;
}
public
static
void
reloadModes
(
)
{
modes
=
new
Vector
(
50
)
;
if
(
jEditHome
==
null
)
loadModeCatalog
(
"/modes/catalog"
,
true
)
;
else
{
loadModeCatalog
(
MiscUtilities
.
constructPath
(
jEditHome
,
"modes"
,
"catalog"
)
,
false
)
;
}
if
(
settingsDirectory
!=
null
)
{
File
userModeDir
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"modes"
)
)
;
if
(
!
userModeDir
.
exists
(
)
)
userModeDir
.
mkdirs
(
)
;
File
userCatalog
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"modes"
,
"catalog"
)
)
;
if
(
!
userCatalog
.
exists
(
)
)
{
try
{
FileWriter
out
=
new
FileWriter
(
userCatalog
)
;
out
.
write
(
jEdit
.
getProperty
(
"defaultCatalog"
)
)
;
out
.
close
(
)
;
}
catch
(
IOException
io
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
io
)
;
}
}
loadModeCatalog
(
userCatalog
.
getPath
(
)
,
false
)
;
}
Buffer
buffer
=
buffersFirst
;
while
(
buffer
!=
null
)
{
buffer
.
setMode
(
)
;
buffer
=
buffer
.
next
;
}
}
public
static
Mode
getMode
(
String
name
)
{
for
(
int
i
=
0
;
i
<
modes
.
size
(
)
;
i
++
)
{
Mode
mode
=
(
Mode
)
modes
.
elementAt
(
i
)
;
if
(
mode
.
getName
(
)
.
equals
(
name
)
)
return
mode
;
}
return
null
;
}
public
static
Mode
[
]
getModes
(
)
{
Mode
[
]
array
=
new
Mode
[
modes
.
size
(
)
]
;
modes
.
copyInto
(
array
)
;
return
array
;
}
public
static
void
showOpenFileDialog
(
View
view
)
{
showOpenFileDialog
(
view
,
null
)
;
}
public
static
void
showOpenFileWithOtherEncodingDialog
(
View
view
)
{
String
encoding
=
GUIUtilities
.
input
(
view
,
"encoding-prompt"
,
null
,
jEdit
.
getProperty
(
"buffer.encoding"
,
System
.
getProperty
(
"file.encoding"
)
)
)
;
if
(
encoding
==
null
)
return
;
Macros
.
Recorder
recorder
=
view
.
getMacroRecorder
(
)
;
if
(
recorder
!=
null
)
{
recorder
.
record
(
"props = new Hashtable();"
)
;
recorder
.
record
(
"props.put(\"encoding\",\""
+
encoding
+
"\");"
)
;
recorder
.
record
(
"jEdit.showOpenFileDialog(view,props);"
)
;
}
Hashtable
props
=
new
Hashtable
(
)
;
props
.
put
(
Buffer
.
ENCODING
,
encoding
)
;
showOpenFileDialog
(
view
,
props
)
;
}
public
static
void
showOpenFileDialog
(
View
view
,
Hashtable
props
)
{
String
[
]
files
=
GUIUtilities
.
showVFSFileDialog
(
view
,
null
,
VFSBrowser
.
OPEN_DIALOG
,
true
)
;
Buffer
buffer
=
null
;
if
(
files
!=
null
)
{
for
(
int
i
=
0
;
i
<
files
.
length
;
i
++
)
{
Buffer
newBuffer
=
openFile
(
null
,
null
,
files
[
i
]
,
false
,
props
)
;
if
(
newBuffer
!=
null
)
buffer
=
newBuffer
;
}
}
if
(
buffer
!=
null
)
view
.
setBuffer
(
buffer
)
;
}
public
static
String
restoreOpenFiles
(
)
{
if
(
settingsDirectory
==
null
)
return
null
;
File
session
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"session"
)
)
;
if
(
!
session
.
exists
(
)
)
return
null
;
String
splitConfig
=
null
;
try
{
BufferedReader
in
=
new
BufferedReader
(
new
FileReader
(
session
)
)
;
String
line
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
if
(
line
.
startsWith
(
"splits\t"
)
)
splitConfig
=
line
.
substring
(
7
)
;
else
openFile
(
null
,
line
)
;
}
in
.
close
(
)
;
}
catch
(
IOException
io
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
"Error while loading "
+
session
)
;
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
io
)
;
}
return
splitConfig
;
}
public
static
void
saveOpenFiles
(
View
view
)
{
if
(
settingsDirectory
==
null
)
return
;
view
.
getEditPane
(
)
.
saveCaretInfo
(
)
;
Buffer
current
=
view
.
getBuffer
(
)
;
File
session
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"session"
)
)
;
try
{
String
lineSep
=
System
.
getProperty
(
"line.separator"
)
;
BufferedWriter
out
=
new
BufferedWriter
(
new
FileWriter
(
session
)
)
;
Buffer
buffer
=
buffersFirst
;
while
(
buffer
!=
null
)
{
if
(
!
buffer
.
isUntitled
(
)
)
{
out
.
write
(
buffer
.
getPath
(
)
)
;
out
.
write
(
lineSep
)
;
}
buffer
=
buffer
.
next
;
}
out
.
write
(
"splits\t"
)
;
out
.
write
(
view
.
getSplitConfig
(
)
)
;
out
.
write
(
lineSep
)
;
out
.
close
(
)
;
}
catch
(
IOException
io
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
"Error while saving "
+
session
)
;
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
io
)
;
}
}
public
static
Buffer
openFiles
(
View
view
,
String
parent
,
String
[
]
args
)
{
Buffer
retVal
=
null
;
Buffer
lastBuffer
=
null
;
for
(
int
i
=
0
;
i
<
args
.
length
;
i
++
)
{
String
arg
=
args
[
i
]
;
if
(
arg
==
null
)
continue
;
else
if
(
arg
.
startsWith
(
"+line:"
)
||
arg
.
startsWith
(
"+marker:"
)
)
{
if
(
lastBuffer
!=
null
)
gotoMarker
(
view
,
lastBuffer
,
arg
)
;
continue
;
}
lastBuffer
=
openFile
(
null
,
parent
,
arg
,
false
,
null
)
;
if
(
retVal
==
null
&&
lastBuffer
!=
null
)
retVal
=
lastBuffer
;
}
if
(
view
!=
null
&&
retVal
!=
null
)
view
.
setBuffer
(
retVal
)
;
return
retVal
;
}
public
static
Buffer
openFile
(
View
view
,
String
path
)
{
return
openFile
(
view
,
null
,
path
,
false
,
new
Hashtable
(
)
)
;
}
public
static
Buffer
openFile
(
View
view
,
String
parent
,
String
path
,
boolean
readOnly
,
boolean
newFile
)
{
return
openFile
(
view
,
parent
,
path
,
newFile
,
new
Hashtable
(
)
)
;
}
public
static
Buffer
openFile
(
View
view
,
String
parent
,
String
path
,
boolean
readOnly
,
boolean
newFile
,
Hashtable
props
)
{
return
openFile
(
view
,
parent
,
path
,
newFile
,
props
)
;
}
public
static
Buffer
openFile
(
View
view
,
String
parent
,
String
path
,
boolean
newFile
,
Hashtable
props
)
{
if
(
view
!=
null
&&
parent
==
null
)
parent
=
MiscUtilities
.
getParentOfPath
(
view
.
getBuffer
(
)
.
getPath
(
)
)
;
if
(
MiscUtilities
.
isURL
(
path
)
)
{
if
(
MiscUtilities
.
getProtocolOfURL
(
path
)
.
equals
(
"file"
)
)
path
=
path
.
substring
(
5
)
;
}
path
=
MiscUtilities
.
constructPath
(
parent
,
path
)
;
if
(
!
MiscUtilities
.
isURL
(
path
)
)
path
=
MiscUtilities
.
canonPath
(
path
)
;
synchronized
(
bufferListLock
)
{
Buffer
buffer
=
getBuffer
(
path
)
;
if
(
buffer
!=
null
)
{
if
(
view
!=
null
)
view
.
setBuffer
(
buffer
)
;
return
buffer
;
}
if
(
props
==
null
)
props
=
new
Hashtable
(
)
;
BufferHistory
.
Entry
entry
=
BufferHistory
.
getEntry
(
path
)
;
if
(
entry
!=
null
&&
saveCaret
&&
props
.
get
(
Buffer
.
CARET
)
==
null
)
{
int
caret
=
entry
.
caret
;
props
.
put
(
Buffer
.
CARET
,
new
Integer
(
entry
.
caret
)
)
;
if
(
entry
.
selection
!=
null
)
{
props
.
put
(
Buffer
.
SELECTION
,
entry
.
getSelection
(
)
)
;
}
}
if
(
entry
!=
null
&&
props
.
get
(
Buffer
.
ENCODING
)
==
null
)
{
if
(
entry
.
encoding
!=
null
)
props
.
put
(
Buffer
.
ENCODING
,
entry
.
encoding
)
;
}
Buffer
newBuffer
=
new
Buffer
(
path
,
newFile
,
false
,
props
)
;
if
(
!
newBuffer
.
load
(
view
,
false
)
)
return
null
;
addBufferToList
(
newBuffer
)
;
EditBus
.
send
(
new
BufferUpdate
(
newBuffer
,
view
,
BufferUpdate
.
CREATED
)
)
;
if
(
view
!=
null
)
view
.
setBuffer
(
newBuffer
)
;
return
newBuffer
;
}
}
public
static
Buffer
openTemporary
(
View
view
,
String
parent
,
String
path
,
boolean
newFile
)
{
if
(
view
!=
null
&&
parent
==
null
)
parent
=
MiscUtilities
.
getParentOfPath
(
view
.
getBuffer
(
)
.
getPath
(
)
)
;
if
(
MiscUtilities
.
isURL
(
path
)
)
{
if
(
MiscUtilities
.
getProtocolOfURL
(
path
)
.
equals
(
"file"
)
)
path
=
path
.
substring
(
5
)
;
}
path
=
MiscUtilities
.
constructPath
(
parent
,
path
)
;
synchronized
(
bufferListLock
)
{
Buffer
buffer
=
getBuffer
(
path
)
;
if
(
buffer
!=
null
)
return
buffer
;
buffer
=
new
Buffer
(
path
,
newFile
,
true
,
new
Hashtable
(
)
)
;
if
(
!
buffer
.
load
(
view
,
false
)
)
return
null
;
else
return
buffer
;
}
}
public
static
void
commitTemporary
(
Buffer
buffer
)
{
if
(
!
buffer
.
isTemporary
(
)
)
return
;
addBufferToList
(
buffer
)
;
buffer
.
commitTemporary
(
)
;
EditBus
.
send
(
new
BufferUpdate
(
buffer
,
null
,
BufferUpdate
.
CREATED
)
)
;
}
public
static
Buffer
newFile
(
View
view
)
{
String
path
;
if
(
view
!=
null
&&
view
.
getBuffer
(
)
!=
null
)
{
path
=
MiscUtilities
.
getParentOfPath
(
view
.
getBuffer
(
)
.
getPath
(
)
)
;
VFS
vfs
=
VFSManager
.
getVFSForPath
(
path
)
;
if
(
(
vfs
.
getCapabilities
(
)
&
VFS
.
WRITE_CAP
)
==
0
)
path
=
System
.
getProperty
(
"user.home"
)
;
}
else
path
=
null
;
return
newFile
(
view
,
path
)
;
}
public
static
Buffer
newFile
(
View
view
,
String
dir
)
{
if
(
dir
!=
null
&&
buffersFirst
!=
null
&&
buffersFirst
==
buffersLast
&&
buffersFirst
.
isUntitled
(
)
&&
!
buffersFirst
.
isDirty
(
)
)
{
closeBuffer
(
view
,
buffersFirst
)
;
return
buffersFirst
;
}
int
untitledCount
=
0
;
Buffer
buffer
=
buffersFirst
;
while
(
buffer
!=
null
)
{
if
(
buffer
.
getName
(
)
.
startsWith
(
"Untitled-"
)
)
{
try
{
untitledCount
=
Math
.
max
(
untitledCount
,
Integer
.
parseInt
(
buffer
.
getName
(
)
.
substring
(
9
)
)
)
;
}
catch
(
NumberFormatException
nf
)
{
}
}
buffer
=
buffer
.
next
;
}
return
openFile
(
view
,
dir
,
"Untitled-"
+
(
untitledCount
+
1
)
,
true
,
null
)
;
}
public
static
boolean
closeBuffer
(
View
view
,
Buffer
buffer
)
{
if
(
buffer
.
isPerformingIO
(
)
)
{
VFSManager
.
waitForRequests
(
)
;
if
(
VFSManager
.
errorOccurred
(
)
)
return
false
;
}
if
(
buffer
.
isDirty
(
)
)
{
Object
[
]
args
=
{
buffer
.
getName
(
)
}
;
int
result
=
GUIUtilities
.
confirm
(
view
,
"notsaved"
,
args
,
JOptionPane
.
YES_NO_CANCEL_OPTION
,
JOptionPane
.
WARNING_MESSAGE
)
;
if
(
result
==
JOptionPane
.
YES_OPTION
)
{
if
(
!
buffer
.
save
(
view
,
null
,
true
)
)
return
false
;
}
else
if
(
result
!=
JOptionPane
.
NO_OPTION
)
return
false
;
}
_closeBuffer
(
view
,
buffer
)
;
return
true
;
}
public
static
void
_closeBuffer
(
View
view
,
Buffer
buffer
)
{
if
(
buffer
.
isClosed
(
)
)
{
return
;
}
if
(
!
buffer
.
isNewFile
(
)
)
{
view
.
getEditPane
(
)
.
saveCaretInfo
(
)
;
Integer
_caret
=
(
Integer
)
buffer
.
getProperty
(
Buffer
.
CARET
)
;
int
caret
=
(
_caret
==
null
?
0
:
_caret
.
intValue
(
)
)
;
BufferHistory
.
setEntry
(
buffer
.
getPath
(
)
,
caret
,
(
Selection
[
]
)
buffer
.
getProperty
(
Buffer
.
SELECTION
)
,
buffer
.
getStringProperty
(
Buffer
.
ENCODING
)
)
;
}
removeBufferFromList
(
buffer
)
;
buffer
.
close
(
)
;
EditBus
.
send
(
new
BufferUpdate
(
buffer
,
view
,
BufferUpdate
.
CLOSED
)
)
;
if
(
buffersFirst
==
null
&&
buffersLast
==
null
)
newFile
(
view
)
;
}
public
static
boolean
closeAllBuffers
(
View
view
)
{
return
closeAllBuffers
(
view
,
false
)
;
}
public
static
boolean
closeAllBuffers
(
View
view
,
boolean
isExiting
)
{
boolean
dirty
=
false
;
Buffer
buffer
=
buffersFirst
;
while
(
buffer
!=
null
)
{
if
(
buffer
.
isDirty
(
)
)
{
dirty
=
true
;
break
;
}
buffer
=
buffer
.
next
;
}
if
(
dirty
)
{
boolean
ok
=
new
CloseDialog
(
view
)
.
isOK
(
)
;
if
(
!
ok
)
return
false
;
}
VFSManager
.
waitForRequests
(
)
;
if
(
VFSManager
.
errorOccurred
(
)
)
return
false
;
buffer
=
buffersFirst
;
buffersFirst
=
buffersLast
=
null
;
bufferCount
=
0
;
while
(
buffer
!=
null
)
{
if
(
!
buffer
.
isNewFile
(
)
)
{
Integer
_caret
=
(
Integer
)
buffer
.
getProperty
(
Buffer
.
CARET
)
;
int
caret
=
(
_caret
==
null
?
0
:
_caret
.
intValue
(
)
)
;
BufferHistory
.
setEntry
(
buffer
.
getPath
(
)
,
caret
,
(
Selection
[
]
)
buffer
.
getProperty
(
Buffer
.
SELECTION
)
,
buffer
.
getStringProperty
(
Buffer
.
ENCODING
)
)
;
}
buffer
.
close
(
)
;
if
(
!
isExiting
)
{
EditBus
.
send
(
new
BufferUpdate
(
buffer
,
view
,
BufferUpdate
.
CLOSED
)
)
;
}
buffer
=
buffer
.
next
;
}
if
(
!
isExiting
)
newFile
(
view
)
;
return
true
;
}
public
static
void
saveAllBuffers
(
View
view
,
boolean
confirm
)
{
if
(
confirm
)
{
int
result
=
GUIUtilities
.
confirm
(
view
,
"saveall"
,
null
,
JOptionPane
.
YES_NO_OPTION
,
JOptionPane
.
QUESTION_MESSAGE
)
;
if
(
result
!=
JOptionPane
.
YES_OPTION
)
return
;
}
Buffer
current
=
view
.
getBuffer
(
)
;
Buffer
buffer
=
buffersFirst
;
while
(
buffer
!=
null
)
{
if
(
buffer
.
isDirty
(
)
)
{
if
(
buffer
.
isNewFile
(
)
)
view
.
setBuffer
(
buffer
)
;
buffer
.
save
(
view
,
null
,
true
)
;
}
buffer
=
buffer
.
next
;
}
view
.
setBuffer
(
current
)
;
}
public
static
void
reloadAllBuffers
(
final
View
view
,
boolean
confirm
)
{
if
(
confirm
)
{
int
result
=
GUIUtilities
.
confirm
(
view
,
"reload-all"
,
null
,
JOptionPane
.
YES_NO_OPTION
,
JOptionPane
.
QUESTION_MESSAGE
)
;
if
(
result
!=
JOptionPane
.
YES_OPTION
)
return
;
}
View
_view
=
viewsFirst
;
while
(
_view
!=
null
)
{
EditPane
[
]
panes
=
_view
.
getEditPanes
(
)
;
for
(
int
i
=
0
;
i
<
panes
.
length
;
i
++
)
{
panes
[
i
]
.
saveCaretInfo
(
)
;
}
_view
=
_view
.
next
;
}
Buffer
[
]
buffers
=
jEdit
.
getBuffers
(
)
;
for
(
int
i
=
0
;
i
<
buffers
.
length
;
i
++
)
{
Buffer
buffer
=
buffers
[
i
]
;
buffer
.
load
(
view
,
true
)
;
}
}
public
static
Buffer
getBuffer
(
String
path
)
{
boolean
caseInsensitiveFilesystem
=
(
File
.
separatorChar
==
'\\'
||
File
.
separatorChar
==
':'
)
;
synchronized
(
bufferListLock
)
{
Buffer
buffer
=
buffersFirst
;
while
(
buffer
!=
null
)
{
String
_path
=
buffer
.
getPath
(
)
;
if
(
caseInsensitiveFilesystem
)
{
if
(
_path
.
equalsIgnoreCase
(
path
)
)
return
buffer
;
}
else
{
if
(
_path
.
equals
(
path
)
)
return
buffer
;
}
buffer
=
buffer
.
next
;
}
}
return
null
;
}
public
static
Buffer
[
]
getBuffers
(
)
{
Buffer
[
]
buffers
=
new
Buffer
[
bufferCount
]
;
Buffer
buffer
=
buffersFirst
;
for
(
int
i
=
0
;
i
<
bufferCount
;
i
++
)
{
buffers
[
i
]
=
buffer
;
buffer
=
buffer
.
next
;
}
return
buffers
;
}
public
static
int
getBufferCount
(
)
{
return
bufferCount
;
}
public
static
Buffer
getFirstBuffer
(
)
{
return
buffersFirst
;
}
public
static
Buffer
getLastBuffer
(
)
{
return
buffersLast
;
}
public
static
InputHandler
getInputHandler
(
)
{
return
inputHandler
;
}
public
static
View
newView
(
View
view
,
Buffer
buffer
)
{
if
(
view
!=
null
)
{
view
.
showWaitCursor
(
)
;
view
.
getEditPane
(
)
.
saveCaretInfo
(
)
;
}
View
newView
=
new
View
(
buffer
,
null
)
;
newView
.
pack
(
)
;
if
(
view
!=
null
)
{
GUIUtilities
.
saveGeometry
(
view
,
"view"
)
;
view
.
hideWaitCursor
(
)
;
}
GUIUtilities
.
loadGeometry
(
newView
,
"view"
)
;
addViewToList
(
newView
)
;
EditBus
.
send
(
new
ViewUpdate
(
newView
,
ViewUpdate
.
CREATED
)
)
;
GUIUtilities
.
requestFocus
(
newView
,
newView
.
getTextArea
(
)
)
;
newView
.
show
(
)
;
if
(
newView
==
viewsFirst
)
{
if
(
settingsDirectory
!=
null
&&
getBooleanProperty
(
"firstTime"
)
)
new
HelpViewer
(
)
;
else
if
(
jEdit
.
getBooleanProperty
(
"tip.show"
)
)
new
TipOfTheDay
(
newView
)
;
setBooleanProperty
(
"firstTime"
,
false
)
;
}
return
newView
;
}
public
static
View
newView
(
View
view
)
{
return
newView
(
view
,
view
.
getSplitConfig
(
)
)
;
}
public
static
View
newView
(
View
view
,
String
splitConfig
)
{
if
(
view
!=
null
)
{
view
.
showWaitCursor
(
)
;
view
.
getEditPane
(
)
.
saveCaretInfo
(
)
;
}
View
newView
=
new
View
(
null
,
splitConfig
)
;
newView
.
pack
(
)
;
if
(
view
!=
null
)
{
GUIUtilities
.
saveGeometry
(
view
,
"view"
)
;
view
.
hideWaitCursor
(
)
;
}
GUIUtilities
.
loadGeometry
(
newView
,
"view"
)
;
addViewToList
(
newView
)
;
EditBus
.
send
(
new
ViewUpdate
(
newView
,
ViewUpdate
.
CREATED
)
)
;
GUIUtilities
.
requestFocus
(
newView
,
newView
.
getTextArea
(
)
)
;
newView
.
show
(
)
;
if
(
newView
==
viewsFirst
)
{
if
(
settingsDirectory
!=
null
&&
getBooleanProperty
(
"firstTime"
)
)
new
HelpViewer
(
)
;
else
if
(
jEdit
.
getBooleanProperty
(
"tip.show"
)
)
new
TipOfTheDay
(
newView
)
;
setBooleanProperty
(
"firstTime"
,
false
)
;
}
return
newView
;
}
public
static
void
closeView
(
View
view
)
{
closeView
(
view
,
true
)
;
}
public
static
View
[
]
getViews
(
)
{
View
[
]
views
=
new
View
[
viewCount
]
;
View
view
=
viewsFirst
;
for
(
int
i
=
0
;
i
<
viewCount
;
i
++
)
{
views
[
i
]
=
view
;
view
=
view
.
next
;
}
return
views
;
}
public
static
int
getViewCount
(
)
{
return
viewCount
;
}
public
static
View
getFirstView
(
)
{
return
viewsFirst
;
}
public
static
View
getLastView
(
)
{
return
viewsLast
;
}
public
static
boolean
isBackgroundModeEnabled
(
)
{
return
background
;
}
public
static
void
showMemoryDialog
(
View
view
)
{
Runtime
rt
=
Runtime
.
getRuntime
(
)
;
int
before
=
(
int
)
(
rt
.
freeMemory
(
)
/
1024
)
;
System
.
gc
(
)
;
int
after
=
(
int
)
(
rt
.
freeMemory
(
)
/
1024
)
;
int
total
=
(
int
)
(
rt
.
totalMemory
(
)
/
1024
)
;
JProgressBar
progress
=
new
JProgressBar
(
0
,
total
)
;
progress
.
setValue
(
total
-
after
)
;
progress
.
setStringPainted
(
true
)
;
progress
.
setString
(
jEdit
.
getProperty
(
"memory-status.use"
,
new
Object
[
]
{
new
Integer
(
total
-
after
)
,
new
Integer
(
total
)
}
)
)
;
Object
[
]
message
=
new
Object
[
4
]
;
message
[
0
]
=
getProperty
(
"memory-status.gc"
,
new
Object
[
]
{
new
Integer
(
after
-
before
)
}
)
;
message
[
1
]
=
Box
.
createVerticalStrut
(
12
)
;
message
[
2
]
=
progress
;
message
[
3
]
=
Box
.
createVerticalStrut
(
6
)
;
JOptionPane
.
showMessageDialog
(
view
,
message
,
jEdit
.
getProperty
(
"memory-status.title"
)
,
JOptionPane
.
INFORMATION_MESSAGE
)
;
}
public
static
String
getJEditHome
(
)
{
return
jEditHome
;
}
public
static
String
getSettingsDirectory
(
)
{
return
settingsDirectory
;
}
public
static
void
backupSettingsFile
(
File
file
)
{
if
(
settingsDirectory
==
null
)
return
;
String
backupDir
=
MiscUtilities
.
constructPath
(
settingsDirectory
,
"settings-backup"
)
;
File
dir
=
new
File
(
backupDir
)
;
if
(
!
dir
.
exists
(
)
)
dir
.
mkdirs
(
)
;
MiscUtilities
.
saveBackup
(
file
,
5
,
null
,
"~"
,
backupDir
)
;
}
public
static
void
saveSettings
(
)
{
if
(
settingsDirectory
!=
null
)
{
File
file1
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"#recent.xml#save#"
)
)
;
File
file2
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"recent.xml"
)
)
;
if
(
file2
.
exists
(
)
&&
file2
.
lastModified
(
)
!=
recentModTime
)
{
Log
.
log
(
Log
.
WARNING
,
jEdit
.
class
,
file2
+
" changed"
+
" on disk; will not save recent files"
)
;
}
else
{
backupSettingsFile
(
file2
)
;
BufferHistory
.
save
(
file1
)
;
file2
.
delete
(
)
;
file1
.
renameTo
(
file2
)
;
}
recentModTime
=
file2
.
lastModified
(
)
;
file1
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"#history#save#"
)
)
;
file2
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"history"
)
)
;
if
(
file2
.
exists
(
)
&&
file2
.
lastModified
(
)
!=
historyModTime
)
{
Log
.
log
(
Log
.
WARNING
,
jEdit
.
class
,
file2
+
" changed"
+
" on disk; will not save history"
)
;
}
else
{
backupSettingsFile
(
file2
)
;
HistoryModel
.
saveHistory
(
file1
)
;
file2
.
delete
(
)
;
file1
.
renameTo
(
file2
)
;
}
historyModTime
=
file2
.
lastModified
(
)
;
SearchAndReplace
.
save
(
)
;
Abbrevs
.
save
(
)
;
FavoritesVFS
.
saveFavorites
(
)
;
file1
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"#properties#save#"
)
)
;
file2
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"properties"
)
)
;
if
(
file2
.
exists
(
)
&&
file2
.
lastModified
(
)
!=
propsModTime
)
{
Log
.
log
(
Log
.
WARNING
,
jEdit
.
class
,
file2
+
" changed"
+
" on disk; will not save user properties"
)
;
}
else
{
backupSettingsFile
(
file2
)
;
try
{
OutputStream
out
=
new
FileOutputStream
(
file1
)
;
props
.
store
(
out
,
"jEdit properties"
)
;
out
.
close
(
)
;
}
catch
(
IOException
io
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
io
)
;
}
file2
.
delete
(
)
;
file1
.
renameTo
(
file2
)
;
}
propsModTime
=
file2
.
lastModified
(
)
;
}
}
public
static
void
exit
(
View
view
,
boolean
reallyExit
)
{
VFSManager
.
waitForRequests
(
)
;
EditBus
.
send
(
new
EditorExitRequested
(
view
)
)
;
reallyExit
|=
!
background
;
saveOpenFiles
(
view
)
;
if
(
!
closeAllBuffers
(
view
,
reallyExit
)
)
return
;
if
(
!
reallyExit
)
{
view
=
viewsFirst
;
while
(
view
!=
null
)
{
closeView
(
view
,
false
)
;
view
=
view
.
next
;
}
saveSettings
(
)
;
return
;
}
view
.
close
(
)
;
Autosave
.
stop
(
)
;
if
(
server
!=
null
)
server
.
stopServer
(
)
;
EditPlugin
[
]
plugins
=
getPlugins
(
)
;
for
(
int
i
=
0
;
i
<
plugins
.
length
;
i
++
)
{
try
{
plugins
[
i
]
.
stop
(
)
;
}
catch
(
Throwable
t
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
"Error while "
+
"stopping plugin:"
)
;
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
t
)
;
}
}
EditBus
.
send
(
new
EditorExiting
(
null
)
)
;
saveSettings
(
)
;
Log
.
closeStream
(
)
;
System
.
exit
(
0
)
;
}
static
void
updatePosition
(
Buffer
buffer
)
{
if
(
sortBuffers
)
{
removeBufferFromList
(
buffer
)
;
addBufferToList
(
buffer
)
;
}
}
public
static
void
addMode
(
Mode
mode
)
{
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
"Adding edit mode "
+
mode
.
getName
(
)
)
;
modes
.
addElement
(
mode
)
;
}
static
void
loadMode
(
Mode
mode
)
{
Object
fileName
=
mode
.
getProperty
(
"file"
)
;
Log
.
log
(
Log
.
NOTICE
,
jEdit
.
class
,
"Loading edit mode "
+
fileName
)
;
XmlParser
parser
=
new
XmlParser
(
)
;
XModeHandler
xmh
=
new
XModeHandler
(
parser
,
mode
.
getName
(
)
,
fileName
.
toString
(
)
)
;
parser
.
setHandler
(
xmh
)
;
try
{
Reader
grammar
;
if
(
fileName
instanceof
URL
)
{
grammar
=
new
BufferedReader
(
new
InputStreamReader
(
(
(
URL
)
fileName
)
.
openStream
(
)
)
)
;
}
else
{
grammar
=
new
BufferedReader
(
new
FileReader
(
(
String
)
fileName
)
)
;
}
parser
.
parse
(
null
,
null
,
grammar
)
;
}
catch
(
Throwable
e
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
e
)
;
if
(
e
instanceof
XmlException
)
{
XmlException
xe
=
(
XmlException
)
e
;
int
line
=
xe
.
getLine
(
)
;
String
message
=
xe
.
getMessage
(
)
;
Object
[
]
args
=
{
fileName
,
new
Integer
(
line
)
,
message
}
;
GUIUtilities
.
error
(
null
,
"xmode-parse"
,
args
)
;
}
TokenMarker
marker
=
new
TokenMarker
(
)
;
marker
.
addRuleSet
(
"MAIN"
,
new
ParserRuleSet
(
"MAIN"
,
mode
)
)
;
mode
.
setTokenMarker
(
marker
)
;
}
}
static
void
loadProps
(
InputStream
in
,
boolean
def
)
throws
IOException
{
in
=
new
BufferedInputStream
(
in
)
;
if
(
def
)
defaultProps
.
load
(
in
)
;
else
props
.
load
(
in
)
;
in
.
close
(
)
;
}
static
boolean
loadActions
(
String
path
,
Reader
in
,
ActionSet
actionSet
)
{
try
{
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
"Loading actions from "
+
path
)
;
ActionListHandler
ah
=
new
ActionListHandler
(
path
,
actionSet
)
;
XmlParser
parser
=
new
XmlParser
(
)
;
parser
.
setHandler
(
ah
)
;
parser
.
parse
(
null
,
null
,
in
)
;
return
true
;
}
catch
(
XmlException
xe
)
{
int
line
=
xe
.
getLine
(
)
;
String
message
=
xe
.
getMessage
(
)
;
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
path
+
":"
+
line
+
": "
+
message
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
e
)
;
}
return
false
;
}
static
void
pluginError
(
final
String
path
,
String
messageProp
,
Object
[
]
args
)
{
if
(
pluginErrors
==
null
)
pluginErrors
=
new
Vector
(
)
;
pluginErrors
.
addElement
(
new
ErrorListDialog
.
ErrorEntry
(
path
,
messageProp
,
args
)
)
;
}
private
static
String
jEditHome
;
private
static
String
settingsDirectory
;
private
static
long
propsModTime
,
historyModTime
,
recentModTime
;
private
static
Properties
defaultProps
;
private
static
Properties
props
;
private
static
EditServer
server
;
private
static
boolean
background
;
private
static
Vector
actionSets
;
private
static
ActionSet
builtInActionSet
;
private
static
Vector
pluginErrors
;
private
static
Vector
jars
;
private
static
Vector
modes
;
private
static
Vector
recent
;
private
static
boolean
saveCaret
;
private
static
InputHandler
inputHandler
;
private
static
JEditMetalTheme
theme
;
private
static
boolean
sortBuffers
;
private
static
boolean
sortByName
;
private
static
int
bufferCount
;
private
static
Buffer
buffersFirst
;
private
static
Buffer
buffersLast
;
private
static
Object
bufferListLock
=
new
Object
(
)
;
private
static
int
viewCount
;
private
static
View
viewsFirst
;
private
static
View
viewsLast
;
private
jEdit
(
)
{
}
private
static
void
usage
(
)
{
System
.
out
.
println
(
"Usage: jedit [<options>] [<files>]"
)
;
System
.
out
.
println
(
"	<file> +marker:<marker>: Positions caret"
+
" at marker <marker>"
)
;
System
.
out
.
println
(
"	<file> +line:<line>: Positions caret"
+
" at line number <line>"
)
;
System
.
out
.
println
(
"	--: End of options"
)
;
System
.
out
.
println
(
"	-background: Run in background mode"
)
;
System
.
out
.
println
(
"	-nogui: Only if running in background mode;"
+
" don't open initial view"
)
;
System
.
out
.
println
(
"	-norestore: Don't restore previously open files"
)
;
System
.
out
.
println
(
"	-run=<script>: Run the specified BeanShell script"
)
;
System
.
out
.
println
(
"	-server: Read/write server"
+
" info from/to $HOME/.jedit/server"
)
;
System
.
out
.
println
(
"	-server=<name>: Read/write server"
+
" info from/to $HOME/.jedit/<name>"
)
;
System
.
out
.
println
(
"	-noserver: Don't start edit server"
)
;
System
.
out
.
println
(
"	-settings=<path>: Load user-specific"
+
" settings from <path>"
)
;
System
.
out
.
println
(
"	-nosettings: Don't load user-specific"
+
" settings"
)
;
System
.
out
.
println
(
"	-noplugins: Don't load any plugins"
)
;
System
.
out
.
println
(
"	-nostartupscripts: Don't run startup scripts"
)
;
System
.
out
.
println
(
"	-version: Print jEdit version and exit"
)
;
System
.
out
.
println
(
"	-usage: Print this message and exit"
)
;
System
.
out
.
println
(
)
;
System
.
out
.
println
(
"To set minimum activity log level,"
+
" specify a number as the first"
)
;
System
.
out
.
println
(
"command line parameter"
+
" (1-9, 1 = print everything, 9 = fatal errors only)"
)
;
System
.
out
.
println
(
)
;
System
.
out
.
println
(
"Report bugs to Slava Pestov <slava@jedit.org>."
)
;
}
private
static
void
version
(
)
{
System
.
out
.
println
(
"jEdit "
+
getVersion
(
)
)
;
}
private
static
String
makeServerScript
(
boolean
restore
,
String
[
]
args
,
String
scriptFile
)
{
StringBuffer
script
=
new
StringBuffer
(
)
;
String
userDir
=
System
.
getProperty
(
"user.dir"
)
;
script
.
append
(
"parent = \""
)
;
script
.
append
(
MiscUtilities
.
charsToEscapes
(
userDir
)
)
;
script
.
append
(
"\";\n"
)
;
script
.
append
(
"args = new String["
)
;
script
.
append
(
args
.
length
)
;
script
.
append
(
"];\n"
)
;
for
(
int
i
=
0
;
i
<
args
.
length
;
i
++
)
{
script
.
append
(
"args["
)
;
script
.
append
(
i
)
;
script
.
append
(
"] = "
)
;
if
(
args
[
i
]
==
null
)
script
.
append
(
"null"
)
;
else
{
script
.
append
(
'"'
)
;
script
.
append
(
MiscUtilities
.
charsToEscapes
(
args
[
i
]
)
)
;
script
.
append
(
'"'
)
;
}
script
.
append
(
";\n"
)
;
}
script
.
append
(
"EditServer.handleClient("
+
restore
+
",parent,args);\n"
)
;
if
(
scriptFile
!=
null
)
{
scriptFile
=
MiscUtilities
.
constructPath
(
userDir
,
scriptFile
)
;
script
.
append
(
"BeanShell.runScript(null,\""
+
MiscUtilities
.
charsToEscapes
(
scriptFile
)
+
"\",null,false);\n"
)
;
}
return
script
.
toString
(
)
;
}
private
static
void
initMisc
(
)
{
System
.
getProperties
(
)
.
put
(
"java.protocol.handler.pkgs"
,
"org.gjt.sp.jedit.proto|"
+
System
.
getProperty
(
"java.protocol.handler.pkgs"
,
""
)
)
;
String
userAgent
=
"jEdit/"
+
getVersion
(
)
+
" (Java "
+
System
.
getProperty
(
"java.version"
)
+
". "
+
System
.
getProperty
(
"java.vendor"
)
+
"; "
+
System
.
getProperty
(
"os.arch"
)
+
")"
;
System
.
getProperties
(
)
.
put
(
"http.agent"
,
userAgent
)
;
inputHandler
=
new
DefaultInputHandler
(
null
)
;
jEditHome
=
System
.
getProperty
(
"jedit.home"
)
;
if
(
jEditHome
==
null
)
{
String
classpath
=
System
.
getProperty
(
"java.class.path"
)
;
int
index
=
classpath
.
toLowerCase
(
)
.
indexOf
(
"jedit.jar"
)
;
int
start
=
classpath
.
lastIndexOf
(
File
.
pathSeparator
,
index
)
+
1
;
if
(
classpath
.
equalsIgnoreCase
(
"jedit.jar"
)
)
{
jEditHome
=
System
.
getProperty
(
"user.dir"
)
;
}
else
if
(
index
>
start
)
{
jEditHome
=
classpath
.
substring
(
start
,
index
-
1
)
;
}
else
{
{
jEditHome
=
System
.
getProperty
(
"user.dir"
)
;
Log
.
log
(
Log
.
WARNING
,
jEdit
.
class
,
"jedit.jar not in class path!"
)
;
Log
.
log
(
Log
.
WARNING
,
jEdit
.
class
,
"Assuming jEdit is installed in "
+
jEditHome
+
"."
)
;
Log
.
log
(
Log
.
WARNING
,
jEdit
.
class
,
"Override with jedit.home "
+
"system property."
)
;
}
}
}
Log
.
log
(
Log
.
MESSAGE
,
jEdit
.
class
,
"jEdit home directory is "
+
jEditHome
)
;
jars
=
new
Vector
(
)
;
EditBus
.
addToBus
(
new
SettingsReloader
(
)
)
;
SwingUtilities
.
invokeLater
(
new
Runnable
(
)
{
public
void
run
(
)
{
Thread
.
currentThread
(
)
.
setContextClassLoader
(
new
JARClassLoader
(
)
)
;
}
}
)
;
}
private
static
void
initSystemProperties
(
)
{
defaultProps
=
props
=
new
Properties
(
)
;
try
{
loadProps
(
jEdit
.
class
.
getResourceAsStream
(
"/org/gjt/sp/jedit/jedit.props"
)
,
true
)
;
loadProps
(
jEdit
.
class
.
getResourceAsStream
(
"/org/gjt/sp/jedit/jedit_gui.props"
)
,
true
)
;
loadProps
(
jEdit
.
class
.
getResourceAsStream
(
"/org/gjt/sp/jedit/jedit_keys.props"
)
,
true
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
"Error while loading system properties!"
)
;
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
"One of the following property files could not be loaded:\n"
+
"- jedit.props\n"
+
"- jedit_gui.props\n"
+
"- jedit_keys.props\n"
+
"jedit.jar is probably corrupt."
)
;
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
e
)
;
System
.
exit
(
1
)
;
}
}
private
static
void
initSiteProperties
(
)
{
String
siteSettingsDirectory
=
MiscUtilities
.
constructPath
(
jEditHome
,
"properties"
)
;
File
siteSettings
=
new
File
(
siteSettingsDirectory
)
;
if
(
!
(
siteSettings
.
exists
(
)
&&
siteSettings
.
isDirectory
(
)
)
)
return
;
String
[
]
snippets
=
siteSettings
.
list
(
)
;
if
(
snippets
==
null
)
return
;
MiscUtilities
.
quicksort
(
snippets
,
new
MiscUtilities
.
StringICaseCompare
(
)
)
;
for
(
int
i
=
0
;
i
<
snippets
.
length
;
++
i
)
{
String
snippet
=
snippets
[
i
]
;
if
(
!
snippet
.
toLowerCase
(
)
.
endsWith
(
".props"
)
)
continue
;
try
{
String
path
=
MiscUtilities
.
constructPath
(
siteSettingsDirectory
,
snippet
)
;
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
"Loading site snippet: "
+
path
)
;
loadProps
(
new
FileInputStream
(
new
File
(
path
)
)
,
true
)
;
}
catch
(
FileNotFoundException
fnf
)
{
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
fnf
)
;
}
catch
(
IOException
e
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
"Cannot load site snippet "
+
snippet
)
;
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
e
)
;
}
}
}
private
static
void
initActions
(
)
{
actionSets
=
new
Vector
(
)
;
Reader
in
=
new
BufferedReader
(
new
InputStreamReader
(
jEdit
.
class
.
getResourceAsStream
(
"actions.xml"
)
)
)
;
builtInActionSet
=
new
ActionSet
(
jEdit
.
getProperty
(
"action-set.jEdit"
)
)
;
if
(
!
loadActions
(
"actions.xml"
,
in
,
builtInActionSet
)
)
System
.
exit
(
1
)
;
addActionSet
(
builtInActionSet
)
;
}
private
static
void
initDockables
(
)
{
Reader
in
=
new
BufferedReader
(
new
InputStreamReader
(
jEdit
.
class
.
getResourceAsStream
(
"dockables.xml"
)
)
)
;
if
(
!
DockableWindowManager
.
loadDockableWindows
(
"dockables.xml"
,
in
,
builtInActionSet
)
)
System
.
exit
(
1
)
;
}
private
static
void
initPlugins
(
)
{
if
(
jEditHome
!=
null
)
loadPlugins
(
MiscUtilities
.
constructPath
(
jEditHome
,
"jars"
)
)
;
if
(
settingsDirectory
!=
null
)
{
File
jarsDirectory
=
new
File
(
settingsDirectory
,
"jars"
)
;
if
(
!
jarsDirectory
.
exists
(
)
)
jarsDirectory
.
mkdir
(
)
;
loadPlugins
(
jarsDirectory
.
getPath
(
)
)
;
}
}
private
static
void
initUserProperties
(
)
{
props
=
new
Properties
(
defaultProps
)
;
if
(
settingsDirectory
!=
null
)
{
File
file
=
new
File
(
MiscUtilities
.
constructPath
(
settingsDirectory
,
"properties"
)
)
;
propsModTime
=
file
.
lastModified
(
)
;
try
{
loadProps
(
new
FileInputStream
(
file
)
,
false
)
;
}
catch
(
FileNotFoundException
fnf
)
{
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
fnf
)
;
}
catch
(
IOException
e
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
e
)
;
}
}
}
private
static
void
initPLAF
(
)
{
theme
=
new
JEditMetalTheme
(
)
;
theme
.
propertiesChanged
(
)
;
MetalLookAndFeel
.
setCurrentTheme
(
theme
)
;
try
{
String
lf
=
getProperty
(
"lookAndFeel"
)
;
if
(
lf
!=
null
&&
lf
.
length
(
)
!=
0
)
UIManager
.
setLookAndFeel
(
lf
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
e
)
;
}
UIDefaults
defaults
=
UIManager
.
getDefaults
(
)
;
if
(
jEdit
.
getBooleanProperty
(
"textColors"
)
)
{
Color
background
=
new
javax
.
swing
.
plaf
.
ColorUIResource
(
jEdit
.
getColorProperty
(
"view.bgColor"
)
)
;
Color
foreground
=
new
javax
.
swing
.
plaf
.
ColorUIResource
(
jEdit
.
getColorProperty
(
"view.fgColor"
)
)
;
Color
caretColor
=
new
javax
.
swing
.
plaf
.
ColorUIResource
(
jEdit
.
getColorProperty
(
"view.caretColor"
)
)
;
Color
selectionColor
=
new
javax
.
swing
.
plaf
.
ColorUIResource
(
jEdit
.
getColorProperty
(
"view.selectionColor"
)
)
;
String
[
]
prefixes
=
{
"TextField"
,
"TextArea"
,
"List"
,
"Table"
}
;
for
(
int
i
=
0
;
i
<
prefixes
.
length
;
i
++
)
{
String
prefix
=
prefixes
[
i
]
;
defaults
.
put
(
prefix
+
".disabledBackground"
,
background
)
;
defaults
.
put
(
prefix
+
".background"
,
background
)
;
defaults
.
put
(
prefix
+
".disabledForeground"
,
foreground
)
;
defaults
.
put
(
prefix
+
".foreground"
,
foreground
)
;
defaults
.
put
(
prefix
+
".caretForeground"
,
caretColor
)
;
defaults
.
put
(
prefix
+
".selectionForeground"
,
foreground
)
;
defaults
.
put
(
prefix
+
".selectionBackground"
,
selectionColor
)
;
}
defaults
.
put
(
"Tree.background"
,
background
)
;
defaults
.
put
(
"Tree.foreground"
,
foreground
)
;
defaults
.
put
(
"Tree.textBackground"
,
background
)
;
defaults
.
put
(
"Tree.textForeground"
,
foreground
)
;
defaults
.
put
(
"Tree.selectionForeground"
,
foreground
)
;
defaults
.
put
(
"Tree.selectionBackground"
,
selectionColor
)
;
}
defaults
.
remove
(
"SplitPane.border"
)
;
defaults
.
remove
(
"SplitPaneDivider.border"
)
;
}
private
static
void
runStartupScripts
(
File
directory
)
{
if
(
!
directory
.
isDirectory
(
)
)
return
;
String
[
]
snippets
=
directory
.
list
(
)
;
if
(
snippets
==
null
)
return
;
MiscUtilities
.
quicksort
(
snippets
,
new
MiscUtilities
.
StringICaseCompare
(
)
)
;
for
(
int
i
=
0
;
i
<
snippets
.
length
;
++
i
)
{
String
snippet
=
snippets
[
i
]
;
if
(
!
snippet
.
toLowerCase
(
)
.
endsWith
(
".bsh"
)
)
continue
;
String
path
=
new
File
(
directory
,
snippet
)
.
getPath
(
)
;
BeanShell
.
runScript
(
null
,
path
,
null
,
false
)
;
}
}
private
static
void
initProxy
(
)
{
boolean
enabled
=
jEdit
.
getBooleanProperty
(
"firewall.enabled"
)
;
if
(
!
enabled
)
{
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
"HTTP proxy disabled"
)
;
System
.
getProperties
(
)
.
remove
(
"proxySet"
)
;
System
.
getProperties
(
)
.
remove
(
"proxyHost"
)
;
System
.
getProperties
(
)
.
remove
(
"proxyPort"
)
;
System
.
getProperties
(
)
.
remove
(
"http.proxyHost"
)
;
System
.
getProperties
(
)
.
remove
(
"http.proxyPort"
)
;
System
.
getProperties
(
)
.
remove
(
"http.nonProxyHosts"
)
;
Authenticator
.
setDefault
(
null
)
;
}
else
{
String
host
=
jEdit
.
getProperty
(
"firewall.host"
)
;
if
(
host
==
null
)
return
;
System
.
setProperty
(
"http.proxyHost"
,
host
)
;
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
"HTTP proxy enabled: "
+
host
)
;
String
port
=
jEdit
.
getProperty
(
"firewall.port"
)
;
if
(
port
!=
null
)
System
.
setProperty
(
"http.proxyPort"
,
port
)
;
String
nonProxyHosts
=
jEdit
.
getProperty
(
"firewall.nonProxyHosts"
)
;
if
(
nonProxyHosts
!=
null
)
System
.
setProperty
(
"http.nonProxyHosts"
,
nonProxyHosts
)
;
String
username
=
jEdit
.
getProperty
(
"firewall.user"
)
;
String
password
=
jEdit
.
getProperty
(
"firewall.password"
)
;
if
(
password
==
null
)
password
=
""
;
if
(
username
==
null
||
username
.
length
(
)
==
0
)
{
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
"HTTP proxy without user"
)
;
Authenticator
.
setDefault
(
new
FirewallAuthenticator
(
null
)
)
;
}
else
{
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
"HTTP proxy user: "
+
username
)
;
PasswordAuthentication
pw
=
new
PasswordAuthentication
(
username
,
password
.
toCharArray
(
)
)
;
Authenticator
.
setDefault
(
new
FirewallAuthenticator
(
pw
)
)
;
}
}
}
static
class
FirewallAuthenticator
extends
Authenticator
{
PasswordAuthentication
pw
;
public
FirewallAuthenticator
(
PasswordAuthentication
pw
)
{
this
.
pw
=
pw
;
}
protected
PasswordAuthentication
getPasswordAuthentication
(
)
{
return
pw
;
}
}
private
static
void
getNotLoadedPluginJARs
(
Vector
returnValue
,
String
dir
,
String
[
]
list
)
{
loop
:
for
(
int
i
=
0
;
i
<
list
.
length
;
i
++
)
{
String
name
=
list
[
i
]
;
if
(
!
name
.
toLowerCase
(
)
.
endsWith
(
".jar"
)
)
continue
loop
;
String
path
=
MiscUtilities
.
constructPath
(
dir
,
name
)
;
for
(
int
j
=
0
;
j
<
jars
.
size
(
)
;
j
++
)
{
EditPlugin
.
JAR
jar
=
(
EditPlugin
.
JAR
)
jars
.
elementAt
(
j
)
;
String
jarPath
=
jar
.
getPath
(
)
;
String
jarName
=
MiscUtilities
.
getFileName
(
jarPath
)
;
if
(
path
.
equals
(
jarPath
)
)
continue
loop
;
else
if
(
!
new
File
(
jarPath
)
.
exists
(
)
&&
name
.
equals
(
jarName
)
)
continue
loop
;
}
returnValue
.
addElement
(
path
)
;
}
}
private
static
void
gotoMarker
(
final
View
view
,
final
Buffer
buffer
,
final
String
marker
)
{
VFSManager
.
runInAWTThread
(
new
Runnable
(
)
{
public
void
run
(
)
{
int
pos
;
if
(
marker
.
startsWith
(
"+line:"
)
)
{
try
{
int
line
=
Integer
.
parseInt
(
marker
.
substring
(
6
)
)
;
pos
=
buffer
.
getLineStartOffset
(
line
-
1
)
;
}
catch
(
Exception
e
)
{
return
;
}
}
else
if
(
marker
.
startsWith
(
"+marker:"
)
)
{
if
(
marker
.
length
(
)
!=
9
)
return
;
Marker
m
=
buffer
.
getMarker
(
marker
.
charAt
(
8
)
)
;
if
(
m
==
null
)
return
;
pos
=
m
.
getPosition
(
)
;
}
else
throw
new
InternalError
(
)
;
if
(
view
!=
null
&&
view
.
getBuffer
(
)
==
buffer
)
view
.
getTextArea
(
)
.
setCaretPosition
(
pos
)
;
else
buffer
.
setIntegerProperty
(
Buffer
.
CARET
,
pos
)
;
}
}
)
;
}
private
static
void
addBufferToList
(
Buffer
buffer
)
{
if
(
viewCount
<=
1
&&
buffersFirst
!=
null
&&
buffersFirst
==
buffersLast
&&
buffersFirst
.
isUntitled
(
)
&&
!
buffersFirst
.
isDirty
(
)
)
{
Buffer
oldBuffersFirst
=
buffersFirst
;
buffersFirst
=
buffersLast
=
buffer
;
EditBus
.
send
(
new
BufferUpdate
(
oldBuffersFirst
,
null
,
BufferUpdate
.
CLOSED
)
)
;
return
;
}
bufferCount
++
;
if
(
buffersFirst
==
null
)
{
buffersFirst
=
buffersLast
=
buffer
;
return
;
}
else
if
(
sortBuffers
)
{
String
name1
=
(
sortByName
?
buffer
.
toString
(
)
:
buffer
.
getPath
(
)
)
;
Buffer
_buffer
=
buffersFirst
;
while
(
_buffer
!=
null
)
{
String
name2
=
(
sortByName
?
_buffer
.
toString
(
)
:
_buffer
.
getPath
(
)
)
;
if
(
MiscUtilities
.
compareStrings
(
name1
,
name2
,
true
)
<=
0
)
{
buffer
.
next
=
_buffer
;
buffer
.
prev
=
_buffer
.
prev
;
_buffer
.
prev
=
buffer
;
if
(
_buffer
!=
buffersFirst
)
buffer
.
prev
.
next
=
buffer
;
else
buffersFirst
=
buffer
;
return
;
}
_buffer
=
_buffer
.
next
;
}
}
buffer
.
prev
=
buffersLast
;
buffersLast
.
next
=
buffer
;
buffersLast
=
buffer
;
}
private
static
void
removeBufferFromList
(
Buffer
buffer
)
{
synchronized
(
bufferListLock
)
{
bufferCount
--
;
if
(
buffer
==
buffersFirst
&&
buffer
==
buffersLast
)
{
buffersFirst
=
buffersLast
=
null
;
return
;
}
if
(
buffer
==
buffersFirst
)
{
buffersFirst
=
buffer
.
next
;
buffer
.
next
.
prev
=
null
;
}
else
{
buffer
.
prev
.
next
=
buffer
.
next
;
}
if
(
buffer
==
buffersLast
)
{
buffersLast
=
buffersLast
.
prev
;
buffer
.
prev
.
next
=
null
;
}
else
{
buffer
.
next
.
prev
=
buffer
.
prev
;
}
buffer
.
next
=
buffer
.
prev
=
null
;
}
}
private
static
void
addViewToList
(
View
view
)
{
viewCount
++
;
if
(
viewsFirst
==
null
)
viewsFirst
=
viewsLast
=
view
;
else
{
view
.
prev
=
viewsLast
;
viewsLast
.
next
=
view
;
viewsLast
=
view
;
}
}
private
static
void
removeViewFromList
(
View
view
)
{
viewCount
--
;
if
(
viewsFirst
==
viewsLast
)
{
viewsFirst
=
viewsLast
=
null
;
return
;
}
if
(
view
==
viewsFirst
)
{
viewsFirst
=
view
.
next
;
view
.
next
.
prev
=
null
;
}
else
{
view
.
prev
.
next
=
view
.
next
;
}
if
(
view
==
viewsLast
)
{
viewsLast
=
viewsLast
.
prev
;
view
.
prev
.
next
=
null
;
}
else
{
view
.
next
.
prev
=
view
.
prev
;
}
}
private
static
void
closeView
(
View
view
,
boolean
callExit
)
{
if
(
viewsFirst
==
viewsLast
&&
callExit
)
exit
(
view
,
false
)
;
else
{
EditBus
.
send
(
new
ViewUpdate
(
view
,
ViewUpdate
.
CLOSED
)
)
;
view
.
close
(
)
;
removeViewFromList
(
view
)
;
}
}
private
static
void
loadModeCatalog
(
String
path
,
boolean
resource
)
{
Log
.
log
(
Log
.
MESSAGE
,
jEdit
.
class
,
"Loading mode catalog file "
+
path
)
;
ModeCatalogHandler
handler
=
new
ModeCatalogHandler
(
MiscUtilities
.
getParentOfPath
(
path
)
,
resource
)
;
XmlParser
parser
=
new
XmlParser
(
)
;
parser
.
setHandler
(
handler
)
;
try
{
InputStream
_in
;
if
(
resource
)
_in
=
jEdit
.
class
.
getResourceAsStream
(
path
)
;
else
_in
=
new
FileInputStream
(
path
)
;
BufferedReader
in
=
new
BufferedReader
(
new
InputStreamReader
(
_in
)
)
;
parser
.
parse
(
null
,
null
,
in
)
;
}
catch
(
XmlException
xe
)
{
int
line
=
xe
.
getLine
(
)
;
String
message
=
xe
.
getMessage
(
)
;
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
path
+
":"
+
line
+
": "
+
message
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
e
)
;
}
}
private
static
void
loadPlugins
(
String
directory
)
{
Log
.
log
(
Log
.
NOTICE
,
jEdit
.
class
,
"Loading plugins from "
+
directory
)
;
File
file
=
new
File
(
directory
)
;
if
(
!
(
file
.
exists
(
)
&&
file
.
isDirectory
(
)
)
)
return
;
String
[
]
plugins
=
file
.
list
(
)
;
if
(
plugins
==
null
)
return
;
MiscUtilities
.
quicksort
(
plugins
,
new
MiscUtilities
.
StringICaseCompare
(
)
)
;
for
(
int
i
=
0
;
i
<
plugins
.
length
;
i
++
)
{
String
plugin
=
plugins
[
i
]
;
if
(
!
plugin
.
toLowerCase
(
)
.
endsWith
(
".jar"
)
)
continue
;
String
path
=
MiscUtilities
.
constructPath
(
directory
,
plugin
)
;
if
(
plugin
.
equals
(
"EditBuddy.jar"
)
||
plugin
.
equals
(
"PluginManager.jar"
)
||
plugin
.
equals
(
"Firewall.jar"
)
||
plugin
.
equals
(
"Tidy.jar"
)
)
{
pluginError
(
path
,
"plugin-error.obsolete"
,
null
)
;
continue
;
}
try
{
Log
.
log
(
Log
.
DEBUG
,
jEdit
.
class
,
"Scanning JAR file: "
+
path
)
;
new
JARClassLoader
(
path
)
;
}
catch
(
IOException
io
)
{
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
"Cannot load"
+
" plugin "
+
plugin
)
;
Log
.
log
(
Log
.
ERROR
,
jEdit
.
class
,
io
)
;
String
[
]
args
=
{
io
.
toString
(
)
}
;
pluginError
(
path
,
"plugin-error.load-error"
,
args
)
;
}
}
}
private
static
void
initKeyBindings
(
)
{
inputHandler
.
removeAllKeyBindings
(
)
;
EditAction
[
]
actions
=
getActions
(
)
;
for
(
int
i
=
0
;
i
<
actions
.
length
;
i
++
)
{
EditAction
action
=
actions
[
i
]
;
String
shortcut1
=
jEdit
.
getProperty
(
action
.
getName
(
)
+
".shortcut"
)
;
if
(
shortcut1
!=
null
)
inputHandler
.
addKeyBinding
(
shortcut1
,
action
)
;
String
shortcut2
=
jEdit
.
getProperty
(
action
.
getName
(
)
+
".shortcut2"
)
;
if
(
shortcut2
!=
null
)
inputHandler
.
addKeyBinding
(
shortcut2
,
action
)
;
}
}
}
