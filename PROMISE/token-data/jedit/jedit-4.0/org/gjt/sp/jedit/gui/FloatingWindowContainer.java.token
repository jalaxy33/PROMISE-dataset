package
org
.
gjt
.
sp
.
jedit
.
gui
;
import
javax
.
swing
.
border
.
*
;
import
javax
.
swing
.
*
;
import
java
.
awt
.
event
.
*
;
import
java
.
awt
.
image
.
*
;
import
java
.
awt
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
class
FloatingWindowContainer
extends
JFrame
implements
DockableWindowContainer
{
public
FloatingWindowContainer
(
DockableWindowManager
dockableWindowManager
)
{
this
.
dockableWindowManager
=
dockableWindowManager
;
setIconImage
(
GUIUtilities
.
getPluginIcon
(
)
)
;
setDefaultCloseOperation
(
DISPOSE_ON_CLOSE
)
;
}
public
void
register
(
DockableWindowManager
.
Entry
entry
)
{
this
.
entry
=
entry
;
setTitle
(
entry
.
title
)
;
getContentPane
(
)
.
add
(
BorderLayout
.
CENTER
,
entry
.
win
)
;
pack
(
)
;
GUIUtilities
.
loadGeometry
(
this
,
entry
.
name
)
;
show
(
)
;
}
public
void
add
(
DockableWindowManager
.
Entry
entry
)
{
}
public
void
save
(
DockableWindowManager
.
Entry
entry
)
{
GUIUtilities
.
saveGeometry
(
this
,
entry
.
name
)
;
}
public
void
remove
(
DockableWindowManager
.
Entry
entry
)
{
super
.
dispose
(
)
;
}
public
void
show
(
final
DockableWindowManager
.
Entry
entry
)
{
toFront
(
)
;
requestFocus
(
)
;
SwingUtilities
.
invokeLater
(
new
Runnable
(
)
{
public
void
run
(
)
{
entry
.
win
.
requestDefaultFocus
(
)
;
}
}
)
;
}
public
boolean
isVisible
(
DockableWindowManager
.
Entry
entry
)
{
return
true
;
}
public
void
dispose
(
)
{
dockableWindowManager
.
removeDockableWindow
(
entry
.
name
)
;
}
private
DockableWindowManager
dockableWindowManager
;
private
DockableWindowManager
.
Entry
entry
;
}
