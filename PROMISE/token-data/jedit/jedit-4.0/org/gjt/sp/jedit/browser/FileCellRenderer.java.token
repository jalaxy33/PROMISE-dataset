package
org
.
gjt
.
sp
.
jedit
.
browser
;
import
java
.
awt
.
*
;
import
javax
.
swing
.
*
;
import
javax
.
swing
.
tree
.
*
;
import
javax
.
swing
.
border
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
io
.
VFS
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
class
FileCellRenderer
extends
DefaultTreeCellRenderer
{
public
static
Icon
fileIcon
=
GUIUtilities
.
loadIcon
(
"file.gif"
)
;
public
static
Icon
dirIcon
=
GUIUtilities
.
loadIcon
(
"closed_folder.gif"
)
;
public
static
Icon
openDirIcon
=
GUIUtilities
.
loadIcon
(
"open_folder.gif"
)
;
public
static
Icon
filesystemIcon
=
GUIUtilities
.
loadIcon
(
"drive.gif"
)
;
public
static
Icon
loadingIcon
=
GUIUtilities
.
loadIcon
(
"drive.gif"
)
;
public
FileCellRenderer
(
)
{
plainFont
=
UIManager
.
getFont
(
"Tree.font"
)
;
boldFont
=
plainFont
.
deriveFont
(
Font
.
BOLD
)
;
setBorder
(
new
EmptyBorder
(
1
,
0
,
1
,
0
)
)
;
}
public
Component
getTreeCellRendererComponent
(
JTree
tree
,
Object
value
,
boolean
sel
,
boolean
expanded
,
boolean
leaf
,
int
row
,
boolean
focus
)
{
super
.
getTreeCellRendererComponent
(
tree
,
value
,
sel
,
expanded
,
leaf
,
row
,
focus
)
;
DefaultMutableTreeNode
treeNode
=
(
DefaultMutableTreeNode
)
value
;
Object
userObject
=
treeNode
.
getUserObject
(
)
;
if
(
userObject
instanceof
VFS
.
DirectoryEntry
)
{
VFS
.
DirectoryEntry
file
=
(
VFS
.
DirectoryEntry
)
userObject
;
underlined
=
(
jEdit
.
getBuffer
(
file
.
path
)
!=
null
)
;
setIcon
(
showIcons
?
getIconForFile
(
file
,
expanded
)
:
null
)
;
setFont
(
file
.
type
==
VFS
.
DirectoryEntry
.
FILE
?
plainFont
:
boldFont
)
;
setText
(
file
.
name
)
;
if
(
!
sel
)
{
Color
color
=
file
.
getColor
(
)
;
setForeground
(
color
==
null
?
UIManager
.
getColor
(
"Tree.foreground"
)
:
color
)
;
}
}
else
if
(
userObject
instanceof
BrowserView
.
LoadingPlaceholder
)
{
setIcon
(
showIcons
?
loadingIcon
:
null
)
;
setFont
(
plainFont
)
;
setText
(
jEdit
.
getProperty
(
"vfs.browser.tree.loading"
)
)
;
underlined
=
false
;
}
else
if
(
userObject
instanceof
String
)
{
setIcon
(
showIcons
?
dirIcon
:
null
)
;
setFont
(
boldFont
)
;
setText
(
(
String
)
userObject
)
;
underlined
=
false
;
}
else
{
setIcon
(
null
)
;
setText
(
null
)
;
}
return
this
;
}
public
void
paintComponent
(
Graphics
g
)
{
if
(
underlined
)
{
Font
font
=
getFont
(
)
;
FontMetrics
fm
=
getFontMetrics
(
getFont
(
)
)
;
int
x
=
(
getIcon
(
)
==
null
?
0
:
getIcon
(
)
.
getIconWidth
(
)
+
getIconTextGap
(
)
)
;
g
.
setColor
(
getForeground
(
)
)
;
g
.
drawLine
(
x
,
fm
.
getAscent
(
)
+
2
,
x
+
fm
.
stringWidth
(
getText
(
)
)
,
fm
.
getAscent
(
)
+
2
)
;
}
super
.
paintComponent
(
g
)
;
}
boolean
showIcons
;
void
propertiesChanged
(
)
{
showIcons
=
jEdit
.
getBooleanProperty
(
"vfs.browser.showIcons"
)
;
}
private
Font
plainFont
;
private
Font
boldFont
;
private
boolean
underlined
;
private
Icon
getIconForFile
(
VFS
.
DirectoryEntry
file
,
boolean
expanded
)
{
if
(
file
.
type
==
VFS
.
DirectoryEntry
.
DIRECTORY
)
return
(
expanded
?
openDirIcon
:
dirIcon
)
;
else
if
(
file
.
type
==
VFS
.
DirectoryEntry
.
FILESYSTEM
)
return
filesystemIcon
;
else
return
fileIcon
;
}
}
