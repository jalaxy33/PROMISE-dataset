package
org
.
gjt
.
sp
.
jedit
.
gui
;
import
javax
.
swing
.
KeyStroke
;
import
java
.
awt
.
event
.
*
;
import
java
.
awt
.
Toolkit
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
StringTokenizer
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
DefaultInputHandler
extends
InputHandler
{
public
DefaultInputHandler
(
View
view
)
{
super
(
view
)
;
bindings
=
currentBindings
=
new
Hashtable
(
)
;
}
public
DefaultInputHandler
(
View
view
,
DefaultInputHandler
copy
)
{
super
(
view
)
;
bindings
=
currentBindings
=
copy
.
bindings
;
}
public
void
addKeyBinding
(
String
keyBinding
,
EditAction
action
)
{
Hashtable
current
=
bindings
;
StringTokenizer
st
=
new
StringTokenizer
(
keyBinding
)
;
while
(
st
.
hasMoreTokens
(
)
)
{
KeyStroke
keyStroke
=
parseKeyStroke
(
st
.
nextToken
(
)
)
;
if
(
keyStroke
==
null
)
return
;
if
(
st
.
hasMoreTokens
(
)
)
{
Object
o
=
current
.
get
(
keyStroke
)
;
if
(
o
instanceof
Hashtable
)
current
=
(
Hashtable
)
o
;
else
{
o
=
new
Hashtable
(
)
;
current
.
put
(
keyStroke
,
o
)
;
current
=
(
Hashtable
)
o
;
}
}
else
current
.
put
(
keyStroke
,
action
)
;
}
}
public
void
removeKeyBinding
(
String
keyBinding
)
{
throw
new
InternalError
(
"Not yet implemented"
)
;
}
public
void
removeAllKeyBindings
(
)
{
bindings
.
clear
(
)
;
}
public
Object
getKeyBinding
(
String
keyBinding
)
{
Hashtable
current
=
bindings
;
StringTokenizer
st
=
new
StringTokenizer
(
keyBinding
)
;
while
(
st
.
hasMoreTokens
(
)
)
{
KeyStroke
keyStroke
=
parseKeyStroke
(
st
.
nextToken
(
)
)
;
if
(
keyStroke
==
null
)
return
null
;
if
(
st
.
hasMoreTokens
(
)
)
{
Object
o
=
current
.
get
(
keyStroke
)
;
if
(
o
instanceof
Hashtable
)
current
=
(
Hashtable
)
o
;
else
return
o
;
}
else
{
return
current
.
get
(
keyStroke
)
;
}
}
return
null
;
}
public
boolean
isPrefixActive
(
)
{
return
bindings
!=
currentBindings
;
}
public
void
keyPressed
(
KeyEvent
evt
)
{
int
keyCode
=
evt
.
getKeyCode
(
)
;
int
modifiers
=
evt
.
getModifiers
(
)
;
if
(
!
(
evt
.
isControlDown
(
)
||
evt
.
isAltDown
(
)
||
evt
.
isMetaDown
(
)
)
)
{
if
(
(
keyCode
>=
KeyEvent
.
VK_A
&&
keyCode
<=
KeyEvent
.
VK_Z
)
||
(
keyCode
>=
KeyEvent
.
VK_0
&&
keyCode
<=
KeyEvent
.
VK_9
)
)
{
return
;
}
else
if
(
keyCode
==
KeyEvent
.
VK_SPACE
)
{
return
;
}
else
if
(
readNextChar
!=
null
)
{
if
(
keyCode
==
KeyEvent
.
VK_ESCAPE
)
{
readNextChar
=
null
;
view
.
getStatus
(
)
.
setMessage
(
null
)
;
}
else
if
(
!
evt
.
isActionKey
(
)
&&
keyCode
!=
KeyEvent
.
VK_TAB
&&
keyCode
!=
KeyEvent
.
VK_ENTER
)
{
return
;
}
}
else
{
}
}
KeyStroke
keyStroke
=
KeyStroke
.
getKeyStroke
(
keyCode
,
modifiers
)
;
Object
o
=
currentBindings
.
get
(
keyStroke
)
;
if
(
o
==
null
)
{
if
(
currentBindings
!=
bindings
)
{
Toolkit
.
getDefaultToolkit
(
)
.
beep
(
)
;
repeatCount
=
0
;
repeat
=
false
;
evt
.
consume
(
)
;
currentBindings
=
bindings
;
}
else
if
(
modifiers
==
0
&&
(
keyCode
==
KeyEvent
.
VK_ENTER
||
keyCode
==
KeyEvent
.
VK_TAB
)
)
{
userInput
(
(
char
)
keyCode
)
;
evt
.
consume
(
)
;
}
}
if
(
readNextChar
!=
null
)
{
readNextChar
=
null
;
view
.
getStatus
(
)
.
setMessage
(
null
)
;
}
if
(
o
instanceof
EditAction
)
{
currentBindings
=
bindings
;
invokeAction
(
(
EditAction
)
o
)
;
evt
.
consume
(
)
;
}
else
if
(
o
instanceof
Hashtable
)
{
currentBindings
=
(
Hashtable
)
o
;
evt
.
consume
(
)
;
}
if
(
o
==
null
)
{
switch
(
evt
.
getKeyCode
(
)
)
{
case
KeyEvent
.
VK_NUMPAD0
:
case
KeyEvent
.
VK_NUMPAD1
:
case
KeyEvent
.
VK_NUMPAD2
:
case
KeyEvent
.
VK_NUMPAD3
:
case
KeyEvent
.
VK_NUMPAD4
:
case
KeyEvent
.
VK_NUMPAD5
:
case
KeyEvent
.
VK_NUMPAD6
:
case
KeyEvent
.
VK_NUMPAD7
:
case
KeyEvent
.
VK_NUMPAD8
:
case
KeyEvent
.
VK_NUMPAD9
:
case
KeyEvent
.
VK_MULTIPLY
:
case
KeyEvent
.
VK_ADD
:
case
KeyEvent
.
VK_SUBTRACT
:
case
KeyEvent
.
VK_DECIMAL
:
case
KeyEvent
.
VK_DIVIDE
:
KeyEventWorkaround
.
numericKeypadKey
(
)
;
break
;
}
}
}
public
void
keyTyped
(
KeyEvent
evt
)
{
char
c
=
evt
.
getKeyChar
(
)
;
if
(
c
==
'\b'
)
return
;
KeyStroke
keyStroke
;
switch
(
c
)
{
case
' '
:
keyStroke
=
KeyStroke
.
getKeyStroke
(
KeyEvent
.
VK_SPACE
,
evt
.
getModifiers
(
)
)
;
break
;
case
'\t'
:
keyStroke
=
KeyStroke
.
getKeyStroke
(
KeyEvent
.
VK_TAB
,
evt
.
getModifiers
(
)
)
;
break
;
case
'\n'
:
keyStroke
=
KeyStroke
.
getKeyStroke
(
KeyEvent
.
VK_ENTER
,
evt
.
getModifiers
(
)
)
;
break
;
default
:
keyStroke
=
KeyStroke
.
getKeyStroke
(
c
)
;
break
;
}
Object
o
=
currentBindings
.
get
(
keyStroke
)
;
if
(
o
instanceof
Hashtable
)
{
currentBindings
=
(
Hashtable
)
o
;
}
else
if
(
o
instanceof
EditAction
)
{
currentBindings
=
bindings
;
invokeAction
(
(
EditAction
)
o
)
;
}
else
{
currentBindings
=
bindings
;
if
(
repeat
&&
Character
.
isDigit
(
c
)
)
{
repeatCount
*=
10
;
repeatCount
+=
(
c
-
'0'
)
;
view
.
getStatus
(
)
.
setMessage
(
null
)
;
}
else
userInput
(
c
)
;
}
}
public
static
KeyStroke
parseKeyStroke
(
String
keyStroke
)
{
if
(
keyStroke
==
null
)
return
null
;
int
modifiers
=
0
;
int
index
=
keyStroke
.
indexOf
(
'+'
)
;
if
(
index
!=
-
1
)
{
for
(
int
i
=
0
;
i
<
index
;
i
++
)
{
switch
(
Character
.
toUpperCase
(
keyStroke
.
charAt
(
i
)
)
)
{
case
'A'
:
modifiers
|=
InputEvent
.
ALT_MASK
;
break
;
case
'C'
:
if
(
OperatingSystem
.
isMacOS
(
)
)
modifiers
|=
InputEvent
.
META_MASK
;
else
modifiers
|=
InputEvent
.
CTRL_MASK
;
break
;
case
'M'
:
if
(
OperatingSystem
.
isMacOS
(
)
)
modifiers
|=
InputEvent
.
CTRL_MASK
;
else
modifiers
|=
InputEvent
.
META_MASK
;
break
;
case
'S'
:
modifiers
|=
InputEvent
.
SHIFT_MASK
;
break
;
}
}
}
String
key
=
keyStroke
.
substring
(
index
+
1
)
;
if
(
key
.
length
(
)
==
1
)
{
char
ch
=
key
.
charAt
(
0
)
;
if
(
modifiers
==
0
)
return
KeyStroke
.
getKeyStroke
(
ch
)
;
else
{
return
KeyStroke
.
getKeyStroke
(
Character
.
toUpperCase
(
ch
)
,
modifiers
)
;
}
}
else
if
(
key
.
length
(
)
==
0
)
{
Log
.
log
(
Log
.
ERROR
,
DefaultInputHandler
.
class
,
"Invalid key stroke: "
+
keyStroke
)
;
return
null
;
}
else
{
int
ch
;
try
{
ch
=
KeyEvent
.
class
.
getField
(
"VK_"
.
concat
(
key
)
)
.
getInt
(
null
)
;
}
catch
(
Exception
e
)
{
Log
.
log
(
Log
.
ERROR
,
DefaultInputHandler
.
class
,
"Invalid key stroke: "
+
keyStroke
)
;
return
null
;
}
return
KeyStroke
.
getKeyStroke
(
ch
,
modifiers
)
;
}
}
private
Hashtable
bindings
;
private
Hashtable
currentBindings
;
}
