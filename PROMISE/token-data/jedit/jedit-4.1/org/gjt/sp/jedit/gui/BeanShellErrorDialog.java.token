package
org
.
gjt
.
sp
.
jedit
.
gui
;
import
javax
.
swing
.
*
;
import
javax
.
swing
.
border
.
*
;
import
java
.
awt
.
*
;
import
java
.
awt
.
event
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
class
BeanShellErrorDialog
extends
EnhancedDialog
{
public
BeanShellErrorDialog
(
View
view
,
String
message
)
{
super
(
view
,
jEdit
.
getProperty
(
"beanshell-error.title"
)
,
true
)
;
JPanel
content
=
new
JPanel
(
new
BorderLayout
(
12
,
12
)
)
;
content
.
setBorder
(
new
EmptyBorder
(
12
,
12
,
12
,
12
)
)
;
setContentPane
(
content
)
;
Box
iconBox
=
new
Box
(
BoxLayout
.
Y_AXIS
)
;
iconBox
.
add
(
new
JLabel
(
UIManager
.
getIcon
(
"OptionPane.errorIcon"
)
)
)
;
iconBox
.
add
(
Box
.
createGlue
(
)
)
;
content
.
add
(
BorderLayout
.
WEST
,
iconBox
)
;
JPanel
centerPanel
=
new
JPanel
(
new
BorderLayout
(
)
)
;
JPanel
caption
=
new
JPanel
(
new
GridLayout
(
2
,
1
,
3
,
3
)
)
;
caption
.
setBorder
(
new
EmptyBorder
(
0
,
0
,
6
,
0
)
)
;
caption
.
add
(
new
JLabel
(
jEdit
.
getProperty
(
"beanshell-error.message.1"
)
)
)
;
caption
.
add
(
new
JLabel
(
jEdit
.
getProperty
(
"beanshell-error.message.2"
)
)
)
;
centerPanel
.
add
(
BorderLayout
.
NORTH
,
caption
)
;
JTextArea
textArea
=
new
JTextArea
(
10
,
60
)
;
textArea
.
setText
(
message
)
;
textArea
.
setLineWrap
(
true
)
;
textArea
.
setWrapStyleWord
(
true
)
;
centerPanel
.
add
(
BorderLayout
.
CENTER
,
new
JScrollPane
(
textArea
)
)
;
content
.
add
(
BorderLayout
.
CENTER
,
centerPanel
)
;
Box
buttons
=
new
Box
(
BoxLayout
.
X_AXIS
)
;
buttons
.
add
(
Box
.
createGlue
(
)
)
;
JButton
ok
=
new
JButton
(
jEdit
.
getProperty
(
"common.ok"
)
)
;
ok
.
addActionListener
(
new
ActionHandler
(
)
)
;
buttons
.
add
(
ok
)
;
buttons
.
add
(
Box
.
createGlue
(
)
)
;
content
.
add
(
BorderLayout
.
SOUTH
,
buttons
)
;
getRootPane
(
)
.
setDefaultButton
(
ok
)
;
pack
(
)
;
setLocationRelativeTo
(
view
)
;
show
(
)
;
}
public
void
ok
(
)
{
dispose
(
)
;
}
public
void
cancel
(
)
{
dispose
(
)
;
}
class
ActionHandler
implements
ActionListener
{
public
void
actionPerformed
(
ActionEvent
evt
)
{
dispose
(
)
;
}
}
}
