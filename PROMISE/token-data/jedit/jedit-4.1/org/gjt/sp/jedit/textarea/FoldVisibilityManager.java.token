package
org
.
gjt
.
sp
.
jedit
.
textarea
;
import
java
.
awt
.
Toolkit
;
import
org
.
gjt
.
sp
.
jedit
.
buffer
.
OffsetManager
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
class
FoldVisibilityManager
{
public
FoldVisibilityManager
(
Buffer
buffer
,
OffsetManager
offsetMgr
,
JEditTextArea
textArea
)
{
this
.
buffer
=
buffer
;
this
.
offsetMgr
=
offsetMgr
;
this
.
textArea
=
textArea
;
}
public
boolean
isNarrowed
(
)
{
return
narrowed
;
}
public
int
getVirtualLineCount
(
)
{
return
offsetMgr
.
getVirtualLineCount
(
index
)
;
}
public
final
boolean
isLineVisible
(
int
line
)
{
if
(
line
<
0
||
line
>=
offsetMgr
.
getLineCount
(
)
)
throw
new
ArrayIndexOutOfBoundsException
(
line
)
;
try
{
buffer
.
readLock
(
)
;
return
offsetMgr
.
isLineVisible
(
line
,
index
)
;
}
finally
{
buffer
.
readUnlock
(
)
;
}
}
public
int
getFirstVisibleLine
(
)
{
try
{
buffer
.
readLock
(
)
;
for
(
int
i
=
0
;
i
<
buffer
.
getLineCount
(
)
;
i
++
)
{
if
(
offsetMgr
.
isLineVisible
(
i
,
index
)
)
return
i
;
}
}
finally
{
buffer
.
readUnlock
(
)
;
}
return
-
1
;
}
public
int
getLastVisibleLine
(
)
{
try
{
buffer
.
readLock
(
)
;
for
(
int
i
=
buffer
.
getLineCount
(
)
-
1
;
i
>=
0
;
i
--
)
{
if
(
offsetMgr
.
isLineVisible
(
i
,
index
)
)
return
i
;
}
}
finally
{
buffer
.
readUnlock
(
)
;
}
return
-
1
;
}
public
int
getNextVisibleLine
(
int
line
)
{
if
(
line
<
0
||
line
>=
offsetMgr
.
getLineCount
(
)
)
throw
new
ArrayIndexOutOfBoundsException
(
line
)
;
try
{
buffer
.
readLock
(
)
;
if
(
line
==
buffer
.
getLineCount
(
)
-
1
)
return
-
1
;
for
(
int
i
=
line
+
1
;
i
<
buffer
.
getLineCount
(
)
;
i
++
)
{
if
(
offsetMgr
.
isLineVisible
(
i
,
index
)
)
return
i
;
}
return
-
1
;
}
finally
{
buffer
.
readUnlock
(
)
;
}
}
public
int
getPrevVisibleLine
(
int
line
)
{
if
(
line
<
0
||
line
>=
offsetMgr
.
getLineCount
(
)
)
throw
new
ArrayIndexOutOfBoundsException
(
line
)
;
try
{
buffer
.
readLock
(
)
;
if
(
line
==
0
)
return
-
1
;
for
(
int
i
=
line
-
1
;
i
>=
0
;
i
--
)
{
if
(
offsetMgr
.
isLineVisible
(
i
,
index
)
)
return
i
;
}
return
-
1
;
}
finally
{
buffer
.
readUnlock
(
)
;
}
}
public
int
physicalToVirtual
(
int
line
)
{
try
{
buffer
.
readLock
(
)
;
if
(
line
<
0
)
throw
new
ArrayIndexOutOfBoundsException
(
line
+
" < 0"
)
;
else
if
(
line
>=
offsetMgr
.
getLineCount
(
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
line
+
" > "
+
buffer
.
getLineCount
(
)
)
;
}
if
(
getVirtualLineCount
(
)
==
buffer
.
getLineCount
(
)
)
return
line
;
while
(
!
offsetMgr
.
isLineVisible
(
line
,
index
)
&&
line
>
0
)
line
--
;
if
(
line
==
0
&&
!
offsetMgr
.
isLineVisible
(
line
,
index
)
)
{
return
0
;
}
if
(
lastPhysical
==
line
)
{
if
(
lastVirtual
<
0
||
lastVirtual
>=
offsetMgr
.
getVirtualLineCount
(
index
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"cached: "
+
lastVirtual
)
;
}
}
else
if
(
line
>
lastPhysical
&&
lastPhysical
!=
-
1
)
{
for
(
;
;
)
{
if
(
lastPhysical
==
line
)
break
;
if
(
offsetMgr
.
isLineVisible
(
lastPhysical
,
index
)
)
lastVirtual
++
;
if
(
lastPhysical
==
buffer
.
getLineCount
(
)
-
1
)
break
;
else
lastPhysical
++
;
}
if
(
lastVirtual
<
0
||
lastVirtual
>=
offsetMgr
.
getVirtualLineCount
(
index
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"fwd scan: "
+
lastVirtual
)
;
}
}
else
if
(
line
<
lastPhysical
&&
lastPhysical
-
line
>
line
)
{
for
(
;
;
)
{
if
(
lastPhysical
==
line
)
break
;
if
(
offsetMgr
.
isLineVisible
(
lastPhysical
,
index
)
)
lastVirtual
--
;
if
(
lastPhysical
==
0
)
break
;
else
lastPhysical
--
;
}
if
(
lastVirtual
<
0
||
lastVirtual
>=
offsetMgr
.
getVirtualLineCount
(
index
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"back scan: "
+
lastVirtual
)
;
}
}
else
{
lastPhysical
=
0
;
while
(
!
offsetMgr
.
isLineVisible
(
lastPhysical
,
index
)
)
lastPhysical
++
;
lastVirtual
=
0
;
for
(
;
;
)
{
if
(
lastPhysical
==
line
)
break
;
if
(
offsetMgr
.
isLineVisible
(
lastPhysical
,
index
)
)
lastVirtual
++
;
if
(
lastPhysical
==
buffer
.
getLineCount
(
)
-
1
)
break
;
else
lastPhysical
++
;
}
if
(
lastVirtual
<
0
||
lastVirtual
>=
offsetMgr
.
getVirtualLineCount
(
index
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"zero scan: "
+
lastVirtual
)
;
}
}
return
lastVirtual
;
}
finally
{
buffer
.
readUnlock
(
)
;
}
}
public
int
virtualToPhysical
(
int
line
)
{
try
{
buffer
.
readLock
(
)
;
if
(
line
<
0
)
throw
new
ArrayIndexOutOfBoundsException
(
line
+
" < 0"
)
;
else
if
(
line
>=
offsetMgr
.
getVirtualLineCount
(
index
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
line
+
" > "
+
offsetMgr
.
getVirtualLineCount
(
index
)
)
;
}
if
(
getVirtualLineCount
(
)
==
buffer
.
getLineCount
(
)
)
return
line
;
if
(
lastVirtual
==
line
)
{
if
(
lastPhysical
<
0
||
lastPhysical
>=
buffer
.
getLineCount
(
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"cached: "
+
lastPhysical
)
;
}
}
else
if
(
line
>
lastVirtual
&&
lastVirtual
!=
-
1
)
{
for
(
;
;
)
{
if
(
offsetMgr
.
isLineVisible
(
lastPhysical
,
index
)
)
{
if
(
lastVirtual
==
line
)
break
;
else
lastVirtual
++
;
}
if
(
lastPhysical
==
buffer
.
getLineCount
(
)
-
1
)
break
;
else
lastPhysical
++
;
}
if
(
lastPhysical
<
0
||
lastPhysical
>=
buffer
.
getLineCount
(
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"fwd scan: "
+
lastPhysical
)
;
}
}
else
if
(
line
<
lastVirtual
&&
lastVirtual
-
line
>
line
)
{
for
(
;
;
)
{
if
(
offsetMgr
.
isLineVisible
(
lastPhysical
,
index
)
)
{
if
(
lastVirtual
==
line
)
break
;
else
lastVirtual
--
;
}
if
(
lastPhysical
==
0
)
break
;
else
lastPhysical
--
;
}
if
(
lastPhysical
<
0
||
lastPhysical
>=
buffer
.
getLineCount
(
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"back scan: "
+
lastPhysical
)
;
}
}
else
{
lastPhysical
=
0
;
while
(
!
offsetMgr
.
isLineVisible
(
lastPhysical
,
index
)
)
lastPhysical
++
;
lastVirtual
=
0
;
for
(
;
;
)
{
if
(
offsetMgr
.
isLineVisible
(
lastPhysical
,
index
)
)
{
if
(
lastVirtual
==
line
)
break
;
else
lastVirtual
++
;
}
if
(
lastPhysical
==
buffer
.
getLineCount
(
)
-
1
)
break
;
else
lastPhysical
++
;
}
if
(
lastPhysical
<
0
||
lastPhysical
>=
buffer
.
getLineCount
(
)
)
{
throw
new
ArrayIndexOutOfBoundsException
(
"zero scan: "
+
lastPhysical
)
;
}
}
return
lastPhysical
;
}
finally
{
buffer
.
readUnlock
(
)
;
}
}
public
void
collapseFold
(
int
line
)
{
int
lineCount
=
buffer
.
getLineCount
(
)
;
int
start
=
0
;
int
end
=
lineCount
-
1
;
try
{
buffer
.
writeLock
(
)
;
if
(
line
!=
0
&&
line
!=
buffer
.
getLineCount
(
)
-
1
&&
buffer
.
isFoldStart
(
line
)
&&
!
offsetMgr
.
isLineVisible
(
line
+
1
,
index
)
)
{
line
--
;
}
int
initialFoldLevel
=
buffer
.
getFoldLevel
(
line
)
;
if
(
line
!=
lineCount
-
1
&&
buffer
.
getFoldLevel
(
line
+
1
)
>
initialFoldLevel
)
{
start
=
line
+
1
;
for
(
int
i
=
line
+
1
;
i
<
lineCount
;
i
++
)
{
if
(
buffer
.
getFoldLevel
(
i
)
<=
initialFoldLevel
)
{
end
=
i
-
1
;
break
;
}
}
}
else
{
boolean
ok
=
false
;
for
(
int
i
=
line
-
1
;
i
>=
0
;
i
--
)
{
if
(
buffer
.
getFoldLevel
(
i
)
<
initialFoldLevel
)
{
start
=
i
+
1
;
ok
=
true
;
break
;
}
}
if
(
!
ok
)
{
return
;
}
for
(
int
i
=
line
+
1
;
i
<
lineCount
;
i
++
)
{
if
(
buffer
.
getFoldLevel
(
i
)
<
initialFoldLevel
)
{
end
=
i
-
1
;
break
;
}
}
}
int
delta
=
(
end
-
start
+
1
)
;
for
(
int
i
=
start
;
i
<=
end
;
i
++
)
{
if
(
offsetMgr
.
isLineVisible
(
i
,
index
)
)
offsetMgr
.
setLineVisible
(
i
,
index
,
false
)
;
else
delta
--
;
}
if
(
delta
==
0
)
{
return
;
}
offsetMgr
.
setVirtualLineCount
(
index
,
offsetMgr
.
getVirtualLineCount
(
index
)
-
delta
)
;
}
finally
{
buffer
.
writeUnlock
(
)
;
}
foldStructureChanged
(
)
;
int
virtualLine
=
physicalToVirtual
(
start
)
;
if
(
textArea
.
getFirstLine
(
)
>
virtualLine
)
textArea
.
setFirstLine
(
virtualLine
-
textArea
.
getElectricScroll
(
)
)
;
}
public
int
expandFold
(
int
line
,
boolean
fully
)
{
int
returnValue
=
-
1
;
int
lineCount
=
buffer
.
getLineCount
(
)
;
int
start
=
0
;
int
end
=
lineCount
-
1
;
int
delta
=
0
;
try
{
buffer
.
writeLock
(
)
;
int
initialFoldLevel
=
buffer
.
getFoldLevel
(
line
)
;
if
(
line
!=
lineCount
-
1
&&
offsetMgr
.
isLineVisible
(
line
,
index
)
&&
!
offsetMgr
.
isLineVisible
(
line
+
1
,
index
)
&&
buffer
.
getFoldLevel
(
line
+
1
)
>
initialFoldLevel
)
{
start
=
line
+
1
;
for
(
int
i
=
line
+
1
;
i
<
lineCount
;
i
++
)
{
if
(
buffer
.
getFoldLevel
(
i
)
<=
initialFoldLevel
)
{
end
=
i
-
1
;
break
;
}
}
}
else
{
boolean
ok
=
false
;
for
(
int
i
=
line
-
1
;
i
>=
0
;
i
--
)
{
if
(
offsetMgr
.
isLineVisible
(
i
,
index
)
&&
buffer
.
getFoldLevel
(
i
)
<
initialFoldLevel
)
{
start
=
i
+
1
;
ok
=
true
;
break
;
}
}
if
(
!
ok
)
{
return
-
1
;
}
for
(
int
i
=
line
+
1
;
i
<
lineCount
;
i
++
)
{
if
(
(
offsetMgr
.
isLineVisible
(
i
,
index
)
&&
buffer
.
getFoldLevel
(
i
)
<
initialFoldLevel
)
||
i
==
getLastVisibleLine
(
)
)
{
end
=
i
-
1
;
break
;
}
}
}
initialFoldLevel
=
buffer
.
getFoldLevel
(
start
)
;
for
(
int
i
=
start
;
i
<=
end
;
i
++
)
{
buffer
.
getFoldLevel
(
i
)
;
}
for
(
int
i
=
start
;
i
<=
end
;
i
++
)
{
if
(
buffer
.
getFoldLevel
(
i
)
>
initialFoldLevel
)
{
if
(
returnValue
==
-
1
&&
i
!=
0
&&
buffer
.
isFoldStart
(
i
-
1
)
)
{
returnValue
=
i
-
1
;
}
if
(
!
offsetMgr
.
isLineVisible
(
i
,
index
)
&&
fully
)
{
delta
++
;
offsetMgr
.
setLineVisible
(
i
,
index
,
true
)
;
}
}
else
if
(
!
offsetMgr
.
isLineVisible
(
i
,
index
)
)
{
delta
++
;
offsetMgr
.
setLineVisible
(
i
,
index
,
true
)
;
}
}
offsetMgr
.
setVirtualLineCount
(
index
,
offsetMgr
.
getVirtualLineCount
(
index
)
+
delta
)
;
if
(
!
fully
&&
!
offsetMgr
.
isLineVisible
(
line
,
index
)
)
{
expandFold
(
line
,
false
)
;
return
returnValue
;
}
}
finally
{
buffer
.
writeUnlock
(
)
;
}
foldStructureChanged
(
)
;
int
virtualLine
=
physicalToVirtual
(
start
)
;
int
firstLine
=
textArea
.
getFirstLine
(
)
;
int
visibleLines
=
textArea
.
getVisibleLines
(
)
;
if
(
virtualLine
+
delta
>=
firstLine
+
visibleLines
&&
delta
<
visibleLines
-
1
)
{
textArea
.
setFirstLine
(
virtualLine
+
delta
-
visibleLines
+
1
)
;
}
return
returnValue
;
}
public
void
expandAllFolds
(
)
{
try
{
buffer
.
writeLock
(
)
;
narrowed
=
false
;
if
(
offsetMgr
.
getVirtualLineCount
(
index
)
==
buffer
.
getLineCount
(
)
)
return
;
offsetMgr
.
setVirtualLineCount
(
index
,
buffer
.
getLineCount
(
)
)
;
for
(
int
i
=
0
;
i
<
buffer
.
getLineCount
(
)
;
i
++
)
{
offsetMgr
.
setLineVisible
(
i
,
index
,
true
)
;
}
foldStructureChanged
(
)
;
}
finally
{
buffer
.
writeUnlock
(
)
;
}
}
public
void
expandFolds
(
char
digit
)
{
if
(
digit
<
'1'
||
digit
>
'9'
)
{
Toolkit
.
getDefaultToolkit
(
)
.
beep
(
)
;
return
;
}
else
expandFolds
(
(
int
)
(
digit
-
'1'
)
+
1
)
;
}
public
void
expandFolds
(
int
foldLevel
)
{
try
{
buffer
.
writeLock
(
)
;
narrowed
=
false
;
offsetMgr
.
setVirtualLineCount
(
index
,
buffer
.
getLineCount
(
)
)
;
int
newVirtualLineCount
=
0
;
foldLevel
=
(
foldLevel
-
1
)
*
buffer
.
getIndentSize
(
)
+
1
;
boolean
seenVisibleLine
=
false
;
for
(
int
i
=
0
;
i
<
buffer
.
getLineCount
(
)
;
i
++
)
{
if
(
!
seenVisibleLine
||
buffer
.
getFoldLevel
(
i
)
<
foldLevel
)
{
seenVisibleLine
=
true
;
offsetMgr
.
setLineVisible
(
i
,
index
,
true
)
;
newVirtualLineCount
++
;
}
else
offsetMgr
.
setLineVisible
(
i
,
index
,
false
)
;
}
offsetMgr
.
setVirtualLineCount
(
index
,
newVirtualLineCount
)
;
}
finally
{
buffer
.
writeUnlock
(
)
;
}
foldStructureChanged
(
)
;
}
public
void
narrow
(
int
start
,
int
end
)
{
if
(
start
>
end
||
start
<
0
||
end
>=
offsetMgr
.
getLineCount
(
)
)
throw
new
ArrayIndexOutOfBoundsException
(
start
+
", "
+
end
)
;
if
(
start
!=
offsetMgr
.
getLineCount
(
)
-
1
&&
!
offsetMgr
.
isLineVisible
(
start
+
1
,
index
)
)
expandFold
(
start
,
false
)
;
int
virtualLineCount
=
offsetMgr
.
getVirtualLineCount
(
index
)
;
for
(
int
i
=
0
;
i
<
start
;
i
++
)
{
if
(
offsetMgr
.
isLineVisible
(
i
,
index
)
)
{
virtualLineCount
--
;
offsetMgr
.
setLineVisible
(
i
,
index
,
false
)
;
}
}
for
(
int
i
=
end
+
1
;
i
<
buffer
.
getLineCount
(
)
;
i
++
)
{
if
(
offsetMgr
.
isLineVisible
(
i
,
index
)
)
{
virtualLineCount
--
;
offsetMgr
.
setLineVisible
(
i
,
index
,
false
)
;
}
}
offsetMgr
.
setVirtualLineCount
(
index
,
virtualLineCount
)
;
narrowed
=
true
;
foldStructureChanged
(
)
;
GUIUtilities
.
getView
(
textArea
)
.
getStatus
(
)
.
setMessageAndClear
(
jEdit
.
getProperty
(
"view.status.narrow"
)
)
;
}
public
final
void
_grab
(
int
index
)
{
this
.
index
=
index
;
lastPhysical
=
lastVirtual
=
-
1
;
}
public
final
void
_release
(
)
{
index
=
-
1
;
}
public
final
int
_getIndex
(
)
{
return
index
;
}
public
void
_invalidate
(
int
startLine
)
{
if
(
lastPhysical
>=
startLine
)
lastPhysical
=
lastVirtual
=
-
1
;
}
public
void
foldStructureChanged
(
)
{
lastPhysical
=
lastVirtual
=
-
1
;
textArea
.
foldStructureChanged
(
)
;
}
private
Buffer
buffer
;
private
OffsetManager
offsetMgr
;
private
JEditTextArea
textArea
;
private
int
index
;
private
int
lastPhysical
;
private
int
lastVirtual
;
private
boolean
narrowed
;
}
