package
org
.
gjt
.
sp
.
jedit
.
syntax
;
import
java
.
util
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
Mode
;
import
javax
.
swing
.
text
.
Segment
;
public
class
ParserRuleSet
{
public
ParserRuleSet
(
String
name
,
Mode
mode
)
{
this
.
name
=
name
;
this
.
mode
=
mode
;
ruleMapFirst
=
new
ParserRule
[
RULE_BUCKET_COUNT
]
;
ruleMapLast
=
new
ParserRule
[
RULE_BUCKET_COUNT
]
;
}
public
Mode
getMode
(
)
{
return
mode
;
}
public
Hashtable
getProperties
(
)
{
return
props
;
}
public
void
setProperties
(
Hashtable
props
)
{
this
.
props
=
props
;
}
public
void
addRule
(
ParserRule
r
)
{
int
key
=
Character
.
toUpperCase
(
r
.
searchChars
[
0
]
)
%
RULE_BUCKET_COUNT
;
ParserRule
last
=
ruleMapLast
[
key
]
;
if
(
last
==
null
)
ruleMapFirst
[
key
]
=
ruleMapLast
[
key
]
=
r
;
else
{
last
.
next
=
r
;
ruleMapLast
[
key
]
=
r
;
}
}
public
ParserRule
getRules
(
char
ch
)
{
int
key
=
Character
.
toUpperCase
(
ch
)
%
RULE_BUCKET_COUNT
;
return
ruleMapFirst
[
key
]
;
}
public
int
getTerminateChar
(
)
{
return
terminateChar
;
}
public
void
setTerminateChar
(
int
atChar
)
{
terminateChar
=
(
atChar
>=
0
)
?
atChar
:
-
1
;
}
public
boolean
getIgnoreCase
(
)
{
return
ignoreCase
;
}
public
void
setIgnoreCase
(
boolean
b
)
{
ignoreCase
=
b
;
}
public
KeywordMap
getKeywords
(
)
{
return
keywords
;
}
public
void
setKeywords
(
KeywordMap
km
)
{
keywords
=
km
;
}
public
boolean
getHighlightDigits
(
)
{
return
highlightDigits
;
}
public
void
setHighlightDigits
(
boolean
highlightDigits
)
{
this
.
highlightDigits
=
highlightDigits
;
}
public
ParserRule
getEscapeRule
(
)
{
return
escapeRule
;
}
public
Segment
getEscapePattern
(
)
{
if
(
escapePattern
==
null
&&
escapeRule
!=
null
)
{
escapePattern
=
new
Segment
(
escapeRule
.
searchChars
,
0
,
escapeRule
.
sequenceLengths
[
0
]
)
;
}
return
escapePattern
;
}
public
void
setEscape
(
String
esc
)
{
if
(
esc
==
null
)
{
escapeRule
=
null
;
}
else
{
escapeRule
=
ParserRuleFactory
.
createEscapeRule
(
esc
)
;
}
escapePattern
=
null
;
}
public
byte
getDefault
(
)
{
return
defaultToken
;
}
public
void
setDefault
(
byte
def
)
{
defaultToken
=
def
;
}
public
String
toString
(
)
{
return
getClass
(
)
.
getName
(
)
+
"["
+
mode
.
getName
(
)
+
"::"
+
name
+
"]"
;
}
private
static
final
int
RULE_BUCKET_COUNT
=
32
;
private
String
name
;
private
Mode
mode
;
private
Hashtable
props
;
private
KeywordMap
keywords
;
private
ParserRule
[
]
ruleMapFirst
;
private
ParserRule
[
]
ruleMapLast
;
private
ParserRule
escapeRule
;
private
Segment
escapePattern
;
private
int
terminateChar
=
-
1
;
private
boolean
ignoreCase
=
true
;
private
boolean
highlightDigits
;
private
byte
defaultToken
;
}
