package
org
.
gjt
.
sp
.
jedit
.
browser
;
import
java
.
awt
.
*
;
import
java
.
awt
.
event
.
*
;
import
java
.
util
.
*
;
import
javax
.
swing
.
*
;
import
javax
.
swing
.
event
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
io
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
class
BrowserCommandsMenu
extends
JPopupMenu
{
public
BrowserCommandsMenu
(
VFSBrowser
browser
,
VFS
.
DirectoryEntry
file
)
{
this
.
browser
=
browser
;
if
(
file
!=
null
)
{
this
.
file
=
file
;
VFS
vfs
=
VFSManager
.
getVFSForPath
(
file
.
deletePath
)
;
boolean
delete
=
(
vfs
.
getCapabilities
(
)
&
VFS
.
DELETE_CAP
)
!=
0
;
boolean
rename
=
(
vfs
.
getCapabilities
(
)
&
VFS
.
RENAME_CAP
)
!=
0
;
if
(
jEdit
.
getBuffer
(
file
.
path
)
!=
null
)
{
if
(
browser
.
getMode
(
)
==
VFSBrowser
.
BROWSER
)
{
add
(
createMenuItem
(
"open"
)
)
;
add
(
createMenuItem
(
"open-view"
)
)
;
add
(
createMenuItem
(
"insert"
)
)
;
}
else
add
(
createMenuItem
(
"choose"
)
)
;
add
(
createMenuItem
(
"close"
)
)
;
}
else
{
if
(
file
.
type
==
VFS
.
DirectoryEntry
.
DIRECTORY
||
file
.
type
==
VFS
.
DirectoryEntry
.
FILESYSTEM
)
{
add
(
createMenuItem
(
"browse"
)
)
;
}
else
if
(
browser
.
getMode
(
)
!=
VFSBrowser
.
BROWSER
)
{
add
(
createMenuItem
(
"choose"
)
)
;
}
else
{
add
(
createMenuItem
(
"open"
)
)
;
add
(
createMenuItem
(
"open-view"
)
)
;
add
(
createOpenEncodingMenu
(
)
)
;
add
(
createMenuItem
(
"insert"
)
)
;
}
if
(
rename
)
add
(
createMenuItem
(
"rename"
)
)
;
if
(
delete
)
add
(
createMenuItem
(
"delete"
)
)
;
}
addSeparator
(
)
;
}
add
(
createMenuItem
(
"up"
)
)
;
add
(
createMenuItem
(
"reload"
)
)
;
add
(
createMenuItem
(
"roots"
)
)
;
add
(
createMenuItem
(
"home"
)
)
;
add
(
createMenuItem
(
"synchronize"
)
)
;
addSeparator
(
)
;
if
(
browser
.
getMode
(
)
==
VFSBrowser
.
BROWSER
)
add
(
createMenuItem
(
"new-file"
)
)
;
add
(
createMenuItem
(
"new-directory"
)
)
;
if
(
browser
.
getMode
(
)
==
VFSBrowser
.
BROWSER
)
{
addSeparator
(
)
;
add
(
createMenuItem
(
"search-in-directory"
)
)
;
}
addSeparator
(
)
;
showHiddenFiles
=
new
JCheckBoxMenuItem
(
jEdit
.
getProperty
(
"vfs.browser.commands.show-hidden-files.label"
)
)
;
showHiddenFiles
.
setActionCommand
(
"show-hidden-files"
)
;
showHiddenFiles
.
setSelected
(
browser
.
getShowHiddenFiles
(
)
)
;
showHiddenFiles
.
addActionListener
(
new
ActionHandler
(
)
)
;
add
(
showHiddenFiles
)
;
}
public
void
update
(
)
{
showHiddenFiles
.
setSelected
(
browser
.
getShowHiddenFiles
(
)
)
;
}
private
VFSBrowser
browser
;
private
VFS
.
DirectoryEntry
file
;
private
VFS
vfs
;
private
JCheckBoxMenuItem
showHiddenFiles
;
private
JMenuItem
createMenuItem
(
String
name
)
{
String
label
=
jEdit
.
getProperty
(
"vfs.browser.commands."
+
name
+
".label"
)
;
JMenuItem
mi
=
new
JMenuItem
(
label
)
;
mi
.
setActionCommand
(
name
)
;
mi
.
addActionListener
(
new
ActionHandler
(
)
)
;
return
mi
;
}
private
JMenu
createOpenEncodingMenu
(
)
{
ActionListener
listener
=
new
ActionHandler
(
)
;
JMenu
openEncoding
=
new
JMenu
(
jEdit
.
getProperty
(
"open-encoding.label"
)
)
;
String
systemEncoding
=
System
.
getProperty
(
"file.encoding"
)
;
JMenuItem
mi
=
new
JMenuItem
(
jEdit
.
getProperty
(
"os-encoding"
)
)
;
mi
.
setActionCommand
(
"open@"
+
systemEncoding
)
;
mi
.
addActionListener
(
listener
)
;
openEncoding
.
add
(
mi
)
;
mi
=
new
JMenuItem
(
jEdit
.
getProperty
(
"jedit-encoding"
)
)
;
mi
.
setActionCommand
(
"open@"
+
jEdit
.
getProperty
(
"buffer.encoding"
,
systemEncoding
)
)
;
mi
.
addActionListener
(
listener
)
;
openEncoding
.
add
(
mi
)
;
openEncoding
.
addSeparator
(
)
;
StringTokenizer
st
=
new
StringTokenizer
(
jEdit
.
getProperty
(
"encodings"
)
)
;
while
(
st
.
hasMoreTokens
(
)
)
{
String
encoding
=
st
.
nextToken
(
)
;
mi
=
new
JMenuItem
(
encoding
)
;
mi
.
setActionCommand
(
"open@"
+
encoding
)
;
mi
.
addActionListener
(
listener
)
;
openEncoding
.
add
(
mi
)
;
}
openEncoding
.
addSeparator
(
)
;
mi
=
new
JMenuItem
(
jEdit
.
getProperty
(
"other-encoding.label"
)
)
;
mi
.
setActionCommand
(
"other-encoding"
)
;
mi
.
addActionListener
(
listener
)
;
openEncoding
.
add
(
mi
)
;
return
openEncoding
;
}
class
ActionHandler
implements
ActionListener
{
public
void
actionPerformed
(
ActionEvent
evt
)
{
View
view
=
browser
.
getView
(
)
;
String
actionCommand
=
evt
.
getActionCommand
(
)
;
if
(
actionCommand
.
startsWith
(
"open@"
)
)
{
Hashtable
props
=
new
Hashtable
(
)
;
props
.
put
(
Buffer
.
ENCODING
,
actionCommand
.
substring
(
5
)
)
;
jEdit
.
openFile
(
view
,
null
,
file
.
path
,
false
,
props
)
;
}
else
if
(
actionCommand
.
equals
(
"other-encoding"
)
)
{
String
encoding
=
GUIUtilities
.
input
(
browser
,
"encoding-prompt"
,
null
,
jEdit
.
getProperty
(
"buffer.encoding"
,
System
.
getProperty
(
"file.encoding"
)
)
)
;
if
(
encoding
==
null
)
return
;
Hashtable
props
=
new
Hashtable
(
)
;
props
.
put
(
Buffer
.
ENCODING
,
encoding
)
;
jEdit
.
openFile
(
view
,
null
,
file
.
path
,
false
,
props
)
;
}
else
if
(
actionCommand
.
equals
(
"open"
)
)
jEdit
.
openFile
(
view
,
file
.
path
)
;
else
if
(
actionCommand
.
equals
(
"open-view"
)
)
{
Buffer
buffer
=
jEdit
.
openFile
(
null
,
file
.
path
)
;
if
(
buffer
!=
null
)
jEdit
.
newView
(
view
,
buffer
)
;
}
else
if
(
actionCommand
.
equals
(
"insert"
)
)
view
.
getBuffer
(
)
.
insertFile
(
view
,
file
.
path
)
;
else
if
(
actionCommand
.
equals
(
"choose"
)
)
browser
.
filesActivated
(
false
,
false
)
;
else
if
(
actionCommand
.
equals
(
"close"
)
)
{
Buffer
buffer
=
jEdit
.
getBuffer
(
file
.
path
)
;
if
(
buffer
!=
null
)
jEdit
.
closeBuffer
(
view
,
buffer
)
;
}
else
if
(
actionCommand
.
equals
(
"browse"
)
)
browser
.
setDirectory
(
file
.
path
)
;
else
if
(
actionCommand
.
equals
(
"rename"
)
)
browser
.
rename
(
file
.
path
)
;
else
if
(
actionCommand
.
equals
(
"delete"
)
)
browser
.
delete
(
file
.
deletePath
)
;
else
if
(
actionCommand
.
equals
(
"up"
)
)
{
String
path
=
browser
.
getDirectory
(
)
;
VFS
vfs
=
VFSManager
.
getVFSForPath
(
path
)
;
browser
.
setDirectory
(
vfs
.
getParentOfPath
(
path
)
)
;
}
else
if
(
actionCommand
.
equals
(
"reload"
)
)
browser
.
reloadDirectory
(
)
;
else
if
(
actionCommand
.
equals
(
"roots"
)
)
browser
.
rootDirectory
(
)
;
else
if
(
actionCommand
.
equals
(
"home"
)
)
browser
.
setDirectory
(
System
.
getProperty
(
"user.home"
)
)
;
else
if
(
actionCommand
.
equals
(
"synchronize"
)
)
{
Buffer
buffer
=
browser
.
getView
(
)
.
getBuffer
(
)
;
browser
.
setDirectory
(
buffer
.
getVFS
(
)
.
getParentOfPath
(
buffer
.
getPath
(
)
)
)
;
}
else
if
(
actionCommand
.
equals
(
"new-file"
)
)
browser
.
newFile
(
)
;
else
if
(
actionCommand
.
equals
(
"new-directory"
)
)
browser
.
mkdir
(
)
;
else
if
(
actionCommand
.
equals
(
"search-in-directory"
)
)
browser
.
searchInDirectory
(
)
;
else
if
(
actionCommand
.
equals
(
"show-hidden-files"
)
)
{
browser
.
setShowHiddenFiles
(
!
browser
.
getShowHiddenFiles
(
)
)
;
browser
.
reloadDirectory
(
)
;
}
}
}
}
