package
org
.
gjt
.
sp
.
jedit
.
io
;
import
java
.
awt
.
Component
;
import
java
.
io
.
*
;
import
java
.
util
.
Vector
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
import
org
.
gjt
.
sp
.
util
.
Log
;
public
class
FileVFS
extends
VFS
{
public
static
final
String
PERMISSIONS_PROPERTY
=
"FileVFS__perms"
;
public
FileVFS
(
)
{
super
(
"file"
)
;
}
public
int
getCapabilities
(
)
{
return
READ_CAP
|
WRITE_CAP
|
BROWSE_CAP
|
DELETE_CAP
|
RENAME_CAP
|
MKDIR_CAP
;
}
public
String
getParentOfPath
(
String
path
)
{
if
(
OperatingSystem
.
isDOSDerived
(
)
)
{
if
(
path
.
length
(
)
==
2
&&
path
.
charAt
(
1
)
==
':'
)
return
FileRootsVFS
.
PROTOCOL
+
":"
;
else
if
(
path
.
length
(
)
==
3
&&
path
.
endsWith
(
":\\"
)
)
return
FileRootsVFS
.
PROTOCOL
+
":"
;
else
if
(
path
.
startsWith
(
"\\\\"
)
&&
path
.
indexOf
(
'\\'
,
2
)
==
-
1
)
return
path
;
}
return
super
.
getParentOfPath
(
path
)
;
}
public
String
constructPath
(
String
parent
,
String
path
)
{
if
(
parent
.
endsWith
(
File
.
separator
)
)
path
=
parent
+
path
;
else
path
=
parent
+
File
.
separator
+
path
;
try
{
return
new
File
(
path
)
.
getCanonicalPath
(
)
;
}
catch
(
IOException
io
)
{
return
path
;
}
}
public
char
getFileSeparator
(
)
{
return
File
.
separatorChar
;
}
public
boolean
load
(
View
view
,
Buffer
buffer
,
String
path
)
{
File
file
=
new
File
(
MiscUtilities
.
canonPath
(
path
)
)
;
if
(
!
file
.
exists
(
)
)
{
buffer
.
setNewFile
(
true
)
;
return
true
;
}
else
buffer
.
setReadOnly
(
!
file
.
canWrite
(
)
)
;
if
(
file
.
isDirectory
(
)
)
{
VFSManager
.
error
(
view
,
file
.
getPath
(
)
,
"ioerror.open-directory"
,
null
)
;
buffer
.
setNewFile
(
false
)
;
return
false
;
}
if
(
!
file
.
canRead
(
)
)
{
VFSManager
.
error
(
view
,
file
.
getPath
(
)
,
"ioerror.no-read"
,
null
)
;
buffer
.
setNewFile
(
false
)
;
return
false
;
}
return
super
.
load
(
view
,
buffer
,
path
)
;
}
public
boolean
save
(
View
view
,
Buffer
buffer
,
String
path
)
{
File
file
=
new
File
(
path
)
;
if
(
file
.
isDirectory
(
)
)
{
VFSManager
.
error
(
view
,
file
.
getPath
(
)
,
"ioerror.save-directory"
,
null
)
;
return
false
;
}
if
(
(
file
.
exists
(
)
&&
!
file
.
canWrite
(
)
)
||
(
!
file
.
exists
(
)
&&
!
new
File
(
file
.
getParent
(
)
)
.
canWrite
(
)
)
)
{
VFSManager
.
error
(
view
,
file
.
getPath
(
)
,
"ioerror.no-write"
,
null
)
;
return
false
;
}
if
(
OperatingSystem
.
isUnix
(
)
)
{
int
permissions
=
getPermissions
(
buffer
.
getPath
(
)
)
;
Log
.
log
(
Log
.
DEBUG
,
this
,
buffer
.
getPath
(
)
+
" has permissions 0"
+
Integer
.
toString
(
permissions
,
8
)
)
;
buffer
.
setIntegerProperty
(
PERMISSIONS_PROPERTY
,
permissions
)
;
}
return
super
.
save
(
view
,
buffer
,
path
)
;
}
public
boolean
insert
(
View
view
,
Buffer
buffer
,
String
path
)
{
File
file
=
new
File
(
path
)
;
if
(
!
file
.
exists
(
)
)
return
false
;
if
(
file
.
isDirectory
(
)
)
{
VFSManager
.
error
(
view
,
file
.
getPath
(
)
,
"ioerror.open-directory"
,
null
)
;
return
false
;
}
if
(
!
file
.
canRead
(
)
)
{
VFSManager
.
error
(
view
,
file
.
getPath
(
)
,
"ioerror.no-read"
,
null
)
;
return
false
;
}
return
super
.
insert
(
view
,
buffer
,
path
)
;
}
public
String
_canonPath
(
Object
session
,
String
path
,
Component
comp
)
throws
IOException
{
return
MiscUtilities
.
canonPath
(
path
)
;
}
public
VFS
.
DirectoryEntry
[
]
_listDirectory
(
Object
session
,
String
path
,
Component
comp
)
{
if
(
OperatingSystem
.
isWindows
(
)
)
{
if
(
path
.
length
(
)
==
2
&&
path
.
charAt
(
1
)
==
':'
)
path
=
path
.
concat
(
File
.
separator
)
;
}
File
directory
=
new
File
(
path
)
;
File
[
]
list
=
directory
.
listFiles
(
)
;
if
(
list
==
null
)
{
VFSManager
.
error
(
comp
,
path
,
"ioerror.directory-error-nomsg"
,
null
)
;
return
null
;
}
Vector
list2
=
new
Vector
(
)
;
for
(
int
i
=
0
;
i
<
list
.
length
;
i
++
)
{
File
file
=
list
[
i
]
;
int
type
;
if
(
file
.
isDirectory
(
)
)
type
=
VFS
.
DirectoryEntry
.
DIRECTORY
;
else
type
=
VFS
.
DirectoryEntry
.
FILE
;
list2
.
add
(
new
VFS
.
DirectoryEntry
(
file
.
getName
(
)
,
file
.
getPath
(
)
,
file
.
getPath
(
)
,
type
,
file
.
length
(
)
,
file
.
isHidden
(
)
)
)
;
}
VFS
.
DirectoryEntry
[
]
retVal
=
new
VFS
.
DirectoryEntry
[
list2
.
size
(
)
]
;
list2
.
copyInto
(
retVal
)
;
return
retVal
;
}
public
DirectoryEntry
_getDirectoryEntry
(
Object
session
,
String
path
,
Component
comp
)
{
if
(
path
.
endsWith
(
"/"
)
||
path
.
endsWith
(
File
.
separator
)
)
path
=
path
.
substring
(
0
,
path
.
length
(
)
-
1
)
;
File
file
=
new
File
(
path
)
;
if
(
!
file
.
exists
(
)
)
return
null
;
int
type
;
if
(
file
.
isDirectory
(
)
)
type
=
VFS
.
DirectoryEntry
.
DIRECTORY
;
else
type
=
VFS
.
DirectoryEntry
.
FILE
;
return
new
VFS
.
DirectoryEntry
(
file
.
getName
(
)
,
path
,
path
,
type
,
file
.
length
(
)
,
file
.
isHidden
(
)
)
;
}
public
boolean
_delete
(
Object
session
,
String
path
,
Component
comp
)
{
boolean
retVal
=
new
File
(
path
)
.
delete
(
)
;
if
(
retVal
)
VFSManager
.
sendVFSUpdate
(
this
,
path
,
true
)
;
return
retVal
;
}
public
boolean
_rename
(
Object
session
,
String
from
,
String
to
,
Component
comp
)
{
File
_to
=
new
File
(
to
)
;
if
(
!
from
.
equalsIgnoreCase
(
to
)
)
_to
.
delete
(
)
;
boolean
retVal
=
new
File
(
from
)
.
renameTo
(
_to
)
;
VFSManager
.
sendVFSUpdate
(
this
,
from
,
true
)
;
VFSManager
.
sendVFSUpdate
(
this
,
to
,
true
)
;
return
retVal
;
}
public
boolean
_mkdir
(
Object
session
,
String
directory
,
Component
comp
)
{
boolean
retVal
=
new
File
(
directory
)
.
mkdirs
(
)
;
VFSManager
.
sendVFSUpdate
(
this
,
directory
,
true
)
;
return
retVal
;
}
public
void
_backup
(
Object
session
,
String
path
,
Component
comp
)
throws
IOException
{
int
backups
=
jEdit
.
getIntegerProperty
(
"backups"
,
1
)
;
if
(
backups
==
0
)
return
;
String
backupPrefix
=
jEdit
.
getProperty
(
"backup.prefix"
)
;
String
backupSuffix
=
jEdit
.
getProperty
(
"backup.suffix"
)
;
String
backupDirectory
=
MiscUtilities
.
canonPath
(
jEdit
.
getProperty
(
"backup.directory"
)
)
;
File
file
=
new
File
(
path
)
;
if
(
backupDirectory
==
null
||
backupDirectory
.
length
(
)
==
0
)
backupDirectory
=
file
.
getParent
(
)
;
else
{
backupDirectory
=
MiscUtilities
.
constructPath
(
System
.
getProperty
(
"user.home"
)
,
backupDirectory
)
;
backupDirectory
=
MiscUtilities
.
concatPath
(
backupDirectory
,
file
.
getParent
(
)
)
;
File
dir
=
new
File
(
backupDirectory
)
;
if
(
!
dir
.
exists
(
)
)
dir
.
mkdirs
(
)
;
}
MiscUtilities
.
saveBackup
(
file
,
backups
,
backupPrefix
,
backupSuffix
,
backupDirectory
)
;
}
public
InputStream
_createInputStream
(
Object
session
,
String
path
,
boolean
ignoreErrors
,
Component
comp
)
throws
IOException
{
try
{
return
new
FileInputStream
(
path
)
;
}
catch
(
IOException
io
)
{
if
(
ignoreErrors
)
return
null
;
else
throw
io
;
}
}
public
OutputStream
_createOutputStream
(
Object
session
,
String
path
,
Component
comp
)
throws
IOException
{
OutputStream
retVal
=
new
FileOutputStream
(
path
)
;
return
retVal
;
}
public
void
_saveComplete
(
Object
session
,
Buffer
buffer
,
Component
comp
)
{
int
permissions
=
buffer
.
getIntegerProperty
(
PERMISSIONS_PROPERTY
,
0
)
;
setPermissions
(
buffer
.
getPath
(
)
,
permissions
)
;
}
public
static
int
getPermissions
(
String
path
)
{
int
permissions
=
0
;
if
(
OperatingSystem
.
isUnix
(
)
)
{
String
[
]
cmdarray
=
{
"ls"
,
"-ld"
,
path
}
;
try
{
Process
process
=
Runtime
.
getRuntime
(
)
.
exec
(
cmdarray
)
;
BufferedReader
reader
=
new
BufferedReader
(
new
InputStreamReader
(
process
.
getInputStream
(
)
)
)
;
String
output
=
reader
.
readLine
(
)
;
if
(
output
!=
null
)
{
String
s
=
output
.
substring
(
1
,
10
)
;
if
(
s
.
length
(
)
==
9
)
{
if
(
s
.
charAt
(
0
)
==
'r'
)
permissions
+=
0400
;
if
(
s
.
charAt
(
1
)
==
'w'
)
permissions
+=
0200
;
if
(
s
.
charAt
(
2
)
==
'x'
)
permissions
+=
0100
;
else
if
(
s
.
charAt
(
2
)
==
's'
)
permissions
+=
04100
;
else
if
(
s
.
charAt
(
2
)
==
'S'
)
permissions
+=
04000
;
if
(
s
.
charAt
(
3
)
==
'r'
)
permissions
+=
040
;
if
(
s
.
charAt
(
4
)
==
'w'
)
permissions
+=
020
;
if
(
s
.
charAt
(
5
)
==
'x'
)
permissions
+=
010
;
else
if
(
s
.
charAt
(
5
)
==
's'
)
permissions
+=
02010
;
else
if
(
s
.
charAt
(
5
)
==
'S'
)
permissions
+=
02000
;
if
(
s
.
charAt
(
6
)
==
'r'
)
permissions
+=
04
;
if
(
s
.
charAt
(
7
)
==
'w'
)
permissions
+=
02
;
if
(
s
.
charAt
(
8
)
==
'x'
)
permissions
+=
01
;
else
if
(
s
.
charAt
(
8
)
==
't'
)
permissions
+=
01001
;
else
if
(
s
.
charAt
(
8
)
==
'T'
)
permissions
+=
01000
;
}
}
}
catch
(
Throwable
t
)
{
}
}
return
permissions
;
}
public
static
void
setPermissions
(
String
path
,
int
permissions
)
{
if
(
permissions
!=
0
)
{
if
(
OperatingSystem
.
isUnix
(
)
)
{
String
[
]
cmdarray
=
{
"chmod"
,
Integer
.
toString
(
permissions
,
8
)
,
path
}
;
try
{
Process
process
=
Runtime
.
getRuntime
(
)
.
exec
(
cmdarray
)
;
process
.
getInputStream
(
)
.
close
(
)
;
process
.
getOutputStream
(
)
.
close
(
)
;
process
.
getErrorStream
(
)
.
close
(
)
;
int
exitCode
=
process
.
waitFor
(
)
;
if
(
exitCode
!=
0
)
Log
.
log
(
Log
.
NOTICE
,
FileVFS
.
class
,
"chmod exited with code "
+
exitCode
)
;
}
catch
(
Throwable
t
)
{
}
}
}
}
}
