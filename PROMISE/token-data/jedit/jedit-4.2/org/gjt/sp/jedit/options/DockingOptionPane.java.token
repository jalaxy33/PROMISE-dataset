package
org
.
gjt
.
sp
.
jedit
.
options
;
import
javax
.
swing
.
table
.
*
;
import
javax
.
swing
.
*
;
import
java
.
awt
.
event
.
*
;
import
java
.
awt
.
*
;
import
java
.
util
.
Vector
;
import
org
.
gjt
.
sp
.
jedit
.
gui
.
*
;
import
org
.
gjt
.
sp
.
jedit
.
msg
.
DockableWindowUpdate
;
import
org
.
gjt
.
sp
.
jedit
.
*
;
public
class
DockingOptionPane
extends
AbstractOptionPane
{
public
DockingOptionPane
(
)
{
super
(
"docking"
)
;
}
public
void
_init
(
)
{
setLayout
(
new
BorderLayout
(
)
)
;
add
(
BorderLayout
.
CENTER
,
createWindowTableScroller
(
)
)
;
}
public
void
_save
(
)
{
windowModel
.
save
(
)
;
}
private
JTable
windowTable
;
private
WindowTableModel
windowModel
;
private
JScrollPane
createWindowTableScroller
(
)
{
windowModel
=
createWindowModel
(
)
;
windowTable
=
new
JTable
(
windowModel
)
;
windowTable
.
getTableHeader
(
)
.
setReorderingAllowed
(
false
)
;
windowTable
.
setColumnSelectionAllowed
(
false
)
;
windowTable
.
setRowSelectionAllowed
(
false
)
;
windowTable
.
setCellSelectionEnabled
(
false
)
;
DockPositionCellRenderer
comboBox
=
new
DockPositionCellRenderer
(
)
;
windowTable
.
setRowHeight
(
comboBox
.
getPreferredSize
(
)
.
height
)
;
TableColumn
column
=
windowTable
.
getColumnModel
(
)
.
getColumn
(
1
)
;
column
.
setCellRenderer
(
comboBox
)
;
column
.
setCellEditor
(
new
DefaultCellEditor
(
new
DockPositionCellRenderer
(
)
)
)
;
Dimension
d
=
windowTable
.
getPreferredSize
(
)
;
d
.
height
=
Math
.
min
(
d
.
height
,
50
)
;
JScrollPane
scroller
=
new
JScrollPane
(
windowTable
)
;
scroller
.
setPreferredSize
(
d
)
;
return
scroller
;
}
private
WindowTableModel
createWindowModel
(
)
{
return
new
WindowTableModel
(
)
;
}
class
DockPositionCellRenderer
extends
JComboBox
implements
TableCellRenderer
{
DockPositionCellRenderer
(
)
{
super
(
new
String
[
]
{
DockableWindowManager
.
FLOATING
,
DockableWindowManager
.
TOP
,
DockableWindowManager
.
LEFT
,
DockableWindowManager
.
BOTTOM
,
DockableWindowManager
.
RIGHT
}
)
;
DockPositionCellRenderer
.
this
.
setRequestFocusEnabled
(
false
)
;
}
public
Component
getTableCellRendererComponent
(
JTable
table
,
Object
value
,
boolean
isSelected
,
boolean
hasFocus
,
int
row
,
int
column
)
{
setSelectedItem
(
value
)
;
return
this
;
}
}
}
class
WindowTableModel
extends
AbstractTableModel
{
private
Vector
windows
;
WindowTableModel
(
)
{
windows
=
new
Vector
(
)
;
String
[
]
dockables
=
DockableWindowManager
.
getRegisteredDockableWindows
(
)
;
for
(
int
i
=
0
;
i
<
dockables
.
length
;
i
++
)
{
windows
.
addElement
(
new
Entry
(
dockables
[
i
]
)
)
;
}
sort
(
)
;
}
public
void
sort
(
)
{
MiscUtilities
.
quicksort
(
windows
,
new
WindowCompare
(
)
)
;
fireTableDataChanged
(
)
;
}
public
int
getColumnCount
(
)
{
return
2
;
}
public
int
getRowCount
(
)
{
return
windows
.
size
(
)
;
}
public
Class
getColumnClass
(
int
col
)
{
switch
(
col
)
{
case
0
:
case
1
:
return
String
.
class
;
default
:
throw
new
InternalError
(
)
;
}
}
public
Object
getValueAt
(
int
row
,
int
col
)
{
Entry
window
=
(
Entry
)
windows
.
elementAt
(
row
)
;
switch
(
col
)
{
case
0
:
return
window
.
title
;
case
1
:
return
window
.
dockPosition
;
default
:
throw
new
InternalError
(
)
;
}
}
public
boolean
isCellEditable
(
int
row
,
int
col
)
{
return
(
col
!=
0
)
;
}
public
void
setValueAt
(
Object
value
,
int
row
,
int
col
)
{
if
(
col
==
0
)
return
;
Entry
window
=
(
Entry
)
windows
.
elementAt
(
row
)
;
switch
(
col
)
{
case
1
:
window
.
dockPosition
=
(
String
)
value
;
break
;
default
:
throw
new
InternalError
(
)
;
}
fireTableRowsUpdated
(
row
,
row
)
;
}
public
String
getColumnName
(
int
index
)
{
switch
(
index
)
{
case
0
:
return
jEdit
.
getProperty
(
"options.docking.title"
)
;
case
1
:
return
jEdit
.
getProperty
(
"options.docking.dockPosition"
)
;
default
:
throw
new
InternalError
(
)
;
}
}
public
void
save
(
)
{
for
(
int
i
=
0
;
i
<
windows
.
size
(
)
;
i
++
)
{
(
(
Entry
)
windows
.
elementAt
(
i
)
)
.
save
(
)
;
}
}
class
Entry
{
String
name
;
String
title
;
String
dockPosition
;
Entry
(
String
name
)
{
this
.
name
=
name
;
title
=
jEdit
.
getProperty
(
name
+
".title"
)
;
if
(
title
==
null
)
title
=
name
;
dockPosition
=
jEdit
.
getProperty
(
name
+
".dock-position"
)
;
if
(
dockPosition
==
null
)
dockPosition
=
DockableWindowManager
.
FLOATING
;
}
void
save
(
)
{
jEdit
.
setProperty
(
name
+
".dock-position"
,
dockPosition
)
;
}
}
class
WindowCompare
implements
MiscUtilities
.
Compare
{
public
int
compare
(
Object
obj1
,
Object
obj2
)
{
Entry
e1
=
(
Entry
)
obj1
;
Entry
e2
=
(
Entry
)
obj2
;
return
MiscUtilities
.
compareStrings
(
e1
.
title
,
e2
.
title
,
true
)
;
}
}
}
