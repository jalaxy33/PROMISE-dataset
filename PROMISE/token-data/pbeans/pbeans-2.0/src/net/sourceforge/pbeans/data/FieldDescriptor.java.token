package
net
.
sourceforge
.
pbeans
.
data
;
public
class
FieldDescriptor
{
private
final
String
name
;
private
final
int
sqlType
;
private
final
boolean
nullable
;
private
final
boolean
primaryKey
;
private
final
String
[
]
renamedFrom
;
private
final
boolean
globalReference
;
public
FieldDescriptor
(
String
name
,
int
sqlType
,
boolean
nullable
,
String
[
]
renamedFrom
,
boolean
primaryKey
,
boolean
globalReference
)
{
this
.
name
=
name
;
this
.
sqlType
=
sqlType
;
this
.
nullable
=
nullable
;
this
.
renamedFrom
=
renamedFrom
;
this
.
primaryKey
=
primaryKey
;
this
.
globalReference
=
globalReference
;
}
public
FieldDescriptor
(
String
name
,
int
sqlType
,
boolean
nullable
,
String
renamedFrom
,
boolean
globalReference
)
{
this
(
name
,
sqlType
,
nullable
,
renamedFrom
==
null
?
null
:
new
String
[
]
{
renamedFrom
}
,
false
,
globalReference
)
;
}
public
FieldDescriptor
(
String
name
,
int
sqlType
,
boolean
nullable
)
{
this
(
name
,
sqlType
,
nullable
,
(
String
[
]
)
null
,
false
,
false
)
;
}
public
FieldDescriptor
(
String
name
,
int
sqlType
,
String
[
]
renamedFrom
)
{
this
(
name
,
sqlType
,
true
,
renamedFrom
,
false
,
false
)
;
}
public
FieldDescriptor
(
String
name
,
FieldDescriptor
other
)
{
this
(
name
,
other
.
getSqlType
(
)
,
other
.
isNullable
(
)
,
other
.
getRenamedFrom
(
)
,
other
.
isPrimaryKey
(
)
,
other
.
globalReference
)
;
}
public
FieldDescriptor
(
FieldDescriptor
other
,
String
[
]
renamedFrom
)
{
this
(
other
.
getName
(
)
,
other
.
getSqlType
(
)
,
other
.
isNullable
(
)
,
renamedFrom
,
other
.
isPrimaryKey
(
)
,
other
.
globalReference
)
;
}
public
FieldDescriptor
(
String
name
,
int
sqlType
)
{
this
(
name
,
sqlType
,
true
)
;
}
public
boolean
isGlobalReference
(
)
{
return
this
.
globalReference
;
}
public
boolean
isPrimaryKey
(
)
{
return
this
.
primaryKey
;
}
public
String
getName
(
)
{
return
this
.
name
;
}
public
int
getSqlType
(
)
{
return
this
.
sqlType
;
}
public
boolean
isNullable
(
)
{
return
this
.
nullable
;
}
public
String
[
]
getRenamedFrom
(
)
{
return
this
.
renamedFrom
;
}
boolean
matches
(
AbstractDatabase
ad
,
int
sqlType
,
boolean
nullable
)
{
return
ad
.
typesMatch
(
this
.
sqlType
,
sqlType
)
&&
this
.
nullable
==
nullable
;
}
}
