package
net
.
sourceforge
.
pbeans
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
Criteria
extends
HashMap
{
private
Map
mComparisonOperatorMap
;
private
Operator
mDefaultComparisonOperator
;
private
Map
mLogicalOperatorMap
;
private
LogicalOperator
mDefaultLogicalOperator
;
public
Criteria
(
Map
comparisonoperatorMap
,
Operator
defaultComparisonOperator
)
{
if
(
comparisonoperatorMap
==
null
||
defaultComparisonOperator
==
null
)
{
throw
new
NullPointerException
(
"Criteria creation failed because operator map or default comparison operator was null."
)
;
}
mComparisonOperatorMap
=
comparisonoperatorMap
;
mDefaultComparisonOperator
=
defaultComparisonOperator
;
mLogicalOperatorMap
=
new
HashMap
(
)
;
mDefaultLogicalOperator
=
new
SimpleLogicalOperator
(
"AND NOT"
)
;
}
public
Criteria
(
Map
logicaloperatorMap
,
LogicalOperator
defaultLogicalOperator
)
{
if
(
logicaloperatorMap
==
null
||
defaultLogicalOperator
==
null
)
{
throw
new
NullPointerException
(
"Criteria creation failed because operator map or default logical operator was null."
)
;
}
mComparisonOperatorMap
=
new
HashMap
(
)
;
mDefaultComparisonOperator
=
Operator
.
EQUALS
;
mLogicalOperatorMap
=
logicaloperatorMap
;
mDefaultLogicalOperator
=
defaultLogicalOperator
;
}
public
Criteria
(
Map
comparisonoperatorMap
,
Operator
defaultcomparisonOperator
,
LogicalOperator
defaultLogicalOperator
)
{
if
(
comparisonoperatorMap
==
null
||
defaultLogicalOperator
==
null
||
defaultcomparisonOperator
==
null
)
{
throw
new
NullPointerException
(
"Criteria creation failed because operator map or default comparison/logical operator was null."
)
;
}
mComparisonOperatorMap
=
comparisonoperatorMap
;
mDefaultComparisonOperator
=
defaultcomparisonOperator
;
mLogicalOperatorMap
=
new
HashMap
(
)
;
mDefaultLogicalOperator
=
defaultLogicalOperator
;
}
public
Criteria
(
Map
comparisonoperatorMap
,
Operator
defaultComparisonOperator
,
Map
logicalOperatorMap
,
LogicalOperator
defaultLogicalOperator
)
{
if
(
comparisonoperatorMap
==
null
||
defaultComparisonOperator
==
null
||
defaultLogicalOperator
==
null
||
logicalOperatorMap
==
null
)
{
throw
new
NullPointerException
(
"Criteria creation failed because operator map or default operator was null."
)
;
}
mComparisonOperatorMap
=
comparisonoperatorMap
;
mDefaultComparisonOperator
=
defaultComparisonOperator
;
mLogicalOperatorMap
=
logicalOperatorMap
;
mDefaultLogicalOperator
=
defaultLogicalOperator
;
}
public
Criteria
(
Map
comparisonoperatorMap
)
{
this
(
comparisonoperatorMap
,
Operator
.
EQUALS
)
;
}
public
Criteria
(
)
{
this
(
new
HashMap
(
)
)
;
}
public
Map
getOperatorMap
(
)
{
return
mComparisonOperatorMap
;
}
public
Map
getLogicalOperatorMap
(
)
{
return
mLogicalOperatorMap
;
}
public
Operator
getOperator
(
Object
key
)
{
Operator
operator
=
(
Operator
)
mComparisonOperatorMap
.
get
(
key
)
;
if
(
operator
==
null
)
{
return
mDefaultComparisonOperator
;
}
return
operator
;
}
public
Operator
putOperator
(
Object
key
,
Operator
operator
)
{
return
(
Operator
)
mComparisonOperatorMap
.
put
(
key
,
operator
)
;
}
public
Operator
removeOperator
(
Object
key
)
{
return
(
Operator
)
mComparisonOperatorMap
.
remove
(
key
)
;
}
public
LogicalOperator
getLogicalOperator
(
Object
key
)
{
LogicalOperator
operator
=
(
LogicalOperator
)
mLogicalOperatorMap
.
get
(
key
)
;
if
(
operator
==
null
)
{
return
mDefaultLogicalOperator
;
}
return
operator
;
}
public
LogicalOperator
putLogicalOperator
(
Object
key
,
LogicalOperator
operator
)
{
return
(
LogicalOperator
)
mLogicalOperatorMap
.
put
(
key
,
operator
)
;
}
public
LogicalOperator
removeLogicalOperator
(
Object
key
)
{
return
(
LogicalOperator
)
mLogicalOperatorMap
.
remove
(
key
)
;
}
public
Object
put
(
Object
key
,
Object
value
,
Operator
operator
)
{
putOperator
(
key
,
operator
)
;
return
put
(
key
,
value
)
;
}
public
Object
put
(
Object
key
,
Object
value
,
LogicalOperator
logicalOperator
)
{
putLogicalOperator
(
key
,
logicalOperator
)
;
return
put
(
key
,
value
)
;
}
public
Object
put
(
Object
key
,
Object
value
,
Operator
operator
,
LogicalOperator
logicalOperator
)
{
putLogicalOperator
(
key
,
logicalOperator
)
;
putOperator
(
key
,
operator
)
;
return
put
(
key
,
value
)
;
}
public
Object
remove
(
Object
key
)
{
removeOperator
(
key
)
;
removeLogicalOperator
(
key
)
;
return
super
.
remove
(
key
)
;
}
public
LogicalOperator
getDefaultLogicalOperator
(
)
{
return
mDefaultLogicalOperator
;
}
public
Operator
getDefaultComparisonOperator
(
)
{
return
mDefaultComparisonOperator
;
}
}
