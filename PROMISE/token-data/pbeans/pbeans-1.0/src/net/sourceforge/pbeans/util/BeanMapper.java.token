package
net
.
sourceforge
.
pbeans
.
util
;
import
java
.
beans
.
*
;
import
java
.
util
.
*
;
import
java
.
lang
.
reflect
.
*
;
import
net
.
sourceforge
.
pbeans
.
*
;
public
class
BeanMapper
{
public
static
void
populateBean
(
Object
bean
,
Map
propertyValues
)
throws
IntrospectionException
,
IllegalAccessException
,
InvocationTargetException
{
populateBean
(
bean
,
propertyValues
,
false
)
;
}
public
static
void
populateBean
(
Object
bean
,
Map
propertyValues
,
boolean
setNullValues
)
throws
IntrospectionException
,
IllegalAccessException
,
InvocationTargetException
{
BeanInfo
binfo
=
Introspector
.
getBeanInfo
(
bean
.
getClass
(
)
)
;
PropertyDescriptor
[
]
pds
=
binfo
.
getPropertyDescriptors
(
)
;
for
(
int
i
=
0
;
i
<
pds
.
length
;
i
++
)
{
PropertyDescriptor
pd
=
pds
[
i
]
;
String
propName
=
pd
.
getName
(
)
;
Object
dbValue
=
propertyValues
.
get
(
propName
)
;
Method
setter
=
pd
.
getWriteMethod
(
)
;
if
(
setter
!=
null
)
{
if
(
dbValue
!=
null
||
setNullValues
)
{
if
(
dbValue
==
null
&&
pd
.
getPropertyType
(
)
.
isPrimitive
(
)
)
{
throw
new
IllegalArgumentException
(
"Null property value for primitive property "
+
propName
)
;
}
setter
.
invoke
(
bean
,
new
Object
[
]
{
dbValue
}
)
;
}
}
}
}
}
