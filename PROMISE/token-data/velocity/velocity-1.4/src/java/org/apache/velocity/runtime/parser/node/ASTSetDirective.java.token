package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventCartridge
;
public
class
ASTSetDirective
extends
SimpleNode
{
private
String
leftReference
=
""
;
private
Node
right
;
private
ASTReference
left
;
boolean
blather
=
false
;
public
ASTSetDirective
(
int
id
)
{
super
(
id
)
;
}
public
ASTSetDirective
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
Exception
{
super
.
init
(
context
,
data
)
;
right
=
getRightHandSide
(
)
;
left
=
getLeftHandSide
(
)
;
blather
=
rsvc
.
getBoolean
(
RuntimeConstants
.
RUNTIME_LOG_REFERENCE_LOG_INVALID
,
true
)
;
leftReference
=
left
.
getFirstToken
(
)
.
image
.
substring
(
1
)
;
return
data
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
)
throws
IOException
,
MethodInvocationException
{
Object
value
=
right
.
value
(
context
)
;
if
(
value
==
null
)
{
if
(
blather
)
{
EventCartridge
ec
=
context
.
getEventCartridge
(
)
;
boolean
doit
=
true
;
if
(
ec
!=
null
)
{
doit
=
ec
.
shouldLogOnNullSet
(
left
.
literal
(
)
,
right
.
literal
(
)
)
;
}
if
(
doit
)
{
rsvc
.
error
(
"RHS of #set statement is null. Context will not be modified. "
+
context
.
getCurrentTemplateName
(
)
+
" [line "
+
getLine
(
)
+
", column "
+
getColumn
(
)
+
"]"
)
;
}
}
return
false
;
}
if
(
left
.
jjtGetNumChildren
(
)
==
0
)
{
context
.
put
(
leftReference
,
value
)
;
}
else
{
left
.
setValue
(
context
,
value
)
;
}
return
true
;
}
private
ASTReference
getLeftHandSide
(
)
{
return
(
ASTReference
)
jjtGetChild
(
0
)
;
}
private
Node
getRightHandSide
(
)
{
return
jjtGetChild
(
1
)
;
}
}
