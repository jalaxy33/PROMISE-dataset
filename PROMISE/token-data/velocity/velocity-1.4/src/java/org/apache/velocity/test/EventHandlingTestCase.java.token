package
org
.
apache
.
velocity
.
test
;
import
java
.
io
.
StringWriter
;
import
junit
.
framework
.
TestCase
;
import
org
.
apache
.
velocity
.
app
.
Velocity
;
import
org
.
apache
.
velocity
.
VelocityContext
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
LogSystem
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventCartridge
;
import
org
.
apache
.
velocity
.
app
.
event
.
ReferenceInsertionEventHandler
;
import
org
.
apache
.
velocity
.
app
.
event
.
MethodExceptionEventHandler
;
import
org
.
apache
.
velocity
.
app
.
event
.
NullSetEventHandler
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
public
class
EventHandlingTestCase
extends
TestCase
implements
ReferenceInsertionEventHandler
,
NullSetEventHandler
,
MethodExceptionEventHandler
,
LogSystem
{
private
String
logString
=
null
;
private
boolean
exceptionSwitch
=
true
;
private
static
String
NO_REFERENCE_VALUE
=
"<no reference value>"
;
private
static
String
REFERENCE_VALUE
=
"<reference value>"
;
public
EventHandlingTestCase
(
)
{
super
(
"EventHandlingTestCase"
)
;
try
{
Velocity
.
setProperty
(
Velocity
.
RUNTIME_LOG_LOGSYSTEM
,
this
)
;
Velocity
.
init
(
)
;
}
catch
(
Exception
e
)
{
System
.
err
.
println
(
"Cannot setup event handling test : "
+
e
)
;
System
.
exit
(
1
)
;
}
}
public
void
init
(
RuntimeServices
rs
)
{
}
public
static
junit
.
framework
.
Test
suite
(
)
{
return
new
EventHandlingTestCase
(
)
;
}
public
void
runTest
(
)
{
VelocityContext
inner
=
new
VelocityContext
(
)
;
EventCartridge
ec
=
new
EventCartridge
(
)
;
ec
.
addEventHandler
(
this
)
;
ec
.
attachToContext
(
inner
)
;
VelocityContext
context
=
new
VelocityContext
(
inner
)
;
context
.
put
(
"name"
,
"Velocity"
)
;
try
{
String
s
=
"$name"
;
StringWriter
w
=
new
StringWriter
(
)
;
Velocity
.
evaluate
(
context
,
w
,
"mystring"
,
s
)
;
if
(
!
w
.
toString
(
)
.
equals
(
REFERENCE_VALUE
)
)
{
fail
(
"Reference insertion test 1"
)
;
}
s
=
"$floobie"
;
w
=
new
StringWriter
(
)
;
Velocity
.
evaluate
(
context
,
w
,
"mystring"
,
s
)
;
if
(
!
w
.
toString
(
)
.
equals
(
NO_REFERENCE_VALUE
)
)
{
fail
(
"Reference insertion test 2"
)
;
}
s
=
"#set($settest = $NotAReference)"
;
w
=
new
StringWriter
(
)
;
logString
=
null
;
Velocity
.
evaluate
(
context
,
w
,
"mystring"
,
s
)
;
if
(
logString
!=
null
)
{
fail
(
"NullSetEventHandler test 1"
)
;
}
s
=
"#set($logthis = $NotAReference)"
;
w
=
new
StringWriter
(
)
;
logString
=
null
;
Velocity
.
evaluate
(
context
,
w
,
"mystring"
,
s
)
;
if
(
logString
==
null
)
{
fail
(
"NullSetEventHandler test 1"
)
;
}
exceptionSwitch
=
true
;
context
.
put
(
"this"
,
this
)
;
s
=
" $this.throwException()"
;
w
=
new
StringWriter
(
)
;
try
{
Velocity
.
evaluate
(
context
,
w
,
"mystring"
,
s
)
;
}
catch
(
MethodInvocationException
mee
)
{
fail
(
"MethodExceptionEvent test 1"
)
;
}
catch
(
Exception
e
)
{
fail
(
"MethodExceptionEvent test 1"
)
;
}
exceptionSwitch
=
false
;
s
=
" $this.throwException()"
;
w
=
new
StringWriter
(
)
;
try
{
Velocity
.
evaluate
(
context
,
w
,
"mystring"
,
s
)
;
fail
(
"MethodExceptionEvent test 2"
)
;
}
catch
(
MethodInvocationException
mee
)
{
}
catch
(
Exception
e
)
{
fail
(
"MethodExceptionEvent test 2"
)
;
}
}
catch
(
ParseErrorException
pee
)
{
fail
(
"ParseErrorException"
+
pee
)
;
}
catch
(
MethodInvocationException
mee
)
{
fail
(
"MethodInvocationException"
+
mee
)
;
}
catch
(
Exception
e
)
{
fail
(
"Exception"
+
e
)
;
}
}
public
void
throwException
(
)
throws
Exception
{
throw
new
Exception
(
"Hello from throwException()"
)
;
}
public
Object
referenceInsert
(
String
reference
,
Object
value
)
{
String
s
=
null
;
if
(
value
!=
null
)
{
s
=
REFERENCE_VALUE
;
}
else
{
if
(
reference
.
equals
(
"$floobie"
)
)
{
s
=
NO_REFERENCE_VALUE
;
}
}
return
s
;
}
public
boolean
shouldLogOnNullSet
(
String
lhs
,
String
rhs
)
{
if
(
lhs
.
equals
(
"$settest"
)
)
return
false
;
return
true
;
}
public
Object
methodException
(
Class
claz
,
String
method
,
Exception
e
)
throws
Exception
{
if
(
exceptionSwitch
&&
method
.
equals
(
"throwException"
)
)
{
return
"handler"
;
}
throw
e
;
}
public
void
logVelocityMessage
(
int
level
,
String
message
)
{
logString
=
message
;
}
}
