package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
*
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
IntrospectionCacheData
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
VelMethod
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Info
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventCartridge
;
public
class
ASTMethod
extends
SimpleNode
{
private
String
methodName
=
""
;
private
int
paramCount
=
0
;
public
ASTMethod
(
int
id
)
{
super
(
id
)
;
}
public
ASTMethod
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
Exception
{
super
.
init
(
context
,
data
)
;
methodName
=
getFirstToken
(
)
.
image
;
paramCount
=
jjtGetNumChildren
(
)
-
1
;
return
data
;
}
public
Object
execute
(
Object
o
,
InternalContextAdapter
context
)
throws
MethodInvocationException
{
VelMethod
method
=
null
;
Object
[
]
params
=
new
Object
[
paramCount
]
;
try
{
IntrospectionCacheData
icd
=
context
.
icacheGet
(
this
)
;
Class
c
=
o
.
getClass
(
)
;
if
(
icd
!=
null
&&
icd
.
contextData
==
c
)
{
for
(
int
j
=
0
;
j
<
paramCount
;
j
++
)
params
[
j
]
=
jjtGetChild
(
j
+
1
)
.
value
(
context
)
;
method
=
(
VelMethod
)
icd
.
thingy
;
}
else
{
for
(
int
j
=
0
;
j
<
paramCount
;
j
++
)
params
[
j
]
=
jjtGetChild
(
j
+
1
)
.
value
(
context
)
;
method
=
rsvc
.
getUberspect
(
)
.
getMethod
(
o
,
methodName
,
params
,
new
Info
(
""
,
1
,
1
)
)
;
if
(
method
!=
null
)
{
icd
=
new
IntrospectionCacheData
(
)
;
icd
.
contextData
=
c
;
icd
.
thingy
=
method
;
context
.
icachePut
(
this
,
icd
)
;
}
}
if
(
method
==
null
)
return
null
;
}
catch
(
MethodInvocationException
mie
)
{
throw
mie
;
}
catch
(
Exception
e
)
{
rsvc
.
error
(
"ASTMethod.execute() : exception from introspection : "
+
e
)
;
return
null
;
}
try
{
Object
obj
=
method
.
invoke
(
o
,
params
)
;
if
(
obj
==
null
)
{
if
(
method
.
getReturnType
(
)
==
Void
.
TYPE
)
return
new
String
(
""
)
;
}
return
obj
;
}
catch
(
InvocationTargetException
ite
)
{
EventCartridge
ec
=
context
.
getEventCartridge
(
)
;
if
(
ec
!=
null
&&
ite
.
getTargetException
(
)
instanceof
java
.
lang
.
Exception
)
{
try
{
return
ec
.
methodException
(
o
.
getClass
(
)
,
methodName
,
(
Exception
)
ite
.
getTargetException
(
)
)
;
}
catch
(
Exception
e
)
{
throw
new
MethodInvocationException
(
"Invocation of method '"
+
methodName
+
"' in  "
+
o
.
getClass
(
)
+
" threw exception "
+
e
.
getClass
(
)
+
" : "
+
e
.
getMessage
(
)
,
e
,
methodName
)
;
}
}
else
{
throw
new
MethodInvocationException
(
"Invocation of method '"
+
methodName
+
"' in  "
+
o
.
getClass
(
)
+
" threw exception "
+
ite
.
getTargetException
(
)
.
getClass
(
)
+
" : "
+
ite
.
getTargetException
(
)
.
getMessage
(
)
,
ite
.
getTargetException
(
)
,
methodName
)
;
}
}
catch
(
Exception
e
)
{
rsvc
.
error
(
"ASTMethod.execute() : exception invoking method '"
+
methodName
+
"' in "
+
o
.
getClass
(
)
+
" : "
+
e
)
;
return
null
;
}
}
}
