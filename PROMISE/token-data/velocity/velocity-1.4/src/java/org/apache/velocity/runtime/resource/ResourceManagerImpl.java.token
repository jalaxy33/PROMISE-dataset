package
org
.
apache
.
velocity
.
runtime
.
resource
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
IOException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
ResourceFactory
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
loader
.
ResourceLoader
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
loader
.
ResourceLoaderFactory
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
commons
.
collections
.
ExtendedProperties
;
public
class
ResourceManagerImpl
implements
ResourceManager
{
public
static
final
int
RESOURCE_TEMPLATE
=
1
;
public
static
final
int
RESOURCE_CONTENT
=
2
;
private
static
final
String
RESOURCE_LOADER_IDENTIFIER
=
"_RESOURCE_LOADER_IDENTIFIER_"
;
protected
ResourceCache
globalCache
=
null
;
protected
ArrayList
resourceLoaders
=
new
ArrayList
(
)
;
private
ArrayList
sourceInitializerList
=
new
ArrayList
(
)
;
private
Hashtable
sourceInitializerMap
=
new
Hashtable
(
)
;
private
boolean
resourceLoaderInitializersActive
=
false
;
private
boolean
logWhenFound
=
true
;
protected
RuntimeServices
rsvc
=
null
;
public
void
initialize
(
RuntimeServices
rs
)
throws
Exception
{
rsvc
=
rs
;
rsvc
.
info
(
"Default ResourceManager initializing. ("
+
this
.
getClass
(
)
+
")"
)
;
ResourceLoader
resourceLoader
;
assembleResourceLoaderInitializers
(
)
;
for
(
int
i
=
0
;
i
<
sourceInitializerList
.
size
(
)
;
i
++
)
{
ExtendedProperties
configuration
=
(
ExtendedProperties
)
sourceInitializerList
.
get
(
i
)
;
String
loaderClass
=
configuration
.
getString
(
"class"
)
;
if
(
loaderClass
==
null
)
{
rsvc
.
error
(
"Unable to find '"
+
configuration
.
getString
(
RESOURCE_LOADER_IDENTIFIER
)
+
".resource.loader.class' specification in configuation."
+
" This is a critical value.  Please adjust configuration."
)
;
continue
;
}
resourceLoader
=
ResourceLoaderFactory
.
getLoader
(
rsvc
,
loaderClass
)
;
resourceLoader
.
commonInit
(
rsvc
,
configuration
)
;
resourceLoader
.
init
(
configuration
)
;
resourceLoaders
.
add
(
resourceLoader
)
;
}
logWhenFound
=
rsvc
.
getBoolean
(
RuntimeConstants
.
RESOURCE_MANAGER_LOGWHENFOUND
,
true
)
;
String
claz
=
rsvc
.
getString
(
RuntimeConstants
.
RESOURCE_MANAGER_CACHE_CLASS
)
;
Object
o
=
null
;
if
(
claz
!=
null
&&
claz
.
length
(
)
>
0
)
{
try
{
o
=
Class
.
forName
(
claz
)
.
newInstance
(
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
String
err
=
"The specified class for ResourceCache ("
+
claz
+
") does not exist (or is not accessible to the current classlaoder)."
;
rsvc
.
error
(
err
)
;
o
=
null
;
}
if
(
!
(
o
instanceof
ResourceCache
)
)
{
String
err
=
"The specified class for ResourceCache ("
+
claz
+
") does not implement org.apache.runtime.resource.ResourceCache."
+
" ResourceManager. Using default ResourceCache implementation."
;
rsvc
.
error
(
err
)
;
o
=
null
;
}
}
if
(
o
==
null
)
o
=
new
ResourceCacheImpl
(
)
;
globalCache
=
(
ResourceCache
)
o
;
globalCache
.
initialize
(
rsvc
)
;
rsvc
.
info
(
"Default ResourceManager initialization complete."
)
;
}
private
void
assembleResourceLoaderInitializers
(
)
{
if
(
resourceLoaderInitializersActive
)
{
return
;
}
Vector
resourceLoaderNames
=
rsvc
.
getConfiguration
(
)
.
getVector
(
RuntimeConstants
.
RESOURCE_LOADER
)
;
for
(
int
i
=
0
;
i
<
resourceLoaderNames
.
size
(
)
;
i
++
)
{
String
loaderID
=
resourceLoaderNames
.
get
(
i
)
+
"."
+
RuntimeConstants
.
RESOURCE_LOADER
;
ExtendedProperties
loaderConfiguration
=
rsvc
.
getConfiguration
(
)
.
subset
(
loaderID
)
;
if
(
loaderConfiguration
==
null
)
{
rsvc
.
warn
(
"ResourceManager : No configuration information for resource loader named '"
+
resourceLoaderNames
.
get
(
i
)
+
"'. Skipping."
)
;
continue
;
}
loaderConfiguration
.
setProperty
(
RESOURCE_LOADER_IDENTIFIER
,
resourceLoaderNames
.
get
(
i
)
)
;
sourceInitializerList
.
add
(
loaderConfiguration
)
;
}
resourceLoaderInitializersActive
=
true
;
}
public
Resource
getResource
(
String
resourceName
,
int
resourceType
,
String
encoding
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
Resource
resource
=
globalCache
.
get
(
resourceName
)
;
if
(
resource
!=
null
)
{
try
{
refreshResource
(
resource
,
encoding
)
;
}
catch
(
ResourceNotFoundException
rnfe
)
{
globalCache
.
remove
(
resourceName
)
;
return
getResource
(
resourceName
,
resourceType
,
encoding
)
;
}
catch
(
ParseErrorException
pee
)
{
rsvc
.
error
(
"ResourceManager.getResource() exception: "
+
pee
)
;
throw
pee
;
}
catch
(
Exception
eee
)
{
rsvc
.
error
(
"ResourceManager.getResource() exception: "
+
eee
)
;
throw
eee
;
}
}
else
{
try
{
resource
=
loadResource
(
resourceName
,
resourceType
,
encoding
)
;
if
(
resource
.
getResourceLoader
(
)
.
isCachingOn
(
)
)
{
globalCache
.
put
(
resourceName
,
resource
)
;
}
}
catch
(
ResourceNotFoundException
rnfe2
)
{
rsvc
.
error
(
"ResourceManager : unable to find resource '"
+
resourceName
+
"' in any resource loader."
)
;
throw
rnfe2
;
}
catch
(
ParseErrorException
pee
)
{
rsvc
.
error
(
"ResourceManager.getResource() parse exception: "
+
pee
)
;
throw
pee
;
}
catch
(
Exception
ee
)
{
rsvc
.
error
(
"ResourceManager.getResource() exception new: "
+
ee
)
;
throw
ee
;
}
}
return
resource
;
}
protected
Resource
loadResource
(
String
resourceName
,
int
resourceType
,
String
encoding
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
Resource
resource
=
ResourceFactory
.
getResource
(
resourceName
,
resourceType
)
;
resource
.
setRuntimeServices
(
rsvc
)
;
resource
.
setName
(
resourceName
)
;
resource
.
setEncoding
(
encoding
)
;
long
howOldItWas
=
0
;
ResourceLoader
resourceLoader
=
null
;
for
(
int
i
=
0
;
i
<
resourceLoaders
.
size
(
)
;
i
++
)
{
resourceLoader
=
(
ResourceLoader
)
resourceLoaders
.
get
(
i
)
;
resource
.
setResourceLoader
(
resourceLoader
)
;
try
{
if
(
resource
.
process
(
)
)
{
if
(
logWhenFound
)
{
rsvc
.
info
(
"ResourceManager : found "
+
resourceName
+
" with loader "
+
resourceLoader
.
getClassName
(
)
)
;
}
howOldItWas
=
resourceLoader
.
getLastModified
(
resource
)
;
break
;
}
}
catch
(
ResourceNotFoundException
rnfe
)
{
}
}
if
(
resource
.
getData
(
)
==
null
)
{
throw
new
ResourceNotFoundException
(
"Unable to find resource '"
+
resourceName
+
"'"
)
;
}
resource
.
setLastModified
(
howOldItWas
)
;
resource
.
setModificationCheckInterval
(
resourceLoader
.
getModificationCheckInterval
(
)
)
;
resource
.
touch
(
)
;
return
resource
;
}
protected
void
refreshResource
(
Resource
resource
,
String
encoding
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
if
(
resource
.
requiresChecking
(
)
)
{
resource
.
touch
(
)
;
if
(
resource
.
isSourceModified
(
)
)
{
if
(
!
resource
.
getEncoding
(
)
.
equals
(
encoding
)
)
{
rsvc
.
error
(
"Declared encoding for template '"
+
resource
.
getName
(
)
+
"' is different on reload.  Old = '"
+
resource
.
getEncoding
(
)
+
"'  New = '"
+
encoding
)
;
resource
.
setEncoding
(
encoding
)
;
}
long
howOldItWas
=
resource
.
getResourceLoader
(
)
.
getLastModified
(
resource
)
;
resource
.
process
(
)
;
resource
.
setLastModified
(
howOldItWas
)
;
}
}
}
public
Resource
getResource
(
String
resourceName
,
int
resourceType
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
return
getResource
(
resourceName
,
resourceType
,
RuntimeConstants
.
ENCODING_DEFAULT
)
;
}
public
String
getLoaderNameForResource
(
String
resourceName
)
{
ResourceLoader
resourceLoader
=
null
;
for
(
int
i
=
0
;
i
<
resourceLoaders
.
size
(
)
;
i
++
)
{
resourceLoader
=
(
ResourceLoader
)
resourceLoaders
.
get
(
i
)
;
InputStream
is
=
null
;
try
{
is
=
resourceLoader
.
getResourceStream
(
resourceName
)
;
if
(
is
!=
null
)
{
return
resourceLoader
.
getClass
(
)
.
toString
(
)
;
}
}
catch
(
ResourceNotFoundException
e
)
{
}
finally
{
if
(
is
!=
null
)
{
try
{
is
.
close
(
)
;
}
catch
(
IOException
ioe
)
{
}
}
}
}
return
null
;
}
}
