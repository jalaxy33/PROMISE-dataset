package
org
.
apache
.
velocity
.
test
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
Writer
;
import
java
.
io
.
File
;
import
java
.
util
.
Properties
;
import
org
.
apache
.
velocity
.
Template
;
import
org
.
apache
.
velocity
.
app
.
Velocity
;
import
org
.
apache
.
velocity
.
VelocityContext
;
import
org
.
apache
.
velocity
.
test
.
provider
.
TestProvider
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
import
org
.
apache
.
velocity
.
runtime
.
VelocimacroFactory
;
import
junit
.
framework
.
TestCase
;
public
class
MultiLoaderTestCase
extends
BaseTestCase
{
private
static
final
String
TMPL_FILE_EXT
=
"vm"
;
private
static
final
String
CMP_FILE_EXT
=
"cmp"
;
private
static
final
String
RESULT_FILE_EXT
=
"res"
;
private
static
final
String
RESULTS_DIR
=
"../test/multiloader/results"
;
private
final
static
String
FILE_RESOURCE_LOADER_PATH
=
"../test/multiloader"
;
private
static
final
String
COMPARE_DIR
=
"../test/multiloader/compare"
;
public
MultiLoaderTestCase
(
)
{
super
(
"MultiLoaderTestCase"
)
;
try
{
assureResultsDirectoryExists
(
RESULTS_DIR
)
;
Velocity
.
setProperty
(
Velocity
.
RESOURCE_LOADER
,
"file"
)
;
Velocity
.
setProperty
(
Velocity
.
FILE_RESOURCE_LOADER_PATH
,
FILE_RESOURCE_LOADER_PATH
)
;
Velocity
.
addProperty
(
Velocity
.
RESOURCE_LOADER
,
"classpath"
)
;
Velocity
.
addProperty
(
Velocity
.
RESOURCE_LOADER
,
"jar"
)
;
Velocity
.
setProperty
(
"classpath."
+
Velocity
.
RESOURCE_LOADER
+
".class"
,
"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader"
)
;
Velocity
.
setProperty
(
"classpath."
+
Velocity
.
RESOURCE_LOADER
+
".cache"
,
"false"
)
;
Velocity
.
setProperty
(
"classpath."
+
Velocity
.
RESOURCE_LOADER
+
".modificationCheckInterval"
,
"2"
)
;
Velocity
.
setProperty
(
"jar."
+
Velocity
.
RESOURCE_LOADER
+
".class"
,
"org.apache.velocity.runtime.resource.loader.JarResourceLoader"
)
;
Velocity
.
setProperty
(
"jar."
+
Velocity
.
RESOURCE_LOADER
+
".path"
,
"jar:file:"
+
FILE_RESOURCE_LOADER_PATH
+
"/test2.jar"
)
;
Velocity
.
init
(
)
;
}
catch
(
Exception
e
)
{
System
.
err
.
println
(
"Cannot setup MultiLoaderTestCase!"
)
;
e
.
printStackTrace
(
)
;
System
.
exit
(
1
)
;
}
}
public
static
junit
.
framework
.
Test
suite
(
)
{
return
new
MultiLoaderTestCase
(
)
;
}
public
void
runTest
(
)
{
try
{
assureResultsDirectoryExists
(
RESULTS_DIR
)
;
Template
template1
=
Velocity
.
getTemplate
(
getFileName
(
null
,
"path1"
,
TMPL_FILE_EXT
)
)
;
Template
template2
=
Velocity
.
getTemplate
(
getFileName
(
null
,
"template/test1"
,
TMPL_FILE_EXT
)
)
;
Template
template3
=
Velocity
.
getTemplate
(
getFileName
(
null
,
"template/test2"
,
TMPL_FILE_EXT
)
)
;
FileOutputStream
fos1
=
new
FileOutputStream
(
getFileName
(
RESULTS_DIR
,
"path1"
,
RESULT_FILE_EXT
)
)
;
FileOutputStream
fos2
=
new
FileOutputStream
(
getFileName
(
RESULTS_DIR
,
"test2"
,
RESULT_FILE_EXT
)
)
;
FileOutputStream
fos3
=
new
FileOutputStream
(
getFileName
(
RESULTS_DIR
,
"test3"
,
RESULT_FILE_EXT
)
)
;
Writer
writer1
=
new
BufferedWriter
(
new
OutputStreamWriter
(
fos1
)
)
;
Writer
writer2
=
new
BufferedWriter
(
new
OutputStreamWriter
(
fos2
)
)
;
Writer
writer3
=
new
BufferedWriter
(
new
OutputStreamWriter
(
fos3
)
)
;
VelocityContext
context
=
new
VelocityContext
(
)
;
template1
.
merge
(
context
,
writer1
)
;
writer1
.
flush
(
)
;
writer1
.
close
(
)
;
template2
.
merge
(
context
,
writer2
)
;
writer2
.
flush
(
)
;
writer2
.
close
(
)
;
template3
.
merge
(
context
,
writer3
)
;
writer3
.
flush
(
)
;
writer3
.
close
(
)
;
if
(
!
isMatch
(
RESULTS_DIR
,
COMPARE_DIR
,
"path1"
,
RESULT_FILE_EXT
,
CMP_FILE_EXT
)
)
{
fail
(
"Output incorrect for FileResourceLoader test."
)
;
}
if
(
!
isMatch
(
RESULTS_DIR
,
COMPARE_DIR
,
"test2"
,
RESULT_FILE_EXT
,
CMP_FILE_EXT
)
)
{
fail
(
"Output incorrect for ClasspathResourceLoader test."
)
;
}
if
(
!
isMatch
(
RESULTS_DIR
,
COMPARE_DIR
,
"test3"
,
RESULT_FILE_EXT
,
CMP_FILE_EXT
)
)
{
fail
(
"Output incorrect for JarResourceLoader test."
)
;
}
}
catch
(
Exception
e
)
{
fail
(
e
.
getMessage
(
)
)
;
}
}
}
