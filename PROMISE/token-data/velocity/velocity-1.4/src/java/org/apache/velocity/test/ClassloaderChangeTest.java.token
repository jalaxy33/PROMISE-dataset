package
org
.
apache
.
velocity
.
test
;
import
java
.
lang
.
ClassLoader
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
StringWriter
;
import
org
.
apache
.
velocity
.
app
.
VelocityEngine
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
VelocityContext
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
LogSystem
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Introspector
;
import
junit
.
framework
.
TestCase
;
public
class
ClassloaderChangeTest
extends
TestCase
implements
LogSystem
{
private
VelocityEngine
ve
=
null
;
private
boolean
sawCacheDump
=
false
;
private
static
String
OUTPUT
=
"Hello From Foo"
;
public
ClassloaderChangeTest
(
)
{
super
(
"ClassloaderChangeTest"
)
;
try
{
ve
=
new
VelocityEngine
(
)
;
ve
.
setProperty
(
VelocityEngine
.
RUNTIME_LOG_LOGSYSTEM
,
this
)
;
ve
.
init
(
)
;
}
catch
(
Exception
e
)
{
System
.
err
.
println
(
"Cannot setup ClassloaderChnageTest : "
+
e
)
;
System
.
exit
(
1
)
;
}
}
public
void
init
(
RuntimeServices
rs
)
{
}
public
static
junit
.
framework
.
Test
suite
(
)
{
return
new
ClassloaderChangeTest
(
)
;
}
public
void
runTest
(
)
{
sawCacheDump
=
false
;
try
{
VelocityContext
vc
=
new
VelocityContext
(
)
;
Object
foo
=
null
;
TestClassloader
cl
=
new
TestClassloader
(
)
;
Class
fooclass
=
cl
.
loadClass
(
"Foo"
)
;
foo
=
fooclass
.
newInstance
(
)
;
vc
.
put
(
"foo"
,
foo
)
;
StringWriter
writer
=
new
StringWriter
(
)
;
ve
.
evaluate
(
vc
,
writer
,
"test"
,
"$foo.doIt()"
)
;
if
(
!
writer
.
toString
(
)
.
equals
(
OUTPUT
)
)
{
fail
(
"Output from doIt() incorrect"
)
;
}
cl
=
new
TestClassloader
(
)
;
fooclass
=
cl
.
loadClass
(
"Foo"
)
;
foo
=
fooclass
.
newInstance
(
)
;
vc
.
put
(
"foo"
,
foo
)
;
writer
=
new
StringWriter
(
)
;
ve
.
evaluate
(
vc
,
writer
,
"test"
,
"$foo.doIt()"
)
;
if
(
!
writer
.
toString
(
)
.
equals
(
OUTPUT
)
)
{
fail
(
"Output from doIt() incorrect"
)
;
}
}
catch
(
Exception
ee
)
{
System
.
out
.
println
(
"ClassloaderChangeTest : "
+
ee
)
;
}
if
(
!
sawCacheDump
)
{
fail
(
"Didn't see introspector cache dump."
)
;
}
}
public
void
logVelocityMessage
(
int
level
,
String
message
)
{
if
(
message
.
equals
(
Introspector
.
CACHEDUMP_MSG
)
)
{
sawCacheDump
=
true
;
}
}
}
class
TestClassloader
extends
ClassLoader
{
private
final
static
String
testclass
=
"../test/classloader/Foo.class"
;
private
Class
fooClass
=
null
;
public
TestClassloader
(
)
{
try
{
File
f
=
new
File
(
testclass
)
;
byte
[
]
barr
=
new
byte
[
(
int
)
f
.
length
(
)
]
;
FileInputStream
fis
=
new
FileInputStream
(
f
)
;
fis
.
read
(
barr
)
;
fis
.
close
(
)
;
fooClass
=
defineClass
(
"Foo"
,
barr
,
0
,
barr
.
length
)
;
}
catch
(
Exception
e
)
{
System
.
out
.
println
(
"TestClassloader : exception : "
+
e
)
;
}
}
public
Class
findClass
(
String
name
)
{
return
fooClass
;
}
}
