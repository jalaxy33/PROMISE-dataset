package
org
.
apache
.
velocity
.
app
;
import
java
.
io
.
Writer
;
import
java
.
util
.
Properties
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Reader
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
StringReader
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
UnsupportedEncodingException
;
import
org
.
apache
.
velocity
.
context
.
Context
;
import
org
.
apache
.
velocity
.
Template
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapterImpl
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeInstance
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
SimpleNode
;
import
org
.
apache
.
velocity
.
runtime
.
configuration
.
Configuration
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParseException
;
import
org
.
apache
.
commons
.
collections
.
ExtendedProperties
;
public
class
VelocityEngine
implements
RuntimeConstants
{
private
RuntimeInstance
ri
=
new
RuntimeInstance
(
)
;
public
void
init
(
)
throws
Exception
{
ri
.
init
(
)
;
}
public
void
init
(
String
propsFilename
)
throws
Exception
{
ri
.
init
(
propsFilename
)
;
}
public
void
init
(
Properties
p
)
throws
Exception
{
ri
.
init
(
p
)
;
}
public
void
setProperty
(
String
key
,
Object
value
)
{
ri
.
setProperty
(
key
,
value
)
;
}
public
void
addProperty
(
String
key
,
Object
value
)
{
ri
.
addProperty
(
key
,
value
)
;
}
public
void
clearProperty
(
String
key
)
{
ri
.
clearProperty
(
key
)
;
}
public
void
setConfiguration
(
Configuration
configuration
)
{
ExtendedProperties
ep
=
configuration
.
getExtendedProperties
(
)
;
ri
.
setConfiguration
(
ep
)
;
}
public
void
setExtendedProperties
(
ExtendedProperties
configuration
)
{
ri
.
setConfiguration
(
configuration
)
;
}
public
Object
getProperty
(
String
key
)
{
return
ri
.
getProperty
(
key
)
;
}
public
boolean
evaluate
(
Context
context
,
Writer
out
,
String
logTag
,
String
instring
)
throws
ParseErrorException
,
MethodInvocationException
,
ResourceNotFoundException
,
IOException
{
return
evaluate
(
context
,
out
,
logTag
,
new
BufferedReader
(
new
StringReader
(
instring
)
)
)
;
}
public
boolean
evaluate
(
Context
context
,
Writer
writer
,
String
logTag
,
InputStream
instream
)
throws
ParseErrorException
,
MethodInvocationException
,
ResourceNotFoundException
,
IOException
{
BufferedReader
br
=
null
;
String
encoding
=
null
;
try
{
encoding
=
ri
.
getString
(
INPUT_ENCODING
,
ENCODING_DEFAULT
)
;
br
=
new
BufferedReader
(
new
InputStreamReader
(
instream
,
encoding
)
)
;
}
catch
(
UnsupportedEncodingException
uce
)
{
String
msg
=
"Unsupported input encoding : "
+
encoding
+
" for template "
+
logTag
;
throw
new
ParseErrorException
(
msg
)
;
}
return
evaluate
(
context
,
writer
,
logTag
,
br
)
;
}
public
boolean
evaluate
(
Context
context
,
Writer
writer
,
String
logTag
,
Reader
reader
)
throws
ParseErrorException
,
MethodInvocationException
,
ResourceNotFoundException
,
IOException
{
SimpleNode
nodeTree
=
null
;
try
{
nodeTree
=
ri
.
parse
(
reader
,
logTag
)
;
}
catch
(
ParseException
pex
)
{
throw
new
ParseErrorException
(
pex
.
getMessage
(
)
)
;
}
if
(
nodeTree
!=
null
)
{
InternalContextAdapterImpl
ica
=
new
InternalContextAdapterImpl
(
context
)
;
ica
.
pushCurrentTemplateName
(
logTag
)
;
try
{
try
{
nodeTree
.
init
(
ica
,
ri
)
;
}
catch
(
Exception
e
)
{
ri
.
error
(
"Velocity.evaluate() : init exception for tag = "
+
logTag
+
" : "
+
e
)
;
}
nodeTree
.
render
(
ica
,
writer
)
;
}
finally
{
ica
.
popCurrentTemplateName
(
)
;
}
return
true
;
}
return
false
;
}
public
boolean
invokeVelocimacro
(
String
vmName
,
String
logTag
,
String
params
[
]
,
Context
context
,
Writer
writer
)
throws
Exception
{
if
(
vmName
==
null
||
params
==
null
||
context
==
null
||
writer
==
null
||
logTag
==
null
)
{
ri
.
error
(
"VelocityEngine.invokeVelocimacro() : invalid parameter"
)
;
return
false
;
}
if
(
!
ri
.
isVelocimacro
(
vmName
,
logTag
)
)
{
ri
.
error
(
"VelocityEngine.invokeVelocimacro() : VM '"
+
vmName
+
"' not registered."
)
;
return
false
;
}
StringBuffer
construct
=
new
StringBuffer
(
"#"
)
;
construct
.
append
(
vmName
)
;
construct
.
append
(
"("
)
;
for
(
int
i
=
0
;
i
<
params
.
length
;
i
++
)
{
construct
.
append
(
" $"
)
;
construct
.
append
(
params
[
i
]
)
;
}
construct
.
append
(
" )"
)
;
try
{
boolean
retval
=
evaluate
(
context
,
writer
,
logTag
,
construct
.
toString
(
)
)
;
return
retval
;
}
catch
(
Exception
e
)
{
ri
.
error
(
"VelocityEngine.invokeVelocimacro() : error "
+
e
)
;
throw
e
;
}
}
public
boolean
mergeTemplate
(
String
templateName
,
Context
context
,
Writer
writer
)
throws
ResourceNotFoundException
,
ParseErrorException
,
MethodInvocationException
,
Exception
{
return
mergeTemplate
(
templateName
,
ri
.
getString
(
INPUT_ENCODING
,
ENCODING_DEFAULT
)
,
context
,
writer
)
;
}
public
boolean
mergeTemplate
(
String
templateName
,
String
encoding
,
Context
context
,
Writer
writer
)
throws
ResourceNotFoundException
,
ParseErrorException
,
MethodInvocationException
,
Exception
{
Template
template
=
ri
.
getTemplate
(
templateName
,
encoding
)
;
if
(
template
==
null
)
{
ri
.
error
(
"Velocity.parseTemplate() failed loading template '"
+
templateName
+
"'"
)
;
return
false
;
}
else
{
template
.
merge
(
context
,
writer
)
;
return
true
;
}
}
public
Template
getTemplate
(
String
name
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
return
ri
.
getTemplate
(
name
)
;
}
public
Template
getTemplate
(
String
name
,
String
encoding
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
return
ri
.
getTemplate
(
name
,
encoding
)
;
}
public
boolean
templateExists
(
String
templateName
)
{
return
(
ri
.
getLoaderNameForResource
(
templateName
)
!=
null
)
;
}
public
void
warn
(
Object
message
)
{
ri
.
warn
(
message
)
;
}
public
void
info
(
Object
message
)
{
ri
.
info
(
message
)
;
}
public
void
error
(
Object
message
)
{
ri
.
error
(
message
)
;
}
public
void
debug
(
Object
message
)
{
ri
.
debug
(
message
)
;
}
public
void
setApplicationAttribute
(
Object
key
,
Object
value
)
{
ri
.
setApplicationAttribute
(
key
,
value
)
;
}
}
