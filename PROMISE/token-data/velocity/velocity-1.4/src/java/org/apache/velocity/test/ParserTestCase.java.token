package
org
.
apache
.
velocity
.
test
;
import
junit
.
framework
.
Test
;
import
junit
.
framework
.
TestCase
;
import
junit
.
framework
.
TestSuite
;
import
org
.
apache
.
velocity
.
app
.
VelocityEngine
;
import
org
.
apache
.
velocity
.
VelocityContext
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
java
.
io
.
StringWriter
;
public
class
ParserTestCase
extends
TestCase
{
public
ParserTestCase
(
String
testName
)
{
super
(
testName
)
;
}
public
static
Test
suite
(
)
{
return
new
TestSuite
(
ParserTestCase
.
class
)
;
}
public
void
testEquals
(
)
throws
Exception
{
VelocityEngine
ve
=
new
VelocityEngine
(
)
;
ve
.
init
(
)
;
String
template
=
"#if($a == $b) foo #end"
;
ve
.
evaluate
(
new
VelocityContext
(
)
,
new
StringWriter
(
)
,
"foo"
,
template
)
;
template
=
"#if($a = $b) foo #end"
;
try
{
ve
.
evaluate
(
new
VelocityContext
(
)
,
new
StringWriter
(
)
,
"foo"
,
template
)
;
assertTrue
(
false
)
;
}
catch
(
ParseErrorException
pe
)
{
}
}
public
void
testMacro
(
)
throws
Exception
{
VelocityEngine
ve
=
new
VelocityEngine
(
)
;
ve
.
init
(
)
;
String
template
=
"#macro(foo) foo #end"
;
ve
.
evaluate
(
new
VelocityContext
(
)
,
new
StringWriter
(
)
,
"foo"
,
template
)
;
template
=
"#macro($x) foo #end"
;
try
{
ve
.
evaluate
(
new
VelocityContext
(
)
,
new
StringWriter
(
)
,
"foo"
,
template
)
;
assertTrue
(
false
)
;
}
catch
(
ParseErrorException
pe
)
{
}
}
public
void
testArgs
(
)
throws
Exception
{
VelocityEngine
ve
=
new
VelocityEngine
(
)
;
ve
.
init
(
)
;
String
template
=
"#macro(foo) foo #end"
;
ve
.
evaluate
(
new
VelocityContext
(
)
,
new
StringWriter
(
)
,
"foo"
,
template
)
;
template
=
"#foreach(  $i     in  $woogie   ) end #end"
;
ve
.
evaluate
(
new
VelocityContext
(
)
,
new
StringWriter
(
)
,
"foo"
,
template
)
;
template
=
"#macro(   foo $a) $a #end #foo(woogie)"
;
try
{
ve
.
evaluate
(
new
VelocityContext
(
)
,
new
StringWriter
(
)
,
"foo"
,
template
)
;
assertTrue
(
false
)
;
}
catch
(
ParseErrorException
pe
)
{
System
.
out
.
println
(
"Caught pee!"
)
;
}
}
}
