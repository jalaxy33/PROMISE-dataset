package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
java
.
io
.
StringWriter
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
StringReader
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
public
class
ASTStringLiteral
extends
SimpleNode
{
private
boolean
interpolate
=
true
;
private
SimpleNode
nodeTree
=
null
;
private
String
image
=
""
;
private
String
interpolateimage
=
""
;
public
ASTStringLiteral
(
int
id
)
{
super
(
id
)
;
}
public
ASTStringLiteral
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
Exception
{
super
.
init
(
context
,
data
)
;
interpolate
=
rsvc
.
getBoolean
(
RuntimeConstants
.
INTERPOLATE_STRINGLITERALS
,
true
)
&&
getFirstToken
(
)
.
image
.
startsWith
(
"\""
)
&&
(
(
getFirstToken
(
)
.
image
.
indexOf
(
'$'
)
!=
-
1
)
||
(
getFirstToken
(
)
.
image
.
indexOf
(
'#'
)
!=
-
1
)
)
;
image
=
getFirstToken
(
)
.
image
.
substring
(
1
,
getFirstToken
(
)
.
image
.
length
(
)
-
1
)
;
interpolateimage
=
image
+
" "
;
if
(
interpolate
)
{
BufferedReader
br
=
new
BufferedReader
(
new
StringReader
(
interpolateimage
)
)
;
nodeTree
=
rsvc
.
parse
(
br
,
(
context
!=
null
)
?
context
.
getCurrentTemplateName
(
)
:
"StringLiteral"
,
false
)
;
nodeTree
.
init
(
context
,
rsvc
)
;
}
return
data
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
value
(
InternalContextAdapter
context
)
{
if
(
interpolate
)
{
try
{
StringWriter
writer
=
new
StringWriter
(
)
;
nodeTree
.
render
(
context
,
writer
)
;
String
ret
=
writer
.
toString
(
)
;
return
ret
.
substring
(
0
,
ret
.
length
(
)
-
1
)
;
}
catch
(
Exception
e
)
{
rsvc
.
error
(
"Error in interpolating string literal : "
+
e
)
;
}
}
return
image
;
}
}
