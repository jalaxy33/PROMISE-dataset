package
org
.
apache
.
velocity
.
test
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
File
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
Writer
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
velocity
.
VelocityContext
;
import
org
.
apache
.
velocity
.
Template
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeSingleton
;
import
org
.
apache
.
velocity
.
test
.
provider
.
TestProvider
;
import
org
.
apache
.
velocity
.
test
.
provider
.
BoolObj
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
import
org
.
apache
.
velocity
.
app
.
FieldMethodizer
;
import
junit
.
framework
.
TestCase
;
public
class
TemplateTestCase
extends
BaseTestCase
implements
TemplateTestBase
{
protected
String
baseFileName
;
private
TestProvider
provider
;
private
ArrayList
al
;
private
Hashtable
h
;
private
VelocityContext
context
;
private
VelocityContext
context1
;
private
VelocityContext
context2
;
private
Vector
vec
;
public
TemplateTestCase
(
String
baseFileName
)
{
super
(
getTestCaseName
(
baseFileName
)
)
;
this
.
baseFileName
=
baseFileName
;
}
public
static
junit
.
framework
.
Test
suite
(
)
{
return
new
TemplateTestSuite
(
)
;
}
protected
void
setUp
(
)
{
provider
=
new
TestProvider
(
)
;
al
=
provider
.
getCustomers
(
)
;
h
=
new
Hashtable
(
)
;
h
.
put
(
"Bar"
,
"this is from a hashtable!"
)
;
h
.
put
(
"Foo"
,
"this is from a hashtable too!"
)
;
vec
=
new
Vector
(
)
;
vec
.
addElement
(
new
String
(
"string1"
)
)
;
vec
.
addElement
(
new
String
(
"string2"
)
)
;
context2
=
new
VelocityContext
(
)
;
context1
=
new
VelocityContext
(
context2
)
;
context
=
new
VelocityContext
(
context1
)
;
context
.
put
(
"provider"
,
provider
)
;
context1
.
put
(
"name"
,
"jason"
)
;
context2
.
put
(
"providers"
,
provider
.
getCustomers2
(
)
)
;
context
.
put
(
"list"
,
al
)
;
context1
.
put
(
"hashtable"
,
h
)
;
context2
.
put
(
"hashmap"
,
new
HashMap
(
)
)
;
context2
.
put
(
"search"
,
provider
.
getSearch
(
)
)
;
context
.
put
(
"relatedSearches"
,
provider
.
getRelSearches
(
)
)
;
context1
.
put
(
"searchResults"
,
provider
.
getRelSearches
(
)
)
;
context2
.
put
(
"stringarray"
,
provider
.
getArray
(
)
)
;
context
.
put
(
"vector"
,
vec
)
;
context
.
put
(
"mystring"
,
new
String
(
)
)
;
context
.
put
(
"runtime"
,
new
FieldMethodizer
(
"org.apache.velocity.runtime.RuntimeSingleton"
)
)
;
context
.
put
(
"fmprov"
,
new
FieldMethodizer
(
provider
)
)
;
context
.
put
(
"Floog"
,
"floogie woogie"
)
;
context
.
put
(
"boolobj"
,
new
BoolObj
(
)
)
;
Object
[
]
oarr
=
{
"a"
,
"b"
,
"c"
,
"d"
}
;
int
intarr
[
]
=
{
10
,
20
,
30
,
40
,
50
}
;
context
.
put
(
"collection"
,
vec
)
;
context2
.
put
(
"iterator"
,
vec
.
iterator
(
)
)
;
context1
.
put
(
"map"
,
h
)
;
context
.
put
(
"obarr"
,
oarr
)
;
context
.
put
(
"enumerator"
,
vec
.
elements
(
)
)
;
context
.
put
(
"intarr"
,
intarr
)
;
}
public
void
runTest
(
)
{
try
{
Template
template
=
RuntimeSingleton
.
getTemplate
(
getFileName
(
null
,
baseFileName
,
TMPL_FILE_EXT
)
)
;
assureResultsDirectoryExists
(
RESULT_DIR
)
;
FileOutputStream
fos
=
new
FileOutputStream
(
getFileName
(
RESULT_DIR
,
baseFileName
,
RESULT_FILE_EXT
)
)
;
Writer
writer
=
new
BufferedWriter
(
new
OutputStreamWriter
(
fos
)
)
;
template
.
merge
(
context
,
writer
)
;
writer
.
flush
(
)
;
writer
.
close
(
)
;
if
(
!
isMatch
(
RESULT_DIR
,
COMPARE_DIR
,
baseFileName
,
RESULT_FILE_EXT
,
CMP_FILE_EXT
)
)
{
fail
(
"Processed template did not match expected output"
)
;
}
}
catch
(
Exception
e
)
{
System
.
out
.
println
(
"EXCEPTION : "
+
e
)
;
fail
(
e
.
getMessage
(
)
)
;
}
}
}
