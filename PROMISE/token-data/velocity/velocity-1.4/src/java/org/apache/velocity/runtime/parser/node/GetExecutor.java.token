package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Introspector
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeLogger
;
public
class
GetExecutor
extends
AbstractExecutor
{
private
Object
[
]
args
=
new
Object
[
1
]
;
public
GetExecutor
(
RuntimeLogger
r
,
Introspector
ispect
,
Class
c
,
String
key
)
throws
Exception
{
rlog
=
r
;
args
[
0
]
=
key
;
method
=
ispect
.
getMethod
(
c
,
"get"
,
args
)
;
}
public
Object
execute
(
Object
o
)
throws
IllegalAccessException
,
InvocationTargetException
{
if
(
method
==
null
)
return
null
;
return
method
.
invoke
(
o
,
args
)
;
}
public
Object
OLDexecute
(
Object
o
,
InternalContextAdapter
context
)
throws
IllegalAccessException
,
MethodInvocationException
{
if
(
method
==
null
)
return
null
;
try
{
return
method
.
invoke
(
o
,
args
)
;
}
catch
(
InvocationTargetException
ite
)
{
throw
new
MethodInvocationException
(
"Invocation of method 'get(\""
+
args
[
0
]
+
"\")'"
+
" in  "
+
o
.
getClass
(
)
+
" threw exception "
+
ite
.
getTargetException
(
)
.
getClass
(
)
,
ite
.
getTargetException
(
)
,
"get"
)
;
}
catch
(
IllegalArgumentException
iae
)
{
return
null
;
}
}
}
