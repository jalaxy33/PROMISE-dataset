package
org
.
apache
.
velocity
.
runtime
.
log
;
import
java
.
io
.
File
;
import
org
.
apache
.
log
.
Priority
;
import
org
.
apache
.
log
.
Logger
;
import
org
.
apache
.
log
.
Hierarchy
;
import
org
.
apache
.
log
.
LogTarget
;
import
org
.
apache
.
log
.
output
.
io
.
FileTarget
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
public
class
AvalonLogSystem
implements
LogSystem
{
private
Logger
logger
=
null
;
private
RuntimeServices
rsvc
=
null
;
public
AvalonLogSystem
(
)
{
}
public
void
init
(
RuntimeServices
rs
)
throws
Exception
{
this
.
rsvc
=
rs
;
String
loggerName
=
(
String
)
rsvc
.
getProperty
(
"runtime.log.logsystem.avalon.logger"
)
;
if
(
loggerName
!=
null
)
{
this
.
logger
=
Hierarchy
.
getDefaultHierarchy
(
)
.
getLoggerFor
(
loggerName
)
;
}
else
{
String
logfile
=
(
String
)
rsvc
.
getProperty
(
RuntimeConstants
.
RUNTIME_LOG
)
;
try
{
init
(
logfile
)
;
logVelocityMessage
(
0
,
"AvalonLogSystem initialized using logfile '"
+
logfile
+
"'"
)
;
}
catch
(
Exception
e
)
{
System
.
out
.
println
(
"PANIC : Error configuring AvalonLogSystem : "
+
e
)
;
System
.
err
.
println
(
"PANIC : Error configuring AvalonLogSystem : "
+
e
)
;
throw
new
Exception
(
"Unable to configure AvalonLogSystem : "
+
e
)
;
}
}
}
public
void
init
(
String
logFile
)
throws
Exception
{
FileTarget
target
=
new
FileTarget
(
new
File
(
logFile
)
,
false
,
new
VelocityFormatter
(
"%{time} %{message}\\n%{throwable}"
)
)
;
logger
=
Hierarchy
.
getDefaultHierarchy
(
)
.
getLoggerFor
(
rsvc
.
toString
(
)
)
;
logger
.
setPriority
(
Priority
.
DEBUG
)
;
logger
.
setLogTargets
(
new
LogTarget
[
]
{
target
}
)
;
}
public
void
logVelocityMessage
(
int
level
,
String
message
)
{
switch
(
level
)
{
case
LogSystem
.
WARN_ID
:
logger
.
warn
(
RuntimeConstants
.
WARN_PREFIX
+
message
)
;
break
;
case
LogSystem
.
INFO_ID
:
logger
.
info
(
RuntimeConstants
.
INFO_PREFIX
+
message
)
;
break
;
case
LogSystem
.
DEBUG_ID
:
logger
.
debug
(
RuntimeConstants
.
DEBUG_PREFIX
+
message
)
;
break
;
case
LogSystem
.
ERROR_ID
:
logger
.
error
(
RuntimeConstants
.
ERROR_PREFIX
+
message
)
;
break
;
default
:
logger
.
info
(
message
)
;
break
;
}
}
}
