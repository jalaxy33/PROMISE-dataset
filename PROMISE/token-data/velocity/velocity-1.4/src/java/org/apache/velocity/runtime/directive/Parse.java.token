package
org
.
apache
.
velocity
.
runtime
.
directive
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
Template
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
Node
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
SimpleNode
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
public
class
Parse
extends
InputBase
{
private
boolean
ready
=
false
;
public
String
getName
(
)
{
return
"parse"
;
}
public
int
getType
(
)
{
return
LINE
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
,
Node
node
)
throws
IOException
,
ResourceNotFoundException
,
ParseErrorException
,
MethodInvocationException
{
if
(
node
.
jjtGetChild
(
0
)
==
null
)
{
rsvc
.
error
(
"#parse() error :  null argument"
)
;
return
false
;
}
Object
value
=
node
.
jjtGetChild
(
0
)
.
value
(
context
)
;
if
(
value
==
null
)
{
rsvc
.
error
(
"#parse() error :  null argument"
)
;
return
false
;
}
String
arg
=
value
.
toString
(
)
;
Object
[
]
templateStack
=
context
.
getTemplateNameStack
(
)
;
if
(
templateStack
.
length
>=
rsvc
.
getInt
(
RuntimeConstants
.
PARSE_DIRECTIVE_MAXDEPTH
,
20
)
)
{
StringBuffer
path
=
new
StringBuffer
(
)
;
for
(
int
i
=
0
;
i
<
templateStack
.
length
;
++
i
)
{
path
.
append
(
" > "
+
templateStack
[
i
]
)
;
}
rsvc
.
error
(
"Max recursion depth reached ("
+
templateStack
.
length
+
")"
+
" File stack:"
+
path
)
;
return
false
;
}
Template
t
=
null
;
try
{
t
=
rsvc
.
getTemplate
(
arg
,
getInputEncoding
(
context
)
)
;
}
catch
(
ResourceNotFoundException
rnfe
)
{
rsvc
.
error
(
"#parse(): cannot find template '"
+
arg
+
"', called from template "
+
context
.
getCurrentTemplateName
(
)
+
" at ("
+
getLine
(
)
+
", "
+
getColumn
(
)
+
")"
)
;
throw
rnfe
;
}
catch
(
ParseErrorException
pee
)
{
rsvc
.
error
(
"#parse(): syntax error in #parse()-ed template '"
+
arg
+
"', called from template "
+
context
.
getCurrentTemplateName
(
)
+
" at ("
+
getLine
(
)
+
", "
+
getColumn
(
)
+
")"
)
;
throw
pee
;
}
catch
(
Exception
e
)
{
rsvc
.
error
(
"#parse() : arg = "
+
arg
+
".  Exception : "
+
e
)
;
return
false
;
}
try
{
context
.
pushCurrentTemplateName
(
arg
)
;
(
(
SimpleNode
)
t
.
getData
(
)
)
.
render
(
context
,
writer
)
;
}
catch
(
Exception
e
)
{
if
(
e
instanceof
MethodInvocationException
)
{
throw
(
MethodInvocationException
)
e
;
}
rsvc
.
error
(
"Exception rendering #parse( "
+
arg
+
" )  : "
+
e
)
;
return
false
;
}
finally
{
context
.
popCurrentTemplateName
(
)
;
}
return
true
;
}
}
