package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
IntrospectionCacheData
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Info
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
VelPropertyGet
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventCartridge
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
public
class
ASTIdentifier
extends
SimpleNode
{
private
String
identifier
=
""
;
protected
Info
uberInfo
;
public
ASTIdentifier
(
int
id
)
{
super
(
id
)
;
}
public
ASTIdentifier
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
Exception
{
super
.
init
(
context
,
data
)
;
identifier
=
getFirstToken
(
)
.
image
;
uberInfo
=
new
Info
(
context
.
getCurrentTemplateName
(
)
,
getLine
(
)
,
getColumn
(
)
)
;
return
data
;
}
public
Object
execute
(
Object
o
,
InternalContextAdapter
context
)
throws
MethodInvocationException
{
VelPropertyGet
vg
=
null
;
try
{
Class
c
=
o
.
getClass
(
)
;
IntrospectionCacheData
icd
=
context
.
icacheGet
(
this
)
;
if
(
icd
!=
null
&&
icd
.
contextData
==
c
)
{
vg
=
(
VelPropertyGet
)
icd
.
thingy
;
}
else
{
vg
=
rsvc
.
getUberspect
(
)
.
getPropertyGet
(
o
,
identifier
,
uberInfo
)
;
if
(
vg
!=
null
&&
vg
.
isCacheable
(
)
)
{
icd
=
new
IntrospectionCacheData
(
)
;
icd
.
contextData
=
c
;
icd
.
thingy
=
vg
;
context
.
icachePut
(
this
,
icd
)
;
}
}
}
catch
(
Exception
e
)
{
rsvc
.
error
(
"ASTIdentifier.execute() : identifier = "
+
identifier
+
" : "
+
e
)
;
}
if
(
vg
==
null
)
{
return
null
;
}
try
{
return
vg
.
invoke
(
o
)
;
}
catch
(
InvocationTargetException
ite
)
{
EventCartridge
ec
=
context
.
getEventCartridge
(
)
;
if
(
ec
!=
null
&&
ite
.
getTargetException
(
)
instanceof
java
.
lang
.
Exception
)
{
try
{
return
ec
.
methodException
(
o
.
getClass
(
)
,
vg
.
getMethodName
(
)
,
(
Exception
)
ite
.
getTargetException
(
)
)
;
}
catch
(
Exception
e
)
{
throw
new
MethodInvocationException
(
"Invocation of method '"
+
vg
.
getMethodName
(
)
+
"'"
+
" in  "
+
o
.
getClass
(
)
+
" threw exception "
+
ite
.
getTargetException
(
)
.
getClass
(
)
+
" : "
+
ite
.
getTargetException
(
)
.
getMessage
(
)
,
ite
.
getTargetException
(
)
,
vg
.
getMethodName
(
)
)
;
}
}
else
{
throw
new
MethodInvocationException
(
"Invocation of method '"
+
vg
.
getMethodName
(
)
+
"'"
+
" in  "
+
o
.
getClass
(
)
+
" threw exception "
+
ite
.
getTargetException
(
)
.
getClass
(
)
+
" : "
+
ite
.
getTargetException
(
)
.
getMessage
(
)
,
ite
.
getTargetException
(
)
,
vg
.
getMethodName
(
)
)
;
}
}
catch
(
IllegalArgumentException
iae
)
{
return
null
;
}
catch
(
Exception
e
)
{
rsvc
.
error
(
"ASTIdentifier() : exception invoking method "
+
"for identifier '"
+
identifier
+
"' in "
+
o
.
getClass
(
)
+
" : "
+
e
)
;
}
return
null
;
}
}
