package
org
.
apache
.
velocity
.
test
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
Writer
;
import
java
.
util
.
Properties
;
import
org
.
apache
.
velocity
.
VelocityContext
;
import
org
.
apache
.
velocity
.
Template
;
import
org
.
apache
.
velocity
.
app
.
Velocity
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeSingleton
;
import
org
.
apache
.
velocity
.
test
.
provider
.
TestProvider
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
import
org
.
apache
.
velocity
.
runtime
.
VelocimacroFactory
;
import
junit
.
framework
.
TestCase
;
public
class
InlineScopeVMTestCase
extends
BaseTestCase
implements
TemplateTestBase
{
private
static
final
String
TEST_CASE_NAME
=
"InlineScopeVMTestCase"
;
InlineScopeVMTestCase
(
)
{
super
(
TEST_CASE_NAME
)
;
try
{
Velocity
.
setProperty
(
Velocity
.
VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL
,
"true"
)
;
Velocity
.
setProperty
(
Velocity
.
VM_PERM_INLINE_LOCAL
,
"true"
)
;
Velocity
.
setProperty
(
Velocity
.
FILE_RESOURCE_LOADER_PATH
,
FILE_RESOURCE_LOADER_PATH
)
;
Velocity
.
init
(
)
;
}
catch
(
Exception
e
)
{
System
.
err
.
println
(
"Cannot setup "
+
TEST_CASE_NAME
)
;
System
.
exit
(
1
)
;
}
}
public
static
junit
.
framework
.
Test
suite
(
)
{
return
new
InlineScopeVMTestCase
(
)
;
}
public
void
runTest
(
)
{
try
{
assureResultsDirectoryExists
(
RESULT_DIR
)
;
Template
template2
=
RuntimeSingleton
.
getTemplate
(
getFileName
(
null
,
"vm_test2"
,
TMPL_FILE_EXT
)
)
;
Template
template1
=
RuntimeSingleton
.
getTemplate
(
getFileName
(
null
,
"vm_test1"
,
TMPL_FILE_EXT
)
)
;
FileOutputStream
fos1
=
new
FileOutputStream
(
getFileName
(
RESULT_DIR
,
"vm_test1"
,
RESULT_FILE_EXT
)
)
;
FileOutputStream
fos2
=
new
FileOutputStream
(
getFileName
(
RESULT_DIR
,
"vm_test2"
,
RESULT_FILE_EXT
)
)
;
Writer
writer1
=
new
BufferedWriter
(
new
OutputStreamWriter
(
fos1
)
)
;
Writer
writer2
=
new
BufferedWriter
(
new
OutputStreamWriter
(
fos2
)
)
;
VelocityContext
context
=
new
VelocityContext
(
)
;
template1
.
merge
(
context
,
writer1
)
;
writer1
.
flush
(
)
;
writer1
.
close
(
)
;
template2
.
merge
(
context
,
writer2
)
;
writer2
.
flush
(
)
;
writer2
.
close
(
)
;
if
(
!
isMatch
(
RESULT_DIR
,
COMPARE_DIR
,
"vm_test1"
,
RESULT_FILE_EXT
,
CMP_FILE_EXT
)
||
!
isMatch
(
RESULT_DIR
,
COMPARE_DIR
,
"vm_test2"
,
RESULT_FILE_EXT
,
CMP_FILE_EXT
)
)
{
fail
(
"Output incorrect."
)
;
}
}
catch
(
Exception
e
)
{
fail
(
e
.
getMessage
(
)
)
;
}
}
}
