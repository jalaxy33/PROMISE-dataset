package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Introspector
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeLogger
;
public
class
PropertyExecutor
extends
AbstractExecutor
{
protected
Introspector
introspector
=
null
;
protected
String
methodUsed
=
null
;
public
PropertyExecutor
(
RuntimeLogger
r
,
Introspector
ispctr
,
Class
clazz
,
String
property
)
{
rlog
=
r
;
introspector
=
ispctr
;
discover
(
clazz
,
property
)
;
}
protected
void
discover
(
Class
clazz
,
String
property
)
{
try
{
char
c
;
StringBuffer
sb
;
Object
[
]
params
=
{
}
;
sb
=
new
StringBuffer
(
"get"
)
;
sb
.
append
(
property
)
;
methodUsed
=
sb
.
toString
(
)
;
method
=
introspector
.
getMethod
(
clazz
,
methodUsed
,
params
)
;
if
(
method
!=
null
)
return
;
sb
=
new
StringBuffer
(
"get"
)
;
sb
.
append
(
property
)
;
c
=
sb
.
charAt
(
3
)
;
if
(
Character
.
isLowerCase
(
c
)
)
{
sb
.
setCharAt
(
3
,
Character
.
toUpperCase
(
c
)
)
;
}
else
{
sb
.
setCharAt
(
3
,
Character
.
toLowerCase
(
c
)
)
;
}
methodUsed
=
sb
.
toString
(
)
;
method
=
introspector
.
getMethod
(
clazz
,
methodUsed
,
params
)
;
if
(
method
!=
null
)
return
;
}
catch
(
Exception
e
)
{
rlog
.
error
(
"PROGRAMMER ERROR : PropertyExector() : "
+
e
)
;
}
}
public
Object
execute
(
Object
o
)
throws
IllegalAccessException
,
InvocationTargetException
{
if
(
method
==
null
)
return
null
;
return
method
.
invoke
(
o
,
null
)
;
}
}
