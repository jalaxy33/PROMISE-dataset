package
org
.
apache
.
velocity
.
runtime
.
log
;
import
java
.
util
.
Enumeration
;
import
org
.
apache
.
log4j
.
*
;
import
org
.
apache
.
log4j
.
net
.
*
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
public
class
Log4JLogSystem
implements
LogSystem
{
private
RuntimeServices
rsvc
=
null
;
protected
Category
logger
=
null
;
protected
Layout
layout
=
null
;
private
String
logfile
=
""
;
public
Log4JLogSystem
(
)
{
}
public
void
init
(
RuntimeServices
rs
)
{
rsvc
=
rs
;
logfile
=
rsvc
.
getString
(
RuntimeConstants
.
RUNTIME_LOG
)
;
try
{
internalInit
(
)
;
logVelocityMessage
(
0
,
"Log4JLogSystem initialized using logfile "
+
logfile
)
;
}
catch
(
Exception
e
)
{
System
.
out
.
println
(
"PANIC : error configuring Log4JLogSystem : "
+
e
)
;
}
}
private
void
internalInit
(
)
throws
Exception
{
logger
=
Category
.
getInstance
(
""
)
;
logger
.
setAdditivity
(
false
)
;
logger
.
setPriority
(
Priority
.
DEBUG
)
;
String
pattern
=
rsvc
.
getString
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_PATTERN
)
;
if
(
pattern
==
null
||
pattern
.
length
(
)
==
0
)
{
pattern
=
"%d - %m%n"
;
}
layout
=
new
PatternLayout
(
pattern
)
;
configureFile
(
)
;
configureRemote
(
)
;
configureSyslog
(
)
;
configureEmail
(
)
;
}
private
void
configureFile
(
)
throws
Exception
{
int
backupFiles
=
rsvc
.
getInt
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_FILE_BACKUPS
,
1
)
;
int
fileSize
=
rsvc
.
getInt
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_FILE_SIZE
,
100000
)
;
Appender
appender
=
new
RollingFileAppender
(
layout
,
logfile
,
true
)
;
(
(
RollingFileAppender
)
appender
)
.
setMaxBackupIndex
(
backupFiles
)
;
if
(
fileSize
>
-
1
)
{
(
(
RollingFileAppender
)
appender
)
.
setMaximumFileSize
(
fileSize
)
;
}
logger
.
addAppender
(
appender
)
;
}
private
void
configureRemote
(
)
throws
Exception
{
String
remoteHost
=
rsvc
.
getString
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_REMOTE_HOST
)
;
int
remotePort
=
rsvc
.
getInt
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_REMOTE_PORT
,
1099
)
;
if
(
remoteHost
==
null
||
remoteHost
.
trim
(
)
.
equals
(
""
)
||
remotePort
<=
0
)
{
return
;
}
Appender
appender
=
new
SocketAppender
(
remoteHost
,
remotePort
)
;
logger
.
addAppender
(
appender
)
;
}
private
void
configureSyslog
(
)
throws
Exception
{
String
syslogHost
=
rsvc
.
getString
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_SYSLOGD_HOST
)
;
String
syslogFacility
=
rsvc
.
getString
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_SYSLOGD_FACILITY
)
;
if
(
syslogHost
==
null
||
syslogHost
.
trim
(
)
.
equals
(
""
)
||
syslogFacility
==
null
)
{
return
;
}
Appender
appender
=
new
SyslogAppender
(
)
;
(
(
SyslogAppender
)
appender
)
.
setLayout
(
layout
)
;
(
(
SyslogAppender
)
appender
)
.
setSyslogHost
(
syslogHost
)
;
(
(
SyslogAppender
)
appender
)
.
setFacility
(
syslogFacility
)
;
logger
.
addAppender
(
appender
)
;
}
private
void
configureEmail
(
)
throws
Exception
{
String
smtpHost
=
rsvc
.
getString
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_EMAIL_SERVER
)
;
String
emailFrom
=
rsvc
.
getString
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_EMAIL_FROM
)
;
String
emailTo
=
rsvc
.
getString
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_EMAIL_TO
)
;
String
emailSubject
=
rsvc
.
getString
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_EMAIL_SUBJECT
)
;
String
bufferSize
=
rsvc
.
getString
(
RuntimeConstants
.
LOGSYSTEM_LOG4J_EMAIL_BUFFER_SIZE
)
;
if
(
smtpHost
==
null
||
smtpHost
.
trim
(
)
.
equals
(
""
)
||
emailFrom
==
null
||
smtpHost
.
trim
(
)
.
equals
(
""
)
||
emailTo
==
null
||
emailTo
.
trim
(
)
.
equals
(
""
)
||
emailSubject
==
null
||
emailSubject
.
trim
(
)
.
equals
(
""
)
||
bufferSize
==
null
||
bufferSize
.
trim
(
)
.
equals
(
""
)
)
{
return
;
}
SMTPAppender
appender
=
new
SMTPAppender
(
)
;
appender
.
setSMTPHost
(
smtpHost
)
;
appender
.
setFrom
(
emailFrom
)
;
appender
.
setTo
(
emailTo
)
;
appender
.
setSubject
(
emailSubject
)
;
appender
.
setBufferSize
(
Integer
.
parseInt
(
bufferSize
)
)
;
appender
.
setLayout
(
layout
)
;
appender
.
activateOptions
(
)
;
logger
.
addAppender
(
appender
)
;
}
public
void
logVelocityMessage
(
int
level
,
String
message
)
{
switch
(
level
)
{
case
LogSystem
.
WARN_ID
:
logger
.
warn
(
message
)
;
break
;
case
LogSystem
.
INFO_ID
:
logger
.
info
(
message
)
;
break
;
case
LogSystem
.
DEBUG_ID
:
logger
.
debug
(
message
)
;
break
;
case
LogSystem
.
ERROR_ID
:
logger
.
error
(
message
)
;
break
;
default
:
logger
.
debug
(
message
)
;
break
;
}
}
protected
void
finalize
(
)
throws
Throwable
{
shutdown
(
)
;
}
public
void
shutdown
(
)
{
Enumeration
appenders
=
logger
.
getAllAppenders
(
)
;
while
(
appenders
.
hasMoreElements
(
)
)
{
Appender
appender
=
(
Appender
)
appenders
.
nextElement
(
)
;
appender
.
close
(
)
;
}
}
}
