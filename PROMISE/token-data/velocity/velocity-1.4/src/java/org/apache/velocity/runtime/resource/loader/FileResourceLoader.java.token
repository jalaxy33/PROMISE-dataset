package
org
.
apache
.
velocity
.
runtime
.
resource
.
loader
;
import
java
.
io
.
File
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
BufferedInputStream
;
import
java
.
io
.
FileNotFoundException
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
commons
.
collections
.
ExtendedProperties
;
public
class
FileResourceLoader
extends
ResourceLoader
{
private
Vector
paths
=
null
;
private
Hashtable
templatePaths
=
new
Hashtable
(
)
;
public
void
init
(
ExtendedProperties
configuration
)
{
rsvc
.
info
(
"FileResourceLoader : initialization starting."
)
;
paths
=
configuration
.
getVector
(
"path"
)
;
int
sz
=
paths
.
size
(
)
;
for
(
int
i
=
0
;
i
<
sz
;
i
++
)
{
rsvc
.
info
(
"FileResourceLoader : adding path '"
+
(
String
)
paths
.
get
(
i
)
+
"'"
)
;
}
rsvc
.
info
(
"FileResourceLoader : initialization complete."
)
;
}
public
synchronized
InputStream
getResourceStream
(
String
templateName
)
throws
ResourceNotFoundException
{
if
(
templateName
==
null
||
templateName
.
length
(
)
==
0
)
{
throw
new
ResourceNotFoundException
(
"Need to specify a file name or file path!"
)
;
}
String
template
=
StringUtils
.
normalizePath
(
templateName
)
;
if
(
template
==
null
||
template
.
length
(
)
==
0
)
{
String
msg
=
"File resource error : argument "
+
template
+
" contains .. and may be trying to access "
+
"content outside of template root.  Rejected."
;
rsvc
.
error
(
"FileResourceLoader : "
+
msg
)
;
throw
new
ResourceNotFoundException
(
msg
)
;
}
if
(
template
.
startsWith
(
"/"
)
)
{
template
=
template
.
substring
(
1
)
;
}
int
size
=
paths
.
size
(
)
;
for
(
int
i
=
0
;
i
<
size
;
i
++
)
{
String
path
=
(
String
)
paths
.
get
(
i
)
;
InputStream
inputStream
=
findTemplate
(
path
,
template
)
;
if
(
inputStream
!=
null
)
{
templatePaths
.
put
(
templateName
,
path
)
;
return
inputStream
;
}
}
String
msg
=
"FileResourceLoader Error: cannot find resource "
+
template
;
throw
new
ResourceNotFoundException
(
msg
)
;
}
private
InputStream
findTemplate
(
String
path
,
String
template
)
{
try
{
File
file
=
new
File
(
path
,
template
)
;
if
(
file
.
canRead
(
)
)
{
return
new
BufferedInputStream
(
new
FileInputStream
(
file
.
getAbsolutePath
(
)
)
)
;
}
else
{
return
null
;
}
}
catch
(
FileNotFoundException
fnfe
)
{
return
null
;
}
}
public
boolean
isSourceModified
(
Resource
resource
)
{
boolean
modified
=
true
;
String
fileName
=
resource
.
getName
(
)
;
String
path
=
(
String
)
templatePaths
.
get
(
fileName
)
;
File
currentFile
=
null
;
for
(
int
i
=
0
;
currentFile
==
null
&&
i
<
paths
.
size
(
)
;
i
++
)
{
String
testPath
=
(
String
)
paths
.
get
(
i
)
;
File
testFile
=
new
File
(
testPath
,
fileName
)
;
if
(
testFile
.
canRead
(
)
)
{
currentFile
=
testFile
;
}
}
File
file
=
new
File
(
path
,
fileName
)
;
if
(
currentFile
==
null
||
!
file
.
exists
(
)
)
{
}
else
if
(
currentFile
.
equals
(
file
)
&&
file
.
canRead
(
)
)
{
modified
=
(
file
.
lastModified
(
)
!=
resource
.
getLastModified
(
)
)
;
}
return
modified
;
}
public
long
getLastModified
(
Resource
resource
)
{
String
path
=
(
String
)
templatePaths
.
get
(
resource
.
getName
(
)
)
;
File
file
=
new
File
(
path
,
resource
.
getName
(
)
)
;
if
(
file
.
canRead
(
)
)
{
return
file
.
lastModified
(
)
;
}
else
{
return
0
;
}
}
}
