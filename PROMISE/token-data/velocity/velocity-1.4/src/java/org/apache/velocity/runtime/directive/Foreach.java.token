package
org
.
apache
.
velocity
.
runtime
.
directive
;
import
java
.
io
.
Writer
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
Node
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Info
;
public
class
Foreach
extends
Directive
{
public
String
getName
(
)
{
return
"foreach"
;
}
public
int
getType
(
)
{
return
BLOCK
;
}
private
String
counterName
;
private
int
counterInitialValue
;
private
String
elementKey
;
protected
Info
uberInfo
;
public
void
init
(
RuntimeServices
rs
,
InternalContextAdapter
context
,
Node
node
)
throws
Exception
{
super
.
init
(
rs
,
context
,
node
)
;
counterName
=
rsvc
.
getString
(
RuntimeConstants
.
COUNTER_NAME
)
;
counterInitialValue
=
rsvc
.
getInt
(
RuntimeConstants
.
COUNTER_INITIAL_VALUE
)
;
elementKey
=
node
.
jjtGetChild
(
0
)
.
getFirstToken
(
)
.
image
.
substring
(
1
)
;
uberInfo
=
new
Info
(
context
.
getCurrentTemplateName
(
)
,
getLine
(
)
,
getColumn
(
)
)
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
,
Node
node
)
throws
IOException
,
MethodInvocationException
,
ResourceNotFoundException
,
ParseErrorException
{
Object
listObject
=
node
.
jjtGetChild
(
2
)
.
value
(
context
)
;
if
(
listObject
==
null
)
return
false
;
Iterator
i
=
null
;
try
{
i
=
rsvc
.
getUberspect
(
)
.
getIterator
(
listObject
,
uberInfo
)
;
}
catch
(
Exception
ee
)
{
System
.
out
.
println
(
ee
)
;
}
if
(
i
==
null
)
{
return
false
;
}
int
counter
=
counterInitialValue
;
Object
o
=
context
.
get
(
elementKey
)
;
Object
ctr
=
context
.
get
(
counterName
)
;
while
(
i
.
hasNext
(
)
)
{
context
.
put
(
counterName
,
new
Integer
(
counter
)
)
;
context
.
put
(
elementKey
,
i
.
next
(
)
)
;
node
.
jjtGetChild
(
3
)
.
render
(
context
,
writer
)
;
counter
++
;
}
if
(
ctr
!=
null
)
{
context
.
put
(
counterName
,
ctr
)
;
}
else
{
context
.
remove
(
counterName
)
;
}
if
(
o
!=
null
)
{
context
.
put
(
elementKey
,
o
)
;
}
else
{
context
.
remove
(
elementKey
)
;
}
return
true
;
}
}
