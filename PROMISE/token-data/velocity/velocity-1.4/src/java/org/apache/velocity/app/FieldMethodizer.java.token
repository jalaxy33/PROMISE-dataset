package
org
.
apache
.
velocity
.
app
;
import
java
.
lang
.
Class
;
import
java
.
lang
.
reflect
.
Field
;
import
java
.
lang
.
reflect
.
Modifier
;
import
java
.
util
.
HashMap
;
public
class
FieldMethodizer
{
private
HashMap
fieldHash
=
new
HashMap
(
)
;
private
HashMap
classHash
=
new
HashMap
(
)
;
public
FieldMethodizer
(
)
{
}
public
FieldMethodizer
(
String
s
)
{
try
{
addObject
(
s
)
;
}
catch
(
Exception
e
)
{
System
.
out
.
println
(
e
)
;
}
}
public
FieldMethodizer
(
Object
o
)
{
try
{
addObject
(
o
)
;
}
catch
(
Exception
e
)
{
System
.
out
.
println
(
e
)
;
}
}
public
void
addObject
(
String
s
)
throws
Exception
{
inspect
(
Class
.
forName
(
s
)
)
;
}
public
void
addObject
(
Object
o
)
throws
Exception
{
inspect
(
o
.
getClass
(
)
)
;
}
public
Object
get
(
String
fieldName
)
{
try
{
Field
f
=
(
Field
)
fieldHash
.
get
(
fieldName
)
;
if
(
f
!=
null
)
return
f
.
get
(
(
Class
)
classHash
.
get
(
fieldName
)
)
;
}
catch
(
Exception
e
)
{
}
return
null
;
}
private
void
inspect
(
Class
clas
)
{
Field
[
]
fields
=
clas
.
getFields
(
)
;
for
(
int
i
=
0
;
i
<
fields
.
length
;
i
++
)
{
int
mod
=
fields
[
i
]
.
getModifiers
(
)
;
if
(
Modifier
.
isStatic
(
mod
)
&&
Modifier
.
isPublic
(
mod
)
)
{
fieldHash
.
put
(
fields
[
i
]
.
getName
(
)
,
fields
[
i
]
)
;
classHash
.
put
(
fields
[
i
]
.
getName
(
)
,
clas
)
;
}
}
}
}
