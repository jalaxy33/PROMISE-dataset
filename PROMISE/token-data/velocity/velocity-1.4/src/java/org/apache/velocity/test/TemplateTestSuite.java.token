package
org
.
apache
.
velocity
.
test
;
import
java
.
io
.
FileInputStream
;
import
java
.
util
.
Properties
;
import
java
.
util
.
List
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
velocity
.
app
.
Velocity
;
import
junit
.
framework
.
TestSuite
;
public
class
TemplateTestSuite
extends
TestSuite
implements
TemplateTestBase
{
private
Properties
testProperties
;
public
TemplateTestSuite
(
)
{
try
{
Velocity
.
setProperty
(
Velocity
.
FILE_RESOURCE_LOADER_PATH
,
FILE_RESOURCE_LOADER_PATH
)
;
Velocity
.
setProperty
(
Velocity
.
RUNTIME_LOG_ERROR_STACKTRACE
,
"true"
)
;
Velocity
.
setProperty
(
Velocity
.
RUNTIME_LOG_WARN_STACKTRACE
,
"true"
)
;
Velocity
.
setProperty
(
Velocity
.
RUNTIME_LOG_INFO_STACKTRACE
,
"true"
)
;
Velocity
.
init
(
)
;
testProperties
=
new
Properties
(
)
;
testProperties
.
load
(
new
FileInputStream
(
TEST_CASE_PROPERTIES
)
)
;
}
catch
(
Exception
e
)
{
System
.
err
.
println
(
"Cannot setup TemplateTestSuite!"
)
;
e
.
printStackTrace
(
)
;
System
.
exit
(
1
)
;
}
addTemplateTestCases
(
)
;
}
private
void
addTemplateTestCases
(
)
{
String
template
;
for
(
int
i
=
1
;
;
i
++
)
{
template
=
testProperties
.
getProperty
(
getTemplateTestKey
(
i
)
)
;
if
(
template
!=
null
)
{
System
.
out
.
println
(
"Adding TemplateTestCase : "
+
template
)
;
addTest
(
new
TemplateTestCase
(
template
)
)
;
}
else
{
break
;
}
}
}
private
static
final
String
getTemplateTestKey
(
int
nbr
)
{
return
(
"test.template."
+
nbr
)
;
}
}
