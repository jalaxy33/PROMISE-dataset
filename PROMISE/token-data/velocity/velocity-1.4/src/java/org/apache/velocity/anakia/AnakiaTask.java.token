package
org
.
apache
.
velocity
.
anakia
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
File
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
Writer
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
MatchingTask
;
import
org
.
xml
.
sax
.
SAXParseException
;
import
org
.
jdom
.
Document
;
import
org
.
jdom
.
JDOMException
;
import
org
.
jdom
.
input
.
SAXBuilder
;
import
org
.
apache
.
velocity
.
Template
;
import
org
.
apache
.
velocity
.
app
.
VelocityEngine
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
import
org
.
apache
.
velocity
.
VelocityContext
;
public
class
AnakiaTask
extends
MatchingTask
{
private
SAXBuilder
builder
;
private
File
destDir
=
null
;
private
File
baseDir
=
null
;
private
String
style
=
null
;
private
File
styleFile
=
null
;
private
long
styleSheetLastModified
=
0
;
private
String
projectAttribute
=
null
;
private
File
projectFile
=
null
;
private
long
projectFileLastModified
=
0
;
private
boolean
lastModifiedCheck
=
true
;
private
String
extension
=
".html"
;
private
String
templatePath
=
null
;
private
File
velocityPropertiesFile
=
null
;
private
VelocityEngine
ve
=
new
VelocityEngine
(
)
;
public
AnakiaTask
(
)
{
builder
=
new
SAXBuilder
(
)
;
builder
.
setFactory
(
new
AnakiaJDOMFactory
(
)
)
;
}
public
void
setBasedir
(
File
dir
)
{
baseDir
=
dir
;
}
public
void
setDestdir
(
File
dir
)
{
destDir
=
dir
;
}
public
void
setExtension
(
String
extension
)
{
this
.
extension
=
extension
;
}
public
void
setStyle
(
String
style
)
{
this
.
style
=
style
;
}
public
void
setProjectFile
(
String
projectAttribute
)
{
this
.
projectAttribute
=
projectAttribute
;
}
public
void
setTemplatePath
(
File
templatePath
)
{
try
{
this
.
templatePath
=
templatePath
.
getCanonicalPath
(
)
;
}
catch
(
java
.
io
.
IOException
ioe
)
{
throw
new
BuildException
(
ioe
)
;
}
}
public
void
setVelocityPropertiesFile
(
File
velocityPropertiesFile
)
{
this
.
velocityPropertiesFile
=
velocityPropertiesFile
;
}
public
void
setLastModifiedCheck
(
String
lastmod
)
{
if
(
lastmod
.
equalsIgnoreCase
(
"false"
)
||
lastmod
.
equalsIgnoreCase
(
"no"
)
||
lastmod
.
equalsIgnoreCase
(
"off"
)
)
{
this
.
lastModifiedCheck
=
false
;
}
}
public
void
execute
(
)
throws
BuildException
{
DirectoryScanner
scanner
;
String
[
]
list
;
String
[
]
dirs
;
if
(
baseDir
==
null
)
{
baseDir
=
project
.
resolveFile
(
"."
)
;
}
if
(
destDir
==
null
)
{
String
msg
=
"destdir attribute must be set!"
;
throw
new
BuildException
(
msg
)
;
}
if
(
style
==
null
)
{
throw
new
BuildException
(
"style attribute must be set!"
)
;
}
if
(
velocityPropertiesFile
==
null
)
{
velocityPropertiesFile
=
new
File
(
"velocity.properties"
)
;
}
if
(
!
velocityPropertiesFile
.
exists
(
)
&&
templatePath
==
null
)
{
throw
new
BuildException
(
"No template path and could not "
+
"locate velocity.properties file: "
+
velocityPropertiesFile
.
getAbsolutePath
(
)
)
;
}
log
(
"Transforming into: "
+
destDir
.
getAbsolutePath
(
)
,
Project
.
MSG_INFO
)
;
if
(
projectAttribute
!=
null
&&
projectAttribute
.
length
(
)
>
0
)
{
projectFile
=
new
File
(
baseDir
,
projectAttribute
)
;
if
(
projectFile
.
exists
(
)
)
{
projectFileLastModified
=
projectFile
.
lastModified
(
)
;
}
else
{
log
(
"Project file is defined, but could not be located: "
+
projectFile
.
getAbsolutePath
(
)
,
Project
.
MSG_INFO
)
;
projectFile
=
null
;
}
}
Document
projectDocument
=
null
;
try
{
if
(
velocityPropertiesFile
.
exists
(
)
)
{
ve
.
init
(
velocityPropertiesFile
.
getAbsolutePath
(
)
)
;
}
else
if
(
templatePath
!=
null
&&
templatePath
.
length
(
)
>
0
)
{
ve
.
setProperty
(
RuntimeConstants
.
FILE_RESOURCE_LOADER_PATH
,
templatePath
)
;
ve
.
init
(
)
;
}
styleSheetLastModified
=
ve
.
getTemplate
(
style
)
.
getLastModified
(
)
;
if
(
projectFile
!=
null
)
{
projectDocument
=
builder
.
build
(
projectFile
)
;
}
}
catch
(
Exception
e
)
{
log
(
"Error: "
+
e
.
toString
(
)
,
Project
.
MSG_INFO
)
;
throw
new
BuildException
(
e
)
;
}
scanner
=
getDirectoryScanner
(
baseDir
)
;
list
=
scanner
.
getIncludedFiles
(
)
;
for
(
int
i
=
0
;
i
<
list
.
length
;
++
i
)
{
process
(
baseDir
,
list
[
i
]
,
destDir
,
projectDocument
)
;
}
}
private
void
process
(
File
baseDir
,
String
xmlFile
,
File
destDir
,
Document
projectDocument
)
throws
BuildException
{
File
outFile
=
null
;
File
inFile
=
null
;
Writer
writer
=
null
;
try
{
inFile
=
new
File
(
baseDir
,
xmlFile
)
;
outFile
=
new
File
(
destDir
,
xmlFile
.
substring
(
0
,
xmlFile
.
lastIndexOf
(
'.'
)
)
+
extension
)
;
if
(
lastModifiedCheck
==
false
||
(
inFile
.
lastModified
(
)
>
outFile
.
lastModified
(
)
||
styleSheetLastModified
>
outFile
.
lastModified
(
)
||
projectFileLastModified
>
outFile
.
lastModified
(
)
)
)
{
ensureDirectoryFor
(
outFile
)
;
log
(
"Input:  "
+
xmlFile
,
Project
.
MSG_INFO
)
;
Document
root
=
builder
.
build
(
inFile
)
;
VelocityContext
context
=
new
VelocityContext
(
)
;
String
encoding
=
(
String
)
ve
.
getProperty
(
RuntimeConstants
.
OUTPUT_ENCODING
)
;
if
(
encoding
==
null
||
encoding
.
length
(
)
==
0
||
encoding
.
equals
(
"8859-1"
)
||
encoding
.
equals
(
"8859_1"
)
)
{
encoding
=
"ISO-8859-1"
;
}
OutputWrapper
ow
=
new
OutputWrapper
(
)
;
ow
.
setEncoding
(
encoding
)
;
context
.
put
(
"root"
,
root
.
getRootElement
(
)
)
;
context
.
put
(
"xmlout"
,
ow
)
;
context
.
put
(
"relativePath"
,
getRelativePath
(
xmlFile
)
)
;
context
.
put
(
"treeWalk"
,
new
TreeWalker
(
)
)
;
context
.
put
(
"xpath"
,
new
XPathTool
(
)
)
;
context
.
put
(
"escape"
,
new
Escape
(
)
)
;
context
.
put
(
"date"
,
new
java
.
util
.
Date
(
)
)
;
if
(
projectDocument
!=
null
)
{
context
.
put
(
"project"
,
projectDocument
.
getRootElement
(
)
)
;
}
writer
=
new
BufferedWriter
(
new
OutputStreamWriter
(
new
FileOutputStream
(
outFile
)
,
encoding
)
)
;
Template
template
=
ve
.
getTemplate
(
style
)
;
template
.
merge
(
context
,
writer
)
;
log
(
"Output: "
+
outFile
,
Project
.
MSG_INFO
)
;
}
}
catch
(
JDOMException
e
)
{
if
(
outFile
!=
null
)
outFile
.
delete
(
)
;
if
(
e
.
getCause
(
)
!=
null
)
{
Throwable
rootCause
=
e
.
getCause
(
)
;
if
(
rootCause
instanceof
SAXParseException
)
{
System
.
out
.
println
(
""
)
;
System
.
out
.
println
(
"Error: "
+
rootCause
.
getMessage
(
)
)
;
System
.
out
.
println
(
"       Line: "
+
(
(
SAXParseException
)
rootCause
)
.
getLineNumber
(
)
+
" Column: "
+
(
(
SAXParseException
)
rootCause
)
.
getColumnNumber
(
)
)
;
System
.
out
.
println
(
""
)
;
}
else
{
rootCause
.
printStackTrace
(
)
;
}
}
else
{
e
.
printStackTrace
(
)
;
}
}
catch
(
Throwable
e
)
{
if
(
outFile
!=
null
)
{
outFile
.
delete
(
)
;
}
e
.
printStackTrace
(
)
;
}
finally
{
if
(
writer
!=
null
)
{
try
{
writer
.
flush
(
)
;
writer
.
close
(
)
;
}
catch
(
Exception
e
)
{
}
}
}
}
private
String
getRelativePath
(
String
file
)
{
if
(
file
==
null
||
file
.
length
(
)
==
0
)
return
""
;
StringTokenizer
st
=
new
StringTokenizer
(
file
,
"/\\"
)
;
int
slashCount
=
st
.
countTokens
(
)
-
1
;
StringBuffer
sb
=
new
StringBuffer
(
)
;
for
(
int
i
=
0
;
i
<
slashCount
;
i
++
)
{
sb
.
append
(
"../"
)
;
}
if
(
sb
.
toString
(
)
.
length
(
)
>
0
)
{
return
StringUtils
.
chop
(
sb
.
toString
(
)
,
1
)
;
}
else
{
return
"."
;
}
}
private
void
ensureDirectoryFor
(
File
targetFile
)
throws
BuildException
{
File
directory
=
new
File
(
targetFile
.
getParent
(
)
)
;
if
(
!
directory
.
exists
(
)
)
{
if
(
!
directory
.
mkdirs
(
)
)
{
throw
new
BuildException
(
"Unable to create directory: "
+
directory
.
getAbsolutePath
(
)
)
;
}
}
}
}
