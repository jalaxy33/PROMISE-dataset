package
org
.
apache
.
velocity
.
runtime
.
directive
;
import
org
.
apache
.
velocity
.
exception
.
ExtendedParseException
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParseException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Token
;
public
class
MacroParseException
extends
ParseException
implements
ExtendedParseException
{
private
final
String
templateName
;
private
static
final
long
serialVersionUID
=
-
4985224672336070689L
;
public
MacroParseException
(
final
String
msg
,
final
String
templateName
,
final
Token
currentToken
)
{
super
(
msg
)
;
this
.
currentToken
=
currentToken
;
this
.
templateName
=
templateName
;
}
public
String
getTemplateName
(
)
{
return
templateName
;
}
public
int
getLineNumber
(
)
{
if
(
(
currentToken
!=
null
)
&&
(
currentToken
.
next
!=
null
)
)
{
return
currentToken
.
next
.
beginLine
;
}
else
{
return
-
1
;
}
}
public
int
getColumnNumber
(
)
{
if
(
(
currentToken
!=
null
)
&&
(
currentToken
.
next
!=
null
)
)
{
return
currentToken
.
next
.
beginColumn
;
}
else
{
return
-
1
;
}
}
public
String
getMessage
(
)
{
if
(
!
specialConstructor
)
{
StringBuffer
sb
=
new
StringBuffer
(
super
.
getMessage
(
)
)
;
appendTemplateInfo
(
sb
)
;
return
sb
.
toString
(
)
;
}
int
maxSize
=
0
;
StringBuffer
expected
=
new
StringBuffer
(
)
;
for
(
int
i
=
0
;
i
<
expectedTokenSequences
.
length
;
i
++
)
{
if
(
maxSize
<
expectedTokenSequences
[
i
]
.
length
)
{
maxSize
=
expectedTokenSequences
[
i
]
.
length
;
}
for
(
int
j
=
0
;
j
<
expectedTokenSequences
[
i
]
.
length
;
j
++
)
{
expected
.
append
(
tokenImage
[
expectedTokenSequences
[
i
]
[
j
]
]
)
.
append
(
" "
)
;
}
if
(
expectedTokenSequences
[
i
]
[
expectedTokenSequences
[
i
]
.
length
-
1
]
!=
0
)
{
expected
.
append
(
"..."
)
;
}
expected
.
append
(
eol
)
.
append
(
"    "
)
;
}
StringBuffer
retval
=
new
StringBuffer
(
"Encountered \""
)
;
Token
tok
=
currentToken
.
next
;
for
(
int
i
=
0
;
i
<
maxSize
;
i
++
)
{
if
(
i
!=
0
)
{
retval
.
append
(
" "
)
;
}
if
(
tok
.
kind
==
0
)
{
retval
.
append
(
tokenImage
[
0
]
)
;
break
;
}
retval
.
append
(
add_escapes
(
tok
.
image
)
)
;
tok
=
tok
.
next
;
}
retval
.
append
(
"\""
)
;
appendTemplateInfo
(
retval
)
;
if
(
expectedTokenSequences
.
length
==
1
)
{
retval
.
append
(
"Was expecting:"
)
.
append
(
eol
)
.
append
(
"    "
)
;
}
else
{
retval
.
append
(
"Was expecting one of:"
)
.
append
(
eol
)
.
append
(
"    "
)
;
}
retval
.
append
(
expected
.
toString
(
)
)
;
return
retval
.
toString
(
)
;
}
protected
void
appendTemplateInfo
(
final
StringBuffer
sb
)
{
sb
.
append
(
Log
.
formatFileString
(
getTemplateName
(
)
,
getLineNumber
(
)
,
getColumnNumber
(
)
)
)
;
sb
.
append
(
eol
)
;
}
}
