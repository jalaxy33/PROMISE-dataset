package
org
.
apache
.
velocity
.
context
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Set
;
import
java
.
util
.
List
;
import
org
.
apache
.
velocity
.
VelocityContext
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventCartridge
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
util
.
ClassUtils
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
IntrospectionCacheData
;
public
class
EvaluateContext
extends
ChainedInternalContextAdapter
{
Context
localContext
;
boolean
allowRendering
=
true
;
public
EvaluateContext
(
InternalContextAdapter
inner
,
RuntimeServices
rsvc
)
{
super
(
inner
)
;
initContext
(
rsvc
)
;
}
private
void
initContext
(
RuntimeServices
rsvc
)
{
String
contextClass
=
rsvc
.
getString
(
RuntimeConstants
.
EVALUATE_CONTEXT_CLASS
)
;
if
(
contextClass
!=
null
&&
contextClass
.
length
(
)
>
0
)
{
Object
o
=
null
;
try
{
o
=
ClassUtils
.
getNewInstance
(
contextClass
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
String
err
=
"The specified class for #evaluate() context ("
+
contextClass
+
") does not exist or is not accessible to the current classloader."
;
rsvc
.
getLog
(
)
.
error
(
err
)
;
throw
new
RuntimeException
(
err
,
cnfe
)
;
}
catch
(
Exception
e
)
{
String
err
=
"The specified class for #evaluate() context ("
+
contextClass
+
") can not be loaded."
;
rsvc
.
getLog
(
)
.
error
(
err
,
e
)
;
throw
new
RuntimeException
(
err
)
;
}
if
(
!
(
o
instanceof
Context
)
)
{
String
err
=
"The specified class for #evaluate() context ("
+
contextClass
+
") does not implement "
+
Context
.
class
.
getName
(
)
+
"."
;
rsvc
.
getLog
(
)
.
error
(
err
)
;
throw
new
RuntimeException
(
err
)
;
}
localContext
=
(
Context
)
o
;
}
else
{
String
err
=
"No class specified for #evaluate() context."
;
rsvc
.
getLog
(
)
.
error
(
err
)
;
throw
new
RuntimeException
(
err
)
;
}
}
public
Object
put
(
String
key
,
Object
value
)
{
return
localContext
.
put
(
key
,
value
)
;
}
public
Object
get
(
String
key
)
{
Object
o
=
localContext
.
get
(
key
)
;
if
(
o
==
null
)
{
o
=
super
.
get
(
key
)
;
}
return
o
;
}
public
boolean
containsKey
(
Object
key
)
{
return
localContext
.
containsKey
(
key
)
||
super
.
containsKey
(
key
)
;
}
public
Object
[
]
getKeys
(
)
{
Set
keys
=
new
HashSet
(
)
;
Object
[
]
localKeys
=
localContext
.
getKeys
(
)
;
for
(
int
i
=
0
;
i
<
localKeys
.
length
;
i
++
)
{
keys
.
add
(
localKeys
[
i
]
)
;
}
Object
[
]
innerKeys
=
super
.
getKeys
(
)
;
for
(
int
i
=
0
;
i
<
innerKeys
.
length
;
i
++
)
{
keys
.
add
(
innerKeys
[
i
]
)
;
}
return
keys
.
toArray
(
)
;
}
public
Object
remove
(
Object
key
)
{
return
localContext
.
remove
(
key
)
;
}
public
Object
localPut
(
final
String
key
,
final
Object
value
)
{
return
localContext
.
put
(
key
,
value
)
;
}
public
boolean
getAllowRendering
(
)
{
return
allowRendering
&&
innerContext
.
getAllowRendering
(
)
;
}
public
void
setAllowRendering
(
boolean
v
)
{
allowRendering
=
false
;
}
}
