package
org
.
apache
.
velocity
.
runtime
.
log
;
import
org
.
apache
.
log4j
.
Category
;
import
org
.
apache
.
log4j
.
Level
;
import
org
.
apache
.
log4j
.
PatternLayout
;
import
org
.
apache
.
log4j
.
RollingFileAppender
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
public
class
SimpleLog4JLogSystem
implements
LogSystem
{
private
RuntimeServices
rsvc
=
null
;
private
RollingFileAppender
appender
=
null
;
protected
Category
logger
=
null
;
public
SimpleLog4JLogSystem
(
)
{
}
public
void
init
(
RuntimeServices
rs
)
{
rsvc
=
rs
;
String
categoryname
=
(
String
)
rsvc
.
getProperty
(
"runtime.log.logsystem.log4j.category"
)
;
if
(
categoryname
!=
null
)
{
logger
=
Category
.
getInstance
(
categoryname
)
;
logVelocityMessage
(
0
,
"SimpleLog4JLogSystem using category '"
+
categoryname
+
"'"
)
;
return
;
}
String
logfile
=
rsvc
.
getString
(
RuntimeConstants
.
RUNTIME_LOG
)
;
try
{
internalInit
(
logfile
)
;
logVelocityMessage
(
0
,
"SimpleLog4JLogSystem initialized using logfile '"
+
logfile
+
"'"
)
;
}
catch
(
Exception
e
)
{
System
.
err
.
println
(
"PANIC : error configuring SimpleLog4JLogSystem : "
+
e
)
;
}
}
private
void
internalInit
(
String
logfile
)
throws
Exception
{
logger
=
Category
.
getInstance
(
this
.
getClass
(
)
.
getName
(
)
)
;
logger
.
setAdditivity
(
false
)
;
logger
.
setLevel
(
Level
.
DEBUG
)
;
appender
=
new
RollingFileAppender
(
new
PatternLayout
(
"%d - %m%n"
)
,
logfile
,
true
)
;
appender
.
setMaxBackupIndex
(
1
)
;
appender
.
setMaximumFileSize
(
100000
)
;
logger
.
addAppender
(
appender
)
;
}
public
void
logVelocityMessage
(
int
level
,
String
message
)
{
switch
(
level
)
{
case
LogSystem
.
WARN_ID
:
logger
.
warn
(
message
)
;
break
;
case
LogSystem
.
INFO_ID
:
logger
.
info
(
message
)
;
break
;
case
LogSystem
.
ERROR_ID
:
logger
.
error
(
message
)
;
break
;
case
LogSystem
.
DEBUG_ID
:
default
:
logger
.
debug
(
message
)
;
break
;
}
}
protected
void
finalize
(
)
throws
Throwable
{
shutdown
(
)
;
}
public
void
shutdown
(
)
{
if
(
appender
!=
null
)
{
logger
.
removeAppender
(
appender
)
;
appender
.
close
(
)
;
appender
=
null
;
}
}
}
