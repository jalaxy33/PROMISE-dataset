package
org
.
apache
.
velocity
.
app
.
event
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Set
;
import
org
.
apache
.
velocity
.
context
.
Context
;
import
org
.
apache
.
velocity
.
context
.
InternalEventContext
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
util
.
RuntimeServicesAware
;
public
class
EventCartridge
{
private
List
referenceHandlers
=
new
ArrayList
(
)
;
private
List
nullSetHandlers
=
new
ArrayList
(
)
;
private
List
methodExceptionHandlers
=
new
ArrayList
(
)
;
private
List
includeHandlers
=
new
ArrayList
(
)
;
private
List
invalidReferenceHandlers
=
new
ArrayList
(
)
;
Set
initializedHandlers
=
new
HashSet
(
)
;
public
boolean
addEventHandler
(
EventHandler
ev
)
{
if
(
ev
==
null
)
{
return
false
;
}
boolean
found
=
false
;
if
(
ev
instanceof
ReferenceInsertionEventHandler
)
{
addReferenceInsertionEventHandler
(
(
ReferenceInsertionEventHandler
)
ev
)
;
found
=
true
;
}
if
(
ev
instanceof
NullSetEventHandler
)
{
addNullSetEventHandler
(
(
NullSetEventHandler
)
ev
)
;
found
=
true
;
}
if
(
ev
instanceof
MethodExceptionEventHandler
)
{
addMethodExceptionHandler
(
(
MethodExceptionEventHandler
)
ev
)
;
found
=
true
;
}
if
(
ev
instanceof
IncludeEventHandler
)
{
addIncludeEventHandler
(
(
IncludeEventHandler
)
ev
)
;
found
=
true
;
}
if
(
ev
instanceof
InvalidReferenceEventHandler
)
{
addInvalidReferenceEventHandler
(
(
InvalidReferenceEventHandler
)
ev
)
;
found
=
true
;
}
return
found
;
}
public
void
addReferenceInsertionEventHandler
(
ReferenceInsertionEventHandler
ev
)
{
referenceHandlers
.
add
(
ev
)
;
}
public
void
addNullSetEventHandler
(
NullSetEventHandler
ev
)
{
nullSetHandlers
.
add
(
ev
)
;
}
public
void
addMethodExceptionHandler
(
MethodExceptionEventHandler
ev
)
{
methodExceptionHandlers
.
add
(
ev
)
;
}
public
void
addIncludeEventHandler
(
IncludeEventHandler
ev
)
{
includeHandlers
.
add
(
ev
)
;
}
public
void
addInvalidReferenceEventHandler
(
InvalidReferenceEventHandler
ev
)
{
invalidReferenceHandlers
.
add
(
ev
)
;
}
public
boolean
removeEventHandler
(
EventHandler
ev
)
{
if
(
ev
==
null
)
{
return
false
;
}
boolean
found
=
false
;
if
(
ev
instanceof
ReferenceInsertionEventHandler
)
return
referenceHandlers
.
remove
(
ev
)
;
if
(
ev
instanceof
NullSetEventHandler
)
return
nullSetHandlers
.
remove
(
ev
)
;
if
(
ev
instanceof
MethodExceptionEventHandler
)
return
methodExceptionHandlers
.
remove
(
ev
)
;
if
(
ev
instanceof
IncludeEventHandler
)
return
includeHandlers
.
remove
(
ev
)
;
if
(
ev
instanceof
InvalidReferenceEventHandler
)
return
invalidReferenceHandlers
.
remove
(
ev
)
;
return
found
;
}
public
Iterator
getReferenceInsertionEventHandlers
(
)
{
return
referenceHandlers
.
size
(
)
==
0
?
null
:
referenceHandlers
.
iterator
(
)
;
}
public
Iterator
getNullSetEventHandlers
(
)
{
return
nullSetHandlers
.
iterator
(
)
;
}
public
Iterator
getMethodExceptionEventHandlers
(
)
{
return
methodExceptionHandlers
.
iterator
(
)
;
}
public
Iterator
getIncludeEventHandlers
(
)
{
return
includeHandlers
.
iterator
(
)
;
}
public
Iterator
getInvalidReferenceEventHandlers
(
)
{
return
invalidReferenceHandlers
.
iterator
(
)
;
}
public
final
boolean
attachToContext
(
Context
context
)
{
if
(
context
instanceof
InternalEventContext
)
{
InternalEventContext
iec
=
(
InternalEventContext
)
context
;
iec
.
attachEventCartridge
(
this
)
;
return
true
;
}
else
{
return
false
;
}
}
public
void
initialize
(
RuntimeServices
rs
)
throws
Exception
{
for
(
Iterator
i
=
referenceHandlers
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
EventHandler
eh
=
(
EventHandler
)
i
.
next
(
)
;
if
(
(
eh
instanceof
RuntimeServicesAware
)
&&
!
initializedHandlers
.
contains
(
eh
)
)
{
(
(
RuntimeServicesAware
)
eh
)
.
setRuntimeServices
(
rs
)
;
initializedHandlers
.
add
(
eh
)
;
}
}
for
(
Iterator
i
=
nullSetHandlers
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
EventHandler
eh
=
(
EventHandler
)
i
.
next
(
)
;
if
(
(
eh
instanceof
RuntimeServicesAware
)
&&
!
initializedHandlers
.
contains
(
eh
)
)
{
(
(
RuntimeServicesAware
)
eh
)
.
setRuntimeServices
(
rs
)
;
initializedHandlers
.
add
(
eh
)
;
}
}
for
(
Iterator
i
=
methodExceptionHandlers
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
EventHandler
eh
=
(
EventHandler
)
i
.
next
(
)
;
if
(
(
eh
instanceof
RuntimeServicesAware
)
&&
!
initializedHandlers
.
contains
(
eh
)
)
{
(
(
RuntimeServicesAware
)
eh
)
.
setRuntimeServices
(
rs
)
;
initializedHandlers
.
add
(
eh
)
;
}
}
for
(
Iterator
i
=
includeHandlers
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
EventHandler
eh
=
(
EventHandler
)
i
.
next
(
)
;
if
(
(
eh
instanceof
RuntimeServicesAware
)
&&
!
initializedHandlers
.
contains
(
eh
)
)
{
(
(
RuntimeServicesAware
)
eh
)
.
setRuntimeServices
(
rs
)
;
initializedHandlers
.
add
(
eh
)
;
}
}
for
(
Iterator
i
=
invalidReferenceHandlers
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
EventHandler
eh
=
(
EventHandler
)
i
.
next
(
)
;
if
(
(
eh
instanceof
RuntimeServicesAware
)
&&
!
initializedHandlers
.
contains
(
eh
)
)
{
(
(
RuntimeServicesAware
)
eh
)
.
setRuntimeServices
(
rs
)
;
initializedHandlers
.
add
(
eh
)
;
}
}
}
}
