package
org
.
apache
.
velocity
.
runtime
.
parser
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
Node
;
public
class
JJTParserState
{
private
java
.
util
.
List
nodes
;
private
java
.
util
.
List
marks
;
private
int
sp
;
private
int
mk
;
private
boolean
node_created
;
public
JJTParserState
(
)
{
nodes
=
new
java
.
util
.
ArrayList
(
)
;
marks
=
new
java
.
util
.
ArrayList
(
)
;
sp
=
0
;
mk
=
0
;
}
public
boolean
nodeCreated
(
)
{
return
node_created
;
}
public
void
reset
(
)
{
nodes
.
clear
(
)
;
marks
.
clear
(
)
;
sp
=
0
;
mk
=
0
;
}
public
Node
rootNode
(
)
{
return
(
Node
)
nodes
.
get
(
0
)
;
}
public
void
pushNode
(
Node
n
)
{
nodes
.
add
(
n
)
;
++
sp
;
}
public
Node
popNode
(
)
{
if
(
--
sp
<
mk
)
{
mk
=
(
(
Integer
)
marks
.
remove
(
marks
.
size
(
)
-
1
)
)
.
intValue
(
)
;
}
return
(
Node
)
nodes
.
remove
(
nodes
.
size
(
)
-
1
)
;
}
public
Node
peekNode
(
)
{
return
(
Node
)
nodes
.
get
(
nodes
.
size
(
)
-
1
)
;
}
public
int
nodeArity
(
)
{
return
sp
-
mk
;
}
public
void
clearNodeScope
(
Node
n
)
{
while
(
sp
>
mk
)
{
popNode
(
)
;
}
mk
=
(
(
Integer
)
marks
.
remove
(
marks
.
size
(
)
-
1
)
)
.
intValue
(
)
;
}
public
void
openNodeScope
(
Node
n
)
{
marks
.
add
(
new
Integer
(
mk
)
)
;
mk
=
sp
;
n
.
jjtOpen
(
)
;
}
public
void
closeNodeScope
(
Node
n
,
int
num
)
{
mk
=
(
(
Integer
)
marks
.
remove
(
marks
.
size
(
)
-
1
)
)
.
intValue
(
)
;
while
(
num
--
>
0
)
{
Node
c
=
popNode
(
)
;
c
.
jjtSetParent
(
n
)
;
n
.
jjtAddChild
(
c
,
num
)
;
}
n
.
jjtClose
(
)
;
pushNode
(
n
)
;
node_created
=
true
;
}
public
void
closeNodeScope
(
Node
n
,
boolean
condition
)
{
if
(
condition
)
{
int
a
=
nodeArity
(
)
;
mk
=
(
(
Integer
)
marks
.
remove
(
marks
.
size
(
)
-
1
)
)
.
intValue
(
)
;
while
(
a
--
>
0
)
{
Node
c
=
popNode
(
)
;
c
.
jjtSetParent
(
n
)
;
n
.
jjtAddChild
(
c
,
a
)
;
}
n
.
jjtClose
(
)
;
pushNode
(
n
)
;
node_created
=
true
;
}
else
{
mk
=
(
(
Integer
)
marks
.
remove
(
marks
.
size
(
)
-
1
)
)
.
intValue
(
)
;
node_created
=
false
;
}
}
}
