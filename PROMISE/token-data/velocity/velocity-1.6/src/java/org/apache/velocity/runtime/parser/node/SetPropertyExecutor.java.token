package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
org
.
apache
.
commons
.
lang
.
StringUtils
;
import
org
.
apache
.
commons
.
lang
.
text
.
StrBuilder
;
import
org
.
apache
.
velocity
.
exception
.
VelocityException
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Introspector
;
public
class
SetPropertyExecutor
extends
SetExecutor
{
private
final
Introspector
introspector
;
public
SetPropertyExecutor
(
final
Log
log
,
final
Introspector
introspector
,
final
Class
clazz
,
final
String
property
,
final
Object
arg
)
{
this
.
log
=
log
;
this
.
introspector
=
introspector
;
if
(
StringUtils
.
isNotEmpty
(
property
)
)
{
discover
(
clazz
,
property
,
arg
)
;
}
}
protected
Introspector
getIntrospector
(
)
{
return
this
.
introspector
;
}
protected
void
discover
(
final
Class
clazz
,
final
String
property
,
final
Object
arg
)
{
Object
[
]
params
=
new
Object
[
]
{
arg
}
;
try
{
StrBuilder
sb
=
new
StrBuilder
(
"set"
)
;
sb
.
append
(
property
)
;
setMethod
(
introspector
.
getMethod
(
clazz
,
sb
.
toString
(
)
,
params
)
)
;
if
(
!
isAlive
(
)
)
{
char
c
=
sb
.
charAt
(
3
)
;
if
(
Character
.
isLowerCase
(
c
)
)
{
sb
.
setCharAt
(
3
,
Character
.
toUpperCase
(
c
)
)
;
}
else
{
sb
.
setCharAt
(
3
,
Character
.
toLowerCase
(
c
)
)
;
}
setMethod
(
introspector
.
getMethod
(
clazz
,
sb
.
toString
(
)
,
params
)
)
;
}
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
String
msg
=
"Exception while looking for property setter for '"
+
property
;
log
.
error
(
msg
,
e
)
;
throw
new
VelocityException
(
msg
,
e
)
;
}
}
public
Object
execute
(
final
Object
o
,
final
Object
value
)
throws
IllegalAccessException
,
InvocationTargetException
{
Object
[
]
params
=
new
Object
[
]
{
value
}
;
return
isAlive
(
)
?
getMethod
(
)
.
invoke
(
o
,
params
)
:
null
;
}
}
