package
org
.
apache
.
velocity
.
app
.
event
.
implement
;
import
org
.
apache
.
oro
.
text
.
perl
.
MalformedPerl5PatternException
;
import
org
.
apache
.
oro
.
text
.
perl
.
Perl5Util
;
import
org
.
apache
.
velocity
.
app
.
event
.
ReferenceInsertionEventHandler
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
util
.
RuntimeServicesAware
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
public
abstract
class
EscapeReference
implements
ReferenceInsertionEventHandler
,
RuntimeServicesAware
{
private
Perl5Util
perl
=
new
Perl5Util
(
)
;
private
RuntimeServices
rs
;
private
String
matchRegExp
=
null
;
protected
abstract
String
escape
(
Object
text
)
;
protected
abstract
String
getMatchAttribute
(
)
;
public
Object
referenceInsert
(
String
reference
,
Object
value
)
{
if
(
value
==
null
)
{
return
value
;
}
if
(
matchRegExp
==
null
)
{
return
escape
(
value
)
;
}
else
if
(
perl
.
match
(
matchRegExp
,
reference
)
)
{
return
escape
(
value
)
;
}
else
{
return
value
;
}
}
public
void
setRuntimeServices
(
RuntimeServices
rs
)
{
this
.
rs
=
rs
;
matchRegExp
=
StringUtils
.
nullTrim
(
rs
.
getConfiguration
(
)
.
getString
(
getMatchAttribute
(
)
)
)
;
if
(
(
matchRegExp
!=
null
)
&&
(
matchRegExp
.
length
(
)
==
0
)
)
{
matchRegExp
=
null
;
}
if
(
matchRegExp
!=
null
)
{
try
{
perl
.
match
(
matchRegExp
,
""
)
;
}
catch
(
MalformedPerl5PatternException
E
)
{
rs
.
getLog
(
)
.
error
(
"Invalid regular expression '"
+
matchRegExp
+
"'.  No escaping will be performed."
,
E
)
;
matchRegExp
=
null
;
}
}
}
protected
RuntimeServices
getRuntimeServices
(
)
{
return
rs
;
}
}
