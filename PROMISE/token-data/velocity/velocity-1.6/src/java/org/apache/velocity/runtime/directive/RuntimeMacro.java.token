package
org
.
apache
.
velocity
.
runtime
.
directive
;
import
org
.
apache
.
commons
.
lang
.
text
.
StrBuilder
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
Node
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Token
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Info
;
import
java
.
io
.
Writer
;
import
java
.
io
.
IOException
;
import
java
.
util
.
List
;
public
class
RuntimeMacro
extends
Directive
{
private
String
macroName
;
private
String
sourceTemplate
;
private
String
literal
=
null
;
private
Node
node
=
null
;
protected
boolean
strictRef
=
false
;
public
RuntimeMacro
(
String
macroName
,
String
sourceTemplate
)
{
if
(
macroName
==
null
||
sourceTemplate
==
null
)
{
throw
new
IllegalArgumentException
(
"Null arguments"
)
;
}
this
.
macroName
=
macroName
;
this
.
sourceTemplate
=
sourceTemplate
;
}
public
String
getName
(
)
{
return
macroName
;
}
public
int
getType
(
)
{
return
LINE
;
}
public
void
init
(
RuntimeServices
rs
,
InternalContextAdapter
context
,
Node
node
)
{
super
.
init
(
rs
,
context
,
node
)
;
rsvc
=
rs
;
this
.
node
=
node
;
Token
t
=
node
.
getLastToken
(
)
;
if
(
t
.
image
.
charAt
(
0
)
==
')'
)
{
strictRef
=
rsvc
.
getBoolean
(
RuntimeConstants
.
RUNTIME_REFERENCES_STRICT
,
false
)
;
}
}
private
String
getLiteral
(
)
{
if
(
literal
==
null
)
{
StrBuilder
buffer
=
new
StrBuilder
(
)
;
Token
t
=
node
.
getFirstToken
(
)
;
while
(
t
!=
null
&&
t
!=
node
.
getLastToken
(
)
)
{
buffer
.
append
(
t
.
image
)
;
t
=
t
.
next
;
}
if
(
t
!=
null
)
{
buffer
.
append
(
t
.
image
)
;
}
literal
=
buffer
.
toString
(
)
;
}
return
literal
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
,
Node
node
)
throws
IOException
,
ResourceNotFoundException
,
ParseErrorException
,
MethodInvocationException
{
VelocimacroProxy
vmProxy
=
null
;
String
renderingTemplate
=
context
.
getCurrentTemplateName
(
)
;
Object
o
=
rsvc
.
getVelocimacro
(
macroName
,
sourceTemplate
,
renderingTemplate
)
;
if
(
o
!=
null
)
{
vmProxy
=
(
VelocimacroProxy
)
o
;
}
if
(
vmProxy
==
null
)
{
List
macroLibraries
=
context
.
getMacroLibraries
(
)
;
if
(
macroLibraries
!=
null
)
{
for
(
int
i
=
macroLibraries
.
size
(
)
-
1
;
i
>=
0
;
i
--
)
{
o
=
rsvc
.
getVelocimacro
(
macroName
,
(
String
)
macroLibraries
.
get
(
i
)
,
renderingTemplate
)
;
if
(
o
!=
null
)
{
vmProxy
=
(
VelocimacroProxy
)
o
;
break
;
}
}
}
}
if
(
vmProxy
!=
null
)
{
try
{
vmProxy
.
init
(
rsvc
,
context
,
node
)
;
}
catch
(
TemplateInitException
die
)
{
Info
info
=
new
Info
(
sourceTemplate
,
node
.
getLine
(
)
,
node
.
getColumn
(
)
)
;
throw
new
ParseErrorException
(
die
.
getMessage
(
)
+
" at "
+
Log
.
formatFileString
(
info
)
,
info
)
;
}
try
{
return
vmProxy
.
render
(
context
,
writer
,
node
)
;
}
catch
(
RuntimeException
e
)
{
rsvc
.
getLog
(
)
.
error
(
"Exception in macro #"
+
macroName
+
" at "
+
Log
.
formatFileString
(
sourceTemplate
,
getLine
(
)
,
getColumn
(
)
)
)
;
throw
e
;
}
catch
(
IOException
e
)
{
rsvc
.
getLog
(
)
.
error
(
"Exception in macro #"
+
macroName
+
" at "
+
Log
.
formatFileString
(
sourceTemplate
,
getLine
(
)
,
getColumn
(
)
)
)
;
throw
e
;
}
}
else
if
(
strictRef
)
{
Info
info
=
new
Info
(
sourceTemplate
,
node
.
getLine
(
)
,
node
.
getColumn
(
)
)
;
throw
new
ParseErrorException
(
"Macro '#"
+
macroName
+
"' is not defined at "
+
Log
.
formatFileString
(
info
)
,
info
)
;
}
writer
.
write
(
getLiteral
(
)
)
;
return
true
;
}
}
