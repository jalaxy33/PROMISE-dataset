package
org
.
apache
.
velocity
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
io
.
Writer
;
import
java
.
util
.
List
;
import
org
.
apache
.
velocity
.
context
.
Context
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapterImpl
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
exception
.
VelocityException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParseException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
SimpleNode
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
ResourceManager
;
public
class
Template
extends
Resource
{
private
VelocityException
errorCondition
=
null
;
public
Template
(
)
{
super
(
)
;
setType
(
ResourceManager
.
RESOURCE_TEMPLATE
)
;
}
public
boolean
process
(
)
throws
ResourceNotFoundException
,
ParseErrorException
,
IOException
{
data
=
null
;
InputStream
is
=
null
;
errorCondition
=
null
;
try
{
is
=
resourceLoader
.
getResourceStream
(
name
)
;
}
catch
(
ResourceNotFoundException
rnfe
)
{
errorCondition
=
rnfe
;
throw
rnfe
;
}
if
(
is
!=
null
)
{
try
{
BufferedReader
br
=
new
BufferedReader
(
new
InputStreamReader
(
is
,
encoding
)
)
;
data
=
rsvc
.
parse
(
br
,
name
)
;
initDocument
(
)
;
return
true
;
}
catch
(
UnsupportedEncodingException
uce
)
{
String
msg
=
"Template.process : Unsupported input encoding : "
+
encoding
+
" for template "
+
name
;
errorCondition
=
new
ParseErrorException
(
msg
)
;
throw
errorCondition
;
}
catch
(
ParseException
pex
)
{
errorCondition
=
new
ParseErrorException
(
pex
)
;
throw
errorCondition
;
}
catch
(
TemplateInitException
pex
)
{
errorCondition
=
new
ParseErrorException
(
pex
)
;
throw
errorCondition
;
}
catch
(
RuntimeException
e
)
{
throw
new
RuntimeException
(
"Exception thrown processing Template "
+
getName
(
)
,
e
)
;
}
finally
{
is
.
close
(
)
;
}
}
else
{
errorCondition
=
new
ResourceNotFoundException
(
"Unknown resource error for resource "
+
name
)
;
throw
errorCondition
;
}
}
public
void
initDocument
(
)
throws
TemplateInitException
{
InternalContextAdapterImpl
ica
=
new
InternalContextAdapterImpl
(
new
VelocityContext
(
)
)
;
try
{
ica
.
pushCurrentTemplateName
(
name
)
;
ica
.
setCurrentResource
(
this
)
;
(
(
SimpleNode
)
data
)
.
init
(
ica
,
rsvc
)
;
}
finally
{
ica
.
popCurrentTemplateName
(
)
;
ica
.
setCurrentResource
(
null
)
;
}
}
public
void
merge
(
Context
context
,
Writer
writer
)
throws
ResourceNotFoundException
,
ParseErrorException
,
MethodInvocationException
,
IOException
{
merge
(
context
,
writer
,
null
)
;
}
public
void
merge
(
Context
context
,
Writer
writer
,
List
macroLibraries
)
throws
ResourceNotFoundException
,
ParseErrorException
,
MethodInvocationException
,
IOException
{
if
(
errorCondition
!=
null
)
{
throw
errorCondition
;
}
if
(
data
!=
null
)
{
InternalContextAdapterImpl
ica
=
new
InternalContextAdapterImpl
(
context
)
;
ica
.
setMacroLibraries
(
macroLibraries
)
;
if
(
macroLibraries
!=
null
)
{
for
(
int
i
=
0
;
i
<
macroLibraries
.
size
(
)
;
i
++
)
{
try
{
rsvc
.
getTemplate
(
(
String
)
macroLibraries
.
get
(
i
)
)
;
}
catch
(
ResourceNotFoundException
re
)
{
rsvc
.
getLog
(
)
.
error
(
"template.merge(): "
+
"cannot find template "
+
(
String
)
macroLibraries
.
get
(
i
)
)
;
throw
re
;
}
catch
(
ParseErrorException
pe
)
{
rsvc
.
getLog
(
)
.
error
(
"template.merge(): "
+
"syntax error in template "
+
(
String
)
macroLibraries
.
get
(
i
)
+
"."
)
;
throw
pe
;
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
"Template.merge(): parse failed in template  "
+
(
String
)
macroLibraries
.
get
(
i
)
+
"."
,
e
)
;
}
}
}
try
{
ica
.
pushCurrentTemplateName
(
name
)
;
ica
.
setCurrentResource
(
this
)
;
(
(
SimpleNode
)
data
)
.
render
(
ica
,
writer
)
;
}
finally
{
ica
.
popCurrentTemplateName
(
)
;
ica
.
setCurrentResource
(
null
)
;
}
}
else
{
String
msg
=
"Template.merge() failure. The document is null, "
+
"most likely due to parsing error."
;
throw
new
RuntimeException
(
msg
)
;
}
}
}
