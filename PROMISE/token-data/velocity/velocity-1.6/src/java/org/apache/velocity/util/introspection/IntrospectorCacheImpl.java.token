package
org
.
apache
.
velocity
.
util
.
introspection
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
public
final
class
IntrospectorCacheImpl
implements
IntrospectorCache
{
public
final
static
String
CACHEDUMP_MSG
=
"IntrospectorCache detected classloader change. Dumping cache."
;
private
final
Log
log
;
private
final
Map
classMapCache
=
new
HashMap
(
)
;
private
final
Set
classNameCache
=
new
HashSet
(
)
;
public
IntrospectorCacheImpl
(
final
Log
log
)
{
this
.
log
=
log
;
}
public
void
clear
(
)
{
synchronized
(
classMapCache
)
{
classMapCache
.
clear
(
)
;
classNameCache
.
clear
(
)
;
log
.
debug
(
CACHEDUMP_MSG
)
;
}
}
public
ClassMap
get
(
final
Class
c
)
{
if
(
c
==
null
)
{
throw
new
IllegalArgumentException
(
"class is null!"
)
;
}
ClassMap
classMap
=
(
ClassMap
)
classMapCache
.
get
(
c
)
;
if
(
classMap
==
null
)
{
synchronized
(
classMapCache
)
{
if
(
classNameCache
.
contains
(
c
.
getName
(
)
)
)
{
clear
(
)
;
}
}
}
return
classMap
;
}
public
ClassMap
put
(
final
Class
c
)
{
final
ClassMap
classMap
=
new
ClassMap
(
c
,
log
)
;
synchronized
(
classMapCache
)
{
classMapCache
.
put
(
c
,
classMap
)
;
classNameCache
.
add
(
c
.
getName
(
)
)
;
}
return
classMap
;
}
}
