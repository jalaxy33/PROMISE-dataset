package
org
.
apache
.
velocity
.
runtime
.
log
;
import
java
.
util
.
logging
.
Level
;
import
java
.
util
.
logging
.
Logger
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
public
class
JdkLogChute
implements
LogChute
{
public
static
final
String
RUNTIME_LOG_JDK_LOGGER
=
"runtime.log.logsystem.jdk.logger"
;
public
static
final
String
RUNTIME_LOG_JDK_LOGGER_LEVEL
=
"runtime.log.logsystem.jdk.logger.level"
;
public
static
final
String
DEFAULT_LOG_NAME
=
"org.apache.velocity"
;
protected
Logger
logger
=
null
;
public
void
init
(
RuntimeServices
rs
)
{
String
name
=
(
String
)
rs
.
getProperty
(
RUNTIME_LOG_JDK_LOGGER
)
;
if
(
name
==
null
)
{
name
=
DEFAULT_LOG_NAME
;
}
logger
=
Logger
.
getLogger
(
name
)
;
String
lvl
=
rs
.
getString
(
RUNTIME_LOG_JDK_LOGGER_LEVEL
)
;
if
(
lvl
!=
null
)
{
Level
level
=
Level
.
parse
(
lvl
)
;
logger
.
setLevel
(
level
)
;
log
(
LogChute
.
DEBUG_ID
,
"JdkLogChute will use logger '"
+
name
+
'\''
+
" at level '"
+
level
+
'\''
)
;
}
}
protected
Level
getJdkLevel
(
int
level
)
{
switch
(
level
)
{
case
LogChute
.
WARN_ID
:
return
Level
.
WARNING
;
case
LogChute
.
INFO_ID
:
return
Level
.
INFO
;
case
LogChute
.
DEBUG_ID
:
return
Level
.
FINE
;
case
LogChute
.
TRACE_ID
:
return
Level
.
FINEST
;
case
LogChute
.
ERROR_ID
:
return
Level
.
SEVERE
;
default
:
return
Level
.
FINER
;
}
}
public
void
log
(
int
level
,
String
message
)
{
log
(
level
,
message
,
null
)
;
}
public
void
log
(
int
level
,
String
message
,
Throwable
t
)
{
Level
jdkLevel
=
getJdkLevel
(
level
)
;
if
(
t
==
null
)
{
logger
.
log
(
jdkLevel
,
message
)
;
}
else
{
logger
.
log
(
jdkLevel
,
message
,
t
)
;
}
}
public
boolean
isLevelEnabled
(
int
level
)
{
Level
jdkLevel
=
getJdkLevel
(
level
)
;
return
logger
.
isLoggable
(
jdkLevel
)
;
}
}
