package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
org
.
apache
.
commons
.
lang
.
text
.
StrBuilder
;
import
org
.
apache
.
velocity
.
context
.
Context
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParserConstants
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Token
;
public
class
NodeUtils
{
public
static
String
specialText
(
Token
t
)
{
if
(
t
.
specialToken
==
null
||
t
.
specialToken
.
image
.
startsWith
(
"##"
)
)
{
return
""
;
}
return
getSpecialText
(
t
)
.
toString
(
)
;
}
public
static
StrBuilder
getSpecialText
(
Token
t
)
{
StrBuilder
sb
=
new
StrBuilder
(
)
;
Token
tmp_t
=
t
.
specialToken
;
while
(
tmp_t
.
specialToken
!=
null
)
{
tmp_t
=
tmp_t
.
specialToken
;
}
while
(
tmp_t
!=
null
)
{
String
st
=
tmp_t
.
image
;
for
(
int
i
=
0
,
is
=
st
.
length
(
)
;
i
<
is
;
i
++
)
{
char
c
=
st
.
charAt
(
i
)
;
if
(
c
==
'#'
||
c
==
'$'
)
{
sb
.
append
(
c
)
;
}
if
(
c
==
'\\'
)
{
boolean
ok
=
true
;
boolean
term
=
false
;
int
j
=
i
;
for
(
ok
=
true
;
ok
&&
j
<
is
;
j
++
)
{
char
cc
=
st
.
charAt
(
j
)
;
if
(
cc
==
'\\'
)
{
continue
;
}
else
if
(
cc
==
'$'
)
{
term
=
true
;
ok
=
false
;
}
else
{
ok
=
false
;
}
}
if
(
term
)
{
String
foo
=
st
.
substring
(
i
,
j
)
;
sb
.
append
(
foo
)
;
i
=
j
;
}
}
}
tmp_t
=
tmp_t
.
next
;
}
return
sb
;
}
public
static
String
tokenLiteral
(
Token
t
)
{
if
(
t
.
kind
==
ParserConstants
.
MULTI_LINE_COMMENT
)
{
return
""
;
}
else
if
(
t
.
specialToken
==
null
||
t
.
specialToken
.
image
.
startsWith
(
"##"
)
)
{
return
t
.
image
;
}
else
{
StrBuilder
special
=
getSpecialText
(
t
)
;
if
(
special
.
length
(
)
>
0
)
{
return
special
.
append
(
t
.
image
)
.
toString
(
)
;
}
return
t
.
image
;
}
}
public
static
String
interpolate
(
String
argStr
,
Context
vars
)
throws
MethodInvocationException
{
if
(
argStr
.
indexOf
(
'$'
)
==
-
1
)
return
argStr
;
StrBuilder
argBuf
=
new
StrBuilder
(
)
;
for
(
int
cIdx
=
0
,
is
=
argStr
.
length
(
)
;
cIdx
<
is
;
)
{
char
ch
=
argStr
.
charAt
(
cIdx
)
;
if
(
ch
==
'$'
)
{
StrBuilder
nameBuf
=
new
StrBuilder
(
)
;
for
(
++
cIdx
;
cIdx
<
is
;
++
cIdx
)
{
ch
=
argStr
.
charAt
(
cIdx
)
;
if
(
ch
==
'_'
||
ch
==
'-'
||
Character
.
isLetterOrDigit
(
ch
)
)
nameBuf
.
append
(
ch
)
;
else
if
(
ch
==
'{'
||
ch
==
'}'
)
continue
;
else
break
;
}
if
(
nameBuf
.
length
(
)
>
0
)
{
Object
value
=
vars
.
get
(
nameBuf
.
toString
(
)
)
;
if
(
value
==
null
)
argBuf
.
append
(
"$"
)
.
append
(
nameBuf
.
toString
(
)
)
;
else
argBuf
.
append
(
value
.
toString
(
)
)
;
}
}
else
{
argBuf
.
append
(
ch
)
;
++
cIdx
;
}
}
return
argBuf
.
toString
(
)
;
}
}
