package
org
.
apache
.
velocity
.
util
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Map
;
public
class
MapFactory
{
private
static
Constructor
concurrentHashMapConstructor
;
static
{
try
{
concurrentHashMapConstructor
=
Class
.
forName
(
"java.util.concurrent.ConcurrentHashMap"
)
.
getConstructor
(
new
Class
[
]
{
int
.
class
,
float
.
class
,
int
.
class
}
)
;
}
catch
(
Exception
ex
)
{
}
}
public
static
Map
create
(
int
size
,
float
loadFactor
,
int
concurrencyLevel
,
boolean
allowNullKeys
)
{
Map
map
=
null
;
if
(
concurrencyLevel
<=
1
)
{
map
=
new
HashMap
(
size
,
loadFactor
)
;
}
else
{
if
(
concurrentHashMapConstructor
!=
null
)
{
try
{
map
=
(
Map
)
concurrentHashMapConstructor
.
newInstance
(
new
Object
[
]
{
new
Integer
(
size
)
,
new
Float
(
loadFactor
)
,
new
Integer
(
concurrencyLevel
)
}
)
;
}
catch
(
Exception
ex
)
{
throw
new
RuntimeException
(
"this should not happen"
,
ex
)
;
}
}
else
{
if
(
allowNullKeys
)
{
map
=
Collections
.
synchronizedMap
(
new
HashMap
(
size
,
loadFactor
)
)
;
}
else
{
map
=
new
Hashtable
(
size
,
loadFactor
)
;
}
}
}
return
map
;
}
}
