package
org
.
apache
.
velocity
.
anakia
;
import
java
.
io
.
IOException
;
import
java
.
io
.
StringWriter
;
import
java
.
io
.
Writer
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
ListIterator
;
import
org
.
jdom
.
Attribute
;
import
org
.
jdom
.
CDATA
;
import
org
.
jdom
.
Comment
;
import
org
.
jdom
.
DocType
;
import
org
.
jdom
.
Document
;
import
org
.
jdom
.
Element
;
import
org
.
jdom
.
EntityRef
;
import
org
.
jdom
.
ProcessingInstruction
;
import
org
.
jdom
.
Text
;
import
org
.
jdom
.
output
.
XMLOutputter
;
public
class
NodeList
implements
List
,
Cloneable
{
private
static
final
AttributeXMLOutputter
DEFAULT_OUTPUTTER
=
new
AttributeXMLOutputter
(
)
;
private
List
nodes
;
public
NodeList
(
)
{
nodes
=
new
ArrayList
(
)
;
}
public
NodeList
(
Document
document
)
{
this
(
(
Object
)
document
)
;
}
public
NodeList
(
Element
element
)
{
this
(
(
Object
)
element
)
;
}
private
NodeList
(
Object
object
)
{
if
(
object
==
null
)
{
throw
new
IllegalArgumentException
(
"Cannot construct NodeList with null."
)
;
}
nodes
=
new
ArrayList
(
1
)
;
nodes
.
add
(
object
)
;
}
public
NodeList
(
List
nodes
)
{
this
(
nodes
,
true
)
;
}
public
NodeList
(
List
nodes
,
boolean
copy
)
{
if
(
nodes
==
null
)
{
throw
new
IllegalArgumentException
(
"Cannot initialize NodeList with null list"
)
;
}
this
.
nodes
=
copy
?
new
ArrayList
(
nodes
)
:
nodes
;
}
public
List
getList
(
)
{
return
nodes
;
}
public
String
toString
(
)
{
if
(
nodes
.
isEmpty
(
)
)
{
return
""
;
}
StringWriter
sw
=
new
StringWriter
(
nodes
.
size
(
)
*
128
)
;
try
{
for
(
Iterator
i
=
nodes
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
Object
node
=
i
.
next
(
)
;
if
(
node
instanceof
Element
)
{
DEFAULT_OUTPUTTER
.
output
(
(
Element
)
node
,
sw
)
;
}
else
if
(
node
instanceof
Attribute
)
{
DEFAULT_OUTPUTTER
.
output
(
(
Attribute
)
node
,
sw
)
;
}
else
if
(
node
instanceof
Text
)
{
DEFAULT_OUTPUTTER
.
output
(
(
Text
)
node
,
sw
)
;
}
else
if
(
node
instanceof
Document
)
{
DEFAULT_OUTPUTTER
.
output
(
(
Document
)
node
,
sw
)
;
}
else
if
(
node
instanceof
ProcessingInstruction
)
{
DEFAULT_OUTPUTTER
.
output
(
(
ProcessingInstruction
)
node
,
sw
)
;
}
else
if
(
node
instanceof
Comment
)
{
DEFAULT_OUTPUTTER
.
output
(
(
Comment
)
node
,
sw
)
;
}
else
if
(
node
instanceof
CDATA
)
{
DEFAULT_OUTPUTTER
.
output
(
(
CDATA
)
node
,
sw
)
;
}
else
if
(
node
instanceof
DocType
)
{
DEFAULT_OUTPUTTER
.
output
(
(
DocType
)
node
,
sw
)
;
}
else
if
(
node
instanceof
EntityRef
)
{
DEFAULT_OUTPUTTER
.
output
(
(
EntityRef
)
node
,
sw
)
;
}
else
{
throw
new
IllegalArgumentException
(
"Cannot process a "
+
(
node
==
null
?
"null node"
:
"node of class "
+
node
.
getClass
(
)
.
getName
(
)
)
)
;
}
}
}
catch
(
IOException
e
)
{
throw
new
Error
(
)
;
}
return
sw
.
toString
(
)
;
}
public
Object
clone
(
)
throws
CloneNotSupportedException
{
NodeList
clonedList
=
(
NodeList
)
super
.
clone
(
)
;
clonedList
.
cloneNodes
(
)
;
return
clonedList
;
}
private
void
cloneNodes
(
)
throws
CloneNotSupportedException
{
Class
listClass
=
nodes
.
getClass
(
)
;
try
{
List
clonedNodes
=
(
List
)
listClass
.
newInstance
(
)
;
clonedNodes
.
addAll
(
nodes
)
;
nodes
=
clonedNodes
;
}
catch
(
IllegalAccessException
e
)
{
throw
new
CloneNotSupportedException
(
"Cannot clone NodeList since"
+
" there is no accessible no-arg constructor on class "
+
listClass
.
getName
(
)
)
;
}
catch
(
InstantiationException
e
)
{
throw
new
Error
(
)
;
}
}
public
int
hashCode
(
)
{
return
nodes
.
hashCode
(
)
;
}
public
boolean
equals
(
Object
o
)
{
return
o
instanceof
NodeList
?
(
(
NodeList
)
o
)
.
nodes
.
equals
(
nodes
)
:
false
;
}
public
NodeList
selectNodes
(
String
xpathString
)
{
return
new
NodeList
(
XPathCache
.
getXPath
(
xpathString
)
.
applyTo
(
nodes
)
,
false
)
;
}
public
boolean
add
(
Object
o
)
{
return
nodes
.
add
(
o
)
;
}
public
void
add
(
int
index
,
Object
o
)
{
nodes
.
add
(
index
,
o
)
;
}
public
boolean
addAll
(
Collection
c
)
{
return
nodes
.
addAll
(
c
)
;
}
public
boolean
addAll
(
int
index
,
Collection
c
)
{
return
nodes
.
addAll
(
index
,
c
)
;
}
public
void
clear
(
)
{
nodes
.
clear
(
)
;
}
public
boolean
contains
(
Object
o
)
{
return
nodes
.
contains
(
o
)
;
}
public
boolean
containsAll
(
Collection
c
)
{
return
nodes
.
containsAll
(
c
)
;
}
public
Object
get
(
int
index
)
{
return
nodes
.
get
(
index
)
;
}
public
int
indexOf
(
Object
o
)
{
return
nodes
.
indexOf
(
o
)
;
}
public
boolean
isEmpty
(
)
{
return
nodes
.
isEmpty
(
)
;
}
public
Iterator
iterator
(
)
{
return
nodes
.
iterator
(
)
;
}
public
int
lastIndexOf
(
Object
o
)
{
return
nodes
.
lastIndexOf
(
o
)
;
}
public
ListIterator
listIterator
(
)
{
return
nodes
.
listIterator
(
)
;
}
public
ListIterator
listIterator
(
int
index
)
{
return
nodes
.
listIterator
(
index
)
;
}
public
Object
remove
(
int
index
)
{
return
nodes
.
remove
(
index
)
;
}
public
boolean
remove
(
Object
o
)
{
return
nodes
.
remove
(
o
)
;
}
public
boolean
removeAll
(
Collection
c
)
{
return
nodes
.
removeAll
(
c
)
;
}
public
boolean
retainAll
(
Collection
c
)
{
return
nodes
.
retainAll
(
c
)
;
}
public
Object
set
(
int
index
,
Object
o
)
{
return
nodes
.
set
(
index
,
o
)
;
}
public
int
size
(
)
{
return
nodes
.
size
(
)
;
}
public
List
subList
(
int
fromIndex
,
int
toIndex
)
{
return
new
NodeList
(
nodes
.
subList
(
fromIndex
,
toIndex
)
)
;
}
public
Object
[
]
toArray
(
)
{
return
nodes
.
toArray
(
)
;
}
public
Object
[
]
toArray
(
Object
[
]
a
)
{
return
nodes
.
toArray
(
a
)
;
}
private
static
final
class
AttributeXMLOutputter
extends
XMLOutputter
{
public
void
output
(
Attribute
attribute
,
Writer
out
)
throws
IOException
{
out
.
write
(
" "
)
;
out
.
write
(
attribute
.
getQualifiedName
(
)
)
;
out
.
write
(
"="
)
;
out
.
write
(
"\""
)
;
out
.
write
(
escapeAttributeEntities
(
attribute
.
getValue
(
)
)
)
;
out
.
write
(
"\""
)
;
}
}
}
