package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
util
.
TemplateNumber
;
public
class
ASTEQNode
extends
SimpleNode
{
public
ASTEQNode
(
int
id
)
{
super
(
id
)
;
}
public
ASTEQNode
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
boolean
evaluate
(
InternalContextAdapter
context
)
throws
MethodInvocationException
{
Object
left
=
jjtGetChild
(
0
)
.
value
(
context
)
;
Object
right
=
jjtGetChild
(
1
)
.
value
(
context
)
;
if
(
left
instanceof
TemplateNumber
)
{
left
=
(
(
TemplateNumber
)
left
)
.
getAsNumber
(
)
;
}
if
(
right
instanceof
TemplateNumber
)
{
right
=
(
(
TemplateNumber
)
right
)
.
getAsNumber
(
)
;
}
if
(
left
instanceof
Number
&&
right
instanceof
Number
)
{
return
MathUtils
.
compare
(
(
Number
)
left
,
(
Number
)
right
)
==
0
;
}
if
(
left
!=
null
&&
right
!=
null
&&
(
left
.
getClass
(
)
.
isAssignableFrom
(
right
.
getClass
(
)
)
||
right
.
getClass
(
)
.
isAssignableFrom
(
left
.
getClass
(
)
)
)
)
{
return
left
.
equals
(
right
)
;
}
left
=
(
left
==
null
)
?
null
:
left
.
toString
(
)
;
right
=
(
right
==
null
)
?
null
:
right
.
toString
(
)
;
if
(
left
==
null
&&
right
==
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Both right ("
+
getLiteral
(
false
)
+
" and left "
+
getLiteral
(
true
)
+
" sides of '==' operation returned null."
+
"If references, they may not be in the context."
+
getLocation
(
context
)
)
;
}
return
true
;
}
else
if
(
left
==
null
||
right
==
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
(
left
==
null
?
"Left"
:
"Right"
)
+
" side ("
+
getLiteral
(
left
==
null
)
+
") of '==' operation has null value. If it is a "
+
"reference, it may not be in the context or its "
+
"toString() returned null. "
+
getLocation
(
context
)
)
;
}
return
false
;
}
else
{
return
left
.
equals
(
right
)
;
}
}
private
String
getLiteral
(
boolean
left
)
{
return
jjtGetChild
(
left
?
0
:
1
)
.
literal
(
)
;
}
public
Object
value
(
InternalContextAdapter
context
)
throws
MethodInvocationException
{
return
evaluate
(
context
)
?
Boolean
.
TRUE
:
Boolean
.
FALSE
;
}
}
