package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MathException
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
util
.
TemplateNumber
;
public
abstract
class
ASTMathNode
extends
SimpleNode
{
protected
boolean
strictMode
=
false
;
public
ASTMathNode
(
int
id
)
{
super
(
id
)
;
}
public
ASTMathNode
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
TemplateInitException
{
super
.
init
(
context
,
data
)
;
strictMode
=
rsvc
.
getBoolean
(
RuntimeConstants
.
STRICT_MATH
,
false
)
;
return
data
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
value
(
InternalContextAdapter
context
)
throws
MethodInvocationException
{
Object
left
=
jjtGetChild
(
0
)
.
value
(
context
)
;
Object
right
=
jjtGetChild
(
1
)
.
value
(
context
)
;
Object
special
=
handleSpecial
(
left
,
right
,
context
)
;
if
(
special
!=
null
)
{
return
special
;
}
if
(
left
instanceof
TemplateNumber
)
{
left
=
(
(
TemplateNumber
)
left
)
.
getAsNumber
(
)
;
}
if
(
right
instanceof
TemplateNumber
)
{
right
=
(
(
TemplateNumber
)
right
)
.
getAsNumber
(
)
;
}
if
(
!
(
left
instanceof
Number
)
||
!
(
right
instanceof
Number
)
)
{
boolean
wrongright
=
(
left
instanceof
Number
)
;
boolean
wrongtype
=
wrongright
?
right
!=
null
:
left
!=
null
;
String
msg
=
(
wrongright
?
"Right"
:
"Left"
)
+
" side of math operation ("
+
jjtGetChild
(
wrongright
?
1
:
0
)
.
literal
(
)
+
") "
+
(
wrongtype
?
"is not a Number. "
:
"has a null value. "
)
+
getLocation
(
context
)
;
if
(
strictMode
)
{
log
.
error
(
msg
)
;
throw
new
MathException
(
msg
)
;
}
else
{
log
.
debug
(
msg
)
;
return
null
;
}
}
return
perform
(
(
Number
)
left
,
(
Number
)
right
,
context
)
;
}
protected
Object
handleSpecial
(
Object
left
,
Object
right
,
InternalContextAdapter
context
)
{
return
null
;
}
public
abstract
Number
perform
(
Number
left
,
Number
right
,
InternalContextAdapter
context
)
;
}
