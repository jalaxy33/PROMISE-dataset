package
org
.
apache
.
velocity
.
runtime
.
directive
;
import
java
.
io
.
Writer
;
import
java
.
io
.
IOException
;
import
java
.
io
.
StringWriter
;
import
org
.
apache
.
commons
.
lang
.
text
.
StrBuilder
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
exception
.
VelocityException
;
import
org
.
apache
.
velocity
.
runtime
.
Renderable
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
Node
;
public
class
Define
extends
Directive
{
private
String
key
;
private
Node
block
;
private
Log
log
;
private
int
maxDepth
;
private
String
definingTemplate
;
public
String
getName
(
)
{
return
"define"
;
}
public
int
getType
(
)
{
return
BLOCK
;
}
public
void
init
(
RuntimeServices
rs
,
InternalContextAdapter
context
,
Node
node
)
throws
TemplateInitException
{
super
.
init
(
rs
,
context
,
node
)
;
log
=
rs
.
getLog
(
)
;
maxDepth
=
rs
.
getInt
(
RuntimeConstants
.
DEFINE_DIRECTIVE_MAXDEPTH
,
2
)
;
key
=
node
.
jjtGetChild
(
0
)
.
getFirstToken
(
)
.
image
.
substring
(
1
)
;
block
=
node
.
jjtGetChild
(
1
)
;
definingTemplate
=
context
.
getCurrentTemplateName
(
)
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
,
Node
node
)
{
context
.
put
(
key
,
new
Block
(
context
,
this
)
)
;
return
true
;
}
protected
String
id
(
InternalContextAdapter
context
)
{
StrBuilder
str
=
new
StrBuilder
(
100
)
.
append
(
"block $"
)
.
append
(
key
)
.
append
(
" (defined in "
)
.
append
(
definingTemplate
)
.
append
(
" [line "
)
.
append
(
getLine
(
)
)
.
append
(
", column "
)
.
append
(
getColumn
(
)
)
.
append
(
"])"
)
;
if
(
!
context
.
getCurrentTemplateName
(
)
.
equals
(
definingTemplate
)
)
{
str
.
append
(
" used in "
)
.
append
(
context
.
getCurrentTemplateName
(
)
)
;
}
return
str
.
toString
(
)
;
}
public
static
class
Block
implements
Renderable
{
private
InternalContextAdapter
context
;
private
Define
parent
;
private
int
depth
;
public
Block
(
InternalContextAdapter
context
,
Define
parent
)
{
this
.
context
=
context
;
this
.
parent
=
parent
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
)
{
try
{
depth
++
;
if
(
depth
>
parent
.
maxDepth
)
{
parent
.
log
.
debug
(
"Max recursion depth reached for "
+
parent
.
id
(
context
)
)
;
depth
--
;
return
false
;
}
else
{
parent
.
block
.
render
(
context
,
writer
)
;
depth
--
;
return
true
;
}
}
catch
(
IOException
e
)
{
String
msg
=
"Failed to render "
+
parent
.
id
(
context
)
+
" to writer"
;
parent
.
log
.
error
(
msg
,
e
)
;
throw
new
RuntimeException
(
msg
,
e
)
;
}
catch
(
VelocityException
ve
)
{
String
msg
=
"Failed to render "
+
parent
.
id
(
context
)
+
" due to "
+
ve
;
parent
.
log
.
error
(
msg
,
ve
)
;
throw
ve
;
}
}
public
String
toString
(
)
{
Writer
stringwriter
=
new
StringWriter
(
)
;
if
(
render
(
context
,
stringwriter
)
)
{
return
stringwriter
.
toString
(
)
;
}
else
{
return
null
;
}
}
}
}
