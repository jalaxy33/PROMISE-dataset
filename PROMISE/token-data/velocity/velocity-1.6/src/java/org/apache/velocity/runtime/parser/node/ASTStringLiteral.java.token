package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
io
.
IOException
;
import
java
.
io
.
StringReader
;
import
java
.
io
.
StringWriter
;
import
org
.
apache
.
commons
.
lang
.
text
.
StrBuilder
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
exception
.
VelocityException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParseException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Token
;
import
org
.
apache
.
velocity
.
runtime
.
visitor
.
BaseVisitor
;
public
class
ASTStringLiteral
extends
SimpleNode
{
private
boolean
interpolate
=
true
;
private
SimpleNode
nodeTree
=
null
;
private
String
image
=
""
;
private
String
interpolateimage
=
""
;
private
boolean
containsLineComment
;
public
ASTStringLiteral
(
int
id
)
{
super
(
id
)
;
}
public
ASTStringLiteral
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
TemplateInitException
{
super
.
init
(
context
,
data
)
;
interpolate
=
rsvc
.
getBoolean
(
RuntimeConstants
.
INTERPOLATE_STRINGLITERALS
,
true
)
&&
getFirstToken
(
)
.
image
.
startsWith
(
"\""
)
&&
(
(
getFirstToken
(
)
.
image
.
indexOf
(
'$'
)
!=
-
1
)
||
(
getFirstToken
(
)
.
image
.
indexOf
(
'#'
)
!=
-
1
)
)
;
image
=
getFirstToken
(
)
.
image
.
substring
(
1
,
getFirstToken
(
)
.
image
.
length
(
)
-
1
)
;
if
(
getFirstToken
(
)
.
image
.
startsWith
(
"\""
)
)
{
image
=
unescape
(
image
)
;
}
containsLineComment
=
(
image
.
indexOf
(
"##"
)
!=
-
1
)
;
if
(
!
containsLineComment
)
{
interpolateimage
=
image
+
" "
;
}
else
{
interpolateimage
=
image
;
}
if
(
interpolate
)
{
StringReader
br
=
new
StringReader
(
interpolateimage
)
;
String
templateName
=
(
context
!=
null
)
?
context
.
getCurrentTemplateName
(
)
:
"StringLiteral"
;
try
{
nodeTree
=
rsvc
.
parse
(
br
,
templateName
,
false
)
;
}
catch
(
ParseException
e
)
{
String
msg
=
"Failed to parse String literal at "
+
Log
.
formatFileString
(
templateName
,
getLine
(
)
,
getColumn
(
)
)
;
throw
new
TemplateInitException
(
msg
,
e
,
templateName
,
getColumn
(
)
,
getLine
(
)
)
;
}
adjTokenLineNums
(
nodeTree
)
;
nodeTree
.
init
(
context
,
rsvc
)
;
}
return
data
;
}
public
void
adjTokenLineNums
(
Node
node
)
{
Token
tok
=
node
.
getFirstToken
(
)
;
while
(
tok
!=
null
&&
tok
!=
node
.
getLastToken
(
)
)
{
if
(
tok
.
beginLine
==
1
)
tok
.
beginColumn
+=
getColumn
(
)
;
if
(
tok
.
endLine
==
1
)
tok
.
endColumn
+=
getColumn
(
)
;
tok
.
beginLine
+=
getLine
(
)
-
1
;
tok
.
endLine
+=
getLine
(
)
-
1
;
tok
=
tok
.
next
;
}
}
public
static
String
unescape
(
final
String
string
)
{
int
u
=
string
.
indexOf
(
"\\u"
)
;
if
(
u
<
0
)
return
string
;
StrBuilder
result
=
new
StrBuilder
(
)
;
int
lastCopied
=
0
;
for
(
;
;
)
{
result
.
append
(
string
.
substring
(
lastCopied
,
u
)
)
;
char
c
=
(
char
)
Integer
.
parseInt
(
string
.
substring
(
u
+
2
,
u
+
6
)
,
16
)
;
result
.
append
(
c
)
;
lastCopied
=
u
+
6
;
u
=
string
.
indexOf
(
"\\u"
,
lastCopied
)
;
if
(
u
<
0
)
{
result
.
append
(
string
.
substring
(
lastCopied
)
)
;
return
result
.
toString
(
)
;
}
}
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
boolean
isConstant
(
)
{
return
!
interpolate
;
}
public
Object
value
(
InternalContextAdapter
context
)
{
if
(
interpolate
)
{
try
{
StringWriter
writer
=
new
StringWriter
(
)
;
nodeTree
.
render
(
context
,
writer
)
;
String
ret
=
writer
.
toString
(
)
;
if
(
!
containsLineComment
&&
ret
.
length
(
)
>
0
)
{
return
ret
.
substring
(
0
,
ret
.
length
(
)
-
1
)
;
}
else
{
return
ret
;
}
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
IOException
e
)
{
String
msg
=
"Error in interpolating string literal"
;
log
.
error
(
msg
,
e
)
;
throw
new
VelocityException
(
msg
,
e
)
;
}
}
return
image
;
}
}
