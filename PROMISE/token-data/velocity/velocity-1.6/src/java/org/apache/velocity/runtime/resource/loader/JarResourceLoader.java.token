package
org
.
apache
.
velocity
.
runtime
.
resource
.
loader
;
import
java
.
io
.
InputStream
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Map
;
import
java
.
util
.
HashMap
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
commons
.
collections
.
ExtendedProperties
;
public
class
JarResourceLoader
extends
ResourceLoader
{
private
Map
entryDirectory
=
new
HashMap
(
559
)
;
private
Map
jarfiles
=
new
HashMap
(
89
)
;
public
void
init
(
ExtendedProperties
configuration
)
{
log
.
trace
(
"JarResourceLoader : initialization starting."
)
;
Vector
paths
=
configuration
.
getVector
(
"path"
)
;
StringUtils
.
trimStrings
(
paths
)
;
if
(
paths
==
null
||
paths
.
size
(
)
==
0
)
{
paths
=
configuration
.
getVector
(
"resource.path"
)
;
StringUtils
.
trimStrings
(
paths
)
;
if
(
paths
!=
null
&&
paths
.
size
(
)
>
0
)
{
log
.
debug
(
"JarResourceLoader : you are using a deprecated configuration"
+
" property for the JarResourceLoader -> '<name>.resource.loader.resource.path'."
+
" Please change to the conventional '<name>.resource.loader.path'."
)
;
}
}
if
(
paths
!=
null
)
{
log
.
debug
(
"JarResourceLoader # of paths : "
+
paths
.
size
(
)
)
;
for
(
int
i
=
0
;
i
<
paths
.
size
(
)
;
i
++
)
{
loadJar
(
(
String
)
paths
.
get
(
i
)
)
;
}
}
log
.
trace
(
"JarResourceLoader : initialization complete."
)
;
}
private
void
loadJar
(
String
path
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"JarResourceLoader : trying to load \""
+
path
+
"\""
)
;
}
if
(
path
==
null
)
{
String
msg
=
"JarResourceLoader : can not load JAR - JAR path is null"
;
log
.
error
(
msg
)
;
throw
new
RuntimeException
(
msg
)
;
}
if
(
!
path
.
startsWith
(
"jar:"
)
)
{
String
msg
=
"JarResourceLoader : JAR path must start with jar: -> see java.net.JarURLConnection for information"
;
log
.
error
(
msg
)
;
throw
new
RuntimeException
(
msg
)
;
}
if
(
path
.
indexOf
(
"!/"
)
<
0
)
{
path
+=
"!/"
;
}
closeJar
(
path
)
;
JarHolder
temp
=
new
JarHolder
(
rsvc
,
path
)
;
addEntries
(
temp
.
getEntries
(
)
)
;
jarfiles
.
put
(
temp
.
getUrlPath
(
)
,
temp
)
;
}
private
void
closeJar
(
String
path
)
{
if
(
jarfiles
.
containsKey
(
path
)
)
{
JarHolder
theJar
=
(
JarHolder
)
jarfiles
.
get
(
path
)
;
theJar
.
close
(
)
;
}
}
private
void
addEntries
(
Hashtable
entries
)
{
entryDirectory
.
putAll
(
entries
)
;
}
public
InputStream
getResourceStream
(
String
source
)
throws
ResourceNotFoundException
{
InputStream
results
=
null
;
if
(
org
.
apache
.
commons
.
lang
.
StringUtils
.
isEmpty
(
source
)
)
{
throw
new
ResourceNotFoundException
(
"Need to have a resource!"
)
;
}
String
normalizedPath
=
StringUtils
.
normalizePath
(
source
)
;
if
(
normalizedPath
==
null
||
normalizedPath
.
length
(
)
==
0
)
{
String
msg
=
"JAR resource error : argument "
+
normalizedPath
+
" contains .. and may be trying to access "
+
"content outside of template root.  Rejected."
;
log
.
error
(
"JarResourceLoader : "
+
msg
)
;
throw
new
ResourceNotFoundException
(
msg
)
;
}
if
(
normalizedPath
.
startsWith
(
"/"
)
)
{
normalizedPath
=
normalizedPath
.
substring
(
1
)
;
}
if
(
entryDirectory
.
containsKey
(
normalizedPath
)
)
{
String
jarurl
=
(
String
)
entryDirectory
.
get
(
normalizedPath
)
;
if
(
jarfiles
.
containsKey
(
jarurl
)
)
{
JarHolder
holder
=
(
JarHolder
)
jarfiles
.
get
(
jarurl
)
;
results
=
holder
.
getResource
(
normalizedPath
)
;
return
results
;
}
}
throw
new
ResourceNotFoundException
(
"JarResourceLoader Error: cannot find resource "
+
source
)
;
}
public
boolean
isSourceModified
(
Resource
resource
)
{
return
true
;
}
public
long
getLastModified
(
Resource
resource
)
{
return
0
;
}
}
