package
org
.
apache
.
velocity
.
runtime
.
directive
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
org
.
apache
.
velocity
.
context
.
EvaluateContext
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapterImpl
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParseException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParserTreeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
Node
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
SimpleNode
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Info
;
public
class
Evaluate
extends
Directive
{
public
String
getName
(
)
{
return
"evaluate"
;
}
public
int
getType
(
)
{
return
LINE
;
}
public
void
init
(
RuntimeServices
rs
,
InternalContextAdapter
context
,
Node
node
)
throws
TemplateInitException
{
super
.
init
(
rs
,
context
,
node
)
;
int
argCount
=
node
.
jjtGetNumChildren
(
)
;
if
(
argCount
==
0
)
{
throw
new
TemplateInitException
(
"#"
+
getName
(
)
+
"() requires exactly one argument"
,
context
.
getCurrentTemplateName
(
)
,
node
.
getColumn
(
)
,
node
.
getLine
(
)
)
;
}
if
(
argCount
>
1
)
{
throw
new
TemplateInitException
(
"#"
+
getName
(
)
+
"() requires exactly one argument"
,
context
.
getCurrentTemplateName
(
)
,
node
.
jjtGetChild
(
1
)
.
getColumn
(
)
,
node
.
jjtGetChild
(
1
)
.
getLine
(
)
)
;
}
Node
childNode
=
node
.
jjtGetChild
(
0
)
;
if
(
childNode
.
getType
(
)
!=
ParserTreeConstants
.
JJTSTRINGLITERAL
&&
childNode
.
getType
(
)
!=
ParserTreeConstants
.
JJTREFERENCE
)
{
throw
new
TemplateInitException
(
"#"
+
getName
(
)
+
"()  argument must be a string literal or reference"
,
context
.
getCurrentTemplateName
(
)
,
childNode
.
getColumn
(
)
,
childNode
.
getLine
(
)
)
;
}
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
,
Node
node
)
throws
IOException
,
ResourceNotFoundException
,
ParseErrorException
,
MethodInvocationException
{
Object
value
=
node
.
jjtGetChild
(
0
)
.
value
(
context
)
;
String
sourceText
;
if
(
value
!=
null
)
{
sourceText
=
value
.
toString
(
)
;
}
else
{
sourceText
=
""
;
}
String
templateName
=
context
.
getCurrentTemplateName
(
)
;
SimpleNode
nodeTree
=
null
;
try
{
nodeTree
=
rsvc
.
parse
(
sourceText
,
templateName
)
;
}
catch
(
ParseException
pex
)
{
Info
info
=
new
Info
(
templateName
,
node
.
getLine
(
)
,
node
.
getColumn
(
)
)
;
throw
new
ParseErrorException
(
pex
.
getMessage
(
)
,
info
)
;
}
catch
(
TemplateInitException
pex
)
{
Info
info
=
new
Info
(
templateName
,
node
.
getLine
(
)
,
node
.
getColumn
(
)
)
;
throw
new
ParseErrorException
(
pex
.
getMessage
(
)
,
info
)
;
}
if
(
nodeTree
!=
null
)
{
InternalContextAdapterImpl
ica
=
new
InternalContextAdapterImpl
(
new
EvaluateContext
(
context
,
rsvc
)
)
;
ica
.
pushCurrentTemplateName
(
templateName
)
;
try
{
try
{
nodeTree
.
init
(
ica
,
rsvc
)
;
}
catch
(
TemplateInitException
pex
)
{
Info
info
=
new
Info
(
templateName
,
node
.
getLine
(
)
,
node
.
getColumn
(
)
)
;
throw
new
ParseErrorException
(
pex
.
getMessage
(
)
,
info
)
;
}
try
{
nodeTree
.
render
(
ica
,
writer
)
;
}
catch
(
ParseErrorException
pex
)
{
Info
info
=
new
Info
(
templateName
,
node
.
getLine
(
)
,
node
.
getColumn
(
)
)
;
throw
new
ParseErrorException
(
pex
.
getMessage
(
)
,
info
)
;
}
}
finally
{
ica
.
popCurrentTemplateName
(
)
;
}
return
true
;
}
return
false
;
}
}
