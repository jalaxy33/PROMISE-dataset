package
org
.
apache
.
velocity
.
util
.
introspection
;
import
java
.
lang
.
reflect
.
Method
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
public
abstract
class
IntrospectorBase
{
protected
final
Log
log
;
private
final
IntrospectorCache
introspectorCache
;
protected
IntrospectorBase
(
final
Log
log
)
{
this
.
log
=
log
;
introspectorCache
=
new
IntrospectorCacheImpl
(
log
)
;
}
public
Method
getMethod
(
final
Class
c
,
final
String
name
,
final
Object
[
]
params
)
throws
IllegalArgumentException
,
MethodMap
.
AmbiguousException
{
if
(
c
==
null
)
{
throw
new
IllegalArgumentException
(
"class object is null!"
)
;
}
if
(
params
==
null
)
{
throw
new
IllegalArgumentException
(
"params object is null!"
)
;
}
IntrospectorCache
ic
=
getIntrospectorCache
(
)
;
ClassMap
classMap
=
ic
.
get
(
c
)
;
if
(
classMap
==
null
)
{
classMap
=
ic
.
put
(
c
)
;
}
return
classMap
.
findMethod
(
name
,
params
)
;
}
protected
IntrospectorCache
getIntrospectorCache
(
)
{
return
introspectorCache
;
}
}
