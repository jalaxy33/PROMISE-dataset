package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
org
.
apache
.
commons
.
lang
.
builder
.
ToStringBuilder
;
import
org
.
apache
.
commons
.
lang
.
text
.
StrBuilder
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Token
;
public
class
SimpleNode
implements
Node
{
protected
RuntimeServices
rsvc
=
null
;
protected
Log
log
=
null
;
protected
Node
parent
;
protected
Node
[
]
children
;
protected
int
id
;
protected
Parser
parser
;
protected
int
info
;
public
boolean
state
;
protected
boolean
invalid
=
false
;
protected
Token
first
;
protected
Token
last
;
protected
String
templateName
;
public
SimpleNode
(
int
i
)
{
id
=
i
;
}
public
SimpleNode
(
Parser
p
,
int
i
)
{
this
(
i
)
;
parser
=
p
;
templateName
=
parser
.
currentTemplateName
;
}
public
void
jjtOpen
(
)
{
first
=
parser
.
getToken
(
1
)
;
}
public
void
jjtClose
(
)
{
last
=
parser
.
getToken
(
0
)
;
}
public
void
setFirstToken
(
Token
t
)
{
this
.
first
=
t
;
}
public
Token
getFirstToken
(
)
{
return
first
;
}
public
Token
getLastToken
(
)
{
return
last
;
}
public
void
jjtSetParent
(
Node
n
)
{
parent
=
n
;
}
public
Node
jjtGetParent
(
)
{
return
parent
;
}
public
void
jjtAddChild
(
Node
n
,
int
i
)
{
if
(
children
==
null
)
{
children
=
new
Node
[
i
+
1
]
;
}
else
if
(
i
>=
children
.
length
)
{
Node
c
[
]
=
new
Node
[
i
+
1
]
;
System
.
arraycopy
(
children
,
0
,
c
,
0
,
children
.
length
)
;
children
=
c
;
}
children
[
i
]
=
n
;
}
public
Node
jjtGetChild
(
int
i
)
{
return
children
[
i
]
;
}
public
int
jjtGetNumChildren
(
)
{
return
(
children
==
null
)
?
0
:
children
.
length
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
childrenAccept
(
ParserVisitor
visitor
,
Object
data
)
{
if
(
children
!=
null
)
{
for
(
int
i
=
0
;
i
<
children
.
length
;
++
i
)
{
children
[
i
]
.
jjtAccept
(
visitor
,
data
)
;
}
}
return
data
;
}
public
String
toString
(
String
prefix
)
{
return
prefix
+
toString
(
)
;
}
public
void
dump
(
String
prefix
)
{
System
.
out
.
println
(
toString
(
prefix
)
)
;
if
(
children
!=
null
)
{
for
(
int
i
=
0
;
i
<
children
.
length
;
++
i
)
{
SimpleNode
n
=
(
SimpleNode
)
children
[
i
]
;
if
(
n
!=
null
)
{
n
.
dump
(
prefix
+
" "
)
;
}
}
}
}
protected
String
getLocation
(
InternalContextAdapter
context
)
{
return
Log
.
formatFileString
(
this
)
;
}
public
String
literal
(
)
{
if
(
first
==
last
)
{
return
NodeUtils
.
tokenLiteral
(
first
)
;
}
Token
t
=
first
;
StrBuilder
sb
=
new
StrBuilder
(
NodeUtils
.
tokenLiteral
(
t
)
)
;
while
(
t
!=
last
)
{
t
=
t
.
next
;
sb
.
append
(
NodeUtils
.
tokenLiteral
(
t
)
)
;
}
return
sb
.
toString
(
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
TemplateInitException
{
rsvc
=
(
RuntimeServices
)
data
;
log
=
rsvc
.
getLog
(
)
;
int
i
,
k
=
jjtGetNumChildren
(
)
;
for
(
i
=
0
;
i
<
k
;
i
++
)
{
jjtGetChild
(
i
)
.
init
(
context
,
data
)
;
}
return
data
;
}
public
boolean
evaluate
(
InternalContextAdapter
context
)
throws
MethodInvocationException
{
return
false
;
}
public
Object
value
(
InternalContextAdapter
context
)
throws
MethodInvocationException
{
return
null
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
)
throws
IOException
,
MethodInvocationException
,
ParseErrorException
,
ResourceNotFoundException
{
int
i
,
k
=
jjtGetNumChildren
(
)
;
for
(
i
=
0
;
i
<
k
;
i
++
)
jjtGetChild
(
i
)
.
render
(
context
,
writer
)
;
return
true
;
}
public
Object
execute
(
Object
o
,
InternalContextAdapter
context
)
throws
MethodInvocationException
{
return
null
;
}
public
int
getType
(
)
{
return
id
;
}
public
void
setInfo
(
int
info
)
{
this
.
info
=
info
;
}
public
int
getInfo
(
)
{
return
info
;
}
public
void
setInvalid
(
)
{
invalid
=
true
;
}
public
boolean
isInvalid
(
)
{
return
invalid
;
}
public
int
getLine
(
)
{
return
first
.
beginLine
;
}
public
int
getColumn
(
)
{
return
first
.
beginColumn
;
}
public
String
toString
(
)
{
StrBuilder
tokens
=
new
StrBuilder
(
)
;
for
(
Token
t
=
getFirstToken
(
)
;
t
!=
null
;
)
{
tokens
.
append
(
"["
)
.
append
(
t
.
image
)
.
append
(
"]"
)
;
if
(
t
.
next
!=
null
)
{
if
(
t
.
equals
(
getLastToken
(
)
)
)
{
break
;
}
else
{
tokens
.
append
(
", "
)
;
}
}
t
=
t
.
next
;
}
return
new
ToStringBuilder
(
this
)
.
append
(
"id"
,
getType
(
)
)
.
append
(
"info"
,
getInfo
(
)
)
.
append
(
"invalid"
,
isInvalid
(
)
)
.
append
(
"children"
,
jjtGetNumChildren
(
)
)
.
append
(
"tokens"
,
tokens
)
.
toString
(
)
;
}
public
String
getTemplateName
(
)
{
return
templateName
;
}
}
