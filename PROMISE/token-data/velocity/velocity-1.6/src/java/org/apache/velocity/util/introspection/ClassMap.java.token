package
org
.
apache
.
velocity
.
util
.
introspection
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
lang
.
reflect
.
Modifier
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
org
.
apache
.
commons
.
lang
.
text
.
StrBuilder
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
public
class
ClassMap
{
private
static
final
boolean
debugReflection
=
false
;
private
final
Log
log
;
private
final
Class
clazz
;
private
final
MethodCache
methodCache
;
public
ClassMap
(
final
Class
clazz
,
final
Log
log
)
{
this
.
clazz
=
clazz
;
this
.
log
=
log
;
if
(
debugReflection
&&
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"================================================================="
)
;
log
.
debug
(
"== Class: "
+
clazz
)
;
}
methodCache
=
createMethodCache
(
)
;
if
(
debugReflection
&&
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"================================================================="
)
;
}
}
public
Class
getCachedClass
(
)
{
return
clazz
;
}
public
Method
findMethod
(
final
String
name
,
final
Object
[
]
params
)
throws
MethodMap
.
AmbiguousException
{
return
methodCache
.
get
(
name
,
params
)
;
}
private
MethodCache
createMethodCache
(
)
{
MethodCache
methodCache
=
new
MethodCache
(
log
)
;
for
(
Class
classToReflect
=
getCachedClass
(
)
;
classToReflect
!=
null
;
classToReflect
=
classToReflect
.
getSuperclass
(
)
)
{
if
(
Modifier
.
isPublic
(
classToReflect
.
getModifiers
(
)
)
)
{
populateMethodCacheWith
(
methodCache
,
classToReflect
)
;
}
Class
[
]
interfaces
=
classToReflect
.
getInterfaces
(
)
;
for
(
int
i
=
0
;
i
<
interfaces
.
length
;
i
++
)
{
if
(
Modifier
.
isPublic
(
interfaces
[
i
]
.
getModifiers
(
)
)
)
{
populateMethodCacheWith
(
methodCache
,
interfaces
[
i
]
)
;
}
}
}
return
methodCache
;
}
private
void
populateMethodCacheWith
(
MethodCache
methodCache
,
Class
classToReflect
)
{
if
(
debugReflection
&&
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Reflecting "
+
classToReflect
)
;
}
try
{
Method
[
]
methods
=
classToReflect
.
getDeclaredMethods
(
)
;
for
(
int
i
=
0
;
i
<
methods
.
length
;
i
++
)
{
int
modifiers
=
methods
[
i
]
.
getModifiers
(
)
;
if
(
Modifier
.
isPublic
(
modifiers
)
)
{
if
(
classToReflect
.
isInterface
(
)
||
!
Modifier
.
isAbstract
(
modifiers
)
)
{
methodCache
.
put
(
methods
[
i
]
)
;
}
}
}
}
catch
(
SecurityException
se
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"While accessing methods of "
+
classToReflect
+
": "
,
se
)
;
}
}
}
private
static
final
class
MethodCache
{
private
static
final
Object
CACHE_MISS
=
new
Object
(
)
;
private
static
final
String
NULL_ARG
=
Object
.
class
.
getName
(
)
;
private
static
final
Map
convertPrimitives
=
new
HashMap
(
)
;
static
{
convertPrimitives
.
put
(
Boolean
.
TYPE
,
Boolean
.
class
.
getName
(
)
)
;
convertPrimitives
.
put
(
Byte
.
TYPE
,
Byte
.
class
.
getName
(
)
)
;
convertPrimitives
.
put
(
Character
.
TYPE
,
Character
.
class
.
getName
(
)
)
;
convertPrimitives
.
put
(
Double
.
TYPE
,
Double
.
class
.
getName
(
)
)
;
convertPrimitives
.
put
(
Float
.
TYPE
,
Float
.
class
.
getName
(
)
)
;
convertPrimitives
.
put
(
Integer
.
TYPE
,
Integer
.
class
.
getName
(
)
)
;
convertPrimitives
.
put
(
Long
.
TYPE
,
Long
.
class
.
getName
(
)
)
;
convertPrimitives
.
put
(
Short
.
TYPE
,
Short
.
class
.
getName
(
)
)
;
}
private
final
Log
log
;
private
final
Map
cache
=
new
HashMap
(
)
;
private
final
MethodMap
methodMap
=
new
MethodMap
(
)
;
private
MethodCache
(
Log
log
)
{
this
.
log
=
log
;
}
public
Method
get
(
final
String
name
,
final
Object
[
]
params
)
throws
MethodMap
.
AmbiguousException
{
String
methodKey
=
makeMethodKey
(
name
,
params
)
;
Object
cacheEntry
=
cache
.
get
(
methodKey
)
;
if
(
cacheEntry
==
CACHE_MISS
)
{
return
null
;
}
if
(
cacheEntry
==
null
)
{
try
{
cacheEntry
=
methodMap
.
find
(
name
,
params
)
;
}
catch
(
MethodMap
.
AmbiguousException
ae
)
{
cache
.
put
(
methodKey
,
CACHE_MISS
)
;
throw
ae
;
}
cache
.
put
(
methodKey
,
(
cacheEntry
!=
null
)
?
cacheEntry
:
CACHE_MISS
)
;
}
return
(
Method
)
cacheEntry
;
}
private
void
put
(
Method
method
)
{
String
methodKey
=
makeMethodKey
(
method
)
;
if
(
cache
.
get
(
methodKey
)
==
null
)
{
cache
.
put
(
methodKey
,
method
)
;
methodMap
.
add
(
method
)
;
if
(
debugReflection
&&
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Adding "
+
method
)
;
}
}
}
private
String
makeMethodKey
(
final
Method
method
)
{
Class
[
]
parameterTypes
=
method
.
getParameterTypes
(
)
;
int
args
=
parameterTypes
.
length
;
if
(
args
==
0
)
{
return
method
.
getName
(
)
;
}
StrBuilder
methodKey
=
new
StrBuilder
(
(
args
+
1
)
*
16
)
.
append
(
method
.
getName
(
)
)
;
for
(
int
j
=
0
;
j
<
args
;
j
++
)
{
if
(
parameterTypes
[
j
]
.
isPrimitive
(
)
)
{
methodKey
.
append
(
(
String
)
convertPrimitives
.
get
(
parameterTypes
[
j
]
)
)
;
}
else
{
methodKey
.
append
(
parameterTypes
[
j
]
.
getName
(
)
)
;
}
}
return
methodKey
.
toString
(
)
;
}
private
String
makeMethodKey
(
String
method
,
Object
[
]
params
)
{
int
args
=
params
.
length
;
if
(
args
==
0
)
{
return
method
;
}
StrBuilder
methodKey
=
new
StrBuilder
(
(
args
+
1
)
*
16
)
.
append
(
method
)
;
for
(
int
j
=
0
;
j
<
args
;
j
++
)
{
Object
arg
=
params
[
j
]
;
if
(
arg
==
null
)
{
methodKey
.
append
(
NULL_ARG
)
;
}
else
{
methodKey
.
append
(
arg
.
getClass
(
)
.
getName
(
)
)
;
}
}
return
methodKey
.
toString
(
)
;
}
}
}
