package
org
.
apache
.
velocity
.
runtime
.
resource
.
loader
;
import
java
.
io
.
BufferedInputStream
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
FileNotFoundException
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
org
.
apache
.
commons
.
collections
.
ExtendedProperties
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
VelocityException
;
import
org
.
apache
.
velocity
.
io
.
UnicodeInputStream
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
public
class
FileResourceLoader
extends
ResourceLoader
{
private
List
paths
=
new
ArrayList
(
)
;
private
Map
templatePaths
=
Collections
.
synchronizedMap
(
new
HashMap
(
)
)
;
private
boolean
unicode
=
false
;
public
void
init
(
ExtendedProperties
configuration
)
{
if
(
log
.
isTraceEnabled
(
)
)
{
log
.
trace
(
"FileResourceLoader : initialization starting."
)
;
}
paths
.
addAll
(
configuration
.
getVector
(
"path"
)
)
;
unicode
=
configuration
.
getBoolean
(
"unicode"
,
false
)
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Do unicode file recognition:  "
+
unicode
)
;
}
if
(
log
.
isDebugEnabled
(
)
)
{
StringUtils
.
trimStrings
(
paths
)
;
int
sz
=
paths
.
size
(
)
;
for
(
int
i
=
0
;
i
<
sz
;
i
++
)
{
log
.
debug
(
"FileResourceLoader : adding path '"
+
(
String
)
paths
.
get
(
i
)
+
"'"
)
;
}
log
.
trace
(
"FileResourceLoader : initialization complete."
)
;
}
}
public
InputStream
getResourceStream
(
String
templateName
)
throws
ResourceNotFoundException
{
if
(
org
.
apache
.
commons
.
lang
.
StringUtils
.
isEmpty
(
templateName
)
)
{
throw
new
ResourceNotFoundException
(
"Need to specify a file name or file path!"
)
;
}
String
template
=
StringUtils
.
normalizePath
(
templateName
)
;
if
(
template
==
null
||
template
.
length
(
)
==
0
)
{
String
msg
=
"File resource error : argument "
+
template
+
" contains .. and may be trying to access "
+
"content outside of template root.  Rejected."
;
log
.
error
(
"FileResourceLoader : "
+
msg
)
;
throw
new
ResourceNotFoundException
(
msg
)
;
}
int
size
=
paths
.
size
(
)
;
for
(
int
i
=
0
;
i
<
size
;
i
++
)
{
String
path
=
(
String
)
paths
.
get
(
i
)
;
InputStream
inputStream
=
null
;
try
{
inputStream
=
findTemplate
(
path
,
template
)
;
}
catch
(
IOException
ioe
)
{
String
msg
=
"Exception while loading Template "
+
template
;
log
.
error
(
msg
,
ioe
)
;
throw
new
VelocityException
(
msg
,
ioe
)
;
}
if
(
inputStream
!=
null
)
{
templatePaths
.
put
(
templateName
,
path
)
;
return
inputStream
;
}
}
throw
new
ResourceNotFoundException
(
"FileResourceLoader : cannot find "
+
template
)
;
}
public
boolean
resourceExists
(
String
name
)
{
if
(
name
==
null
)
{
return
false
;
}
name
=
StringUtils
.
normalizePath
(
name
)
;
if
(
name
==
null
||
name
.
length
(
)
==
0
)
{
return
false
;
}
int
size
=
paths
.
size
(
)
;
for
(
int
i
=
0
;
i
<
size
;
i
++
)
{
String
path
=
(
String
)
paths
.
get
(
i
)
;
try
{
File
file
=
getFile
(
path
,
name
)
;
return
file
.
canRead
(
)
;
}
catch
(
Exception
ioe
)
{
String
msg
=
"Exception while checking for template "
+
name
;
log
.
debug
(
msg
,
ioe
)
;
}
}
return
false
;
}
private
InputStream
findTemplate
(
final
String
path
,
final
String
template
)
throws
IOException
{
try
{
File
file
=
getFile
(
path
,
template
)
;
if
(
file
.
canRead
(
)
)
{
FileInputStream
fis
=
null
;
try
{
fis
=
new
FileInputStream
(
file
.
getAbsolutePath
(
)
)
;
if
(
unicode
)
{
UnicodeInputStream
uis
=
null
;
try
{
uis
=
new
UnicodeInputStream
(
fis
,
true
)
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"File Encoding for "
+
file
+
" is: "
+
uis
.
getEncodingFromStream
(
)
)
;
}
return
new
BufferedInputStream
(
uis
)
;
}
catch
(
IOException
e
)
{
closeQuiet
(
uis
)
;
throw
e
;
}
}
else
{
return
new
BufferedInputStream
(
fis
)
;
}
}
catch
(
IOException
e
)
{
closeQuiet
(
fis
)
;
throw
e
;
}
}
else
{
return
null
;
}
}
catch
(
FileNotFoundException
fnfe
)
{
return
null
;
}
}
private
void
closeQuiet
(
final
InputStream
is
)
{
if
(
is
!=
null
)
{
try
{
is
.
close
(
)
;
}
catch
(
IOException
ioe
)
{
}
}
}
public
boolean
isSourceModified
(
Resource
resource
)
{
boolean
modified
=
true
;
String
fileName
=
resource
.
getName
(
)
;
String
path
=
(
String
)
templatePaths
.
get
(
fileName
)
;
File
currentFile
=
null
;
for
(
int
i
=
0
;
currentFile
==
null
&&
i
<
paths
.
size
(
)
;
i
++
)
{
String
testPath
=
(
String
)
paths
.
get
(
i
)
;
File
testFile
=
getFile
(
testPath
,
fileName
)
;
if
(
testFile
.
canRead
(
)
)
{
currentFile
=
testFile
;
}
}
File
file
=
getFile
(
path
,
fileName
)
;
if
(
currentFile
==
null
||
!
file
.
exists
(
)
)
{
}
else
if
(
currentFile
.
equals
(
file
)
&&
file
.
canRead
(
)
)
{
modified
=
(
file
.
lastModified
(
)
!=
resource
.
getLastModified
(
)
)
;
}
return
modified
;
}
public
long
getLastModified
(
Resource
resource
)
{
String
path
=
(
String
)
templatePaths
.
get
(
resource
.
getName
(
)
)
;
File
file
=
getFile
(
path
,
resource
.
getName
(
)
)
;
if
(
file
.
canRead
(
)
)
{
return
file
.
lastModified
(
)
;
}
else
{
return
0
;
}
}
private
File
getFile
(
String
path
,
String
template
)
{
File
file
=
null
;
if
(
""
.
equals
(
path
)
)
{
file
=
new
File
(
template
)
;
}
else
{
if
(
template
.
startsWith
(
"/"
)
)
{
template
=
template
.
substring
(
1
)
;
}
file
=
new
File
(
path
,
template
)
;
}
return
file
;
}
}
