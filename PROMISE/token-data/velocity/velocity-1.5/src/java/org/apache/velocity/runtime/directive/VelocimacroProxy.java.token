package
org
.
apache
.
velocity
.
runtime
.
directive
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
IOException
;
import
java
.
io
.
StringReader
;
import
java
.
io
.
Writer
;
import
java
.
util
.
HashMap
;
import
org
.
apache
.
commons
.
lang
.
StringUtils
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
context
.
VMContext
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParserTreeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Token
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
ASTDirective
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
Node
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
SimpleNode
;
import
org
.
apache
.
velocity
.
runtime
.
visitor
.
VMReferenceMungeVisitor
;
public
class
VelocimacroProxy
extends
Directive
{
private
String
macroName
=
""
;
private
String
macroBody
=
""
;
private
String
[
]
argArray
=
null
;
private
SimpleNode
nodeTree
=
null
;
private
int
numMacroArgs
=
0
;
private
String
namespace
=
""
;
private
boolean
init
=
false
;
private
String
[
]
callingArgs
;
private
int
[
]
callingArgTypes
;
private
HashMap
proxyArgHash
=
new
HashMap
(
)
;
private
boolean
strictArguments
;
public
String
getName
(
)
{
return
macroName
;
}
public
int
getType
(
)
{
return
LINE
;
}
public
void
setName
(
String
name
)
{
macroName
=
name
;
}
public
void
setArgArray
(
String
[
]
arr
)
{
argArray
=
arr
;
numMacroArgs
=
argArray
.
length
-
1
;
}
public
void
setNodeTree
(
SimpleNode
tree
)
{
nodeTree
=
tree
;
}
public
int
getNumArgs
(
)
{
return
numMacroArgs
;
}
public
void
setMacrobody
(
String
mb
)
{
macroBody
=
mb
;
}
public
void
setNamespace
(
String
ns
)
{
this
.
namespace
=
ns
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
,
Node
node
)
throws
IOException
,
MethodInvocationException
{
try
{
if
(
nodeTree
!=
null
)
{
if
(
!
init
)
{
nodeTree
.
init
(
context
,
rsvc
)
;
init
=
true
;
}
VMContext
vmc
=
new
VMContext
(
context
,
rsvc
)
;
for
(
int
i
=
1
;
i
<
argArray
.
length
;
i
++
)
{
VMProxyArg
arg
=
(
VMProxyArg
)
proxyArgHash
.
get
(
argArray
[
i
]
)
;
vmc
.
addVMProxyArg
(
arg
)
;
}
nodeTree
.
render
(
vmc
,
writer
)
;
}
else
{
rsvc
.
getLog
(
)
.
error
(
"VM error "
+
macroName
+
". Null AST"
)
;
}
}
catch
(
MethodInvocationException
e
)
{
throw
e
;
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
rsvc
.
getLog
(
)
.
error
(
"VelocimacroProxy.render() : exception VM = #"
+
macroName
+
"()"
,
e
)
;
}
return
true
;
}
public
void
init
(
RuntimeServices
rs
,
InternalContextAdapter
context
,
Node
node
)
throws
TemplateInitException
{
super
.
init
(
rs
,
context
,
node
)
;
strictArguments
=
rs
.
getConfiguration
(
)
.
getBoolean
(
RuntimeConstants
.
VM_ARGUMENTS_STRICT
,
false
)
;
int
i
=
node
.
jjtGetNumChildren
(
)
;
if
(
getNumArgs
(
)
!=
i
)
{
for
(
Node
parent
=
node
.
jjtGetParent
(
)
;
parent
!=
null
;
)
{
if
(
(
parent
instanceof
ASTDirective
)
&&
StringUtils
.
equals
(
(
(
ASTDirective
)
parent
)
.
getDirectiveName
(
)
,
"macro"
)
)
{
return
;
}
parent
=
parent
.
jjtGetParent
(
)
;
}
String
errormsg
=
"VM #"
+
macroName
+
": error : too "
+
(
(
getNumArgs
(
)
>
i
)
?
"few"
:
"many"
)
+
" arguments to macro. Wanted "
+
getNumArgs
(
)
+
" got "
+
i
;
if
(
strictArguments
)
{
throw
new
TemplateInitException
(
errormsg
,
context
.
getCurrentTemplateName
(
)
,
0
,
0
)
;
}
else
{
rsvc
.
getLog
(
)
.
error
(
errormsg
)
;
return
;
}
}
callingArgs
=
getArgArray
(
node
)
;
setupMacro
(
callingArgs
,
callingArgTypes
)
;
}
public
boolean
setupMacro
(
String
[
]
callArgs
,
int
[
]
callArgTypes
)
{
setupProxyArgs
(
callArgs
,
callArgTypes
)
;
parseTree
(
callArgs
)
;
return
true
;
}
private
void
parseTree
(
String
[
]
callArgs
)
{
try
{
BufferedReader
br
=
new
BufferedReader
(
new
StringReader
(
macroBody
)
)
;
nodeTree
=
rsvc
.
parse
(
br
,
namespace
,
false
)
;
HashMap
hm
=
new
HashMap
(
)
;
for
(
int
i
=
1
;
i
<
argArray
.
length
;
i
++
)
{
String
arg
=
callArgs
[
i
-
1
]
;
if
(
arg
.
charAt
(
0
)
==
'$'
)
{
hm
.
put
(
argArray
[
i
]
,
arg
)
;
}
}
VMReferenceMungeVisitor
v
=
new
VMReferenceMungeVisitor
(
hm
)
;
nodeTree
.
jjtAccept
(
v
,
null
)
;
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
rsvc
.
getLog
(
)
.
error
(
"VelocimacroManager.parseTree() : exception "
+
macroName
,
e
)
;
}
}
private
void
setupProxyArgs
(
String
[
]
callArgs
,
int
[
]
callArgTypes
)
{
for
(
int
i
=
1
;
i
<
argArray
.
length
;
i
++
)
{
VMProxyArg
arg
=
new
VMProxyArg
(
rsvc
,
argArray
[
i
]
,
callArgs
[
i
-
1
]
,
callArgTypes
[
i
-
1
]
)
;
proxyArgHash
.
put
(
argArray
[
i
]
,
arg
)
;
}
}
private
String
[
]
getArgArray
(
Node
node
)
{
int
numArgs
=
node
.
jjtGetNumChildren
(
)
;
String
args
[
]
=
new
String
[
numArgs
]
;
callingArgTypes
=
new
int
[
numArgs
]
;
int
i
=
0
;
Token
t
=
null
;
Token
tLast
=
null
;
while
(
i
<
numArgs
)
{
args
[
i
]
=
""
;
callingArgTypes
[
i
]
=
node
.
jjtGetChild
(
i
)
.
getType
(
)
;
if
(
false
&&
node
.
jjtGetChild
(
i
)
.
getType
(
)
==
ParserTreeConstants
.
JJTSTRINGLITERAL
)
{
args
[
i
]
+=
node
.
jjtGetChild
(
i
)
.
getFirstToken
(
)
.
image
.
substring
(
1
,
node
.
jjtGetChild
(
i
)
.
getFirstToken
(
)
.
image
.
length
(
)
-
1
)
;
}
else
{
t
=
node
.
jjtGetChild
(
i
)
.
getFirstToken
(
)
;
tLast
=
node
.
jjtGetChild
(
i
)
.
getLastToken
(
)
;
while
(
t
!=
tLast
)
{
args
[
i
]
+=
t
.
image
;
t
=
t
.
next
;
}
args
[
i
]
+=
t
.
image
;
}
i
++
;
}
return
args
;
}
}
