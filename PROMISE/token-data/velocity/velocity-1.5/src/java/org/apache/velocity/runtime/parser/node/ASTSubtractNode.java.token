package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParserVisitor
;
import
org
.
apache
.
velocity
.
util
.
TemplateNumber
;
public
class
ASTSubtractNode
extends
SimpleNode
{
public
ASTSubtractNode
(
int
id
)
{
super
(
id
)
;
}
public
ASTSubtractNode
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
value
(
InternalContextAdapter
context
)
throws
MethodInvocationException
{
Object
left
=
jjtGetChild
(
0
)
.
value
(
context
)
;
Object
right
=
jjtGetChild
(
1
)
.
value
(
context
)
;
if
(
left
==
null
||
right
==
null
)
{
log
.
error
(
(
left
==
null
?
"Left"
:
"Right"
)
+
" side ("
+
jjtGetChild
(
(
left
==
null
?
0
:
1
)
)
.
literal
(
)
+
") of subtraction operation has null value."
+
" Operation not possible. "
+
context
.
getCurrentTemplateName
(
)
+
" [line "
+
getLine
(
)
+
", column "
+
getColumn
(
)
+
"]"
)
;
return
null
;
}
if
(
left
instanceof
TemplateNumber
)
{
left
=
(
(
TemplateNumber
)
left
)
.
getAsNumber
(
)
;
}
if
(
right
instanceof
TemplateNumber
)
{
right
=
(
(
TemplateNumber
)
right
)
.
getAsNumber
(
)
;
}
if
(
!
(
left
instanceof
Number
)
||
!
(
right
instanceof
Number
)
)
{
log
.
error
(
(
!
(
left
instanceof
Number
)
?
"Left"
:
"Right"
)
+
" side of subtraction operation is not a Number. "
+
context
.
getCurrentTemplateName
(
)
+
" [line "
+
getLine
(
)
+
", column "
+
getColumn
(
)
+
"]"
)
;
return
null
;
}
return
MathUtils
.
subtract
(
(
Number
)
left
,
(
Number
)
right
)
;
}
}
