package
org
.
apache
.
velocity
.
runtime
.
directive
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventHandlerUtil
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParserTreeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
Node
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
public
class
Include
extends
InputBase
{
private
String
outputMsgStart
=
""
;
private
String
outputMsgEnd
=
""
;
public
String
getName
(
)
{
return
"include"
;
}
public
int
getType
(
)
{
return
LINE
;
}
public
void
init
(
RuntimeServices
rs
,
InternalContextAdapter
context
,
Node
node
)
throws
TemplateInitException
{
super
.
init
(
rs
,
context
,
node
)
;
outputMsgStart
=
rsvc
.
getString
(
RuntimeConstants
.
ERRORMSG_START
)
;
outputMsgStart
=
outputMsgStart
+
" "
;
outputMsgEnd
=
rsvc
.
getString
(
RuntimeConstants
.
ERRORMSG_END
)
;
outputMsgEnd
=
" "
+
outputMsgEnd
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
,
Node
node
)
throws
IOException
,
MethodInvocationException
,
ResourceNotFoundException
{
int
argCount
=
node
.
jjtGetNumChildren
(
)
;
for
(
int
i
=
0
;
i
<
argCount
;
i
++
)
{
Node
n
=
node
.
jjtGetChild
(
i
)
;
if
(
n
.
getType
(
)
==
ParserTreeConstants
.
JJTSTRINGLITERAL
||
n
.
getType
(
)
==
ParserTreeConstants
.
JJTREFERENCE
)
{
if
(
!
renderOutput
(
n
,
context
,
writer
)
)
outputErrorToStream
(
writer
,
"error with arg "
+
i
+
" please see log."
)
;
}
else
{
rsvc
.
getLog
(
)
.
error
(
"#include() invalid argument type: "
+
n
.
toString
(
)
)
;
outputErrorToStream
(
writer
,
"error with arg "
+
i
+
" please see log."
)
;
}
}
return
true
;
}
private
boolean
renderOutput
(
Node
node
,
InternalContextAdapter
context
,
Writer
writer
)
throws
IOException
,
MethodInvocationException
,
ResourceNotFoundException
{
if
(
node
==
null
)
{
rsvc
.
getLog
(
)
.
error
(
"#include() null argument"
)
;
return
false
;
}
Object
value
=
node
.
value
(
context
)
;
if
(
value
==
null
)
{
rsvc
.
getLog
(
)
.
error
(
"#include()  null argument"
)
;
return
false
;
}
String
sourcearg
=
value
.
toString
(
)
;
String
arg
=
EventHandlerUtil
.
includeEvent
(
rsvc
,
context
,
sourcearg
,
context
.
getCurrentTemplateName
(
)
,
getName
(
)
)
;
boolean
blockinput
=
false
;
if
(
arg
==
null
)
blockinput
=
true
;
Resource
resource
=
null
;
try
{
if
(
!
blockinput
)
resource
=
rsvc
.
getContent
(
arg
,
getInputEncoding
(
context
)
)
;
}
catch
(
ResourceNotFoundException
rnfe
)
{
rsvc
.
getLog
(
)
.
error
(
"#include(): cannot find resource '"
+
arg
+
"', called from template "
+
context
.
getCurrentTemplateName
(
)
+
" at ("
+
getLine
(
)
+
", "
+
getColumn
(
)
+
")"
)
;
throw
rnfe
;
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
rsvc
.
getLog
(
)
.
error
(
"#include(): arg = '"
+
arg
+
"', called from template "
+
context
.
getCurrentTemplateName
(
)
+
" at ("
+
getLine
(
)
+
", "
+
getColumn
(
)
+
')'
,
e
)
;
}
if
(
blockinput
)
return
true
;
else
if
(
resource
==
null
)
return
false
;
writer
.
write
(
(
String
)
resource
.
getData
(
)
)
;
return
true
;
}
private
void
outputErrorToStream
(
Writer
writer
,
String
msg
)
throws
IOException
{
if
(
outputMsgStart
!=
null
&&
outputMsgEnd
!=
null
)
{
writer
.
write
(
outputMsgStart
)
;
writer
.
write
(
msg
)
;
writer
.
write
(
outputMsgEnd
)
;
}
}
}
