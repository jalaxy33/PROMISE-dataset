package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Introspector
;
public
class
PutExecutor
extends
SetExecutor
{
private
final
Introspector
introspector
;
private
final
String
property
;
public
PutExecutor
(
final
Log
log
,
final
Introspector
introspector
,
final
Class
clazz
,
final
Object
arg
,
final
String
property
)
{
this
.
log
=
log
;
this
.
introspector
=
introspector
;
this
.
property
=
property
;
discover
(
clazz
,
arg
)
;
}
protected
void
discover
(
final
Class
clazz
,
final
Object
arg
)
{
Object
[
]
params
;
if
(
property
==
null
)
{
params
=
new
Object
[
]
{
arg
}
;
}
else
{
params
=
new
Object
[
]
{
property
,
arg
}
;
}
try
{
setMethod
(
introspector
.
getMethod
(
clazz
,
"put"
,
params
)
)
;
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
log
.
error
(
"While looking for put('"
+
params
[
0
]
+
"') method:"
,
e
)
;
}
}
public
Object
execute
(
final
Object
o
,
final
Object
value
)
throws
IllegalAccessException
,
InvocationTargetException
{
Object
[
]
params
;
if
(
isAlive
(
)
)
{
if
(
property
==
null
)
{
params
=
new
Object
[
]
{
value
}
;
}
else
{
params
=
new
Object
[
]
{
property
,
value
}
;
}
return
getMethod
(
)
.
invoke
(
o
,
params
)
;
}
return
null
;
}
}
