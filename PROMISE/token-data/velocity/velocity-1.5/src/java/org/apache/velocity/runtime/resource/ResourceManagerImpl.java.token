package
org
.
apache
.
velocity
.
runtime
.
resource
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
commons
.
collections
.
ExtendedProperties
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
loader
.
ResourceLoader
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
loader
.
ResourceLoaderFactory
;
import
org
.
apache
.
velocity
.
util
.
ClassUtils
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
public
class
ResourceManagerImpl
implements
ResourceManager
{
public
static
final
int
RESOURCE_TEMPLATE
=
1
;
public
static
final
int
RESOURCE_CONTENT
=
2
;
private
static
final
String
RESOURCE_LOADER_IDENTIFIER
=
"_RESOURCE_LOADER_IDENTIFIER_"
;
protected
ResourceCache
globalCache
=
null
;
protected
final
List
resourceLoaders
=
new
ArrayList
(
)
;
private
final
List
sourceInitializerList
=
new
ArrayList
(
)
;
private
boolean
isInit
=
false
;
private
boolean
logWhenFound
=
true
;
protected
RuntimeServices
rsvc
=
null
;
protected
Log
log
=
null
;
public
synchronized
void
initialize
(
final
RuntimeServices
rsvc
)
throws
Exception
{
if
(
isInit
)
{
log
.
warn
(
"Re-initialization of ResourceLoader attempted!"
)
;
return
;
}
ResourceLoader
resourceLoader
=
null
;
this
.
rsvc
=
rsvc
;
log
=
rsvc
.
getLog
(
)
;
log
.
debug
(
"Default ResourceManager initializing. ("
+
this
.
getClass
(
)
+
")"
)
;
assembleResourceLoaderInitializers
(
)
;
for
(
Iterator
it
=
sourceInitializerList
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
ExtendedProperties
configuration
=
(
ExtendedProperties
)
it
.
next
(
)
;
String
loaderClass
=
StringUtils
.
nullTrim
(
configuration
.
getString
(
"class"
)
)
;
ResourceLoader
loaderInstance
=
(
ResourceLoader
)
configuration
.
get
(
"instance"
)
;
if
(
loaderInstance
!=
null
)
{
resourceLoader
=
loaderInstance
;
}
else
if
(
loaderClass
!=
null
)
{
resourceLoader
=
ResourceLoaderFactory
.
getLoader
(
rsvc
,
loaderClass
)
;
}
else
{
log
.
error
(
"Unable to find '"
+
configuration
.
getString
(
RESOURCE_LOADER_IDENTIFIER
)
+
".resource.loader.class' specification in configuration."
+
" This is a critical value.  Please adjust configuration."
)
;
continue
;
}
resourceLoader
.
commonInit
(
rsvc
,
configuration
)
;
resourceLoader
.
init
(
configuration
)
;
resourceLoaders
.
add
(
resourceLoader
)
;
}
logWhenFound
=
rsvc
.
getBoolean
(
RuntimeConstants
.
RESOURCE_MANAGER_LOGWHENFOUND
,
true
)
;
String
cacheClassName
=
rsvc
.
getString
(
RuntimeConstants
.
RESOURCE_MANAGER_CACHE_CLASS
)
;
Object
cacheObject
=
null
;
if
(
org
.
apache
.
commons
.
lang
.
StringUtils
.
isNotEmpty
(
cacheClassName
)
)
{
try
{
cacheObject
=
ClassUtils
.
getNewInstance
(
cacheClassName
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
log
.
error
(
"The specified class for ResourceCache ("
+
cacheClassName
+
") does not exist or is not accessible to the current classloader."
)
;
cacheObject
=
null
;
}
if
(
!
(
cacheObject
instanceof
ResourceCache
)
)
{
log
.
error
(
"The specified class for ResourceCache ("
+
cacheClassName
+
") does not implement "
+
ResourceCache
.
class
.
getName
(
)
+
" ResourceManager. Using default ResourceCache implementation."
)
;
cacheObject
=
null
;
}
}
if
(
cacheObject
==
null
)
{
cacheObject
=
new
ResourceCacheImpl
(
)
;
}
globalCache
=
(
ResourceCache
)
cacheObject
;
globalCache
.
initialize
(
rsvc
)
;
log
.
trace
(
"Default ResourceManager initialization complete."
)
;
}
private
void
assembleResourceLoaderInitializers
(
)
{
Vector
resourceLoaderNames
=
rsvc
.
getConfiguration
(
)
.
getVector
(
RuntimeConstants
.
RESOURCE_LOADER
)
;
StringUtils
.
trimStrings
(
resourceLoaderNames
)
;
for
(
Iterator
it
=
resourceLoaderNames
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
String
loaderName
=
(
String
)
it
.
next
(
)
;
StringBuffer
loaderID
=
new
StringBuffer
(
loaderName
)
;
loaderID
.
append
(
"."
)
.
append
(
RuntimeConstants
.
RESOURCE_LOADER
)
;
ExtendedProperties
loaderConfiguration
=
rsvc
.
getConfiguration
(
)
.
subset
(
loaderID
.
toString
(
)
)
;
if
(
loaderConfiguration
==
null
)
{
log
.
warn
(
"ResourceManager : No configuration information for resource loader named '"
+
loaderName
+
"'. Skipping."
)
;
continue
;
}
loaderConfiguration
.
setProperty
(
RESOURCE_LOADER_IDENTIFIER
,
loaderName
)
;
sourceInitializerList
.
add
(
loaderConfiguration
)
;
}
}
public
synchronized
Resource
getResource
(
final
String
resourceName
,
final
int
resourceType
,
final
String
encoding
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
String
resourceKey
=
resourceType
+
resourceName
;
Resource
resource
=
globalCache
.
get
(
resourceKey
)
;
if
(
resource
!=
null
)
{
try
{
refreshResource
(
resource
,
encoding
)
;
}
catch
(
ResourceNotFoundException
rnfe
)
{
globalCache
.
remove
(
resourceKey
)
;
return
getResource
(
resourceName
,
resourceType
,
encoding
)
;
}
catch
(
ParseErrorException
pee
)
{
log
.
error
(
"ResourceManager.getResource() exception"
,
pee
)
;
throw
pee
;
}
catch
(
RuntimeException
re
)
{
throw
re
;
}
catch
(
Exception
e
)
{
log
.
error
(
"ResourceManager.getResource() exception"
,
e
)
;
throw
e
;
}
}
else
{
try
{
resource
=
loadResource
(
resourceName
,
resourceType
,
encoding
)
;
if
(
resource
.
getResourceLoader
(
)
.
isCachingOn
(
)
)
{
globalCache
.
put
(
resourceKey
,
resource
)
;
}
}
catch
(
ResourceNotFoundException
rnfe
)
{
log
.
error
(
"ResourceManager : unable to find resource '"
+
resourceName
+
"' in any resource loader."
)
;
throw
rnfe
;
}
catch
(
ParseErrorException
pee
)
{
log
.
error
(
"ResourceManager.getResource() parse exception"
,
pee
)
;
throw
pee
;
}
catch
(
RuntimeException
re
)
{
throw
re
;
}
catch
(
Exception
e
)
{
log
.
error
(
"ResourceManager.getResource() exception new"
,
e
)
;
throw
e
;
}
}
return
resource
;
}
protected
Resource
loadResource
(
String
resourceName
,
int
resourceType
,
String
encoding
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
Resource
resource
=
ResourceFactory
.
getResource
(
resourceName
,
resourceType
)
;
resource
.
setRuntimeServices
(
rsvc
)
;
resource
.
setName
(
resourceName
)
;
resource
.
setEncoding
(
encoding
)
;
long
howOldItWas
=
0
;
for
(
Iterator
it
=
resourceLoaders
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
ResourceLoader
resourceLoader
=
(
ResourceLoader
)
it
.
next
(
)
;
resource
.
setResourceLoader
(
resourceLoader
)
;
try
{
if
(
resource
.
process
(
)
)
{
if
(
logWhenFound
&&
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"ResourceManager : found "
+
resourceName
+
" with loader "
+
resourceLoader
.
getClassName
(
)
)
;
}
howOldItWas
=
resourceLoader
.
getLastModified
(
resource
)
;
break
;
}
}
catch
(
ResourceNotFoundException
rnfe
)
{
}
}
if
(
resource
.
getData
(
)
==
null
)
{
throw
new
ResourceNotFoundException
(
"Unable to find resource '"
+
resourceName
+
"'"
)
;
}
resource
.
setLastModified
(
howOldItWas
)
;
resource
.
setModificationCheckInterval
(
resource
.
getResourceLoader
(
)
.
getModificationCheckInterval
(
)
)
;
resource
.
touch
(
)
;
return
resource
;
}
protected
void
refreshResource
(
final
Resource
resource
,
final
String
encoding
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
if
(
resource
.
requiresChecking
(
)
)
{
resource
.
touch
(
)
;
if
(
resource
.
isSourceModified
(
)
)
{
if
(
!
org
.
apache
.
commons
.
lang
.
StringUtils
.
equals
(
resource
.
getEncoding
(
)
,
encoding
)
)
{
log
.
warn
(
"Declared encoding for template '"
+
resource
.
getName
(
)
+
"' is different on reload. Old = '"
+
resource
.
getEncoding
(
)
+
"' New = '"
+
encoding
)
;
resource
.
setEncoding
(
encoding
)
;
}
long
howOldItWas
=
resource
.
getResourceLoader
(
)
.
getLastModified
(
resource
)
;
resource
.
process
(
)
;
resource
.
setLastModified
(
howOldItWas
)
;
}
}
}
public
Resource
getResource
(
String
resourceName
,
int
resourceType
)
throws
ResourceNotFoundException
,
ParseErrorException
,
Exception
{
return
getResource
(
resourceName
,
resourceType
,
RuntimeConstants
.
ENCODING_DEFAULT
)
;
}
public
String
getLoaderNameForResource
(
String
resourceName
)
{
for
(
Iterator
it
=
resourceLoaders
.
iterator
(
)
;
it
.
hasNext
(
)
;
)
{
ResourceLoader
resourceLoader
=
(
ResourceLoader
)
it
.
next
(
)
;
InputStream
is
=
null
;
try
{
is
=
resourceLoader
.
getResourceStream
(
resourceName
)
;
if
(
is
!=
null
)
{
return
resourceLoader
.
getClass
(
)
.
toString
(
)
;
}
}
catch
(
ResourceNotFoundException
rnfe
)
{
}
finally
{
if
(
is
!=
null
)
{
try
{
is
.
close
(
)
;
}
catch
(
IOException
supressed
)
{
}
}
}
}
return
null
;
}
}
