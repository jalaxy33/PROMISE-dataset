package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParserVisitor
;
public
class
ASTIntegerRange
extends
SimpleNode
{
public
ASTIntegerRange
(
int
id
)
{
super
(
id
)
;
}
public
ASTIntegerRange
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
value
(
InternalContextAdapter
context
)
throws
MethodInvocationException
{
Object
left
=
jjtGetChild
(
0
)
.
value
(
context
)
;
Object
right
=
jjtGetChild
(
1
)
.
value
(
context
)
;
if
(
left
==
null
||
right
==
null
)
{
log
.
error
(
(
left
==
null
?
"Left"
:
"Right"
)
+
" side of range operator [n..m] has null value."
+
" Operation not possible. "
+
context
.
getCurrentTemplateName
(
)
+
" [line "
+
getLine
(
)
+
", column "
+
getColumn
(
)
+
"]"
)
;
return
null
;
}
if
(
!
(
left
instanceof
Integer
)
||
!
(
right
instanceof
Integer
)
)
{
log
.
error
(
(
!
(
left
instanceof
Integer
)
?
"Left"
:
"Right"
)
+
" side of range operator is not a valid type. "
+
"Currently only integers (1,2,3...) and Integer type is supported. "
+
context
.
getCurrentTemplateName
(
)
+
" [line "
+
getLine
(
)
+
", column "
+
getColumn
(
)
+
"]"
)
;
return
null
;
}
int
l
=
(
(
Integer
)
left
)
.
intValue
(
)
;
int
r
=
(
(
Integer
)
right
)
.
intValue
(
)
;
int
nbrElements
=
Math
.
abs
(
l
-
r
)
;
nbrElements
+=
1
;
int
delta
=
(
l
>=
r
)
?
-
1
:
1
;
List
elements
=
new
ArrayList
(
nbrElements
)
;
int
value
=
l
;
for
(
int
i
=
0
;
i
<
nbrElements
;
i
++
)
{
elements
.
add
(
new
Integer
(
value
)
)
;
value
+=
delta
;
}
return
elements
;
}
}
