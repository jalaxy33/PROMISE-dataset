package
org
.
apache
.
velocity
.
runtime
.
resource
.
loader
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
UnsupportedEncodingException
;
import
org
.
apache
.
commons
.
collections
.
ExtendedProperties
;
import
org
.
apache
.
commons
.
lang
.
StringUtils
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
VelocityException
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
util
.
StringResource
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
util
.
StringResourceRepository
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
util
.
StringResourceRepositoryImpl
;
import
org
.
apache
.
velocity
.
util
.
ClassUtils
;
public
class
StringResourceLoader
extends
ResourceLoader
{
public
static
final
String
REPOSITORY_CLASS
=
"repository.class"
;
public
static
final
String
REPOSITORY_CLASS_DEFAULT
=
StringResourceRepositoryImpl
.
class
.
getName
(
)
;
public
static
final
String
REPOSITORY_ENCODING
=
"repository.encoding"
;
public
static
final
String
REPOSITORY_ENCODING_DEFAULT
=
"UTF-8"
;
public
static
StringResourceRepository
getRepository
(
)
{
return
RepositoryFactory
.
getRepository
(
)
;
}
public
void
init
(
final
ExtendedProperties
configuration
)
{
log
.
info
(
"StringResourceLoader : initialization starting."
)
;
String
repositoryClass
=
configuration
.
getString
(
REPOSITORY_CLASS
,
REPOSITORY_CLASS_DEFAULT
)
;
String
encoding
=
configuration
.
getString
(
REPOSITORY_ENCODING
,
REPOSITORY_ENCODING_DEFAULT
)
;
RepositoryFactory
.
setRepositoryClass
(
repositoryClass
)
;
RepositoryFactory
.
setEncoding
(
encoding
)
;
RepositoryFactory
.
init
(
log
)
;
log
.
info
(
"StringResourceLoader : initialization complete."
)
;
}
public
InputStream
getResourceStream
(
final
String
name
)
throws
ResourceNotFoundException
{
if
(
StringUtils
.
isEmpty
(
name
)
)
{
throw
new
ResourceNotFoundException
(
"No template name provided"
)
;
}
StringResource
resource
=
getRepository
(
)
.
getStringResource
(
name
)
;
if
(
resource
==
null
)
{
throw
new
ResourceNotFoundException
(
"Could not locate resource '"
+
name
+
"'"
)
;
}
byte
[
]
byteArray
=
null
;
try
{
byteArray
=
resource
.
getBody
(
)
.
getBytes
(
resource
.
getEncoding
(
)
)
;
return
new
ByteArrayInputStream
(
byteArray
)
;
}
catch
(
UnsupportedEncodingException
ue
)
{
throw
new
VelocityException
(
"Could not convert String using encoding "
+
resource
.
getEncoding
(
)
,
ue
)
;
}
}
public
boolean
isSourceModified
(
final
Resource
resource
)
{
StringResource
original
=
null
;
boolean
result
=
true
;
original
=
getRepository
(
)
.
getStringResource
(
resource
.
getName
(
)
)
;
if
(
original
!=
null
)
{
result
=
original
.
getLastModified
(
)
!=
resource
.
getLastModified
(
)
;
}
return
result
;
}
public
long
getLastModified
(
final
Resource
resource
)
{
StringResource
original
=
null
;
original
=
getRepository
(
)
.
getStringResource
(
resource
.
getName
(
)
)
;
return
(
original
!=
null
)
?
original
.
getLastModified
(
)
:
0
;
}
private
static
final
class
RepositoryFactory
{
private
static
boolean
isInitialized
=
false
;
private
static
StringResourceRepository
repository
=
null
;
public
static
void
setRepositoryClass
(
final
String
className
)
{
if
(
isInitialized
)
{
throw
new
IllegalStateException
(
"The RepositoryFactory has already been initialized!"
)
;
}
try
{
repository
=
(
StringResourceRepository
)
ClassUtils
.
getNewInstance
(
className
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
throw
new
VelocityException
(
"Could not find '"
+
className
+
"'"
,
cnfe
)
;
}
catch
(
IllegalAccessException
iae
)
{
throw
new
VelocityException
(
"Could not access '"
+
className
+
"'"
,
iae
)
;
}
catch
(
InstantiationException
ie
)
{
throw
new
VelocityException
(
"Could not instantiante '"
+
className
+
"'"
,
ie
)
;
}
}
public
static
void
setEncoding
(
final
String
encoding
)
{
if
(
repository
==
null
)
{
throw
new
IllegalStateException
(
"The Repository class has not yet been set!"
)
;
}
repository
.
setEncoding
(
encoding
)
;
}
public
static
synchronized
void
init
(
final
Log
log
)
throws
VelocityException
{
if
(
isInitialized
)
{
throw
new
IllegalStateException
(
"Attempted to re-initialize Factory!"
)
;
}
if
(
log
.
isInfoEnabled
(
)
)
{
log
.
info
(
"Using "
+
repository
.
getClass
(
)
.
getName
(
)
+
" as repository implementation"
)
;
log
.
info
(
"Current repository encoding is "
+
repository
.
getEncoding
(
)
)
;
}
isInitialized
=
true
;
}
public
static
StringResourceRepository
getRepository
(
)
{
if
(
!
isInitialized
)
{
throw
new
IllegalStateException
(
"RepositoryFactory was not properly set up"
)
;
}
return
repository
;
}
}
}
