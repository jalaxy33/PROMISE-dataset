package
org
.
apache
.
velocity
.
runtime
.
directive
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventCartridge
;
import
org
.
apache
.
velocity
.
context
.
Context
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
ASTReference
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
Node
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
node
.
SimpleNode
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Info
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
IntrospectionCacheData
;
public
class
Foreach
extends
Directive
{
protected
static
class
NullHolderContext
implements
InternalContextAdapter
{
private
InternalContextAdapter
innerContext
=
null
;
private
String
loopVariableKey
=
""
;
private
boolean
active
=
true
;
private
NullHolderContext
(
String
key
,
InternalContextAdapter
context
)
{
innerContext
=
context
;
if
(
key
!=
null
)
loopVariableKey
=
key
;
}
public
Object
get
(
String
key
)
throws
MethodInvocationException
{
return
(
active
&&
loopVariableKey
.
equals
(
key
)
)
?
null
:
innerContext
.
get
(
key
)
;
}
public
Object
put
(
String
key
,
Object
value
)
{
if
(
loopVariableKey
.
equals
(
key
)
&&
(
value
==
null
)
)
{
active
=
true
;
}
return
innerContext
.
put
(
key
,
value
)
;
}
public
Object
localPut
(
final
String
key
,
final
Object
value
)
{
return
put
(
key
,
value
)
;
}
public
boolean
containsKey
(
Object
key
)
{
return
innerContext
.
containsKey
(
key
)
;
}
public
Object
[
]
getKeys
(
)
{
return
innerContext
.
getKeys
(
)
;
}
public
Object
remove
(
Object
key
)
{
if
(
loopVariableKey
.
equals
(
key
)
)
{
active
=
false
;
}
return
innerContext
.
remove
(
key
)
;
}
public
void
pushCurrentTemplateName
(
String
s
)
{
innerContext
.
pushCurrentTemplateName
(
s
)
;
}
public
void
popCurrentTemplateName
(
)
{
innerContext
.
popCurrentTemplateName
(
)
;
}
public
String
getCurrentTemplateName
(
)
{
return
innerContext
.
getCurrentTemplateName
(
)
;
}
public
Object
[
]
getTemplateNameStack
(
)
{
return
innerContext
.
getTemplateNameStack
(
)
;
}
public
IntrospectionCacheData
icacheGet
(
Object
key
)
{
return
innerContext
.
icacheGet
(
key
)
;
}
public
void
icachePut
(
Object
key
,
IntrospectionCacheData
o
)
{
innerContext
.
icachePut
(
key
,
o
)
;
}
public
void
setCurrentResource
(
Resource
r
)
{
innerContext
.
setCurrentResource
(
r
)
;
}
public
Resource
getCurrentResource
(
)
{
return
innerContext
.
getCurrentResource
(
)
;
}
public
InternalContextAdapter
getBaseContext
(
)
{
return
innerContext
.
getBaseContext
(
)
;
}
public
Context
getInternalUserContext
(
)
{
return
innerContext
.
getInternalUserContext
(
)
;
}
public
EventCartridge
attachEventCartridge
(
EventCartridge
ec
)
{
EventCartridge
cartridge
=
innerContext
.
attachEventCartridge
(
ec
)
;
return
cartridge
;
}
public
EventCartridge
getEventCartridge
(
)
{
return
innerContext
.
getEventCartridge
(
)
;
}
public
boolean
getAllowRendering
(
)
{
return
innerContext
.
getAllowRendering
(
)
;
}
public
void
setAllowRendering
(
boolean
v
)
{
innerContext
.
setAllowRendering
(
v
)
;
}
}
public
String
getName
(
)
{
return
"foreach"
;
}
public
int
getType
(
)
{
return
BLOCK
;
}
private
String
counterName
;
private
int
counterInitialValue
;
private
int
maxNbrLoops
;
private
String
elementKey
;
protected
Info
uberInfo
;
public
void
init
(
RuntimeServices
rs
,
InternalContextAdapter
context
,
Node
node
)
throws
TemplateInitException
{
super
.
init
(
rs
,
context
,
node
)
;
counterName
=
rsvc
.
getString
(
RuntimeConstants
.
COUNTER_NAME
)
;
counterInitialValue
=
rsvc
.
getInt
(
RuntimeConstants
.
COUNTER_INITIAL_VALUE
)
;
maxNbrLoops
=
rsvc
.
getInt
(
RuntimeConstants
.
MAX_NUMBER_LOOPS
,
Integer
.
MAX_VALUE
)
;
if
(
maxNbrLoops
<
1
)
{
maxNbrLoops
=
Integer
.
MAX_VALUE
;
}
SimpleNode
sn
=
(
SimpleNode
)
node
.
jjtGetChild
(
0
)
;
if
(
sn
instanceof
ASTReference
)
{
elementKey
=
(
(
ASTReference
)
sn
)
.
getRootString
(
)
;
}
else
{
elementKey
=
sn
.
getFirstToken
(
)
.
image
.
substring
(
1
)
;
}
uberInfo
=
new
Info
(
context
.
getCurrentTemplateName
(
)
,
getLine
(
)
,
getColumn
(
)
)
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
,
Node
node
)
throws
IOException
,
MethodInvocationException
,
ResourceNotFoundException
,
ParseErrorException
{
Object
listObject
=
node
.
jjtGetChild
(
2
)
.
value
(
context
)
;
if
(
listObject
==
null
)
return
false
;
Iterator
i
=
null
;
try
{
i
=
rsvc
.
getUberspect
(
)
.
getIterator
(
listObject
,
uberInfo
)
;
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
ee
)
{
rsvc
.
getLog
(
)
.
error
(
"Error getting iterator for #foreach"
,
ee
)
;
}
if
(
i
==
null
)
{
return
false
;
}
int
counter
=
counterInitialValue
;
boolean
maxNbrLoopsExceeded
=
false
;
Object
o
=
context
.
get
(
elementKey
)
;
Object
savedCounter
=
context
.
get
(
counterName
)
;
NullHolderContext
nullHolderContext
=
null
;
while
(
!
maxNbrLoopsExceeded
&&
i
.
hasNext
(
)
)
{
context
.
localPut
(
counterName
,
new
Integer
(
counter
)
)
;
Object
value
=
i
.
next
(
)
;
context
.
localPut
(
elementKey
,
value
)
;
if
(
value
==
null
)
{
if
(
nullHolderContext
==
null
)
{
nullHolderContext
=
new
NullHolderContext
(
elementKey
,
context
)
;
}
node
.
jjtGetChild
(
3
)
.
render
(
nullHolderContext
,
writer
)
;
}
else
{
node
.
jjtGetChild
(
3
)
.
render
(
context
,
writer
)
;
}
counter
++
;
maxNbrLoopsExceeded
=
(
counter
-
counterInitialValue
)
>=
maxNbrLoops
;
}
if
(
savedCounter
!=
null
)
{
context
.
put
(
counterName
,
savedCounter
)
;
}
else
{
context
.
remove
(
counterName
)
;
}
if
(
o
!=
null
)
{
context
.
put
(
elementKey
,
o
)
;
}
else
{
context
.
remove
(
elementKey
)
;
}
return
true
;
}
}
