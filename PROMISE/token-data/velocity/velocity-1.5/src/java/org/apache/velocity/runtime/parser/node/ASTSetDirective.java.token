package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventHandlerUtil
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParserVisitor
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Info
;
public
class
ASTSetDirective
extends
SimpleNode
{
private
String
leftReference
=
""
;
private
Node
right
=
null
;
private
ASTReference
left
=
null
;
boolean
logOnNull
=
false
;
protected
Info
uberInfo
;
public
ASTSetDirective
(
int
id
)
{
super
(
id
)
;
}
public
ASTSetDirective
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
TemplateInitException
{
super
.
init
(
context
,
data
)
;
uberInfo
=
new
Info
(
context
.
getCurrentTemplateName
(
)
,
getLine
(
)
,
getColumn
(
)
)
;
right
=
getRightHandSide
(
)
;
left
=
getLeftHandSide
(
)
;
logOnNull
=
rsvc
.
getBoolean
(
RuntimeConstants
.
RUNTIME_LOG_REFERENCE_LOG_INVALID
,
true
)
;
leftReference
=
left
.
getFirstToken
(
)
.
image
.
substring
(
1
)
;
return
data
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
)
throws
IOException
,
MethodInvocationException
{
Object
value
=
right
.
value
(
context
)
;
if
(
!
rsvc
.
getBoolean
(
RuntimeConstants
.
SET_NULL_ALLOWED
,
false
)
)
{
if
(
value
==
null
)
{
if
(
logOnNull
)
{
boolean
doit
=
EventHandlerUtil
.
shouldLogOnNullSet
(
rsvc
,
context
,
left
.
literal
(
)
,
right
.
literal
(
)
)
;
if
(
doit
&&
log
.
isInfoEnabled
(
)
)
{
log
.
info
(
"RHS of #set statement is null. Context will not be modified. "
+
context
.
getCurrentTemplateName
(
)
+
" [line "
+
getLine
(
)
+
", column "
+
getColumn
(
)
+
"]"
)
;
}
}
String
rightReference
=
null
;
if
(
right
instanceof
ASTExpression
)
{
rightReference
=
(
(
ASTExpression
)
right
)
.
getLastToken
(
)
.
image
;
}
EventHandlerUtil
.
invalidSetMethod
(
rsvc
,
context
,
leftReference
,
rightReference
,
uberInfo
)
;
return
false
;
}
}
if
(
value
==
null
)
{
String
rightReference
=
null
;
if
(
right
instanceof
ASTExpression
)
{
rightReference
=
(
(
ASTExpression
)
right
)
.
getLastToken
(
)
.
image
;
}
EventHandlerUtil
.
invalidSetMethod
(
rsvc
,
context
,
leftReference
,
rightReference
,
uberInfo
)
;
context
.
remove
(
leftReference
)
;
return
false
;
}
else
{
if
(
left
.
jjtGetNumChildren
(
)
==
0
)
{
context
.
put
(
leftReference
,
value
)
;
}
else
{
left
.
setValue
(
context
,
value
)
;
}
}
return
true
;
}
private
ASTReference
getLeftHandSide
(
)
{
return
(
ASTReference
)
jjtGetChild
(
0
)
;
}
private
Node
getRightHandSide
(
)
{
return
jjtGetChild
(
1
)
;
}
}
