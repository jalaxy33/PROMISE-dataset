package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeLogger
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
RuntimeLoggerLog
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Introspector
;
public
class
BooleanPropertyExecutor
extends
PropertyExecutor
{
public
BooleanPropertyExecutor
(
final
Log
log
,
final
Introspector
introspector
,
final
Class
clazz
,
final
String
property
)
{
super
(
log
,
introspector
,
clazz
,
property
)
;
}
public
BooleanPropertyExecutor
(
final
RuntimeLogger
rlog
,
final
Introspector
introspector
,
final
Class
clazz
,
final
String
property
)
{
super
(
new
RuntimeLoggerLog
(
rlog
)
,
introspector
,
clazz
,
property
)
;
}
protected
void
discover
(
final
Class
clazz
,
final
String
property
)
{
try
{
Object
[
]
params
=
{
}
;
StringBuffer
sb
=
new
StringBuffer
(
"is"
)
;
sb
.
append
(
property
)
;
setMethod
(
getIntrospector
(
)
.
getMethod
(
clazz
,
sb
.
toString
(
)
,
params
)
)
;
if
(
!
isAlive
(
)
)
{
char
c
=
sb
.
charAt
(
2
)
;
if
(
Character
.
isLowerCase
(
c
)
)
{
sb
.
setCharAt
(
2
,
Character
.
toUpperCase
(
c
)
)
;
}
else
{
sb
.
setCharAt
(
2
,
Character
.
toLowerCase
(
c
)
)
;
}
setMethod
(
getIntrospector
(
)
.
getMethod
(
clazz
,
sb
.
toString
(
)
,
params
)
)
;
}
if
(
isAlive
(
)
)
{
if
(
getMethod
(
)
.
getReturnType
(
)
!=
Boolean
.
TYPE
)
{
setMethod
(
null
)
;
}
}
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
log
.
error
(
"While looking for boolean property getter for '"
+
property
+
"':"
,
e
)
;
}
}
}
