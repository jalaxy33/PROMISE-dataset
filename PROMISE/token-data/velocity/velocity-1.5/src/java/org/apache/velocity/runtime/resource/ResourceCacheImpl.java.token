package
org
.
apache
.
velocity
.
runtime
.
resource
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Map
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
commons
.
collections
.
map
.
LRUMap
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
public
class
ResourceCacheImpl
implements
ResourceCache
{
protected
Map
cache
=
new
Hashtable
(
)
;
protected
RuntimeServices
rsvc
=
null
;
public
void
initialize
(
RuntimeServices
rs
)
{
rsvc
=
rs
;
int
maxSize
=
rsvc
.
getInt
(
RuntimeConstants
.
RESOURCE_MANAGER_DEFAULTCACHE_SIZE
,
89
)
;
if
(
maxSize
>
0
)
{
Map
lruCache
=
Collections
.
synchronizedMap
(
new
LRUMap
(
maxSize
)
)
;
lruCache
.
putAll
(
cache
)
;
cache
=
lruCache
;
}
rsvc
.
getLog
(
)
.
debug
(
"ResourceCache: initialized ("
+
this
.
getClass
(
)
+
')'
)
;
}
public
Resource
get
(
Object
key
)
{
return
(
Resource
)
cache
.
get
(
key
)
;
}
public
Resource
put
(
Object
key
,
Resource
value
)
{
return
(
Resource
)
cache
.
put
(
key
,
value
)
;
}
public
Resource
remove
(
Object
key
)
{
return
(
Resource
)
cache
.
remove
(
key
)
;
}
public
Iterator
enumerateKeys
(
)
{
return
cache
.
keySet
(
)
.
iterator
(
)
;
}
}
