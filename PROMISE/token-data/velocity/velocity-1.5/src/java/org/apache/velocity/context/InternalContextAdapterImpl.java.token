package
org
.
apache
.
velocity
.
context
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventCartridge
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
IntrospectionCacheData
;
public
final
class
InternalContextAdapterImpl
implements
InternalContextAdapter
{
Context
context
=
null
;
InternalHousekeepingContext
icb
=
null
;
InternalEventContext
iec
=
null
;
public
InternalContextAdapterImpl
(
Context
c
)
{
context
=
c
;
if
(
!
(
c
instanceof
InternalHousekeepingContext
)
)
{
icb
=
new
InternalContextBase
(
)
;
}
else
{
icb
=
(
InternalHousekeepingContext
)
context
;
}
if
(
c
instanceof
InternalEventContext
)
{
iec
=
(
InternalEventContext
)
context
;
}
}
public
void
pushCurrentTemplateName
(
String
s
)
{
icb
.
pushCurrentTemplateName
(
s
)
;
}
public
void
popCurrentTemplateName
(
)
{
icb
.
popCurrentTemplateName
(
)
;
}
public
String
getCurrentTemplateName
(
)
{
return
icb
.
getCurrentTemplateName
(
)
;
}
public
Object
[
]
getTemplateNameStack
(
)
{
return
icb
.
getTemplateNameStack
(
)
;
}
public
IntrospectionCacheData
icacheGet
(
Object
key
)
{
return
icb
.
icacheGet
(
key
)
;
}
public
void
icachePut
(
Object
key
,
IntrospectionCacheData
o
)
{
icb
.
icachePut
(
key
,
o
)
;
}
public
void
setCurrentResource
(
Resource
r
)
{
icb
.
setCurrentResource
(
r
)
;
}
public
Resource
getCurrentResource
(
)
{
return
icb
.
getCurrentResource
(
)
;
}
public
boolean
getAllowRendering
(
)
{
return
icb
.
getAllowRendering
(
)
;
}
public
void
setAllowRendering
(
boolean
v
)
{
icb
.
setAllowRendering
(
v
)
;
}
public
Object
put
(
String
key
,
Object
value
)
{
return
context
.
put
(
key
,
value
)
;
}
public
Object
localPut
(
final
String
key
,
final
Object
value
)
{
return
put
(
key
,
value
)
;
}
public
Object
get
(
String
key
)
{
return
context
.
get
(
key
)
;
}
public
boolean
containsKey
(
Object
key
)
{
return
context
.
containsKey
(
key
)
;
}
public
Object
[
]
getKeys
(
)
{
return
context
.
getKeys
(
)
;
}
public
Object
remove
(
Object
key
)
{
return
context
.
remove
(
key
)
;
}
public
Context
getInternalUserContext
(
)
{
return
context
;
}
public
InternalContextAdapter
getBaseContext
(
)
{
return
this
;
}
public
EventCartridge
attachEventCartridge
(
EventCartridge
ec
)
{
if
(
iec
!=
null
)
{
return
iec
.
attachEventCartridge
(
ec
)
;
}
return
null
;
}
public
EventCartridge
getEventCartridge
(
)
{
if
(
iec
!=
null
)
{
return
iec
.
getEventCartridge
(
)
;
}
return
null
;
}
}
