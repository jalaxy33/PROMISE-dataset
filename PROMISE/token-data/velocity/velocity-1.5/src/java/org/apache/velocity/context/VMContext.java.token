package
org
.
apache
.
velocity
.
context
;
import
java
.
util
.
HashMap
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeServices
;
import
org
.
apache
.
velocity
.
runtime
.
RuntimeConstants
;
import
org
.
apache
.
velocity
.
runtime
.
directive
.
VMProxyArg
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
IntrospectionCacheData
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventCartridge
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
public
class
VMContext
implements
InternalContextAdapter
{
HashMap
vmproxyhash
=
new
HashMap
(
)
;
HashMap
localcontext
=
new
HashMap
(
)
;
InternalContextAdapter
innerContext
=
null
;
InternalContextAdapter
wrappedContext
=
null
;
private
boolean
localcontextscope
=
false
;
public
VMContext
(
InternalContextAdapter
inner
,
RuntimeServices
rsvc
)
{
localcontextscope
=
rsvc
.
getBoolean
(
RuntimeConstants
.
VM_CONTEXT_LOCALSCOPE
,
false
)
;
wrappedContext
=
inner
;
innerContext
=
inner
.
getBaseContext
(
)
;
}
public
Context
getInternalUserContext
(
)
{
return
innerContext
.
getInternalUserContext
(
)
;
}
public
InternalContextAdapter
getBaseContext
(
)
{
return
innerContext
.
getBaseContext
(
)
;
}
public
void
addVMProxyArg
(
VMProxyArg
vmpa
)
throws
MethodInvocationException
{
String
key
=
vmpa
.
getContextReference
(
)
;
if
(
vmpa
.
isConstant
(
)
)
{
localcontext
.
put
(
key
,
vmpa
.
getObject
(
wrappedContext
)
)
;
}
else
{
vmproxyhash
.
put
(
key
,
vmpa
)
;
}
}
public
Object
put
(
final
String
key
,
final
Object
value
)
{
return
put
(
key
,
value
,
localcontextscope
)
;
}
public
Object
localPut
(
final
String
key
,
final
Object
value
)
{
return
put
(
key
,
value
,
true
)
;
}
protected
Object
put
(
final
String
key
,
final
Object
value
,
final
boolean
forceLocal
)
{
VMProxyArg
vmpa
=
(
VMProxyArg
)
vmproxyhash
.
get
(
key
)
;
if
(
vmpa
!=
null
)
{
return
vmpa
.
setObject
(
wrappedContext
,
value
)
;
}
else
{
if
(
forceLocal
)
{
return
localcontext
.
put
(
key
,
value
)
;
}
else
{
if
(
localcontext
.
containsKey
(
key
)
)
{
return
localcontext
.
put
(
key
,
value
)
;
}
else
{
return
innerContext
.
put
(
key
,
value
)
;
}
}
}
}
public
Object
get
(
String
key
)
{
Object
o
=
null
;
VMProxyArg
vmpa
=
(
VMProxyArg
)
vmproxyhash
.
get
(
key
)
;
if
(
vmpa
!=
null
)
{
o
=
vmpa
.
getObject
(
wrappedContext
)
;
}
else
{
o
=
localcontext
.
get
(
key
)
;
if
(
o
==
null
)
{
o
=
innerContext
.
get
(
key
)
;
}
}
return
o
;
}
public
boolean
containsKey
(
Object
key
)
{
return
false
;
}
public
Object
[
]
getKeys
(
)
{
return
vmproxyhash
.
keySet
(
)
.
toArray
(
)
;
}
public
Object
remove
(
Object
key
)
{
return
vmproxyhash
.
remove
(
key
)
;
}
public
void
pushCurrentTemplateName
(
String
s
)
{
innerContext
.
pushCurrentTemplateName
(
s
)
;
}
public
void
popCurrentTemplateName
(
)
{
innerContext
.
popCurrentTemplateName
(
)
;
}
public
String
getCurrentTemplateName
(
)
{
return
innerContext
.
getCurrentTemplateName
(
)
;
}
public
Object
[
]
getTemplateNameStack
(
)
{
return
innerContext
.
getTemplateNameStack
(
)
;
}
public
IntrospectionCacheData
icacheGet
(
Object
key
)
{
return
innerContext
.
icacheGet
(
key
)
;
}
public
void
icachePut
(
Object
key
,
IntrospectionCacheData
o
)
{
innerContext
.
icachePut
(
key
,
o
)
;
}
public
boolean
getAllowRendering
(
)
{
return
innerContext
.
getAllowRendering
(
)
;
}
public
void
setAllowRendering
(
boolean
v
)
{
innerContext
.
setAllowRendering
(
v
)
;
}
public
EventCartridge
attachEventCartridge
(
EventCartridge
ec
)
{
EventCartridge
cartridge
=
innerContext
.
attachEventCartridge
(
ec
)
;
return
cartridge
;
}
public
EventCartridge
getEventCartridge
(
)
{
return
innerContext
.
getEventCartridge
(
)
;
}
public
void
setCurrentResource
(
Resource
r
)
{
innerContext
.
setCurrentResource
(
r
)
;
}
public
Resource
getCurrentResource
(
)
{
return
innerContext
.
getCurrentResource
(
)
;
}
}
