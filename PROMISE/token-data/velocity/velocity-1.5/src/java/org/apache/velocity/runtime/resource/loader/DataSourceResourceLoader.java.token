package
org
.
apache
.
velocity
.
runtime
.
resource
.
loader
;
import
java
.
io
.
BufferedInputStream
;
import
java
.
io
.
InputStream
;
import
java
.
sql
.
Connection
;
import
java
.
sql
.
PreparedStatement
;
import
java
.
sql
.
ResultSet
;
import
java
.
sql
.
SQLException
;
import
java
.
sql
.
Timestamp
;
import
javax
.
naming
.
InitialContext
;
import
javax
.
naming
.
NamingException
;
import
javax
.
sql
.
DataSource
;
import
org
.
apache
.
commons
.
collections
.
ExtendedProperties
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
runtime
.
resource
.
Resource
;
import
org
.
apache
.
velocity
.
util
.
ExceptionUtils
;
import
org
.
apache
.
velocity
.
util
.
StringUtils
;
public
class
DataSourceResourceLoader
extends
ResourceLoader
{
private
String
dataSourceName
;
private
String
tableName
;
private
String
keyColumn
;
private
String
templateColumn
;
private
String
timestampColumn
;
private
InitialContext
ctx
;
private
DataSource
dataSource
;
public
void
init
(
ExtendedProperties
configuration
)
{
dataSourceName
=
StringUtils
.
nullTrim
(
configuration
.
getString
(
"resource.datasource"
)
)
;
tableName
=
StringUtils
.
nullTrim
(
configuration
.
getString
(
"resource.table"
)
)
;
keyColumn
=
StringUtils
.
nullTrim
(
configuration
.
getString
(
"resource.keycolumn"
)
)
;
templateColumn
=
StringUtils
.
nullTrim
(
configuration
.
getString
(
"resource.templatecolumn"
)
)
;
timestampColumn
=
StringUtils
.
nullTrim
(
configuration
.
getString
(
"resource.timestampcolumn"
)
)
;
if
(
dataSource
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"DataSourceResourceLoader: using dataSource instance with table \""
+
tableName
+
"\""
)
;
log
.
debug
(
"DataSourceResourceLoader: using columns \""
+
keyColumn
+
"\", \""
+
templateColumn
+
"\" and \""
+
timestampColumn
+
"\""
)
;
}
log
.
trace
(
"DataSourceResourceLoader initialized."
)
;
}
else
if
(
dataSourceName
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"DataSourceResourceLoader: using \""
+
dataSourceName
+
"\" datasource with table \""
+
tableName
+
"\""
)
;
log
.
debug
(
"DataSourceResourceLoader: using columns \""
+
keyColumn
+
"\", \""
+
templateColumn
+
"\" and \""
+
timestampColumn
+
"\""
)
;
}
log
.
trace
(
"DataSourceResourceLoader initialized."
)
;
}
else
{
log
.
warn
(
"DataSourceResourceLoader not properly initialized. No DataSource was identified."
)
;
}
}
public
void
setDataSource
(
final
DataSource
dataSource
)
{
this
.
dataSource
=
dataSource
;
}
public
boolean
isSourceModified
(
final
Resource
resource
)
{
return
(
resource
.
getLastModified
(
)
!=
readLastModified
(
resource
,
"checking timestamp"
)
)
;
}
public
long
getLastModified
(
final
Resource
resource
)
{
return
readLastModified
(
resource
,
"getting timestamp"
)
;
}
public
synchronized
InputStream
getResourceStream
(
final
String
name
)
throws
ResourceNotFoundException
{
if
(
org
.
apache
.
commons
.
lang
.
StringUtils
.
isEmpty
(
name
)
)
{
throw
new
ResourceNotFoundException
(
"DataSourceResourceLoader: "
+
"Template name was empty or null"
)
;
}
Connection
conn
=
null
;
ResultSet
rs
=
null
;
try
{
conn
=
openDbConnection
(
)
;
rs
=
readData
(
conn
,
templateColumn
,
name
)
;
if
(
rs
.
next
(
)
)
{
InputStream
ascStream
=
rs
.
getAsciiStream
(
templateColumn
)
;
if
(
ascStream
==
null
)
{
throw
new
ResourceNotFoundException
(
"DataSourceResourceLoader: "
+
"template column for '"
+
name
+
"' is null"
)
;
}
return
new
BufferedInputStream
(
ascStream
)
;
}
else
{
throw
new
ResourceNotFoundException
(
"DataSourceResourceLoader: "
+
"could not find resource '"
+
name
+
"'"
)
;
}
}
catch
(
SQLException
sqle
)
{
String
msg
=
"DataSourceResourceLoader: database problem while getting resource '"
+
name
+
"': "
;
log
.
error
(
msg
,
sqle
)
;
throw
new
ResourceNotFoundException
(
msg
)
;
}
catch
(
NamingException
ne
)
{
String
msg
=
"DataSourceResourceLoader: database problem while getting resource '"
+
name
+
"': "
;
log
.
error
(
msg
,
ne
)
;
throw
new
ResourceNotFoundException
(
msg
)
;
}
finally
{
closeResultSet
(
rs
)
;
closeDbConnection
(
conn
)
;
}
}
private
long
readLastModified
(
final
Resource
resource
,
final
String
operation
)
{
long
timeStamp
=
0
;
String
name
=
resource
.
getName
(
)
;
if
(
name
==
null
||
name
.
length
(
)
==
0
)
{
log
.
error
(
"DataSourceResourceLoader: "
+
"Template name was empty or null"
)
;
}
else
{
Connection
conn
=
null
;
ResultSet
rs
=
null
;
try
{
conn
=
openDbConnection
(
)
;
rs
=
readData
(
conn
,
timestampColumn
,
name
)
;
if
(
rs
.
next
(
)
)
{
Timestamp
ts
=
rs
.
getTimestamp
(
timestampColumn
)
;
timeStamp
=
ts
!=
null
?
ts
.
getTime
(
)
:
0
;
}
else
{
log
.
error
(
"DataSourceResourceLoader: could not find resource "
+
name
+
" while "
+
operation
)
;
}
}
catch
(
SQLException
sqle
)
{
String
msg
=
"DataSourceResourceLoader: database problem while "
+
operation
+
" of '"
+
name
+
"': "
;
log
.
error
(
msg
,
sqle
)
;
throw
ExceptionUtils
.
createRuntimeException
(
msg
,
sqle
)
;
}
catch
(
NamingException
ne
)
{
String
msg
=
"DataSourceResourceLoader: database problem while "
+
operation
+
" of '"
+
name
+
"': "
;
log
.
error
(
msg
,
ne
)
;
throw
ExceptionUtils
.
createRuntimeException
(
msg
,
ne
)
;
}
finally
{
closeResultSet
(
rs
)
;
closeDbConnection
(
conn
)
;
}
}
return
timeStamp
;
}
private
Connection
openDbConnection
(
)
throws
NamingException
,
SQLException
{
if
(
dataSource
!=
null
)
{
return
dataSource
.
getConnection
(
)
;
}
if
(
ctx
==
null
)
{
ctx
=
new
InitialContext
(
)
;
}
dataSource
=
(
DataSource
)
ctx
.
lookup
(
dataSourceName
)
;
return
dataSource
.
getConnection
(
)
;
}
private
void
closeDbConnection
(
final
Connection
conn
)
{
if
(
conn
!=
null
)
{
try
{
conn
.
close
(
)
;
}
catch
(
RuntimeException
re
)
{
throw
re
;
}
catch
(
Exception
e
)
{
log
.
warn
(
"DataSourceResourceLoader: problem when closing connection"
,
e
)
;
}
}
}
private
void
closeResultSet
(
final
ResultSet
rs
)
{
if
(
rs
!=
null
)
{
try
{
rs
.
close
(
)
;
}
catch
(
RuntimeException
re
)
{
throw
re
;
}
catch
(
Exception
e
)
{
log
.
warn
(
"DataSourceResourceLoader: problem when closing result set: "
,
e
)
;
}
}
}
private
ResultSet
readData
(
final
Connection
conn
,
final
String
columnNames
,
final
String
templateName
)
throws
SQLException
{
PreparedStatement
ps
=
conn
.
prepareStatement
(
"SELECT "
+
columnNames
+
" FROM "
+
tableName
+
" WHERE "
+
keyColumn
+
" = ?"
)
;
ps
.
setString
(
1
,
templateName
)
;
return
ps
.
executeQuery
(
)
;
}
}
