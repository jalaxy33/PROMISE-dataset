package
org
.
apache
.
velocity
.
util
.
introspection
;
import
java
.
lang
.
reflect
.
Method
;
import
org
.
apache
.
velocity
.
runtime
.
log
.
Log
;
public
class
SecureIntrospectorImpl
extends
Introspector
implements
SecureIntrospectorControl
{
private
String
[
]
badClasses
;
private
String
[
]
badPackages
;
public
SecureIntrospectorImpl
(
String
[
]
badClasses
,
String
[
]
badPackages
,
Log
log
)
{
super
(
log
)
;
this
.
badClasses
=
badClasses
;
this
.
badPackages
=
badPackages
;
}
public
Method
getMethod
(
Class
clazz
,
String
methodName
,
Object
[
]
params
)
throws
IllegalArgumentException
{
if
(
!
checkObjectExecutePermission
(
clazz
,
methodName
)
)
{
log
.
warn
(
"Cannot retrieve method "
+
methodName
+
" from object of class "
+
clazz
.
getName
(
)
+
" due to security restrictions."
)
;
return
null
;
}
else
{
return
super
.
getMethod
(
clazz
,
methodName
,
params
)
;
}
}
public
boolean
checkObjectExecutePermission
(
Class
clazz
,
String
methodName
)
{
if
(
(
methodName
!=
null
)
&&
(
methodName
.
equals
(
"wait"
)
||
methodName
.
equals
(
"notify"
)
)
)
{
return
false
;
}
else
if
(
java
.
lang
.
Number
.
class
.
isAssignableFrom
(
clazz
)
)
{
return
true
;
}
else
if
(
java
.
lang
.
Boolean
.
class
.
isAssignableFrom
(
clazz
)
)
{
return
true
;
}
else
if
(
java
.
lang
.
String
.
class
.
isAssignableFrom
(
clazz
)
)
{
return
true
;
}
else
if
(
java
.
lang
.
Class
.
class
.
isAssignableFrom
(
clazz
)
&&
(
methodName
!=
null
)
&&
methodName
.
equals
(
"getName"
)
)
{
return
true
;
}
String
className
=
clazz
.
getName
(
)
;
if
(
className
.
startsWith
(
"[L"
)
&&
className
.
endsWith
(
";"
)
)
{
className
=
className
.
substring
(
2
,
className
.
length
(
)
-
1
)
;
}
String
packageName
;
int
dotPos
=
className
.
lastIndexOf
(
'.'
)
;
packageName
=
(
dotPos
==
-
1
)
?
""
:
className
.
substring
(
0
,
dotPos
)
;
int
sz
=
badPackages
.
length
;
for
(
int
i
=
0
;
i
<
sz
;
i
++
)
{
if
(
packageName
.
equals
(
badPackages
[
i
]
)
)
{
return
false
;
}
}
sz
=
badClasses
.
length
;
for
(
int
i
=
0
;
i
<
sz
;
i
++
)
{
if
(
className
.
equals
(
badClasses
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
}
