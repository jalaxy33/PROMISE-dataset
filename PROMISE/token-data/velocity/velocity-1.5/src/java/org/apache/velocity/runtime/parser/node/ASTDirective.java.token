package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Writer
;
import
org
.
apache
.
commons
.
lang
.
builder
.
ToStringBuilder
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
ParseErrorException
;
import
org
.
apache
.
velocity
.
exception
.
ResourceNotFoundException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
runtime
.
directive
.
Directive
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParseException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParserVisitor
;
import
org
.
apache
.
velocity
.
util
.
ExceptionUtils
;
public
class
ASTDirective
extends
SimpleNode
{
private
Directive
directive
=
null
;
private
String
directiveName
=
""
;
private
boolean
isDirective
;
public
ASTDirective
(
int
id
)
{
super
(
id
)
;
}
public
ASTDirective
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
TemplateInitException
{
super
.
init
(
context
,
data
)
;
if
(
parser
.
isDirective
(
directiveName
)
)
{
isDirective
=
true
;
try
{
directive
=
(
Directive
)
parser
.
getDirective
(
directiveName
)
.
getClass
(
)
.
newInstance
(
)
;
}
catch
(
InstantiationException
e
)
{
throw
ExceptionUtils
.
createRuntimeException
(
"Couldn't initialize "
+
"directive of class "
+
parser
.
getDirective
(
directiveName
)
.
getClass
(
)
.
getName
(
)
,
e
)
;
}
catch
(
IllegalAccessException
e
)
{
throw
ExceptionUtils
.
createRuntimeException
(
"Couldn't initialize "
+
"directive of class "
+
parser
.
getDirective
(
directiveName
)
.
getClass
(
)
.
getName
(
)
,
e
)
;
}
directive
.
init
(
rsvc
,
context
,
this
)
;
directive
.
setLocation
(
getLine
(
)
,
getColumn
(
)
)
;
}
else
if
(
rsvc
.
isVelocimacro
(
directiveName
,
context
.
getCurrentTemplateName
(
)
)
)
{
isDirective
=
true
;
directive
=
rsvc
.
getVelocimacro
(
directiveName
,
context
.
getCurrentTemplateName
(
)
)
;
try
{
directive
.
init
(
rsvc
,
context
,
this
)
;
}
catch
(
TemplateInitException
die
)
{
throw
new
TemplateInitException
(
die
.
getMessage
(
)
,
(
ParseException
)
die
.
getWrappedThrowable
(
)
,
die
.
getTemplateName
(
)
,
die
.
getColumnNumber
(
)
+
getColumn
(
)
,
die
.
getLineNumber
(
)
+
getLine
(
)
)
;
}
directive
.
setLocation
(
getLine
(
)
,
getColumn
(
)
)
;
}
else
{
isDirective
=
false
;
}
return
data
;
}
public
boolean
render
(
InternalContextAdapter
context
,
Writer
writer
)
throws
IOException
,
MethodInvocationException
,
ResourceNotFoundException
,
ParseErrorException
{
if
(
isDirective
)
{
directive
.
render
(
context
,
writer
,
this
)
;
}
else
{
if
(
context
.
getAllowRendering
(
)
)
{
writer
.
write
(
"#"
)
;
writer
.
write
(
directiveName
)
;
}
}
return
true
;
}
public
void
setDirectiveName
(
String
str
)
{
directiveName
=
str
;
}
public
String
getDirectiveName
(
)
{
return
directiveName
;
}
public
String
toString
(
)
{
return
new
ToStringBuilder
(
this
)
.
appendSuper
(
super
.
toString
(
)
)
.
append
(
"directiveName"
,
getDirectiveName
(
)
)
.
toString
(
)
;
}
}
