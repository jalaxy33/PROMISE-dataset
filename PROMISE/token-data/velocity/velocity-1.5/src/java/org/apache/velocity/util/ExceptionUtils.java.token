package
org
.
apache
.
velocity
.
util
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
lang
.
reflect
.
Method
;
public
class
ExceptionUtils
{
private
static
boolean
causesAllowed
=
true
;
public
static
RuntimeException
createRuntimeException
(
String
message
,
Throwable
cause
)
{
return
(
RuntimeException
)
createWithCause
(
RuntimeException
.
class
,
message
,
cause
)
;
}
public
static
Throwable
createWithCause
(
Class
clazz
,
String
message
,
Throwable
cause
)
{
Throwable
re
=
null
;
if
(
causesAllowed
)
{
try
{
Constructor
constructor
=
clazz
.
getConstructor
(
new
Class
[
]
{
String
.
class
,
Throwable
.
class
}
)
;
re
=
(
Throwable
)
constructor
.
newInstance
(
new
Object
[
]
{
message
,
cause
}
)
;
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
causesAllowed
=
false
;
}
}
if
(
re
==
null
)
{
try
{
Constructor
constructor
=
clazz
.
getConstructor
(
new
Class
[
]
{
String
.
class
}
)
;
re
=
(
Throwable
)
constructor
.
newInstance
(
new
Object
[
]
{
message
+
" caused by "
+
cause
}
)
;
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
"Error caused "
+
e
)
;
}
}
return
re
;
}
public
static
void
setCause
(
Throwable
onObject
,
Throwable
cause
)
{
if
(
causesAllowed
)
{
try
{
Method
method
=
onObject
.
getClass
(
)
.
getMethod
(
"initCause"
,
new
Class
[
]
{
Throwable
.
class
}
)
;
method
.
invoke
(
onObject
,
new
Object
[
]
{
cause
}
)
;
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
causesAllowed
=
false
;
}
}
}
}
