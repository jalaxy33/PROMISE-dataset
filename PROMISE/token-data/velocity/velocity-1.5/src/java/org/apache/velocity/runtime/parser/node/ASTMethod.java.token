package
org
.
apache
.
velocity
.
runtime
.
parser
.
node
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
org
.
apache
.
commons
.
lang
.
ArrayUtils
;
import
org
.
apache
.
commons
.
lang
.
StringUtils
;
import
org
.
apache
.
velocity
.
app
.
event
.
EventHandlerUtil
;
import
org
.
apache
.
velocity
.
context
.
InternalContextAdapter
;
import
org
.
apache
.
velocity
.
exception
.
MethodInvocationException
;
import
org
.
apache
.
velocity
.
exception
.
TemplateInitException
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
Parser
;
import
org
.
apache
.
velocity
.
runtime
.
parser
.
ParserVisitor
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
Info
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
IntrospectionCacheData
;
import
org
.
apache
.
velocity
.
util
.
introspection
.
VelMethod
;
public
class
ASTMethod
extends
SimpleNode
{
private
String
methodName
=
""
;
private
int
paramCount
=
0
;
protected
Info
uberInfo
;
public
ASTMethod
(
int
id
)
{
super
(
id
)
;
}
public
ASTMethod
(
Parser
p
,
int
id
)
{
super
(
p
,
id
)
;
}
public
Object
jjtAccept
(
ParserVisitor
visitor
,
Object
data
)
{
return
visitor
.
visit
(
this
,
data
)
;
}
public
Object
init
(
InternalContextAdapter
context
,
Object
data
)
throws
TemplateInitException
{
super
.
init
(
context
,
data
)
;
uberInfo
=
new
Info
(
context
.
getCurrentTemplateName
(
)
,
getLine
(
)
,
getColumn
(
)
)
;
methodName
=
getFirstToken
(
)
.
image
;
paramCount
=
jjtGetNumChildren
(
)
-
1
;
return
data
;
}
public
Object
execute
(
Object
o
,
InternalContextAdapter
context
)
throws
MethodInvocationException
{
VelMethod
method
=
null
;
Object
[
]
params
=
new
Object
[
paramCount
]
;
try
{
final
Class
[
]
paramClasses
=
paramCount
>
0
?
new
Class
[
paramCount
]
:
ArrayUtils
.
EMPTY_CLASS_ARRAY
;
for
(
int
j
=
0
;
j
<
paramCount
;
j
++
)
{
params
[
j
]
=
jjtGetChild
(
j
+
1
)
.
value
(
context
)
;
if
(
params
[
j
]
!=
null
)
{
paramClasses
[
j
]
=
params
[
j
]
.
getClass
(
)
;
}
}
MethodCacheKey
mck
=
new
MethodCacheKey
(
methodName
,
paramClasses
)
;
IntrospectionCacheData
icd
=
context
.
icacheGet
(
mck
)
;
if
(
icd
!=
null
&&
(
o
!=
null
&&
icd
.
contextData
==
o
.
getClass
(
)
)
)
{
method
=
(
VelMethod
)
icd
.
thingy
;
}
else
{
method
=
rsvc
.
getUberspect
(
)
.
getMethod
(
o
,
methodName
,
params
,
new
Info
(
context
.
getCurrentTemplateName
(
)
,
getLine
(
)
,
getColumn
(
)
)
)
;
if
(
(
method
!=
null
)
&&
(
o
!=
null
)
)
{
icd
=
new
IntrospectionCacheData
(
)
;
icd
.
contextData
=
o
.
getClass
(
)
;
icd
.
thingy
=
method
;
context
.
icachePut
(
mck
,
icd
)
;
}
}
if
(
method
==
null
)
{
return
null
;
}
}
catch
(
MethodInvocationException
mie
)
{
throw
mie
;
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
log
.
error
(
"ASTMethod.execute() : exception from introspection"
,
e
)
;
return
null
;
}
try
{
Object
obj
=
method
.
invoke
(
o
,
params
)
;
if
(
obj
==
null
)
{
if
(
method
.
getReturnType
(
)
==
Void
.
TYPE
)
{
return
""
;
}
}
return
obj
;
}
catch
(
InvocationTargetException
ite
)
{
Throwable
t
=
ite
.
getTargetException
(
)
;
if
(
t
instanceof
Exception
)
{
try
{
return
EventHandlerUtil
.
methodException
(
rsvc
,
context
,
o
.
getClass
(
)
,
methodName
,
(
Exception
)
t
)
;
}
catch
(
Exception
e
)
{
throw
new
MethodInvocationException
(
"Invocation of method '"
+
methodName
+
"' in  "
+
o
.
getClass
(
)
+
" threw exception "
+
e
.
toString
(
)
,
e
,
methodName
,
context
.
getCurrentTemplateName
(
)
,
this
.
getLine
(
)
,
this
.
getColumn
(
)
)
;
}
}
else
{
throw
new
MethodInvocationException
(
"Invocation of method '"
+
methodName
+
"' in  "
+
o
.
getClass
(
)
+
" threw exception "
+
ite
.
getTargetException
(
)
.
toString
(
)
,
ite
.
getTargetException
(
)
,
methodName
,
context
.
getCurrentTemplateName
(
)
,
this
.
getLine
(
)
,
this
.
getColumn
(
)
)
;
}
}
catch
(
RuntimeException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
log
.
error
(
"ASTMethod.execute() : exception invoking method '"
+
methodName
+
"' in "
+
o
.
getClass
(
)
,
e
)
;
return
null
;
}
}
public
static
class
MethodCacheKey
{
private
final
String
methodName
;
private
final
Class
[
]
params
;
public
MethodCacheKey
(
String
methodName
,
Class
[
]
params
)
{
this
.
methodName
=
(
methodName
!=
null
)
?
methodName
:
StringUtils
.
EMPTY
;
this
.
params
=
(
params
!=
null
)
?
params
:
ArrayUtils
.
EMPTY_CLASS_ARRAY
;
}
public
boolean
equals
(
Object
o
)
{
if
(
o
instanceof
MethodCacheKey
)
{
final
MethodCacheKey
other
=
(
MethodCacheKey
)
o
;
if
(
params
.
length
==
other
.
params
.
length
&&
methodName
.
equals
(
other
.
methodName
)
)
{
for
(
int
i
=
0
;
i
<
params
.
length
;
++
i
)
{
if
(
params
[
i
]
==
null
)
{
if
(
params
[
i
]
!=
other
.
params
[
i
]
)
{
return
false
;
}
}
else
if
(
!
params
[
i
]
.
equals
(
other
.
params
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
}
return
false
;
}
public
int
hashCode
(
)
{
int
result
=
17
;
for
(
int
i
=
0
;
i
<
params
.
length
;
++
i
)
{
final
Class
param
=
params
[
i
]
;
if
(
param
!=
null
)
{
result
=
result
*
37
+
param
.
hashCode
(
)
;
}
}
result
=
result
*
37
+
methodName
.
hashCode
(
)
;
return
result
;
}
}
public
String
getMethodName
(
)
{
return
methodName
;
}
}
