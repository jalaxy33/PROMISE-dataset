package
org
.
apache
.
xml
.
serializer
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
io
.
Writer
;
public
class
WriterToUTF8
extends
Writer
{
private
static
final
boolean
DEBUG_OUT
=
false
;
private
final
OutputStream
m_os
;
public
WriterToUTF8
(
OutputStream
os
)
throws
UnsupportedEncodingException
{
m_os
=
os
;
}
public
void
write
(
final
int
c
)
throws
IOException
{
if
(
c
<
0x80
)
m_os
.
write
(
c
)
;
else
if
(
c
<
0x800
)
{
m_os
.
write
(
0xc0
+
(
c
>
>
6
)
)
;
m_os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
m_os
.
write
(
0xe0
+
(
c
>
>
12
)
)
;
m_os
.
write
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
m_os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
if
(
DEBUG_OUT
)
{
if
(
c
<
0x80
)
{
char
ch
=
(
char
)
c
;
System
.
out
.
print
(
ch
)
;
}
else
if
(
c
<
0x800
)
{
System
.
out
.
print
(
0xc0
+
(
c
>
>
6
)
)
;
System
.
out
.
print
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
System
.
out
.
print
(
0xe0
+
(
c
>
>
12
)
)
;
System
.
out
.
print
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
System
.
out
.
print
(
0x80
+
(
c
&
0x3f
)
)
;
}
System
.
out
.
flush
(
)
;
}
return
;
}
public
void
write
(
final
char
chars
[
]
,
final
int
start
,
final
int
length
)
throws
java
.
io
.
IOException
{
final
OutputStream
os
=
m_os
;
int
n
=
length
+
start
;
for
(
int
i
=
start
;
i
<
n
;
i
++
)
{
final
char
c
=
chars
[
i
]
;
if
(
c
<
0x80
)
os
.
write
(
c
)
;
else
if
(
c
<
0x800
)
{
os
.
write
(
0xc0
+
(
c
>
>
6
)
)
;
os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
os
.
write
(
0xe0
+
(
c
>
>
12
)
)
;
os
.
write
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
if
(
DEBUG_OUT
)
{
for
(
int
i
=
start
;
i
<
n
;
i
++
)
{
final
char
c
=
chars
[
i
]
;
if
(
c
<
0x80
)
System
.
out
.
print
(
c
)
;
else
if
(
c
<
0x800
)
{
System
.
out
.
print
(
0xc0
+
(
c
>
>
6
)
)
;
System
.
out
.
print
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
System
.
out
.
print
(
0xe0
+
(
c
>
>
12
)
)
;
System
.
out
.
print
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
System
.
out
.
print
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
System
.
out
.
flush
(
)
;
}
return
;
}
public
void
write
(
final
String
s
)
throws
IOException
{
final
int
n
=
s
.
length
(
)
;
final
OutputStream
os
=
m_os
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
final
char
c
=
s
.
charAt
(
i
)
;
if
(
c
<
0x80
)
os
.
write
(
c
)
;
else
if
(
c
<
0x800
)
{
os
.
write
(
0xc0
+
(
c
>
>
6
)
)
;
os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
os
.
write
(
0xe0
+
(
c
>
>
12
)
)
;
os
.
write
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
if
(
DEBUG_OUT
)
{
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
final
char
c
=
s
.
charAt
(
i
)
;
if
(
c
<
0x80
)
System
.
out
.
print
(
c
)
;
else
if
(
c
<
0x800
)
{
System
.
out
.
print
(
0xc0
+
(
c
>
>
6
)
)
;
System
.
out
.
print
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
System
.
out
.
print
(
0xe0
+
(
c
>
>
12
)
)
;
System
.
out
.
print
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
System
.
out
.
print
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
System
.
out
.
flush
(
)
;
}
return
;
}
public
void
flush
(
)
throws
java
.
io
.
IOException
{
m_os
.
flush
(
)
;
}
public
void
close
(
)
throws
java
.
io
.
IOException
{
m_os
.
close
(
)
;
}
public
OutputStream
getOutputStream
(
)
{
return
m_os
;
}
}
