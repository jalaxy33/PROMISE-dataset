package
org
.
apache
.
xml
.
utils
;
import
java
.
util
.
Stack
;
import
org
.
apache
.
xml
.
res
.
XMLErrorResources
;
import
org
.
apache
.
xml
.
res
.
XMLMessages
;
import
org
.
w3c
.
dom
.
Document
;
import
org
.
w3c
.
dom
.
DocumentFragment
;
import
org
.
w3c
.
dom
.
Element
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
w3c
.
dom
.
Text
;
import
org
.
xml
.
sax
.
Attributes
;
import
org
.
xml
.
sax
.
ContentHandler
;
import
org
.
xml
.
sax
.
Locator
;
import
org
.
xml
.
sax
.
ext
.
LexicalHandler
;
public
class
DOMBuilder
implements
ContentHandler
,
LexicalHandler
{
public
Document
m_doc
;
protected
Node
m_currentNode
=
null
;
public
DocumentFragment
m_docFrag
=
null
;
protected
Stack
m_elemStack
=
new
Stack
(
)
;
public
DOMBuilder
(
Document
doc
,
Node
node
)
{
m_doc
=
doc
;
m_currentNode
=
node
;
}
public
DOMBuilder
(
Document
doc
,
DocumentFragment
docFrag
)
{
m_doc
=
doc
;
m_docFrag
=
docFrag
;
}
public
DOMBuilder
(
Document
doc
)
{
m_doc
=
doc
;
}
public
Node
getRootNode
(
)
{
return
(
null
!=
m_docFrag
)
?
(
Node
)
m_docFrag
:
(
Node
)
m_doc
;
}
public
Node
getCurrentNode
(
)
{
return
m_currentNode
;
}
public
java
.
io
.
Writer
getWriter
(
)
{
return
null
;
}
protected
void
append
(
Node
newNode
)
throws
org
.
xml
.
sax
.
SAXException
{
Node
currentNode
=
m_currentNode
;
if
(
null
!=
currentNode
)
{
currentNode
.
appendChild
(
newNode
)
;
}
else
if
(
null
!=
m_docFrag
)
{
m_docFrag
.
appendChild
(
newNode
)
;
}
else
{
boolean
ok
=
true
;
short
type
=
newNode
.
getNodeType
(
)
;
if
(
type
==
Node
.
TEXT_NODE
)
{
String
data
=
newNode
.
getNodeValue
(
)
;
if
(
(
null
!=
data
)
&&
(
data
.
trim
(
)
.
length
(
)
>
0
)
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
XMLMessages
.
createXMLMessage
(
XMLErrorResources
.
ER_CANT_OUTPUT_TEXT_BEFORE_DOC
,
null
)
)
;
}
ok
=
false
;
}
else
if
(
type
==
Node
.
ELEMENT_NODE
)
{
if
(
m_doc
.
getDocumentElement
(
)
!=
null
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
XMLMessages
.
createXMLMessage
(
XMLErrorResources
.
ER_CANT_HAVE_MORE_THAN_ONE_ROOT
,
null
)
)
;
}
}
if
(
ok
)
m_doc
.
appendChild
(
newNode
)
;
}
}
public
void
setDocumentLocator
(
Locator
locator
)
{
}
public
void
startDocument
(
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
endDocument
(
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
startElement
(
String
ns
,
String
localName
,
String
name
,
Attributes
atts
)
throws
org
.
xml
.
sax
.
SAXException
{
Element
elem
;
if
(
(
null
==
ns
)
||
(
ns
.
length
(
)
==
0
)
)
elem
=
m_doc
.
createElementNS
(
null
,
name
)
;
else
elem
=
m_doc
.
createElementNS
(
ns
,
name
)
;
append
(
elem
)
;
try
{
int
nAtts
=
atts
.
getLength
(
)
;
if
(
0
!=
nAtts
)
{
for
(
int
i
=
0
;
i
<
nAtts
;
i
++
)
{
if
(
atts
.
getType
(
i
)
.
equalsIgnoreCase
(
"ID"
)
)
setIDAttribute
(
atts
.
getValue
(
i
)
,
elem
)
;
String
attrNS
=
atts
.
getURI
(
i
)
;
if
(
""
.
equals
(
attrNS
)
)
attrNS
=
null
;
String
attrQName
=
atts
.
getQName
(
i
)
;
elem
.
setAttributeNS
(
attrNS
,
attrQName
,
atts
.
getValue
(
i
)
)
;
}
}
m_elemStack
.
push
(
elem
)
;
m_currentNode
=
elem
;
}
catch
(
java
.
lang
.
Exception
de
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
de
)
;
}
}
public
void
endElement
(
String
ns
,
String
localName
,
String
name
)
throws
org
.
xml
.
sax
.
SAXException
{
m_elemStack
.
pop
(
)
;
m_currentNode
=
m_elemStack
.
isEmpty
(
)
?
null
:
(
Node
)
m_elemStack
.
peek
(
)
;
}
public
void
setIDAttribute
(
String
id
,
Element
elem
)
{
}
public
void
characters
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
if
(
isOutsideDocElem
(
)
&&
org
.
apache
.
xml
.
utils
.
XMLCharacterRecognizer
.
isWhiteSpace
(
ch
,
start
,
length
)
)
return
;
if
(
m_inCData
)
{
cdata
(
ch
,
start
,
length
)
;
return
;
}
String
s
=
new
String
(
ch
,
start
,
length
)
;
Text
text
=
m_doc
.
createTextNode
(
s
)
;
append
(
text
)
;
}
public
void
charactersRaw
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
if
(
isOutsideDocElem
(
)
&&
org
.
apache
.
xml
.
utils
.
XMLCharacterRecognizer
.
isWhiteSpace
(
ch
,
start
,
length
)
)
return
;
String
s
=
new
String
(
ch
,
start
,
length
)
;
append
(
m_doc
.
createProcessingInstruction
(
"xslt-next-is-raw"
,
"formatter-to-dom"
)
)
;
append
(
m_doc
.
createTextNode
(
s
)
)
;
}
public
void
startEntity
(
String
name
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
endEntity
(
String
name
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
entityReference
(
String
name
)
throws
org
.
xml
.
sax
.
SAXException
{
append
(
m_doc
.
createEntityReference
(
name
)
)
;
}
public
void
ignorableWhitespace
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
if
(
isOutsideDocElem
(
)
)
return
;
String
s
=
new
String
(
ch
,
start
,
length
)
;
append
(
m_doc
.
createTextNode
(
s
)
)
;
}
private
boolean
isOutsideDocElem
(
)
{
return
(
null
==
m_docFrag
)
&&
m_elemStack
.
size
(
)
==
0
&&
(
null
==
m_currentNode
||
m_currentNode
.
getNodeType
(
)
==
Node
.
DOCUMENT_NODE
)
;
}
public
void
processingInstruction
(
String
target
,
String
data
)
throws
org
.
xml
.
sax
.
SAXException
{
append
(
m_doc
.
createProcessingInstruction
(
target
,
data
)
)
;
}
public
void
comment
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
append
(
m_doc
.
createComment
(
new
String
(
ch
,
start
,
length
)
)
)
;
}
protected
boolean
m_inCData
=
false
;
public
void
startCDATA
(
)
throws
org
.
xml
.
sax
.
SAXException
{
m_inCData
=
true
;
}
public
void
endCDATA
(
)
throws
org
.
xml
.
sax
.
SAXException
{
m_inCData
=
false
;
}
public
void
cdata
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
if
(
isOutsideDocElem
(
)
&&
org
.
apache
.
xml
.
utils
.
XMLCharacterRecognizer
.
isWhiteSpace
(
ch
,
start
,
length
)
)
return
;
String
s
=
new
String
(
ch
,
start
,
length
)
;
append
(
m_doc
.
createCDATASection
(
s
)
)
;
}
public
void
startDTD
(
String
name
,
String
publicId
,
String
systemId
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
endDTD
(
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
startPrefixMapping
(
String
prefix
,
String
uri
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
endPrefixMapping
(
String
prefix
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
skippedEntity
(
String
name
)
throws
org
.
xml
.
sax
.
SAXException
{
}
}
