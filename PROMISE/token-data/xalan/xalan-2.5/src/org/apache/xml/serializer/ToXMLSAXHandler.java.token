package
org
.
apache
.
xml
.
serializer
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
Writer
;
import
java
.
util
.
Properties
;
import
javax
.
xml
.
transform
.
Result
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
xml
.
sax
.
Attributes
;
import
org
.
xml
.
sax
.
ContentHandler
;
import
org
.
xml
.
sax
.
Locator
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
ext
.
LexicalHandler
;
public
class
ToXMLSAXHandler
extends
ToSAXHandler
{
protected
boolean
m_escapeSetting
=
false
;
public
ToXMLSAXHandler
(
)
{
m_prefixMap
=
new
NamespaceMappings
(
)
;
initCDATA
(
)
;
}
public
Properties
getOutputFormat
(
)
{
return
null
;
}
public
OutputStream
getOutputStream
(
)
{
return
null
;
}
public
Writer
getWriter
(
)
{
return
null
;
}
public
void
indent
(
int
n
)
throws
SAXException
{
}
public
boolean
reset
(
)
{
return
false
;
}
public
void
serialize
(
Node
node
)
throws
IOException
{
}
public
boolean
setEscaping
(
boolean
escape
)
throws
SAXException
{
boolean
oldEscapeSetting
=
m_escapeSetting
;
m_escapeSetting
=
escape
;
if
(
escape
)
{
processingInstruction
(
Result
.
PI_ENABLE_OUTPUT_ESCAPING
,
""
)
;
}
else
{
processingInstruction
(
Result
.
PI_DISABLE_OUTPUT_ESCAPING
,
""
)
;
}
return
oldEscapeSetting
;
}
public
void
setOutputFormat
(
Properties
format
)
{
}
public
void
setOutputStream
(
OutputStream
output
)
{
}
public
void
setWriter
(
Writer
writer
)
{
}
public
void
attributeDecl
(
String
arg0
,
String
arg1
,
String
arg2
,
String
arg3
,
String
arg4
)
throws
SAXException
{
}
public
void
elementDecl
(
String
arg0
,
String
arg1
)
throws
SAXException
{
}
public
void
externalEntityDecl
(
String
arg0
,
String
arg1
,
String
arg2
)
throws
SAXException
{
}
public
void
internalEntityDecl
(
String
arg0
,
String
arg1
)
throws
SAXException
{
}
public
void
endDocument
(
)
throws
SAXException
{
flushPending
(
)
;
m_saxHandler
.
endDocument
(
)
;
super
.
fireEndDoc
(
)
;
}
protected
void
closeStartTag
(
)
throws
SAXException
{
m_startTagOpen
=
false
;
final
String
localName
=
getLocalName
(
m_elementName
)
;
final
String
uri
=
getNamespaceURI
(
m_elementName
,
true
)
;
if
(
m_needToCallStartDocument
)
{
startDocumentInternal
(
)
;
}
m_saxHandler
.
startElement
(
uri
,
localName
,
m_elementName
,
m_attributes
)
;
m_attributes
.
clear
(
)
;
if
(
m_state
!=
null
)
m_state
.
setCurrentNode
(
null
)
;
pushCdataSectionState
(
)
;
}
public
void
closeCDATA
(
)
throws
SAXException
{
m_saxHandler
.
characters
(
ENDCDATA
,
0
,
ENDCDATA
.
length
)
;
m_cdataTagOpen
=
false
;
}
public
void
endElement
(
String
namespaceURI
,
String
localName
,
String
qName
)
throws
SAXException
{
flushPending
(
)
;
if
(
namespaceURI
==
null
)
{
if
(
m_elementURI
!=
null
)
namespaceURI
=
m_elementURI
;
else
namespaceURI
=
getNamespaceURI
(
qName
,
true
)
;
}
if
(
localName
==
null
)
{
if
(
m_elementLocalName
!=
null
)
localName
=
m_elementLocalName
;
else
localName
=
getLocalName
(
qName
)
;
}
m_saxHandler
.
endElement
(
namespaceURI
,
localName
,
qName
)
;
super
.
fireEndElem
(
qName
)
;
m_prefixMap
.
popNamespaces
(
m_currentElemDepth
)
;
m_currentElemDepth
--
;
m_startTagOpen
=
false
;
m_cdataSectionStates
.
pop
(
)
;
}
public
void
endPrefixMapping
(
String
prefix
)
throws
SAXException
{
return
;
}
public
void
ignorableWhitespace
(
char
[
]
arg0
,
int
arg1
,
int
arg2
)
throws
SAXException
{
m_saxHandler
.
ignorableWhitespace
(
arg0
,
arg1
,
arg2
)
;
}
public
void
setDocumentLocator
(
Locator
arg0
)
{
m_saxHandler
.
setDocumentLocator
(
arg0
)
;
}
public
void
skippedEntity
(
String
arg0
)
throws
SAXException
{
m_saxHandler
.
skippedEntity
(
arg0
)
;
}
public
void
startPrefixMapping
(
String
prefix
,
String
uri
)
throws
SAXException
{
startPrefixMapping
(
prefix
,
uri
,
true
)
;
}
public
boolean
startPrefixMapping
(
String
prefix
,
String
uri
,
boolean
shouldFlush
)
throws
org
.
xml
.
sax
.
SAXException
{
boolean
pushed
;
int
pushDepth
;
if
(
shouldFlush
)
{
flushPending
(
)
;
pushDepth
=
m_currentElemDepth
+
1
;
}
else
{
pushDepth
=
m_currentElemDepth
;
}
pushed
=
m_prefixMap
.
pushNamespace
(
prefix
,
uri
,
pushDepth
)
;
if
(
pushed
)
{
m_saxHandler
.
startPrefixMapping
(
prefix
,
uri
)
;
String
name
;
if
(
EMPTYSTRING
.
equals
(
prefix
)
)
{
name
=
"xmlns"
;
addAttributeAlways
(
XMLNS_URI
,
prefix
,
name
,
"CDATA"
,
uri
)
;
}
else
{
if
(
!
EMPTYSTRING
.
equals
(
uri
)
)
{
name
=
"xmlns:"
+
prefix
;
addAttributeAlways
(
XMLNS_URI
,
prefix
,
name
,
"CDATA"
,
uri
)
;
}
}
}
return
pushed
;
}
public
void
comment
(
char
[
]
arg0
,
int
arg1
,
int
arg2
)
throws
SAXException
{
flushPending
(
)
;
if
(
m_lexHandler
!=
null
)
m_lexHandler
.
comment
(
arg0
,
arg1
,
arg2
)
;
super
.
fireCommentEvent
(
arg0
,
arg1
,
arg2
)
;
}
public
void
endCDATA
(
)
throws
SAXException
{
if
(
m_lexHandler
!=
null
)
m_lexHandler
.
endCDATA
(
)
;
}
public
void
endDTD
(
)
throws
SAXException
{
if
(
m_lexHandler
!=
null
)
m_lexHandler
.
endDTD
(
)
;
}
public
void
startEntity
(
String
arg0
)
throws
SAXException
{
if
(
m_lexHandler
!=
null
)
m_lexHandler
.
startEntity
(
arg0
)
;
}
public
void
characters
(
String
chars
)
throws
SAXException
{
final
char
[
]
arr
=
chars
.
toCharArray
(
)
;
this
.
characters
(
arr
,
0
,
arr
.
length
)
;
}
public
ToXMLSAXHandler
(
ContentHandler
handler
,
String
encoding
)
{
super
(
handler
,
encoding
)
;
initCDATA
(
)
;
m_prefixMap
=
new
NamespaceMappings
(
)
;
}
public
ToXMLSAXHandler
(
ContentHandler
handler
,
LexicalHandler
lex
,
String
encoding
)
{
super
(
handler
,
lex
,
encoding
)
;
initCDATA
(
)
;
m_prefixMap
=
new
NamespaceMappings
(
)
;
}
public
void
startElement
(
String
elementNamespaceURI
,
String
elementLocalName
,
String
elementName
)
throws
SAXException
{
startElement
(
elementNamespaceURI
,
elementLocalName
,
elementName
,
null
)
;
}
public
void
startElement
(
String
elementName
)
throws
SAXException
{
startElement
(
null
,
null
,
elementName
,
null
)
;
}
public
void
characters
(
char
[
]
ch
,
int
off
,
int
len
)
throws
SAXException
{
flushPending
(
)
;
if
(
m_cdataSectionStates
.
peekOrFalse
(
)
)
{
startCDATA
(
ch
,
off
,
len
)
;
}
else
{
m_saxHandler
.
characters
(
ch
,
off
,
len
)
;
}
fireCharEvent
(
ch
,
off
,
len
)
;
}
public
void
endElement
(
String
elemName
)
throws
SAXException
{
endElement
(
null
,
null
,
elemName
)
;
}
public
void
namespaceAfterStartElement
(
final
String
prefix
,
final
String
uri
)
throws
SAXException
{
startPrefixMapping
(
prefix
,
uri
,
false
)
;
}
public
void
processingInstruction
(
String
target
,
String
data
)
throws
SAXException
{
flushPending
(
)
;
m_saxHandler
.
processingInstruction
(
target
,
data
)
;
super
.
fireEscapingEvent
(
target
,
data
)
;
}
protected
boolean
popNamespace
(
String
prefix
)
{
try
{
if
(
m_prefixMap
.
popNamespace
(
prefix
)
)
{
m_saxHandler
.
endPrefixMapping
(
prefix
)
;
return
true
;
}
}
catch
(
SAXException
e
)
{
}
return
false
;
}
public
void
startCDATA
(
)
throws
SAXException
{
m_saxHandler
.
characters
(
BEGCDATA
,
0
,
BEGCDATA
.
length
)
;
m_cdataTagOpen
=
true
;
}
private
void
startCDATA
(
char
[
]
ch
,
int
off
,
int
len
)
throws
SAXException
{
final
int
limit
=
off
+
len
;
int
offset
=
off
;
m_saxHandler
.
characters
(
BEGCDATA
,
0
,
BEGCDATA
.
length
)
;
for
(
int
i
=
offset
;
i
<
limit
-
2
;
i
++
)
{
if
(
ch
[
i
]
==
']'
&&
ch
[
i
+
1
]
==
']'
&&
ch
[
i
+
2
]
==
'>'
)
{
m_saxHandler
.
characters
(
ch
,
offset
,
i
-
offset
)
;
m_saxHandler
.
characters
(
CNTCDATA
,
0
,
CNTCDATA
.
length
)
;
offset
=
i
+
3
;
i
+=
2
;
}
}
if
(
offset
<
limit
)
{
m_saxHandler
.
characters
(
ch
,
offset
,
limit
-
offset
)
;
}
m_cdataTagOpen
=
true
;
}
public
void
startElement
(
String
namespaceURI
,
String
localName
,
String
name
,
Attributes
atts
)
throws
SAXException
{
flushPending
(
)
;
super
.
startElement
(
namespaceURI
,
localName
,
name
,
atts
)
;
if
(
m_needToOutputDocTypeDecl
)
{
String
doctypeSystem
=
getDoctypeSystem
(
)
;
if
(
doctypeSystem
!=
null
&&
m_lexHandler
!=
null
)
{
String
doctypePublic
=
getDoctypePublic
(
)
;
if
(
doctypeSystem
!=
null
)
m_lexHandler
.
startDTD
(
name
,
doctypePublic
,
doctypeSystem
)
;
}
m_needToOutputDocTypeDecl
=
false
;
}
m_currentElemDepth
++
;
if
(
namespaceURI
!=
null
)
ensurePrefixIsDeclared
(
namespaceURI
,
name
)
;
m_elementLocalName
=
localName
;
m_elementURI
=
namespaceURI
;
m_elementName
=
name
;
if
(
atts
!=
null
)
addAttributes
(
atts
)
;
m_startTagOpen
=
true
;
pushCdataSectionState
(
)
;
}
private
void
ensurePrefixIsDeclared
(
String
ns
,
String
rawName
)
throws
org
.
xml
.
sax
.
SAXException
{
if
(
ns
!=
null
&&
ns
.
length
(
)
>
0
)
{
int
index
;
String
prefix
=
(
index
=
rawName
.
indexOf
(
":"
)
)
<
0
?
""
:
rawName
.
substring
(
0
,
index
)
;
if
(
null
!=
prefix
)
{
String
foundURI
=
m_prefixMap
.
lookupNamespace
(
prefix
)
;
if
(
(
null
==
foundURI
)
||
!
foundURI
.
equals
(
ns
)
)
{
this
.
startPrefixMapping
(
prefix
,
ns
,
false
)
;
this
.
addAttributeAlways
(
"http://www.w3.org/2000/xmlns/"
,
prefix
,
"xmlns"
+
(
prefix
.
length
(
)
==
0
?
""
:
":"
)
+
prefix
,
"CDATA"
,
ns
)
;
}
}
}
}
public
void
addAttribute
(
String
uri
,
String
localName
,
String
rawName
,
String
type
,
String
value
)
throws
SAXException
{
if
(
m_startTagOpen
)
{
ensurePrefixIsDeclared
(
uri
,
rawName
)
;
addAttributeAlways
(
uri
,
localName
,
rawName
,
type
,
value
)
;
}
}
}
