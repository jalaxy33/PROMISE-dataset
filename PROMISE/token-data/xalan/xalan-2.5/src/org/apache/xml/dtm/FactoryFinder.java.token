package
org
.
apache
.
xml
.
dtm
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
util
.
Properties
;
class
FactoryFinder
{
private
static
boolean
debug
;
private
static
String
foundFactory
=
null
;
static
{
try
{
String
val
=
SecuritySupport
.
getInstance
(
)
.
getSystemProperty
(
"jaxp.debug"
)
;
debug
=
val
!=
null
&&
(
!
"false"
.
equals
(
val
)
)
;
}
catch
(
SecurityException
se
)
{
debug
=
false
;
}
}
static
Object
find
(
String
factoryId
,
String
fallbackClassName
)
throws
ConfigurationError
{
SecuritySupport
ss
=
SecuritySupport
.
getInstance
(
)
;
ClassLoader
cl
=
FactoryFinder
.
class
.
getClassLoader
(
)
;
dPrint
(
"find factoryId="
+
factoryId
)
;
try
{
String
systemProp
=
ss
.
getSystemProperty
(
factoryId
)
;
if
(
systemProp
!=
null
)
{
dPrint
(
"found system property, value="
+
systemProp
)
;
return
newInstance
(
systemProp
,
cl
,
true
)
;
}
}
catch
(
SecurityException
se
)
{
}
synchronized
(
FactoryFinder
.
class
)
{
if
(
foundFactory
==
null
)
{
Properties
xalanProperties
=
null
;
try
{
String
javah
=
ss
.
getSystemProperty
(
"java.home"
)
;
String
configFile
=
javah
+
File
.
separator
+
"lib"
+
File
.
separator
+
"xalan.properties"
;
File
f
=
new
File
(
configFile
)
;
FileInputStream
fis
=
ss
.
getFileInputStream
(
f
)
;
xalanProperties
=
new
Properties
(
)
;
xalanProperties
.
load
(
fis
)
;
fis
.
close
(
)
;
}
catch
(
Exception
x
)
{
}
if
(
xalanProperties
!=
null
)
{
foundFactory
=
xalanProperties
.
getProperty
(
factoryId
)
;
if
(
foundFactory
!=
null
)
{
dPrint
(
"found in xalan.properties, value="
+
foundFactory
)
;
}
}
else
{
findJarServiceProvider
(
factoryId
)
;
if
(
foundFactory
==
null
)
{
if
(
fallbackClassName
==
null
)
{
throw
new
ConfigurationError
(
"Provider for "
+
factoryId
+
" cannot be found"
,
null
)
;
}
dPrint
(
"using fallback, value="
+
fallbackClassName
)
;
foundFactory
=
fallbackClassName
;
}
}
}
}
return
newInstance
(
foundFactory
,
cl
,
true
)
;
}
private
static
void
dPrint
(
String
msg
)
{
if
(
debug
)
{
System
.
err
.
println
(
"JAXP: "
+
msg
)
;
}
}
private
static
Object
newInstance
(
String
className
,
ClassLoader
cl
,
boolean
doFallback
)
throws
ConfigurationError
{
try
{
Class
providerClass
;
if
(
cl
==
null
)
{
providerClass
=
Class
.
forName
(
className
)
;
}
else
{
try
{
providerClass
=
cl
.
loadClass
(
className
)
;
}
catch
(
ClassNotFoundException
x
)
{
if
(
doFallback
)
{
cl
=
FactoryFinder
.
class
.
getClassLoader
(
)
;
providerClass
=
cl
.
loadClass
(
className
)
;
}
else
{
throw
x
;
}
}
}
Object
instance
=
providerClass
.
newInstance
(
)
;
dPrint
(
"created new instance of "
+
providerClass
+
" using ClassLoader: "
+
cl
)
;
return
instance
;
}
catch
(
ClassNotFoundException
x
)
{
throw
new
ConfigurationError
(
"Provider "
+
className
+
" not found"
,
x
)
;
}
catch
(
Exception
x
)
{
throw
new
ConfigurationError
(
"Provider "
+
className
+
" could not be instantiated: "
+
x
,
x
)
;
}
}
private
static
String
findJarServiceProvider
(
String
factoryId
)
throws
ConfigurationError
{
SecuritySupport
ss
=
SecuritySupport
.
getInstance
(
)
;
String
serviceId
=
"META-INF/services/"
+
factoryId
;
InputStream
is
=
null
;
ClassLoader
cl
=
FactoryFinder
.
class
.
getClassLoader
(
)
;
is
=
ss
.
getResourceAsStream
(
cl
,
serviceId
)
;
if
(
is
==
null
)
{
return
null
;
}
dPrint
(
"found jar resource="
+
serviceId
+
" using ClassLoader: "
+
cl
)
;
BufferedReader
rd
;
try
{
rd
=
new
BufferedReader
(
new
InputStreamReader
(
is
,
"UTF-8"
)
)
;
}
catch
(
java
.
io
.
UnsupportedEncodingException
e
)
{
rd
=
new
BufferedReader
(
new
InputStreamReader
(
is
)
)
;
}
String
factoryClassName
=
null
;
try
{
factoryClassName
=
rd
.
readLine
(
)
;
rd
.
close
(
)
;
}
catch
(
IOException
x
)
{
return
null
;
}
if
(
factoryClassName
!=
null
&&
!
""
.
equals
(
factoryClassName
)
)
{
dPrint
(
"found in resource, value="
+
factoryClassName
)
;
return
factoryClassName
;
}
return
null
;
}
static
class
ConfigurationError
extends
Error
{
private
Exception
exception
;
ConfigurationError
(
String
msg
,
Exception
x
)
{
super
(
msg
)
;
this
.
exception
=
x
;
}
Exception
getException
(
)
{
return
exception
;
}
}
}
