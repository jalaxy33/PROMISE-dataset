package
org
.
apache
.
xalan
.
xsltc
.
dom
;
import
org
.
apache
.
xalan
.
xsltc
.
DOM
;
import
org
.
apache
.
xalan
.
xsltc
.
Translet
;
import
org
.
apache
.
xalan
.
xsltc
.
TransletException
;
import
org
.
apache
.
xalan
.
xsltc
.
runtime
.
AbstractTranslet
;
import
org
.
apache
.
xalan
.
xsltc
.
runtime
.
TransletLoader
;
public
class
NodeSortRecordFactory
{
private
static
int
DESCENDING
=
"descending"
.
length
(
)
;
private
static
int
NUMBER
=
"number"
.
length
(
)
;
private
final
DOM
_dom
;
private
final
String
_className
;
private
Class
_class
;
private
int
_order
[
]
;
private
int
_type
[
]
;
private
final
AbstractTranslet
_translet
;
public
Class
loadTranslet
(
String
name
)
throws
ClassNotFoundException
{
try
{
return
Class
.
forName
(
name
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
return
new
TransletLoader
(
)
.
loadTranslet
(
name
)
;
}
public
NodeSortRecordFactory
(
DOM
dom
,
String
className
,
Translet
translet
,
String
order
[
]
,
String
type
[
]
)
throws
TransletException
{
try
{
_dom
=
dom
;
_className
=
className
;
_class
=
translet
.
getAuxiliaryClass
(
className
)
;
if
(
_class
==
null
)
_class
=
loadTranslet
(
className
)
;
_translet
=
(
AbstractTranslet
)
translet
;
int
levels
=
order
.
length
;
_order
=
new
int
[
levels
]
;
_type
=
new
int
[
levels
]
;
for
(
int
i
=
0
;
i
<
levels
;
i
++
)
{
if
(
order
[
i
]
.
length
(
)
==
DESCENDING
)
_order
[
i
]
=
NodeSortRecord
.
COMPARE_DESCENDING
;
if
(
type
[
i
]
.
length
(
)
==
NUMBER
)
_type
[
i
]
=
NodeSortRecord
.
COMPARE_NUMERIC
;
}
}
catch
(
ClassNotFoundException
e
)
{
throw
new
TransletException
(
e
)
;
}
}
public
NodeSortRecord
makeNodeSortRecord
(
int
node
,
int
last
)
throws
ExceptionInInitializerError
,
LinkageError
,
IllegalAccessException
,
InstantiationException
,
SecurityException
,
TransletException
{
final
NodeSortRecord
sortRecord
=
(
NodeSortRecord
)
_class
.
newInstance
(
)
;
sortRecord
.
initialize
(
node
,
last
,
_dom
,
_translet
,
_order
,
_type
,
this
)
;
return
sortRecord
;
}
public
String
getClassName
(
)
{
return
_className
;
}
}
