package
org
.
apache
.
xalan
.
templates
;
import
javax
.
xml
.
transform
.
TransformerException
;
import
org
.
apache
.
xalan
.
extensions
.
ExtensionNamespaceSupport
;
import
org
.
apache
.
xalan
.
transformer
.
TransformerImpl
;
import
org
.
apache
.
xpath
.
VariableStack
;
import
org
.
apache
.
xpath
.
XPathContext
;
import
org
.
apache
.
xpath
.
objects
.
XObject
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
w3c
.
dom
.
NodeList
;
public
class
ElemExsltFunction
extends
ElemTemplate
{
private
boolean
m_isResultSet
=
false
;
private
XObject
m_result
;
private
int
m_callerFrameSize
=
0
;
public
int
getXSLToken
(
)
{
return
Constants
.
EXSLT_ELEMNAME_FUNCTION
;
}
public
String
getNodeName
(
)
{
return
Constants
.
EXSLT_ELEMNAME_FUNCTION_STRING
;
}
public
void
execute
(
TransformerImpl
transformer
,
XObject
[
]
args
)
throws
TransformerException
{
m_isResultSet
=
false
;
m_result
=
null
;
XPathContext
xctxt
=
transformer
.
getXPathContext
(
)
;
VariableStack
vars
=
xctxt
.
getVarStack
(
)
;
int
oldStackFrame
=
vars
.
getStackFrame
(
)
;
vars
.
setStackFrame
(
m_callerFrameSize
+
oldStackFrame
)
;
NodeList
children
=
this
.
getChildNodes
(
)
;
int
numparams
=
0
;
for
(
int
i
=
0
;
i
<
args
.
length
;
i
++
)
{
Node
child
=
children
.
item
(
i
)
;
if
(
children
.
item
(
i
)
instanceof
ElemParam
)
{
numparams
++
;
ElemParam
param
=
(
ElemParam
)
children
.
item
(
i
)
;
vars
.
setLocalVariable
(
param
.
getIndex
(
)
,
args
[
i
]
)
;
}
}
if
(
numparams
<
args
.
length
)
throw
new
TransformerException
(
"function called with too many args"
)
;
if
(
TransformerImpl
.
S_DEBUG
)
transformer
.
getTraceManager
(
)
.
fireTraceEvent
(
this
)
;
transformer
.
executeChildTemplates
(
this
,
true
)
;
vars
.
setStackFrame
(
oldStackFrame
)
;
m_callerFrameSize
=
0
;
if
(
TransformerImpl
.
S_DEBUG
)
transformer
.
getTraceManager
(
)
.
fireTraceEndEvent
(
this
)
;
}
public
void
compose
(
StylesheetRoot
sroot
)
throws
TransformerException
{
super
.
compose
(
sroot
)
;
String
namespace
=
getName
(
)
.
getNamespace
(
)
;
String
handlerClass
=
"org.apache.xalan.extensions.ExtensionHandlerExsltFunction"
;
Object
[
]
args
=
{
namespace
,
sroot
}
;
ExtensionNamespaceSupport
extNsSpt
=
new
ExtensionNamespaceSupport
(
namespace
,
handlerClass
,
args
)
;
sroot
.
getExtensionNamespacesManager
(
)
.
registerExtension
(
extNsSpt
)
;
if
(
!
(
namespace
.
equals
(
Constants
.
S_EXSLT_FUNCTIONS_URL
)
)
)
{
namespace
=
Constants
.
S_EXSLT_FUNCTIONS_URL
;
args
=
new
Object
[
]
{
namespace
,
sroot
}
;
extNsSpt
=
new
ExtensionNamespaceSupport
(
namespace
,
handlerClass
,
args
)
;
sroot
.
getExtensionNamespacesManager
(
)
.
registerExtension
(
extNsSpt
)
;
}
}
public
XObject
getResult
(
)
{
return
m_result
;
}
public
void
setResult
(
XObject
result
)
{
m_isResultSet
=
true
;
m_result
=
result
;
}
public
boolean
isResultSet
(
)
{
return
m_isResultSet
;
}
public
void
clearResult
(
)
{
m_isResultSet
=
false
;
m_result
=
null
;
}
public
void
setCallerFrameSize
(
int
callerFrameSize
)
{
m_callerFrameSize
=
callerFrameSize
;
}
}
