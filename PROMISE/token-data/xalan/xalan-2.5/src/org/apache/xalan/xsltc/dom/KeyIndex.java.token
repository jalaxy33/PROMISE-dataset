package
org
.
apache
.
xalan
.
xsltc
.
dom
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
xalan
.
xsltc
.
DOM
;
import
org
.
apache
.
xalan
.
xsltc
.
runtime
.
Hashtable
;
import
org
.
apache
.
xalan
.
xsltc
.
util
.
IntegerArray
;
import
org
.
apache
.
xml
.
dtm
.
DTM
;
import
org
.
apache
.
xml
.
dtm
.
DTMAxisIterator
;
import
org
.
apache
.
xml
.
dtm
.
ref
.
DTMAxisIteratorBase
;
public
class
KeyIndex
extends
DTMAxisIteratorBase
{
private
Hashtable
_index
=
new
Hashtable
(
)
;
private
IntegerArray
_nodes
=
null
;
private
DOM
_dom
;
private
SAXImpl
_saxImpl
;
private
int
_markedPosition
=
0
;
public
KeyIndex
(
int
dummy
)
{
}
public
void
setRestartable
(
boolean
flag
)
{
}
public
void
add
(
Object
value
,
int
node
)
{
IntegerArray
nodes
;
if
(
(
nodes
=
(
IntegerArray
)
_index
.
get
(
value
)
)
==
null
)
{
_index
.
put
(
value
,
nodes
=
new
IntegerArray
(
)
)
;
}
nodes
.
add
(
node
)
;
}
public
void
merge
(
KeyIndex
other
)
{
if
(
other
==
null
)
return
;
if
(
other
.
_nodes
!=
null
)
{
if
(
_nodes
==
null
)
{
_nodes
=
other
.
_nodes
;
}
else
{
_nodes
.
merge
(
other
.
_nodes
)
;
}
}
}
public
void
lookupId
(
Object
value
)
{
_nodes
=
null
;
final
StringTokenizer
values
=
new
StringTokenizer
(
(
String
)
value
)
;
while
(
values
.
hasMoreElements
(
)
)
{
final
String
token
=
(
String
)
values
.
nextElement
(
)
;
IntegerArray
nodes
=
(
IntegerArray
)
_index
.
get
(
token
)
;
if
(
nodes
==
null
&&
_saxImpl
!=
null
&&
_saxImpl
.
hasDOMSource
(
)
)
{
nodes
=
getDOMNodeById
(
token
)
;
}
if
(
nodes
==
null
)
continue
;
if
(
_nodes
==
null
)
{
_nodes
=
nodes
;
}
else
{
_nodes
.
merge
(
nodes
)
;
}
}
}
public
IntegerArray
getDOMNodeById
(
String
id
)
{
IntegerArray
nodes
=
null
;
if
(
_saxImpl
!=
null
)
{
int
ident
=
_saxImpl
.
getElementById
(
id
)
;
if
(
ident
!=
DTM
.
NULL
)
{
nodes
=
new
IntegerArray
(
)
;
_index
.
put
(
id
,
nodes
)
;
nodes
.
add
(
ident
)
;
}
}
return
nodes
;
}
public
void
lookupKey
(
Object
value
)
{
_nodes
=
(
IntegerArray
)
_index
.
get
(
value
)
;
_position
=
0
;
}
public
int
next
(
)
{
if
(
_nodes
==
null
)
return
DTMAxisIterator
.
END
;
return
(
_position
<
_nodes
.
cardinality
(
)
)
?
_dom
.
getNodeHandle
(
_nodes
.
at
(
_position
++
)
)
:
DTMAxisIterator
.
END
;
}
public
int
containsID
(
int
node
,
Object
value
)
{
final
String
string
=
(
String
)
value
;
if
(
string
.
indexOf
(
' '
)
>
-
1
)
{
final
StringTokenizer
values
=
new
StringTokenizer
(
string
)
;
while
(
values
.
hasMoreElements
(
)
)
{
final
String
token
=
(
String
)
values
.
nextElement
(
)
;
IntegerArray
nodes
=
(
IntegerArray
)
_index
.
get
(
token
)
;
if
(
nodes
==
null
&&
_saxImpl
!=
null
&&
_saxImpl
.
hasDOMSource
(
)
)
{
nodes
=
getDOMNodeById
(
token
)
;
}
if
(
nodes
!=
null
&&
nodes
.
indexOf
(
node
)
>=
0
)
{
return
1
;
}
}
return
0
;
}
else
{
IntegerArray
nodes
=
(
IntegerArray
)
_index
.
get
(
value
)
;
if
(
nodes
==
null
&&
_saxImpl
!=
null
&&
_saxImpl
.
hasDOMSource
(
)
)
{
nodes
=
getDOMNodeById
(
string
)
;
}
return
(
nodes
!=
null
&&
nodes
.
indexOf
(
node
)
>=
0
)
?
1
:
0
;
}
}
public
int
containsKey
(
int
node
,
Object
value
)
{
final
IntegerArray
nodes
=
(
IntegerArray
)
_index
.
get
(
value
)
;
return
(
nodes
!=
null
&&
nodes
.
indexOf
(
node
)
>=
0
)
?
1
:
0
;
}
public
DTMAxisIterator
reset
(
)
{
_position
=
0
;
return
this
;
}
public
int
getLast
(
)
{
return
(
_nodes
==
null
)
?
0
:
_nodes
.
cardinality
(
)
;
}
public
int
getPosition
(
)
{
return
_position
;
}
public
void
setMark
(
)
{
_markedPosition
=
_position
;
}
public
void
gotoMark
(
)
{
_position
=
_markedPosition
;
}
public
DTMAxisIterator
setStartNode
(
int
start
)
{
if
(
start
==
DTMAxisIterator
.
END
)
{
_nodes
=
null
;
}
else
if
(
_nodes
!=
null
)
{
_position
=
0
;
}
return
(
DTMAxisIterator
)
this
;
}
public
int
getStartNode
(
)
{
return
0
;
}
public
boolean
isReverse
(
)
{
return
(
false
)
;
}
public
DTMAxisIterator
cloneIterator
(
)
{
KeyIndex
other
=
new
KeyIndex
(
0
)
;
other
.
_index
=
_index
;
other
.
_nodes
=
_nodes
;
other
.
_position
=
_position
;
return
(
DTMAxisIterator
)
other
;
}
public
void
setDom
(
DOM
dom
)
{
_dom
=
dom
;
if
(
dom
instanceof
SAXImpl
)
{
_saxImpl
=
(
SAXImpl
)
dom
;
}
else
if
(
dom
instanceof
DOMAdapter
)
{
DOM
idom
=
(
(
DOMAdapter
)
dom
)
.
getDOMImpl
(
)
;
if
(
idom
instanceof
SAXImpl
)
{
_saxImpl
=
(
SAXImpl
)
idom
;
}
}
}
}
