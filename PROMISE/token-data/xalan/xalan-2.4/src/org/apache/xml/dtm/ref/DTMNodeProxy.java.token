package
org
.
apache
.
xml
.
dtm
.
ref
;
import
org
.
w3c
.
dom
.
*
;
import
org
.
apache
.
xml
.
dtm
.
*
;
import
org
.
apache
.
xml
.
dtm
.
Axis
;
public
class
DTMNodeProxy
implements
Node
,
Document
,
Text
,
Element
,
Attr
,
ProcessingInstruction
,
Comment
,
DocumentFragment
{
public
DTM
dtm
;
int
node
;
static
final
DOMImplementation
implementation
=
new
DTMNodeProxyImplementation
(
)
;
DTMNodeProxy
(
DTM
dtm
,
int
node
)
{
this
.
dtm
=
dtm
;
this
.
node
=
node
;
}
public
final
DTM
getDTM
(
)
{
return
dtm
;
}
public
final
int
getDTMNodeNumber
(
)
{
return
node
;
}
public
final
boolean
equals
(
Node
node
)
{
try
{
DTMNodeProxy
dtmp
=
(
DTMNodeProxy
)
node
;
return
(
dtmp
.
node
==
this
.
node
)
&&
(
dtmp
.
dtm
==
this
.
dtm
)
;
}
catch
(
ClassCastException
cce
)
{
return
false
;
}
}
public
final
boolean
equals
(
Object
node
)
{
try
{
return
equals
(
(
Node
)
node
)
;
}
catch
(
ClassCastException
cce
)
{
return
false
;
}
}
public
final
boolean
sameNodeAs
(
Node
other
)
{
if
(
!
(
other
instanceof
DTMNodeProxy
)
)
return
false
;
DTMNodeProxy
that
=
(
DTMNodeProxy
)
other
;
return
this
.
dtm
==
that
.
dtm
&&
this
.
node
==
that
.
node
;
}
public
final
String
getNodeName
(
)
{
return
dtm
.
getNodeName
(
node
)
;
}
public
final
String
getTarget
(
)
{
return
dtm
.
getNodeName
(
node
)
;
}
public
final
String
getLocalName
(
)
{
return
dtm
.
getLocalName
(
node
)
;
}
public
final
String
getPrefix
(
)
{
return
dtm
.
getPrefix
(
node
)
;
}
public
final
void
setPrefix
(
String
prefix
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
)
;
}
public
final
String
getNamespaceURI
(
)
{
return
dtm
.
getNamespaceURI
(
node
)
;
}
public
final
boolean
supports
(
String
feature
,
String
version
)
{
return
implementation
.
hasFeature
(
feature
,
version
)
;
}
public
final
boolean
isSupported
(
String
feature
,
String
version
)
{
return
implementation
.
hasFeature
(
feature
,
version
)
;
}
public
final
String
getNodeValue
(
)
throws
DOMException
{
return
dtm
.
getNodeValue
(
node
)
;
}
public
final
void
setNodeValue
(
String
nodeValue
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
)
;
}
public
final
short
getNodeType
(
)
{
return
(
short
)
dtm
.
getNodeType
(
node
)
;
}
public
final
Node
getParentNode
(
)
{
if
(
getNodeType
(
)
==
Node
.
ATTRIBUTE_NODE
)
return
null
;
int
newnode
=
dtm
.
getParent
(
node
)
;
return
(
newnode
==
DTM
.
NULL
)
?
null
:
dtm
.
getNode
(
newnode
)
;
}
public
final
Node
getOwnerNode
(
)
{
int
newnode
=
dtm
.
getParent
(
node
)
;
return
(
newnode
==
DTM
.
NULL
)
?
null
:
dtm
.
getNode
(
newnode
)
;
}
public
final
NodeList
getChildNodes
(
)
{
return
new
DTMNodeList
(
dtm
,
node
)
;
}
public
final
Node
getFirstChild
(
)
{
int
newnode
=
dtm
.
getFirstChild
(
node
)
;
return
(
newnode
==
DTM
.
NULL
)
?
null
:
dtm
.
getNode
(
newnode
)
;
}
public
final
Node
getLastChild
(
)
{
int
newnode
=
dtm
.
getLastChild
(
node
)
;
return
(
newnode
==
DTM
.
NULL
)
?
null
:
dtm
.
getNode
(
newnode
)
;
}
public
final
Node
getPreviousSibling
(
)
{
int
newnode
=
dtm
.
getPreviousSibling
(
node
)
;
return
(
newnode
==
DTM
.
NULL
)
?
null
:
dtm
.
getNode
(
newnode
)
;
}
public
final
Node
getNextSibling
(
)
{
if
(
dtm
.
getNodeType
(
node
)
==
Node
.
ATTRIBUTE_NODE
)
return
null
;
int
newnode
=
dtm
.
getNextSibling
(
node
)
;
return
(
newnode
==
DTM
.
NULL
)
?
null
:
dtm
.
getNode
(
newnode
)
;
}
public
final
NamedNodeMap
getAttributes
(
)
{
return
new
DTMNamedNodeMap
(
dtm
,
node
)
;
}
public
boolean
hasAttribute
(
String
name
)
{
return
DTM
.
NULL
!=
dtm
.
getAttributeNode
(
node
,
null
,
name
)
;
}
public
boolean
hasAttributeNS
(
String
name
,
String
x
)
{
return
DTM
.
NULL
!=
dtm
.
getAttributeNode
(
node
,
x
,
name
)
;
}
public
final
Document
getOwnerDocument
(
)
{
return
(
Document
)
(
dtm
.
getNode
(
dtm
.
getOwnerDocument
(
node
)
)
)
;
}
public
final
Node
insertBefore
(
Node
newChild
,
Node
refChild
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
)
;
}
public
final
Node
replaceChild
(
Node
newChild
,
Node
oldChild
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
)
;
}
public
final
Node
removeChild
(
Node
oldChild
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
)
;
}
public
final
Node
appendChild
(
Node
newChild
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
)
;
}
public
final
boolean
hasChildNodes
(
)
{
return
(
DTM
.
NULL
!=
dtm
.
getFirstChild
(
node
)
)
;
}
public
final
Node
cloneNode
(
boolean
deep
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
DocumentType
getDoctype
(
)
{
return
null
;
}
public
final
DOMImplementation
getImplementation
(
)
{
return
implementation
;
}
public
final
Element
getDocumentElement
(
)
{
int
dochandle
=
dtm
.
getDocument
(
)
;
int
elementhandle
=
dtm
.
NULL
;
for
(
int
kidhandle
=
dtm
.
getFirstChild
(
dochandle
)
;
kidhandle
!=
dtm
.
NULL
;
kidhandle
=
dtm
.
getNextSibling
(
kidhandle
)
)
{
switch
(
dtm
.
getNodeType
(
kidhandle
)
)
{
case
Node
.
ELEMENT_NODE
:
if
(
elementhandle
!=
dtm
.
NULL
)
{
elementhandle
=
dtm
.
NULL
;
kidhandle
=
dtm
.
getLastChild
(
dochandle
)
;
}
else
elementhandle
=
kidhandle
;
break
;
case
Node
.
COMMENT_NODE
:
case
Node
.
PROCESSING_INSTRUCTION_NODE
:
case
Node
.
DOCUMENT_TYPE_NODE
:
break
;
default
:
elementhandle
=
dtm
.
NULL
;
kidhandle
=
dtm
.
getLastChild
(
dochandle
)
;
break
;
}
}
if
(
elementhandle
==
dtm
.
NULL
)
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
else
return
(
Element
)
(
dtm
.
getNode
(
elementhandle
)
)
;
}
public
final
Element
createElement
(
String
tagName
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
DocumentFragment
createDocumentFragment
(
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Text
createTextNode
(
String
data
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Comment
createComment
(
String
data
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
CDATASection
createCDATASection
(
String
data
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
ProcessingInstruction
createProcessingInstruction
(
String
target
,
String
data
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Attr
createAttribute
(
String
name
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
EntityReference
createEntityReference
(
String
name
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
NodeList
getElementsByTagName
(
String
tagname
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Node
importNode
(
Node
importedNode
,
boolean
deep
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NO_MODIFICATION_ALLOWED_ERR
)
;
}
public
final
Element
createElementNS
(
String
namespaceURI
,
String
qualifiedName
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Attr
createAttributeNS
(
String
namespaceURI
,
String
qualifiedName
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
NodeList
getElementsByTagNameNS
(
String
namespaceURI
,
String
localName
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Element
getElementById
(
String
elementId
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Text
splitText
(
int
offset
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
String
getData
(
)
throws
DOMException
{
return
dtm
.
getNodeValue
(
node
)
;
}
public
final
void
setData
(
String
data
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
int
getLength
(
)
{
return
dtm
.
getNodeValue
(
node
)
.
length
(
)
;
}
public
final
String
substringData
(
int
offset
,
int
count
)
throws
DOMException
{
return
getData
(
)
.
substring
(
offset
,
offset
+
count
)
;
}
public
final
void
appendData
(
String
arg
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
void
insertData
(
int
offset
,
String
arg
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
void
deleteData
(
int
offset
,
int
count
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
void
replaceData
(
int
offset
,
int
count
,
String
arg
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
String
getTagName
(
)
{
return
dtm
.
getNodeName
(
node
)
;
}
public
final
String
getAttribute
(
String
name
)
{
DTMNamedNodeMap
map
=
new
DTMNamedNodeMap
(
dtm
,
node
)
;
Node
node
=
map
.
getNamedItem
(
name
)
;
return
(
null
==
node
)
?
null
:
node
.
getNodeValue
(
)
;
}
public
final
void
setAttribute
(
String
name
,
String
value
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
void
removeAttribute
(
String
name
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Attr
getAttributeNode
(
String
name
)
{
DTMNamedNodeMap
map
=
new
DTMNamedNodeMap
(
dtm
,
node
)
;
return
(
Attr
)
map
.
getNamedItem
(
name
)
;
}
public
final
Attr
setAttributeNode
(
Attr
newAttr
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Attr
removeAttributeNode
(
Attr
oldAttr
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
boolean
hasAttributes
(
)
{
return
DTM
.
NULL
!=
dtm
.
getFirstAttribute
(
node
)
;
}
public
final
void
normalize
(
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
String
getAttributeNS
(
String
namespaceURI
,
String
localName
)
{
DTMNamedNodeMap
map
=
new
DTMNamedNodeMap
(
dtm
,
node
)
;
Node
node
=
map
.
getNamedItemNS
(
namespaceURI
,
localName
)
;
return
(
null
==
node
)
?
null
:
node
.
getNodeValue
(
)
;
}
public
final
void
setAttributeNS
(
String
namespaceURI
,
String
qualifiedName
,
String
value
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
void
removeAttributeNS
(
String
namespaceURI
,
String
localName
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Attr
getAttributeNodeNS
(
String
namespaceURI
,
String
localName
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Attr
setAttributeNodeNS
(
Attr
newAttr
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
String
getName
(
)
{
return
dtm
.
getNodeName
(
node
)
;
}
public
final
boolean
getSpecified
(
)
{
return
true
;
}
public
final
String
getValue
(
)
{
return
dtm
.
getNodeValue
(
node
)
;
}
public
final
void
setValue
(
String
value
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
final
Element
getOwnerElement
(
)
{
if
(
getNodeType
(
)
!=
Node
.
ATTRIBUTE_NODE
)
return
null
;
int
newnode
=
dtm
.
getParent
(
node
)
;
return
(
newnode
==
DTM
.
NULL
)
?
null
:
(
Element
)
(
dtm
.
getNode
(
newnode
)
)
;
}
public
Node
adoptNode
(
Node
source
)
throws
DOMException
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
String
getEncoding
(
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
void
setEncoding
(
String
encoding
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
boolean
getStandalone
(
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
void
setStandalone
(
boolean
standalone
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
boolean
getStrictErrorChecking
(
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
void
setStrictErrorChecking
(
boolean
strictErrorChecking
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
String
getVersion
(
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
void
setVersion
(
String
version
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
static
class
DTMNodeProxyImplementation
implements
DOMImplementation
{
public
DocumentType
createDocumentType
(
String
qualifiedName
,
String
publicId
,
String
systemId
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
Document
createDocument
(
String
namespaceURI
,
String
qualfiedName
,
DocumentType
doctype
)
{
throw
new
DTMDOMException
(
DOMException
.
NOT_SUPPORTED_ERR
)
;
}
public
boolean
hasFeature
(
String
feature
,
String
version
)
{
if
(
(
"CORE"
.
equals
(
feature
.
toUpperCase
(
)
)
||
"XML"
.
equals
(
feature
.
toUpperCase
(
)
)
)
&&
(
"1.0"
.
equals
(
version
)
||
"2.0"
.
equals
(
version
)
)
)
return
true
;
return
false
;
}
}
}
