package
org
.
apache
.
xml
.
utils
.
synthetic
.
reflection
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
org
.
apache
.
xml
.
utils
.
synthetic
.
SynthesisException
;
abstract
public
class
EntryPoint
implements
Member
{
protected
Object
realep
;
private
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
declaringclass
=
null
;
protected
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
returntype
=
null
;
private
String
[
]
parameternames
=
new
String
[
0
]
;
private
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
]
parametertypes
=
new
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
0
]
;
private
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
]
exceptiontypes
=
new
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
0
]
;
;
private
int
modifiers
;
protected
String
name
=
null
;
private
StringBuffer
body
=
null
;
private
String
language
=
null
;
Class
[
]
realE
,
realP
;
public
EntryPoint
(
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
declaringclass
)
{
this
.
declaringclass
=
declaringclass
;
}
protected
EntryPoint
(
Object
ep
,
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
declaringclass
)
throws
IllegalArgumentException
{
realep
=
ep
;
this
.
declaringclass
=
declaringclass
;
if
(
ep
instanceof
java
.
lang
.
reflect
.
Method
)
{
java
.
lang
.
reflect
.
Method
m
=
(
java
.
lang
.
reflect
.
Method
)
ep
;
if
(
declaringclass
==
null
)
{
declaringclass
=
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
.
forClass
(
m
.
getDeclaringClass
(
)
)
;
}
name
=
m
.
getName
(
)
;
modifiers
=
m
.
getModifiers
(
)
;
returntype
=
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
.
forClass
(
m
.
getReturnType
(
)
)
;
realP
=
m
.
getParameterTypes
(
)
;
realE
=
m
.
getExceptionTypes
(
)
;
}
else
if
(
ep
instanceof
java
.
lang
.
reflect
.
Constructor
)
{
java
.
lang
.
reflect
.
Constructor
c
=
(
java
.
lang
.
reflect
.
Constructor
)
ep
;
if
(
declaringclass
==
null
)
{
declaringclass
=
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
.
forClass
(
c
.
getDeclaringClass
(
)
)
;
}
name
=
declaringclass
.
getShortName
(
)
;
modifiers
=
c
.
getModifiers
(
)
;
returntype
=
declaringclass
;
realP
=
c
.
getParameterTypes
(
)
;
realE
=
c
.
getExceptionTypes
(
)
;
}
else
throw
new
IllegalArgumentException
(
)
;
}
protected
EntryPoint
(
Object
ep
)
throws
IllegalArgumentException
{
this
(
ep
,
null
)
;
}
public
boolean
equals
(
Object
obj
)
{
EntryPoint
otherep
=
null
;
if
(
obj
instanceof
EntryPoint
)
otherep
=
(
EntryPoint
)
obj
;
else
if
(
obj
instanceof
java
.
lang
.
reflect
.
Constructor
||
obj
instanceof
java
.
lang
.
reflect
.
Method
)
otherep
=
(
EntryPoint
)
obj
;
return
(
otherep
!=
null
&&
(
(
this
instanceof
Constructor
&&
otherep
instanceof
Constructor
)
||
(
this
instanceof
Method
&&
otherep
instanceof
Method
&&
this
.
getName
(
)
.
equals
(
otherep
.
getName
(
)
)
)
)
&&
otherep
.
getDeclaringClass
(
)
.
equals
(
declaringclass
)
&&
otherep
.
getParameterTypes
(
)
.
equals
(
parametertypes
)
)
;
}
public
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
getDeclaringClass
(
)
{
return
declaringclass
;
}
public
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
getReturnType
(
)
{
return
returntype
;
}
public
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
]
getExceptionTypes
(
)
{
if
(
realep
!=
null
&&
exceptiontypes
==
null
)
{
exceptiontypes
=
new
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
realE
.
length
]
;
for
(
int
i
=
0
;
i
<
realE
.
length
;
++
i
)
{
exceptiontypes
[
i
]
=
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
.
forClass
(
realE
[
i
]
)
;
}
realE
=
null
;
}
return
exceptiontypes
;
}
public
void
addExceptionType
(
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
exception
)
throws
SynthesisException
{
if
(
realep
!=
null
)
throw
new
SynthesisException
(
SynthesisException
.
REIFIED
)
;
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
]
e
=
new
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
exceptiontypes
.
length
+
1
]
;
System
.
arraycopy
(
exceptiontypes
,
0
,
e
,
0
,
exceptiontypes
.
length
)
;
e
[
exceptiontypes
.
length
]
=
exception
;
exceptiontypes
=
e
;
}
public
int
getModifiers
(
)
{
return
modifiers
;
}
public
java
.
lang
.
String
getName
(
)
{
if
(
this
instanceof
Constructor
)
return
declaringclass
.
getShortName
(
)
;
return
name
;
}
public
void
setName
(
String
name
)
throws
SynthesisException
{
if
(
realep
!=
null
)
throw
new
SynthesisException
(
SynthesisException
.
REIFIED
)
;
this
.
name
=
name
;
}
public
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
]
getParameterTypes
(
)
{
if
(
realep
!=
null
&&
parametertypes
==
null
)
{
parametertypes
=
new
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
realP
.
length
]
;
for
(
int
i
=
0
;
i
<
realP
.
length
;
++
i
)
{
parametertypes
[
i
]
=
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
.
forClass
(
realP
[
i
]
)
;
}
realP
=
null
;
}
return
parametertypes
;
}
public
String
[
]
getParameterNames
(
)
{
return
parameternames
;
}
public
void
addParameter
(
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
type
,
String
name
)
throws
SynthesisException
{
if
(
realep
!=
null
)
throw
new
SynthesisException
(
SynthesisException
.
REIFIED
)
;
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
]
types
=
new
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
parametertypes
.
length
+
1
]
;
System
.
arraycopy
(
parametertypes
,
0
,
types
,
0
,
parametertypes
.
length
)
;
types
[
parametertypes
.
length
]
=
type
;
parametertypes
=
types
;
String
[
]
names
=
new
String
[
parameternames
.
length
+
1
]
;
System
.
arraycopy
(
parameternames
,
0
,
names
,
0
,
parameternames
.
length
)
;
names
[
parameternames
.
length
]
=
name
;
parameternames
=
names
;
}
abstract
public
int
hashCode
(
)
;
public
void
setDeclaringClass
(
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
declaringClass
)
throws
SynthesisException
{
if
(
realep
!=
null
)
throw
new
SynthesisException
(
SynthesisException
.
REIFIED
)
;
this
.
declaringclass
=
declaringClass
;
}
public
void
setModifiers
(
int
modifiers
)
throws
SynthesisException
{
if
(
realep
!=
null
)
throw
new
SynthesisException
(
SynthesisException
.
REIFIED
)
;
this
.
modifiers
=
modifiers
;
}
public
String
toString
(
)
{
StringBuffer
sb
=
new
StringBuffer
(
java
.
lang
.
reflect
.
Modifier
.
toString
(
getModifiers
(
)
)
)
;
if
(
this
instanceof
org
.
apache
.
xml
.
utils
.
synthetic
.
reflection
.
Method
)
sb
.
append
(
' '
)
.
append
(
getReturnType
(
)
)
.
append
(
getDeclaringClass
(
)
.
getName
(
)
)
.
append
(
'.'
)
.
append
(
getName
(
)
)
;
else
sb
.
append
(
getDeclaringClass
(
)
.
getName
(
)
)
;
sb
.
append
(
'('
)
;
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
]
p
=
getParameterTypes
(
)
;
if
(
p
!=
null
&&
p
.
length
>
0
)
{
sb
.
append
(
p
[
0
]
.
getName
(
)
)
;
for
(
int
i
=
1
;
i
<
p
.
length
;
++
i
)
{
sb
.
append
(
','
)
.
append
(
p
[
i
]
.
getName
(
)
)
;
}
}
sb
.
append
(
')'
)
;
if
(
this
instanceof
org
.
apache
.
xml
.
utils
.
synthetic
.
reflection
.
Method
)
{
p
=
getExceptionTypes
(
)
;
if
(
p
!=
null
&&
p
.
length
>
0
)
{
sb
.
append
(
" throws "
)
.
append
(
p
[
0
]
.
getName
(
)
)
;
for
(
int
i
=
1
;
i
<
p
.
length
;
++
i
)
{
sb
.
append
(
','
)
.
append
(
p
[
i
]
.
getName
(
)
)
;
}
}
}
return
sb
.
toString
(
)
;
}
public
void
setBody
(
String
language
,
StringBuffer
body
)
throws
SynthesisException
{
if
(
realep
!=
null
)
throw
new
SynthesisException
(
SynthesisException
.
REIFIED
)
;
this
.
language
=
language
;
this
.
body
=
body
;
}
public
StringBuffer
getBody
(
)
{
if
(
body
==
null
)
body
=
new
StringBuffer
(
)
;
return
body
;
}
public
String
getLanguage
(
)
{
return
language
;
}
public
String
toSource
(
String
basetab
)
{
StringBuffer
sb
=
new
StringBuffer
(
)
;
sb
.
append
(
basetab
)
.
append
(
java
.
lang
.
reflect
.
Modifier
.
toString
(
getModifiers
(
)
)
)
;
if
(
this
instanceof
org
.
apache
.
xml
.
utils
.
synthetic
.
reflection
.
Method
)
{
if
(
returntype
!=
null
)
sb
.
append
(
" "
)
.
append
(
getReturnType
(
)
.
getJavaName
(
)
)
;
else
sb
.
append
(
" void"
)
;
}
sb
.
append
(
" "
)
.
append
(
getName
(
)
)
.
append
(
"("
)
;
org
.
apache
.
xml
.
utils
.
synthetic
.
Class
[
]
types
=
getParameterTypes
(
)
;
if
(
types
!=
null
&
types
.
length
>
0
)
{
sb
.
append
(
types
[
0
]
.
getJavaName
(
)
)
;
if
(
parameternames
!=
null
)
sb
.
append
(
' '
)
.
append
(
parameternames
[
0
]
)
;
for
(
int
i
=
1
;
i
<
types
.
length
;
++
i
)
{
sb
.
append
(
','
)
.
append
(
types
[
i
]
.
getJavaName
(
)
)
;
if
(
parameternames
!=
null
)
sb
.
append
(
' '
)
.
append
(
parameternames
[
i
]
)
;
}
}
sb
.
append
(
')'
)
;
types
=
getExceptionTypes
(
)
;
if
(
types
!=
null
&
types
.
length
>
0
)
{
sb
.
append
(
" throws "
)
.
append
(
types
[
0
]
.
getJavaName
(
)
)
;
for
(
int
i
=
1
;
i
<
types
.
length
;
++
i
)
{
sb
.
append
(
','
)
.
append
(
types
[
i
]
.
getJavaName
(
)
)
;
}
}
if
(
body
==
null
)
sb
.
append
(
"; // No method body available\n"
)
;
else
{
sb
.
append
(
"\n"
+
basetab
+
"{\n"
)
;
if
(
language
==
null
||
"java"
.
equals
(
language
)
)
{
sb
.
append
(
basetab
+
"// ***** Should prettyprint this code...\n"
)
;
sb
.
append
(
basetab
+
body
+
"\n"
)
;
}
else
{
sb
.
append
(
basetab
+
"// ***** Generate BSF invocation!?\n"
)
;
}
sb
.
append
(
basetab
+
"}\n"
)
;
}
return
sb
.
toString
(
)
;
}
}
