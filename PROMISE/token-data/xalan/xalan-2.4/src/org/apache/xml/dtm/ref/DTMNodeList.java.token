package
org
.
apache
.
xml
.
dtm
.
ref
;
import
org
.
apache
.
xml
.
dtm
.
*
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
w3c
.
dom
.
DOMException
;
public
class
DTMNodeList
implements
org
.
w3c
.
dom
.
NodeList
{
private
DTMIterator
dtm_iter
;
private
boolean
valid
=
true
;
private
int
m_firstChild
;
private
DTM
m_parentDTM
;
public
DTMNodeList
(
DTMIterator
dtmIterator
)
{
int
pos
=
dtmIterator
.
getCurrentPos
(
)
;
try
{
dtm_iter
=
(
DTMIterator
)
dtmIterator
.
cloneWithReset
(
)
;
}
catch
(
CloneNotSupportedException
cnse
)
{
}
dtm_iter
.
setShouldCacheNodes
(
true
)
;
dtm_iter
.
runTo
(
-
1
)
;
dtm_iter
.
setCurrentPos
(
pos
)
;
}
public
DTMNodeList
(
DTM
parentDTM
,
int
parentHandle
)
{
dtm_iter
=
null
;
m_parentDTM
=
parentDTM
;
m_firstChild
=
parentDTM
.
getFirstChild
(
parentHandle
)
;
}
DTMIterator
getDTMIterator
(
)
{
return
dtm_iter
;
}
public
Node
item
(
int
index
)
{
if
(
dtm_iter
!=
null
)
{
int
handle
=
dtm_iter
.
item
(
index
)
;
return
dtm_iter
.
getDTM
(
handle
)
.
getNode
(
handle
)
;
}
else
{
int
handle
=
m_firstChild
;
while
(
--
index
>=
0
&&
handle
!=
DTM
.
NULL
)
handle
=
m_parentDTM
.
getNextSibling
(
handle
)
;
return
m_parentDTM
.
getNode
(
handle
)
;
}
}
public
int
getLength
(
)
{
if
(
dtm_iter
!=
null
)
{
return
dtm_iter
.
getLength
(
)
;
}
else
{
int
count
=
0
;
for
(
int
handle
=
m_firstChild
;
handle
!=
DTM
.
NULL
;
handle
=
m_parentDTM
.
getNextSibling
(
handle
)
)
++
count
;
return
count
;
}
}
}
