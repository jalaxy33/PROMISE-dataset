package
org
.
apache
.
xml
.
dtm
;
import
java
.
io
.
IOException
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
BufferedReader
;
import
java
.
util
.
Properties
;
import
java
.
util
.
Enumeration
;
import
org
.
apache
.
xml
.
utils
.
PrefixResolver
;
import
org
.
apache
.
xml
.
utils
.
XMLString
;
import
org
.
apache
.
xml
.
utils
.
XMLStringFactory
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xalan
.
res
.
XSLTErrorResources
;
public
abstract
class
DTMManager
{
private
static
final
String
defaultPropName
=
"org.apache.xml.dtm.DTMManager"
;
protected
XMLStringFactory
m_xsf
=
null
;
protected
DTMManager
(
)
{
}
public
XMLStringFactory
getXMLStringFactory
(
)
{
return
m_xsf
;
}
public
void
setXMLStringFactory
(
XMLStringFactory
xsf
)
{
m_xsf
=
xsf
;
}
public
static
DTMManager
newInstance
(
XMLStringFactory
xsf
)
throws
DTMConfigurationException
{
String
classname
=
findFactory
(
defaultPropName
,
"org.apache.xml.dtm.ref.DTMManagerDefault"
)
;
if
(
classname
==
null
)
{
throw
new
DTMConfigurationException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_NO_DEFAULT_IMPL
,
null
)
)
;
}
DTMManager
factoryImpl
;
try
{
Class
clazz
=
Class
.
forName
(
classname
)
;
factoryImpl
=
(
DTMManager
)
clazz
.
newInstance
(
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
throw
new
DTMConfigurationException
(
cnfe
)
;
}
catch
(
IllegalAccessException
iae
)
{
throw
new
DTMConfigurationException
(
iae
)
;
}
catch
(
InstantiationException
ie
)
{
throw
new
DTMConfigurationException
(
ie
)
;
}
factoryImpl
.
setXMLStringFactory
(
xsf
)
;
return
factoryImpl
;
}
public
abstract
DTM
getDTM
(
javax
.
xml
.
transform
.
Source
source
,
boolean
unique
,
DTMWSFilter
whiteSpaceFilter
,
boolean
incremental
,
boolean
doIndexing
)
;
public
abstract
DTM
getDTM
(
int
nodeHandle
)
;
public
abstract
int
getDTMHandleFromNode
(
org
.
w3c
.
dom
.
Node
node
)
;
public
abstract
DTM
createDocumentFragment
(
)
;
public
abstract
boolean
release
(
DTM
dtm
,
boolean
shouldHardDelete
)
;
public
abstract
DTMIterator
createDTMIterator
(
Object
xpathCompiler
,
int
pos
)
;
public
abstract
DTMIterator
createDTMIterator
(
String
xpathString
,
PrefixResolver
presolver
)
;
public
abstract
DTMIterator
createDTMIterator
(
int
whatToShow
,
DTMFilter
filter
,
boolean
entityReferenceExpansion
)
;
public
abstract
DTMIterator
createDTMIterator
(
int
node
)
;
public
static
boolean
m_incremental
=
false
;
public
synchronized
static
boolean
getIncremental
(
)
{
return
m_incremental
;
}
public
synchronized
static
void
setIncremental
(
boolean
incremental
)
{
m_incremental
=
incremental
;
}
private
static
String
foundFactory
=
null
;
private
static
boolean
debug
;
static
{
try
{
debug
=
System
.
getProperty
(
"dtm.debug"
)
!=
null
;
}
catch
(
SecurityException
ex
)
{
}
}
private
static
String
findFactory
(
String
factoryId
,
String
defaultFactory
)
{
try
{
String
systemProp
=
null
;
try
{
systemProp
=
System
.
getProperty
(
factoryId
)
;
}
catch
(
SecurityException
se
)
{
}
if
(
systemProp
!=
null
)
{
if
(
debug
)
{
System
.
err
.
println
(
"DTM: found system property"
+
systemProp
)
;
}
return
systemProp
;
}
}
catch
(
SecurityException
se
)
{
}
if
(
foundFactory
!=
null
)
{
return
foundFactory
;
}
try
{
String
javah
=
System
.
getProperty
(
"java.home"
)
;
String
configFile
=
javah
+
File
.
separator
+
"lib"
+
File
.
separator
+
"jaxp.properties"
;
File
f
=
new
File
(
configFile
)
;
if
(
f
.
exists
(
)
)
{
Properties
props
=
new
Properties
(
)
;
props
.
load
(
new
FileInputStream
(
f
)
)
;
foundFactory
=
props
.
getProperty
(
factoryId
)
;
if
(
debug
)
{
System
.
err
.
println
(
"DTM: found java.home property "
+
foundFactory
)
;
}
if
(
foundFactory
!=
null
)
{
return
foundFactory
;
}
}
}
catch
(
Exception
ex
)
{
if
(
debug
)
{
ex
.
printStackTrace
(
)
;
}
}
String
serviceId
=
"META-INF/services/"
+
factoryId
;
try
{
ClassLoader
cl
=
DTMManager
.
class
.
getClassLoader
(
)
;
InputStream
is
=
null
;
if
(
cl
==
null
)
{
is
=
ClassLoader
.
getSystemResourceAsStream
(
serviceId
)
;
}
else
{
is
=
cl
.
getResourceAsStream
(
serviceId
)
;
}
if
(
is
!=
null
)
{
if
(
debug
)
{
System
.
err
.
println
(
"DTM: found  "
+
serviceId
)
;
}
BufferedReader
rd
=
new
BufferedReader
(
new
InputStreamReader
(
is
,
"UTF-8"
)
)
;
foundFactory
=
rd
.
readLine
(
)
;
rd
.
close
(
)
;
if
(
debug
)
{
System
.
err
.
println
(
"DTM: loaded from services: "
+
foundFactory
)
;
}
if
(
(
foundFactory
!=
null
)
&&
!
""
.
equals
(
foundFactory
)
)
{
return
foundFactory
;
}
}
}
catch
(
Exception
ex
)
{
if
(
debug
)
{
ex
.
printStackTrace
(
)
;
}
}
return
defaultFactory
;
}
public
static
final
int
IDENT_DTM_NODE_BITS
=
16
;
public
static
final
int
IDENT_NODE_DEFAULT
=
(
1
<<
IDENT_DTM_NODE_BITS
)
-
1
;
public
static
final
int
IDENT_DTM_DEFAULT
=
~
IDENT_NODE_DEFAULT
;
public
static
final
int
IDENT_MAX_DTMS
=
(
IDENT_DTM_DEFAULT
>
>
>
IDENT_DTM_NODE_BITS
)
+
1
;
public
abstract
int
getDTMIdentity
(
DTM
dtm
)
;
public
int
getDTMIdentityMask
(
)
{
return
IDENT_DTM_DEFAULT
;
}
public
int
getNodeIdentityMask
(
)
{
return
IDENT_NODE_DEFAULT
;
}
}
