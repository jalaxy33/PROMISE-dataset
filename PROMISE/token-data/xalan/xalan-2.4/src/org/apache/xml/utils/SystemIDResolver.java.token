package
org
.
apache
.
xml
.
utils
;
import
javax
.
xml
.
transform
.
TransformerException
;
import
org
.
apache
.
xml
.
utils
.
URI
;
import
org
.
apache
.
xml
.
utils
.
URI
.
MalformedURIException
;
import
java
.
io
.
*
;
import
java
.
lang
.
StringBuffer
;
public
class
SystemIDResolver
{
public
static
String
getAbsoluteURIFromRelative
(
String
uri
)
{
String
curdir
=
""
;
try
{
curdir
=
System
.
getProperty
(
"user.dir"
)
;
}
catch
(
SecurityException
se
)
{
}
if
(
null
!=
curdir
)
{
String
base
;
if
(
curdir
.
startsWith
(
File
.
separator
)
)
base
=
"file://"
+
curdir
;
else
base
=
"file:///"
+
curdir
;
if
(
uri
!=
null
)
uri
=
base
+
System
.
getProperty
(
"file.separator"
)
+
uri
;
else
uri
=
base
+
System
.
getProperty
(
"file.separator"
)
;
}
if
(
null
!=
uri
&&
(
uri
.
indexOf
(
'\\'
)
>
-
1
)
)
uri
=
uri
.
replace
(
'\\'
,
'/'
)
;
return
uri
;
}
public
static
String
getAbsoluteURI
(
String
url
)
throws
TransformerException
{
if
(
url
.
startsWith
(
".."
)
)
url
=
new
File
(
url
)
.
getAbsolutePath
(
)
;
if
(
url
.
startsWith
(
File
.
separator
)
)
{
url
=
"file://"
+
url
;
}
else
if
(
url
.
indexOf
(
':'
)
<
0
)
{
url
=
getAbsoluteURIFromRelative
(
url
)
;
}
return
url
;
}
public
static
String
getAbsoluteURI
(
String
urlString
,
String
base
)
throws
TransformerException
{
boolean
isAbsouteUrl
=
false
;
boolean
needToResolve
=
false
;
if
(
urlString
.
indexOf
(
':'
)
>
0
)
{
isAbsouteUrl
=
true
;
}
else
if
(
urlString
.
startsWith
(
File
.
separator
)
)
{
urlString
=
"file://"
+
urlString
;
isAbsouteUrl
=
true
;
}
if
(
(
!
isAbsouteUrl
)
&&
(
(
null
==
base
)
||
(
base
.
indexOf
(
':'
)
<
0
)
)
)
{
if
(
base
!=
null
&&
base
.
startsWith
(
File
.
separator
)
)
base
=
"file://"
+
base
;
else
base
=
getAbsoluteURIFromRelative
(
base
)
;
}
if
(
(
null
!=
base
)
&&
needToResolve
)
{
if
(
base
.
equals
(
urlString
)
)
{
base
=
""
;
}
else
{
urlString
=
urlString
.
substring
(
5
)
;
isAbsouteUrl
=
false
;
}
}
if
(
null
!=
base
&&
(
base
.
indexOf
(
'\\'
)
>
-
1
)
)
base
=
base
.
replace
(
'\\'
,
'/'
)
;
if
(
null
!=
urlString
&&
(
urlString
.
indexOf
(
'\\'
)
>
-
1
)
)
urlString
=
urlString
.
replace
(
'\\'
,
'/'
)
;
URI
uri
;
try
{
if
(
(
null
==
base
)
||
(
base
.
length
(
)
==
0
)
||
(
isAbsouteUrl
)
)
{
uri
=
new
URI
(
urlString
)
;
}
else
{
URI
baseURI
=
new
URI
(
base
)
;
uri
=
new
URI
(
baseURI
,
urlString
)
;
}
}
catch
(
MalformedURIException
mue
)
{
throw
new
TransformerException
(
mue
)
;
}
String
uriStr
=
uri
.
toString
(
)
;
if
(
(
Character
.
isLetter
(
uriStr
.
charAt
(
0
)
)
&&
(
uriStr
.
charAt
(
1
)
==
':'
)
&&
(
uriStr
.
charAt
(
2
)
==
'/'
)
&&
(
uriStr
.
length
(
)
==
3
||
uriStr
.
charAt
(
3
)
!=
'/'
)
)
||
(
(
uriStr
.
charAt
(
0
)
==
'/'
)
&&
(
uriStr
.
length
(
)
==
1
||
uriStr
.
charAt
(
1
)
!=
'/'
)
)
)
{
uriStr
=
"file:///"
+
uriStr
;
}
return
uriStr
;
}
}
