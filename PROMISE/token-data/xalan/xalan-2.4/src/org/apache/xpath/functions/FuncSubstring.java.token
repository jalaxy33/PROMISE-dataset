package
org
.
apache
.
xpath
.
functions
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
xpath
.
XPathContext
;
import
org
.
apache
.
xpath
.
XPath
;
import
org
.
apache
.
xpath
.
objects
.
XObject
;
import
org
.
apache
.
xpath
.
objects
.
XString
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xpath
.
res
.
XPATHErrorResources
;
import
org
.
apache
.
xml
.
utils
.
XMLString
;
public
class
FuncSubstring
extends
Function3Args
{
public
XObject
execute
(
XPathContext
xctxt
)
throws
javax
.
xml
.
transform
.
TransformerException
{
XMLString
s1
=
m_arg0
.
execute
(
xctxt
)
.
xstr
(
)
;
double
start
=
m_arg1
.
execute
(
xctxt
)
.
num
(
)
;
int
lenOfS1
=
s1
.
length
(
)
;
XMLString
substr
;
if
(
lenOfS1
<=
0
)
return
XString
.
EMPTYSTRING
;
else
{
int
startIndex
;
if
(
Double
.
isNaN
(
start
)
)
{
start
=
-
1000000
;
startIndex
=
0
;
}
else
{
start
=
Math
.
round
(
start
)
;
startIndex
=
(
start
>
0
)
?
(
int
)
start
-
1
:
0
;
}
if
(
null
!=
m_arg2
)
{
double
len
=
m_arg2
.
num
(
xctxt
)
;
int
end
=
(
int
)
(
Math
.
round
(
len
)
+
start
)
-
1
;
if
(
end
<
0
)
end
=
0
;
else
if
(
end
>
lenOfS1
)
end
=
lenOfS1
;
if
(
startIndex
>
lenOfS1
)
startIndex
=
lenOfS1
;
substr
=
s1
.
substring
(
startIndex
,
end
)
;
}
else
{
if
(
startIndex
>
lenOfS1
)
startIndex
=
lenOfS1
;
substr
=
s1
.
substring
(
startIndex
)
;
}
}
return
(
XString
)
substr
;
}
public
void
checkNumberArgs
(
int
argNum
)
throws
WrongNumberArgsException
{
if
(
argNum
<
2
)
reportWrongNumberArgs
(
)
;
}
protected
void
reportWrongNumberArgs
(
)
throws
WrongNumberArgsException
{
throw
new
WrongNumberArgsException
(
XSLMessages
.
createXPATHMessage
(
XPATHErrorResources
.
ER_TWO_OR_THREE
,
null
)
)
;
}
}
