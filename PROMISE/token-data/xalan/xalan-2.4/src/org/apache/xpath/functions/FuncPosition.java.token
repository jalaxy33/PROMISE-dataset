package
org
.
apache
.
xpath
.
functions
;
import
org
.
apache
.
xml
.
dtm
.
DTM
;
import
org
.
apache
.
xml
.
dtm
.
DTMIterator
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
xpath
.
XPathContext
;
import
org
.
apache
.
xpath
.
XPath
;
import
org
.
apache
.
xpath
.
objects
.
XObject
;
import
org
.
apache
.
xpath
.
objects
.
XNumber
;
import
org
.
apache
.
xpath
.
axes
.
SubContextList
;
import
org
.
apache
.
xpath
.
axes
.
ContextNodeList
;
import
org
.
apache
.
xpath
.
NodeSetDTM
;
import
org
.
apache
.
xpath
.
compiler
.
Compiler
;
public
class
FuncPosition
extends
Function
{
private
boolean
m_isTopLevel
;
public
void
postCompileStep
(
Compiler
compiler
)
{
m_isTopLevel
=
compiler
.
getLocationPathDepth
(
)
==
-
1
;
}
public
int
getPositionInContextNodeList
(
XPathContext
xctxt
)
{
SubContextList
iter
=
m_isTopLevel
?
null
:
xctxt
.
getSubContextList
(
)
;
if
(
null
!=
iter
)
{
int
prox
=
iter
.
getProximityPosition
(
xctxt
)
;
return
prox
;
}
DTMIterator
cnl
=
xctxt
.
getContextNodeList
(
)
;
if
(
null
!=
cnl
)
{
int
n
=
cnl
.
getCurrentNode
(
)
;
if
(
n
==
DTM
.
NULL
)
{
if
(
cnl
.
getCurrentPos
(
)
==
0
)
return
0
;
try
{
cnl
=
cnl
.
cloneWithReset
(
)
;
}
catch
(
CloneNotSupportedException
cnse
)
{
throw
new
org
.
apache
.
xml
.
utils
.
WrappedRuntimeException
(
cnse
)
;
}
int
currentNode
=
xctxt
.
getContextNode
(
)
;
while
(
DTM
.
NULL
!=
(
n
=
cnl
.
nextNode
(
)
)
)
{
if
(
n
==
currentNode
)
break
;
}
}
return
cnl
.
getCurrentPos
(
)
;
}
return
-
1
;
}
public
XObject
execute
(
XPathContext
xctxt
)
throws
javax
.
xml
.
transform
.
TransformerException
{
double
pos
=
(
double
)
getPositionInContextNodeList
(
xctxt
)
;
return
new
XNumber
(
pos
)
;
}
public
void
fixupVariables
(
java
.
util
.
Vector
vars
,
int
globalsSize
)
{
}
}
