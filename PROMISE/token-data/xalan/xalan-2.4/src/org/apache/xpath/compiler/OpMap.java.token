package
org
.
apache
.
xpath
.
compiler
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
xml
.
utils
.
QName
;
import
org
.
apache
.
xpath
.
patterns
.
NodeTest
;
import
org
.
apache
.
xpath
.
res
.
XPATHErrorResources
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
public
class
OpMap
{
protected
String
m_currentPattern
;
public
String
toString
(
)
{
return
m_currentPattern
;
}
public
String
getPatternString
(
)
{
return
m_currentPattern
;
}
static
final
int
MAXTOKENQUEUESIZE
=
500
;
public
Object
[
]
m_tokenQueue
=
new
Object
[
MAXTOKENQUEUESIZE
]
;
public
Object
[
]
getTokenQueue
(
)
{
return
m_tokenQueue
;
}
public
Object
getToken
(
int
pos
)
{
return
m_tokenQueue
[
pos
]
;
}
public
int
m_tokenQueueSize
=
0
;
public
int
getTokenQueueSize
(
)
{
return
m_tokenQueueSize
;
}
public
int
m_opMap
[
]
=
null
;
public
int
[
]
getOpMap
(
)
{
return
m_opMap
;
}
public
static
final
int
MAPINDEX_LENGTH
=
1
;
void
shrink
(
)
{
int
map
[
]
=
m_opMap
;
int
n
=
m_opMap
[
MAPINDEX_LENGTH
]
;
;
m_opMap
=
new
int
[
n
+
4
]
;
int
i
;
for
(
i
=
0
;
i
<
n
;
i
++
)
{
m_opMap
[
i
]
=
map
[
i
]
;
}
m_opMap
[
i
]
=
0
;
m_opMap
[
i
+
1
]
=
0
;
m_opMap
[
i
+
2
]
=
0
;
Object
[
]
tokens
=
m_tokenQueue
;
n
=
m_tokenQueueSize
;
m_tokenQueue
=
new
Object
[
n
+
4
]
;
for
(
i
=
0
;
i
<
n
;
i
++
)
{
m_tokenQueue
[
i
]
=
tokens
[
i
]
;
}
m_tokenQueue
[
i
]
=
null
;
m_tokenQueue
[
i
+
1
]
=
null
;
m_tokenQueue
[
i
+
2
]
=
null
;
}
public
int
getOp
(
int
opPos
)
{
return
m_opMap
[
opPos
]
;
}
public
int
getNextOpPos
(
int
opPos
)
{
return
opPos
+
m_opMap
[
opPos
+
1
]
;
}
public
int
getNextStepPos
(
int
opPos
)
{
int
stepType
=
getOp
(
opPos
)
;
if
(
(
stepType
>=
OpCodes
.
AXES_START_TYPES
)
&&
(
stepType
<=
OpCodes
.
AXES_END_TYPES
)
)
{
return
getNextOpPos
(
opPos
)
;
}
else
if
(
(
stepType
>=
OpCodes
.
FIRST_NODESET_OP
)
&&
(
stepType
<=
OpCodes
.
LAST_NODESET_OP
)
)
{
int
newOpPos
=
getNextOpPos
(
opPos
)
;
while
(
OpCodes
.
OP_PREDICATE
==
getOp
(
newOpPos
)
)
{
newOpPos
=
getNextOpPos
(
newOpPos
)
;
}
stepType
=
getOp
(
newOpPos
)
;
if
(
!
(
(
stepType
>=
OpCodes
.
AXES_START_TYPES
)
&&
(
stepType
<=
OpCodes
.
AXES_END_TYPES
)
)
)
{
return
OpCodes
.
ENDOP
;
}
return
newOpPos
;
}
else
{
throw
new
RuntimeException
(
XSLMessages
.
createXPATHMessage
(
XPATHErrorResources
.
ER_UNKNOWN_STEP
,
new
Object
[
]
{
new
Integer
(
stepType
)
.
toString
(
)
}
)
)
;
}
}
public
static
int
getNextOpPos
(
int
[
]
opMap
,
int
opPos
)
{
return
opPos
+
opMap
[
opPos
+
1
]
;
}
public
int
getFirstPredicateOpPos
(
int
opPos
)
throws
javax
.
xml
.
transform
.
TransformerException
{
int
stepType
=
m_opMap
[
opPos
]
;
if
(
(
stepType
>=
OpCodes
.
AXES_START_TYPES
)
&&
(
stepType
<=
OpCodes
.
AXES_END_TYPES
)
)
{
return
opPos
+
m_opMap
[
opPos
+
2
]
;
}
else
if
(
(
stepType
>=
OpCodes
.
FIRST_NODESET_OP
)
&&
(
stepType
<=
OpCodes
.
LAST_NODESET_OP
)
)
{
return
opPos
+
m_opMap
[
opPos
+
1
]
;
}
else
if
(
-
2
==
stepType
)
{
return
-
2
;
}
else
{
error
(
org
.
apache
.
xpath
.
res
.
XPATHErrorResources
.
ER_UNKNOWN_OPCODE
,
new
Object
[
]
{
String
.
valueOf
(
stepType
)
}
)
;
return
-
1
;
}
}
public
void
error
(
int
msg
,
Object
[
]
args
)
throws
javax
.
xml
.
transform
.
TransformerException
{
java
.
lang
.
String
fmsg
=
org
.
apache
.
xalan
.
res
.
XSLMessages
.
createXPATHMessage
(
msg
,
args
)
;
throw
new
javax
.
xml
.
transform
.
TransformerException
(
fmsg
)
;
}
public
static
int
getFirstChildPos
(
int
opPos
)
{
return
opPos
+
2
;
}
public
int
getArgLength
(
int
opPos
)
{
return
m_opMap
[
opPos
+
MAPINDEX_LENGTH
]
;
}
public
int
getArgLengthOfStep
(
int
opPos
)
{
return
m_opMap
[
opPos
+
MAPINDEX_LENGTH
+
1
]
-
3
;
}
public
static
int
getFirstChildPosOfStep
(
int
opPos
)
{
return
opPos
+
3
;
}
public
int
getStepTestType
(
int
opPosOfStep
)
{
return
m_opMap
[
opPosOfStep
+
3
]
;
}
public
String
getStepNS
(
int
opPosOfStep
)
{
int
argLenOfStep
=
getArgLengthOfStep
(
opPosOfStep
)
;
if
(
argLenOfStep
==
3
)
{
int
index
=
m_opMap
[
opPosOfStep
+
4
]
;
if
(
index
>=
0
)
return
(
String
)
m_tokenQueue
[
index
]
;
else
if
(
OpCodes
.
ELEMWILDCARD
==
index
)
return
NodeTest
.
WILD
;
else
return
null
;
}
else
return
null
;
}
public
String
getStepLocalName
(
int
opPosOfStep
)
{
int
argLenOfStep
=
getArgLengthOfStep
(
opPosOfStep
)
;
int
index
;
switch
(
argLenOfStep
)
{
case
0
:
index
=
OpCodes
.
EMPTY
;
break
;
case
1
:
index
=
OpCodes
.
ELEMWILDCARD
;
break
;
case
2
:
index
=
m_opMap
[
opPosOfStep
+
4
]
;
break
;
case
3
:
index
=
m_opMap
[
opPosOfStep
+
5
]
;
break
;
default
:
index
=
OpCodes
.
EMPTY
;
break
;
}
if
(
index
>=
0
)
return
(
String
)
m_tokenQueue
[
index
]
.
toString
(
)
;
else
if
(
OpCodes
.
ELEMWILDCARD
==
index
)
return
NodeTest
.
WILD
;
else
return
null
;
}
}
