package
org
.
apache
.
xpath
.
operations
;
import
java
.
util
.
Vector
;
import
javax
.
xml
.
transform
.
TransformerException
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xalan
.
templates
.
ElemTemplateElement
;
import
org
.
apache
.
xalan
.
templates
.
ElemVariable
;
import
org
.
apache
.
xalan
.
templates
.
Stylesheet
;
import
org
.
apache
.
xml
.
utils
.
PrefixResolver
;
import
org
.
apache
.
xml
.
utils
.
QName
;
import
org
.
apache
.
xpath
.
Expression
;
import
org
.
apache
.
xpath
.
ExpressionNode
;
import
org
.
apache
.
xpath
.
ExpressionOwner
;
import
org
.
apache
.
xpath
.
XPath
;
import
org
.
apache
.
xpath
.
XPathContext
;
import
org
.
apache
.
xpath
.
XPathVisitor
;
import
org
.
apache
.
xpath
.
axes
.
PathComponent
;
import
org
.
apache
.
xpath
.
axes
.
WalkerFactory
;
import
org
.
apache
.
xpath
.
objects
.
XNodeSet
;
import
org
.
apache
.
xpath
.
objects
.
XObject
;
import
org
.
apache
.
xpath
.
res
.
XPATHErrorResources
;
import
org
.
xml
.
sax
.
ContentHandler
;
import
org
.
xml
.
sax
.
SAXException
;
public
class
Variable
extends
Expression
implements
PathComponent
{
private
boolean
m_fixUpWasCalled
=
false
;
protected
QName
m_qname
;
protected
int
m_index
;
public
void
setIndex
(
int
index
)
{
m_index
=
index
;
}
public
int
getIndex
(
)
{
return
m_index
;
}
public
void
setIsGlobal
(
boolean
isGlobal
)
{
m_isGlobal
=
isGlobal
;
}
public
boolean
getGlobal
(
)
{
return
m_isGlobal
;
}
protected
boolean
m_isGlobal
=
false
;
public
void
fixupVariables
(
java
.
util
.
Vector
vars
,
int
globalsSize
)
{
m_fixUpWasCalled
=
true
;
int
sz
=
vars
.
size
(
)
;
for
(
int
i
=
vars
.
size
(
)
-
1
;
i
>=
0
;
i
--
)
{
QName
qn
=
(
QName
)
vars
.
elementAt
(
i
)
;
if
(
qn
.
equals
(
m_qname
)
)
{
if
(
i
<
globalsSize
)
{
m_isGlobal
=
true
;
m_index
=
i
;
}
else
{
m_index
=
i
-
globalsSize
;
}
return
;
}
}
java
.
lang
.
String
msg
=
XSLMessages
.
createXPATHMessage
(
XPATHErrorResources
.
ER_COULD_NOT_FIND_VAR
,
new
Object
[
]
{
m_qname
.
toString
(
)
}
)
;
TransformerException
te
=
new
TransformerException
(
msg
,
this
)
;
throw
new
org
.
apache
.
xml
.
utils
.
WrappedRuntimeException
(
te
)
;
}
public
void
setQName
(
QName
qname
)
{
m_qname
=
qname
;
}
public
QName
getQName
(
)
{
return
m_qname
;
}
public
XObject
execute
(
XPathContext
xctxt
)
throws
javax
.
xml
.
transform
.
TransformerException
{
return
execute
(
xctxt
,
false
)
;
}
public
XObject
execute
(
XPathContext
xctxt
,
boolean
destructiveOK
)
throws
javax
.
xml
.
transform
.
TransformerException
{
org
.
apache
.
xml
.
utils
.
PrefixResolver
xprefixResolver
=
xctxt
.
getNamespaceContext
(
)
;
if
(
m_fixUpWasCalled
)
{
XObject
result
;
if
(
m_isGlobal
)
result
=
xctxt
.
getVarStack
(
)
.
getGlobalVariable
(
xctxt
,
m_index
,
destructiveOK
)
;
else
result
=
xctxt
.
getVarStack
(
)
.
getLocalVariable
(
xctxt
,
m_index
,
destructiveOK
)
;
if
(
null
==
result
)
{
warn
(
xctxt
,
XPATHErrorResources
.
WG_ILLEGAL_VARIABLE_REFERENCE
,
new
Object
[
]
{
m_qname
.
getLocalPart
(
)
}
)
;
result
=
new
XNodeSet
(
xctxt
.
getDTMManager
(
)
)
;
}
return
result
;
}
else
{
synchronized
(
this
)
{
org
.
apache
.
xalan
.
templates
.
ElemVariable
vvar
=
getElemVariable
(
)
;
if
(
null
!=
vvar
)
{
m_index
=
vvar
.
getIndex
(
)
;
m_isGlobal
=
vvar
.
getIsTopLevel
(
)
;
m_fixUpWasCalled
=
true
;
return
execute
(
xctxt
)
;
}
}
throw
new
javax
.
xml
.
transform
.
TransformerException
(
XSLMessages
.
createXPATHMessage
(
XPATHErrorResources
.
ER_VAR_NOT_RESOLVABLE
,
new
Object
[
]
{
m_qname
.
toString
(
)
}
)
)
;
}
}
public
org
.
apache
.
xalan
.
templates
.
ElemVariable
getElemVariable
(
)
{
org
.
apache
.
xpath
.
ExpressionNode
owner
=
getExpressionOwner
(
)
;
if
(
null
!=
owner
&&
owner
instanceof
org
.
apache
.
xalan
.
templates
.
ElemTemplateElement
)
{
org
.
apache
.
xalan
.
templates
.
ElemVariable
vvar
;
org
.
apache
.
xalan
.
templates
.
ElemTemplateElement
prev
=
(
org
.
apache
.
xalan
.
templates
.
ElemTemplateElement
)
owner
;
if
(
!
(
prev
instanceof
org
.
apache
.
xalan
.
templates
.
Stylesheet
)
)
{
while
(
!
(
prev
.
getParentNode
(
)
instanceof
org
.
apache
.
xalan
.
templates
.
Stylesheet
)
)
{
org
.
apache
.
xalan
.
templates
.
ElemTemplateElement
savedprev
=
prev
;
while
(
null
!=
(
prev
=
prev
.
getPreviousSiblingElem
(
)
)
)
{
if
(
prev
instanceof
org
.
apache
.
xalan
.
templates
.
ElemVariable
)
{
vvar
=
(
org
.
apache
.
xalan
.
templates
.
ElemVariable
)
prev
;
if
(
vvar
.
getName
(
)
.
equals
(
m_qname
)
)
{
return
vvar
;
}
}
}
prev
=
savedprev
.
getParentElem
(
)
;
}
}
vvar
=
prev
.
getStylesheetRoot
(
)
.
getVariableOrParamComposed
(
m_qname
)
;
if
(
null
!=
vvar
)
{
return
vvar
;
}
}
return
null
;
}
public
boolean
isStableNumber
(
)
{
return
true
;
}
public
int
getAnalysisBits
(
)
{
org
.
apache
.
xalan
.
templates
.
ElemVariable
vvar
=
getElemVariable
(
)
;
if
(
null
!=
vvar
)
{
XPath
xpath
=
vvar
.
getSelect
(
)
;
if
(
null
!=
xpath
)
{
Expression
expr
=
xpath
.
getExpression
(
)
;
if
(
null
!=
expr
&&
expr
instanceof
PathComponent
)
{
return
(
(
PathComponent
)
expr
)
.
getAnalysisBits
(
)
;
}
}
}
return
WalkerFactory
.
BIT_FILTER
;
}
public
void
callVisitors
(
ExpressionOwner
owner
,
XPathVisitor
visitor
)
{
visitor
.
visitVariableRef
(
owner
,
this
)
;
}
public
boolean
deepEquals
(
Expression
expr
)
{
if
(
!
isSameClass
(
expr
)
)
return
false
;
if
(
!
m_qname
.
equals
(
(
(
Variable
)
expr
)
.
m_qname
)
)
return
false
;
if
(
getElemVariable
(
)
!=
(
(
Variable
)
expr
)
.
getElemVariable
(
)
)
return
false
;
return
true
;
}
static
final
java
.
lang
.
String
PSUEDOVARNAMESPACE
=
"http://xml.apache.org/xalan/psuedovar"
;
public
boolean
isPsuedoVarRef
(
)
{
java
.
lang
.
String
ns
=
m_qname
.
getNamespaceURI
(
)
;
if
(
(
null
!=
ns
)
&&
ns
.
equals
(
PSUEDOVARNAMESPACE
)
)
{
if
(
m_qname
.
getLocalName
(
)
.
startsWith
(
"#"
)
)
return
true
;
}
return
false
;
}
}
