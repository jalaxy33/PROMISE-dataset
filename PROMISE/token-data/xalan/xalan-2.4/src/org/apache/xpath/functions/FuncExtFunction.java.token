package
org
.
apache
.
xpath
.
functions
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
xpath
.
Expression
;
import
org
.
apache
.
xpath
.
XPathContext
;
import
org
.
apache
.
xpath
.
ExtensionsProvider
;
import
org
.
apache
.
xpath
.
objects
.
*
;
import
org
.
apache
.
xalan
.
transformer
.
TransformerImpl
;
import
org
.
apache
.
xalan
.
extensions
.
ExtensionsTable
;
import
org
.
apache
.
xml
.
dtm
.
DTMIterator
;
import
org
.
w3c
.
dom
.
DocumentFragment
;
import
org
.
w3c
.
dom
.
traversal
.
NodeIterator
;
import
org
.
apache
.
xml
.
dtm
.
*
;
import
org
.
apache
.
xpath
.
axes
.
*
;
import
org
.
apache
.
xpath
.
res
.
XPATHErrorResources
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
public
class
FuncExtFunction
extends
Function
{
String
m_namespace
;
String
m_extensionName
;
Object
m_methodKey
;
Vector
m_argVec
=
new
Vector
(
)
;
public
void
fixupVariables
(
java
.
util
.
Vector
vars
,
int
globalsSize
)
{
if
(
null
!=
m_argVec
)
{
int
nArgs
=
m_argVec
.
size
(
)
;
for
(
int
i
=
0
;
i
<
nArgs
;
i
++
)
{
Expression
arg
=
(
Expression
)
m_argVec
.
elementAt
(
i
)
;
arg
.
fixupVariables
(
vars
,
globalsSize
)
;
}
}
}
public
String
getNamespace
(
)
{
return
m_namespace
;
}
public
String
getFunctionName
(
)
{
return
m_extensionName
;
}
public
FuncExtFunction
(
java
.
lang
.
String
namespace
,
java
.
lang
.
String
extensionName
,
Object
methodKey
)
{
m_namespace
=
namespace
;
m_extensionName
=
extensionName
;
m_methodKey
=
methodKey
;
}
public
XObject
execute
(
XPathContext
xctxt
)
throws
javax
.
xml
.
transform
.
TransformerException
{
XObject
result
;
Vector
argVec
=
new
Vector
(
)
;
int
nArgs
=
m_argVec
.
size
(
)
;
for
(
int
i
=
0
;
i
<
nArgs
;
i
++
)
{
Expression
arg
=
(
Expression
)
m_argVec
.
elementAt
(
i
)
;
XObject
xobj
=
arg
.
execute
(
xctxt
)
;
argVec
.
addElement
(
xobj
)
;
}
ExtensionsProvider
extProvider
=
(
ExtensionsProvider
)
xctxt
.
getOwnerObject
(
)
;
Object
val
=
extProvider
.
extFunction
(
m_namespace
,
m_extensionName
,
argVec
,
m_methodKey
)
;
if
(
null
!=
val
)
{
result
=
XObject
.
create
(
val
,
xctxt
)
;
}
else
{
result
=
new
XNull
(
)
;
}
return
result
;
}
public
void
setArg
(
Expression
arg
,
int
argNum
)
throws
WrongNumberArgsException
{
m_argVec
.
addElement
(
arg
)
;
}
public
void
checkNumberArgs
(
int
argNum
)
throws
WrongNumberArgsException
{
}
protected
void
reportWrongNumberArgs
(
)
throws
WrongNumberArgsException
{
String
fMsg
=
XSLMessages
.
createXPATHMessage
(
XPATHErrorResources
.
ER_INCORRECT_PROGRAMMER_ASSERTION
,
new
Object
[
]
{
"Programmer's assertion:  the method FunctionMultiArgs.reportWrongNumberArgs() should never be called."
}
)
;
throw
new
RuntimeException
(
fMsg
)
;
}
}
