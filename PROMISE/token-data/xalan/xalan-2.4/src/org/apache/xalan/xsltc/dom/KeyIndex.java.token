package
org
.
apache
.
xalan
.
xsltc
.
dom
;
import
java
.
util
.
Vector
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
xalan
.
xsltc
.
DOM
;
import
org
.
apache
.
xalan
.
xsltc
.
NodeIterator
;
import
org
.
apache
.
xalan
.
xsltc
.
runtime
.
Hashtable
;
public
class
KeyIndex
implements
NodeIterator
{
private
Hashtable
_index
=
new
Hashtable
(
)
;
private
BitArray
_nodes
=
null
;
private
int
_pos
=
0
;
private
int
_mark
=
0
;
private
int
_save
=
0
;
private
int
_start
=
0
;
private
int
_arraySize
=
0
;
private
int
_node
=
-
1
;
public
KeyIndex
(
int
size
)
{
_arraySize
=
size
;
}
public
void
setRestartable
(
boolean
flag
)
{
}
public
void
add
(
Object
value
,
int
node
)
{
if
(
(
_nodes
=
(
BitArray
)
_index
.
get
(
value
)
)
==
null
)
{
_nodes
=
new
BitArray
(
_arraySize
)
;
_nodes
.
setMask
(
node
&
0xff000000
)
;
_index
.
put
(
value
,
_nodes
)
;
}
_nodes
.
setBit
(
node
&
0x00ffffff
)
;
}
public
void
merge
(
KeyIndex
other
)
{
if
(
other
!=
null
)
{
if
(
other
.
_nodes
!=
null
)
{
if
(
_nodes
==
null
)
_nodes
=
other
.
_nodes
;
else
_nodes
=
_nodes
.
merge
(
other
.
_nodes
)
;
}
}
}
public
void
lookupId
(
Object
value
)
{
if
(
value
instanceof
String
)
{
final
String
string
=
(
String
)
value
;
if
(
string
.
indexOf
(
' '
)
>
-
1
)
{
StringTokenizer
values
=
new
StringTokenizer
(
string
)
;
while
(
values
.
hasMoreElements
(
)
)
{
BitArray
nodes
=
(
BitArray
)
_index
.
get
(
values
.
nextElement
(
)
)
;
if
(
nodes
!=
null
)
{
if
(
_nodes
==
null
)
_nodes
=
nodes
;
else
_nodes
=
_nodes
.
merge
(
nodes
)
;
}
}
return
;
}
}
_nodes
=
(
BitArray
)
_index
.
get
(
value
)
;
}
public
void
lookupKey
(
Object
value
)
{
_nodes
=
(
BitArray
)
_index
.
get
(
value
)
;
}
public
int
next
(
)
{
if
(
_nodes
==
null
)
return
(
END
)
;
if
(
(
_node
=
_nodes
.
getNextBit
(
++
_node
)
)
==
END
)
return
(
END
)
;
_pos
++
;
return
(
_node
|
_nodes
.
getMask
(
)
)
;
}
public
int
containsID
(
int
node
,
Object
value
)
{
if
(
value
instanceof
String
)
{
final
String
string
=
(
String
)
value
;
if
(
string
.
indexOf
(
' '
)
>
-
1
)
{
StringTokenizer
values
=
new
StringTokenizer
(
string
)
;
while
(
values
.
hasMoreElements
(
)
)
{
BitArray
nodes
=
(
BitArray
)
_index
.
get
(
values
.
nextElement
(
)
)
;
if
(
(
nodes
!=
null
)
&&
(
nodes
.
getBit
(
node
)
)
)
return
(
1
)
;
}
return
(
0
)
;
}
}
BitArray
nodes
=
(
BitArray
)
_index
.
get
(
value
)
;
if
(
(
nodes
!=
null
)
&&
(
nodes
.
getBit
(
node
)
)
)
return
(
1
)
;
return
(
0
)
;
}
public
int
containsKey
(
int
node
,
Object
value
)
{
BitArray
nodes
=
(
BitArray
)
_index
.
get
(
value
)
;
if
(
(
nodes
!=
null
)
&&
(
nodes
.
getBit
(
node
)
)
)
return
(
1
)
;
return
(
0
)
;
}
public
NodeIterator
reset
(
)
{
_pos
=
_start
;
_node
=
_start
-
1
;
return
(
this
)
;
}
public
int
getLast
(
)
{
if
(
_nodes
==
null
)
return
(
0
)
;
else
return
(
_nodes
.
size
(
)
)
;
}
public
int
getPosition
(
)
{
return
(
_pos
)
;
}
public
void
setMark
(
)
{
_mark
=
_pos
;
_save
=
_node
;
}
public
void
gotoMark
(
)
{
_pos
=
_mark
;
_node
=
_save
;
}
public
NodeIterator
setStartNode
(
int
start
)
{
if
(
start
==
END
)
{
_nodes
=
null
;
}
else
if
(
_nodes
!=
null
)
{
_start
=
_nodes
.
getBitNumber
(
start
-
1
)
;
_node
=
_start
-
1
;
}
return
(
(
NodeIterator
)
this
)
;
}
public
boolean
isReverse
(
)
{
return
(
false
)
;
}
public
NodeIterator
cloneIterator
(
)
{
KeyIndex
other
=
new
KeyIndex
(
_arraySize
)
;
other
.
_index
=
_index
;
other
.
_nodes
=
_nodes
.
cloneArray
(
)
;
other
.
_pos
=
_pos
;
other
.
_start
=
_start
;
other
.
_node
=
_node
;
return
(
other
)
;
}
}
