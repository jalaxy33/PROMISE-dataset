package
org
.
apache
.
xalan
.
templates
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
import
org
.
xml
.
sax
.
*
;
import
org
.
xml
.
sax
.
helpers
.
*
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
xml
.
utils
.
QName
;
import
org
.
apache
.
xml
.
utils
.
NameSpace
;
import
org
.
apache
.
xml
.
utils
.
StringToStringTable
;
import
org
.
apache
.
xpath
.
XPathContext
;
import
org
.
apache
.
xml
.
utils
.
MutableAttrListImpl
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xpath
.
XPathContext
;
import
org
.
apache
.
xalan
.
res
.
XSLTErrorResources
;
import
org
.
apache
.
xalan
.
extensions
.
ExtensionHandler
;
import
org
.
apache
.
xalan
.
extensions
.
ExtensionsTable
;
import
org
.
apache
.
xalan
.
transformer
.
TransformerImpl
;
import
javax
.
xml
.
transform
.
TransformerException
;
import
org
.
apache
.
xml
.
dtm
.
DTM
;
public
class
ElemExtensionCall
extends
ElemLiteralResult
{
String
m_extns
;
String
m_lang
;
String
m_srcURL
;
String
m_scriptSrc
;
ElemExtensionDecl
m_decl
=
null
;
public
int
getXSLToken
(
)
{
return
Constants
.
ELEMNAME_EXTENSIONCALL
;
}
public
void
compose
(
StylesheetRoot
sroot
)
throws
TransformerException
{
super
.
compose
(
sroot
)
;
m_extns
=
this
.
getNamespace
(
)
;
m_decl
=
getElemExtensionDecl
(
sroot
,
m_extns
)
;
if
(
m_decl
==
null
)
sroot
.
getExtensionNamespacesManager
(
)
.
registerExtension
(
m_extns
)
;
}
private
ElemExtensionDecl
getElemExtensionDecl
(
StylesheetRoot
stylesheet
,
String
namespace
)
{
ElemExtensionDecl
decl
=
null
;
int
n
=
stylesheet
.
getGlobalImportCount
(
)
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
Stylesheet
imported
=
stylesheet
.
getGlobalImport
(
i
)
;
for
(
ElemTemplateElement
child
=
imported
.
getFirstChildElem
(
)
;
child
!=
null
;
child
=
child
.
getNextSiblingElem
(
)
)
{
if
(
Constants
.
ELEMNAME_EXTENSIONDECL
==
child
.
getXSLToken
(
)
)
{
decl
=
(
ElemExtensionDecl
)
child
;
String
prefix
=
decl
.
getPrefix
(
)
;
String
declNamespace
=
child
.
getNamespaceForPrefix
(
prefix
)
;
if
(
namespace
.
equals
(
declNamespace
)
)
{
return
decl
;
}
}
}
}
return
decl
;
}
public
void
executeFallbacks
(
TransformerImpl
transformer
)
throws
TransformerException
{
for
(
ElemTemplateElement
child
=
m_firstChild
;
child
!=
null
;
child
=
child
.
m_nextSibling
)
{
if
(
child
.
getXSLToken
(
)
==
Constants
.
ELEMNAME_FALLBACK
)
{
try
{
transformer
.
pushElemTemplateElement
(
child
)
;
(
(
ElemFallback
)
child
)
.
executeFallback
(
transformer
)
;
}
finally
{
transformer
.
popElemTemplateElement
(
)
;
}
}
}
}
public
void
execute
(
TransformerImpl
transformer
)
throws
TransformerException
{
try
{
transformer
.
getResultTreeHandler
(
)
.
flushPending
(
)
;
ExtensionsTable
etable
=
transformer
.
getExtensionsTable
(
)
;
ExtensionHandler
nsh
=
etable
.
get
(
m_extns
)
;
if
(
null
==
nsh
)
{
executeFallbacks
(
transformer
)
;
return
;
}
try
{
nsh
.
processElement
(
this
.
getLocalName
(
)
,
this
,
transformer
,
getStylesheet
(
)
,
this
)
;
}
catch
(
Exception
e
)
{
String
msg
=
e
.
getMessage
(
)
;
TransformerException
te
;
if
(
e
instanceof
TransformerException
)
{
te
=
(
TransformerException
)
e
;
}
else
{
if
(
null
!=
msg
)
te
=
new
TransformerException
(
e
)
;
else
te
=
new
TransformerException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_UNKNOWN_ERROR_CALLING_EXTENSION
,
null
)
,
e
)
;
}
if
(
null
==
te
.
getLocator
(
)
)
te
.
setLocator
(
this
)
;
if
(
null
!=
msg
)
{
if
(
msg
.
indexOf
(
"fatal"
)
>=
0
)
{
transformer
.
getErrorListener
(
)
.
fatalError
(
te
)
;
}
else
if
(
e
instanceof
RuntimeException
)
transformer
.
getErrorListener
(
)
.
error
(
te
)
;
else
transformer
.
getErrorListener
(
)
.
warning
(
te
)
;
}
else
transformer
.
getErrorListener
(
)
.
error
(
te
)
;
executeFallbacks
(
transformer
)
;
}
}
catch
(
org
.
xml
.
sax
.
SAXException
se
)
{
transformer
.
getErrorListener
(
)
.
fatalError
(
new
TransformerException
(
se
)
)
;
}
}
public
String
getAttribute
(
String
rawName
)
{
AVT
avt
=
getLiteralResultAttribute
(
rawName
)
;
if
(
(
null
!=
avt
)
&&
avt
.
getRawName
(
)
.
equals
(
rawName
)
)
{
return
avt
.
getSimpleString
(
)
;
}
return
null
;
}
public
String
getAttribute
(
String
rawName
,
org
.
w3c
.
dom
.
Node
sourceNode
,
TransformerImpl
transformer
)
throws
TransformerException
{
AVT
avt
=
getLiteralResultAttribute
(
rawName
)
;
if
(
(
null
!=
avt
)
&&
avt
.
getRawName
(
)
.
equals
(
rawName
)
)
{
XPathContext
xctxt
=
transformer
.
getXPathContext
(
)
;
return
avt
.
evaluate
(
xctxt
,
xctxt
.
getDTMHandleFromNode
(
sourceNode
)
,
this
)
;
}
return
null
;
}
protected
boolean
accept
(
XSLTVisitor
visitor
)
{
return
visitor
.
visitExtensionElement
(
this
)
;
}
}
