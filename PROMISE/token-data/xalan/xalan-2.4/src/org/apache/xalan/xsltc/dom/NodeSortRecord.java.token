package
org
.
apache
.
xalan
.
xsltc
.
dom
;
import
java
.
util
.
Vector
;
import
java
.
text
.
Collator
;
import
java
.
text
.
CollationKey
;
import
org
.
apache
.
xalan
.
xsltc
.
DOM
;
import
org
.
apache
.
xalan
.
xsltc
.
runtime
.
AbstractTranslet
;
public
abstract
class
NodeSortRecord
{
public
static
int
COMPARE_STRING
=
0
;
public
static
int
COMPARE_NUMERIC
=
1
;
public
static
int
COMPARE_ASCENDING
=
0
;
public
static
int
COMPARE_DESCENDING
=
1
;
protected
static
Collator
_collator
=
Collator
.
getInstance
(
)
;
protected
int
_levels
=
1
;
protected
int
[
]
_compareType
;
protected
int
[
]
_sortOrder
;
private
AbstractTranslet
_translet
=
null
;
private
DOM
_dom
=
null
;
private
int
_node
;
private
int
_last
=
0
;
private
int
_scanned
=
0
;
private
Object
[
]
_values
;
public
NodeSortRecord
(
int
node
)
{
_node
=
node
;
}
public
NodeSortRecord
(
)
{
this
(
0
)
;
}
public
final
void
initialize
(
int
node
,
int
last
,
DOM
dom
,
AbstractTranslet
translet
,
int
[
]
order
,
int
[
]
type
)
{
_dom
=
dom
;
_node
=
node
;
_last
=
last
;
_translet
=
translet
;
_scanned
=
0
;
_levels
=
order
.
length
;
_sortOrder
=
order
;
_compareType
=
type
;
_values
=
new
Object
[
_levels
]
;
}
public
final
int
getNode
(
)
{
return
_node
;
}
public
final
int
compareDocOrder
(
NodeSortRecord
other
)
{
return
_node
-
other
.
_node
;
}
private
final
CollationKey
stringValue
(
int
level
)
{
if
(
_scanned
<=
level
)
{
final
String
str
=
extractValueFromDOM
(
_dom
,
_node
,
level
,
_translet
,
_last
)
;
final
CollationKey
key
=
_collator
.
getCollationKey
(
str
)
;
_values
[
_scanned
++
]
=
key
;
return
(
key
)
;
}
return
(
(
CollationKey
)
_values
[
level
]
)
;
}
private
final
Double
numericValue
(
int
level
)
{
if
(
_scanned
<=
level
)
{
final
String
str
=
extractValueFromDOM
(
_dom
,
_node
,
level
,
_translet
,
_last
)
;
Double
num
;
try
{
num
=
new
Double
(
str
)
;
}
catch
(
NumberFormatException
e
)
{
num
=
new
Double
(
Double
.
NEGATIVE_INFINITY
)
;
}
_values
[
_scanned
++
]
=
num
;
return
(
num
)
;
}
return
(
(
Double
)
_values
[
level
]
)
;
}
public
int
compareTo
(
NodeSortRecord
other
)
{
int
cmp
,
level
;
for
(
level
=
0
;
level
<
_levels
;
level
++
)
{
if
(
_compareType
[
level
]
==
COMPARE_NUMERIC
)
{
final
Double
our
=
numericValue
(
level
)
;
final
Double
their
=
other
.
numericValue
(
level
)
;
cmp
=
our
.
compareTo
(
their
)
;
}
else
{
final
CollationKey
our
=
stringValue
(
level
)
;
final
CollationKey
their
=
other
.
stringValue
(
level
)
;
cmp
=
our
.
compareTo
(
their
)
;
}
if
(
cmp
!=
0
)
{
return
_sortOrder
[
level
]
==
COMPARE_DESCENDING
?
0
-
cmp
:
cmp
;
}
}
return
(
_node
-
other
.
_node
)
;
}
public
Collator
getCollator
(
)
{
return
_collator
;
}
public
abstract
String
extractValueFromDOM
(
DOM
dom
,
int
current
,
int
level
,
AbstractTranslet
translet
,
int
last
)
;
}
