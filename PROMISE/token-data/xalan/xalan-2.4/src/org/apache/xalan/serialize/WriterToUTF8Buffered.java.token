package
org
.
apache
.
xalan
.
serialize
;
import
java
.
io
.
*
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xalan
.
res
.
XSLTErrorResources
;
public
final
class
WriterToUTF8Buffered
extends
Writer
{
private
OutputStream
m_os
;
private
byte
buf
[
]
;
private
int
count
;
public
WriterToUTF8Buffered
(
OutputStream
out
)
throws
UnsupportedEncodingException
{
this
(
out
,
8
*
1024
)
;
}
public
WriterToUTF8Buffered
(
final
OutputStream
out
,
final
int
size
)
{
m_os
=
out
;
if
(
size
<=
0
)
{
throw
new
IllegalArgumentException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_BUFFER_SIZE_LESSTHAN_ZERO
,
null
)
)
;
}
buf
=
new
byte
[
size
]
;
count
=
0
;
}
public
void
write
(
final
int
c
)
throws
IOException
{
if
(
c
<
0x80
)
{
if
(
count
>=
buf
.
length
)
flushBuffer
(
)
;
buf
[
count
++
]
=
(
byte
)
(
c
)
;
}
else
if
(
c
<
0x800
)
{
if
(
count
+
1
>=
buf
.
length
)
flushBuffer
(
)
;
buf
[
count
++
]
=
(
byte
)
(
0xc0
+
(
c
>
>
6
)
)
;
buf
[
count
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
if
(
count
+
2
>=
buf
.
length
)
flushBuffer
(
)
;
buf
[
count
++
]
=
(
byte
)
(
0xe0
+
(
c
>
>
12
)
)
;
buf
[
count
++
]
=
(
byte
)
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
buf
[
count
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
private
final
void
writeDirect
(
final
char
chars
[
]
,
final
int
start
,
final
int
length
)
throws
java
.
io
.
IOException
{
final
OutputStream
os
=
m_os
;
int
n
=
length
+
start
;
for
(
int
i
=
start
;
i
<
n
;
i
++
)
{
final
char
c
=
chars
[
i
]
;
if
(
c
<
0x80
)
os
.
write
(
c
)
;
else
if
(
c
<
0x800
)
{
os
.
write
(
0xc0
+
(
c
>
>
6
)
)
;
os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
os
.
write
(
0xe0
+
(
c
>
>
12
)
)
;
os
.
write
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
}
private
final
void
writeDirect
(
final
String
s
)
throws
IOException
{
final
int
n
=
s
.
length
(
)
;
final
OutputStream
os
=
m_os
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
final
char
c
=
s
.
charAt
(
i
)
;
if
(
c
<
0x80
)
os
.
write
(
c
)
;
else
if
(
c
<
0x800
)
{
os
.
write
(
0xc0
+
(
c
>
>
6
)
)
;
os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
os
.
write
(
0xe0
+
(
c
>
>
12
)
)
;
os
.
write
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
os
.
write
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
}
public
void
write
(
final
char
chars
[
]
,
final
int
start
,
final
int
length
)
throws
java
.
io
.
IOException
{
int
lengthx3
=
(
length
<<
1
)
+
length
;
if
(
lengthx3
>=
buf
.
length
)
{
flushBuffer
(
)
;
writeDirect
(
chars
,
start
,
length
)
;
return
;
}
if
(
lengthx3
>
buf
.
length
-
count
)
{
flushBuffer
(
)
;
}
final
OutputStream
os
=
m_os
;
int
n
=
length
+
start
;
for
(
int
i
=
start
;
i
<
n
;
i
++
)
{
final
char
c
=
chars
[
i
]
;
if
(
c
<
0x80
)
buf
[
count
++
]
=
(
byte
)
(
c
)
;
else
if
(
c
<
0x800
)
{
buf
[
count
++
]
=
(
byte
)
(
0xc0
+
(
c
>
>
6
)
)
;
buf
[
count
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
buf
[
count
++
]
=
(
byte
)
(
0xe0
+
(
c
>
>
12
)
)
;
buf
[
count
++
]
=
(
byte
)
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
buf
[
count
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
}
public
void
write
(
final
String
s
)
throws
IOException
{
final
int
length
=
s
.
length
(
)
;
int
lengthx3
=
(
length
<<
1
)
+
length
;
if
(
lengthx3
>=
buf
.
length
)
{
flushBuffer
(
)
;
writeDirect
(
s
)
;
return
;
}
if
(
lengthx3
>
buf
.
length
-
count
)
{
flushBuffer
(
)
;
}
final
OutputStream
os
=
m_os
;
for
(
int
i
=
0
;
i
<
length
;
i
++
)
{
final
char
c
=
s
.
charAt
(
i
)
;
if
(
c
<
0x80
)
buf
[
count
++
]
=
(
byte
)
(
c
)
;
else
if
(
c
<
0x800
)
{
buf
[
count
++
]
=
(
byte
)
(
0xc0
+
(
c
>
>
6
)
)
;
buf
[
count
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
buf
[
count
++
]
=
(
byte
)
(
0xe0
+
(
c
>
>
12
)
)
;
buf
[
count
++
]
=
(
byte
)
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
buf
[
count
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
}
public
void
flushBuffer
(
)
throws
IOException
{
if
(
count
>
0
)
{
m_os
.
write
(
buf
,
0
,
count
)
;
count
=
0
;
}
}
public
void
flush
(
)
throws
java
.
io
.
IOException
{
flushBuffer
(
)
;
m_os
.
flush
(
)
;
}
public
void
close
(
)
throws
java
.
io
.
IOException
{
flushBuffer
(
)
;
m_os
.
close
(
)
;
}
public
OutputStream
getOutputStream
(
)
{
return
m_os
;
}
}
