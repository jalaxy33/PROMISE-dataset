package
org
.
apache
.
xalan
.
lib
;
import
java
.
util
.
Date
;
import
java
.
util
.
TimeZone
;
import
java
.
util
.
Calendar
;
import
java
.
text
.
SimpleDateFormat
;
import
java
.
text
.
DateFormat
;
import
java
.
text
.
ParseException
;
import
org
.
apache
.
xpath
.
objects
.
XString
;
import
org
.
apache
.
xpath
.
objects
.
XNumber
;
import
org
.
apache
.
xpath
.
objects
.
XBoolean
;
import
org
.
apache
.
xpath
.
objects
.
XObject
;
public
class
ExsltDatetime
{
static
final
String
dt
=
"yyyy-MM-dd'T'HH:mm:ss"
;
static
final
String
d
=
"yyyy-MM-dd"
;
static
final
String
gym
=
"yyyy-MM"
;
static
final
String
gy
=
"yyyy"
;
static
final
String
gmd
=
"MM-dd"
;
static
final
String
gm
=
"MM"
;
static
final
String
gd
=
"dd"
;
static
final
String
t
=
"HH:mm:ss"
;
public
static
XString
dateTime
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
Date
datetime
=
cal
.
getTime
(
)
;
SimpleDateFormat
dateFormat
=
new
SimpleDateFormat
(
dt
)
;
StringBuffer
buff
=
new
StringBuffer
(
dateFormat
.
format
(
datetime
)
)
;
int
offset
=
cal
.
get
(
Calendar
.
ZONE_OFFSET
)
+
cal
.
get
(
Calendar
.
DST_OFFSET
)
;
if
(
offset
==
0
)
buff
.
append
(
"Z"
)
;
else
{
int
hrs
=
offset
/
(
60
*
60
*
1000
)
;
int
min
=
offset
%
(
60
*
60
*
1000
)
;
char
posneg
=
hrs
<
0
?
'-'
:
'+'
;
buff
.
append
(
posneg
+
formatDigits
(
hrs
)
+
':'
+
formatDigits
(
min
)
)
;
}
return
new
XString
(
buff
.
toString
(
)
)
;
}
private
static
String
formatDigits
(
int
q
)
{
String
dd
=
String
.
valueOf
(
Math
.
abs
(
q
)
)
;
return
dd
.
length
(
)
==
1
?
'0'
+
dd
:
dd
;
}
public
static
XString
date
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
leader
=
edz
[
0
]
;
String
datetime
=
edz
[
1
]
;
String
zone
=
edz
[
2
]
;
if
(
datetime
==
null
||
zone
==
null
)
return
new
XString
(
""
)
;
String
[
]
formatsIn
=
{
dt
,
d
}
;
String
formatOut
=
d
;
Date
date
=
testFormats
(
datetime
,
formatsIn
)
;
if
(
date
==
null
)
return
new
XString
(
""
)
;
SimpleDateFormat
dateFormat
=
new
SimpleDateFormat
(
formatOut
)
;
dateFormat
.
setLenient
(
false
)
;
String
dateOut
=
dateFormat
.
format
(
date
)
;
if
(
dateOut
.
length
(
)
==
0
)
return
new
XString
(
""
)
;
else
return
new
XString
(
leader
+
dateOut
+
zone
)
;
}
public
static
XString
date
(
)
{
String
datetime
=
dateTime
(
)
.
toString
(
)
;
String
date
=
datetime
.
substring
(
0
,
datetime
.
indexOf
(
"T"
)
)
;
String
zone
=
datetime
.
substring
(
getZoneStart
(
datetime
)
)
;
return
new
XString
(
date
+
zone
)
;
}
public
static
XString
time
(
String
timeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
timeIn
)
;
String
time
=
edz
[
1
]
;
String
zone
=
edz
[
2
]
;
if
(
time
==
null
||
zone
==
null
)
return
new
XString
(
""
)
;
String
[
]
formatsIn
=
{
dt
,
d
}
;
String
formatOut
=
t
;
Date
date
=
testFormats
(
time
,
formatsIn
)
;
if
(
date
==
null
)
return
new
XString
(
""
)
;
SimpleDateFormat
dateFormat
=
new
SimpleDateFormat
(
formatOut
)
;
String
out
=
dateFormat
.
format
(
date
)
;
return
new
XString
(
out
+
zone
)
;
}
public
static
XString
time
(
)
{
String
datetime
=
dateTime
(
)
.
toString
(
)
;
String
time
=
datetime
.
substring
(
datetime
.
indexOf
(
"T"
)
+
1
)
;
String
zone
=
datetime
.
substring
(
getZoneStart
(
datetime
)
)
;
return
new
XString
(
time
+
zone
)
;
}
public
static
XNumber
year
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
boolean
ad
=
edz
[
0
]
.
length
(
)
==
0
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
dt
,
d
,
gym
,
gy
}
;
double
yr
=
getNumber
(
datetime
,
formats
,
Calendar
.
YEAR
)
;
if
(
ad
||
yr
==
Double
.
NaN
)
return
new
XNumber
(
yr
)
;
else
return
new
XNumber
(
-
yr
)
;
}
public
static
XNumber
year
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
YEAR
)
)
;
}
public
static
XNumber
monthInYear
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
dt
,
d
,
gym
}
;
return
new
XNumber
(
getNumber
(
datetime
,
formats
,
Calendar
.
MONTH
)
)
;
}
public
static
XNumber
monthInYear
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
MONTH
)
)
;
}
public
static
XNumber
weekInYear
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
dt
,
d
}
;
return
new
XNumber
(
getNumber
(
datetime
,
formats
,
Calendar
.
WEEK_OF_YEAR
)
)
;
}
public
static
XNumber
weekInYear
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
WEEK_OF_YEAR
)
)
;
}
public
static
XNumber
dayInYear
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
dt
,
d
}
;
return
new
XNumber
(
getNumber
(
datetime
,
formats
,
Calendar
.
DAY_OF_YEAR
)
)
;
}
public
static
XNumber
dayInYear
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
DAY_OF_YEAR
)
)
;
}
public
static
XNumber
dayInMonth
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
String
[
]
formats
=
{
dt
,
d
,
gmd
,
gd
}
;
double
day
=
getNumber
(
datetime
,
formats
,
Calendar
.
DAY_OF_MONTH
)
;
return
new
XNumber
(
day
)
;
}
public
static
XNumber
dayInMonth
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
DAY_OF_MONTH
)
)
;
}
public
static
XNumber
dayOfWeekInMonth
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
dt
,
d
}
;
return
new
XNumber
(
getNumber
(
datetime
,
formats
,
Calendar
.
DAY_OF_WEEK_IN_MONTH
)
)
;
}
public
static
XNumber
dayOfWeekInMonth
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
DAY_OF_WEEK_IN_MONTH
)
)
;
}
public
static
XNumber
dayInWeek
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
dt
,
d
}
;
return
new
XNumber
(
getNumber
(
datetime
,
formats
,
Calendar
.
DAY_OF_WEEK
)
)
;
}
public
static
XNumber
dayInWeek
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
DAY_OF_WEEK
)
)
;
}
public
static
XNumber
hourInDay
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
d
,
t
}
;
return
new
XNumber
(
getNumber
(
datetime
,
formats
,
Calendar
.
HOUR_OF_DAY
)
)
;
}
public
static
XNumber
hourInDay
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
HOUR_OF_DAY
)
)
;
}
public
static
XNumber
minuteInHour
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
dt
,
t
}
;
return
new
XNumber
(
getNumber
(
datetime
,
formats
,
Calendar
.
MINUTE
)
)
;
}
public
static
XNumber
minuteInHour
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
MINUTE
)
)
;
}
public
static
XNumber
secondInMinute
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
dt
,
t
}
;
return
new
XNumber
(
getNumber
(
datetime
,
formats
,
Calendar
.
SECOND
)
)
;
}
public
static
XNumber
secondInMinute
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
return
new
XNumber
(
cal
.
get
(
Calendar
.
SECOND
)
)
;
}
public
static
XObject
leapYear
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XNumber
(
Double
.
NaN
)
;
String
[
]
formats
=
{
dt
,
d
,
gym
,
gy
}
;
double
dbl
=
getNumber
(
datetime
,
formats
,
Calendar
.
YEAR
)
;
if
(
dbl
==
Double
.
NaN
)
return
new
XNumber
(
Double
.
NaN
)
;
int
yr
=
(
int
)
dbl
;
return
new
XBoolean
(
yr
%
400
==
0
||
(
yr
%
100
!=
0
&&
yr
%
4
==
0
)
)
;
}
public
static
XBoolean
leapYear
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
int
yr
=
(
int
)
cal
.
get
(
Calendar
.
YEAR
)
;
return
new
XBoolean
(
yr
%
400
==
0
||
(
yr
%
100
!=
0
&&
yr
%
4
==
0
)
)
;
}
public
static
XString
monthName
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XString
(
""
)
;
String
[
]
formatsIn
=
{
dt
,
d
,
gym
,
gm
}
;
String
formatOut
=
"MMMM"
;
return
new
XString
(
getNameOrAbbrev
(
datetimeIn
,
formatsIn
,
formatOut
)
)
;
}
public
static
XString
monthName
(
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
String
format
=
"MMMM"
;
return
new
XString
(
getNameOrAbbrev
(
format
)
)
;
}
public
static
XString
monthAbbreviation
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XString
(
""
)
;
String
[
]
formatsIn
=
{
dt
,
d
,
gym
,
gm
}
;
String
formatOut
=
"MMM"
;
return
new
XString
(
getNameOrAbbrev
(
datetimeIn
,
formatsIn
,
formatOut
)
)
;
}
public
static
XString
monthAbbreviation
(
)
{
String
format
=
"MMM"
;
return
new
XString
(
getNameOrAbbrev
(
format
)
)
;
}
public
static
XString
dayName
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XString
(
""
)
;
String
[
]
formatsIn
=
{
dt
,
d
}
;
String
formatOut
=
"EEEE"
;
return
new
XString
(
getNameOrAbbrev
(
datetimeIn
,
formatsIn
,
formatOut
)
)
;
}
public
static
XString
dayName
(
)
{
String
format
=
"EEEE"
;
return
new
XString
(
getNameOrAbbrev
(
format
)
)
;
}
public
static
XString
dayAbbreviation
(
String
datetimeIn
)
throws
ParseException
{
String
[
]
edz
=
getEraDatetimeZone
(
datetimeIn
)
;
String
datetime
=
edz
[
1
]
;
if
(
datetime
==
null
)
return
new
XString
(
""
)
;
String
[
]
formatsIn
=
{
dt
,
d
}
;
String
formatOut
=
"EEE"
;
return
new
XString
(
getNameOrAbbrev
(
datetimeIn
,
formatsIn
,
formatOut
)
)
;
}
public
static
XString
dayAbbreviation
(
)
{
String
format
=
"EEE"
;
return
new
XString
(
getNameOrAbbrev
(
format
)
)
;
}
private
static
String
[
]
getEraDatetimeZone
(
String
in
)
{
String
leader
=
""
;
String
datetime
=
in
;
String
zone
=
""
;
if
(
in
.
charAt
(
0
)
==
'-'
)
{
leader
=
"-"
;
datetime
=
in
.
substring
(
1
)
;
}
int
z
=
getZoneStart
(
datetime
)
;
if
(
z
>
0
)
{
zone
=
datetime
.
substring
(
z
)
;
datetime
=
datetime
.
substring
(
0
,
z
)
;
}
else
if
(
z
==
-
2
)
zone
=
null
;
return
new
String
[
]
{
leader
,
datetime
,
zone
}
;
}
private
static
int
getZoneStart
(
String
datetime
)
{
if
(
datetime
.
indexOf
(
"Z"
)
==
datetime
.
length
(
)
-
1
)
return
datetime
.
indexOf
(
"Z"
)
;
else
if
(
(
datetime
.
lastIndexOf
(
"-"
)
==
datetime
.
length
(
)
-
6
&&
datetime
.
charAt
(
datetime
.
length
(
)
-
3
)
==
':'
)
||
(
datetime
.
indexOf
(
"+"
)
==
datetime
.
length
(
)
-
6
)
)
{
try
{
SimpleDateFormat
dateFormat
=
new
SimpleDateFormat
(
"HH:mm"
)
;
dateFormat
.
setLenient
(
false
)
;
Date
d
=
dateFormat
.
parse
(
datetime
.
substring
(
datetime
.
length
(
)
-
5
)
)
;
return
datetime
.
length
(
)
-
6
;
}
catch
(
ParseException
pe
)
{
System
.
out
.
println
(
"ParseException "
+
pe
.
getErrorOffset
(
)
)
;
return
-
2
;
}
}
return
-
1
;
}
private
static
Date
testFormats
(
String
in
,
String
[
]
formats
)
throws
ParseException
{
for
(
int
i
=
0
;
i
<
formats
.
length
;
i
++
)
{
try
{
SimpleDateFormat
dateFormat
=
new
SimpleDateFormat
(
formats
[
i
]
)
;
dateFormat
.
setLenient
(
false
)
;
return
dateFormat
.
parse
(
in
)
;
}
catch
(
ParseException
pe
)
{
if
(
pe
.
getErrorOffset
(
)
<
in
.
length
(
)
)
return
null
;
}
}
return
null
;
}
private
static
double
getNumber
(
String
in
,
String
[
]
formats
,
int
calField
)
throws
ParseException
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
cal
.
setLenient
(
false
)
;
Date
date
=
testFormats
(
in
,
formats
)
;
if
(
date
==
null
)
return
Double
.
NaN
;
cal
.
setTime
(
date
)
;
return
cal
.
get
(
calField
)
;
}
private
static
String
getNameOrAbbrev
(
String
in
,
String
[
]
formatsIn
,
String
formatOut
)
throws
ParseException
{
for
(
int
i
=
0
;
i
<
formatsIn
.
length
;
i
++
)
{
try
{
SimpleDateFormat
dateFormat
=
new
SimpleDateFormat
(
formatsIn
[
i
]
)
;
dateFormat
.
setLenient
(
false
)
;
Date
dt
=
dateFormat
.
parse
(
in
)
;
dateFormat
.
applyPattern
(
formatOut
)
;
return
dateFormat
.
format
(
dt
)
;
}
catch
(
ParseException
pe
)
{
if
(
pe
.
getErrorOffset
(
)
<
in
.
length
(
)
)
return
""
;
}
}
return
""
;
}
private
static
String
getNameOrAbbrev
(
String
format
)
{
Calendar
cal
=
Calendar
.
getInstance
(
)
;
SimpleDateFormat
dateFormat
=
new
SimpleDateFormat
(
format
)
;
return
dateFormat
.
format
(
cal
.
getTime
(
)
)
;
}
}
