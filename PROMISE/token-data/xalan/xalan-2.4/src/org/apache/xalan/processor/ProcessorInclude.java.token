package
org
.
apache
.
xalan
.
processor
;
import
org
.
apache
.
xml
.
utils
.
TreeWalker
;
import
org
.
apache
.
xalan
.
templates
.
Stylesheet
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xalan
.
res
.
XSLTErrorResources
;
import
javax
.
xml
.
transform
.
TransformerException
;
import
org
.
xml
.
sax
.
Attributes
;
import
org
.
xml
.
sax
.
XMLReader
;
import
org
.
xml
.
sax
.
InputSource
;
import
org
.
xml
.
sax
.
EntityResolver
;
import
java
.
net
.
URL
;
import
java
.
io
.
IOException
;
import
org
.
xml
.
sax
.
helpers
.
XMLReaderFactory
;
import
javax
.
xml
.
transform
.
URIResolver
;
import
javax
.
xml
.
transform
.
stream
.
StreamSource
;
import
javax
.
xml
.
transform
.
dom
.
DOMSource
;
import
javax
.
xml
.
transform
.
sax
.
SAXSource
;
import
javax
.
xml
.
transform
.
stream
.
StreamSource
;
import
javax
.
xml
.
transform
.
Source
;
import
javax
.
xml
.
transform
.
TransformerException
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
apache
.
xml
.
utils
.
SystemIDResolver
;
class
ProcessorInclude
extends
XSLTElementProcessor
{
private
String
m_href
=
null
;
public
String
getHref
(
)
{
return
m_href
;
}
public
void
setHref
(
String
baseIdent
)
{
m_href
=
baseIdent
;
}
protected
int
getStylesheetType
(
)
{
return
StylesheetHandler
.
STYPE_INCLUDE
;
}
protected
int
getStylesheetInclErr
(
)
{
return
XSLTErrorResources
.
ER_STYLESHEET_INCLUDES_ITSELF
;
}
public
void
startElement
(
StylesheetHandler
handler
,
String
uri
,
String
localName
,
String
rawName
,
Attributes
attributes
)
throws
org
.
xml
.
sax
.
SAXException
{
setPropertiesFromAttributes
(
handler
,
rawName
,
attributes
,
this
)
;
try
{
String
hrefUrl
=
SystemIDResolver
.
getAbsoluteURI
(
getHref
(
)
,
handler
.
getBaseIdentifier
(
)
)
;
if
(
handler
.
importStackContains
(
hrefUrl
)
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
XSLMessages
.
createMessage
(
getStylesheetInclErr
(
)
,
new
Object
[
]
{
hrefUrl
}
)
)
;
}
handler
.
pushImportURL
(
hrefUrl
)
;
int
savedStylesheetType
=
handler
.
getStylesheetType
(
)
;
handler
.
setStylesheetType
(
this
.
getStylesheetType
(
)
)
;
handler
.
pushNewNamespaceSupport
(
)
;
try
{
parse
(
handler
,
uri
,
localName
,
rawName
,
attributes
)
;
}
finally
{
handler
.
setStylesheetType
(
savedStylesheetType
)
;
handler
.
popImportURL
(
)
;
handler
.
popNamespaceSupport
(
)
;
}
}
catch
(
TransformerException
te
)
{
handler
.
error
(
te
.
getMessage
(
)
,
te
)
;
}
}
protected
void
parse
(
StylesheetHandler
handler
,
String
uri
,
String
localName
,
String
rawName
,
Attributes
attributes
)
throws
org
.
xml
.
sax
.
SAXException
{
TransformerFactoryImpl
processor
=
handler
.
getStylesheetProcessor
(
)
;
URIResolver
uriresolver
=
processor
.
getURIResolver
(
)
;
try
{
Source
source
=
null
;
if
(
null
!=
uriresolver
)
{
source
=
uriresolver
.
resolve
(
getHref
(
)
,
handler
.
getBaseIdentifier
(
)
)
;
if
(
null
!=
source
&&
source
instanceof
DOMSource
)
{
Node
node
=
(
(
DOMSource
)
source
)
.
getNode
(
)
;
String
systemId
=
source
.
getSystemId
(
)
;
if
(
systemId
==
null
)
{
systemId
=
SystemIDResolver
.
getAbsoluteURI
(
getHref
(
)
,
handler
.
getBaseIdentifier
(
)
)
;
}
TreeWalker
walker
=
new
TreeWalker
(
handler
,
new
org
.
apache
.
xpath
.
DOM2Helper
(
)
,
systemId
)
;
try
{
walker
.
traverse
(
node
)
;
}
catch
(
org
.
xml
.
sax
.
SAXException
se
)
{
throw
new
TransformerException
(
se
)
;
}
return
;
}
}
if
(
null
==
source
)
{
String
absURL
=
SystemIDResolver
.
getAbsoluteURI
(
getHref
(
)
,
handler
.
getBaseIdentifier
(
)
)
;
source
=
new
StreamSource
(
absURL
)
;
}
XMLReader
reader
=
null
;
if
(
source
instanceof
SAXSource
)
{
SAXSource
saxSource
=
(
SAXSource
)
source
;
reader
=
saxSource
.
getXMLReader
(
)
;
}
boolean
isUserReader
=
(
reader
!=
null
)
;
InputSource
inputSource
=
SAXSource
.
sourceToInputSource
(
source
)
;
if
(
null
==
reader
)
{
try
{
javax
.
xml
.
parsers
.
SAXParserFactory
factory
=
javax
.
xml
.
parsers
.
SAXParserFactory
.
newInstance
(
)
;
factory
.
setNamespaceAware
(
true
)
;
javax
.
xml
.
parsers
.
SAXParser
jaxpParser
=
factory
.
newSAXParser
(
)
;
reader
=
jaxpParser
.
getXMLReader
(
)
;
}
catch
(
javax
.
xml
.
parsers
.
ParserConfigurationException
ex
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
ex
)
;
}
catch
(
javax
.
xml
.
parsers
.
FactoryConfigurationError
ex1
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
ex1
.
toString
(
)
)
;
}
catch
(
NoSuchMethodError
ex2
)
{
}
catch
(
AbstractMethodError
ame
)
{
}
}
if
(
null
==
reader
)
reader
=
XMLReaderFactory
.
createXMLReader
(
)
;
if
(
null
!=
reader
)
{
reader
.
setContentHandler
(
handler
)
;
try
{
if
(
!
isUserReader
)
reader
.
setFeature
(
"http://apache.org/xml/features/validation/dynamic"
,
true
)
;
}
catch
(
org
.
xml
.
sax
.
SAXException
se
)
{
}
handler
.
pushBaseIndentifier
(
inputSource
.
getSystemId
(
)
)
;
try
{
reader
.
parse
(
inputSource
)
;
}
finally
{
handler
.
popBaseIndentifier
(
)
;
}
}
}
catch
(
IOException
ioe
)
{
handler
.
error
(
XSLTErrorResources
.
ER_IOEXCEPTION
,
new
Object
[
]
{
getHref
(
)
}
,
ioe
)
;
}
catch
(
TransformerException
te
)
{
handler
.
error
(
te
.
getMessage
(
)
,
te
)
;
}
}
}
