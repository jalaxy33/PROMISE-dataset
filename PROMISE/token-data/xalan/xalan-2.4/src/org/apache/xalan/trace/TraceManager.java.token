package
org
.
apache
.
xalan
.
trace
;
import
java
.
util
.
Vector
;
import
java
.
util
.
TooManyListenersException
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
apache
.
xml
.
utils
.
QName
;
import
org
.
apache
.
xalan
.
templates
.
ElemTemplateElement
;
import
org
.
apache
.
xalan
.
transformer
.
TransformerImpl
;
import
org
.
apache
.
xpath
.
objects
.
XObject
;
import
org
.
apache
.
xpath
.
XPath
;
public
class
TraceManager
{
private
TransformerImpl
m_transformer
;
public
TraceManager
(
TransformerImpl
transformer
)
{
m_transformer
=
transformer
;
}
private
Vector
m_traceListeners
=
null
;
public
void
addTraceListener
(
TraceListener
tl
)
throws
TooManyListenersException
{
TransformerImpl
.
S_DEBUG
=
true
;
if
(
null
==
m_traceListeners
)
m_traceListeners
=
new
Vector
(
)
;
m_traceListeners
.
addElement
(
tl
)
;
}
public
void
removeTraceListener
(
TraceListener
tl
)
{
if
(
null
!=
m_traceListeners
)
{
m_traceListeners
.
removeElement
(
tl
)
;
}
}
public
void
fireGenerateEvent
(
GenerateEvent
te
)
{
if
(
null
!=
m_traceListeners
)
{
int
nListeners
=
m_traceListeners
.
size
(
)
;
for
(
int
i
=
0
;
i
<
nListeners
;
i
++
)
{
TraceListener
tl
=
(
TraceListener
)
m_traceListeners
.
elementAt
(
i
)
;
tl
.
generated
(
te
)
;
}
}
}
public
boolean
hasTraceListeners
(
)
{
return
(
null
!=
m_traceListeners
)
;
}
public
void
fireTraceEvent
(
ElemTemplateElement
styleNode
)
{
if
(
hasTraceListeners
(
)
)
{
int
sourceNode
=
m_transformer
.
getXPathContext
(
)
.
getCurrentNode
(
)
;
Node
source
=
m_transformer
.
getXPathContext
(
)
.
getDTM
(
sourceNode
)
.
getNode
(
sourceNode
)
;
fireTraceEvent
(
new
TracerEvent
(
m_transformer
,
source
,
m_transformer
.
getMode
(
)
,
styleNode
)
)
;
}
}
public
void
fireTraceEndEvent
(
ElemTemplateElement
styleNode
)
{
if
(
hasTraceListeners
(
)
)
{
int
sourceNode
=
m_transformer
.
getXPathContext
(
)
.
getCurrentNode
(
)
;
Node
source
=
m_transformer
.
getXPathContext
(
)
.
getDTM
(
sourceNode
)
.
getNode
(
sourceNode
)
;
fireTraceEndEvent
(
new
TracerEvent
(
m_transformer
,
source
,
m_transformer
.
getMode
(
)
,
styleNode
)
)
;
}
}
public
void
fireTraceEndEvent
(
TracerEvent
te
)
{
if
(
hasTraceListeners
(
)
)
{
int
nListeners
=
m_traceListeners
.
size
(
)
;
for
(
int
i
=
0
;
i
<
nListeners
;
i
++
)
{
TraceListener
tl
=
(
TraceListener
)
m_traceListeners
.
elementAt
(
i
)
;
if
(
tl
instanceof
TraceListenerEx2
)
{
(
(
TraceListenerEx2
)
tl
)
.
traceEnd
(
te
)
;
}
}
}
}
public
void
fireTraceEvent
(
TracerEvent
te
)
{
if
(
hasTraceListeners
(
)
)
{
int
nListeners
=
m_traceListeners
.
size
(
)
;
for
(
int
i
=
0
;
i
<
nListeners
;
i
++
)
{
TraceListener
tl
=
(
TraceListener
)
m_traceListeners
.
elementAt
(
i
)
;
tl
.
trace
(
te
)
;
}
}
}
public
void
fireSelectedEvent
(
int
sourceNode
,
ElemTemplateElement
styleNode
,
String
attributeName
,
XPath
xpath
,
XObject
selection
)
throws
javax
.
xml
.
transform
.
TransformerException
{
if
(
hasTraceListeners
(
)
)
{
Node
source
=
m_transformer
.
getXPathContext
(
)
.
getDTM
(
sourceNode
)
.
getNode
(
sourceNode
)
;
fireSelectedEvent
(
new
SelectionEvent
(
m_transformer
,
source
,
styleNode
,
attributeName
,
xpath
,
selection
)
)
;
}
}
public
void
fireSelectedEndEvent
(
int
sourceNode
,
ElemTemplateElement
styleNode
,
String
attributeName
,
XPath
xpath
,
XObject
selection
)
throws
javax
.
xml
.
transform
.
TransformerException
{
if
(
hasTraceListeners
(
)
)
{
Node
source
=
m_transformer
.
getXPathContext
(
)
.
getDTM
(
sourceNode
)
.
getNode
(
sourceNode
)
;
fireSelectedEndEvent
(
new
EndSelectionEvent
(
m_transformer
,
source
,
styleNode
,
attributeName
,
xpath
,
selection
)
)
;
}
}
public
void
fireSelectedEndEvent
(
EndSelectionEvent
se
)
throws
javax
.
xml
.
transform
.
TransformerException
{
if
(
hasTraceListeners
(
)
)
{
int
nListeners
=
m_traceListeners
.
size
(
)
;
for
(
int
i
=
0
;
i
<
nListeners
;
i
++
)
{
TraceListener
tl
=
(
TraceListener
)
m_traceListeners
.
elementAt
(
i
)
;
if
(
tl
instanceof
TraceListenerEx
)
(
(
TraceListenerEx
)
tl
)
.
selectEnd
(
se
)
;
}
}
}
public
void
fireSelectedEvent
(
SelectionEvent
se
)
throws
javax
.
xml
.
transform
.
TransformerException
{
if
(
hasTraceListeners
(
)
)
{
int
nListeners
=
m_traceListeners
.
size
(
)
;
for
(
int
i
=
0
;
i
<
nListeners
;
i
++
)
{
TraceListener
tl
=
(
TraceListener
)
m_traceListeners
.
elementAt
(
i
)
;
tl
.
selected
(
se
)
;
}
}
}
}
