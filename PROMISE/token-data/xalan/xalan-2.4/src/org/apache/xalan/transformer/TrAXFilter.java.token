package
org
.
apache
.
xalan
.
transformer
;
import
java
.
io
.
IOException
;
import
javax
.
xml
.
transform
.
TransformerException
;
import
org
.
xml
.
sax
.
InputSource
;
import
org
.
xml
.
sax
.
XMLReader
;
import
org
.
xml
.
sax
.
XMLFilter
;
import
org
.
xml
.
sax
.
ContentHandler
;
import
org
.
xml
.
sax
.
EntityResolver
;
import
org
.
xml
.
sax
.
DTDHandler
;
import
org
.
xml
.
sax
.
ext
.
LexicalHandler
;
import
org
.
xml
.
sax
.
helpers
.
XMLFilterImpl
;
import
org
.
xml
.
sax
.
helpers
.
XMLReaderFactory
;
import
javax
.
xml
.
transform
.
Templates
;
import
javax
.
xml
.
transform
.
TransformerConfigurationException
;
import
javax
.
xml
.
transform
.
ErrorListener
;
import
org
.
apache
.
xalan
.
res
.
XSLTErrorResources
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
public
class
TrAXFilter
extends
XMLFilterImpl
{
private
Templates
m_templates
;
private
TransformerImpl
m_transformer
;
public
TrAXFilter
(
Templates
templates
)
throws
TransformerConfigurationException
{
m_templates
=
templates
;
m_transformer
=
(
TransformerImpl
)
templates
.
newTransformer
(
)
;
}
public
void
setParent
(
XMLReader
parent
)
{
super
.
setParent
(
parent
)
;
if
(
null
!=
parent
.
getContentHandler
(
)
)
this
.
setContentHandler
(
parent
.
getContentHandler
(
)
)
;
setupParse
(
)
;
}
public
void
parse
(
InputSource
input
)
throws
org
.
xml
.
sax
.
SAXException
,
IOException
{
if
(
null
==
getParent
(
)
)
{
XMLReader
reader
=
null
;
try
{
javax
.
xml
.
parsers
.
SAXParserFactory
factory
=
javax
.
xml
.
parsers
.
SAXParserFactory
.
newInstance
(
)
;
factory
.
setNamespaceAware
(
true
)
;
javax
.
xml
.
parsers
.
SAXParser
jaxpParser
=
factory
.
newSAXParser
(
)
;
reader
=
jaxpParser
.
getXMLReader
(
)
;
}
catch
(
javax
.
xml
.
parsers
.
ParserConfigurationException
ex
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
ex
)
;
}
catch
(
javax
.
xml
.
parsers
.
FactoryConfigurationError
ex1
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
ex1
.
toString
(
)
)
;
}
catch
(
NoSuchMethodError
ex2
)
{
}
catch
(
AbstractMethodError
ame
)
{
}
XMLReader
parent
;
if
(
reader
==
null
)
parent
=
XMLReaderFactory
.
createXMLReader
(
)
;
else
parent
=
reader
;
try
{
parent
.
setFeature
(
"http://xml.org/sax/features/namespace-prefixes"
,
true
)
;
}
catch
(
org
.
xml
.
sax
.
SAXException
se
)
{
}
setParent
(
parent
)
;
}
else
{
setupParse
(
)
;
}
if
(
null
==
m_transformer
.
getContentHandler
(
)
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_CANNOT_CALL_PARSE
,
null
)
)
;
}
getParent
(
)
.
parse
(
input
)
;
Exception
e
=
m_transformer
.
getExceptionThrown
(
)
;
if
(
null
!=
e
)
{
if
(
e
instanceof
org
.
xml
.
sax
.
SAXException
)
throw
(
org
.
xml
.
sax
.
SAXException
)
e
;
else
throw
new
org
.
xml
.
sax
.
SAXException
(
e
)
;
}
}
public
void
parse
(
String
systemId
)
throws
org
.
xml
.
sax
.
SAXException
,
IOException
{
parse
(
new
InputSource
(
systemId
)
)
;
}
private
void
setupParse
(
)
{
XMLReader
p
=
getParent
(
)
;
if
(
p
==
null
)
{
throw
new
NullPointerException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_NO_PARENT_FOR_FILTER
,
null
)
)
;
}
ContentHandler
ch
=
m_transformer
.
getInputContentHandler
(
)
;
p
.
setContentHandler
(
ch
)
;
if
(
ch
instanceof
EntityResolver
)
p
.
setEntityResolver
(
(
EntityResolver
)
ch
)
;
else
p
.
setEntityResolver
(
this
)
;
if
(
ch
instanceof
DTDHandler
)
p
.
setDTDHandler
(
(
DTDHandler
)
ch
)
;
else
p
.
setDTDHandler
(
this
)
;
ErrorListener
elistener
=
m_transformer
.
getErrorListener
(
)
;
if
(
(
null
!=
elistener
)
&&
(
elistener
instanceof
org
.
xml
.
sax
.
ErrorHandler
)
)
p
.
setErrorHandler
(
(
org
.
xml
.
sax
.
ErrorHandler
)
elistener
)
;
else
p
.
setErrorHandler
(
this
)
;
}
public
void
setContentHandler
(
ContentHandler
handler
)
{
m_transformer
.
setContentHandler
(
handler
)
;
}
public
void
setErrorListener
(
ErrorListener
handler
)
{
m_transformer
.
setErrorListener
(
handler
)
;
}
}
