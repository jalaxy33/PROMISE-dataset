package
org
.
apache
.
xalan
.
res
;
import
java
.
util
.
Locale
;
import
java
.
util
.
ResourceBundle
;
import
java
.
util
.
ListResourceBundle
;
import
java
.
util
.
MissingResourceException
;
import
org
.
apache
.
xpath
.
res
.
XPATHErrorResources
;
public
class
XSLMessages
{
private
Locale
fLocale
=
Locale
.
getDefault
(
)
;
private
static
ResourceBundle
XSLTBundle
=
null
;
private
static
ResourceBundle
XPATHBundle
=
null
;
private
static
final
String
XSLT_ERROR_RESOURCES
=
"org.apache.xalan.res.XSLTErrorResources"
;
private
static
final
String
XPATH_ERROR_RESOURCES
=
"org.apache.xpath.res.XPATHErrorResources"
;
private
static
String
BAD_CODE
=
"BAD_CODE"
;
private
static
String
FORMAT_FAILED
=
"FORMAT_FAILED"
;
public
void
setLocale
(
Locale
locale
)
{
fLocale
=
locale
;
}
public
Locale
getLocale
(
)
{
return
fLocale
;
}
public
static
final
String
createXPATHWarning
(
int
errorCode
,
Object
args
[
]
)
{
if
(
XPATHBundle
==
null
)
XPATHBundle
=
loadResourceBundle
(
XPATH_ERROR_RESOURCES
)
;
ResourceBundle
fResourceBundle
=
XPATHBundle
;
if
(
fResourceBundle
!=
null
)
{
String
msgKey
=
XPATHErrorResources
.
getWarningKey
(
errorCode
)
;
return
createXPATHMsg
(
fResourceBundle
,
msgKey
,
args
)
;
}
else
return
"Could not load any resource bundles."
;
}
public
static
final
String
createXPATHMessage
(
int
errorCode
,
Object
args
[
]
)
{
if
(
XPATHBundle
==
null
)
XPATHBundle
=
loadResourceBundle
(
XPATH_ERROR_RESOURCES
)
;
ResourceBundle
fResourceBundle
=
XPATHBundle
;
if
(
fResourceBundle
!=
null
)
{
String
msgKey
=
XPATHErrorResources
.
getMessageKey
(
errorCode
)
;
return
createXPATHMsg
(
fResourceBundle
,
msgKey
,
args
)
;
}
else
return
"Could not load any resource bundles."
;
}
public
static
final
String
createXPATHMessage
(
String
msgKey
,
Object
args
[
]
)
{
if
(
XPATHBundle
==
null
)
XPATHBundle
=
loadResourceBundle
(
XPATH_ERROR_RESOURCES
)
;
ResourceBundle
fResourceBundle
=
XPATHBundle
;
if
(
fResourceBundle
!=
null
)
{
return
createXPATHMsg
(
fResourceBundle
,
msgKey
,
args
)
;
}
else
return
"Could not load any resource bundles."
;
}
public
static
final
String
createXPATHMsg
(
ResourceBundle
fResourceBundle
,
String
msgKey
,
Object
args
[
]
)
{
String
fmsg
=
null
;
boolean
throwex
=
false
;
String
msg
=
null
;
if
(
msgKey
!=
null
)
msg
=
fResourceBundle
.
getString
(
msgKey
)
;
if
(
msg
==
null
)
{
msg
=
fResourceBundle
.
getString
(
XPATHErrorResources
.
BAD_CODE
)
;
throwex
=
true
;
}
if
(
args
!=
null
)
{
try
{
int
n
=
args
.
length
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
if
(
null
==
args
[
i
]
)
args
[
i
]
=
""
;
}
fmsg
=
java
.
text
.
MessageFormat
.
format
(
msg
,
args
)
;
}
catch
(
Exception
e
)
{
fmsg
=
fResourceBundle
.
getString
(
XPATHErrorResources
.
FORMAT_FAILED
)
;
fmsg
+=
" "
+
msg
;
}
}
else
fmsg
=
msg
;
if
(
throwex
)
{
throw
new
RuntimeException
(
fmsg
)
;
}
return
fmsg
;
}
public
static
final
String
createWarning
(
int
errorCode
,
Object
args
[
]
)
{
if
(
XSLTBundle
==
null
)
XSLTBundle
=
loadResourceBundle
(
XSLT_ERROR_RESOURCES
)
;
ResourceBundle
fResourceBundle
=
XSLTBundle
;
if
(
fResourceBundle
!=
null
)
{
String
msgKey
=
XSLTErrorResources
.
getWarningKey
(
errorCode
)
;
return
createMsg
(
fResourceBundle
,
msgKey
,
args
)
;
}
else
return
"Could not load any resource bundles."
;
}
public
static
final
String
createMessage
(
String
msgKey
,
Object
args
[
]
)
{
if
(
XSLTBundle
==
null
)
XSLTBundle
=
loadResourceBundle
(
XSLT_ERROR_RESOURCES
)
;
ResourceBundle
fResourceBundle
=
XSLTBundle
;
if
(
fResourceBundle
!=
null
)
{
return
createMsg
(
fResourceBundle
,
msgKey
,
args
)
;
}
else
return
"Could not load any resource bundles."
;
}
public
static
final
String
createMessage
(
int
errorCode
,
Object
args
[
]
)
{
if
(
XSLTBundle
==
null
)
XSLTBundle
=
loadResourceBundle
(
XSLT_ERROR_RESOURCES
)
;
ResourceBundle
fResourceBundle
=
XSLTBundle
;
if
(
fResourceBundle
!=
null
)
{
String
msgKey
=
XSLTErrorResources
.
getMessageKey
(
errorCode
)
;
return
createMsg
(
fResourceBundle
,
msgKey
,
args
)
;
}
else
return
"Could not load any resource bundles."
;
}
public
static
final
String
createMsg
(
ResourceBundle
fResourceBundle
,
String
msgKey
,
Object
args
[
]
)
{
String
fmsg
=
null
;
boolean
throwex
=
false
;
String
msg
=
null
;
if
(
msgKey
!=
null
)
msg
=
fResourceBundle
.
getString
(
msgKey
)
;
if
(
msg
==
null
)
{
msg
=
fResourceBundle
.
getString
(
BAD_CODE
)
;
throwex
=
true
;
}
if
(
args
!=
null
)
{
try
{
int
n
=
args
.
length
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
if
(
null
==
args
[
i
]
)
args
[
i
]
=
""
;
}
fmsg
=
java
.
text
.
MessageFormat
.
format
(
msg
,
args
)
;
}
catch
(
Exception
e
)
{
fmsg
=
fResourceBundle
.
getString
(
FORMAT_FAILED
)
;
fmsg
+=
" "
+
msg
;
}
}
else
fmsg
=
msg
;
if
(
throwex
)
{
throw
new
RuntimeException
(
fmsg
)
;
}
return
fmsg
;
}
public
String
createMessage
(
String
bundleName
,
int
errorCode
,
Object
args
[
]
)
throws
Exception
{
boolean
throwex
=
false
;
int
majorCode
;
int
minorCode
;
String
fmsg
=
null
;
ResourceBundle
aResourceBundle
=
null
;
aResourceBundle
=
loadResourceBundle
(
bundleName
)
;
String
msgKey
=
XSLTErrorResources
.
getMessageKey
(
errorCode
)
;
String
msg
=
null
;
if
(
msgKey
!=
null
)
msg
=
aResourceBundle
.
getString
(
msgKey
)
;
if
(
msg
==
null
)
{
msg
=
aResourceBundle
.
getString
(
BAD_CODE
)
;
throwex
=
true
;
}
if
(
args
!=
null
)
{
try
{
int
n
=
args
.
length
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
if
(
null
==
args
[
i
]
)
args
[
i
]
=
""
;
}
fmsg
=
java
.
text
.
MessageFormat
.
format
(
msg
,
args
)
;
}
catch
(
Exception
e
)
{
fmsg
=
aResourceBundle
.
getString
(
FORMAT_FAILED
)
;
fmsg
+=
" "
+
msg
;
}
}
else
fmsg
=
msg
;
if
(
throwex
)
{
throw
new
RuntimeException
(
fmsg
)
;
}
return
fmsg
;
}
public
static
final
ResourceBundle
loadResourceBundle
(
String
className
)
throws
MissingResourceException
{
Locale
locale
=
Locale
.
getDefault
(
)
;
try
{
return
ResourceBundle
.
getBundle
(
className
,
locale
)
;
}
catch
(
MissingResourceException
e
)
{
try
{
return
ResourceBundle
.
getBundle
(
XSLT_ERROR_RESOURCES
,
new
Locale
(
"en"
,
"US"
)
)
;
}
catch
(
MissingResourceException
e2
)
{
throw
new
MissingResourceException
(
"Could not load any resource bundles."
+
className
,
className
,
""
)
;
}
}
}
private
static
final
String
getResourceSuffix
(
Locale
locale
)
{
String
suffix
=
"_"
+
locale
.
getLanguage
(
)
;
String
country
=
locale
.
getCountry
(
)
;
if
(
country
.
equals
(
"TW"
)
)
suffix
+=
"_"
+
country
;
return
suffix
;
}
}
