package
org
.
apache
.
xalan
.
xsltc
.
compiler
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
xalan
.
xsltc
.
compiler
.
util
.
Type
;
import
org
.
apache
.
bcel
.
generic
.
Instruction
;
import
org
.
apache
.
bcel
.
generic
.
*
;
import
org
.
apache
.
bcel
.
classfile
.
Field
;
import
org
.
apache
.
xalan
.
xsltc
.
compiler
.
util
.
*
;
import
org
.
apache
.
xalan
.
xsltc
.
dom
.
Axis
;
class
VariableBase
extends
TopLevelElement
{
protected
QName
_name
;
protected
String
_variable
;
protected
Type
_type
;
protected
boolean
_isLocal
;
protected
LocalVariableGen
_local
;
protected
Instruction
_loadInstruction
;
protected
Expression
_select
;
protected
String
select
;
protected
Vector
_refs
=
new
Vector
(
2
)
;
protected
Vector
_dependencies
=
null
;
protected
boolean
_ignore
=
false
;
protected
int
_weight
=
0
;
public
void
disable
(
)
{
_ignore
=
true
;
}
public
void
addReference
(
VariableRefBase
vref
)
{
_refs
.
addElement
(
vref
)
;
}
public
void
removeReference
(
VariableRefBase
vref
)
{
_refs
.
remove
(
vref
)
;
}
public
void
addDependency
(
VariableBase
other
)
{
if
(
_dependencies
==
null
)
{
_dependencies
=
new
Vector
(
)
;
}
if
(
!
_dependencies
.
contains
(
other
)
)
{
_dependencies
.
addElement
(
other
)
;
}
}
public
Vector
getDependencies
(
)
{
return
_dependencies
;
}
public
void
mapRegister
(
MethodGenerator
methodGen
)
{
if
(
_local
==
null
)
{
final
InstructionList
il
=
methodGen
.
getInstructionList
(
)
;
final
String
name
=
_name
.
getLocalPart
(
)
;
final
org
.
apache
.
bcel
.
generic
.
Type
varType
=
_type
.
toJCType
(
)
;
_local
=
methodGen
.
addLocalVariable2
(
name
,
varType
,
il
.
getEnd
(
)
)
;
}
}
public
void
unmapRegister
(
MethodGenerator
methodGen
)
{
if
(
_refs
.
isEmpty
(
)
&&
(
_local
!=
null
)
)
{
_local
.
setEnd
(
methodGen
.
getInstructionList
(
)
.
getEnd
(
)
)
;
methodGen
.
removeLocalVariable
(
_local
)
;
_refs
=
null
;
_local
=
null
;
}
}
public
Instruction
loadInstruction
(
)
{
final
Instruction
instr
=
_loadInstruction
;
if
(
_loadInstruction
==
null
)
_loadInstruction
=
_type
.
LOAD
(
_local
.
getIndex
(
)
)
;
return
_loadInstruction
;
}
public
Expression
getExpression
(
)
{
return
(
_select
)
;
}
public
String
toString
(
)
{
return
(
"variable("
+
_name
+
")"
)
;
}
public
void
display
(
int
indent
)
{
indent
(
indent
)
;
System
.
out
.
println
(
"Variable "
+
_name
)
;
if
(
_select
!=
null
)
{
indent
(
indent
+
IndentIncrement
)
;
System
.
out
.
println
(
"select "
+
_select
.
toString
(
)
)
;
}
displayContents
(
indent
+
IndentIncrement
)
;
}
public
Type
getType
(
)
{
return
_type
;
}
public
QName
getName
(
)
{
return
_name
;
}
public
String
getVariable
(
)
{
return
_variable
;
}
public
void
setName
(
QName
name
)
{
_name
=
name
;
_variable
=
Util
.
escape
(
name
.
getLocalPart
(
)
)
;
}
public
boolean
isLocal
(
)
{
return
_isLocal
;
}
public
void
parseContents
(
Parser
parser
)
{
String
name
=
getAttribute
(
"name"
)
;
if
(
name
==
null
)
name
=
EMPTYSTRING
;
if
(
name
.
length
(
)
>
0
)
setName
(
parser
.
getQNameIgnoreDefaultNs
(
name
)
)
;
else
reportError
(
this
,
parser
,
ErrorMsg
.
REQUIRED_ATTR_ERR
,
"name"
)
;
VariableBase
other
=
parser
.
lookupVariable
(
_name
)
;
if
(
(
other
!=
null
)
&&
(
other
.
getParent
(
)
==
getParent
(
)
)
)
{
reportError
(
this
,
parser
,
ErrorMsg
.
VARIABLE_REDEF_ERR
,
name
)
;
}
select
=
getAttribute
(
"select"
)
;
if
(
select
.
length
(
)
>
0
)
{
_select
=
getParser
(
)
.
parseExpression
(
this
,
"select"
,
null
)
;
if
(
_select
.
isDummy
(
)
)
{
reportError
(
this
,
parser
,
ErrorMsg
.
REQUIRED_ATTR_ERR
,
"select"
)
;
return
;
}
}
parseChildren
(
parser
)
;
}
public
void
translateValue
(
ClassGenerator
classGen
,
MethodGenerator
methodGen
)
{
if
(
_select
!=
null
)
{
_select
.
translate
(
classGen
,
methodGen
)
;
_select
.
startResetIterator
(
classGen
,
methodGen
)
;
}
else
if
(
hasContents
(
)
)
{
compileResultTree
(
classGen
,
methodGen
)
;
}
else
{
final
ConstantPoolGen
cpg
=
classGen
.
getConstantPool
(
)
;
final
InstructionList
il
=
methodGen
.
getInstructionList
(
)
;
il
.
append
(
new
PUSH
(
cpg
,
Constants
.
EMPTYSTRING
)
)
;
}
}
}
