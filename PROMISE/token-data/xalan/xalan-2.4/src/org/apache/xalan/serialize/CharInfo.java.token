package
org
.
apache
.
xalan
.
serialize
;
import
java
.
util
.
BitSet
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
BufferedReader
;
import
java
.
net
.
*
;
import
java
.
util
.
Hashtable
;
import
org
.
apache
.
xml
.
utils
.
CharKey
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xalan
.
res
.
XSLTErrorResources
;
public
class
CharInfo
{
BitSet
m_specialsMap
=
new
BitSet
(
65535
)
;
private
Hashtable
m_charToEntityRef
=
new
Hashtable
(
)
;
public
static
String
HTML_ENTITIES_RESOURCE
=
"HTMLEntities.res"
;
public
static
String
XML_ENTITIES_RESOURCE
=
"XMLEntities.res"
;
public
static
char
S_LINEFEED
=
0x0A
;
public
static
char
S_CARRIAGERETURN
=
0x0D
;
private
static
final
Class
[
]
NO_CLASSES
=
new
Class
[
0
]
;
private
static
final
Object
[
]
NO_OBJS
=
new
Object
[
0
]
;
public
CharInfo
(
String
entitiesResource
)
{
InputStream
is
=
null
;
BufferedReader
reader
=
null
;
int
index
;
String
name
;
String
value
;
int
code
;
String
line
;
try
{
try
{
ClassLoader
cl
=
CharInfo
.
class
.
getClassLoader
(
)
;
if
(
cl
==
null
)
{
is
=
ClassLoader
.
getSystemResourceAsStream
(
entitiesResource
)
;
}
else
{
is
=
cl
.
getResourceAsStream
(
entitiesResource
)
;
}
}
catch
(
Exception
e
)
{
}
if
(
is
==
null
)
is
=
CharInfo
.
class
.
getResourceAsStream
(
entitiesResource
)
;
if
(
is
==
null
)
{
URL
url
=
new
URL
(
entitiesResource
)
;
is
=
url
.
openStream
(
)
;
}
if
(
is
==
null
)
throw
new
RuntimeException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_RESOURCE_COULD_NOT_FIND
,
new
Object
[
]
{
entitiesResource
,
entitiesResource
}
)
)
;
try
{
reader
=
new
BufferedReader
(
new
InputStreamReader
(
is
,
"UTF-8"
)
)
;
}
catch
(
java
.
io
.
UnsupportedEncodingException
e
)
{
reader
=
new
BufferedReader
(
new
InputStreamReader
(
is
)
)
;
}
line
=
reader
.
readLine
(
)
;
while
(
line
!=
null
)
{
if
(
line
.
length
(
)
==
0
||
line
.
charAt
(
0
)
==
'#'
)
{
line
=
reader
.
readLine
(
)
;
continue
;
}
index
=
line
.
indexOf
(
' '
)
;
if
(
index
>
1
)
{
name
=
line
.
substring
(
0
,
index
)
;
++
index
;
if
(
index
<
line
.
length
(
)
)
{
value
=
line
.
substring
(
index
)
;
index
=
value
.
indexOf
(
' '
)
;
if
(
index
>
0
)
value
=
value
.
substring
(
0
,
index
)
;
code
=
Integer
.
parseInt
(
value
)
;
defineEntity
(
name
,
(
char
)
code
)
;
}
}
line
=
reader
.
readLine
(
)
;
}
is
.
close
(
)
;
m_specialsMap
.
set
(
S_LINEFEED
)
;
m_specialsMap
.
set
(
S_CARRIAGERETURN
)
;
}
catch
(
Exception
except
)
{
throw
new
RuntimeException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_RESOURCE_COULD_NOT_LOAD
,
new
Object
[
]
{
entitiesResource
,
except
.
toString
(
)
,
entitiesResource
,
except
.
toString
(
)
}
)
)
;
}
finally
{
if
(
is
!=
null
)
{
try
{
is
.
close
(
)
;
}
catch
(
Exception
except
)
{
}
}
}
}
protected
void
defineEntity
(
String
name
,
char
value
)
{
CharKey
character
=
new
CharKey
(
value
)
;
m_charToEntityRef
.
put
(
character
,
name
)
;
m_specialsMap
.
set
(
value
)
;
}
private
CharKey
m_charKey
=
new
CharKey
(
)
;
synchronized
public
String
getEntityNameForChar
(
char
value
)
{
m_charKey
.
setChar
(
value
)
;
return
(
String
)
m_charToEntityRef
.
get
(
m_charKey
)
;
}
public
boolean
isSpecial
(
char
value
)
{
return
m_specialsMap
.
get
(
value
)
;
}
}
