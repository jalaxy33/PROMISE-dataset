package
org
.
apache
.
xalan
.
processor
;
import
org
.
xml
.
sax
.
InputSource
;
import
org
.
xml
.
sax
.
helpers
.
XMLReaderFactory
;
import
org
.
xml
.
sax
.
XMLReader
;
import
javax
.
xml
.
transform
.
TransformerException
;
import
org
.
xml
.
sax
.
SAXNotRecognizedException
;
import
org
.
xml
.
sax
.
SAXNotSupportedException
;
import
org
.
xml
.
sax
.
XMLFilter
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
apache
.
xml
.
utils
.
TreeWalker
;
import
org
.
apache
.
xml
.
utils
.
SystemIDResolver
;
import
org
.
apache
.
xml
.
utils
.
DefaultErrorHandler
;
import
org
.
apache
.
xalan
.
transformer
.
TransformerImpl
;
import
org
.
apache
.
xalan
.
transformer
.
TransformerIdentityImpl
;
import
org
.
apache
.
xalan
.
transformer
.
TrAXFilter
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xalan
.
res
.
XSLTErrorResources
;
import
javax
.
xml
.
transform
.
Transformer
;
import
javax
.
xml
.
transform
.
TransformerFactory
;
import
javax
.
xml
.
transform
.
TransformerConfigurationException
;
import
javax
.
xml
.
transform
.
Source
;
import
javax
.
xml
.
transform
.
URIResolver
;
import
javax
.
xml
.
transform
.
Templates
;
import
javax
.
xml
.
transform
.
sax
.
TemplatesHandler
;
import
javax
.
xml
.
transform
.
sax
.
TransformerHandler
;
import
javax
.
xml
.
transform
.
sax
.
SAXTransformerFactory
;
import
javax
.
xml
.
transform
.
sax
.
SAXSource
;
import
javax
.
xml
.
transform
.
sax
.
SAXResult
;
import
javax
.
xml
.
transform
.
dom
.
DOMSource
;
import
javax
.
xml
.
transform
.
dom
.
DOMResult
;
import
javax
.
xml
.
transform
.
stream
.
StreamSource
;
import
javax
.
xml
.
transform
.
stream
.
StreamResult
;
import
javax
.
xml
.
transform
.
ErrorListener
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
BufferedInputStream
;
import
java
.
io
.
StringWriter
;
import
java
.
io
.
PrintWriter
;
import
java
.
io
.
StringReader
;
import
java
.
util
.
Properties
;
import
java
.
util
.
Enumeration
;
import
org
.
apache
.
xalan
.
transformer
.
XalanProperties
;
public
class
TransformerFactoryImpl
extends
SAXTransformerFactory
{
public
static
String
XSLT_PROPERTIES
=
"org/apache/xalan/res/XSLTInfo.properties"
;
private
static
boolean
isInited
=
false
;
public
TransformerFactoryImpl
(
)
{
loadPropertyFileToSystem
(
XSLT_PROPERTIES
)
;
}
private
static
final
Class
[
]
NO_CLASSES
=
new
Class
[
0
]
;
private
static
final
Object
[
]
NO_OBJS
=
new
Object
[
0
]
;
public
static
final
String
FEATURE_INCREMENTAL
=
"http://xml.apache.org/xalan/features/incremental"
;
public
static
final
String
FEATURE_OPTIMIZE
=
"http://xml.apache.org/xalan/features/optimize"
;
public
static
final
String
FEATURE_SOURCE_LOCATION
=
XalanProperties
.
SOURCE_LOCATION
;
private
static
void
loadPropertyFileToSystem
(
String
file
)
{
if
(
false
==
isInited
)
{
try
{
InputStream
is
=
null
;
try
{
Properties
props
=
new
Properties
(
)
;
try
{
java
.
lang
.
reflect
.
Method
getCCL
=
Thread
.
class
.
getMethod
(
"getContextClassLoader"
,
NO_CLASSES
)
;
if
(
getCCL
!=
null
)
{
ClassLoader
contextClassLoader
=
(
ClassLoader
)
getCCL
.
invoke
(
Thread
.
currentThread
(
)
,
NO_OBJS
)
;
is
=
contextClassLoader
.
getResourceAsStream
(
file
)
;
}
}
catch
(
Exception
e
)
{
}
if
(
is
==
null
)
{
is
=
TransformerFactoryImpl
.
class
.
getResourceAsStream
(
"/"
+
file
)
;
}
BufferedInputStream
bis
=
new
BufferedInputStream
(
is
)
;
props
.
load
(
bis
)
;
bis
.
close
(
)
;
Properties
systemProps
=
System
.
getProperties
(
)
;
Enumeration
propEnum
=
props
.
propertyNames
(
)
;
while
(
propEnum
.
hasMoreElements
(
)
)
{
String
prop
=
(
String
)
propEnum
.
nextElement
(
)
;
if
(
!
systemProps
.
containsKey
(
prop
)
)
systemProps
.
put
(
prop
,
props
.
getProperty
(
prop
)
)
;
}
System
.
setProperties
(
systemProps
)
;
isInited
=
true
;
}
catch
(
Exception
ex
)
{
}
}
catch
(
SecurityException
se
)
{
}
}
}
public
javax
.
xml
.
transform
.
Templates
processFromNode
(
Node
node
)
throws
TransformerConfigurationException
{
try
{
TemplatesHandler
builder
=
newTemplatesHandler
(
)
;
TreeWalker
walker
=
new
TreeWalker
(
builder
,
new
org
.
apache
.
xpath
.
DOM2Helper
(
)
,
builder
.
getSystemId
(
)
)
;
walker
.
traverse
(
node
)
;
return
builder
.
getTemplates
(
)
;
}
catch
(
org
.
xml
.
sax
.
SAXException
se
)
{
if
(
m_errorListener
!=
null
)
{
try
{
m_errorListener
.
fatalError
(
new
TransformerException
(
se
)
)
;
}
catch
(
TransformerException
ex
)
{
throw
new
TransformerConfigurationException
(
ex
)
;
}
return
null
;
}
else
throw
new
TransformerConfigurationException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_PROCESSFROMNODE_FAILED
,
null
)
,
se
)
;
}
catch
(
TransformerConfigurationException
tce
)
{
throw
tce
;
}
catch
(
Exception
e
)
{
if
(
m_errorListener
!=
null
)
{
try
{
m_errorListener
.
fatalError
(
new
TransformerException
(
e
)
)
;
}
catch
(
TransformerException
ex
)
{
throw
new
TransformerConfigurationException
(
ex
)
;
}
return
null
;
}
else
throw
new
TransformerConfigurationException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_PROCESSFROMNODE_FAILED
,
null
)
,
e
)
;
}
}
private
String
m_DOMsystemID
=
null
;
String
getDOMsystemID
(
)
{
return
m_DOMsystemID
;
}
javax
.
xml
.
transform
.
Templates
processFromNode
(
Node
node
,
String
systemID
)
throws
TransformerConfigurationException
{
m_DOMsystemID
=
systemID
;
return
processFromNode
(
node
)
;
}
public
Source
getAssociatedStylesheet
(
Source
source
,
String
media
,
String
title
,
String
charset
)
throws
TransformerConfigurationException
{
String
baseID
;
InputSource
isource
=
null
;
Node
node
=
null
;
XMLReader
reader
=
null
;
if
(
source
instanceof
DOMSource
)
{
DOMSource
dsource
=
(
DOMSource
)
source
;
node
=
dsource
.
getNode
(
)
;
baseID
=
dsource
.
getSystemId
(
)
;
}
else
{
isource
=
SAXSource
.
sourceToInputSource
(
source
)
;
baseID
=
isource
.
getSystemId
(
)
;
}
StylesheetPIHandler
handler
=
new
StylesheetPIHandler
(
baseID
,
media
,
title
,
charset
)
;
if
(
m_uriResolver
!=
null
)
{
handler
.
setURIResolver
(
m_uriResolver
)
;
}
try
{
if
(
null
!=
node
)
{
TreeWalker
walker
=
new
TreeWalker
(
handler
,
new
org
.
apache
.
xpath
.
DOM2Helper
(
)
,
baseID
)
;
walker
.
traverse
(
node
)
;
}
else
{
try
{
javax
.
xml
.
parsers
.
SAXParserFactory
factory
=
javax
.
xml
.
parsers
.
SAXParserFactory
.
newInstance
(
)
;
factory
.
setNamespaceAware
(
true
)
;
javax
.
xml
.
parsers
.
SAXParser
jaxpParser
=
factory
.
newSAXParser
(
)
;
reader
=
jaxpParser
.
getXMLReader
(
)
;
}
catch
(
javax
.
xml
.
parsers
.
ParserConfigurationException
ex
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
ex
)
;
}
catch
(
javax
.
xml
.
parsers
.
FactoryConfigurationError
ex1
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
ex1
.
toString
(
)
)
;
}
catch
(
NoSuchMethodError
ex2
)
{
}
catch
(
AbstractMethodError
ame
)
{
}
if
(
null
==
reader
)
{
reader
=
XMLReaderFactory
.
createXMLReader
(
)
;
}
reader
.
setContentHandler
(
handler
)
;
reader
.
parse
(
isource
)
;
}
}
catch
(
StopParseException
spe
)
{
}
catch
(
org
.
xml
.
sax
.
SAXException
se
)
{
throw
new
TransformerConfigurationException
(
"getAssociatedStylesheets failed"
,
se
)
;
}
catch
(
IOException
ioe
)
{
throw
new
TransformerConfigurationException
(
"getAssociatedStylesheets failed"
,
ioe
)
;
}
return
handler
.
getAssociatedStylesheet
(
)
;
}
public
TemplatesHandler
newTemplatesHandler
(
)
throws
TransformerConfigurationException
{
return
new
StylesheetHandler
(
this
)
;
}
public
boolean
getFeature
(
String
name
)
{
if
(
(
DOMResult
.
FEATURE
==
name
)
||
(
DOMSource
.
FEATURE
==
name
)
||
(
SAXResult
.
FEATURE
==
name
)
||
(
SAXSource
.
FEATURE
==
name
)
||
(
StreamResult
.
FEATURE
==
name
)
||
(
StreamSource
.
FEATURE
==
name
)
||
(
SAXTransformerFactory
.
FEATURE
==
name
)
||
(
SAXTransformerFactory
.
FEATURE_XMLFILTER
==
name
)
)
return
true
;
else
if
(
(
DOMResult
.
FEATURE
.
equals
(
name
)
)
||
(
DOMSource
.
FEATURE
.
equals
(
name
)
)
||
(
SAXResult
.
FEATURE
.
equals
(
name
)
)
||
(
SAXSource
.
FEATURE
.
equals
(
name
)
)
||
(
StreamResult
.
FEATURE
.
equals
(
name
)
)
||
(
StreamSource
.
FEATURE
.
equals
(
name
)
)
||
(
SAXTransformerFactory
.
FEATURE
.
equals
(
name
)
)
||
(
SAXTransformerFactory
.
FEATURE_XMLFILTER
.
equals
(
name
)
)
)
return
true
;
else
return
false
;
}
public
static
boolean
m_optimize
=
true
;
public
static
boolean
m_source_location
=
false
;
public
void
setAttribute
(
String
name
,
Object
value
)
throws
IllegalArgumentException
{
if
(
name
.
equals
(
FEATURE_INCREMENTAL
)
)
{
if
(
value
instanceof
Boolean
)
{
org
.
apache
.
xml
.
dtm
.
DTMManager
.
setIncremental
(
(
(
Boolean
)
value
)
.
booleanValue
(
)
)
;
}
else
if
(
value
instanceof
String
)
{
org
.
apache
.
xml
.
dtm
.
DTMManager
.
setIncremental
(
(
new
Boolean
(
(
String
)
value
)
)
.
booleanValue
(
)
)
;
}
else
{
throw
new
IllegalArgumentException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_BAD_VALUE
,
new
Object
[
]
{
name
,
value
}
)
)
;
}
}
else
if
(
name
.
equals
(
FEATURE_OPTIMIZE
)
)
{
if
(
value
instanceof
Boolean
)
{
m_optimize
=
(
(
Boolean
)
value
)
.
booleanValue
(
)
;
}
else
if
(
value
instanceof
String
)
{
m_optimize
=
(
new
Boolean
(
(
String
)
value
)
)
.
booleanValue
(
)
;
}
else
{
throw
new
IllegalArgumentException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_BAD_VALUE
,
new
Object
[
]
{
name
,
value
}
)
)
;
}
}
else
if
(
name
.
equals
(
FEATURE_SOURCE_LOCATION
)
)
{
if
(
value
instanceof
Boolean
)
{
m_source_location
=
(
(
Boolean
)
value
)
.
booleanValue
(
)
;
}
else
if
(
value
instanceof
String
)
{
m_source_location
=
(
new
Boolean
(
(
String
)
value
)
)
.
booleanValue
(
)
;
}
else
{
throw
new
IllegalArgumentException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_BAD_VALUE
,
new
Object
[
]
{
name
,
value
}
)
)
;
}
}
else
{
throw
new
IllegalArgumentException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_NOT_SUPPORTED
,
new
Object
[
]
{
name
}
)
)
;
}
}
public
Object
getAttribute
(
String
name
)
throws
IllegalArgumentException
{
if
(
name
.
equals
(
FEATURE_INCREMENTAL
)
)
{
return
new
Boolean
(
org
.
apache
.
xml
.
dtm
.
DTMManager
.
getIncremental
(
)
)
;
}
else
if
(
name
.
equals
(
FEATURE_OPTIMIZE
)
)
{
return
new
Boolean
(
m_optimize
)
;
}
else
if
(
name
.
equals
(
FEATURE_SOURCE_LOCATION
)
)
{
return
new
Boolean
(
m_source_location
)
;
}
else
throw
new
IllegalArgumentException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_ATTRIB_VALUE_NOT_RECOGNIZED
,
new
Object
[
]
{
name
}
)
)
;
}
public
XMLFilter
newXMLFilter
(
Source
src
)
throws
TransformerConfigurationException
{
Templates
templates
=
newTemplates
(
src
)
;
if
(
templates
==
null
)
return
null
;
return
newXMLFilter
(
templates
)
;
}
public
XMLFilter
newXMLFilter
(
Templates
templates
)
throws
TransformerConfigurationException
{
try
{
return
new
TrAXFilter
(
templates
)
;
}
catch
(
TransformerConfigurationException
ex
)
{
if
(
m_errorListener
!=
null
)
{
try
{
m_errorListener
.
fatalError
(
ex
)
;
return
null
;
}
catch
(
TransformerException
ex1
)
{
new
TransformerConfigurationException
(
ex1
)
;
}
}
throw
ex
;
}
}
public
TransformerHandler
newTransformerHandler
(
Source
src
)
throws
TransformerConfigurationException
{
Templates
templates
=
newTemplates
(
src
)
;
if
(
templates
==
null
)
return
null
;
return
newTransformerHandler
(
templates
)
;
}
public
TransformerHandler
newTransformerHandler
(
Templates
templates
)
throws
TransformerConfigurationException
{
try
{
TransformerImpl
transformer
=
(
TransformerImpl
)
templates
.
newTransformer
(
)
;
transformer
.
setURIResolver
(
m_uriResolver
)
;
TransformerHandler
th
=
(
TransformerHandler
)
transformer
.
getInputContentHandler
(
true
)
;
return
th
;
}
catch
(
TransformerConfigurationException
ex
)
{
if
(
m_errorListener
!=
null
)
{
try
{
m_errorListener
.
fatalError
(
ex
)
;
return
null
;
}
catch
(
TransformerException
ex1
)
{
ex
=
new
TransformerConfigurationException
(
ex1
)
;
}
}
throw
ex
;
}
}
public
TransformerHandler
newTransformerHandler
(
)
throws
TransformerConfigurationException
{
return
new
TransformerIdentityImpl
(
)
;
}
public
Transformer
newTransformer
(
Source
source
)
throws
TransformerConfigurationException
{
try
{
Templates
tmpl
=
newTemplates
(
source
)
;
if
(
tmpl
==
null
)
return
null
;
Transformer
transformer
=
tmpl
.
newTransformer
(
)
;
transformer
.
setURIResolver
(
m_uriResolver
)
;
return
transformer
;
}
catch
(
TransformerConfigurationException
ex
)
{
if
(
m_errorListener
!=
null
)
{
try
{
m_errorListener
.
fatalError
(
ex
)
;
return
null
;
}
catch
(
TransformerException
ex1
)
{
ex
=
new
TransformerConfigurationException
(
ex1
)
;
}
}
throw
ex
;
}
}
public
Transformer
newTransformer
(
)
throws
TransformerConfigurationException
{
return
new
TransformerIdentityImpl
(
)
;
}
public
Templates
newTemplates
(
Source
source
)
throws
TransformerConfigurationException
{
TemplatesHandler
builder
=
newTemplatesHandler
(
)
;
String
baseID
=
source
.
getSystemId
(
)
;
if
(
null
==
baseID
)
{
try
{
String
currentDir
=
System
.
getProperty
(
"user.dir"
)
;
if
(
currentDir
.
startsWith
(
java
.
io
.
File
.
separator
)
)
baseID
=
"file://"
+
currentDir
+
java
.
io
.
File
.
separatorChar
+
source
.
getClass
(
)
.
getName
(
)
;
else
baseID
=
"file:///"
+
currentDir
+
java
.
io
.
File
.
separatorChar
+
source
.
getClass
(
)
.
getName
(
)
;
}
catch
(
SecurityException
se
)
{
}
}
else
{
try
{
baseID
=
SystemIDResolver
.
getAbsoluteURI
(
baseID
)
;
}
catch
(
TransformerException
te
)
{
throw
new
TransformerConfigurationException
(
te
)
;
}
}
builder
.
setSystemId
(
baseID
)
;
if
(
source
instanceof
DOMSource
)
{
DOMSource
dsource
=
(
DOMSource
)
source
;
Node
node
=
dsource
.
getNode
(
)
;
if
(
null
!=
node
)
return
processFromNode
(
node
,
baseID
)
;
else
{
String
messageStr
=
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_ILLEGAL_DOMSOURCE_INPUT
,
null
)
;
throw
new
IllegalArgumentException
(
messageStr
)
;
}
}
try
{
InputSource
isource
=
SAXSource
.
sourceToInputSource
(
source
)
;
XMLReader
reader
=
null
;
if
(
source
instanceof
SAXSource
)
reader
=
(
(
SAXSource
)
source
)
.
getXMLReader
(
)
;
boolean
isUserReader
=
(
reader
!=
null
)
;
if
(
null
==
reader
)
{
try
{
javax
.
xml
.
parsers
.
SAXParserFactory
factory
=
javax
.
xml
.
parsers
.
SAXParserFactory
.
newInstance
(
)
;
factory
.
setNamespaceAware
(
true
)
;
javax
.
xml
.
parsers
.
SAXParser
jaxpParser
=
factory
.
newSAXParser
(
)
;
reader
=
jaxpParser
.
getXMLReader
(
)
;
}
catch
(
javax
.
xml
.
parsers
.
ParserConfigurationException
ex
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
ex
)
;
}
catch
(
javax
.
xml
.
parsers
.
FactoryConfigurationError
ex1
)
{
throw
new
org
.
xml
.
sax
.
SAXException
(
ex1
.
toString
(
)
)
;
}
catch
(
NoSuchMethodError
ex2
)
{
}
catch
(
AbstractMethodError
ame
)
{
}
}
if
(
null
==
reader
)
reader
=
XMLReaderFactory
.
createXMLReader
(
)
;
try
{
if
(
!
isUserReader
)
reader
.
setFeature
(
"http://apache.org/xml/features/validation/dynamic"
,
true
)
;
}
catch
(
org
.
xml
.
sax
.
SAXException
ex
)
{
}
reader
.
setContentHandler
(
builder
)
;
reader
.
parse
(
isource
)
;
}
catch
(
org
.
xml
.
sax
.
SAXException
se
)
{
if
(
m_errorListener
!=
null
)
{
try
{
m_errorListener
.
fatalError
(
new
TransformerException
(
se
)
)
;
}
catch
(
TransformerException
ex1
)
{
throw
new
TransformerConfigurationException
(
ex1
)
;
}
}
else
throw
new
TransformerConfigurationException
(
se
.
getMessage
(
)
,
se
)
;
}
catch
(
Exception
e
)
{
if
(
m_errorListener
!=
null
)
{
try
{
m_errorListener
.
fatalError
(
new
TransformerException
(
e
)
)
;
return
null
;
}
catch
(
TransformerException
ex1
)
{
throw
new
TransformerConfigurationException
(
ex1
)
;
}
}
else
throw
new
TransformerConfigurationException
(
e
.
getMessage
(
)
,
e
)
;
}
return
builder
.
getTemplates
(
)
;
}
URIResolver
m_uriResolver
;
public
void
setURIResolver
(
URIResolver
resolver
)
{
m_uriResolver
=
resolver
;
}
public
URIResolver
getURIResolver
(
)
{
return
m_uriResolver
;
}
private
ErrorListener
m_errorListener
=
new
DefaultErrorHandler
(
)
;
public
ErrorListener
getErrorListener
(
)
{
return
m_errorListener
;
}
public
void
setErrorListener
(
ErrorListener
listener
)
throws
IllegalArgumentException
{
if
(
null
==
listener
)
throw
new
IllegalArgumentException
(
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_ERRORLISTENER
,
null
)
)
;
m_errorListener
=
listener
;
}
}
