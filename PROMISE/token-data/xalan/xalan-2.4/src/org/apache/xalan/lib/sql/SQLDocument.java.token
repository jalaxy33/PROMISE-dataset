package
org
.
apache
.
xalan
.
lib
.
sql
;
import
org
.
apache
.
xml
.
dtm
.
DTMManager
;
import
org
.
apache
.
xml
.
dtm
.
DTM
;
import
java
.
sql
.
Connection
;
import
java
.
sql
.
Statement
;
import
java
.
sql
.
ResultSet
;
import
java
.
sql
.
ResultSetMetaData
;
import
java
.
sql
.
SQLException
;
import
java
.
sql
.
*
;
import
org
.
apache
.
xml
.
dtm
.
ref
.
*
;
public
class
SQLDocument
extends
DTMDocument
{
private
boolean
DEBUG
=
false
;
private
static
final
String
S_NAMESPACE
=
"http://xml.apache.org/xalan/SQLExtension"
;
private
static
final
String
S_SQL
=
"sql"
;
private
static
final
String
S_ROW_SET
=
"row-set"
;
private
static
final
String
S_METADATA
=
"metadata"
;
private
static
final
String
S_COLUMN_HEADER
=
"column-header"
;
private
static
final
String
S_ROW
=
"row"
;
private
static
final
String
S_COL
=
"col"
;
private
static
final
String
S_CATALOGUE_NAME
=
"catalogue-name"
;
private
static
final
String
S_DISPLAY_SIZE
=
"column-display-size"
;
private
static
final
String
S_COLUMN_LABEL
=
"column-label"
;
private
static
final
String
S_COLUMN_NAME
=
"column-name"
;
private
static
final
String
S_COLUMN_TYPE
=
"column-type"
;
private
static
final
String
S_COLUMN_TYPENAME
=
"column-typename"
;
private
static
final
String
S_PRECISION
=
"precision"
;
private
static
final
String
S_SCALE
=
"scale"
;
private
static
final
String
S_SCHEMA_NAME
=
"schema-name"
;
private
static
final
String
S_TABLE_NAME
=
"table-name"
;
private
static
final
String
S_CASESENSITIVE
=
"case-sensitive"
;
private
static
final
String
S_DEFINITLEYWRITABLE
=
"definitley-writable"
;
private
static
final
String
S_ISNULLABLE
=
"nullable"
;
private
static
final
String
S_ISSIGNED
=
"signed"
;
private
static
final
String
S_ISWRITEABLE
=
"writable"
;
private
static
final
String
S_ISSEARCHABLE
=
"searchable"
;
private
int
m_SQL_TypeID
=
0
;
private
int
m_MetaData_TypeID
=
0
;
private
int
m_ColumnHeader_TypeID
=
0
;
private
int
m_RowSet_TypeID
=
0
;
private
int
m_Row_TypeID
=
0
;
private
int
m_Col_TypeID
=
0
;
private
int
m_ColAttrib_CATALOGUE_NAME_TypeID
=
0
;
private
int
m_ColAttrib_DISPLAY_SIZE_TypeID
=
0
;
private
int
m_ColAttrib_COLUMN_LABEL_TypeID
=
0
;
private
int
m_ColAttrib_COLUMN_NAME_TypeID
=
0
;
private
int
m_ColAttrib_COLUMN_TYPE_TypeID
=
0
;
private
int
m_ColAttrib_COLUMN_TYPENAME_TypeID
=
0
;
private
int
m_ColAttrib_PRECISION_TypeID
=
0
;
private
int
m_ColAttrib_SCALE_TypeID
=
0
;
private
int
m_ColAttrib_SCHEMA_NAME_TypeID
=
0
;
private
int
m_ColAttrib_TABLE_NAME_TypeID
=
0
;
private
int
m_ColAttrib_CASESENSITIVE_TypeID
=
0
;
private
int
m_ColAttrib_DEFINITLEYWRITEABLE_TypeID
=
0
;
private
int
m_ColAttrib_ISNULLABLE_TypeID
=
0
;
private
int
m_ColAttrib_ISSIGNED_TypeID
=
0
;
private
int
m_ColAttrib_ISWRITEABLE_TypeID
=
0
;
private
int
m_ColAttrib_ISSEARCHABLE_TypeID
=
0
;
private
Connection
m_Connection
=
null
;
private
Statement
m_Statement
=
null
;
private
ResultSet
m_ResultSet
=
null
;
private
ConnectionPool
m_ConnectionPool
=
null
;
private
int
[
]
m_ColHeadersIdx
;
private
int
m_ColCount
;
private
int
m_MetaDataIdx
=
DTM
.
NULL
;
private
int
m_RowSetIdx
=
DTM
.
NULL
;
private
int
m_SQLIdx
=
DTM
.
NULL
;
private
int
m_FirstRowIdx
=
DTM
.
NULL
;
private
int
m_LastRowIdx
=
DTM
.
NULL
;
private
boolean
m_StreamingMode
=
true
;
public
SQLDocument
(
DTMManager
mgr
,
int
ident
,
ConnectionPool
pool
,
Connection
con
,
Statement
stmt
,
ResultSet
data
,
boolean
streamingMode
)
throws
SQLException
{
super
(
mgr
,
ident
)
;
m_Connection
=
con
;
m_Statement
=
stmt
;
m_ResultSet
=
data
;
m_ConnectionPool
=
pool
;
m_StreamingMode
=
streamingMode
;
createExpandedNameTable
(
)
;
extractSQLMetaData
(
m_ResultSet
.
getMetaData
(
)
)
;
addRowToDTMFromResultSet
(
)
;
}
private
void
extractSQLMetaData
(
ResultSetMetaData
meta
)
{
m_DocumentIdx
=
addElement
(
0
,
m_Document_TypeID
,
DTM
.
NULL
,
DTM
.
NULL
)
;
m_SQLIdx
=
addElement
(
1
,
m_SQL_TypeID
,
m_DocumentIdx
,
DTM
.
NULL
)
;
m_MetaDataIdx
=
addElement
(
1
,
m_MetaData_TypeID
,
m_SQLIdx
,
DTM
.
NULL
)
;
try
{
m_ColCount
=
meta
.
getColumnCount
(
)
;
m_ColHeadersIdx
=
new
int
[
m_ColCount
]
;
}
catch
(
Exception
e
)
{
error
(
"ERROR Extracting Metadata"
)
;
}
int
lastColHeaderIdx
=
DTM
.
NULL
;
int
i
=
1
;
for
(
i
=
1
;
i
<=
m_ColCount
;
i
++
)
{
m_ColHeadersIdx
[
i
-
1
]
=
addElement
(
2
,
m_ColumnHeader_TypeID
,
m_MetaDataIdx
,
lastColHeaderIdx
)
;
lastColHeaderIdx
=
m_ColHeadersIdx
[
i
-
1
]
;
try
{
addAttributeToNode
(
meta
.
getColumnName
(
i
)
,
m_ColAttrib_COLUMN_NAME_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_COLUMN_NAME_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
getColumnLabel
(
i
)
,
m_ColAttrib_COLUMN_LABEL_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_COLUMN_LABEL_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
getCatalogName
(
i
)
,
m_ColAttrib_CATALOGUE_NAME_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_CATALOGUE_NAME_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
new
Integer
(
meta
.
getColumnDisplaySize
(
i
)
)
,
m_ColAttrib_DISPLAY_SIZE_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_DISPLAY_SIZE_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
new
Integer
(
meta
.
getColumnType
(
i
)
)
,
m_ColAttrib_COLUMN_TYPE_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_COLUMN_TYPE_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
getColumnTypeName
(
i
)
,
m_ColAttrib_COLUMN_TYPENAME_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_COLUMN_TYPENAME_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
new
Integer
(
meta
.
getPrecision
(
i
)
)
,
m_ColAttrib_PRECISION_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_PRECISION_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
new
Integer
(
meta
.
getScale
(
i
)
)
,
m_ColAttrib_SCALE_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_SCALE_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
getSchemaName
(
i
)
,
m_ColAttrib_SCHEMA_NAME_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_SCHEMA_NAME_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
getTableName
(
i
)
,
m_ColAttrib_TABLE_NAME_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_TABLE_NAME_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
isCaseSensitive
(
i
)
?
S_ISTRUE
:
S_ISFALSE
,
m_ColAttrib_CASESENSITIVE_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_CASESENSITIVE_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
isDefinitelyWritable
(
i
)
?
S_ISTRUE
:
S_ISFALSE
,
m_ColAttrib_DEFINITLEYWRITEABLE_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_DEFINITLEYWRITEABLE_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
isNullable
(
i
)
!=
0
?
S_ISTRUE
:
S_ISFALSE
,
m_ColAttrib_ISNULLABLE_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_ISNULLABLE_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
isSigned
(
i
)
?
S_ISTRUE
:
S_ISFALSE
,
m_ColAttrib_ISSIGNED_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_ISSIGNED_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
isWritable
(
i
)
==
true
?
S_ISTRUE
:
S_ISFALSE
,
m_ColAttrib_ISWRITEABLE_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_ISWRITEABLE_TypeID
,
lastColHeaderIdx
)
;
}
try
{
addAttributeToNode
(
meta
.
isSearchable
(
i
)
==
true
?
S_ISTRUE
:
S_ISFALSE
,
m_ColAttrib_ISSEARCHABLE_TypeID
,
lastColHeaderIdx
)
;
}
catch
(
Exception
e
)
{
addAttributeToNode
(
S_ATTRIB_NOT_SUPPORTED
,
m_ColAttrib_ISSEARCHABLE_TypeID
,
lastColHeaderIdx
)
;
}
}
}
protected
void
createExpandedNameTable
(
)
{
super
.
createExpandedNameTable
(
)
;
m_SQL_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_SQL
,
DTM
.
ELEMENT_NODE
)
;
m_MetaData_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_METADATA
,
DTM
.
ELEMENT_NODE
)
;
m_ColumnHeader_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_COLUMN_HEADER
,
DTM
.
ELEMENT_NODE
)
;
m_RowSet_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_ROW_SET
,
DTM
.
ELEMENT_NODE
)
;
m_Row_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_ROW
,
DTM
.
ELEMENT_NODE
)
;
m_Col_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_COL
,
DTM
.
ELEMENT_NODE
)
;
m_ColAttrib_CATALOGUE_NAME_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_CATALOGUE_NAME
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_DISPLAY_SIZE_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_DISPLAY_SIZE
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_COLUMN_LABEL_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_COLUMN_LABEL
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_COLUMN_NAME_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_COLUMN_NAME
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_COLUMN_TYPE_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_COLUMN_TYPE
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_COLUMN_TYPENAME_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_COLUMN_TYPENAME
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_PRECISION_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_PRECISION
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_SCALE_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_SCALE
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_SCHEMA_NAME_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_SCHEMA_NAME
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_TABLE_NAME_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_TABLE_NAME
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_CASESENSITIVE_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_CASESENSITIVE
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_DEFINITLEYWRITEABLE_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_DEFINITLEYWRITABLE
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_ISNULLABLE_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_ISNULLABLE
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_ISSIGNED_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_ISSIGNED
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_ISWRITEABLE_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_ISWRITEABLE
,
DTM
.
ATTRIBUTE_NODE
)
;
m_ColAttrib_ISSEARCHABLE_TypeID
=
m_expandedNameTable
.
getExpandedTypeID
(
S_NAMESPACE
,
S_ISSEARCHABLE
,
DTM
.
ATTRIBUTE_NODE
)
;
}
private
boolean
addRowToDTMFromResultSet
(
)
{
try
{
if
(
m_RowSetIdx
==
DTM
.
NULL
)
{
m_RowSetIdx
=
addElement
(
1
,
m_RowSet_TypeID
,
m_SQLIdx
,
m_MetaDataIdx
)
;
}
if
(
!
m_ResultSet
.
next
(
)
)
{
if
(
m_StreamingMode
)
{
m_nextsib
.
setElementAt
(
DTM
.
NULL
,
m_LastRowIdx
)
;
}
return
false
;
}
if
(
m_FirstRowIdx
==
DTM
.
NULL
)
{
m_FirstRowIdx
=
addElement
(
2
,
m_Row_TypeID
,
m_RowSetIdx
,
DTM
.
NULL
)
;
m_LastRowIdx
=
m_FirstRowIdx
;
if
(
m_StreamingMode
)
{
m_nextsib
.
setElementAt
(
m_LastRowIdx
,
m_LastRowIdx
)
;
}
}
else
{
if
(
!
m_StreamingMode
)
{
m_LastRowIdx
=
addElement
(
3
,
m_Row_TypeID
,
m_RowSetIdx
,
m_LastRowIdx
)
;
}
}
int
colID
=
_firstch
(
m_LastRowIdx
)
;
int
pcolID
=
DTM
.
NULL
;
for
(
int
i
=
1
;
i
<=
m_ColCount
;
i
++
)
{
Object
o
=
m_ResultSet
.
getObject
(
i
)
;
if
(
colID
==
DTM
.
NULL
)
{
pcolID
=
addElementWithData
(
o
,
3
,
m_Col_TypeID
,
m_LastRowIdx
,
pcolID
)
;
cloneAttributeFromNode
(
pcolID
,
m_ColHeadersIdx
[
i
-
1
]
)
;
}
else
{
int
dataIdent
=
_firstch
(
colID
)
;
if
(
dataIdent
==
DTM
.
NULL
)
{
error
(
"Streaming Mode, Data Error"
)
;
}
else
{
m_ObjectArray
.
setAt
(
dataIdent
,
o
)
;
}
}
if
(
colID
!=
DTM
.
NULL
)
{
colID
=
_nextsib
(
colID
)
;
}
}
}
catch
(
Exception
e
)
{
if
(
DEBUG
)
{
System
.
out
.
println
(
"SQL Error Fetching next row ["
+
e
.
getLocalizedMessage
(
)
+
"]"
)
;
}
error
(
"SQL Error Fetching next row ["
+
e
.
getLocalizedMessage
(
)
+
"]"
)
;
}
return
true
;
}
public
void
close
(
)
{
if
(
DEBUG
)
System
.
out
.
println
(
"close()"
)
;
try
{
if
(
null
!=
m_ResultSet
)
m_ResultSet
.
close
(
)
;
}
catch
(
Exception
e
)
{
}
try
{
if
(
null
!=
m_Statement
)
m_Statement
.
close
(
)
;
}
catch
(
Exception
e
)
{
}
try
{
if
(
null
!=
m_Connection
)
m_ConnectionPool
.
releaseConnection
(
m_Connection
)
;
}
catch
(
Exception
e
)
{
}
}
public
void
closeOnError
(
)
{
if
(
DEBUG
)
System
.
out
.
println
(
"close()"
)
;
try
{
if
(
null
!=
m_ResultSet
)
m_ResultSet
.
close
(
)
;
}
catch
(
Exception
e
)
{
}
try
{
if
(
null
!=
m_Statement
)
m_Statement
.
close
(
)
;
}
catch
(
Exception
e
)
{
}
try
{
if
(
null
!=
m_Connection
)
m_ConnectionPool
.
releaseConnectionOnError
(
m_Connection
)
;
}
catch
(
Exception
e
)
{
}
}
protected
boolean
nextNode
(
)
{
if
(
DEBUG
)
System
.
out
.
println
(
"nextNode()"
)
;
try
{
return
false
;
}
catch
(
Exception
e
)
{
return
false
;
}
}
protected
int
_nextsib
(
int
identity
)
{
int
id
=
_exptype
(
identity
)
;
if
(
(
id
==
m_Row_TypeID
)
&&
(
identity
>=
m_LastRowIdx
)
)
{
if
(
DEBUG
)
System
.
out
.
println
(
"reading from the ResultSet"
)
;
addRowToDTMFromResultSet
(
)
;
}
return
super
.
_nextsib
(
identity
)
;
}
public
void
documentRegistration
(
)
{
if
(
DEBUG
)
System
.
out
.
println
(
"Document Registration"
)
;
}
public
void
documentRelease
(
)
{
if
(
DEBUG
)
System
.
out
.
println
(
"Document Release"
)
;
}
}
