package
org
.
apache
.
xalan
.
xsltc
.
runtime
.
output
;
import
java
.
util
.
Stack
;
import
org
.
apache
.
xalan
.
xsltc
.
*
;
import
org
.
apache
.
xalan
.
xsltc
.
runtime
.
*
;
import
org
.
apache
.
xalan
.
xsltc
.
runtime
.
Hashtable
;
import
org
.
apache
.
xalan
.
xsltc
.
TransletException
;
import
org
.
apache
.
xalan
.
xsltc
.
TransletOutputHandler
;
import
org
.
apache
.
xalan
.
xsltc
.
runtime
.
Hashtable
;
public
abstract
class
OutputBase
implements
TransletOutputHandler
,
Constants
{
protected
String
_doctypeSystem
=
null
;
protected
String
_doctypePublic
=
null
;
protected
int
_depth
=
0
;
protected
Hashtable
_namespaces
;
protected
Stack
_nodeStack
;
protected
Stack
_prefixStack
;
protected
Hashtable
_cdata
=
null
;
protected
Stack
_cdataStack
;
protected
boolean
_cdataTagOpen
=
false
;
protected
boolean
_startTagOpen
=
false
;
protected
boolean
_firstElement
=
true
;
protected
void
initCDATA
(
)
{
_cdataStack
=
new
Stack
(
)
;
_cdataStack
.
push
(
new
Integer
(
-
1
)
)
;
}
protected
void
initNamespaces
(
)
{
_namespaces
=
new
Hashtable
(
)
;
_nodeStack
=
new
Stack
(
)
;
_prefixStack
=
new
Stack
(
)
;
Stack
stack
;
_namespaces
.
put
(
EMPTYSTRING
,
stack
=
new
Stack
(
)
)
;
stack
.
push
(
EMPTYSTRING
)
;
_prefixStack
.
push
(
EMPTYSTRING
)
;
_namespaces
.
put
(
XML_PREFIX
,
stack
=
new
Stack
(
)
)
;
stack
.
push
(
"http://www.w3.org/XML/1998/namespace"
)
;
_prefixStack
.
push
(
XML_PREFIX
)
;
_nodeStack
.
push
(
new
Integer
(
-
1
)
)
;
_depth
=
0
;
}
public
void
setDoctype
(
String
system
,
String
pub
)
{
_doctypeSystem
=
system
;
_doctypePublic
=
pub
;
}
public
void
setCdataElements
(
Hashtable
elements
)
{
_cdata
=
elements
;
}
protected
static
String
patchName
(
String
qname
)
throws
TransletException
{
final
int
lastColon
=
qname
.
lastIndexOf
(
':'
)
;
if
(
lastColon
>
0
)
{
final
int
firstColon
=
qname
.
indexOf
(
':'
)
;
if
(
firstColon
!=
lastColon
)
{
return
qname
.
substring
(
0
,
firstColon
)
+
qname
.
substring
(
lastColon
)
;
}
}
return
qname
;
}
protected
boolean
pushNamespace
(
String
prefix
,
String
uri
)
{
if
(
prefix
.
startsWith
(
XML_PREFIX
)
)
{
return
false
;
}
Stack
stack
;
if
(
(
stack
=
(
Stack
)
_namespaces
.
get
(
prefix
)
)
==
null
)
{
_namespaces
.
put
(
prefix
,
stack
=
new
Stack
(
)
)
;
}
if
(
!
stack
.
empty
(
)
&&
uri
.
equals
(
stack
.
peek
(
)
)
)
{
return
false
;
}
stack
.
push
(
uri
)
;
_prefixStack
.
push
(
prefix
)
;
_nodeStack
.
push
(
new
Integer
(
_depth
)
)
;
return
true
;
}
protected
boolean
popNamespace
(
String
prefix
)
{
if
(
prefix
.
startsWith
(
XML_PREFIX
)
)
{
return
false
;
}
Stack
stack
;
if
(
(
stack
=
(
Stack
)
_namespaces
.
get
(
prefix
)
)
!=
null
)
{
stack
.
pop
(
)
;
return
true
;
}
return
false
;
}
protected
void
popNamespaces
(
)
{
while
(
true
)
{
if
(
_nodeStack
.
isEmpty
(
)
)
return
;
Integer
i
=
(
Integer
)
(
_nodeStack
.
peek
(
)
)
;
if
(
i
.
intValue
(
)
!=
_depth
)
return
;
_nodeStack
.
pop
(
)
;
popNamespace
(
(
String
)
_prefixStack
.
pop
(
)
)
;
}
}
protected
String
lookupNamespace
(
String
prefix
)
{
final
Stack
stack
=
(
Stack
)
_namespaces
.
get
(
prefix
)
;
return
stack
!=
null
&&
!
stack
.
isEmpty
(
)
?
(
String
)
stack
.
peek
(
)
:
null
;
}
protected
static
String
getLocalName
(
String
qname
)
{
final
int
col
=
qname
.
lastIndexOf
(
':'
)
;
return
(
col
>
0
)
?
qname
.
substring
(
col
+
1
)
:
qname
;
}
protected
String
getNamespaceURI
(
String
qname
,
boolean
isElement
)
throws
TransletException
{
String
uri
=
EMPTYSTRING
;
int
col
=
qname
.
lastIndexOf
(
':'
)
;
final
String
prefix
=
(
col
>
0
)
?
qname
.
substring
(
0
,
col
)
:
EMPTYSTRING
;
if
(
prefix
!=
EMPTYSTRING
||
isElement
)
{
uri
=
lookupNamespace
(
prefix
)
;
if
(
uri
==
null
&&
!
prefix
.
equals
(
XMLNS_PREFIX
)
)
{
BasisLibrary
.
runTimeError
(
BasisLibrary
.
NAMESPACE_PREFIX_ERR
,
qname
.
substring
(
0
,
col
)
)
;
}
}
return
uri
;
}
public
void
startCDATA
(
)
throws
TransletException
{
}
public
void
endCDATA
(
)
throws
TransletException
{
}
public
void
namespace
(
String
prefix
,
String
uri
)
throws
TransletException
{
}
public
void
setType
(
int
type
)
{
}
public
void
setIndent
(
boolean
indent
)
{
}
public
void
omitHeader
(
boolean
value
)
{
}
public
boolean
setEscaping
(
boolean
escape
)
throws
TransletException
{
return
true
;
}
public
void
setMediaType
(
String
mediaType
)
{
}
public
void
setStandalone
(
String
standalone
)
{
}
public
void
setVersion
(
String
version
)
{
}
public
void
close
(
)
{
}
}
