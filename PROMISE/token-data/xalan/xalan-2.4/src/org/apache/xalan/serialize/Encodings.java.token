package
org
.
apache
.
xalan
.
serialize
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
Writer
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
net
.
URL
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Properties
;
public
class
Encodings
extends
Object
{
static
final
int
m_defaultLastPrintable
=
0x7F
;
static
final
String
ENCODINGS_FILE
=
"org/apache/xalan/serialize/Encodings.properties"
;
private
static
final
Class
[
]
NO_CLASSES
=
new
Class
[
0
]
;
private
static
final
Object
[
]
NO_OBJS
=
new
Object
[
0
]
;
public
static
Writer
getWriter
(
OutputStream
output
,
String
encoding
)
throws
UnsupportedEncodingException
{
for
(
int
i
=
0
;
i
<
_encodings
.
length
;
++
i
)
{
if
(
_encodings
[
i
]
.
name
.
equalsIgnoreCase
(
encoding
)
)
{
try
{
return
new
OutputStreamWriter
(
output
,
_encodings
[
i
]
.
javaName
)
;
}
catch
(
java
.
lang
.
IllegalArgumentException
iae
)
{
}
catch
(
UnsupportedEncodingException
usee
)
{
}
}
}
try
{
return
new
OutputStreamWriter
(
output
,
encoding
)
;
}
catch
(
java
.
lang
.
IllegalArgumentException
iae
)
{
throw
new
UnsupportedEncodingException
(
encoding
)
;
}
}
public
static
Object
getCharToByteConverter
(
String
encoding
)
{
Class
charToByteConverterClass
=
null
;
java
.
lang
.
reflect
.
Method
getConverterMethod
=
null
;
try
{
charToByteConverterClass
=
Class
.
forName
(
"sun.io.CharToByteConverter"
)
;
Class
argTypes
[
]
=
new
Class
[
1
]
;
argTypes
[
0
]
=
String
.
class
;
getConverterMethod
=
charToByteConverterClass
.
getMethod
(
"getConverter"
,
argTypes
)
;
}
catch
(
Exception
e
)
{
System
.
err
.
println
(
"Warning: Could not get charToByteConverterClass!"
)
;
return
null
;
}
Object
args
[
]
=
new
Object
[
1
]
;
for
(
int
i
=
0
;
i
<
_encodings
.
length
;
++
i
)
{
if
(
_encodings
[
i
]
.
name
.
equalsIgnoreCase
(
encoding
)
)
{
try
{
args
[
0
]
=
_encodings
[
i
]
.
javaName
;
Object
converter
=
getConverterMethod
.
invoke
(
null
,
args
)
;
if
(
null
!=
converter
)
return
converter
;
}
catch
(
Exception
iae
)
{
}
}
}
return
null
;
}
public
static
int
getLastPrintable
(
String
encoding
)
{
for
(
int
i
=
0
;
i
<
_encodings
.
length
;
++
i
)
{
if
(
_encodings
[
i
]
.
name
.
equalsIgnoreCase
(
encoding
)
||
_encodings
[
i
]
.
javaName
.
equalsIgnoreCase
(
encoding
)
)
return
_encodings
[
i
]
.
lastPrintable
;
}
return
m_defaultLastPrintable
;
}
public
static
int
getLastPrintable
(
)
{
return
m_defaultLastPrintable
;
}
public
static
final
String
DEFAULT_MIME_ENCODING
=
"UTF-8"
;
public
static
String
getMimeEncoding
(
String
encoding
)
{
if
(
null
==
encoding
)
{
try
{
encoding
=
System
.
getProperty
(
"file.encoding"
,
"UTF8"
)
;
if
(
null
!=
encoding
)
{
String
jencoding
=
(
encoding
.
equalsIgnoreCase
(
"Cp1252"
)
||
encoding
.
equalsIgnoreCase
(
"ISO8859_1"
)
||
encoding
.
equalsIgnoreCase
(
"8859_1"
)
||
encoding
.
equalsIgnoreCase
(
"UTF8"
)
)
?
DEFAULT_MIME_ENCODING
:
convertJava2MimeEncoding
(
encoding
)
;
encoding
=
(
null
!=
jencoding
)
?
jencoding
:
DEFAULT_MIME_ENCODING
;
}
else
{
encoding
=
DEFAULT_MIME_ENCODING
;
}
}
catch
(
SecurityException
se
)
{
encoding
=
DEFAULT_MIME_ENCODING
;
}
}
else
{
encoding
=
convertJava2MimeEncoding
(
encoding
)
;
}
return
encoding
;
}
public
static
String
convertJava2MimeEncoding
(
String
encoding
)
{
for
(
int
i
=
0
;
i
<
_encodings
.
length
;
++
i
)
{
if
(
_encodings
[
i
]
.
javaName
.
equalsIgnoreCase
(
encoding
)
)
{
return
_encodings
[
i
]
.
name
;
}
}
return
encoding
;
}
public
static
String
convertMime2JavaEncoding
(
String
encoding
)
{
for
(
int
i
=
0
;
i
<
_encodings
.
length
;
++
i
)
{
if
(
_encodings
[
i
]
.
name
.
equalsIgnoreCase
(
encoding
)
)
{
return
_encodings
[
i
]
.
javaName
;
}
}
return
encoding
;
}
private
static
EncodingInfo
[
]
loadEncodingInfo
(
)
{
URL
url
=
null
;
try
{
String
urlString
=
null
;
try
{
urlString
=
System
.
getProperty
(
"org.apache.xalan.serialize.encodings"
,
""
)
;
}
catch
(
SecurityException
e
)
{
}
if
(
urlString
!=
null
&&
urlString
.
length
(
)
>
0
)
url
=
new
URL
(
urlString
)
;
if
(
url
==
null
)
{
ClassLoader
cl
=
null
;
try
{
java
.
lang
.
reflect
.
Method
getCCL
=
Thread
.
class
.
getMethod
(
"getContextClassLoader"
,
NO_CLASSES
)
;
if
(
getCCL
!=
null
)
{
cl
=
(
ClassLoader
)
getCCL
.
invoke
(
Thread
.
currentThread
(
)
,
NO_OBJS
)
;
}
}
catch
(
Exception
e
)
{
}
if
(
cl
!=
null
)
{
url
=
cl
.
getResource
(
ENCODINGS_FILE
)
;
}
}
if
(
url
==
null
)
url
=
ClassLoader
.
getSystemResource
(
ENCODINGS_FILE
)
;
Properties
props
=
new
Properties
(
)
;
if
(
url
!=
null
)
{
InputStream
is
=
url
.
openStream
(
)
;
props
.
load
(
is
)
;
is
.
close
(
)
;
}
else
{
}
int
totalEntries
=
props
.
size
(
)
;
EncodingInfo
[
]
ret
=
new
EncodingInfo
[
totalEntries
]
;
Enumeration
keys
=
props
.
keys
(
)
;
for
(
int
i
=
0
;
i
<
totalEntries
;
++
i
)
{
String
mimeName
=
(
String
)
keys
.
nextElement
(
)
;
String
val
=
props
.
getProperty
(
mimeName
)
;
int
pos
=
val
.
indexOf
(
' '
)
;
String
javaName
;
int
lastPrintable
;
if
(
pos
<
0
)
{
javaName
=
val
;
lastPrintable
=
0x00FF
;
}
else
{
javaName
=
val
.
substring
(
0
,
pos
)
;
lastPrintable
=
Integer
.
decode
(
val
.
substring
(
pos
)
.
trim
(
)
)
.
intValue
(
)
;
}
ret
[
i
]
=
new
EncodingInfo
(
mimeName
,
javaName
,
lastPrintable
)
;
}
return
ret
;
}
catch
(
java
.
net
.
MalformedURLException
mue
)
{
throw
new
org
.
apache
.
xml
.
utils
.
WrappedRuntimeException
(
mue
)
;
}
catch
(
java
.
io
.
IOException
ioe
)
{
throw
new
org
.
apache
.
xml
.
utils
.
WrappedRuntimeException
(
ioe
)
;
}
}
private
static
final
EncodingInfo
[
]
_encodings
=
loadEncodingInfo
(
)
;
}
