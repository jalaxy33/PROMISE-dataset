package
org
.
apache
.
xalan
.
templates
;
import
org
.
apache
.
xml
.
dtm
.
DTM
;
import
java
.
util
.
Vector
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
xml
.
utils
.
StringBufferPool
;
import
org
.
apache
.
xml
.
utils
.
FastStringBuffer
;
import
javax
.
xml
.
transform
.
TransformerException
;
import
org
.
apache
.
xpath
.
XPathContext
;
import
org
.
apache
.
xpath
.
XPath
;
import
org
.
apache
.
xalan
.
res
.
XSLTErrorResources
;
import
org
.
apache
.
xml
.
utils
.
PrefixResolver
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xalan
.
processor
.
StylesheetHandler
;
import
javax
.
xml
.
transform
.
ErrorListener
;
public
class
AVT
implements
java
.
io
.
Serializable
,
XSLTVisitable
{
private
String
m_simpleString
=
null
;
private
Vector
m_parts
=
null
;
private
String
m_rawName
;
public
String
getRawName
(
)
{
return
m_rawName
;
}
public
void
setRawName
(
String
rawName
)
{
m_rawName
=
rawName
;
}
private
String
m_name
;
public
String
getName
(
)
{
return
m_name
;
}
public
void
setName
(
String
name
)
{
m_name
=
name
;
}
private
String
m_uri
;
public
String
getURI
(
)
{
return
m_uri
;
}
public
void
setURI
(
String
uri
)
{
m_uri
=
uri
;
}
public
AVT
(
StylesheetHandler
handler
,
String
uri
,
String
name
,
String
rawName
,
String
stringedValue
,
ElemTemplateElement
owner
)
throws
javax
.
xml
.
transform
.
TransformerException
{
m_uri
=
uri
;
m_name
=
name
;
m_rawName
=
rawName
;
StringTokenizer
tokenizer
=
new
StringTokenizer
(
stringedValue
,
"{}\"\'"
,
true
)
;
int
nTokens
=
tokenizer
.
countTokens
(
)
;
if
(
nTokens
<
2
)
{
m_simpleString
=
stringedValue
;
}
else
{
FastStringBuffer
buffer
=
StringBufferPool
.
get
(
)
;
FastStringBuffer
exprBuffer
=
StringBufferPool
.
get
(
)
;
try
{
m_parts
=
new
Vector
(
nTokens
+
1
)
;
String
t
=
null
;
String
lookahead
=
null
;
String
error
=
null
;
while
(
tokenizer
.
hasMoreTokens
(
)
)
{
if
(
lookahead
!=
null
)
{
t
=
lookahead
;
lookahead
=
null
;
}
else
t
=
tokenizer
.
nextToken
(
)
;
if
(
t
.
length
(
)
==
1
)
{
switch
(
t
.
charAt
(
0
)
)
{
case
(
'\"'
)
:
case
(
'\''
)
:
{
buffer
.
append
(
t
)
;
break
;
}
case
(
'{'
)
:
{
try
{
lookahead
=
tokenizer
.
nextToken
(
)
;
if
(
lookahead
.
equals
(
"{"
)
)
{
buffer
.
append
(
lookahead
)
;
lookahead
=
null
;
break
;
}
else
{
if
(
buffer
.
length
(
)
>
0
)
{
m_parts
.
addElement
(
new
AVTPartSimple
(
buffer
.
toString
(
)
)
)
;
buffer
.
setLength
(
0
)
;
}
exprBuffer
.
setLength
(
0
)
;
while
(
null
!=
lookahead
)
{
if
(
lookahead
.
length
(
)
==
1
)
{
switch
(
lookahead
.
charAt
(
0
)
)
{
case
'\''
:
case
'\"'
:
{
exprBuffer
.
append
(
lookahead
)
;
String
quote
=
lookahead
;
lookahead
=
tokenizer
.
nextToken
(
)
;
while
(
!
lookahead
.
equals
(
quote
)
)
{
exprBuffer
.
append
(
lookahead
)
;
lookahead
=
tokenizer
.
nextToken
(
)
;
}
exprBuffer
.
append
(
lookahead
)
;
lookahead
=
tokenizer
.
nextToken
(
)
;
break
;
}
case
'{'
:
{
error
=
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_NO_CURLYBRACE
,
null
)
;
lookahead
=
null
;
break
;
}
case
'}'
:
{
buffer
.
setLength
(
0
)
;
XPath
xpath
=
handler
.
createXPath
(
exprBuffer
.
toString
(
)
,
owner
)
;
m_parts
.
addElement
(
new
AVTPartXPath
(
xpath
)
)
;
lookahead
=
null
;
break
;
}
default
:
{
exprBuffer
.
append
(
lookahead
)
;
lookahead
=
tokenizer
.
nextToken
(
)
;
}
}
}
else
{
exprBuffer
.
append
(
lookahead
)
;
lookahead
=
tokenizer
.
nextToken
(
)
;
}
}
if
(
error
!=
null
)
{
break
;
}
}
break
;
}
catch
(
java
.
util
.
NoSuchElementException
ex
)
{
error
=
XSLMessages
.
createMessage
(
XSLTErrorResources
.
ER_ILLEGAL_ATTRIBUTE_VALUE
,
new
Object
[
]
{
name
,
stringedValue
}
)
;
break
;
}
}
case
(
'}'
)
:
{
lookahead
=
tokenizer
.
nextToken
(
)
;
if
(
lookahead
.
equals
(
"}"
)
)
{
buffer
.
append
(
lookahead
)
;
lookahead
=
null
;
}
else
{
try
{
handler
.
warn
(
XSLTErrorResources
.
WG_FOUND_CURLYBRACE
,
null
)
;
}
catch
(
org
.
xml
.
sax
.
SAXException
se
)
{
throw
new
TransformerException
(
se
)
;
}
buffer
.
append
(
"}"
)
;
}
break
;
}
default
:
{
buffer
.
append
(
t
)
;
}
}
}
else
{
buffer
.
append
(
t
)
;
}
if
(
null
!=
error
)
{
try
{
handler
.
warn
(
XSLTErrorResources
.
WG_ATTR_TEMPLATE
,
new
Object
[
]
{
error
}
)
;
}
catch
(
org
.
xml
.
sax
.
SAXException
se
)
{
throw
new
TransformerException
(
se
)
;
}
break
;
}
}
if
(
buffer
.
length
(
)
>
0
)
{
m_parts
.
addElement
(
new
AVTPartSimple
(
buffer
.
toString
(
)
)
)
;
buffer
.
setLength
(
0
)
;
}
}
finally
{
StringBufferPool
.
free
(
buffer
)
;
StringBufferPool
.
free
(
exprBuffer
)
;
}
}
if
(
null
==
m_parts
&&
(
null
==
m_simpleString
)
)
{
m_simpleString
=
""
;
}
}
public
String
getSimpleString
(
)
{
if
(
null
!=
m_simpleString
)
{
return
m_simpleString
;
}
else
if
(
null
!=
m_parts
)
{
FastStringBuffer
buf
=
StringBufferPool
.
get
(
)
;
String
s
;
try
{
buf
.
setLength
(
0
)
;
int
n
=
m_parts
.
size
(
)
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
AVTPart
part
=
(
AVTPart
)
m_parts
.
elementAt
(
i
)
;
buf
.
append
(
part
.
getSimpleString
(
)
)
;
}
s
=
buf
.
toString
(
)
;
}
finally
{
StringBufferPool
.
free
(
buf
)
;
}
return
s
;
}
else
{
return
""
;
}
}
public
String
evaluate
(
XPathContext
xctxt
,
int
context
,
org
.
apache
.
xml
.
utils
.
PrefixResolver
nsNode
)
throws
javax
.
xml
.
transform
.
TransformerException
{
FastStringBuffer
buf
=
StringBufferPool
.
get
(
)
;
try
{
if
(
null
!=
m_simpleString
)
{
return
m_simpleString
;
}
else
if
(
null
!=
m_parts
)
{
buf
.
setLength
(
0
)
;
int
n
=
m_parts
.
size
(
)
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
AVTPart
part
=
(
AVTPart
)
m_parts
.
elementAt
(
i
)
;
part
.
evaluate
(
xctxt
,
buf
,
context
,
nsNode
)
;
}
return
buf
.
toString
(
)
;
}
else
{
return
""
;
}
}
finally
{
StringBufferPool
.
free
(
buf
)
;
}
}
public
boolean
isContextInsensitive
(
)
{
return
null
!=
m_simpleString
;
}
public
boolean
canTraverseOutsideSubtree
(
)
{
if
(
null
!=
m_parts
)
{
int
n
=
m_parts
.
size
(
)
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
AVTPart
part
=
(
AVTPart
)
m_parts
.
elementAt
(
i
)
;
if
(
part
.
canTraverseOutsideSubtree
(
)
)
return
true
;
}
}
return
false
;
}
public
void
fixupVariables
(
java
.
util
.
Vector
vars
,
int
globalsSize
)
{
if
(
null
!=
m_parts
)
{
int
n
=
m_parts
.
size
(
)
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
AVTPart
part
=
(
AVTPart
)
m_parts
.
elementAt
(
i
)
;
part
.
fixupVariables
(
vars
,
globalsSize
)
;
}
}
}
public
void
callVisitors
(
XSLTVisitor
visitor
)
{
if
(
visitor
.
visitAVT
(
this
)
&&
(
null
!=
m_parts
)
)
{
int
n
=
m_parts
.
size
(
)
;
for
(
int
i
=
0
;
i
<
n
;
i
++
)
{
AVTPart
part
=
(
AVTPart
)
m_parts
.
elementAt
(
i
)
;
part
.
callVisitors
(
visitor
)
;
}
}
}
public
boolean
isSimple
(
)
{
return
m_simpleString
!=
null
;
}
}
