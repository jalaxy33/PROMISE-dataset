package
org
.
apache
.
xalan
.
serialize
;
import
org
.
xml
.
sax
.
*
;
import
java
.
util
.
*
;
import
java
.
io
.
*
;
import
org
.
apache
.
xpath
.
res
.
XPATHErrorResources
;
import
org
.
apache
.
xalan
.
res
.
XSLMessages
;
import
org
.
apache
.
xalan
.
templates
.
OutputProperties
;
import
javax
.
xml
.
transform
.
OutputKeys
;
public
class
SerializerToText
extends
SerializerToXML
{
public
SerializerToText
(
)
{
super
(
)
;
}
public
void
setDocumentLocator
(
Locator
locator
)
{
}
public
void
startDocument
(
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
endDocument
(
)
throws
org
.
xml
.
sax
.
SAXException
{
flushWriter
(
)
;
}
public
void
startElement
(
String
namespaceURI
,
String
localName
,
String
name
,
Attributes
atts
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
endElement
(
String
namespaceURI
,
String
localName
,
String
name
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
characters
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
try
{
writeNormalizedChars
(
ch
,
start
,
length
,
false
)
;
}
catch
(
IOException
ioe
)
{
throw
new
SAXException
(
ioe
)
;
}
this
.
flushWriter
(
)
;
}
public
void
charactersRaw
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
try
{
writeNormalizedChars
(
ch
,
start
,
length
,
false
)
;
}
catch
(
IOException
ioe
)
{
throw
new
SAXException
(
ioe
)
;
}
flushWriter
(
)
;
}
protected
int
writeUTF16Surrogate
(
char
c
,
char
ch
[
]
,
int
i
,
int
end
)
throws
IOException
,
org
.
xml
.
sax
.
SAXException
{
int
surrogateValue
=
getURF16SurrogateValue
(
c
,
ch
,
i
,
end
)
;
i
++
;
m_writer
.
write
(
surrogateValue
)
;
return
i
;
}
void
writeNormalizedChars
(
char
ch
[
]
,
int
start
,
int
length
,
boolean
isCData
)
throws
IOException
,
org
.
xml
.
sax
.
SAXException
{
int
end
=
start
+
length
;
for
(
int
i
=
start
;
i
<
end
;
i
++
)
{
char
c
=
ch
[
i
]
;
if
(
CharInfo
.
S_LINEFEED
==
c
)
{
m_writer
.
write
(
m_lineSep
,
0
,
m_lineSepLen
)
;
}
else
if
(
isCData
&&
(
c
>
m_maxCharacter
)
)
{
if
(
i
!=
0
)
m_writer
.
write
(
"]]>"
)
;
if
(
isUTF16Surrogate
(
c
)
)
{
i
=
writeUTF16Surrogate
(
c
,
ch
,
i
,
end
)
;
}
else
{
m_writer
.
write
(
c
)
;
}
if
(
(
i
!=
0
)
&&
(
i
<
(
end
-
1
)
)
)
m_writer
.
write
(
"<![CDATA["
)
;
}
else
if
(
isCData
&&
(
(
i
<
(
end
-
2
)
)
&&
(
']'
==
c
)
&&
(
']'
==
ch
[
i
+
1
]
)
&&
(
'>'
==
ch
[
i
+
2
]
)
)
)
{
m_writer
.
write
(
"]]]]><![CDATA[>"
)
;
i
+=
2
;
}
else
{
if
(
c
<=
m_maxCharacter
)
{
m_writer
.
write
(
c
)
;
}
else
if
(
isUTF16Surrogate
(
c
)
)
{
i
=
writeUTF16Surrogate
(
c
,
ch
,
i
,
end
)
;
}
else
{
m_writer
.
write
(
c
)
;
}
}
}
}
public
void
cdata
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
try
{
writeNormalizedChars
(
ch
,
start
,
length
,
false
)
;
}
catch
(
IOException
ioe
)
{
throw
new
SAXException
(
ioe
)
;
}
flushWriter
(
)
;
}
public
void
ignorableWhitespace
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
try
{
writeNormalizedChars
(
ch
,
start
,
length
,
false
)
;
}
catch
(
IOException
ioe
)
{
throw
new
SAXException
(
ioe
)
;
}
flushWriter
(
)
;
}
public
void
processingInstruction
(
String
target
,
String
data
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
comment
(
String
data
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
comment
(
char
ch
[
]
,
int
start
,
int
length
)
throws
org
.
xml
.
sax
.
SAXException
{
}
public
void
entityReference
(
String
name
)
throws
org
.
xml
.
sax
.
SAXException
{
}
}
