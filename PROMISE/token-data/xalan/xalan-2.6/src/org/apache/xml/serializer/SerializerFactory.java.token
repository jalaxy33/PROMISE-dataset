package
org
.
apache
.
xml
.
serializer
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Properties
;
import
javax
.
xml
.
transform
.
OutputKeys
;
import
org
.
apache
.
xml
.
res
.
XMLErrorResources
;
import
org
.
apache
.
xml
.
res
.
XMLMessages
;
import
org
.
xml
.
sax
.
ContentHandler
;
public
abstract
class
SerializerFactory
{
private
static
Hashtable
m_formats
=
new
Hashtable
(
)
;
public
static
Serializer
getSerializer
(
Properties
format
)
{
Serializer
ser
;
try
{
String
method
=
format
.
getProperty
(
OutputKeys
.
METHOD
)
;
if
(
method
==
null
)
throw
new
IllegalArgumentException
(
"The output format has a null method name"
)
;
String
className
=
format
.
getProperty
(
OutputPropertiesFactory
.
S_KEY_CONTENT_HANDLER
)
;
if
(
null
==
className
)
{
Properties
methodDefaults
=
OutputPropertiesFactory
.
getDefaultMethodProperties
(
method
)
;
className
=
methodDefaults
.
getProperty
(
OutputPropertiesFactory
.
S_KEY_CONTENT_HANDLER
)
;
if
(
null
==
className
)
throw
new
IllegalArgumentException
(
"The output format must have a '"
+
OutputPropertiesFactory
.
S_KEY_CONTENT_HANDLER
+
"' property!"
)
;
}
ClassLoader
loader
=
ObjectFactory
.
findClassLoader
(
)
;
Class
cls
=
ObjectFactory
.
findProviderClass
(
className
,
loader
,
true
)
;
Object
obj
=
cls
.
newInstance
(
)
;
if
(
obj
instanceof
SerializationHandler
)
{
ser
=
(
Serializer
)
cls
.
newInstance
(
)
;
ser
.
setOutputFormat
(
format
)
;
}
else
{
if
(
obj
instanceof
ContentHandler
)
{
className
=
SerializerConstants
.
DEFAULT_SAX_SERIALIZER
;
cls
=
ObjectFactory
.
findProviderClass
(
className
,
loader
,
true
)
;
SerializationHandler
sh
=
(
SerializationHandler
)
cls
.
newInstance
(
)
;
sh
.
setContentHandler
(
(
ContentHandler
)
obj
)
;
sh
.
setOutputFormat
(
format
)
;
ser
=
sh
;
}
else
{
throw
new
Exception
(
XMLMessages
.
createXMLMessage
(
XMLErrorResources
.
ER_SERIALIZER_NOT_CONTENTHANDLER
,
new
Object
[
]
{
className
}
)
)
;
}
}
}
catch
(
Exception
e
)
{
throw
new
org
.
apache
.
xml
.
utils
.
WrappedRuntimeException
(
e
)
;
}
return
ser
;
}
}
