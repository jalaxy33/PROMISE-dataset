package
org
.
apache
.
xml
.
serializer
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
io
.
Writer
;
public
final
class
WriterToUTF8Buffered
extends
Writer
{
private
static
final
int
BYTES_MAX
=
16
*
1024
;
private
static
final
int
CHARS_MAX
=
(
BYTES_MAX
/
3
)
;
private
final
OutputStream
m_os
;
private
final
byte
m_outputBytes
[
]
;
private
final
char
m_inputChars
[
]
;
private
int
count
;
public
WriterToUTF8Buffered
(
OutputStream
out
)
throws
UnsupportedEncodingException
{
m_os
=
out
;
m_outputBytes
=
new
byte
[
BYTES_MAX
+
3
]
;
m_inputChars
=
new
char
[
CHARS_MAX
+
1
]
;
count
=
0
;
}
public
void
write
(
final
int
c
)
throws
IOException
{
if
(
count
>=
BYTES_MAX
)
flushBuffer
(
)
;
if
(
c
<
0x80
)
{
m_outputBytes
[
count
++
]
=
(
byte
)
(
c
)
;
}
else
if
(
c
<
0x800
)
{
m_outputBytes
[
count
++
]
=
(
byte
)
(
0xc0
+
(
c
>
>
6
)
)
;
m_outputBytes
[
count
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
m_outputBytes
[
count
++
]
=
(
byte
)
(
0xe0
+
(
c
>
>
12
)
)
;
m_outputBytes
[
count
++
]
=
(
byte
)
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
m_outputBytes
[
count
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
public
void
write
(
final
char
chars
[
]
,
final
int
start
,
final
int
length
)
throws
java
.
io
.
IOException
{
int
lengthx3
=
3
*
length
;
if
(
lengthx3
>=
BYTES_MAX
-
count
)
{
flushBuffer
(
)
;
if
(
lengthx3
>=
BYTES_MAX
)
{
final
int
chunks
=
1
+
length
/
CHARS_MAX
;
for
(
int
chunk
=
0
;
chunk
<
chunks
;
chunk
++
)
{
int
start_chunk
=
start
+
(
(
length
*
chunk
)
/
chunks
)
;
int
end_chunk
=
start
+
(
(
length
*
(
chunk
+
1
)
)
/
chunks
)
;
int
len_chunk
=
(
end_chunk
-
start_chunk
)
;
this
.
write
(
chars
,
start_chunk
,
len_chunk
)
;
}
return
;
}
}
final
int
n
=
length
+
start
;
final
byte
[
]
buf_loc
=
m_outputBytes
;
int
count_loc
=
count
;
int
i
=
start
;
{
char
c
;
for
(
;
i
<
n
&&
(
c
=
chars
[
i
]
)
<
0x80
;
i
++
)
buf_loc
[
count_loc
++
]
=
(
byte
)
c
;
}
for
(
;
i
<
n
;
i
++
)
{
final
char
c
=
chars
[
i
]
;
if
(
c
<
0x80
)
buf_loc
[
count_loc
++
]
=
(
byte
)
(
c
)
;
else
if
(
c
<
0x800
)
{
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0xc0
+
(
c
>
>
6
)
)
;
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0xe0
+
(
c
>
>
12
)
)
;
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
count
=
count_loc
;
}
private
void
directWrite
(
final
char
chars
[
]
,
final
int
start
,
final
int
length
)
throws
java
.
io
.
IOException
{
if
(
length
>=
BYTES_MAX
-
count
)
{
flushBuffer
(
)
;
if
(
length
>=
BYTES_MAX
)
{
int
chunks
=
1
+
length
/
CHARS_MAX
;
for
(
int
chunk
=
0
;
chunk
<
chunks
;
chunk
++
)
{
int
start_chunk
=
start
+
(
(
length
*
chunk
)
/
chunks
)
;
int
end_chunk
=
start
+
(
(
length
*
(
chunk
+
1
)
)
/
chunks
)
;
int
len_chunk
=
(
end_chunk
-
start_chunk
)
;
this
.
directWrite
(
chars
,
start_chunk
,
len_chunk
)
;
}
return
;
}
}
final
int
n
=
length
+
start
;
final
byte
[
]
buf_loc
=
m_outputBytes
;
int
count_loc
=
count
;
for
(
int
i
=
start
;
i
<
n
;
i
++
)
buf_loc
[
count_loc
++
]
=
(
byte
)
buf_loc
[
i
]
;
count
=
count_loc
;
}
public
void
write
(
final
String
s
)
throws
IOException
{
final
int
length
=
s
.
length
(
)
;
int
lengthx3
=
3
*
length
;
if
(
lengthx3
>=
BYTES_MAX
-
count
)
{
flushBuffer
(
)
;
if
(
lengthx3
>=
BYTES_MAX
)
{
final
int
start
=
0
;
int
chunks
=
1
+
length
/
CHARS_MAX
;
for
(
int
chunk
=
0
;
chunk
<
chunks
;
chunk
++
)
{
int
start_chunk
=
start
+
(
(
length
*
chunk
)
/
chunks
)
;
int
end_chunk
=
start
+
(
(
length
*
(
chunk
+
1
)
)
/
chunks
)
;
int
len_chunk
=
(
end_chunk
-
start_chunk
)
;
s
.
getChars
(
start_chunk
,
end_chunk
,
m_inputChars
,
0
)
;
this
.
write
(
m_inputChars
,
0
,
len_chunk
)
;
}
return
;
}
}
s
.
getChars
(
0
,
length
,
m_inputChars
,
0
)
;
final
char
[
]
chars
=
m_inputChars
;
final
int
n
=
length
;
final
byte
[
]
buf_loc
=
m_outputBytes
;
int
count_loc
=
count
;
int
i
=
0
;
{
char
c
;
for
(
;
i
<
n
&&
(
c
=
chars
[
i
]
)
<
0x80
;
i
++
)
buf_loc
[
count_loc
++
]
=
(
byte
)
c
;
}
for
(
;
i
<
n
;
i
++
)
{
final
char
c
=
chars
[
i
]
;
if
(
c
<
0x80
)
buf_loc
[
count_loc
++
]
=
(
byte
)
(
c
)
;
else
if
(
c
<
0x800
)
{
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0xc0
+
(
c
>
>
6
)
)
;
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
else
{
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0xe0
+
(
c
>
>
12
)
)
;
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0x80
+
(
(
c
>
>
6
)
&
0x3f
)
)
;
buf_loc
[
count_loc
++
]
=
(
byte
)
(
0x80
+
(
c
&
0x3f
)
)
;
}
}
count
=
count_loc
;
}
public
void
flushBuffer
(
)
throws
IOException
{
if
(
count
>
0
)
{
m_os
.
write
(
m_outputBytes
,
0
,
count
)
;
count
=
0
;
}
}
public
void
flush
(
)
throws
java
.
io
.
IOException
{
flushBuffer
(
)
;
m_os
.
flush
(
)
;
}
public
void
close
(
)
throws
java
.
io
.
IOException
{
flushBuffer
(
)
;
m_os
.
close
(
)
;
}
public
OutputStream
getOutputStream
(
)
{
return
m_os
;
}
public
void
directWrite
(
final
String
s
)
throws
IOException
{
final
int
length
=
s
.
length
(
)
;
if
(
length
>=
BYTES_MAX
-
count
)
{
flushBuffer
(
)
;
if
(
length
>=
BYTES_MAX
)
{
final
int
start
=
0
;
int
chunks
=
1
+
length
/
CHARS_MAX
;
for
(
int
chunk
=
0
;
chunk
<
chunks
;
chunk
++
)
{
int
start_chunk
=
start
+
(
(
length
*
chunk
)
/
chunks
)
;
int
end_chunk
=
start
+
(
(
length
*
(
chunk
+
1
)
)
/
chunks
)
;
int
len_chunk
=
(
end_chunk
-
start_chunk
)
;
s
.
getChars
(
start_chunk
,
end_chunk
,
m_inputChars
,
0
)
;
this
.
directWrite
(
m_inputChars
,
0
,
len_chunk
)
;
}
return
;
}
}
s
.
getChars
(
0
,
length
,
m_inputChars
,
0
)
;
final
char
[
]
chars
=
m_inputChars
;
final
byte
[
]
buf_loc
=
m_outputBytes
;
int
count_loc
=
count
;
int
i
=
0
;
while
(
i
<
length
)
buf_loc
[
count_loc
++
]
=
(
byte
)
chars
[
i
++
]
;
count
=
count_loc
;
}
}
