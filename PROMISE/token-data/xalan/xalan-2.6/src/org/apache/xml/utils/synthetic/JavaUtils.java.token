package
org
.
apache
.
xml
.
utils
.
synthetic
;
import
java
.
io
.
IOException
;
public
class
JavaUtils
{
private
static
boolean
cantLoadCompiler
=
false
;
private
static
boolean
debug
=
false
;
public
static
void
setDebug
(
boolean
newDebug
)
{
debug
=
newDebug
;
}
public
static
boolean
JDKcompile
(
String
fileName
,
String
classPath
)
{
String
moreClassPath
=
System
.
getProperty
(
"org.apache.xml.utils.synthetic.moreclasspath"
,
""
)
.
trim
(
)
;
if
(
moreClassPath
.
length
(
)
>
0
)
classPath
=
moreClassPath
+
';'
+
classPath
;
if
(
debug
)
{
System
.
err
.
println
(
"JavaEngine: Compiling "
+
fileName
)
;
System
.
err
.
println
(
"JavaEngine: Classpath is "
+
classPath
)
;
}
String
code_option
=
debug
?
"-g"
:
"-O"
;
if
(
!
cantLoadCompiler
)
{
String
args
[
]
=
{
code_option
,
"-classpath"
,
classPath
,
fileName
}
;
}
String
javac_command
=
System
.
getProperty
(
"org.apache.xml.utils.synthetic.javac"
,
"javac"
)
;
String
args
[
]
=
{
javac_command
,
code_option
,
"-classpath"
,
classPath
,
fileName
}
;
try
{
Process
p
=
java
.
lang
.
Runtime
.
getRuntime
(
)
.
exec
(
args
)
;
int
compileOK
=
waitHardFor
(
p
)
;
return
compileOK
==
0
;
}
catch
(
IOException
e
)
{
System
.
err
.
println
(
"ERROR: IO exception during exec(javac)."
)
;
}
catch
(
SecurityException
e
)
{
System
.
err
.
println
(
"ERROR: Unable to create subprocess to exec(javac)."
)
;
}
return
false
;
}
static
int
waitHardFor
(
java
.
lang
.
Process
p
)
{
boolean
done
=
false
;
while
(
!
done
)
try
{
p
.
waitFor
(
)
;
done
=
true
;
}
catch
(
InterruptedException
e
)
{
System
.
err
.
println
(
"(Compiler process wait interrupted and resumed)"
)
;
}
int
ev
=
p
.
exitValue
(
)
;
return
ev
;
}
}
