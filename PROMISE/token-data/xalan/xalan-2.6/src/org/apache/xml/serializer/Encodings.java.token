package
org
.
apache
.
xml
.
serializer
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
io
.
Writer
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
net
.
URL
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Properties
;
import
java
.
util
.
StringTokenizer
;
import
java
.
security
.
PrivilegedAction
;
import
java
.
security
.
AccessController
;
public
class
Encodings
extends
Object
{
static
final
int
m_defaultLastPrintable
=
0x7F
;
static
final
String
ENCODINGS_FILE
=
"org/apache/xml/serializer/Encodings.properties"
;
static
final
String
ENCODINGS_PROP
=
"org.apache.xalan.serialize.encodings"
;
private
static
final
Method
SUN_CHAR2BYTE_CONVERTER_METHOD
=
findCharToByteConverterMethod
(
)
;
private
static
Method
findCharToByteConverterMethod
(
)
{
try
{
AccessController
.
doPrivileged
(
new
PrivilegedAction
(
)
{
public
Object
run
(
)
{
try
{
Class
charToByteConverterClass
=
(
Class
)
Class
.
forName
(
"sun.io.CharToByteConverter"
)
;
Class
argTypes
[
]
=
{
String
.
class
}
;
return
charToByteConverterClass
.
getMethod
(
"getConverter"
,
argTypes
)
;
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
e
.
toString
(
)
)
;
}
}
}
)
;
}
catch
(
Exception
e
)
{
System
.
err
.
println
(
"Warning: Could not get charToByteConverterClass!"
)
;
}
return
null
;
}
public
static
Writer
getWriter
(
OutputStream
output
,
String
encoding
)
throws
UnsupportedEncodingException
{
for
(
int
i
=
0
;
i
<
_encodings
.
length
;
++
i
)
{
if
(
_encodings
[
i
]
.
name
.
equalsIgnoreCase
(
encoding
)
)
{
try
{
return
new
OutputStreamWriter
(
output
,
_encodings
[
i
]
.
javaName
)
;
}
catch
(
java
.
lang
.
IllegalArgumentException
iae
)
{
}
catch
(
UnsupportedEncodingException
usee
)
{
}
}
}
try
{
return
new
OutputStreamWriter
(
output
,
encoding
)
;
}
catch
(
java
.
lang
.
IllegalArgumentException
iae
)
{
throw
new
UnsupportedEncodingException
(
encoding
)
;
}
}
public
static
Object
getCharToByteConverter
(
String
encoding
)
{
if
(
SUN_CHAR2BYTE_CONVERTER_METHOD
==
null
)
{
return
null
;
}
Object
args
[
]
=
new
Object
[
1
]
;
for
(
int
i
=
0
;
i
<
_encodings
.
length
;
++
i
)
{
if
(
_encodings
[
i
]
.
name
.
equalsIgnoreCase
(
encoding
)
)
{
try
{
args
[
0
]
=
_encodings
[
i
]
.
javaName
;
Object
converter
=
SUN_CHAR2BYTE_CONVERTER_METHOD
.
invoke
(
null
,
args
)
;
if
(
null
!=
converter
)
return
converter
;
}
catch
(
Exception
iae
)
{
}
}
}
return
null
;
}
public
static
int
getLastPrintable
(
String
encoding
)
{
EncodingInfo
ei
;
String
normalizedEncoding
=
encoding
.
toUpperCase
(
)
;
ei
=
(
EncodingInfo
)
_encodingTableKeyJava
.
get
(
normalizedEncoding
)
;
if
(
ei
==
null
)
ei
=
(
EncodingInfo
)
_encodingTableKeyMime
.
get
(
normalizedEncoding
)
;
if
(
ei
!=
null
)
return
ei
.
lastPrintable
;
return
m_defaultLastPrintable
;
}
public
static
int
getLastPrintable
(
)
{
return
m_defaultLastPrintable
;
}
public
static
final
String
DEFAULT_MIME_ENCODING
=
"UTF-8"
;
public
static
String
getMimeEncoding
(
String
encoding
)
{
if
(
null
==
encoding
)
{
try
{
encoding
=
System
.
getProperty
(
"file.encoding"
,
"UTF8"
)
;
if
(
null
!=
encoding
)
{
String
jencoding
=
(
encoding
.
equalsIgnoreCase
(
"Cp1252"
)
||
encoding
.
equalsIgnoreCase
(
"ISO8859_1"
)
||
encoding
.
equalsIgnoreCase
(
"8859_1"
)
||
encoding
.
equalsIgnoreCase
(
"UTF8"
)
)
?
DEFAULT_MIME_ENCODING
:
convertJava2MimeEncoding
(
encoding
)
;
encoding
=
(
null
!=
jencoding
)
?
jencoding
:
DEFAULT_MIME_ENCODING
;
}
else
{
encoding
=
DEFAULT_MIME_ENCODING
;
}
}
catch
(
SecurityException
se
)
{
encoding
=
DEFAULT_MIME_ENCODING
;
}
}
else
{
encoding
=
convertJava2MimeEncoding
(
encoding
)
;
}
return
encoding
;
}
public
static
String
convertJava2MimeEncoding
(
String
encoding
)
{
EncodingInfo
enc
=
(
EncodingInfo
)
_encodingTableKeyJava
.
get
(
encoding
.
toUpperCase
(
)
)
;
if
(
null
!=
enc
)
return
enc
.
name
;
return
encoding
;
}
public
static
String
convertMime2JavaEncoding
(
String
encoding
)
{
for
(
int
i
=
0
;
i
<
_encodings
.
length
;
++
i
)
{
if
(
_encodings
[
i
]
.
name
.
equalsIgnoreCase
(
encoding
)
)
{
return
_encodings
[
i
]
.
javaName
;
}
}
return
encoding
;
}
private
static
EncodingInfo
[
]
loadEncodingInfo
(
)
{
URL
url
=
null
;
try
{
String
urlString
=
null
;
InputStream
is
=
null
;
try
{
urlString
=
System
.
getProperty
(
ENCODINGS_PROP
,
""
)
;
}
catch
(
SecurityException
e
)
{
}
if
(
urlString
!=
null
&&
urlString
.
length
(
)
>
0
)
{
url
=
new
URL
(
urlString
)
;
is
=
url
.
openStream
(
)
;
}
if
(
is
==
null
)
{
SecuritySupport
ss
=
SecuritySupport
.
getInstance
(
)
;
is
=
ss
.
getResourceAsStream
(
ObjectFactory
.
findClassLoader
(
)
,
ENCODINGS_FILE
)
;
}
Properties
props
=
new
Properties
(
)
;
if
(
is
!=
null
)
{
props
.
load
(
is
)
;
is
.
close
(
)
;
}
else
{
}
int
totalEntries
=
props
.
size
(
)
;
int
totalMimeNames
=
0
;
Enumeration
keys
=
props
.
keys
(
)
;
for
(
int
i
=
0
;
i
<
totalEntries
;
++
i
)
{
String
javaName
=
(
String
)
keys
.
nextElement
(
)
;
String
val
=
props
.
getProperty
(
javaName
)
;
totalMimeNames
++
;
int
pos
=
val
.
indexOf
(
' '
)
;
for
(
int
j
=
0
;
j
<
pos
;
++
j
)
if
(
val
.
charAt
(
j
)
==
','
)
totalMimeNames
++
;
}
EncodingInfo
[
]
ret
=
new
EncodingInfo
[
totalMimeNames
]
;
int
j
=
0
;
keys
=
props
.
keys
(
)
;
for
(
int
i
=
0
;
i
<
totalEntries
;
++
i
)
{
String
javaName
=
(
String
)
keys
.
nextElement
(
)
;
String
val
=
props
.
getProperty
(
javaName
)
;
int
pos
=
val
.
indexOf
(
' '
)
;
String
mimeName
;
int
lastPrintable
;
if
(
pos
<
0
)
{
mimeName
=
val
;
lastPrintable
=
0x00FF
;
}
else
{
lastPrintable
=
Integer
.
decode
(
val
.
substring
(
pos
)
.
trim
(
)
)
.
intValue
(
)
;
StringTokenizer
st
=
new
StringTokenizer
(
val
.
substring
(
0
,
pos
)
,
","
)
;
for
(
boolean
first
=
true
;
st
.
hasMoreTokens
(
)
;
first
=
false
)
{
mimeName
=
st
.
nextToken
(
)
;
ret
[
j
]
=
new
EncodingInfo
(
mimeName
,
javaName
,
lastPrintable
)
;
_encodingTableKeyMime
.
put
(
mimeName
.
toUpperCase
(
)
,
ret
[
j
]
)
;
if
(
first
)
_encodingTableKeyJava
.
put
(
javaName
.
toUpperCase
(
)
,
ret
[
j
]
)
;
j
++
;
}
}
}
return
ret
;
}
catch
(
java
.
net
.
MalformedURLException
mue
)
{
throw
new
org
.
apache
.
xml
.
utils
.
WrappedRuntimeException
(
mue
)
;
}
catch
(
java
.
io
.
IOException
ioe
)
{
throw
new
org
.
apache
.
xml
.
utils
.
WrappedRuntimeException
(
ioe
)
;
}
}
private
static
final
Hashtable
_encodingTableKeyJava
=
new
Hashtable
(
)
;
private
static
final
Hashtable
_encodingTableKeyMime
=
new
Hashtable
(
)
;
private
static
final
EncodingInfo
[
]
_encodings
=
loadEncodingInfo
(
)
;
}
