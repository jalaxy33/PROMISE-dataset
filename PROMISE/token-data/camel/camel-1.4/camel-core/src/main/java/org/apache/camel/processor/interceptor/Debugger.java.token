package
org
.
apache
.
camel
.
processor
.
interceptor
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
org
.
apache
.
camel
.
CamelContext
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Processor
;
import
org
.
apache
.
camel
.
impl
.
DefaultCamelContext
;
import
org
.
apache
.
camel
.
model
.
ProcessorType
;
import
org
.
apache
.
camel
.
spi
.
InterceptStrategy
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
public
class
Debugger
implements
InterceptStrategy
{
private
static
final
transient
Log
LOG
=
LogFactory
.
getLog
(
Debugger
.
class
)
;
private
int
exchangeBufferSize
=
-
1
;
private
Map
<
String
,
DebugInterceptor
>
interceptors
=
new
HashMap
<
String
,
DebugInterceptor
>
(
)
;
private
boolean
logExchanges
=
true
;
private
TraceFormatter
formatter
=
new
TraceFormatter
(
)
;
public
static
Debugger
getDebugger
(
CamelContext
context
)
{
if
(
context
instanceof
DefaultCamelContext
)
{
DefaultCamelContext
defaultCamelContext
=
(
DefaultCamelContext
)
context
;
List
<
InterceptStrategy
>
list
=
defaultCamelContext
.
getInterceptStrategies
(
)
;
for
(
InterceptStrategy
interceptStrategy
:
list
)
{
if
(
interceptStrategy
instanceof
Debugger
)
{
return
(
Debugger
)
interceptStrategy
;
}
}
}
return
null
;
}
public
DebugInterceptor
getInterceptor
(
String
id
)
{
return
interceptors
.
get
(
id
)
;
}
public
List
<
Exchange
>
getExchanges
(
String
id
)
{
DebugInterceptor
interceptor
=
getInterceptor
(
id
)
;
if
(
interceptor
==
null
)
{
return
null
;
}
else
{
return
interceptor
.
getExchanges
(
)
;
}
}
public
Breakpoint
getBreakpoint
(
String
id
)
{
DebugInterceptor
interceptor
=
getInterceptor
(
id
)
;
if
(
interceptor
==
null
)
{
return
null
;
}
else
{
return
interceptor
.
getBreakpoint
(
)
;
}
}
public
Processor
wrapProcessorInInterceptors
(
ProcessorType
processorType
,
Processor
target
)
throws
Exception
{
String
id
=
processorType
.
idOrCreate
(
)
;
if
(
logExchanges
)
{
target
=
new
TraceInterceptor
(
processorType
,
target
,
formatter
)
;
}
DebugInterceptor
interceptor
=
new
DebugInterceptor
(
processorType
,
target
,
createExchangeList
(
)
,
createExceptionsList
(
)
)
;
interceptors
.
put
(
id
,
interceptor
)
;
if
(
LOG
.
isDebugEnabled
(
)
)
{
LOG
.
debug
(
"Adding "
+
id
+
" interceptor: "
+
interceptor
)
;
}
return
interceptor
;
}
protected
List
<
Exchange
>
createExchangeList
(
)
{
if
(
exchangeBufferSize
==
0
)
{
return
null
;
}
else
if
(
exchangeBufferSize
>
0
)
{
return
new
ArrayList
<
Exchange
>
(
)
;
}
else
{
return
new
ArrayList
<
Exchange
>
(
)
;
}
}
protected
List
<
ExceptionEvent
>
createExceptionsList
(
)
{
return
new
ArrayList
<
ExceptionEvent
>
(
)
;
}
}
