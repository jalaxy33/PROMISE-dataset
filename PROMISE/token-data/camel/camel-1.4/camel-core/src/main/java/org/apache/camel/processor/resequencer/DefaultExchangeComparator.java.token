package
org
.
apache
.
camel
.
processor
.
resequencer
;
import
java
.
util
.
List
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Expression
;
public
class
DefaultExchangeComparator
implements
ExpressionResultComparator
<
Exchange
>
{
private
Expression
<
Exchange
>
expression
;
public
Expression
<
Exchange
>
getExpression
(
)
{
return
expression
;
}
public
void
setExpression
(
Expression
<
Exchange
>
expression
)
{
this
.
expression
=
expression
;
}
@
SuppressWarnings
(
"unchecked"
)
public
void
setExpressions
(
List
<
Expression
>
expressions
)
{
if
(
expressions
.
isEmpty
(
)
)
{
throw
new
IllegalArgumentException
(
"Expression required to resolve sequence number"
)
;
}
else
if
(
expressions
.
size
(
)
>
1
)
{
throw
new
IllegalArgumentException
(
"More than one expression currently not supported"
)
;
}
expression
=
expressions
.
get
(
0
)
;
}
public
boolean
predecessor
(
Exchange
o1
,
Exchange
o2
)
{
long
n1
=
getSequenceNumber
(
o1
)
;
long
n2
=
getSequenceNumber
(
o2
)
;
return
n1
==
(
n2
-
1L
)
;
}
public
boolean
successor
(
Exchange
o1
,
Exchange
o2
)
{
long
n1
=
getSequenceNumber
(
o1
)
;
long
n2
=
getSequenceNumber
(
o2
)
;
return
n2
==
(
n1
-
1L
)
;
}
public
int
compare
(
Exchange
o1
,
Exchange
o2
)
{
Long
n1
=
getSequenceNumber
(
o1
)
;
Long
n2
=
getSequenceNumber
(
o2
)
;
return
n1
.
compareTo
(
n2
)
;
}
private
long
getSequenceNumber
(
Exchange
exchange
)
{
return
(
Long
)
expression
.
evaluate
(
exchange
)
;
}
}
