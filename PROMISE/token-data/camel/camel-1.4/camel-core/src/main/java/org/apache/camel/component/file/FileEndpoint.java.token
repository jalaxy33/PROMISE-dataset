package
org
.
apache
.
camel
.
component
.
file
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
util
.
Properties
;
import
org
.
apache
.
camel
.
Consumer
;
import
org
.
apache
.
camel
.
ExchangePattern
;
import
org
.
apache
.
camel
.
Message
;
import
org
.
apache
.
camel
.
Processor
;
import
org
.
apache
.
camel
.
Producer
;
import
org
.
apache
.
camel
.
component
.
file
.
strategy
.
FileProcessStrategySupport
;
import
org
.
apache
.
camel
.
impl
.
ScheduledPollEndpoint
;
import
org
.
apache
.
camel
.
util
.
FactoryFinder
;
import
org
.
apache
.
camel
.
util
.
ObjectHelper
;
import
org
.
apache
.
camel
.
util
.
UuidGenerator
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
public
class
FileEndpoint
extends
ScheduledPollEndpoint
<
FileExchange
>
{
private
static
final
transient
Log
LOG
=
LogFactory
.
getLog
(
FileEndpoint
.
class
)
;
private
static
final
String
DEFAULT_STRATEGYFACTORY_CLASS
=
"org.apache.camel.component.file.strategy.FileProcessStrategyFactory"
;
private
File
file
;
private
FileProcessStrategy
fileProcessStrategy
;
private
boolean
autoCreate
=
true
;
private
boolean
lock
=
true
;
private
boolean
delete
;
private
boolean
noop
;
private
boolean
append
=
true
;
private
String
moveNamePrefix
;
private
String
moveNamePostfix
;
private
String
[
]
excludedNamePrefixes
=
{
"."
}
;
private
String
[
]
excludedNamePostfixes
=
{
FileProcessStrategySupport
.
DEFAULT_LOCK_FILE_POSTFIX
}
;
private
int
bufferSize
=
128
*
1024
;
private
boolean
ignoreFileNameHeader
;
protected
FileEndpoint
(
File
file
,
String
endpointUri
,
FileComponent
component
)
{
super
(
endpointUri
,
component
)
;
this
.
file
=
file
;
}
public
FileEndpoint
(
String
endpointUri
,
File
file
)
{
super
(
endpointUri
)
;
this
.
file
=
file
;
}
public
FileEndpoint
(
File
file
)
{
this
.
file
=
file
;
}
public
FileEndpoint
(
)
{
}
public
Producer
<
FileExchange
>
createProducer
(
)
throws
Exception
{
Producer
<
FileExchange
>
result
=
new
FileProducer
(
this
)
;
return
result
;
}
public
Consumer
<
FileExchange
>
createConsumer
(
Processor
processor
)
throws
Exception
{
Consumer
<
FileExchange
>
result
=
new
FileConsumer
(
this
,
processor
)
;
configureConsumer
(
result
)
;
return
result
;
}
public
FileExchange
createExchange
(
File
file
)
{
return
new
FileExchange
(
getCamelContext
(
)
,
getExchangePattern
(
)
,
file
)
;
}
@
Override
public
FileExchange
createExchange
(
)
{
return
createExchange
(
getFile
(
)
)
;
}
@
Override
public
FileExchange
createExchange
(
ExchangePattern
pattern
)
{
return
new
FileExchange
(
getCamelContext
(
)
,
pattern
,
file
)
;
}
public
String
getGeneratedFileName
(
Message
message
)
{
return
getFileFriendlyMessageId
(
message
.
getMessageId
(
)
)
;
}
public
void
configureMessage
(
File
file
,
Message
message
)
{
message
.
setBody
(
file
)
;
String
relativePath
=
file
.
getPath
(
)
.
substring
(
getFile
(
)
.
getPath
(
)
.
length
(
)
)
;
if
(
relativePath
.
startsWith
(
File
.
separator
)
||
relativePath
.
startsWith
(
"/"
)
)
{
relativePath
=
relativePath
.
substring
(
1
)
;
}
message
.
setHeader
(
FileComponent
.
HEADER_FILE_NAME
,
relativePath
)
;
}
public
File
getFile
(
)
{
ObjectHelper
.
notNull
(
file
,
"file"
)
;
if
(
autoCreate
&&
!
file
.
exists
(
)
)
{
file
.
mkdirs
(
)
;
}
return
file
;
}
public
void
setFile
(
File
file
)
{
this
.
file
=
file
;
}
public
boolean
isSingleton
(
)
{
return
true
;
}
public
boolean
isAutoCreate
(
)
{
return
this
.
autoCreate
;
}
public
void
setAutoCreate
(
boolean
autoCreate
)
{
this
.
autoCreate
=
autoCreate
;
}
public
FileProcessStrategy
getFileStrategy
(
)
{
if
(
fileProcessStrategy
==
null
)
{
fileProcessStrategy
=
createFileStrategy
(
)
;
LOG
.
debug
(
"Using file process strategy: "
+
fileProcessStrategy
)
;
}
return
fileProcessStrategy
;
}
public
void
setFileStrategy
(
FileProcessStrategy
fileProcessStrategy
)
{
this
.
fileProcessStrategy
=
fileProcessStrategy
;
}
public
boolean
isDelete
(
)
{
return
delete
;
}
public
void
setDelete
(
boolean
delete
)
{
this
.
delete
=
delete
;
}
public
boolean
isLock
(
)
{
return
lock
;
}
public
void
setLock
(
boolean
lock
)
{
this
.
lock
=
lock
;
}
public
String
getMoveNamePostfix
(
)
{
return
moveNamePostfix
;
}
public
void
setMoveNamePostfix
(
String
moveNamePostfix
)
{
this
.
moveNamePostfix
=
moveNamePostfix
;
}
public
String
getMoveNamePrefix
(
)
{
return
moveNamePrefix
;
}
public
void
setMoveNamePrefix
(
String
moveNamePrefix
)
{
this
.
moveNamePrefix
=
moveNamePrefix
;
}
public
String
[
]
getExcludedNamePrefixes
(
)
{
return
excludedNamePrefixes
;
}
public
void
setExcludedNamePrefixes
(
String
[
]
excludedNamePrefixes
)
{
this
.
excludedNamePrefixes
=
excludedNamePrefixes
;
}
public
String
[
]
getExcludedNamePostfixes
(
)
{
return
excludedNamePostfixes
;
}
public
void
setExcludedNamePostfixes
(
String
[
]
excludedNamePostfixes
)
{
this
.
excludedNamePostfixes
=
excludedNamePostfixes
;
}
public
boolean
isNoop
(
)
{
return
noop
;
}
public
void
setNoop
(
boolean
noop
)
{
this
.
noop
=
noop
;
}
public
boolean
isAppend
(
)
{
return
append
;
}
public
void
setAppend
(
boolean
append
)
{
this
.
append
=
append
;
}
public
int
getBufferSize
(
)
{
return
bufferSize
;
}
public
void
setBufferSize
(
int
bufferSize
)
{
this
.
bufferSize
=
bufferSize
;
}
public
boolean
isIgnoreFileNameHeader
(
)
{
return
ignoreFileNameHeader
;
}
public
void
setIgnoreFileNameHeader
(
boolean
ignoreFileNameHeader
)
{
this
.
ignoreFileNameHeader
=
ignoreFileNameHeader
;
}
protected
FileProcessStrategy
createFileStrategy
(
)
{
Class
<
?
>
factory
=
null
;
try
{
FactoryFinder
finder
=
new
FactoryFinder
(
"META-INF/services/org/apache/camel/component/"
)
;
factory
=
finder
.
findClass
(
"file"
,
"strategy.factory."
)
;
}
catch
(
ClassNotFoundException
e
)
{
LOG
.
debug
(
"'strategy.factory.class' not found"
,
e
)
;
}
catch
(
IOException
e
)
{
LOG
.
debug
(
"No strategy factory defined in 'META-INF/services/org/apache/camel/component/file'"
,
e
)
;
}
if
(
factory
==
null
)
{
factory
=
ObjectHelper
.
loadClass
(
DEFAULT_STRATEGYFACTORY_CLASS
)
;
if
(
factory
==
null
)
{
throw
new
TypeNotPresentException
(
"FileProcessStrategyFactory class not found"
,
null
)
;
}
}
try
{
Method
factoryMethod
=
factory
.
getMethod
(
"createFileProcessStrategy"
,
Properties
.
class
)
;
return
(
FileProcessStrategy
)
ObjectHelper
.
invokeMethod
(
factoryMethod
,
null
,
getParamsAsProperties
(
)
)
;
}
catch
(
NoSuchMethodException
e
)
{
throw
new
TypeNotPresentException
(
factory
.
getSimpleName
(
)
+
".createFileProcessStrategy(Properties params) method not found"
,
e
)
;
}
}
protected
Properties
getParamsAsProperties
(
)
{
Properties
params
=
new
Properties
(
)
;
if
(
isNoop
(
)
)
{
params
.
setProperty
(
"noop"
,
Boolean
.
toString
(
true
)
)
;
}
if
(
isDelete
(
)
)
{
params
.
setProperty
(
"delete"
,
Boolean
.
toString
(
true
)
)
;
}
if
(
isAppend
(
)
)
{
params
.
setProperty
(
"append"
,
Boolean
.
toString
(
true
)
)
;
}
if
(
isLock
(
)
)
{
params
.
setProperty
(
"lock"
,
Boolean
.
toString
(
true
)
)
;
}
if
(
moveNamePrefix
!=
null
)
{
params
.
setProperty
(
"moveNamePrefix"
,
moveNamePrefix
)
;
}
if
(
moveNamePostfix
!=
null
)
{
params
.
setProperty
(
"moveNamePostfix"
,
moveNamePostfix
)
;
}
return
params
;
}
@
Override
protected
String
createEndpointUri
(
)
{
return
"file://"
+
getFile
(
)
.
getAbsolutePath
(
)
;
}
protected
String
getFileFriendlyMessageId
(
String
id
)
{
return
UuidGenerator
.
generateSanitizedId
(
id
)
;
}
}
