package
org
.
apache
.
camel
.
builder
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Expression
;
import
org
.
apache
.
camel
.
Message
;
import
org
.
apache
.
camel
.
Processor
;
public
final
class
ProcessorBuilder
{
private
ProcessorBuilder
(
)
{
}
public
static
Processor
setBody
(
final
Expression
expression
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Object
newBody
=
expression
.
evaluate
(
exchange
)
;
exchange
.
getIn
(
)
.
setBody
(
newBody
)
;
}
@
Override
public
String
toString
(
)
{
return
"setBody("
+
expression
+
")"
;
}
}
;
}
public
static
Processor
setOutBody
(
final
Expression
expression
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Object
newBody
=
expression
.
evaluate
(
exchange
)
;
exchange
.
getOut
(
)
.
setBody
(
newBody
)
;
}
@
Override
public
String
toString
(
)
{
return
"setOutBody("
+
expression
+
")"
;
}
}
;
}
public
static
Processor
setFaultBody
(
final
Expression
expression
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Object
newBody
=
expression
.
evaluate
(
exchange
)
;
exchange
.
getFault
(
)
.
setBody
(
newBody
)
;
}
@
Override
public
String
toString
(
)
{
return
"setFaultBody("
+
expression
+
")"
;
}
}
;
}
public
static
Processor
setHeader
(
final
String
name
,
final
Expression
expression
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Object
value
=
expression
.
evaluate
(
exchange
)
;
exchange
.
getIn
(
)
.
setHeader
(
name
,
value
)
;
}
@
Override
public
String
toString
(
)
{
return
"setHeader("
+
name
+
", "
+
expression
+
")"
;
}
}
;
}
public
static
Processor
setOutHeader
(
final
String
name
,
final
Expression
expression
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Object
value
=
expression
.
evaluate
(
exchange
)
;
exchange
.
getOut
(
)
.
setHeader
(
name
,
value
)
;
}
@
Override
public
String
toString
(
)
{
return
"setOutHeader("
+
name
+
", "
+
expression
+
")"
;
}
}
;
}
public
static
Processor
setFaultHeader
(
final
String
name
,
final
Expression
expression
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Object
value
=
expression
.
evaluate
(
exchange
)
;
exchange
.
getFault
(
)
.
setHeader
(
name
,
value
)
;
}
@
Override
public
String
toString
(
)
{
return
"setFaultHeader("
+
name
+
", "
+
expression
+
")"
;
}
}
;
}
public
static
Processor
setProperty
(
final
String
name
,
final
Expression
expression
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Object
value
=
expression
.
evaluate
(
exchange
)
;
exchange
.
setProperty
(
name
,
value
)
;
}
@
Override
public
String
toString
(
)
{
return
"setProperty("
+
name
+
", "
+
expression
+
")"
;
}
}
;
}
public
static
Processor
removeHeader
(
final
String
name
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
exchange
.
getIn
(
)
.
removeHeader
(
name
)
;
}
@
Override
public
String
toString
(
)
{
return
"removeHeader("
+
name
+
")"
;
}
}
;
}
public
static
Processor
removeOutHeader
(
final
String
name
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Message
out
=
exchange
.
getOut
(
false
)
;
if
(
out
!=
null
)
{
out
.
removeHeader
(
name
)
;
}
}
@
Override
public
String
toString
(
)
{
return
"removeOutHeader("
+
name
+
")"
;
}
}
;
}
public
static
Processor
removeFaultHeader
(
final
String
name
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
exchange
.
getFault
(
)
.
removeHeader
(
name
)
;
}
@
Override
public
String
toString
(
)
{
return
"removeFaultHeader("
+
name
+
")"
;
}
}
;
}
public
static
Processor
removeProperty
(
final
String
name
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
exchange
.
removeProperty
(
name
)
;
}
@
Override
public
String
toString
(
)
{
return
"removeProperty("
+
name
+
")"
;
}
}
;
}
public
static
Processor
throwException
(
final
Exception
ex
)
{
return
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
throws
Exception
{
throw
ex
;
}
@
Override
public
String
toString
(
)
{
return
"throwException("
+
ex
.
toString
(
)
+
")"
;
}
}
;
}
}
