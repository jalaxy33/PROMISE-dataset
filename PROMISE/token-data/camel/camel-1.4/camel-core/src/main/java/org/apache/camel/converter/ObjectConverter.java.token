package
org
.
apache
.
camel
.
converter
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
camel
.
Converter
;
import
org
.
apache
.
camel
.
util
.
ObjectHelper
;
@
Converter
public
final
class
ObjectConverter
{
private
ObjectConverter
(
)
{
}
public
static
boolean
isCollection
(
Object
value
)
{
return
value
instanceof
Collection
||
(
value
!=
null
&&
value
.
getClass
(
)
.
isArray
(
)
)
;
}
@
SuppressWarnings
(
"unchecked"
)
@
Converter
@
Deprecated
public
static
Iterator
iterator
(
Object
value
)
{
return
ObjectHelper
.
createIterator
(
value
)
;
}
@
Converter
public
static
boolean
toBool
(
Object
value
)
{
Boolean
answer
=
toBoolean
(
value
)
;
if
(
answer
!=
null
)
{
return
answer
.
booleanValue
(
)
;
}
return
false
;
}
@
Converter
public
static
Boolean
toBoolean
(
Object
value
)
{
return
ObjectHelper
.
toBoolean
(
value
)
;
}
@
Converter
public
static
Boolean
toBoolean
(
Boolean
value
)
{
if
(
value
!=
null
)
{
return
value
;
}
return
Boolean
.
FALSE
;
}
@
Converter
public
static
Byte
toByte
(
Object
value
)
{
if
(
value
instanceof
Byte
)
{
return
(
Byte
)
value
;
}
else
if
(
value
instanceof
Number
)
{
Number
number
=
(
Number
)
value
;
return
Byte
.
valueOf
(
number
.
byteValue
(
)
)
;
}
else
if
(
value
instanceof
String
)
{
return
Byte
.
valueOf
(
(
String
)
value
)
;
}
else
{
return
null
;
}
}
@
Converter
public
static
byte
[
]
toByteArray
(
String
value
)
{
return
value
.
getBytes
(
)
;
}
@
Converter
public
static
char
[
]
toCharArray
(
String
value
)
{
return
value
.
toCharArray
(
)
;
}
@
Converter
public
static
String
fromCharArray
(
char
[
]
value
)
{
return
new
String
(
value
)
;
}
@
Converter
public
static
Short
toShort
(
Object
value
)
{
if
(
value
instanceof
Short
)
{
return
(
Short
)
value
;
}
else
if
(
value
instanceof
Number
)
{
Number
number
=
(
Number
)
value
;
return
Short
.
valueOf
(
number
.
shortValue
(
)
)
;
}
else
if
(
value
instanceof
String
)
{
return
Short
.
valueOf
(
(
String
)
value
)
;
}
else
{
return
null
;
}
}
@
Converter
public
static
Integer
toInteger
(
Object
value
)
{
if
(
value
instanceof
Integer
)
{
return
(
Integer
)
value
;
}
else
if
(
value
instanceof
Number
)
{
Number
number
=
(
Number
)
value
;
return
Integer
.
valueOf
(
number
.
intValue
(
)
)
;
}
else
if
(
value
instanceof
String
)
{
return
Integer
.
valueOf
(
(
String
)
value
)
;
}
else
{
return
null
;
}
}
@
Converter
public
static
Long
toLong
(
Object
value
)
{
if
(
value
instanceof
Long
)
{
return
(
Long
)
value
;
}
else
if
(
value
instanceof
Number
)
{
Number
number
=
(
Number
)
value
;
return
Long
.
valueOf
(
number
.
longValue
(
)
)
;
}
else
if
(
value
instanceof
String
)
{
return
Long
.
valueOf
(
(
String
)
value
)
;
}
else
{
return
null
;
}
}
@
Converter
public
static
Float
toFloat
(
Object
value
)
{
if
(
value
instanceof
Float
)
{
return
(
Float
)
value
;
}
else
if
(
value
instanceof
Number
)
{
Number
number
=
(
Number
)
value
;
return
Float
.
valueOf
(
number
.
floatValue
(
)
)
;
}
else
if
(
value
instanceof
String
)
{
return
Float
.
valueOf
(
(
String
)
value
)
;
}
else
{
return
null
;
}
}
@
Converter
public
static
Double
toDouble
(
Object
value
)
{
if
(
value
instanceof
Double
)
{
return
(
Double
)
value
;
}
else
if
(
value
instanceof
Number
)
{
Number
number
=
(
Number
)
value
;
return
Double
.
valueOf
(
number
.
doubleValue
(
)
)
;
}
else
if
(
value
instanceof
String
)
{
return
Double
.
valueOf
(
(
String
)
value
)
;
}
else
{
return
null
;
}
}
}
