package
org
.
apache
.
camel
.
management
;
import
java
.
net
.
InetAddress
;
import
java
.
net
.
UnknownHostException
;
import
javax
.
management
.
MalformedObjectNameException
;
import
javax
.
management
.
ObjectName
;
import
org
.
apache
.
camel
.
CamelContext
;
import
org
.
apache
.
camel
.
Endpoint
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Route
;
import
org
.
apache
.
camel
.
model
.
ProcessorType
;
import
org
.
apache
.
camel
.
spi
.
RouteContext
;
public
class
CamelNamingStrategy
{
public
static
final
String
VALUE_UNKNOWN
=
"unknown"
;
public
static
final
String
KEY_NAME
=
"name"
;
public
static
final
String
KEY_TYPE
=
"type"
;
public
static
final
String
KEY_CONTEXT
=
"context"
;
public
static
final
String
KEY_GROUP
=
"group"
;
public
static
final
String
KEY_COMPONENT
=
"component"
;
public
static
final
String
KEY_ROUTE
=
"route"
;
public
static
final
String
TYPE_CONTEXT
=
"context"
;
public
static
final
String
TYPE_ENDPOINT
=
"endpoint"
;
public
static
final
String
TYPE_PROCESSOR
=
"processor"
;
public
static
final
String
TYPE_ROUTE
=
"route"
;
public
static
final
String
TYPE_SERVICE
=
"service"
;
public
static
final
String
KEY_NODE_ID
=
"nodeid"
;
protected
String
domainName
;
protected
String
hostName
=
"locahost"
;
public
CamelNamingStrategy
(
)
{
this
(
"org.apache.camel"
)
;
}
public
CamelNamingStrategy
(
String
domainName
)
{
if
(
domainName
!=
null
)
{
this
.
domainName
=
domainName
;
}
try
{
hostName
=
InetAddress
.
getLocalHost
(
)
.
getHostName
(
)
;
}
catch
(
UnknownHostException
ex
)
{
}
}
public
ObjectName
getObjectName
(
CamelContext
context
)
throws
MalformedObjectNameException
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
domainName
)
.
append
(
":"
)
;
buffer
.
append
(
KEY_CONTEXT
+
"="
)
.
append
(
getContextId
(
context
)
)
.
append
(
","
)
;
buffer
.
append
(
KEY_TYPE
+
"="
+
TYPE_CONTEXT
+
","
)
;
buffer
.
append
(
KEY_NAME
+
"="
)
.
append
(
getContextId
(
context
)
)
;
return
createObjectName
(
buffer
)
;
}
public
ObjectName
getObjectName
(
ManagedEndpoint
mbean
)
throws
MalformedObjectNameException
{
Endpoint
<
?
extends
Exchange
>
ep
=
mbean
.
getEndpoint
(
)
;
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
domainName
)
.
append
(
":"
)
;
buffer
.
append
(
KEY_CONTEXT
+
"="
)
.
append
(
getContextId
(
ep
.
getCamelContext
(
)
)
)
.
append
(
","
)
;
buffer
.
append
(
KEY_TYPE
+
"="
+
TYPE_ENDPOINT
+
","
)
;
buffer
.
append
(
KEY_COMPONENT
+
"="
)
.
append
(
getComponentId
(
ep
)
)
.
append
(
","
)
;
buffer
.
append
(
KEY_NAME
+
"="
)
.
append
(
getEndpointId
(
ep
)
)
;
return
createObjectName
(
buffer
)
;
}
public
ObjectName
getObjectName
(
CamelContext
context
,
ManagedService
mbean
)
throws
MalformedObjectNameException
{
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
domainName
)
.
append
(
":"
)
;
buffer
.
append
(
KEY_CONTEXT
+
"="
)
.
append
(
getContextId
(
context
)
)
.
append
(
","
)
;
buffer
.
append
(
KEY_TYPE
+
"="
+
TYPE_SERVICE
+
","
)
;
buffer
.
append
(
KEY_NAME
+
"="
)
.
append
(
Integer
.
toHexString
(
mbean
.
getService
(
)
.
hashCode
(
)
)
)
;
return
createObjectName
(
buffer
)
;
}
public
ObjectName
getObjectName
(
ManagedRoute
mbean
)
throws
MalformedObjectNameException
{
Route
<
?
extends
Exchange
>
route
=
mbean
.
getRoute
(
)
;
Endpoint
<
?
extends
Exchange
>
ep
=
route
.
getEndpoint
(
)
;
String
ctxid
=
ep
!=
null
?
getContextId
(
ep
.
getCamelContext
(
)
)
:
VALUE_UNKNOWN
;
String
cid
=
getComponentId
(
ep
)
;
String
id
=
VALUE_UNKNOWN
.
equals
(
cid
)
?
getEndpointId
(
ep
)
:
"["
+
cid
+
"]"
+
getEndpointId
(
ep
)
;
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
domainName
)
.
append
(
":"
)
;
buffer
.
append
(
KEY_CONTEXT
+
"="
)
.
append
(
ctxid
)
.
append
(
","
)
;
buffer
.
append
(
KEY_ROUTE
+
"="
)
.
append
(
id
)
.
append
(
","
)
;
buffer
.
append
(
KEY_TYPE
+
"="
+
TYPE_ROUTE
+
","
)
;
buffer
.
append
(
KEY_NAME
+
"="
)
.
append
(
id
)
;
return
createObjectName
(
buffer
)
;
}
public
ObjectName
getObjectName
(
RouteContext
routeContext
,
ProcessorType
processor
)
throws
MalformedObjectNameException
{
Endpoint
<
?
extends
Exchange
>
ep
=
routeContext
.
getEndpoint
(
)
;
String
ctxid
=
ep
!=
null
?
getContextId
(
ep
.
getCamelContext
(
)
)
:
VALUE_UNKNOWN
;
String
cid
=
getComponentId
(
ep
)
;
String
id
=
VALUE_UNKNOWN
.
equals
(
cid
)
?
getEndpointId
(
ep
)
:
"["
+
cid
+
"]"
+
getEndpointId
(
ep
)
;
String
nodeId
=
processor
.
idOrCreate
(
)
;
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
domainName
)
.
append
(
":"
)
;
buffer
.
append
(
KEY_CONTEXT
+
"="
)
.
append
(
ctxid
)
.
append
(
","
)
;
buffer
.
append
(
KEY_ROUTE
+
"="
)
.
append
(
id
)
.
append
(
","
)
;
buffer
.
append
(
KEY_TYPE
+
"="
+
TYPE_PROCESSOR
+
","
)
;
buffer
.
append
(
KEY_NODE_ID
+
"="
)
.
append
(
nodeId
)
.
append
(
","
)
;
buffer
.
append
(
KEY_NAME
+
"="
)
.
append
(
ObjectName
.
quote
(
processor
.
toString
(
)
)
)
;
return
createObjectName
(
buffer
)
;
}
public
String
getDomainName
(
)
{
return
domainName
;
}
public
void
setDomainName
(
String
domainName
)
{
this
.
domainName
=
domainName
;
}
public
String
getHostName
(
)
{
return
hostName
;
}
public
void
setHostName
(
String
hostName
)
{
this
.
hostName
=
hostName
;
}
protected
String
getContextId
(
CamelContext
context
)
{
String
id
=
context
!=
null
?
context
.
getName
(
)
:
VALUE_UNKNOWN
;
return
hostName
+
"/"
+
id
;
}
protected
String
getComponentId
(
Endpoint
<
?
extends
Exchange
>
ep
)
{
String
uri
=
ep
.
getEndpointUri
(
)
;
int
pos
=
uri
.
indexOf
(
':'
)
;
return
(
pos
==
-
1
)
?
VALUE_UNKNOWN
:
uri
.
substring
(
0
,
pos
)
;
}
protected
String
getEndpointId
(
Endpoint
<
?
extends
Exchange
>
ep
)
{
String
uri
=
ep
.
getEndpointUri
(
)
;
int
pos
=
uri
.
indexOf
(
':'
)
;
String
id
=
(
pos
==
-
1
)
?
uri
:
uri
.
substring
(
pos
+
1
)
;
if
(
!
ep
.
isSingleton
(
)
)
{
id
+=
"@"
+
Integer
.
toString
(
ep
.
hashCode
(
)
)
;
}
return
ObjectNameEncoder
.
encode
(
id
)
;
}
protected
ObjectName
createObjectName
(
StringBuffer
buffer
)
throws
MalformedObjectNameException
{
String
text
=
buffer
.
toString
(
)
;
try
{
return
new
ObjectName
(
text
)
;
}
catch
(
MalformedObjectNameException
e
)
{
throw
new
MalformedObjectNameException
(
"Could not create ObjectName from: "
+
text
+
". Reason: "
+
e
)
;
}
}
}
