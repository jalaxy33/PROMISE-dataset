package
org
.
apache
.
camel
.
impl
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicBoolean
;
import
org
.
apache
.
camel
.
Service
;
import
org
.
apache
.
camel
.
util
.
ServiceHelper
;
public
abstract
class
ServiceSupport
implements
Service
{
private
static
int
threadCounter
;
private
AtomicBoolean
started
=
new
AtomicBoolean
(
false
)
;
private
AtomicBoolean
starting
=
new
AtomicBoolean
(
false
)
;
private
AtomicBoolean
stopping
=
new
AtomicBoolean
(
false
)
;
private
AtomicBoolean
stopped
=
new
AtomicBoolean
(
false
)
;
private
Collection
childServices
;
public
void
start
(
)
throws
Exception
{
if
(
started
.
compareAndSet
(
false
,
true
)
)
{
starting
.
set
(
true
)
;
try
{
if
(
childServices
!=
null
)
{
ServiceHelper
.
startServices
(
childServices
)
;
}
doStart
(
)
;
}
finally
{
starting
.
set
(
false
)
;
}
}
}
public
void
stop
(
)
throws
Exception
{
if
(
started
.
get
(
)
&&
stopping
.
compareAndSet
(
false
,
true
)
)
{
try
{
doStop
(
)
;
}
finally
{
if
(
childServices
!=
null
)
{
ServiceHelper
.
stopServices
(
childServices
)
;
}
stopped
.
set
(
true
)
;
started
.
set
(
false
)
;
stopping
.
set
(
false
)
;
}
}
}
public
boolean
isStarted
(
)
{
return
started
.
get
(
)
;
}
public
boolean
isStarting
(
)
{
return
starting
.
get
(
)
;
}
public
boolean
isStopping
(
)
{
return
stopping
.
get
(
)
;
}
protected
boolean
isRunAllowed
(
)
{
return
!
(
stopping
.
get
(
)
||
stopped
.
get
(
)
)
;
}
public
boolean
isStopped
(
)
{
return
stopped
.
get
(
)
;
}
protected
abstract
void
doStart
(
)
throws
Exception
;
protected
abstract
void
doStop
(
)
throws
Exception
;
protected
String
getThreadName
(
String
prefix
)
{
return
prefix
+
" thread:"
+
nextThreadCounter
(
)
;
}
protected
static
synchronized
int
nextThreadCounter
(
)
{
return
++
threadCounter
;
}
protected
void
addChildService
(
Object
childService
)
{
if
(
childServices
==
null
)
{
childServices
=
new
ArrayList
(
)
;
}
childServices
.
add
(
childService
)
;
}
protected
boolean
removeChildService
(
Object
childService
)
{
if
(
childServices
!=
null
)
{
return
childServices
.
remove
(
childService
)
;
}
else
{
return
false
;
}
}
}
