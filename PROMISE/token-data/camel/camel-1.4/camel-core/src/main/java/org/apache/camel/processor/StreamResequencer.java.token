package
org
.
apache
.
camel
.
processor
;
import
java
.
util
.
concurrent
.
BlockingQueue
;
import
java
.
util
.
concurrent
.
LinkedBlockingQueue
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Processor
;
import
org
.
apache
.
camel
.
processor
.
resequencer
.
ResequencerEngine
;
import
org
.
apache
.
camel
.
processor
.
resequencer
.
SequenceElementComparator
;
import
org
.
apache
.
camel
.
processor
.
resequencer
.
SequenceSender
;
public
class
StreamResequencer
extends
DelegateProcessor
implements
Processor
{
private
ResequencerEngine
<
Exchange
>
reseq
;
private
BlockingQueue
<
Exchange
>
queue
;
private
SequenceSender
sender
;
public
StreamResequencer
(
Processor
processor
,
SequenceElementComparator
<
Exchange
>
comparator
,
int
capacity
)
{
super
(
processor
)
;
queue
=
new
LinkedBlockingQueue
<
Exchange
>
(
)
;
reseq
=
new
ResequencerEngine
<
Exchange
>
(
comparator
,
capacity
)
;
reseq
.
setOutQueue
(
queue
)
;
}
@
Override
protected
void
doStart
(
)
throws
Exception
{
super
.
doStart
(
)
;
sender
=
new
SequenceSender
(
getProcessor
(
)
)
;
sender
.
setQueue
(
queue
)
;
sender
.
start
(
)
;
}
@
Override
protected
void
doStop
(
)
throws
Exception
{
reseq
.
stop
(
)
;
sender
.
cancel
(
)
;
super
.
doStop
(
)
;
}
@
Override
public
void
process
(
Exchange
exchange
)
throws
Exception
{
reseq
.
put
(
exchange
)
;
}
public
long
getTimeout
(
)
{
return
reseq
.
getTimeout
(
)
;
}
public
void
setTimeout
(
long
timeout
)
{
reseq
.
setTimeout
(
timeout
)
;
}
@
Override
public
String
toString
(
)
{
return
"StreamResequencer[to: "
+
getProcessor
(
)
+
"]"
;
}
}
