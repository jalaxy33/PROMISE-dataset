package
org
.
apache
.
camel
.
processor
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Processor
;
public
class
Throttler
extends
DelayProcessorSupport
{
private
long
maximumRequestsPerPeriod
;
private
long
timePeriodMillis
;
private
long
startTimeMillis
;
private
long
requestCount
;
public
Throttler
(
Processor
processor
,
long
maximumRequestsPerPeriod
)
{
this
(
processor
,
maximumRequestsPerPeriod
,
1000
)
;
}
public
Throttler
(
Processor
processor
,
long
maximumRequestsPerPeriod
,
long
timePeriodMillis
)
{
super
(
processor
)
;
this
.
maximumRequestsPerPeriod
=
maximumRequestsPerPeriod
;
this
.
timePeriodMillis
=
timePeriodMillis
;
}
@
Override
public
String
toString
(
)
{
return
"Throttler[requests: "
+
maximumRequestsPerPeriod
+
" per: "
+
timePeriodMillis
+
" (ms) to: "
+
getProcessor
(
)
+
"]"
;
}
public
long
getMaximumRequestsPerPeriod
(
)
{
return
maximumRequestsPerPeriod
;
}
public
void
setMaximumRequestsPerPeriod
(
long
maximumRequestsPerPeriod
)
{
this
.
maximumRequestsPerPeriod
=
maximumRequestsPerPeriod
;
}
public
long
getTimePeriodMillis
(
)
{
return
timePeriodMillis
;
}
public
void
setTimePeriodMillis
(
long
timePeriodMillis
)
{
this
.
timePeriodMillis
=
timePeriodMillis
;
}
public
long
getRequestCount
(
)
{
return
requestCount
;
}
public
long
getStartTimeMillis
(
)
{
return
startTimeMillis
;
}
protected
void
delay
(
Exchange
exchange
)
throws
Exception
{
long
now
=
currentSystemTime
(
)
;
if
(
startTimeMillis
==
0
)
{
startTimeMillis
=
now
;
}
if
(
now
-
startTimeMillis
>
timePeriodMillis
)
{
requestCount
=
1
;
startTimeMillis
=
now
;
}
else
{
if
(
++
requestCount
>
maximumRequestsPerPeriod
)
{
long
time
=
startTimeMillis
+
timePeriodMillis
;
waitUntil
(
time
,
exchange
)
;
}
}
}
}
