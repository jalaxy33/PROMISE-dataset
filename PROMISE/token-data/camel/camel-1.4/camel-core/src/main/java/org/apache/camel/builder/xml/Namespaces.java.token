package
org
.
apache
.
camel
.
builder
.
xml
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
org
.
w3c
.
dom
.
Attr
;
import
org
.
w3c
.
dom
.
Element
;
import
org
.
w3c
.
dom
.
NamedNodeMap
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
apache
.
camel
.
model
.
language
.
XPathExpression
;
import
org
.
apache
.
camel
.
model
.
language
.
XQueryExpression
;
import
org
.
apache
.
camel
.
spi
.
NamespaceAware
;
import
org
.
apache
.
camel
.
util
.
ObjectHelper
;
public
class
Namespaces
{
public
static
final
String
DEFAULT_NAMESPACE
=
"http://activemq.apache.org/camel/schema/spring"
;
public
static
final
String
IN_NAMESPACE
=
"http://camel.apache.org/xml/in/"
;
public
static
final
String
OUT_NAMESPACE
=
"http://camel.apache.org/xml/out/"
;
public
static
final
String
SYSTEM_PROPERTIES_NAMESPACE
=
"http://camel.apache.org/xml/variables/system-properties"
;
public
static
final
String
ENVIRONMENT_VARIABLES
=
"http://camel.apache.org/xml/variables/environment-variables"
;
public
static
final
String
EXCHANGE_PROPERTY
=
"http://camel.apache.org/xml/variables/exchange-property"
;
private
Map
<
String
,
String
>
namespaces
=
new
HashMap
<
String
,
String
>
(
)
;
public
Namespaces
(
Element
element
)
{
add
(
element
)
;
}
public
Namespaces
(
String
prefix
,
String
uri
)
{
add
(
prefix
,
uri
)
;
}
public
static
boolean
isMatchingNamespaceOrEmptyNamespace
(
String
namespaceURI
,
String
expectedNamespace
)
{
return
ObjectHelper
.
isNullOrBlank
(
namespaceURI
)
||
namespaceURI
.
equals
(
expectedNamespace
)
;
}
public
Namespaces
add
(
String
prefix
,
String
uri
)
{
namespaces
.
put
(
prefix
,
uri
)
;
return
this
;
}
public
Namespaces
add
(
Element
element
)
{
Node
parentNode
=
element
.
getParentNode
(
)
;
if
(
parentNode
instanceof
org
.
w3c
.
dom
.
Element
)
{
add
(
(
Element
)
parentNode
)
;
}
NamedNodeMap
attributes
=
element
.
getAttributes
(
)
;
int
size
=
attributes
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
size
;
i
++
)
{
Attr
node
=
(
Attr
)
attributes
.
item
(
i
)
;
String
name
=
node
.
getName
(
)
;
if
(
name
.
startsWith
(
"xmlns:"
)
)
{
String
prefix
=
name
.
substring
(
"xmlns:"
.
length
(
)
)
;
String
uri
=
node
.
getValue
(
)
;
add
(
prefix
,
uri
)
;
}
}
return
this
;
}
public
XPathExpression
xpath
(
String
expression
)
{
XPathExpression
answer
=
new
XPathExpression
(
expression
)
;
configure
(
answer
)
;
return
answer
;
}
public
XPathExpression
xpath
(
String
expression
,
Class
<
?
>
resultType
)
{
XPathExpression
answer
=
xpath
(
expression
)
;
answer
.
setResultType
(
resultType
)
;
return
answer
;
}
public
XQueryExpression
xquery
(
String
expression
)
{
XQueryExpression
answer
=
new
XQueryExpression
(
expression
)
;
configure
(
answer
)
;
return
answer
;
}
public
XQueryExpression
xquery
(
String
expression
,
Class
<
?
>
resultType
)
{
XQueryExpression
answer
=
new
XQueryExpression
(
expression
)
;
answer
.
setResultType
(
resultType
)
;
configure
(
answer
)
;
return
answer
;
}
public
Map
<
String
,
String
>
getNamespaces
(
)
{
return
namespaces
;
}
public
void
configure
(
NamespaceAware
namespaceAware
)
{
namespaceAware
.
setNamespaces
(
getNamespaces
(
)
)
;
}
}
