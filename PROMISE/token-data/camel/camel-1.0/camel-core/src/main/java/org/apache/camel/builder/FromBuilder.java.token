package
org
.
apache
.
camel
.
builder
;
import
org
.
apache
.
camel
.
Endpoint
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Expression
;
import
org
.
apache
.
camel
.
Predicate
;
import
org
.
apache
.
camel
.
Processor
;
import
org
.
apache
.
camel
.
Route
;
import
org
.
apache
.
camel
.
impl
.
EventDrivenConsumerRoute
;
import
org
.
apache
.
camel
.
processor
.
CompositeProcessor
;
import
org
.
apache
.
camel
.
processor
.
DelegateProcessor
;
import
org
.
apache
.
camel
.
processor
.
MulticastProcessor
;
import
org
.
apache
.
camel
.
processor
.
Pipeline
;
import
org
.
apache
.
camel
.
processor
.
RecipientList
;
import
org
.
apache
.
camel
.
processor
.
idempotent
.
IdempotentConsumer
;
import
org
.
apache
.
camel
.
processor
.
idempotent
.
MessageIdRepository
;
import
org
.
apache
.
camel
.
spi
.
Policy
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
public
class
FromBuilder
extends
BuilderSupport
implements
ProcessorFactory
{
public
static
final
String
DEFAULT_TRACE_CATEGORY
=
"org.apache.camel.TRACE"
;
private
RouteBuilder
builder
;
private
Endpoint
from
;
private
List
<
Processor
>
processors
=
new
ArrayList
<
Processor
>
(
)
;
private
List
<
ProcessorFactory
>
processFactories
=
new
ArrayList
<
ProcessorFactory
>
(
)
;
private
FromBuilder
routeBuilder
;
public
FromBuilder
(
RouteBuilder
builder
,
Endpoint
from
)
{
super
(
builder
)
;
this
.
builder
=
builder
;
this
.
from
=
from
;
}
public
FromBuilder
(
FromBuilder
parent
)
{
super
(
parent
)
;
this
.
builder
=
parent
.
getBuilder
(
)
;
this
.
from
=
parent
.
getFrom
(
)
;
}
@
Fluent
public
ProcessorFactory
to
(
@
FluentArg
(
"uri"
)
String
uri
)
{
return
to
(
endpoint
(
uri
)
)
;
}
@
Fluent
public
ProcessorFactory
to
(
@
FluentArg
(
"ref"
)
Endpoint
endpoint
)
{
ToBuilder
answer
=
new
ToBuilder
(
this
,
endpoint
)
;
addProcessBuilder
(
answer
)
;
return
answer
;
}
@
Fluent
public
ProcessorFactory
to
(
String
...
uris
)
{
return
to
(
endpoints
(
uris
)
)
;
}
@
Fluent
public
ProcessorFactory
to
(
@
FluentArg
(
value
=
"endpoint"
,
attribute
=
false
,
element
=
true
)
Endpoint
...
endpoints
)
{
return
to
(
endpoints
(
endpoints
)
)
;
}
@
Fluent
public
ProcessorFactory
to
(
@
FluentArg
(
value
=
"endpoint"
,
attribute
=
false
,
element
=
true
)
Collection
<
Endpoint
>
endpoints
)
{
return
addProcessBuilder
(
new
MulticastBuilder
(
this
,
endpoints
)
)
;
}
@
Fluent
public
ProcessorFactory
pipeline
(
@
FluentArg
(
"uris"
)
String
...
uris
)
{
return
pipeline
(
endpoints
(
uris
)
)
;
}
@
Fluent
public
ProcessorFactory
pipeline
(
@
FluentArg
(
"endpoints"
)
Endpoint
...
endpoints
)
{
return
pipeline
(
endpoints
(
endpoints
)
)
;
}
@
Fluent
public
ProcessorFactory
pipeline
(
@
FluentArg
(
"endpoints"
)
Collection
<
Endpoint
>
endpoints
)
{
return
addProcessBuilder
(
new
PipelineBuilder
(
this
,
endpoints
)
)
;
}
@
Fluent
public
IdempotentConsumerBuilder
idempotentConsumer
(
@
FluentArg
(
"messageIdExpression"
)
Expression
messageIdExpression
,
@
FluentArg
(
"MessageIdRepository"
)
MessageIdRepository
messageIdRepository
)
{
return
(
IdempotentConsumerBuilder
)
addProcessBuilder
(
new
IdempotentConsumerBuilder
(
this
,
messageIdExpression
,
messageIdRepository
)
)
;
}
@
Fluent
public
FilterBuilder
filter
(
@
FluentArg
(
value
=
"predicate"
,
element
=
true
)
Predicate
predicate
)
{
FilterBuilder
answer
=
new
FilterBuilder
(
this
,
predicate
)
;
addProcessBuilder
(
answer
)
;
return
answer
;
}
@
Fluent
(
nestedActions
=
true
)
public
ChoiceBuilder
choice
(
)
{
ChoiceBuilder
answer
=
new
ChoiceBuilder
(
this
)
;
addProcessBuilder
(
answer
)
;
return
answer
;
}
@
Fluent
public
RecipientListBuilder
recipientList
(
@
FluentArg
(
value
=
"recipients"
,
element
=
true
)
Expression
receipients
)
{
RecipientListBuilder
answer
=
new
RecipientListBuilder
(
this
,
receipients
)
;
addProcessBuilder
(
answer
)
;
return
answer
;
}
@
Fluent
public
SplitterBuilder
splitter
(
@
FluentArg
(
value
=
"recipients"
,
element
=
true
)
Expression
receipients
)
{
SplitterBuilder
answer
=
new
SplitterBuilder
(
this
,
receipients
)
;
addProcessBuilder
(
answer
)
;
return
answer
;
}
public
ResequencerBuilder
resequencer
(
Expression
<
Exchange
>
expression
)
{
return
resequencer
(
Collections
.
<
Expression
<
Exchange
>
>
singletonList
(
expression
)
)
;
}
@
Fluent
public
ResequencerBuilder
resequencer
(
@
FluentArg
(
value
=
"expressions"
)
List
<
Expression
<
Exchange
>
>
expressions
)
{
ResequencerBuilder
answer
=
new
ResequencerBuilder
(
this
,
expressions
)
;
setRouteBuilder
(
answer
)
;
return
answer
;
}
@
Fluent
public
ResequencerBuilder
resequencer
(
Expression
<
Exchange
>
...
expressions
)
{
List
<
Expression
<
Exchange
>
>
list
=
new
ArrayList
<
Expression
<
Exchange
>
>
(
)
;
for
(
Expression
<
Exchange
>
expression
:
expressions
)
{
list
.
add
(
expression
)
;
}
return
resequencer
(
list
)
;
}
@
Fluent
public
FromBuilder
errorHandler
(
@
FluentArg
(
"handler"
)
ErrorHandlerBuilder
errorHandlerBuilder
)
{
setErrorHandlerBuilder
(
errorHandlerBuilder
)
;
return
this
;
}
@
Fluent
public
FromBuilder
inheritErrorHandler
(
@
FluentArg
(
"condition"
)
boolean
condition
)
{
setInheritErrorHandler
(
condition
)
;
return
this
;
}
@
Fluent
(
nestedActions
=
true
)
public
InterceptorBuilder
intercept
(
)
{
InterceptorBuilder
answer
=
new
InterceptorBuilder
(
this
)
;
addProcessBuilder
(
answer
)
;
return
answer
;
}
@
Fluent
public
FromBuilder
trace
(
)
{
return
trace
(
DEFAULT_TRACE_CATEGORY
)
;
}
@
Fluent
public
FromBuilder
trace
(
@
FluentArg
(
"category"
)
String
category
)
{
final
Log
log
=
LogFactory
.
getLog
(
category
)
;
return
intercept
(
new
DelegateProcessor
(
)
{
@
Override
public
void
process
(
Exchange
exchange
)
throws
Exception
{
log
.
trace
(
exchange
)
;
processNext
(
exchange
)
;
}
}
)
;
}
@
Fluent
public
FromBuilder
intercept
(
@
FluentArg
(
"interceptor"
)
DelegateProcessor
interceptor
)
{
InterceptorBuilder
answer
=
new
InterceptorBuilder
(
this
)
;
answer
.
add
(
interceptor
)
;
addProcessBuilder
(
answer
)
;
return
answer
.
target
(
)
;
}
@
Fluent
(
nestedActions
=
true
)
public
PolicyBuilder
policies
(
)
{
PolicyBuilder
answer
=
new
PolicyBuilder
(
this
)
;
addProcessBuilder
(
answer
)
;
return
answer
;
}
@
Fluent
public
FromBuilder
policy
(
@
FluentArg
(
"policy"
)
Policy
policy
)
{
PolicyBuilder
answer
=
new
PolicyBuilder
(
this
)
;
answer
.
add
(
policy
)
;
addProcessBuilder
(
answer
)
;
return
answer
.
target
(
)
;
}
@
Fluent
public
FromBuilder
process
(
@
FluentArg
(
"ref"
)
Processor
processor
)
{
addProcessorBuilder
(
processor
)
;
return
this
;
}
@
Fluent
public
FromBuilder
setBody
(
Expression
expression
)
{
addProcessorBuilder
(
ProcessorBuilder
.
setBody
(
expression
)
)
;
return
this
;
}
@
Fluent
public
FromBuilder
setOutBody
(
Expression
expression
)
{
addProcessorBuilder
(
ProcessorBuilder
.
setOutBody
(
expression
)
)
;
return
this
;
}
@
Fluent
public
FromBuilder
setHeader
(
String
name
,
Expression
expression
)
{
addProcessorBuilder
(
ProcessorBuilder
.
setHeader
(
name
,
expression
)
)
;
return
this
;
}
@
Fluent
public
FromBuilder
setOutHeader
(
String
name
,
Expression
expression
)
{
addProcessorBuilder
(
ProcessorBuilder
.
setOutHeader
(
name
,
expression
)
)
;
return
this
;
}
@
Fluent
public
FromBuilder
setProperty
(
String
name
,
Expression
expression
)
{
addProcessorBuilder
(
ProcessorBuilder
.
setProperty
(
name
,
expression
)
)
;
return
this
;
}
@
Fluent
public
FromBuilder
convertBodyTo
(
Class
type
)
{
addProcessorBuilder
(
ProcessorBuilder
.
setBody
(
Builder
.
body
(
)
.
convertTo
(
type
)
)
)
;
return
this
;
}
@
Fluent
public
FromBuilder
convertOutBodyTo
(
Class
type
)
{
addProcessorBuilder
(
ProcessorBuilder
.
setOutBody
(
Builder
.
outBody
(
)
.
convertTo
(
type
)
)
)
;
return
this
;
}
public
RouteBuilder
getBuilder
(
)
{
return
builder
;
}
public
Endpoint
getFrom
(
)
{
return
from
;
}
public
List
<
Processor
>
getProcessors
(
)
{
return
processors
;
}
public
ProcessorFactory
addProcessBuilder
(
ProcessorFactory
processFactory
)
{
processFactories
.
add
(
processFactory
)
;
return
processFactory
;
}
protected
void
addProcessorBuilder
(
Processor
processor
)
{
addProcessBuilder
(
new
ConstantProcessorBuilder
(
processor
)
)
;
}
public
void
addProcessor
(
Processor
processor
)
{
processors
.
add
(
processor
)
;
}
public
Route
createRoute
(
)
throws
Exception
{
if
(
routeBuilder
!=
null
)
{
return
routeBuilder
.
createRoute
(
)
;
}
Processor
processor
=
createProcessor
(
)
;
if
(
processor
==
null
)
{
throw
new
IllegalArgumentException
(
"No processor created for: "
+
this
)
;
}
return
new
EventDrivenConsumerRoute
(
getFrom
(
)
,
processor
)
;
}
public
Processor
createProcessor
(
)
throws
Exception
{
List
<
Processor
>
answer
=
new
ArrayList
<
Processor
>
(
)
;
for
(
ProcessorFactory
processFactory
:
processFactories
)
{
Processor
processor
=
makeProcessor
(
processFactory
)
;
if
(
processor
==
null
)
{
throw
new
IllegalArgumentException
(
"No processor created for processBuilder: "
+
processFactory
)
;
}
answer
.
add
(
processor
)
;
}
if
(
answer
.
size
(
)
==
0
)
{
return
null
;
}
Processor
processor
=
null
;
if
(
answer
.
size
(
)
==
1
)
{
processor
=
answer
.
get
(
0
)
;
}
else
{
processor
=
new
CompositeProcessor
(
answer
)
;
}
return
processor
;
}
protected
Processor
makeProcessor
(
ProcessorFactory
processFactory
)
throws
Exception
{
Processor
processor
=
processFactory
.
createProcessor
(
)
;
processor
=
wrapProcessor
(
processor
)
;
return
wrapInErrorHandler
(
processor
)
;
}
protected
Processor
wrapInErrorHandler
(
Processor
processor
)
throws
Exception
{
return
getErrorHandlerBuilder
(
)
.
createErrorHandler
(
processor
)
;
}
protected
Processor
wrapProcessor
(
Processor
processor
)
{
return
processor
;
}
protected
FromBuilder
getRouteBuilder
(
)
{
return
routeBuilder
;
}
protected
void
setRouteBuilder
(
FromBuilder
routeBuilder
)
{
this
.
routeBuilder
=
routeBuilder
;
}
}
