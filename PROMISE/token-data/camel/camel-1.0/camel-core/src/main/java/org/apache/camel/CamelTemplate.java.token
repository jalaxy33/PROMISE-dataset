package
org
.
apache
.
camel
;
import
org
.
apache
.
camel
.
impl
.
ServiceSupport
;
import
org
.
apache
.
camel
.
util
.
ObjectHelper
;
import
org
.
apache
.
camel
.
util
.
ProducerCache
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
CamelTemplate
<
E
extends
Exchange
>
extends
ServiceSupport
{
private
CamelContext
context
;
private
ProducerCache
<
E
>
producerCache
=
new
ProducerCache
<
E
>
(
)
;
private
boolean
useEndpointCache
=
true
;
private
Map
<
String
,
Endpoint
<
E
>
>
endpointCache
=
new
HashMap
<
String
,
Endpoint
<
E
>
>
(
)
;
private
Endpoint
<
E
>
defaultEndpoint
;
public
CamelTemplate
(
CamelContext
context
)
{
this
.
context
=
context
;
}
public
CamelTemplate
(
CamelContext
context
,
Endpoint
defaultEndpoint
)
{
this
(
context
)
;
this
.
defaultEndpoint
=
defaultEndpoint
;
}
public
E
send
(
String
endpointUri
,
E
exchange
)
{
Endpoint
endpoint
=
resolveMandatoryEndpoint
(
endpointUri
)
;
send
(
endpoint
,
exchange
)
;
return
exchange
;
}
public
E
send
(
String
endpointUri
,
Processor
processor
)
{
Endpoint
endpoint
=
resolveMandatoryEndpoint
(
endpointUri
)
;
return
send
(
endpoint
,
processor
)
;
}
public
E
send
(
Endpoint
<
E
>
endpoint
,
E
exchange
)
{
E
convertedExchange
=
endpoint
.
toExchangeType
(
exchange
)
;
producerCache
.
send
(
endpoint
,
convertedExchange
)
;
return
exchange
;
}
public
E
send
(
Endpoint
<
E
>
endpoint
,
Processor
processor
)
{
return
producerCache
.
send
(
endpoint
,
processor
)
;
}
public
Object
sendBody
(
Endpoint
<
E
>
endpoint
,
final
Object
body
)
{
E
result
=
send
(
endpoint
,
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Message
in
=
exchange
.
getIn
(
)
;
in
.
setBody
(
body
)
;
}
}
)
;
return
extractResultBody
(
result
)
;
}
public
Object
sendBody
(
String
endpointUri
,
final
Object
body
)
{
E
result
=
send
(
endpointUri
,
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Message
in
=
exchange
.
getIn
(
)
;
in
.
setBody
(
body
)
;
}
}
)
;
return
extractResultBody
(
result
)
;
}
public
Object
sendBody
(
String
endpointUri
,
final
Object
body
,
final
String
header
,
final
Object
headerValue
)
{
E
result
=
send
(
endpointUri
,
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Message
in
=
exchange
.
getIn
(
)
;
in
.
setHeader
(
header
,
headerValue
)
;
in
.
setBody
(
body
)
;
}
}
)
;
return
extractResultBody
(
result
)
;
}
public
Object
sendBody
(
String
endpointUri
,
final
Object
body
,
final
Map
<
String
,
Object
>
headers
)
{
E
result
=
send
(
endpointUri
,
new
Processor
(
)
{
public
void
process
(
Exchange
exchange
)
{
Message
in
=
exchange
.
getIn
(
)
;
for
(
Map
.
Entry
<
String
,
Object
>
header
:
headers
.
entrySet
(
)
)
{
in
.
setHeader
(
header
.
getKey
(
)
,
header
.
getValue
(
)
)
;
}
in
.
setBody
(
body
)
;
}
}
)
;
return
extractResultBody
(
result
)
;
}
public
Object
sendBody
(
Object
body
)
{
return
sendBody
(
getMandatoryDefaultEndpoint
(
)
,
body
)
;
}
public
E
send
(
E
exchange
)
{
return
send
(
getMandatoryDefaultEndpoint
(
)
,
exchange
)
;
}
public
E
send
(
Processor
processor
)
{
return
send
(
getMandatoryDefaultEndpoint
(
)
,
processor
)
;
}
public
Producer
<
E
>
getProducer
(
Endpoint
<
E
>
endpoint
)
{
return
producerCache
.
getProducer
(
endpoint
)
;
}
public
CamelContext
getContext
(
)
{
return
context
;
}
public
Endpoint
<
E
>
getDefaultEndpoint
(
)
{
return
defaultEndpoint
;
}
public
void
setDefaultEndpoint
(
Endpoint
<
E
>
defaultEndpoint
)
{
this
.
defaultEndpoint
=
defaultEndpoint
;
}
public
void
setDefaultEndpointUri
(
String
endpointUri
)
{
setDefaultEndpoint
(
getContext
(
)
.
getEndpoint
(
endpointUri
)
)
;
}
public
boolean
isUseEndpointCache
(
)
{
return
useEndpointCache
;
}
public
void
setUseEndpointCache
(
boolean
useEndpointCache
)
{
this
.
useEndpointCache
=
useEndpointCache
;
}
protected
Endpoint
resolveMandatoryEndpoint
(
String
endpointUri
)
{
Endpoint
endpoint
=
null
;
if
(
isUseEndpointCache
(
)
)
{
synchronized
(
endpointCache
)
{
endpoint
=
endpointCache
.
get
(
endpointUri
)
;
if
(
endpoint
==
null
)
{
endpoint
=
context
.
getEndpoint
(
endpointUri
)
;
if
(
endpoint
!=
null
)
{
endpointCache
.
put
(
endpointUri
,
endpoint
)
;
}
}
}
}
else
{
endpoint
=
context
.
getEndpoint
(
endpointUri
)
;
}
if
(
endpoint
==
null
)
{
throw
new
NoSuchEndpointException
(
endpointUri
)
;
}
return
endpoint
;
}
protected
Endpoint
<
E
>
getMandatoryDefaultEndpoint
(
)
{
Endpoint
<
E
>
answer
=
getDefaultEndpoint
(
)
;
ObjectHelper
.
notNull
(
answer
,
"defaultEndpoint"
)
;
return
answer
;
}
protected
void
doStart
(
)
throws
Exception
{
producerCache
.
start
(
)
;
}
protected
void
doStop
(
)
throws
Exception
{
producerCache
.
stop
(
)
;
}
protected
Object
extractResultBody
(
E
result
)
{
return
result
!=
null
?
result
.
getOut
(
)
.
getBody
(
)
:
null
;
}
}
