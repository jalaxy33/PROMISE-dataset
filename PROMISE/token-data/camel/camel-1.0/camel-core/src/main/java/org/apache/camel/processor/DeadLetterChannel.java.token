package
org
.
apache
.
camel
.
processor
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Processor
;
import
org
.
apache
.
camel
.
Message
;
import
org
.
apache
.
camel
.
impl
.
ServiceSupport
;
import
org
.
apache
.
camel
.
util
.
ServiceHelper
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
public
class
DeadLetterChannel
extends
ServiceSupport
implements
ErrorHandler
{
public
static
final
String
REDELIVERY_COUNTER
=
"org.apache.camel.RedeliveryCounter"
;
public
static
final
String
REDELIVERED
=
"org.apache.camel.Redelivered"
;
private
static
final
transient
Log
log
=
LogFactory
.
getLog
(
DeadLetterChannel
.
class
)
;
private
Processor
output
;
private
Processor
deadLetter
;
private
RedeliveryPolicy
redeliveryPolicy
;
private
Logger
logger
;
public
static
<
E
extends
Exchange
>
Logger
createDefaultLogger
(
)
{
return
new
Logger
(
log
,
LoggingLevel
.
ERROR
)
;
}
public
DeadLetterChannel
(
Processor
output
,
Processor
deadLetter
)
{
this
(
output
,
deadLetter
,
new
RedeliveryPolicy
(
)
,
DeadLetterChannel
.
createDefaultLogger
(
)
)
;
}
public
DeadLetterChannel
(
Processor
output
,
Processor
deadLetter
,
RedeliveryPolicy
redeliveryPolicy
,
Logger
logger
)
{
this
.
deadLetter
=
deadLetter
;
this
.
output
=
output
;
this
.
redeliveryPolicy
=
redeliveryPolicy
;
this
.
logger
=
logger
;
}
@
Override
public
String
toString
(
)
{
return
"DeadLetterChannel["
+
output
+
", "
+
deadLetter
+
", "
+
redeliveryPolicy
+
"]"
;
}
public
void
process
(
Exchange
exchange
)
throws
Exception
{
int
redeliveryCounter
=
0
;
long
redeliveryDelay
=
0
;
do
{
if
(
redeliveryCounter
>
0
)
{
redeliveryDelay
=
redeliveryPolicy
.
getRedeliveryDelay
(
redeliveryDelay
)
;
sleep
(
redeliveryDelay
)
;
}
try
{
output
.
process
(
exchange
)
;
return
;
}
catch
(
RuntimeException
e
)
{
logger
.
log
(
"On delivery attempt: "
+
redeliveryCounter
+
" caught: "
+
e
,
e
)
;
}
redeliveryCounter
=
incrementRedeliveryCounter
(
exchange
)
;
}
while
(
redeliveryPolicy
.
shouldRedeliver
(
redeliveryCounter
)
)
;
deadLetter
.
process
(
exchange
)
;
}
public
Processor
getOutput
(
)
{
return
output
;
}
public
Processor
getDeadLetter
(
)
{
return
deadLetter
;
}
public
RedeliveryPolicy
getRedeliveryPolicy
(
)
{
return
redeliveryPolicy
;
}
public
void
setRedeliveryPolicy
(
RedeliveryPolicy
redeliveryPolicy
)
{
this
.
redeliveryPolicy
=
redeliveryPolicy
;
}
public
Logger
getLogger
(
)
{
return
logger
;
}
public
void
setLogger
(
Logger
logger
)
{
this
.
logger
=
logger
;
}
protected
int
incrementRedeliveryCounter
(
Exchange
exchange
)
{
Message
in
=
exchange
.
getIn
(
)
;
Integer
counter
=
in
.
getHeader
(
REDELIVERY_COUNTER
,
Integer
.
class
)
;
int
next
=
1
;
if
(
counter
!=
null
)
{
next
=
counter
+
1
;
}
in
.
setHeader
(
REDELIVERY_COUNTER
,
next
)
;
in
.
setHeader
(
REDELIVERED
,
true
)
;
return
next
;
}
protected
void
sleep
(
long
redeliveryDelay
)
{
if
(
redeliveryDelay
>
0
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Sleeping for: "
+
redeliveryDelay
+
" until attempting redelivery"
)
;
}
try
{
Thread
.
sleep
(
redeliveryDelay
)
;
}
catch
(
InterruptedException
e
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Thread interupted: "
+
e
,
e
)
;
}
}
}
}
protected
void
doStart
(
)
throws
Exception
{
ServiceHelper
.
startServices
(
output
,
deadLetter
)
;
}
protected
void
doStop
(
)
throws
Exception
{
ServiceHelper
.
stopServices
(
deadLetter
,
output
)
;
}
}
