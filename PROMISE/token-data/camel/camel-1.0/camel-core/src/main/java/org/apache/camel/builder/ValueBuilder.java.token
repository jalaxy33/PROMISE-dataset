package
org
.
apache
.
camel
.
builder
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Expression
;
import
org
.
apache
.
camel
.
Predicate
;
public
class
ValueBuilder
<
E
extends
Exchange
>
implements
Expression
<
E
>
{
private
Expression
<
E
>
expression
;
public
ValueBuilder
(
Expression
<
E
>
expression
)
{
this
.
expression
=
expression
;
}
public
Object
evaluate
(
E
exchange
)
{
return
expression
.
evaluate
(
exchange
)
;
}
public
Expression
<
E
>
getExpression
(
)
{
return
expression
;
}
@
Override
public
String
toString
(
)
{
return
expression
.
toString
(
)
;
}
@
Fluent
public
Predicate
<
E
>
isNotEqualTo
(
@
FluentArg
(
"value"
)
Object
value
)
{
Expression
<
E
>
right
=
asExpression
(
value
)
;
return
onNewPredicate
(
PredicateBuilder
.
isNotEqualTo
(
expression
,
right
)
)
;
}
@
Fluent
public
Predicate
<
E
>
isEqualTo
(
@
FluentArg
(
"value"
)
Object
value
)
{
Expression
<
E
>
right
=
asExpression
(
value
)
;
return
onNewPredicate
(
PredicateBuilder
.
isEqualTo
(
expression
,
right
)
)
;
}
@
Fluent
public
Predicate
<
E
>
isLessThan
(
@
FluentArg
(
"value"
)
Object
value
)
{
Expression
<
E
>
right
=
asExpression
(
value
)
;
return
onNewPredicate
(
PredicateBuilder
.
isLessThan
(
expression
,
right
)
)
;
}
@
Fluent
public
Predicate
<
E
>
isLessThanOrEqualTo
(
@
FluentArg
(
"value"
)
Object
value
)
{
Expression
<
E
>
right
=
asExpression
(
value
)
;
return
onNewPredicate
(
PredicateBuilder
.
isLessThanOrEqualTo
(
expression
,
right
)
)
;
}
@
Fluent
public
Predicate
<
E
>
isGreaterThan
(
@
FluentArg
(
"value"
)
Object
value
)
{
Expression
<
E
>
right
=
asExpression
(
value
)
;
return
onNewPredicate
(
PredicateBuilder
.
isGreaterThan
(
expression
,
right
)
)
;
}
@
Fluent
public
Predicate
<
E
>
isGreaterThanOrEqualTo
(
@
FluentArg
(
"value"
)
Object
value
)
{
Expression
<
E
>
right
=
asExpression
(
value
)
;
return
onNewPredicate
(
PredicateBuilder
.
isGreaterThanOrEqualTo
(
expression
,
right
)
)
;
}
@
Fluent
public
Predicate
<
E
>
isInstanceOf
(
@
FluentArg
(
"class"
)
Class
type
)
{
return
onNewPredicate
(
PredicateBuilder
.
isInstanceOf
(
expression
,
type
)
)
;
}
@
Fluent
public
Predicate
<
E
>
matchesRegex
(
@
FluentArg
(
"regex"
)
String
regex
)
{
return
onNewPredicate
(
PredicateBuilder
.
regex
(
expression
,
regex
)
)
;
}
@
Fluent
public
Predicate
<
E
>
isNull
(
)
{
return
onNewPredicate
(
PredicateBuilder
.
isNull
(
expression
)
)
;
}
@
Fluent
public
Predicate
<
E
>
isNotNull
(
)
{
return
onNewPredicate
(
PredicateBuilder
.
isNotNull
(
expression
)
)
;
}
@
Fluent
public
Predicate
<
E
>
contains
(
@
FluentArg
(
"value"
)
Object
value
)
{
Expression
<
E
>
right
=
asExpression
(
value
)
;
return
onNewPredicate
(
PredicateBuilder
.
contains
(
expression
,
right
)
)
;
}
@
Fluent
public
Predicate
<
E
>
regex
(
String
regex
)
{
return
onNewPredicate
(
PredicateBuilder
.
regex
(
expression
,
regex
)
)
;
}
@
Fluent
public
ValueBuilder
<
E
>
tokenize
(
)
{
return
tokenize
(
"\n"
)
;
}
@
Fluent
public
ValueBuilder
<
E
>
tokenize
(
@
FluentArg
(
"token"
)
String
token
)
{
Expression
<
E
>
newExp
=
ExpressionBuilder
.
tokenizeExpression
(
expression
,
token
)
;
return
new
ValueBuilder
<
E
>
(
newExp
)
;
}
@
Fluent
public
ValueBuilder
<
E
>
regexTokenize
(
@
FluentArg
(
"regex"
)
String
regex
)
{
Expression
<
E
>
newExp
=
ExpressionBuilder
.
regexTokenize
(
expression
,
regex
)
;
return
new
ValueBuilder
<
E
>
(
newExp
)
;
}
@
Fluent
public
ValueBuilder
<
E
>
regexReplaceAll
(
@
FluentArg
(
"regex"
)
String
regex
,
@
FluentArg
(
"replacement"
)
String
replacement
)
{
Expression
<
E
>
newExp
=
ExpressionBuilder
.
regexReplaceAll
(
expression
,
regex
,
replacement
)
;
return
new
ValueBuilder
<
E
>
(
newExp
)
;
}
@
Fluent
public
ValueBuilder
<
E
>
regexReplaceAll
(
@
FluentArg
(
"regex"
)
String
regex
,
@
FluentArg
(
"replacement"
)
Expression
<
E
>
replacement
)
{
Expression
<
E
>
newExp
=
ExpressionBuilder
.
regexReplaceAll
(
expression
,
regex
,
replacement
)
;
return
new
ValueBuilder
<
E
>
(
newExp
)
;
}
@
Fluent
public
ValueBuilder
<
E
>
convertTo
(
@
FluentArg
(
"type"
)
Class
type
)
{
Expression
<
E
>
newExp
=
ExpressionBuilder
.
convertTo
(
expression
,
type
)
;
return
new
ValueBuilder
<
E
>
(
newExp
)
;
}
@
Fluent
public
ValueBuilder
<
E
>
convertToString
(
)
{
return
convertTo
(
String
.
class
)
;
}
@
Fluent
public
ValueBuilder
<
E
>
append
(
@
FluentArg
(
"value"
)
Object
value
)
{
return
new
ValueBuilder
<
E
>
(
ExpressionBuilder
.
append
(
expression
,
asExpression
(
value
)
)
)
;
}
protected
Predicate
<
E
>
onNewPredicate
(
Predicate
<
E
>
predicate
)
{
return
predicate
;
}
protected
Expression
<
E
>
asExpression
(
Object
value
)
{
if
(
value
instanceof
Expression
)
{
return
(
Expression
<
E
>
)
value
;
}
else
{
return
ExpressionBuilder
.
constantExpression
(
value
)
;
}
}
}
