package
org
.
apache
.
camel
.
builder
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicBoolean
;
import
org
.
apache
.
camel
.
CamelContext
;
import
org
.
apache
.
camel
.
Endpoint
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Processor
;
import
org
.
apache
.
camel
.
Route
;
import
org
.
apache
.
camel
.
impl
.
DefaultCamelContext
;
public
abstract
class
RouteBuilder
extends
BuilderSupport
{
private
List
<
FromBuilder
>
fromBuilders
=
new
ArrayList
<
FromBuilder
>
(
)
;
private
AtomicBoolean
initalized
=
new
AtomicBoolean
(
false
)
;
private
List
<
Route
>
routes
=
new
ArrayList
<
Route
>
(
)
;
protected
RouteBuilder
(
)
{
this
(
null
)
;
}
protected
RouteBuilder
(
CamelContext
context
)
{
super
(
context
)
;
}
public
abstract
void
configure
(
)
throws
Exception
;
@
Fluent
public
FromBuilder
from
(
@
FluentArg
(
"uri"
)
String
uri
)
{
if
(
uri
==
null
)
{
throw
new
IllegalArgumentException
(
"uri parameter cannot be null"
)
;
}
Endpoint
endpoint
=
endpoint
(
uri
)
;
if
(
endpoint
==
null
)
{
throw
new
IllegalArgumentException
(
"uri '"
+
uri
+
"' could not be resolved."
)
;
}
return
from
(
endpoint
)
;
}
@
Fluent
public
FromBuilder
from
(
@
FluentArg
(
"ref"
)
Endpoint
endpoint
)
{
FromBuilder
answer
=
new
FromBuilder
(
this
,
endpoint
)
;
addFromBuilder
(
answer
)
;
return
answer
;
}
public
RouteBuilder
errorHandler
(
ErrorHandlerBuilder
errorHandlerBuilder
)
{
setErrorHandlerBuilder
(
errorHandlerBuilder
)
;
return
this
;
}
public
RouteBuilder
inheritErrorHandler
(
boolean
value
)
{
setInheritErrorHandler
(
value
)
;
return
this
;
}
public
CamelContext
getContext
(
)
{
CamelContext
context
=
super
.
getContext
(
)
;
if
(
context
==
null
)
{
context
=
createContainer
(
)
;
setContext
(
context
)
;
}
return
context
;
}
public
List
<
Route
>
getRouteList
(
)
throws
Exception
{
checkInitialized
(
)
;
return
routes
;
}
public
List
<
FromBuilder
>
getFromBuilders
(
)
throws
Exception
{
checkInitialized
(
)
;
return
fromBuilders
;
}
public
void
addFromBuilder
(
FromBuilder
answer
)
{
fromBuilders
.
add
(
answer
)
;
}
protected
void
checkInitialized
(
)
throws
Exception
{
if
(
initalized
.
compareAndSet
(
false
,
true
)
)
{
configure
(
)
;
populateRoutes
(
routes
)
;
}
}
protected
void
populateRoutes
(
List
<
Route
>
routes
)
throws
Exception
{
for
(
FromBuilder
builder
:
fromBuilders
)
{
Route
route
=
builder
.
createRoute
(
)
;
routes
.
add
(
route
)
;
}
}
protected
CamelContext
createContainer
(
)
{
return
new
DefaultCamelContext
(
)
;
}
}
