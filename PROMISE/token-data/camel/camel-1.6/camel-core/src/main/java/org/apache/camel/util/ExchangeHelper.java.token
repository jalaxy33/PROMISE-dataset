package
org
.
apache
.
camel
.
util
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
org
.
apache
.
camel
.
Endpoint
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
ExchangePattern
;
import
org
.
apache
.
camel
.
InvalidPayloadException
;
import
org
.
apache
.
camel
.
InvalidTypeException
;
import
org
.
apache
.
camel
.
Message
;
import
org
.
apache
.
camel
.
NoSuchBeanException
;
import
org
.
apache
.
camel
.
NoSuchEndpointException
;
import
org
.
apache
.
camel
.
NoSuchHeaderException
;
import
org
.
apache
.
camel
.
NoSuchPropertyException
;
import
org
.
apache
.
camel
.
NoTypeConversionAvailableException
;
public
final
class
ExchangeHelper
{
private
ExchangeHelper
(
)
{
}
public
static
<
T
>
T
getExchangeProperty
(
Exchange
exchange
,
String
propertyName
,
Class
<
T
>
type
,
T
defaultValue
)
{
T
answer
=
exchange
.
getProperty
(
propertyName
,
type
)
;
if
(
answer
==
null
)
{
return
defaultValue
;
}
return
answer
;
}
@
SuppressWarnings
(
{
"unchecked"
}
)
public
static
<
E
extends
Exchange
>
Endpoint
<
E
>
resolveEndpoint
(
E
exchange
,
Object
value
)
throws
NoSuchEndpointException
{
Endpoint
<
E
>
endpoint
;
if
(
value
instanceof
Endpoint
)
{
endpoint
=
(
Endpoint
<
E
>
)
value
;
}
else
{
String
uri
=
value
.
toString
(
)
;
endpoint
=
CamelContextHelper
.
getMandatoryEndpoint
(
exchange
.
getContext
(
)
,
uri
)
;
}
return
endpoint
;
}
public
static
<
T
>
T
getMandatoryProperty
(
Exchange
exchange
,
String
propertyName
,
Class
<
T
>
type
)
throws
NoSuchPropertyException
{
try
{
T
result
=
exchange
.
getProperty
(
propertyName
,
type
)
;
if
(
result
!=
null
)
{
return
result
;
}
}
catch
(
NoTypeConversionAvailableException
ex
)
{
}
throw
new
NoSuchPropertyException
(
exchange
,
propertyName
,
type
)
;
}
public
static
<
T
>
T
getMandatoryHeader
(
Exchange
exchange
,
String
propertyName
,
Class
<
T
>
type
)
throws
NoSuchHeaderException
{
T
answer
=
exchange
.
getIn
(
)
.
getHeader
(
propertyName
,
type
)
;
if
(
answer
==
null
)
{
throw
new
NoSuchHeaderException
(
exchange
,
propertyName
,
type
)
;
}
return
answer
;
}
public
static
Object
getMandatoryInBody
(
Exchange
exchange
)
throws
InvalidPayloadException
{
Object
answer
=
exchange
.
getIn
(
)
.
getBody
(
)
;
if
(
answer
==
null
)
{
throw
new
InvalidPayloadException
(
exchange
,
Object
.
class
)
;
}
return
answer
;
}
public
static
<
T
>
T
getMandatoryInBody
(
Exchange
exchange
,
Class
<
T
>
type
)
throws
InvalidPayloadException
{
T
answer
=
exchange
.
getIn
(
)
.
getBody
(
type
)
;
if
(
answer
==
null
)
{
throw
new
InvalidPayloadException
(
exchange
,
type
)
;
}
return
answer
;
}
public
static
Object
getMandatoryOutBody
(
Exchange
exchange
)
throws
InvalidPayloadException
{
Message
out
=
exchange
.
getOut
(
)
;
Object
answer
=
out
.
getBody
(
)
;
if
(
answer
==
null
)
{
throw
new
InvalidPayloadException
(
exchange
,
Object
.
class
,
out
)
;
}
return
answer
;
}
public
static
<
T
>
T
getMandatoryOutBody
(
Exchange
exchange
,
Class
<
T
>
type
)
throws
InvalidPayloadException
{
Message
out
=
exchange
.
getOut
(
)
;
T
answer
=
out
.
getBody
(
type
)
;
if
(
answer
==
null
)
{
throw
new
InvalidPayloadException
(
exchange
,
type
,
out
)
;
}
return
answer
;
}
public
static
<
T
>
T
convertToMandatoryType
(
Exchange
exchange
,
Class
<
T
>
type
,
Object
value
)
throws
InvalidTypeException
{
T
answer
=
convertToType
(
exchange
,
type
,
value
)
;
if
(
answer
==
null
)
{
throw
new
InvalidTypeException
(
exchange
,
value
,
type
)
;
}
return
answer
;
}
public
static
<
T
>
T
convertToType
(
Exchange
exchange
,
Class
<
T
>
type
,
Object
value
)
{
return
exchange
.
getContext
(
)
.
getTypeConverter
(
)
.
convertTo
(
type
,
exchange
,
value
)
;
}
public
static
void
copyResults
(
Exchange
result
,
Exchange
source
)
{
if
(
result
!=
source
)
{
result
.
setException
(
source
.
getException
(
)
)
;
Message
fault
=
source
.
getFault
(
false
)
;
if
(
fault
!=
null
)
{
result
.
getFault
(
true
)
.
copyFrom
(
fault
)
;
}
Message
out
=
source
.
getOut
(
false
)
;
if
(
out
!=
null
)
{
result
.
getOut
(
true
)
.
copyFrom
(
out
)
;
}
else
{
if
(
result
.
getPattern
(
)
.
isOutCapable
(
)
)
{
result
.
getOut
(
true
)
.
copyFrom
(
source
.
getIn
(
)
)
;
}
else
{
result
.
getIn
(
)
.
copyFrom
(
source
.
getIn
(
)
)
;
}
}
result
.
getProperties
(
)
.
clear
(
)
;
result
.
getProperties
(
)
.
putAll
(
source
.
getProperties
(
)
)
;
}
}
public
static
boolean
isInCapable
(
Exchange
exchange
)
{
ExchangePattern
pattern
=
exchange
.
getPattern
(
)
;
return
pattern
!=
null
&&
pattern
.
isInCapable
(
)
;
}
public
static
boolean
isOutCapable
(
Exchange
exchange
)
{
ExchangePattern
pattern
=
exchange
.
getPattern
(
)
;
return
pattern
!=
null
&&
pattern
.
isOutCapable
(
)
;
}
public
static
<
T
>
T
newInstance
(
Exchange
exchange
,
Class
<
T
>
type
)
{
return
exchange
.
getContext
(
)
.
getInjector
(
)
.
newInstance
(
type
)
;
}
public
static
Map
createVariableMap
(
Exchange
exchange
)
{
Map
answer
=
new
HashMap
(
)
;
populateVariableMap
(
exchange
,
answer
)
;
return
answer
;
}
public
static
void
populateVariableMap
(
Exchange
exchange
,
Map
map
)
{
map
.
put
(
"exchange"
,
exchange
)
;
Message
in
=
exchange
.
getIn
(
)
;
map
.
put
(
"in"
,
in
)
;
map
.
put
(
"request"
,
in
)
;
map
.
put
(
"headers"
,
in
.
getHeaders
(
)
)
;
map
.
put
(
"body"
,
in
.
getBody
(
)
)
;
if
(
isOutCapable
(
exchange
)
)
{
Message
out
=
exchange
.
getOut
(
true
)
;
map
.
put
(
"out"
,
out
)
;
map
.
put
(
"response"
,
out
)
;
}
map
.
put
(
"camelContext"
,
exchange
.
getContext
(
)
)
;
}
public
static
String
getContentType
(
Exchange
exchange
)
{
return
exchange
.
getIn
(
)
.
getHeader
(
"Content-Type"
,
String
.
class
)
;
}
public
static
Object
lookupMandatoryBean
(
Exchange
exchange
,
String
name
)
{
Object
value
=
lookupBean
(
exchange
,
name
)
;
if
(
value
==
null
)
{
throw
new
NoSuchBeanException
(
name
)
;
}
return
value
;
}
public
static
<
T
>
T
lookupMandatoryBean
(
Exchange
exchange
,
String
name
,
Class
<
T
>
type
)
{
T
value
=
lookupBean
(
exchange
,
name
,
type
)
;
if
(
value
==
null
)
{
throw
new
NoSuchBeanException
(
name
)
;
}
return
value
;
}
public
static
Object
lookupBean
(
Exchange
exchange
,
String
name
)
{
return
exchange
.
getContext
(
)
.
getRegistry
(
)
.
lookup
(
name
)
;
}
public
static
<
T
>
T
lookupBean
(
Exchange
exchange
,
String
name
,
Class
<
T
>
type
)
{
return
exchange
.
getContext
(
)
.
getRegistry
(
)
.
lookup
(
name
,
type
)
;
}
}
