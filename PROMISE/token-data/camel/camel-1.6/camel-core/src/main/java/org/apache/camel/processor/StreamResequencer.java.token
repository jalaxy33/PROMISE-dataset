package
org
.
apache
.
camel
.
processor
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Processor
;
import
org
.
apache
.
camel
.
impl
.
LoggingExceptionHandler
;
import
org
.
apache
.
camel
.
impl
.
ServiceSupport
;
import
org
.
apache
.
camel
.
processor
.
resequencer
.
ResequencerEngine
;
import
org
.
apache
.
camel
.
processor
.
resequencer
.
SequenceElementComparator
;
import
org
.
apache
.
camel
.
processor
.
resequencer
.
SequenceSender
;
import
org
.
apache
.
camel
.
spi
.
ExceptionHandler
;
import
org
.
apache
.
camel
.
util
.
ServiceHelper
;
public
class
StreamResequencer
extends
ServiceSupport
implements
SequenceSender
<
Exchange
>
,
Processor
{
private
static
final
long
DELIVERY_ATTEMPT_INTERVAL
=
1000L
;
private
ExceptionHandler
exceptionHandler
;
private
ResequencerEngine
<
Exchange
>
engine
;
private
Processor
processor
;
private
Delivery
delivery
;
private
int
capacity
;
public
StreamResequencer
(
Processor
processor
,
SequenceElementComparator
<
Exchange
>
comparator
)
{
this
.
exceptionHandler
=
new
LoggingExceptionHandler
(
getClass
(
)
)
;
this
.
engine
=
new
ResequencerEngine
<
Exchange
>
(
comparator
)
;
this
.
engine
.
setSequenceSender
(
this
)
;
this
.
processor
=
processor
;
}
public
ExceptionHandler
getExceptionHandler
(
)
{
return
exceptionHandler
;
}
public
Processor
getProcessor
(
)
{
return
processor
;
}
public
int
getCapacity
(
)
{
return
capacity
;
}
public
long
getTimeout
(
)
{
return
engine
.
getTimeout
(
)
;
}
public
void
setCapacity
(
int
capacity
)
{
this
.
capacity
=
capacity
;
}
public
void
setTimeout
(
long
timeout
)
{
engine
.
setTimeout
(
timeout
)
;
}
@
Override
public
String
toString
(
)
{
return
"StreamResequencer[to: "
+
processor
+
"]"
;
}
@
Override
protected
void
doStart
(
)
throws
Exception
{
ServiceHelper
.
startServices
(
processor
)
;
delivery
=
new
Delivery
(
)
;
engine
.
start
(
)
;
delivery
.
start
(
)
;
}
@
Override
protected
void
doStop
(
)
throws
Exception
{
engine
.
stop
(
)
;
ServiceHelper
.
stopServices
(
processor
)
;
}
public
void
sendElement
(
Exchange
o
)
throws
Exception
{
processor
.
process
(
o
)
;
}
public
void
process
(
Exchange
exchange
)
throws
Exception
{
while
(
engine
.
size
(
)
>=
capacity
)
{
Thread
.
sleep
(
getTimeout
(
)
)
;
}
engine
.
insert
(
exchange
)
;
delivery
.
request
(
)
;
}
private
class
Delivery
extends
Thread
{
private
volatile
boolean
cancelRequested
;
public
Delivery
(
)
{
super
(
"Delivery Thread"
)
;
}
@
Override
public
void
run
(
)
{
while
(
true
)
{
try
{
Thread
.
sleep
(
DELIVERY_ATTEMPT_INTERVAL
)
;
}
catch
(
InterruptedException
e
)
{
if
(
cancelRequested
)
{
return
;
}
}
try
{
engine
.
deliver
(
)
;
}
catch
(
Exception
e
)
{
exceptionHandler
.
handleException
(
e
)
;
}
}
}
public
void
cancel
(
)
{
cancelRequested
=
true
;
interrupt
(
)
;
}
public
void
request
(
)
{
interrupt
(
)
;
}
}
}
