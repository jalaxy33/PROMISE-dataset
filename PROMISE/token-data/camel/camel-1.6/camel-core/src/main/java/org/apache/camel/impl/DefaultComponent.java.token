package
org
.
apache
.
camel
.
impl
;
import
java
.
net
.
URI
;
import
java
.
util
.
Map
;
import
java
.
util
.
concurrent
.
ScheduledExecutorService
;
import
java
.
util
.
concurrent
.
ScheduledThreadPoolExecutor
;
import
java
.
util
.
concurrent
.
ThreadFactory
;
import
org
.
apache
.
camel
.
CamelContext
;
import
org
.
apache
.
camel
.
Component
;
import
org
.
apache
.
camel
.
Endpoint
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
ResolveEndpointFailedException
;
import
org
.
apache
.
camel
.
spi
.
Injector
;
import
org
.
apache
.
camel
.
spi
.
Registry
;
import
org
.
apache
.
camel
.
util
.
CamelContextHelper
;
import
org
.
apache
.
camel
.
util
.
IntrospectionSupport
;
import
org
.
apache
.
camel
.
util
.
ObjectHelper
;
import
org
.
apache
.
camel
.
util
.
URISupport
;
import
org
.
apache
.
camel
.
util
.
UnsafeUriCharactersEncoder
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
public
abstract
class
DefaultComponent
<
E
extends
Exchange
>
extends
ServiceSupport
implements
Component
<
E
>
{
private
static
final
transient
Log
LOG
=
LogFactory
.
getLog
(
DefaultComponent
.
class
)
;
private
int
defaultThreadPoolSize
=
5
;
private
CamelContext
camelContext
;
private
ScheduledExecutorService
executorService
;
public
DefaultComponent
(
)
{
}
public
DefaultComponent
(
CamelContext
context
)
{
this
.
camelContext
=
context
;
}
public
Endpoint
<
E
>
createEndpoint
(
String
uri
)
throws
Exception
{
ObjectHelper
.
notNull
(
getCamelContext
(
)
,
"camelContext"
)
;
URI
u
=
new
URI
(
UnsafeUriCharactersEncoder
.
encode
(
uri
)
)
;
String
path
=
u
.
getSchemeSpecificPart
(
)
;
if
(
path
.
startsWith
(
"//"
)
)
{
path
=
path
.
substring
(
2
)
;
}
int
idx
=
path
.
indexOf
(
'?'
)
;
if
(
idx
>
0
)
{
path
=
path
.
substring
(
0
,
idx
)
;
}
Map
parameters
=
URISupport
.
parseParameters
(
u
)
;
validateURI
(
uri
,
path
,
parameters
)
;
if
(
LOG
.
isDebugEnabled
(
)
)
{
LOG
.
debug
(
"Creating endpoint uri=["
+
uri
+
"], path=["
+
path
+
"], parameters=["
+
parameters
+
"]"
)
;
}
Endpoint
<
E
>
endpoint
=
createEndpoint
(
uri
,
path
,
parameters
)
;
if
(
endpoint
==
null
)
{
return
null
;
}
if
(
parameters
!=
null
)
{
endpoint
.
configureProperties
(
parameters
)
;
if
(
useIntrospectionOnEndpoint
(
)
)
{
setProperties
(
endpoint
,
parameters
)
;
}
if
(
!
endpoint
.
isLenientProperties
(
)
&&
parameters
.
size
(
)
>
0
)
{
throw
new
ResolveEndpointFailedException
(
uri
,
"There are "
+
parameters
.
size
(
)
+
" parameters that couldn't be set on the endpoint."
+
" Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."
+
" Unknown parameters=["
+
parameters
+
"]"
)
;
}
}
return
endpoint
;
}
protected
void
validateURI
(
String
uri
,
String
path
,
Map
parameters
)
throws
ResolveEndpointFailedException
{
if
(
uri
.
contains
(
"&"
)
&&
!
uri
.
contains
(
"?"
)
)
{
throw
new
ResolveEndpointFailedException
(
uri
,
"Invalid uri syntax: no ? marker however the uri "
+
"has & parameter separators. Check the uri if its missing a ? marker."
)
;
}
if
(
uri
.
contains
(
"&&"
)
)
{
throw
new
ResolveEndpointFailedException
(
uri
,
"Invalid uri syntax: Double && marker found. "
+
"Check the uri and remove the duplicate & marker."
)
;
}
}
public
CamelContext
getCamelContext
(
)
{
return
camelContext
;
}
public
void
setCamelContext
(
CamelContext
context
)
{
this
.
camelContext
=
context
;
}
public
ScheduledExecutorService
getExecutorService
(
)
{
if
(
executorService
==
null
)
{
executorService
=
createExecutorService
(
)
;
}
return
executorService
;
}
public
void
setExecutorService
(
ScheduledExecutorService
executorService
)
{
this
.
executorService
=
executorService
;
}
protected
ScheduledExecutorService
createExecutorService
(
)
{
return
new
ScheduledThreadPoolExecutor
(
defaultThreadPoolSize
,
new
ThreadFactory
(
)
{
int
counter
;
public
synchronized
Thread
newThread
(
Runnable
runnable
)
{
Thread
thread
=
new
Thread
(
runnable
)
;
thread
.
setName
(
"Thread: "
+
(
++
counter
)
+
" "
+
DefaultComponent
.
this
.
toString
(
)
)
;
return
thread
;
}
}
)
;
}
protected
void
doStart
(
)
throws
Exception
{
ObjectHelper
.
notNull
(
getCamelContext
(
)
,
"camelContext"
)
;
}
protected
void
doStop
(
)
throws
Exception
{
if
(
executorService
!=
null
)
{
executorService
.
shutdown
(
)
;
}
}
protected
abstract
Endpoint
<
E
>
createEndpoint
(
String
uri
,
String
remaining
,
Map
parameters
)
throws
Exception
;
protected
void
setProperties
(
Object
bean
,
Map
parameters
)
throws
Exception
{
IntrospectionSupport
.
setProperties
(
getCamelContext
(
)
.
getTypeConverter
(
)
,
bean
,
parameters
)
;
}
protected
boolean
useIntrospectionOnEndpoint
(
)
{
return
true
;
}
public
<
T
>
T
convertTo
(
Class
<
T
>
type
,
Object
value
)
{
return
CamelContextHelper
.
convertTo
(
getCamelContext
(
)
,
type
,
value
)
;
}
public
<
T
>
T
mandatoryConvertTo
(
Class
<
T
>
type
,
Object
value
)
{
return
CamelContextHelper
.
mandatoryConvertTo
(
getCamelContext
(
)
,
type
,
value
)
;
}
public
<
T
>
T
newInstance
(
Class
<
T
>
beanType
)
{
return
getCamelContext
(
)
.
getInjector
(
)
.
newInstance
(
beanType
)
;
}
public
Object
lookup
(
String
name
)
{
return
getCamelContext
(
)
.
getRegistry
(
)
.
lookup
(
name
)
;
}
public
<
T
>
T
lookup
(
String
name
,
Class
<
T
>
beanType
)
{
return
getCamelContext
(
)
.
getRegistry
(
)
.
lookup
(
name
,
beanType
)
;
}
public
Object
mandatoryLookup
(
String
name
)
{
return
CamelContextHelper
.
mandatoryLookup
(
getCamelContext
(
)
,
name
)
;
}
public
<
T
>
T
mandatoryLookup
(
String
name
,
Class
<
T
>
beanType
)
{
return
CamelContextHelper
.
mandatoryLookup
(
getCamelContext
(
)
,
name
,
beanType
)
;
}
public
<
T
>
T
getAndRemoveParameter
(
Map
parameters
,
String
key
,
Class
<
T
>
type
)
{
return
getAndRemoveParameter
(
parameters
,
key
,
type
,
null
)
;
}
public
<
T
>
T
getAndRemoveParameter
(
Map
parameters
,
String
key
,
Class
<
T
>
type
,
T
defaultValue
)
{
Object
value
=
parameters
.
remove
(
key
)
;
if
(
value
==
null
)
{
value
=
defaultValue
;
}
if
(
value
==
null
)
{
return
null
;
}
return
convertTo
(
type
,
value
)
;
}
}
