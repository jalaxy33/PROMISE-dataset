package
org
.
apache
.
camel
.
processor
.
resequencer
;
import
java
.
util
.
Timer
;
public
class
ResequencerEngine
<
E
>
{
private
Element
<
E
>
lastDelivered
;
private
long
timeout
;
private
Sequence
<
Element
<
E
>
>
sequence
;
private
Timer
timer
;
private
SequenceSender
<
E
>
sequenceSender
;
public
ResequencerEngine
(
SequenceElementComparator
<
E
>
comparator
)
{
this
.
sequence
=
createSequence
(
comparator
)
;
this
.
timeout
=
2000L
;
this
.
lastDelivered
=
null
;
}
public
void
start
(
)
{
timer
=
new
Timer
(
"Stream Resequencer Timer"
)
;
}
public
void
stop
(
)
{
timer
.
cancel
(
)
;
}
public
synchronized
int
size
(
)
{
return
sequence
.
size
(
)
;
}
public
long
getTimeout
(
)
{
return
timeout
;
}
public
void
setTimeout
(
long
timeout
)
{
this
.
timeout
=
timeout
;
}
public
SequenceSender
<
E
>
getSequenceSender
(
)
{
return
sequenceSender
;
}
public
void
setSequenceSender
(
SequenceSender
<
E
>
sequenceSender
)
{
this
.
sequenceSender
=
sequenceSender
;
}
E
getLastDelivered
(
)
{
if
(
lastDelivered
==
null
)
{
return
null
;
}
return
lastDelivered
.
getObject
(
)
;
}
void
setLastDelivered
(
E
o
)
{
lastDelivered
=
new
Element
<
E
>
(
o
)
;
}
public
synchronized
void
insert
(
E
o
)
{
Element
<
E
>
element
=
new
Element
<
E
>
(
o
)
;
sequence
.
add
(
element
)
;
Element
<
E
>
successor
=
sequence
.
successor
(
element
)
;
if
(
successor
!=
null
)
{
successor
.
cancel
(
)
;
}
if
(
successorOfLastDelivered
(
element
)
)
{
}
else
if
(
sequence
.
predecessor
(
element
)
!=
null
)
{
}
else
{
element
.
schedule
(
defineTimeout
(
)
)
;
}
}
public
synchronized
void
deliver
(
)
throws
Exception
{
while
(
deliverNext
(
)
)
{
}
}
public
boolean
deliverNext
(
)
throws
Exception
{
if
(
sequence
.
size
(
)
==
0
)
{
return
false
;
}
Element
<
E
>
element
=
sequence
.
first
(
)
;
if
(
element
.
scheduled
(
)
)
{
return
false
;
}
sequence
.
remove
(
element
)
;
lastDelivered
=
element
;
sequenceSender
.
sendElement
(
element
.
getObject
(
)
)
;
return
true
;
}
private
boolean
successorOfLastDelivered
(
Element
<
E
>
element
)
{
if
(
lastDelivered
==
null
)
{
return
false
;
}
if
(
sequence
.
comparator
(
)
.
successor
(
element
,
lastDelivered
)
)
{
return
true
;
}
return
false
;
}
private
Timeout
defineTimeout
(
)
{
return
new
Timeout
(
timer
,
timeout
)
;
}
private
static
<
E
>
Sequence
<
Element
<
E
>
>
createSequence
(
SequenceElementComparator
<
E
>
comparator
)
{
return
new
Sequence
<
Element
<
E
>
>
(
new
ElementComparator
<
E
>
(
comparator
)
)
;
}
}
