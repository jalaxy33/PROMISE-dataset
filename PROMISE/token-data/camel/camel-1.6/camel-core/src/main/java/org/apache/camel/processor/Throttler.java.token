package
org
.
apache
.
camel
.
processor
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Processor
;
public
class
Throttler
extends
DelayProcessorSupport
{
private
long
maximumRequestsPerPeriod
;
private
long
timePeriodMillis
;
private
TimeSlot
slot
;
public
Throttler
(
Processor
processor
,
long
maximumRequestsPerPeriod
)
{
this
(
processor
,
maximumRequestsPerPeriod
,
1000
)
;
}
public
Throttler
(
Processor
processor
,
long
maximumRequestsPerPeriod
,
long
timePeriodMillis
)
{
super
(
processor
)
;
this
.
maximumRequestsPerPeriod
=
maximumRequestsPerPeriod
;
this
.
timePeriodMillis
=
timePeriodMillis
;
}
@
Override
public
String
toString
(
)
{
return
"Throttler[requests: "
+
maximumRequestsPerPeriod
+
" per: "
+
timePeriodMillis
+
" (ms) to: "
+
getProcessor
(
)
+
"]"
;
}
public
long
getMaximumRequestsPerPeriod
(
)
{
return
maximumRequestsPerPeriod
;
}
public
void
setMaximumRequestsPerPeriod
(
long
maximumRequestsPerPeriod
)
{
this
.
maximumRequestsPerPeriod
=
maximumRequestsPerPeriod
;
}
public
long
getTimePeriodMillis
(
)
{
return
timePeriodMillis
;
}
public
void
setTimePeriodMillis
(
long
timePeriodMillis
)
{
this
.
timePeriodMillis
=
timePeriodMillis
;
}
protected
void
delay
(
Exchange
exchange
)
throws
Exception
{
TimeSlot
slot
=
nextSlot
(
)
;
if
(
!
slot
.
isActive
(
)
)
{
waitUntil
(
slot
.
startTime
,
exchange
)
;
}
}
protected
synchronized
TimeSlot
nextSlot
(
)
{
if
(
slot
==
null
)
{
slot
=
new
TimeSlot
(
)
;
}
if
(
slot
.
isFull
(
)
)
{
slot
=
slot
.
next
(
)
;
}
slot
.
assign
(
)
;
return
slot
;
}
protected
class
TimeSlot
{
private
long
capacity
=
Throttler
.
this
.
maximumRequestsPerPeriod
;
private
final
long
duration
=
Throttler
.
this
.
timePeriodMillis
;
private
final
long
startTime
;
protected
TimeSlot
(
)
{
this
(
System
.
currentTimeMillis
(
)
)
;
}
protected
TimeSlot
(
long
startTime
)
{
this
.
startTime
=
startTime
;
}
protected
void
assign
(
)
{
capacity
--
;
}
protected
TimeSlot
next
(
)
{
return
new
TimeSlot
(
Math
.
max
(
System
.
currentTimeMillis
(
)
,
this
.
startTime
+
this
.
duration
)
)
;
}
protected
boolean
isActive
(
)
{
return
startTime
<=
System
.
currentTimeMillis
(
)
;
}
protected
boolean
isFull
(
)
{
return
capacity
<=
0
;
}
}
}
