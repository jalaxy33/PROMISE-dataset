package
org
.
apache
.
camel
.
util
.
concurrent
;
import
java
.
util
.
concurrent
.
CountDownLatch
;
import
java
.
util
.
concurrent
.
TimeUnit
;
import
java
.
util
.
concurrent
.
locks
.
AbstractQueuedSynchronizer
;
public
class
CountingLatch
{
@
SuppressWarnings
(
"serial"
)
private
final
class
Sync
extends
AbstractQueuedSynchronizer
{
private
Sync
(
)
{
super
(
)
;
}
int
getCount
(
)
{
return
getState
(
)
;
}
public
int
tryAcquireShared
(
int
acquires
)
{
return
getState
(
)
==
0
?
1
:
-
1
;
}
public
boolean
tryReleaseShared
(
int
delta
)
{
for
(
;
;
)
{
int
c
=
getState
(
)
;
int
nextc
=
c
+
delta
;
if
(
compareAndSetState
(
c
,
nextc
)
)
{
return
nextc
==
0
;
}
}
}
}
private
final
Sync
sync
;
public
CountingLatch
(
)
{
super
(
)
;
this
.
sync
=
new
Sync
(
)
;
}
public
int
getCount
(
)
{
return
sync
.
getCount
(
)
;
}
public
void
increment
(
)
{
sync
.
releaseShared
(
+
1
)
;
}
public
void
decrement
(
)
{
sync
.
releaseShared
(
-
1
)
;
}
public
void
await
(
)
throws
InterruptedException
{
sync
.
acquireSharedInterruptibly
(
1
)
;
}
public
boolean
await
(
long
timeout
,
TimeUnit
unit
)
throws
InterruptedException
{
return
sync
.
tryAcquireSharedNanos
(
1
,
unit
.
toNanos
(
timeout
)
)
;
}
}
