package
org
.
apache
.
camel
.
processor
;
import
java
.
io
.
Serializable
;
import
java
.
util
.
Random
;
import
org
.
apache
.
camel
.
model
.
LoggingLevel
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
public
class
RedeliveryPolicy
extends
DelayPolicy
{
protected
static
transient
Random
randomNumberGenerator
;
private
static
final
transient
Log
LOG
=
LogFactory
.
getLog
(
RedeliveryPolicy
.
class
)
;
protected
int
maximumRedeliveries
=
5
;
protected
long
maximumRedeliveryDelay
=
60
*
1000L
;
protected
double
backOffMultiplier
=
2
;
protected
boolean
useExponentialBackOff
;
protected
double
collisionAvoidanceFactor
=
0.15d
;
protected
boolean
useCollisionAvoidance
;
protected
LoggingLevel
retriesExhaustedLogLevel
=
LoggingLevel
.
ERROR
;
protected
LoggingLevel
retryAttemptedLogLevel
=
LoggingLevel
.
ERROR
;
public
RedeliveryPolicy
(
)
{
}
@
Override
public
String
toString
(
)
{
return
"RedeliveryPolicy[maximumRedeliveries="
+
maximumRedeliveries
+
", initialRedeliveryDelay="
+
delay
+
", maximumRedeliveryDelay="
+
maximumRedeliveryDelay
+
", retriesExhaustedLogLevel="
+
retriesExhaustedLogLevel
+
", retryAttemptedLogLevel="
+
retryAttemptedLogLevel
+
", useExponentialBackOff="
+
useExponentialBackOff
+
", backOffMultiplier="
+
backOffMultiplier
+
", useCollisionAvoidance="
+
useCollisionAvoidance
+
", collisionAvoidanceFactor="
+
collisionAvoidanceFactor
+
"]"
;
}
public
RedeliveryPolicy
copy
(
)
{
try
{
return
(
RedeliveryPolicy
)
clone
(
)
;
}
catch
(
CloneNotSupportedException
e
)
{
throw
new
RuntimeException
(
"Could not clone: "
+
e
,
e
)
;
}
}
public
boolean
shouldRedeliver
(
int
redeliveryCounter
)
{
if
(
getMaximumRedeliveries
(
)
<
0
)
{
return
true
;
}
return
redeliveryCounter
<=
getMaximumRedeliveries
(
)
;
}
public
long
sleep
(
long
redeliveryDelay
)
{
redeliveryDelay
=
getRedeliveryDelay
(
redeliveryDelay
)
;
if
(
redeliveryDelay
>
0
)
{
if
(
LOG
.
isDebugEnabled
(
)
)
{
LOG
.
debug
(
"Sleeping for: "
+
redeliveryDelay
+
" millis until attempting redelivery"
)
;
}
try
{
Thread
.
sleep
(
redeliveryDelay
)
;
}
catch
(
InterruptedException
e
)
{
if
(
LOG
.
isDebugEnabled
(
)
)
{
LOG
.
debug
(
"Thread interrupted: "
+
e
,
e
)
;
}
}
}
return
redeliveryDelay
;
}
public
long
getRedeliveryDelay
(
long
previousDelay
)
{
long
redeliveryDelay
;
if
(
previousDelay
==
0
)
{
redeliveryDelay
=
delay
;
}
else
if
(
useExponentialBackOff
&&
backOffMultiplier
>
1
)
{
redeliveryDelay
=
Math
.
round
(
backOffMultiplier
*
previousDelay
)
;
}
else
{
redeliveryDelay
=
previousDelay
;
}
if
(
useCollisionAvoidance
)
{
Random
random
=
getRandomNumberGenerator
(
)
;
double
variance
=
(
random
.
nextBoolean
(
)
?
collisionAvoidanceFactor
:
-
collisionAvoidanceFactor
)
*
random
.
nextDouble
(
)
;
redeliveryDelay
+=
redeliveryDelay
*
variance
;
}
if
(
maximumRedeliveryDelay
>
0
&&
redeliveryDelay
>
maximumRedeliveryDelay
)
{
redeliveryDelay
=
maximumRedeliveryDelay
;
}
return
redeliveryDelay
;
}
public
RedeliveryPolicy
maximumRedeliveries
(
int
maximumRedeliveries
)
{
setMaximumRedeliveries
(
maximumRedeliveries
)
;
return
this
;
}
public
RedeliveryPolicy
initialRedeliveryDelay
(
long
initialRedeliveryDelay
)
{
setDelay
(
initialRedeliveryDelay
)
;
return
this
;
}
public
RedeliveryPolicy
useCollisionAvoidance
(
)
{
setUseCollisionAvoidance
(
true
)
;
return
this
;
}
public
RedeliveryPolicy
useExponentialBackOff
(
)
{
setUseExponentialBackOff
(
true
)
;
return
this
;
}
public
RedeliveryPolicy
backOffMultiplier
(
double
multiplier
)
{
useExponentialBackOff
(
)
;
setBackOffMultiplier
(
multiplier
)
;
return
this
;
}
public
RedeliveryPolicy
collisionAvoidancePercent
(
double
collisionAvoidancePercent
)
{
useCollisionAvoidance
(
)
;
setCollisionAvoidancePercent
(
collisionAvoidancePercent
)
;
return
this
;
}
public
RedeliveryPolicy
maximumRedeliveryDelay
(
long
maximumRedeliveryDelay
)
{
setMaximumRedeliveryDelay
(
maximumRedeliveryDelay
)
;
return
this
;
}
public
RedeliveryPolicy
retriesExhaustedLogLevel
(
LoggingLevel
retriesExhaustedLogLevel
)
{
setRetriesExhaustedLogLevel
(
retriesExhaustedLogLevel
)
;
return
this
;
}
public
RedeliveryPolicy
retryAttemptedLogLevel
(
LoggingLevel
retryAttemptedLogLevel
)
{
setRetryAttemptedLogLevel
(
retryAttemptedLogLevel
)
;
return
this
;
}
public
double
getBackOffMultiplier
(
)
{
return
backOffMultiplier
;
}
public
void
setBackOffMultiplier
(
double
backOffMultiplier
)
{
this
.
backOffMultiplier
=
backOffMultiplier
;
}
public
short
getCollisionAvoidancePercent
(
)
{
return
(
short
)
Math
.
round
(
collisionAvoidanceFactor
*
100
)
;
}
public
void
setCollisionAvoidancePercent
(
double
collisionAvoidancePercent
)
{
this
.
collisionAvoidanceFactor
=
collisionAvoidancePercent
*
0.01d
;
}
public
double
getCollisionAvoidanceFactor
(
)
{
return
collisionAvoidanceFactor
;
}
public
void
setCollisionAvoidanceFactor
(
double
collisionAvoidanceFactor
)
{
this
.
collisionAvoidanceFactor
=
collisionAvoidanceFactor
;
}
public
long
getInitialRedeliveryDelay
(
)
{
return
getDelay
(
)
;
}
public
void
setInitialRedeliveryDelay
(
long
initialRedeliveryDelay
)
{
setDelay
(
initialRedeliveryDelay
)
;
}
public
int
getMaximumRedeliveries
(
)
{
return
maximumRedeliveries
;
}
public
void
setMaximumRedeliveries
(
int
maximumRedeliveries
)
{
this
.
maximumRedeliveries
=
maximumRedeliveries
;
}
public
long
getMaximumRedeliveryDelay
(
)
{
return
maximumRedeliveryDelay
;
}
public
void
setMaximumRedeliveryDelay
(
long
maximumRedeliveryDelay
)
{
this
.
maximumRedeliveryDelay
=
maximumRedeliveryDelay
;
}
public
boolean
isUseCollisionAvoidance
(
)
{
return
useCollisionAvoidance
;
}
public
void
setUseCollisionAvoidance
(
boolean
useCollisionAvoidance
)
{
this
.
useCollisionAvoidance
=
useCollisionAvoidance
;
}
public
boolean
isUseExponentialBackOff
(
)
{
return
useExponentialBackOff
;
}
public
void
setUseExponentialBackOff
(
boolean
useExponentialBackOff
)
{
this
.
useExponentialBackOff
=
useExponentialBackOff
;
}
protected
static
synchronized
Random
getRandomNumberGenerator
(
)
{
if
(
randomNumberGenerator
==
null
)
{
randomNumberGenerator
=
new
Random
(
)
;
}
return
randomNumberGenerator
;
}
public
void
setRetriesExhaustedLogLevel
(
LoggingLevel
retriesExhaustedLogLevel
)
{
this
.
retriesExhaustedLogLevel
=
retriesExhaustedLogLevel
;
}
public
LoggingLevel
getRetriesExhaustedLogLevel
(
)
{
return
retriesExhaustedLogLevel
;
}
public
void
setRetryAttemptedLogLevel
(
LoggingLevel
retryAttemptedLogLevel
)
{
this
.
retryAttemptedLogLevel
=
retryAttemptedLogLevel
;
}
public
LoggingLevel
getRetryAttemptedLogLevel
(
)
{
return
retryAttemptedLogLevel
;
}
}
