package
org
.
apache
.
camel
.
component
.
bean
;
import
java
.
lang
.
reflect
.
Proxy
;
import
org
.
apache
.
camel
.
Endpoint
;
import
org
.
apache
.
camel
.
Producer
;
public
final
class
ProxyHelper
{
private
ProxyHelper
(
)
{
}
@
SuppressWarnings
(
"unchecked"
)
public
static
Object
createProxyObject
(
Endpoint
endpoint
,
Producer
producer
,
ClassLoader
classLoader
,
Class
[
]
interfaces
,
MethodInfoCache
methodCache
)
{
return
Proxy
.
newProxyInstance
(
classLoader
,
interfaces
.
clone
(
)
,
new
CamelInvocationHandler
(
endpoint
,
producer
,
methodCache
)
)
;
}
@
SuppressWarnings
(
"unchecked"
)
public
static
<
T
>
T
createProxy
(
Endpoint
endpoint
,
ClassLoader
cl
,
Class
[
]
interfaces
,
MethodInfoCache
methodCache
)
throws
Exception
{
return
(
T
)
createProxyObject
(
endpoint
,
endpoint
.
createProducer
(
)
,
cl
,
interfaces
,
methodCache
)
;
}
@
SuppressWarnings
(
"unchecked"
)
public
static
<
T
>
T
createProxy
(
Endpoint
endpoint
,
ClassLoader
cl
,
Class
<
T
>
...
interfaceClasses
)
throws
Exception
{
return
(
T
)
createProxy
(
endpoint
,
cl
,
interfaceClasses
,
createMethodInfoCache
(
endpoint
)
)
;
}
@
SuppressWarnings
(
"unchecked"
)
public
static
<
T
>
T
createProxy
(
Endpoint
endpoint
,
Class
<
T
>
...
interfaceClasses
)
throws
Exception
{
return
(
T
)
createProxy
(
endpoint
,
getClassLoader
(
interfaceClasses
)
,
interfaceClasses
)
;
}
@
SuppressWarnings
(
"unchecked"
)
public
static
<
T
>
T
createProxy
(
Endpoint
endpoint
,
Producer
producer
,
Class
<
T
>
...
interfaceClasses
)
throws
Exception
{
return
(
T
)
createProxyObject
(
endpoint
,
producer
,
getClassLoader
(
interfaceClasses
)
,
interfaceClasses
,
createMethodInfoCache
(
endpoint
)
)
;
}
protected
static
ClassLoader
getClassLoader
(
Class
...
interfaces
)
{
if
(
interfaces
==
null
||
interfaces
.
length
<
1
)
{
throw
new
IllegalArgumentException
(
"You must provide at least 1 interface class."
)
;
}
return
interfaces
[
0
]
.
getClassLoader
(
)
;
}
protected
static
MethodInfoCache
createMethodInfoCache
(
Endpoint
endpoint
)
{
return
new
MethodInfoCache
(
endpoint
.
getCamelContext
(
)
)
;
}
}
