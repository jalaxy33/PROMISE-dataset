package
org
.
apache
.
camel
.
language
.
simple
;
import
org
.
apache
.
camel
.
Expression
;
import
org
.
apache
.
camel
.
component
.
file
.
FileExchange
;
import
org
.
apache
.
camel
.
language
.
IllegalSyntaxException
;
import
org
.
apache
.
camel
.
util
.
ObjectHelper
;
public
class
FileLanguage
extends
AbstractSimpleLanguage
{
public
static
Expression
file
(
String
expression
)
{
FileLanguage
language
=
new
FileLanguage
(
)
;
return
language
.
createExpression
(
expression
)
;
}
protected
Expression
<
FileExchange
>
createSimpleExpression
(
String
expression
)
{
String
remainder
=
ifStartsWithReturnRemainder
(
"file:"
,
expression
)
;
if
(
remainder
!=
null
)
{
if
(
ObjectHelper
.
equal
(
remainder
,
"name"
)
)
{
return
FileExpressionBuilder
.
fileNameExpression
(
)
;
}
else
if
(
ObjectHelper
.
equal
(
remainder
,
"name.noext"
)
)
{
return
FileExpressionBuilder
.
fileNameNoExtensionExpression
(
)
;
}
else
if
(
ObjectHelper
.
equal
(
remainder
,
"parent"
)
)
{
return
FileExpressionBuilder
.
fileParentExpression
(
)
;
}
else
if
(
ObjectHelper
.
equal
(
remainder
,
"path"
)
)
{
return
FileExpressionBuilder
.
filePathExpression
(
)
;
}
else
if
(
ObjectHelper
.
equal
(
remainder
,
"absolute.path"
)
)
{
return
FileExpressionBuilder
.
fileAbsolutePathExpression
(
)
;
}
else
if
(
ObjectHelper
.
equal
(
remainder
,
"canonical.path"
)
)
{
return
FileExpressionBuilder
.
fileCanoicalPathExpression
(
)
;
}
else
if
(
ObjectHelper
.
equal
(
remainder
,
"length"
)
)
{
return
FileExpressionBuilder
.
fileSizeExpression
(
)
;
}
}
remainder
=
ifStartsWithReturnRemainder
(
"date:"
,
expression
)
;
if
(
remainder
!=
null
)
{
String
[
]
parts
=
remainder
.
split
(
":"
)
;
if
(
parts
.
length
!=
2
)
{
throw
new
IllegalSyntaxException
(
this
,
expression
+
" ${date:command:pattern} is the correct syntax."
)
;
}
String
command
=
parts
[
0
]
;
String
pattern
=
parts
[
1
]
;
return
FileExpressionBuilder
.
dateExpression
(
command
,
pattern
)
;
}
return
FileExpressionBuilder
.
simpleExpression
(
expression
)
;
}
}
