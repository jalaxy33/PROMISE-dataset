package
org
.
apache
.
camel
.
processor
.
exceptionpolicy
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
model
.
ExceptionType
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
public
class
DefaultExceptionPolicyStrategy
implements
ExceptionPolicyStrategy
{
private
static
final
transient
Log
LOG
=
LogFactory
.
getLog
(
DefaultExceptionPolicyStrategy
.
class
)
;
public
ExceptionType
getExceptionPolicy
(
Map
<
ExceptionPolicyKey
,
ExceptionType
>
exceptionPolicices
,
Exchange
exchange
,
Throwable
exception
)
{
Iterator
<
Throwable
>
it
=
createExceptionIterator
(
exception
)
;
while
(
it
.
hasNext
(
)
)
{
ExceptionType
type
=
findMatchedExceptionPolicy
(
exceptionPolicices
,
exchange
,
it
.
next
(
)
)
;
if
(
type
!=
null
)
{
return
type
;
}
}
return
null
;
}
private
ExceptionType
findMatchedExceptionPolicy
(
Map
<
ExceptionPolicyKey
,
ExceptionType
>
exceptionPolicices
,
Exchange
exchange
,
Throwable
exception
)
{
if
(
LOG
.
isDebugEnabled
(
)
)
{
LOG
.
debug
(
"Finding best suited exception policy for thrown exception "
+
exception
.
getClass
(
)
.
getName
(
)
)
;
}
int
targetLevel
=
getInheritanceLevel
(
exception
.
getClass
(
)
)
;
ExceptionType
candidate
=
null
;
int
candidateDiff
=
Integer
.
MAX_VALUE
;
Set
<
Map
.
Entry
<
ExceptionPolicyKey
,
ExceptionType
>
>
entries
=
exceptionPolicices
.
entrySet
(
)
;
for
(
Map
.
Entry
<
ExceptionPolicyKey
,
ExceptionType
>
entry
:
entries
)
{
Class
clazz
=
entry
.
getKey
(
)
.
getExceptionClass
(
)
;
ExceptionType
type
=
entry
.
getValue
(
)
;
if
(
filter
(
type
,
clazz
,
exception
)
)
{
if
(
!
matchesWhen
(
type
,
exchange
)
)
{
if
(
LOG
.
isDebugEnabled
(
)
)
{
LOG
.
debug
(
"The type did not match when: "
+
type
)
;
}
continue
;
}
if
(
clazz
.
equals
(
exception
.
getClass
(
)
)
)
{
candidate
=
type
;
break
;
}
int
level
=
getInheritanceLevel
(
clazz
)
;
int
diff
=
targetLevel
-
level
;
if
(
diff
<
candidateDiff
)
{
candidate
=
type
;
candidateDiff
=
diff
;
}
}
}
if
(
LOG
.
isDebugEnabled
(
)
)
{
if
(
candidate
!=
null
)
{
LOG
.
debug
(
"Using "
+
candidate
+
" as the exception policy"
)
;
}
else
{
LOG
.
debug
(
"No candidate found to be used as exception policy"
)
;
}
}
return
candidate
;
}
protected
boolean
filter
(
ExceptionType
type
,
Class
exceptionClass
,
Throwable
exception
)
{
return
exceptionClass
.
isInstance
(
exception
)
;
}
protected
boolean
matchesWhen
(
ExceptionType
type
,
Exchange
exchange
)
{
if
(
type
.
getOnWhen
(
)
==
null
||
type
.
getOnWhen
(
)
.
getExpression
(
)
==
null
)
{
return
true
;
}
return
type
.
getOnWhen
(
)
.
getExpression
(
)
.
matches
(
exchange
)
;
}
protected
Iterator
<
Throwable
>
createExceptionIterator
(
Throwable
exception
)
{
return
new
ExceptionIterator
(
exception
)
;
}
private
static
int
getInheritanceLevel
(
Class
clazz
)
{
if
(
clazz
==
null
||
"java.lang.Object"
.
equals
(
clazz
.
getName
(
)
)
)
{
return
0
;
}
return
1
+
getInheritanceLevel
(
clazz
.
getSuperclass
(
)
)
;
}
private
class
ExceptionIterator
implements
Iterator
<
Throwable
>
{
private
List
<
Throwable
>
tree
=
new
ArrayList
<
Throwable
>
(
)
;
private
Iterator
<
Throwable
>
it
;
public
ExceptionIterator
(
Throwable
exception
)
{
Throwable
current
=
exception
;
while
(
current
!=
null
)
{
tree
.
add
(
current
)
;
current
=
current
.
getCause
(
)
;
}
Collections
.
reverse
(
tree
)
;
it
=
tree
.
iterator
(
)
;
}
public
boolean
hasNext
(
)
{
return
it
.
hasNext
(
)
;
}
public
Throwable
next
(
)
{
return
it
.
next
(
)
;
}
public
void
remove
(
)
{
it
.
remove
(
)
;
}
}
}
