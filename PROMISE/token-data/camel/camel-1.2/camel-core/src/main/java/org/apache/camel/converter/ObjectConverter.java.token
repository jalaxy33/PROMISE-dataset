package
org
.
apache
.
camel
.
converter
;
import
org
.
apache
.
camel
.
Converter
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
w3c
.
dom
.
NodeList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
@
Converter
public
class
ObjectConverter
{
private
ObjectConverter
(
)
{
}
public
static
boolean
isCollection
(
Object
value
)
{
return
value
instanceof
Collection
||
(
value
!=
null
&&
value
.
getClass
(
)
.
isArray
(
)
)
;
}
@
Converter
public
static
Iterator
iterator
(
Object
value
)
{
if
(
value
==
null
)
{
return
Collections
.
EMPTY_LIST
.
iterator
(
)
;
}
else
if
(
value
instanceof
Collection
)
{
Collection
collection
=
(
Collection
)
value
;
return
collection
.
iterator
(
)
;
}
else
if
(
value
.
getClass
(
)
.
isArray
(
)
)
{
List
<
Object
>
list
=
Arrays
.
asList
(
(
Object
[
]
)
value
)
;
return
list
.
iterator
(
)
;
}
else
if
(
value
instanceof
NodeList
)
{
final
NodeList
nodeList
=
(
NodeList
)
value
;
return
new
Iterator
<
Node
>
(
)
{
int
idx
=
-
1
;
public
boolean
hasNext
(
)
{
return
++
idx
<
nodeList
.
getLength
(
)
;
}
public
Node
next
(
)
{
return
nodeList
.
item
(
idx
)
;
}
public
void
remove
(
)
{
throw
new
UnsupportedOperationException
(
)
;
}
}
;
}
else
{
return
Collections
.
singletonList
(
value
)
.
iterator
(
)
;
}
}
@
Converter
public
static
boolean
toBool
(
Object
value
)
{
Boolean
answer
=
toBoolean
(
value
)
;
if
(
answer
!=
null
)
{
return
answer
.
booleanValue
(
)
;
}
return
false
;
}
@
Converter
public
static
Boolean
toBoolean
(
Object
value
)
{
if
(
value
instanceof
Boolean
)
{
return
(
Boolean
)
value
;
}
if
(
value
instanceof
String
)
{
return
"true"
.
equalsIgnoreCase
(
value
.
toString
(
)
)
?
Boolean
.
TRUE
:
Boolean
.
FALSE
;
}
return
null
;
}
@
Converter
public
static
Boolean
toBoolean
(
Boolean
value
)
{
if
(
value
!=
null
)
{
return
value
.
booleanValue
(
)
;
}
return
false
;
}
}
