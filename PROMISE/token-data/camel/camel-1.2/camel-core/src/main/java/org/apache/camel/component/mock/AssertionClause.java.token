package
org
.
apache
.
camel
.
component
.
mock
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
apache
.
camel
.
Exchange
;
import
org
.
apache
.
camel
.
Expression
;
import
org
.
apache
.
camel
.
Predicate
;
import
org
.
apache
.
camel
.
builder
.
ValueBuilder
;
import
static
org
.
apache
.
camel
.
builder
.
ExpressionBuilder
.
bodyExpression
;
import
static
org
.
apache
.
camel
.
builder
.
ExpressionBuilder
.
headerExpression
;
public
abstract
class
AssertionClause
<
E
extends
Exchange
>
implements
Runnable
{
private
List
<
Predicate
<
E
>
>
predicates
=
new
ArrayList
<
Predicate
<
E
>
>
(
)
;
public
AssertionClause
<
E
>
predicate
(
Predicate
<
E
>
predicate
)
{
addPredicate
(
predicate
)
;
return
this
;
}
public
ValueBuilder
<
E
>
header
(
String
name
)
{
Expression
<
E
>
expression
=
headerExpression
(
name
)
;
return
new
PredicateValueBuilder
(
expression
)
;
}
public
PredicateValueBuilder
body
(
)
{
Expression
<
E
>
expression
=
bodyExpression
(
)
;
return
new
PredicateValueBuilder
(
expression
)
;
}
public
<
T
>
PredicateValueBuilder
bodyAs
(
Class
<
T
>
type
)
{
Expression
<
E
>
expression
=
bodyExpression
(
type
)
;
return
new
PredicateValueBuilder
(
expression
)
;
}
public
PredicateValueBuilder
outBody
(
)
{
Expression
<
E
>
expression
=
bodyExpression
(
)
;
return
new
PredicateValueBuilder
(
expression
)
;
}
public
<
T
>
PredicateValueBuilder
outBody
(
Class
<
T
>
type
)
{
Expression
<
E
>
expression
=
bodyExpression
(
type
)
;
return
new
PredicateValueBuilder
(
expression
)
;
}
protected
void
applyAssertionOn
(
MockEndpoint
endpoint
,
int
index
,
E
exchange
)
{
for
(
Predicate
<
E
>
predicate
:
predicates
)
{
predicate
.
assertMatches
(
endpoint
.
getEndpointUri
(
)
+
" "
,
exchange
)
;
}
}
protected
void
addPredicate
(
Predicate
<
E
>
predicate
)
{
predicates
.
add
(
predicate
)
;
}
public
class
PredicateValueBuilder
extends
ValueBuilder
<
E
>
{
public
PredicateValueBuilder
(
Expression
<
E
>
expression
)
{
super
(
expression
)
;
}
protected
Predicate
<
E
>
onNewPredicate
(
Predicate
<
E
>
predicate
)
{
addPredicate
(
predicate
)
;
return
predicate
;
}
}
}
