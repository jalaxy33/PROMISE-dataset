package
org
.
apache
.
camel
.
builder
;
import
org
.
apache
.
camel
.
CamelContext
;
import
org
.
apache
.
camel
.
Endpoint
;
import
org
.
apache
.
camel
.
Predicate
;
import
org
.
apache
.
camel
.
Route
;
import
org
.
apache
.
camel
.
impl
.
DefaultCamelContext
;
import
org
.
apache
.
camel
.
model
.
InterceptType
;
import
org
.
apache
.
camel
.
model
.
OtherwiseType
;
import
org
.
apache
.
camel
.
model
.
ProcessorType
;
import
org
.
apache
.
camel
.
model
.
RouteType
;
import
org
.
apache
.
camel
.
model
.
RoutesType
;
import
org
.
apache
.
camel
.
model
.
ExceptionType
;
import
org
.
apache
.
camel
.
processor
.
DelegateProcessor
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicBoolean
;
public
abstract
class
RouteBuilder
extends
BuilderSupport
{
private
AtomicBoolean
initalized
=
new
AtomicBoolean
(
false
)
;
private
RoutesType
routeCollection
=
new
RoutesType
(
)
;
private
List
<
Route
>
routes
=
new
ArrayList
<
Route
>
(
)
;
public
RouteBuilder
(
)
{
this
(
null
)
;
}
public
RouteBuilder
(
CamelContext
context
)
{
super
(
context
)
;
}
@
Override
public
String
toString
(
)
{
return
routeCollection
.
toString
(
)
;
}
public
abstract
void
configure
(
)
throws
Exception
;
public
RouteType
from
(
String
uri
)
{
RouteType
answer
=
routeCollection
.
from
(
uri
)
;
configureRoute
(
answer
)
;
return
answer
;
}
public
RouteType
from
(
Endpoint
endpoint
)
{
RouteType
answer
=
routeCollection
.
from
(
endpoint
)
;
configureRoute
(
answer
)
;
return
answer
;
}
public
RouteBuilder
errorHandler
(
ErrorHandlerBuilder
errorHandlerBuilder
)
{
setErrorHandlerBuilder
(
errorHandlerBuilder
)
;
return
this
;
}
public
RouteBuilder
inheritErrorHandler
(
boolean
value
)
{
routeCollection
.
setInheritErrorHandlerFlag
(
value
)
;
return
this
;
}
public
RouteBuilder
intercept
(
DelegateProcessor
interceptor
)
{
routeCollection
.
intercept
(
interceptor
)
;
return
this
;
}
public
InterceptType
intercept
(
)
{
return
routeCollection
.
intercept
(
)
;
}
public
OtherwiseType
intercept
(
Predicate
predicate
)
{
return
routeCollection
.
intercept
(
predicate
)
;
}
public
ExceptionType
exception
(
Class
exceptionType
)
{
return
routeCollection
.
exception
(
exceptionType
)
;
}
public
CamelContext
getContext
(
)
{
CamelContext
context
=
super
.
getContext
(
)
;
if
(
context
==
null
)
{
context
=
createContainer
(
)
;
setContext
(
context
)
;
}
return
context
;
}
public
List
<
Route
>
getRouteList
(
)
throws
Exception
{
checkInitialized
(
)
;
return
routes
;
}
protected
void
checkInitialized
(
)
throws
Exception
{
if
(
initalized
.
compareAndSet
(
false
,
true
)
)
{
configure
(
)
;
populateRoutes
(
routes
)
;
}
}
protected
void
populateRoutes
(
List
<
Route
>
routes
)
throws
Exception
{
CamelContext
camelContext
=
getContext
(
)
;
if
(
camelContext
==
null
)
{
throw
new
IllegalArgumentException
(
"No CamelContext has been injected!"
)
;
}
routeCollection
.
setCamelContext
(
camelContext
)
;
camelContext
.
addRouteDefinitions
(
routeCollection
.
getRoutes
(
)
)
;
}
public
void
setRouteCollection
(
RoutesType
routeCollection
)
{
this
.
routeCollection
=
routeCollection
;
}
protected
CamelContext
createContainer
(
)
{
return
new
DefaultCamelContext
(
)
;
}
protected
void
configureRoute
(
RouteType
route
)
{
route
.
setGroup
(
getClass
(
)
.
getName
(
)
)
;
}
}
