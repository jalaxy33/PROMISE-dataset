package
org
.
apache
.
camel
.
builder
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
apache
.
camel
.
CamelContext
;
import
org
.
apache
.
camel
.
Endpoint
;
import
org
.
apache
.
camel
.
NoSuchEndpointException
;
import
org
.
apache
.
camel
.
processor
.
LoggingLevel
;
import
org
.
apache
.
camel
.
processor
.
SendProcessor
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
public
abstract
class
BuilderSupport
{
private
CamelContext
context
;
private
ErrorHandlerBuilder
errorHandlerBuilder
;
private
boolean
inheritErrorHandler
=
true
;
protected
BuilderSupport
(
CamelContext
context
)
{
this
.
context
=
context
;
}
protected
BuilderSupport
(
BuilderSupport
parent
)
{
this
.
context
=
parent
.
getContext
(
)
;
this
.
inheritErrorHandler
=
parent
.
inheritErrorHandler
;
if
(
inheritErrorHandler
&&
parent
.
errorHandlerBuilder
!=
null
)
{
this
.
errorHandlerBuilder
=
parent
.
errorHandlerBuilder
.
copy
(
)
;
}
}
public
ValueBuilder
header
(
String
name
)
{
return
Builder
.
header
(
name
)
;
}
public
ValueBuilder
body
(
)
{
return
Builder
.
body
(
)
;
}
public
<
T
>
ValueBuilder
body
(
Class
<
T
>
type
)
{
return
Builder
.
bodyAs
(
type
)
;
}
public
ValueBuilder
outBody
(
)
{
return
Builder
.
outBody
(
)
;
}
public
<
T
>
ValueBuilder
outBody
(
Class
<
T
>
type
)
{
return
Builder
.
outBodyAs
(
type
)
;
}
public
ValueBuilder
faultBody
(
)
{
return
Builder
.
faultBody
(
)
;
}
public
<
T
>
ValueBuilder
faultBodyAs
(
Class
<
T
>
type
)
{
return
Builder
.
faultBodyAs
(
type
)
;
}
public
ValueBuilder
systemProperty
(
String
name
)
{
return
Builder
.
systemProperty
(
name
)
;
}
public
ValueBuilder
systemProperty
(
String
name
,
String
defaultValue
)
{
return
Builder
.
systemProperty
(
name
,
defaultValue
)
;
}
public
ValueBuilder
constant
(
Object
value
)
{
return
Builder
.
constant
(
value
)
;
}
public
Endpoint
endpoint
(
String
uri
)
throws
NoSuchEndpointException
{
if
(
uri
==
null
)
{
throw
new
IllegalArgumentException
(
"uri parameter cannot be null"
)
;
}
Endpoint
endpoint
=
getContext
(
)
.
getEndpoint
(
uri
)
;
if
(
endpoint
==
null
)
{
throw
new
NoSuchEndpointException
(
uri
)
;
}
return
endpoint
;
}
public
List
<
Endpoint
>
endpoints
(
String
...
uris
)
throws
NoSuchEndpointException
{
List
<
Endpoint
>
endpoints
=
new
ArrayList
<
Endpoint
>
(
)
;
for
(
String
uri
:
uris
)
{
endpoints
.
add
(
endpoint
(
uri
)
)
;
}
return
endpoints
;
}
public
List
<
Endpoint
>
endpoints
(
Endpoint
...
endpoints
)
{
List
<
Endpoint
>
answer
=
new
ArrayList
<
Endpoint
>
(
)
;
for
(
Endpoint
endpoint
:
endpoints
)
{
answer
.
add
(
endpoint
)
;
}
return
answer
;
}
public
NoErrorHandlerBuilder
noErrorHandler
(
)
{
return
new
NoErrorHandlerBuilder
(
)
;
}
public
LoggingErrorHandlerBuilder
loggingErrorHandler
(
)
{
return
new
LoggingErrorHandlerBuilder
(
)
;
}
public
LoggingErrorHandlerBuilder
loggingErrorHandler
(
String
log
)
{
return
loggingErrorHandler
(
LogFactory
.
getLog
(
log
)
)
;
}
public
LoggingErrorHandlerBuilder
loggingErrorHandler
(
Log
log
)
{
return
new
LoggingErrorHandlerBuilder
(
log
)
;
}
public
LoggingErrorHandlerBuilder
loggingErrorHandler
(
Log
log
,
LoggingLevel
level
)
{
return
new
LoggingErrorHandlerBuilder
(
log
,
level
)
;
}
public
DeadLetterChannelBuilder
deadLetterChannel
(
)
{
return
new
DeadLetterChannelBuilder
(
)
;
}
public
DeadLetterChannelBuilder
deadLetterChannel
(
String
deadLetterUri
)
{
return
deadLetterChannel
(
endpoint
(
deadLetterUri
)
)
;
}
public
DeadLetterChannelBuilder
deadLetterChannel
(
Endpoint
deadLetterEndpoint
)
{
return
new
DeadLetterChannelBuilder
(
new
SendProcessor
(
deadLetterEndpoint
)
)
;
}
public
CamelContext
getContext
(
)
{
return
context
;
}
public
void
setContext
(
CamelContext
context
)
{
this
.
context
=
context
;
}
public
ErrorHandlerBuilder
getErrorHandlerBuilder
(
)
{
if
(
errorHandlerBuilder
==
null
)
{
errorHandlerBuilder
=
createErrorHandlerBuilder
(
)
;
}
return
errorHandlerBuilder
;
}
protected
ErrorHandlerBuilder
createErrorHandlerBuilder
(
)
{
if
(
isInheritErrorHandler
(
)
)
{
return
new
DeadLetterChannelBuilder
(
)
;
}
else
{
return
new
NoErrorHandlerBuilder
(
)
;
}
}
public
void
setErrorHandlerBuilder
(
ErrorHandlerBuilder
errorHandlerBuilder
)
{
this
.
errorHandlerBuilder
=
errorHandlerBuilder
;
}
public
boolean
isInheritErrorHandler
(
)
{
return
inheritErrorHandler
;
}
public
void
setInheritErrorHandler
(
boolean
inheritErrorHandler
)
{
this
.
inheritErrorHandler
=
inheritErrorHandler
;
}
}
