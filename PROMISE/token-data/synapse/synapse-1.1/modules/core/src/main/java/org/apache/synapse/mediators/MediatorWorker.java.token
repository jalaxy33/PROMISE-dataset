package
org
.
apache
.
synapse
.
mediators
;
import
org
.
apache
.
synapse
.
*
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
public
class
MediatorWorker
implements
Runnable
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
MediatorWorker
.
class
)
;
private
static
final
Log
trace
=
LogFactory
.
getLog
(
SynapseConstants
.
TRACE_LOGGER
)
;
private
Mediator
seq
=
null
;
private
MessageContext
synCtx
=
null
;
public
MediatorWorker
(
Mediator
seq
,
MessageContext
synCtx
)
{
this
.
seq
=
seq
;
this
.
synCtx
=
synCtx
;
}
public
MediatorWorker
(
MessageContext
synCtx
)
{
this
.
synCtx
=
synCtx
;
seq
=
synCtx
.
getMainSequence
(
)
;
}
public
void
run
(
)
{
try
{
seq
.
mediate
(
synCtx
)
;
}
catch
(
SynapseException
syne
)
{
if
(
!
synCtx
.
getFaultStack
(
)
.
isEmpty
(
)
)
{
warn
(
false
,
"Executing fault handler due to exception encountered"
,
synCtx
)
;
(
(
FaultHandler
)
synCtx
.
getFaultStack
(
)
.
pop
(
)
)
.
handleFault
(
synCtx
,
syne
)
;
}
else
{
warn
(
false
,
"Exception encountered but no fault handler found - "
+
"message dropped"
,
synCtx
)
;
}
}
catch
(
Exception
e
)
{
String
msg
=
"Unexpected error executing task/async inject"
;
log
.
error
(
msg
,
e
)
;
if
(
synCtx
.
getServiceLog
(
)
!=
null
)
{
synCtx
.
getServiceLog
(
)
.
error
(
msg
,
e
)
;
}
if
(
!
synCtx
.
getFaultStack
(
)
.
isEmpty
(
)
)
{
warn
(
false
,
"Executing fault handler due to exception encountered"
,
synCtx
)
;
(
(
FaultHandler
)
synCtx
.
getFaultStack
(
)
.
pop
(
)
)
.
handleFault
(
synCtx
,
e
)
;
}
else
{
warn
(
false
,
"Exception encountered but no fault handler found - "
+
"message dropped"
,
synCtx
)
;
}
}
catch
(
Throwable
e
)
{
String
msg
=
"Unexpected error executing task/async inject, message dropped"
;
log
.
error
(
msg
,
e
)
;
if
(
synCtx
.
getServiceLog
(
)
!=
null
)
{
synCtx
.
getServiceLog
(
)
.
error
(
msg
,
e
)
;
}
}
synCtx
=
null
;
seq
=
null
;
}
private
void
warn
(
boolean
traceOn
,
String
msg
,
MessageContext
msgContext
)
{
if
(
traceOn
)
{
trace
.
warn
(
msg
)
;
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
warn
(
msg
)
;
}
if
(
msgContext
.
getServiceLog
(
)
!=
null
)
{
msgContext
.
getServiceLog
(
)
.
warn
(
msg
)
;
}
}
}
