package
org
.
apache
.
synapse
.
config
.
xml
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
om
.
OMNode
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
config
.
SynapseConfiguration
;
import
org
.
apache
.
synapse
.
config
.
XMLToObjectMapper
;
import
javax
.
xml
.
namespace
.
QName
;
import
javax
.
xml
.
stream
.
XMLStreamException
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Map
;
import
java
.
util
.
Properties
;
import
java
.
util
.
ServiceLoader
;
public
class
ConfigurationFactoryAndSerializerFinder
implements
XMLToObjectMapper
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
ConfigurationFactoryAndSerializerFinder
.
class
)
;
private
static
final
Class
[
]
configurationFactories
=
{
SynapseXMLConfigurationFactory
.
class
,
}
;
private
final
static
ConfigurationFactoryAndSerializerFinder
instance
=
new
ConfigurationFactoryAndSerializerFinder
(
)
;
private
final
static
Map
<
QName
,
Class
>
factoryMap
=
new
HashMap
<
QName
,
Class
>
(
)
;
private
final
static
Map
<
QName
,
Class
>
serializerMap
=
new
HashMap
<
QName
,
Class
>
(
)
;
private
static
boolean
initialized
=
false
;
public
static
synchronized
ConfigurationFactoryAndSerializerFinder
getInstance
(
)
{
if
(
!
initialized
)
{
loadConfigurationFatoriesAndSerializers
(
)
;
}
return
instance
;
}
public
static
synchronized
void
reset
(
)
{
factoryMap
.
clear
(
)
;
serializerMap
.
clear
(
)
;
initialized
=
false
;
}
private
ConfigurationFactoryAndSerializerFinder
(
)
{
}
private
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
private
static
void
loadConfigurationFatoriesAndSerializers
(
)
{
for
(
Class
c
:
configurationFactories
)
{
if
(
c
!=
null
)
{
try
{
ConfigurationFactory
fac
=
(
ConfigurationFactory
)
c
.
newInstance
(
)
;
factoryMap
.
put
(
fac
.
getTagQName
(
)
,
c
)
;
serializerMap
.
put
(
fac
.
getTagQName
(
)
,
fac
.
getSerializerClass
(
)
)
;
}
catch
(
Exception
e
)
{
throw
new
SynapseException
(
"Error instantiating "
+
c
.
getName
(
)
,
e
)
;
}
}
}
registerExtensions
(
)
;
initialized
=
true
;
}
private
static
void
registerExtensions
(
)
{
Iterator
<
ConfigurationFactory
>
factories
=
ServiceLoader
.
load
(
ConfigurationFactory
.
class
)
.
iterator
(
)
;
while
(
factories
.
hasNext
(
)
)
{
ConfigurationFactory
factory
=
factories
.
next
(
)
;
QName
tag
=
factory
.
getTagQName
(
)
;
factoryMap
.
put
(
tag
,
factory
.
getClass
(
)
)
;
serializerMap
.
put
(
tag
,
factory
.
getSerializerClass
(
)
)
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Added MediatorFactory "
+
factory
.
getClass
(
)
+
" to handle "
+
tag
)
;
}
}
}
public
SynapseConfiguration
getConfiguration
(
OMElement
element
,
Properties
properties
)
{
String
localName
=
element
.
getLocalName
(
)
;
QName
qName
;
if
(
element
.
getNamespace
(
)
!=
null
)
{
qName
=
new
QName
(
element
.
getNamespace
(
)
.
getNamespaceURI
(
)
,
localName
)
;
}
else
{
qName
=
new
QName
(
localName
)
;
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"getConfiguration("
+
qName
+
")"
)
;
}
Class
cls
=
factoryMap
.
get
(
qName
)
;
if
(
cls
==
null
)
{
String
msg
=
"Unknown Configuration type "
+
"referenced by configuration element : "
+
qName
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
try
{
ConfigurationFactory
cf
=
(
ConfigurationFactory
)
cls
.
newInstance
(
)
;
return
cf
.
getConfiguration
(
element
,
properties
)
;
}
catch
(
InstantiationException
e
)
{
String
msg
=
"Error initializing configuration factory : "
+
cls
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
catch
(
IllegalAccessException
e
)
{
String
msg
=
"Error initializing configuration factory : "
+
cls
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
}
public
static
OMElement
serializeConfiguration
(
SynapseConfiguration
synCfg
)
{
if
(
synCfg
.
getDefaultQName
(
)
==
null
)
{
return
serializeConfiguration
(
synCfg
,
XMLConfigConstants
.
DEFINITIONS_ELT
)
;
}
else
{
return
serializeConfiguration
(
synCfg
,
synCfg
.
getDefaultQName
(
)
)
;
}
}
public
static
OMElement
serializeConfiguration
(
SynapseConfiguration
synCfg
,
QName
qName
)
{
Class
cls
=
(
Class
)
serializerMap
.
get
(
qName
)
;
if
(
cls
==
null
)
{
String
msg
=
"Unknown Configuration type "
+
"referenced by configuration element : "
+
qName
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
try
{
ConfigurationSerializer
cs
=
(
ConfigurationSerializer
)
cls
.
newInstance
(
)
;
return
cs
.
serializeConfiguration
(
synCfg
)
;
}
catch
(
InstantiationException
e
)
{
String
msg
=
"Error initializing configuration factory : "
+
cls
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
catch
(
IllegalAccessException
e
)
{
String
msg
=
"Error initializing configuration factory : "
+
cls
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
}
public
Map
getFactoryMap
(
)
{
return
factoryMap
;
}
public
static
Map
getSerializerMap
(
)
{
return
serializerMap
;
}
public
Object
getObjectFromOMNode
(
OMNode
om
,
Properties
properties
)
{
if
(
om
instanceof
OMElement
)
{
return
getConfiguration
(
(
OMElement
)
om
,
properties
)
;
}
else
{
handleException
(
"Invalid configuration XML : "
+
om
)
;
}
return
null
;
}
}
