package
org
.
apache
.
synapse
.
util
;
import
org
.
apache
.
axiom
.
om
.
OMCloneOptions
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
om
.
OMNamespace
;
import
org
.
apache
.
axiom
.
om
.
util
.
ElementHelper
;
import
org
.
apache
.
axiom
.
soap
.
*
;
import
org
.
apache
.
axiom
.
util
.
UIDGenerator
;
import
org
.
apache
.
axis2
.
AxisFault
;
import
org
.
apache
.
axis2
.
Constants
;
import
org
.
apache
.
axis2
.
addressing
.
AddressingConstants
;
import
org
.
apache
.
axis2
.
client
.
Options
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
http
.
nio
.
NHttpServerConnection
;
import
org
.
apache
.
neethi
.
Policy
;
import
org
.
apache
.
neethi
.
PolicyEngine
;
import
org
.
apache
.
synapse
.
FaultHandler
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
aspects
.
statistics
.
ErrorLog
;
import
org
.
apache
.
synapse
.
aspects
.
statistics
.
StatisticsLog
;
import
org
.
apache
.
synapse
.
aspects
.
statistics
.
StatisticsRecord
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
mediators
.
eip
.
EIPConstants
;
import
org
.
apache
.
synapse
.
mediators
.
template
.
TemplateContext
;
import
org
.
apache
.
synapse
.
transport
.
passthru
.
PassThroughConstants
;
import
org
.
apache
.
synapse
.
transport
.
passthru
.
Pipe
;
import
org
.
apache
.
synapse
.
transport
.
passthru
.
config
.
SourceConfiguration
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Comparator
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Stack
;
import
java
.
util
.
TreeMap
;
public
class
MessageHelper
{
private
static
Log
log
=
LogFactory
.
getLog
(
MessageHelper
.
class
)
;
public
static
MessageContext
cloneMessageContext
(
MessageContext
synCtx
)
throws
AxisFault
{
MessageContext
newCtx
=
synCtx
.
getEnvironment
(
)
.
createMessageContext
(
)
;
Axis2MessageContext
axis2MC
=
(
Axis2MessageContext
)
newCtx
;
axis2MC
.
setAxis2MessageContext
(
cloneAxis2MessageContext
(
(
(
Axis2MessageContext
)
synCtx
)
.
getAxis2MessageContext
(
)
)
)
;
newCtx
.
setConfiguration
(
synCtx
.
getConfiguration
(
)
)
;
newCtx
.
setEnvironment
(
synCtx
.
getEnvironment
(
)
)
;
newCtx
.
setContextEntries
(
synCtx
.
getContextEntries
(
)
)
;
newCtx
.
setProperty
(
EIPConstants
.
AGGREGATE_CORRELATION
,
synCtx
.
getMessageID
(
)
)
;
newCtx
.
setTo
(
synCtx
.
getTo
(
)
)
;
newCtx
.
setReplyTo
(
synCtx
.
getReplyTo
(
)
)
;
newCtx
.
setSoapAction
(
synCtx
.
getSoapAction
(
)
)
;
newCtx
.
setWSAAction
(
synCtx
.
getWSAAction
(
)
)
;
newCtx
.
setResponse
(
synCtx
.
isResponse
(
)
)
;
newCtx
.
setTracingState
(
synCtx
.
getTracingState
(
)
)
;
for
(
Object
o
:
synCtx
.
getPropertyKeySet
(
)
)
{
String
key
=
(
String
)
o
;
Object
obj
=
synCtx
.
getProperty
(
key
)
;
if
(
obj
instanceof
String
||
obj
instanceof
Integer
)
{
}
else
if
(
obj
instanceof
ArrayList
)
{
obj
=
cloneArrayList
(
(
ArrayList
)
obj
)
;
}
else
if
(
obj
instanceof
Stack
&&
key
.
equals
(
SynapseConstants
.
SYNAPSE__FUNCTION__STACK
)
)
{
obj
=
getClonedTemplateStack
(
(
Stack
<
TemplateContext
>
)
obj
)
;
}
else
if
(
obj
instanceof
StatisticsRecord
)
{
obj
=
getClonedStatisticRecord
(
(
StatisticsRecord
)
obj
)
;
}
else
if
(
obj
instanceof
OMElement
)
{
obj
=
(
(
OMElement
)
obj
)
.
cloneOMElement
(
)
;
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Deep clone not happened for property : "
+
key
+
". Class type : "
+
obj
.
getClass
(
)
.
getName
(
)
)
;
}
}
newCtx
.
setProperty
(
key
,
obj
)
;
}
Stack
<
FaultHandler
>
faultStack
=
synCtx
.
getFaultStack
(
)
;
if
(
!
faultStack
.
isEmpty
(
)
)
{
List
<
FaultHandler
>
newFaultStack
=
new
ArrayList
<
FaultHandler
>
(
)
;
newFaultStack
.
addAll
(
faultStack
)
;
for
(
FaultHandler
faultHandler
:
newFaultStack
)
{
if
(
faultHandler
!=
null
)
{
newCtx
.
pushFaultHandler
(
faultHandler
)
;
}
}
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
info
(
"Parent's Fault Stack : "
+
faultStack
+
" : Child's Fault Stack :"
+
newCtx
.
getFaultStack
(
)
)
;
}
return
newCtx
;
}
public
static
org
.
apache
.
axis2
.
context
.
MessageContext
cloneAxis2MessageContext
(
org
.
apache
.
axis2
.
context
.
MessageContext
mc
)
throws
AxisFault
{
org
.
apache
.
axis2
.
context
.
MessageContext
newMC
=
clonePartially
(
mc
)
;
newMC
.
setEnvelope
(
cloneSOAPEnvelope
(
mc
.
getEnvelope
(
)
)
)
;
newMC
.
setOptions
(
cloneOptions
(
mc
.
getOptions
(
)
)
)
;
newMC
.
setServiceContext
(
mc
.
getServiceContext
(
)
)
;
newMC
.
setOperationContext
(
mc
.
getOperationContext
(
)
)
;
newMC
.
setAxisMessage
(
mc
.
getAxisMessage
(
)
)
;
if
(
newMC
.
getAxisMessage
(
)
!=
null
)
{
newMC
.
getAxisMessage
(
)
.
setParent
(
mc
.
getAxisOperation
(
)
)
;
}
newMC
.
setAxisService
(
mc
.
getAxisService
(
)
)
;
newMC
.
setTransportIn
(
mc
.
getTransportIn
(
)
)
;
newMC
.
setTransportOut
(
mc
.
getTransportOut
(
)
)
;
newMC
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
OUT_TRANSPORT_INFO
,
mc
.
getProperty
(
org
.
apache
.
axis2
.
Constants
.
OUT_TRANSPORT_INFO
)
)
;
newMC
.
setProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
,
getClonedTransportHeaders
(
mc
)
)
;
if
(
newMC
.
getProperty
(
PassThroughConstants
.
PASS_THROUGH_PIPE
)
!=
null
)
{
NHttpServerConnection
conn
=
(
NHttpServerConnection
)
newMC
.
getProperty
(
"pass-through.Source-Connection"
)
;
if
(
conn
!=
null
)
{
SourceConfiguration
sourceConfiguration
=
(
SourceConfiguration
)
newMC
.
getProperty
(
"PASS_THROUGH_SOURCE_CONFIGURATION"
)
;
Pipe
pipe
=
new
Pipe
(
conn
,
sourceConfiguration
.
getBufferFactory
(
)
.
getBuffer
(
)
,
"source"
,
sourceConfiguration
)
;
newMC
.
setProperty
(
PassThroughConstants
.
PASS_THROUGH_PIPE
,
pipe
)
;
}
}
return
newMC
;
}
public
static
Map
getClonedTransportHeaders
(
org
.
apache
.
axis2
.
context
.
MessageContext
msgCtx
)
{
Map
headers
=
(
Map
)
msgCtx
.
getProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
)
;
Map
<
String
,
Object
>
clonedHeaders
;
if
(
headers
instanceof
TreeMap
)
{
clonedHeaders
=
new
TreeMap
<
String
,
Object
>
(
new
Comparator
<
String
>
(
)
{
public
int
compare
(
String
s1
,
String
s2
)
{
return
s1
.
compareToIgnoreCase
(
s2
)
;
}
}
)
;
}
else
{
clonedHeaders
=
new
HashMap
<
String
,
Object
>
(
)
;
}
if
(
headers
!=
null
&&
!
headers
.
isEmpty
(
)
)
{
for
(
Object
o
:
headers
.
keySet
(
)
)
{
String
headerName
=
(
String
)
o
;
clonedHeaders
.
put
(
headerName
,
headers
.
get
(
headerName
)
)
;
}
}
return
clonedHeaders
;
}
public
static
org
.
apache
.
axis2
.
context
.
MessageContext
clonePartially
(
org
.
apache
.
axis2
.
context
.
MessageContext
ori
)
throws
AxisFault
{
org
.
apache
.
axis2
.
context
.
MessageContext
newMC
=
new
org
.
apache
.
axis2
.
context
.
MessageContext
(
)
;
newMC
.
setConfigurationContext
(
ori
.
getConfigurationContext
(
)
)
;
newMC
.
setMessageID
(
UIDGenerator
.
generateURNString
(
)
)
;
newMC
.
setTo
(
ori
.
getTo
(
)
)
;
newMC
.
setSoapAction
(
ori
.
getSoapAction
(
)
)
;
newMC
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
CHARACTER_SET_ENCODING
,
ori
.
getProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
CHARACTER_SET_ENCODING
)
)
;
newMC
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
ENABLE_MTOM
,
ori
.
getProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
ENABLE_MTOM
)
)
;
newMC
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
ENABLE_SWA
,
ori
.
getProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
ENABLE_SWA
)
)
;
newMC
.
setProperty
(
Constants
.
Configuration
.
HTTP_METHOD
,
ori
.
getProperty
(
Constants
.
Configuration
.
HTTP_METHOD
)
)
;
newMC
.
setProperty
(
Constants
.
Configuration
.
MESSAGE_TYPE
,
ori
.
getProperty
(
Constants
.
Configuration
.
MESSAGE_TYPE
)
)
;
newMC
.
setDoingREST
(
ori
.
isDoingREST
(
)
)
;
newMC
.
setDoingMTOM
(
ori
.
isDoingMTOM
(
)
)
;
newMC
.
setDoingSwA
(
ori
.
isDoingSwA
(
)
)
;
newMC
.
setAttachmentMap
(
ori
.
getAttachmentMap
(
)
)
;
Iterator
itr
=
ori
.
getPropertyNames
(
)
;
while
(
itr
.
hasNext
(
)
)
{
String
key
=
(
String
)
itr
.
next
(
)
;
if
(
key
!=
null
)
{
newMC
.
setNonReplicableProperty
(
key
,
ori
.
getPropertyNonReplicable
(
key
)
)
;
}
}
newMC
.
setServerSide
(
false
)
;
return
newMC
;
}
public
static
SOAPEnvelope
cloneSOAPEnvelope
(
SOAPEnvelope
envelope
)
{
OMCloneOptions
options
=
new
OMCloneOptions
(
)
;
options
.
setPreserveModel
(
true
)
;
return
(
SOAPEnvelope
)
envelope
.
clone
(
options
)
;
}
public
static
Options
cloneOptions
(
Options
options
)
{
Options
clonedOptions
=
new
Options
(
options
.
getParent
(
)
)
;
clonedOptions
.
setCallTransportCleanup
(
options
.
isCallTransportCleanup
(
)
)
;
clonedOptions
.
setExceptionToBeThrownOnSOAPFault
(
options
.
isExceptionToBeThrownOnSOAPFault
(
)
)
;
clonedOptions
.
setManageSession
(
options
.
isManageSession
(
)
)
;
clonedOptions
.
setSoapVersionURI
(
options
.
getSoapVersionURI
(
)
)
;
clonedOptions
.
setTimeOutInMilliSeconds
(
options
.
getTimeOutInMilliSeconds
(
)
)
;
clonedOptions
.
setUseSeparateListener
(
options
.
isUseSeparateListener
(
)
)
;
clonedOptions
.
setListener
(
options
.
getListener
(
)
)
;
clonedOptions
.
setTransportIn
(
options
.
getTransportIn
(
)
)
;
clonedOptions
.
setTransportInProtocol
(
options
.
getTransportInProtocol
(
)
)
;
clonedOptions
.
setTransportOut
(
clonedOptions
.
getTransportOut
(
)
)
;
clonedOptions
.
setUserName
(
options
.
getUserName
(
)
)
;
clonedOptions
.
setPassword
(
options
.
getPassword
(
)
)
;
for
(
Object
o
:
options
.
getProperties
(
)
.
keySet
(
)
)
{
String
key
=
(
String
)
o
;
clonedOptions
.
setProperty
(
key
,
options
.
getProperty
(
key
)
)
;
}
return
clonedOptions
;
}
public
static
SOAPEnvelope
removeAddressingHeaders
(
org
.
apache
.
axis2
.
context
.
MessageContext
axisMsgCtx
)
{
SOAPEnvelope
env
=
axisMsgCtx
.
getEnvelope
(
)
;
SOAPHeader
soapHeader
=
env
.
getHeader
(
)
;
ArrayList
addressingHeaders
;
if
(
soapHeader
!=
null
)
{
addressingHeaders
=
soapHeader
.
getHeaderBlocksWithNSURI
(
AddressingConstants
.
Submission
.
WSA_NAMESPACE
)
;
if
(
addressingHeaders
!=
null
&&
addressingHeaders
.
size
(
)
!=
0
)
{
detachAddressingInformation
(
addressingHeaders
)
;
}
else
{
addressingHeaders
=
soapHeader
.
getHeaderBlocksWithNSURI
(
AddressingConstants
.
Final
.
WSA_NAMESPACE
)
;
if
(
addressingHeaders
!=
null
&&
addressingHeaders
.
size
(
)
!=
0
)
{
detachAddressingInformation
(
addressingHeaders
)
;
}
}
}
return
env
;
}
private
static
void
detachAddressingInformation
(
ArrayList
headerInformation
)
{
for
(
Object
o
:
headerInformation
)
{
if
(
o
instanceof
SOAPHeaderBlock
)
{
SOAPHeaderBlock
headerBlock
=
(
SOAPHeaderBlock
)
o
;
headerBlock
.
detach
(
)
;
}
else
if
(
o
instanceof
OMElement
)
{
OMElement
om
=
(
OMElement
)
o
;
OMNamespace
ns
=
om
.
getNamespace
(
)
;
if
(
ns
!=
null
&&
(
AddressingConstants
.
Submission
.
WSA_NAMESPACE
.
equals
(
ns
.
getNamespaceURI
(
)
)
||
AddressingConstants
.
Final
.
WSA_NAMESPACE
.
equals
(
ns
.
getNamespaceURI
(
)
)
)
)
{
om
.
detach
(
)
;
}
}
}
}
public
static
Policy
getPolicy
(
org
.
apache
.
synapse
.
MessageContext
synCtx
,
String
propertyKey
)
{
Object
property
=
synCtx
.
getEntry
(
propertyKey
)
;
if
(
property
!=
null
&&
property
instanceof
OMElement
)
{
return
PolicyEngine
.
getPolicy
(
(
OMElement
)
property
)
;
}
else
{
handleException
(
"Cannot locate policy from the property : "
+
propertyKey
)
;
}
return
null
;
}
public
static
void
removeProcessedHeaders
(
org
.
apache
.
axis2
.
context
.
MessageContext
axisMsgCtx
,
boolean
preserveAddressing
)
{
SOAPEnvelope
env
=
axisMsgCtx
.
getEnvelope
(
)
;
SOAPHeader
soapHeader
=
env
.
getHeader
(
)
;
if
(
soapHeader
!=
null
)
{
Iterator
it
=
soapHeader
.
getChildElements
(
)
;
while
(
it
.
hasNext
(
)
)
{
Object
o
=
it
.
next
(
)
;
if
(
o
instanceof
SOAPHeaderBlock
)
{
SOAPHeaderBlock
headerBlock
=
(
SOAPHeaderBlock
)
o
;
if
(
!
preserveAddressing
)
{
if
(
headerBlock
.
isProcessed
(
)
)
{
it
.
remove
(
)
;
}
}
else
{
if
(
!
isAddressingHeader
(
headerBlock
)
)
{
if
(
headerBlock
.
isProcessed
(
)
)
{
it
.
remove
(
)
;
}
}
}
}
}
}
}
private
static
boolean
isAddressingHeader
(
SOAPHeaderBlock
headerBlock
)
{
OMNamespace
ns
=
headerBlock
.
getNamespace
(
)
;
return
ns
!=
null
&&
(
AddressingConstants
.
Submission
.
WSA_NAMESPACE
.
equals
(
ns
.
getNamespaceURI
(
)
)
||
AddressingConstants
.
Final
.
WSA_NAMESPACE
.
equals
(
ns
.
getNamespaceURI
(
)
)
)
;
}
private
static
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
private
static
ArrayList
<
Object
>
cloneArrayList
(
ArrayList
<
Object
>
originalArrayList
)
{
ArrayList
<
Object
>
clonedArrayList
=
null
;
if
(
originalArrayList
!=
null
)
{
clonedArrayList
=
new
ArrayList
<
Object
>
(
)
;
for
(
Object
obj
:
originalArrayList
)
{
if
(
obj
instanceof
SOAPHeaderBlock
)
{
SOAPFactory
fac
=
(
SOAPFactory
)
(
(
SOAPHeaderBlock
)
obj
)
.
getOMFactory
(
)
;
obj
=
(
(
SOAPHeaderBlock
)
obj
)
.
cloneOMElement
(
)
;
try
{
obj
=
ElementHelper
.
toSOAPHeaderBlock
(
(
OMElement
)
obj
,
fac
)
;
}
catch
(
Exception
e
)
{
handleException
(
e
.
getLocalizedMessage
(
)
)
;
}
}
else
if
(
obj
instanceof
SOAPEnvelope
)
{
SOAPEnvelope
env
=
(
SOAPEnvelope
)
obj
;
obj
=
MessageHelper
.
cloneSOAPEnvelope
(
env
)
;
}
else
if
(
obj
instanceof
OMElement
)
{
obj
=
(
(
OMElement
)
obj
)
.
cloneOMElement
(
)
;
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Array List deep clone not implemented for Class type : "
+
obj
.
getClass
(
)
.
getName
(
)
)
;
}
}
clonedArrayList
.
add
(
obj
)
;
}
}
return
clonedArrayList
;
}
private
static
Stack
<
TemplateContext
>
getClonedTemplateStack
(
Stack
<
TemplateContext
>
oriTemplateStack
)
{
Stack
<
TemplateContext
>
clonedTemplateStack
=
new
Stack
<
TemplateContext
>
(
)
;
for
(
TemplateContext
oriTemplateCtx
:
oriTemplateStack
)
{
TemplateContext
clonedTemplateCtx
=
new
TemplateContext
(
oriTemplateCtx
.
getName
(
)
,
oriTemplateCtx
.
getParameters
(
)
)
;
Map
oriValueMap
=
oriTemplateCtx
.
getMappedValues
(
)
;
Map
clonedValueMap
=
new
HashMap
(
)
;
for
(
Object
key
:
oriValueMap
.
keySet
(
)
)
{
Object
value
=
oriValueMap
.
get
(
key
)
;
if
(
value
instanceof
ArrayList
)
{
value
=
cloneArrayList
(
(
ArrayList
<
Object
>
)
value
)
;
}
clonedValueMap
.
put
(
key
,
value
)
;
}
clonedTemplateCtx
.
setMappedValues
(
clonedValueMap
)
;
clonedTemplateStack
.
push
(
clonedTemplateCtx
)
;
}
return
clonedTemplateStack
;
}
private
static
StatisticsRecord
getClonedStatisticRecord
(
StatisticsRecord
oriRecord
)
{
StatisticsRecord
clonedRecord
=
new
StatisticsRecord
(
oriRecord
.
getId
(
)
,
oriRecord
.
getClientIP
(
)
,
oriRecord
.
getClientHost
(
)
)
;
clonedRecord
.
setOwner
(
oriRecord
.
getOwner
(
)
)
;
clonedRecord
.
setEndReported
(
oriRecord
.
isEndReported
(
)
)
;
List
<
StatisticsLog
>
oriStatisticsLogs
=
oriRecord
.
getAllStatisticsLogs
(
)
;
for
(
StatisticsLog
oriLog
:
oriStatisticsLogs
)
{
StatisticsLog
clonedLog
=
new
StatisticsLog
(
oriLog
.
getId
(
)
,
oriLog
.
getComponentType
(
)
)
;
clonedLog
.
setTime
(
oriLog
.
getTime
(
)
)
;
clonedLog
.
setResponse
(
oriLog
.
isResponse
(
)
)
;
clonedLog
.
setFault
(
oriLog
.
isFault
(
)
)
;
clonedLog
.
setEndAnyLog
(
oriLog
.
isEndAnyLog
(
)
)
;
ErrorLog
oriErrorLog
=
oriLog
.
getErrorLog
(
)
;
if
(
oriErrorLog
!=
null
)
{
ErrorLog
clonedErrorLog
=
new
ErrorLog
(
oriErrorLog
.
getErrorCode
(
)
)
;
if
(
oriErrorLog
.
getException
(
)
!=
null
)
{
clonedErrorLog
.
setException
(
oriErrorLog
.
getException
(
)
)
;
}
clonedErrorLog
.
setErrorMessage
(
oriErrorLog
.
getErrorMessage
(
)
)
;
clonedErrorLog
.
setErrorDetail
(
oriErrorLog
.
getErrorDetail
(
)
)
;
clonedLog
.
setErrorLog
(
clonedErrorLog
)
;
}
clonedRecord
.
collect
(
clonedLog
)
;
}
return
clonedRecord
;
}
}
