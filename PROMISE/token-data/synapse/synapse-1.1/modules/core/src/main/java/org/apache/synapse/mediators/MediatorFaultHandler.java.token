package
org
.
apache
.
synapse
.
mediators
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
*
;
import
org
.
apache
.
synapse
.
aspects
.
statistics
.
StatisticsReporter
;
import
org
.
apache
.
synapse
.
aspects
.
ComponentType
;
import
org
.
apache
.
synapse
.
mediators
.
base
.
SequenceMediator
;
public
class
MediatorFaultHandler
extends
FaultHandler
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
MediatorFaultHandler
.
class
)
;
private
static
final
Log
trace
=
LogFactory
.
getLog
(
SynapseConstants
.
TRACE_LOGGER
)
;
private
Mediator
faultMediator
=
null
;
public
MediatorFaultHandler
(
Mediator
faultMediator
)
{
this
.
faultMediator
=
faultMediator
;
}
public
void
onFault
(
MessageContext
synCtx
)
throws
SynapseException
{
boolean
traceOn
=
synCtx
.
getTracingState
(
)
==
SynapseConstants
.
TRACING_ON
;
boolean
traceOrDebugOn
=
traceOn
||
log
.
isDebugEnabled
(
)
;
String
name
=
null
;
if
(
faultMediator
instanceof
SequenceMediator
)
{
name
=
(
(
SequenceMediator
)
faultMediator
)
.
getName
(
)
;
}
if
(
name
==
null
)
{
name
=
faultMediator
.
getClass
(
)
.
getName
(
)
;
}
if
(
traceOrDebugOn
)
{
traceOrDebugWarn
(
traceOn
,
"Executing fault handler mediator : "
+
name
)
;
}
synCtx
.
getServiceLog
(
)
.
warn
(
"Executing fault sequence mediator : "
+
name
)
;
this
.
faultMediator
.
mediate
(
synCtx
)
;
}
public
Mediator
getFaultMediator
(
)
{
return
faultMediator
;
}
public
void
setFaultMediator
(
Mediator
faultMediator
)
{
this
.
faultMediator
=
faultMediator
;
}
private
void
traceOrDebugWarn
(
boolean
traceOn
,
String
msg
)
{
if
(
traceOn
)
{
trace
.
warn
(
msg
)
;
}
log
.
warn
(
msg
)
;
}
}
