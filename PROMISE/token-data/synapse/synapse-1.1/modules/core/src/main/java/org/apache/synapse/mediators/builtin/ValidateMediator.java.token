package
org
.
apache
.
synapse
.
mediators
.
builtin
;
import
org
.
apache
.
axiom
.
om
.
OMNode
;
import
org
.
apache
.
synapse
.
FaultHandler
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseLog
;
import
org
.
apache
.
synapse
.
config
.
Entry
;
import
org
.
apache
.
synapse
.
config
.
SynapseConfigUtils
;
import
org
.
apache
.
synapse
.
config
.
SynapseConfiguration
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractListMediator
;
import
org
.
apache
.
synapse
.
mediators
.
Value
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorProperty
;
import
org
.
apache
.
synapse
.
util
.
AXIOMUtils
;
import
org
.
apache
.
synapse
.
util
.
jaxp
.
SchemaResourceResolver
;
import
org
.
apache
.
synapse
.
util
.
resolver
.
ResourceMap
;
import
org
.
apache
.
synapse
.
util
.
resolver
.
UserDefinedXmlSchemaURIResolver
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
SourceXPathSupport
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
SynapseXPath
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
SAXParseException
;
import
org
.
xml
.
sax
.
helpers
.
DefaultHandler
;
import
javax
.
xml
.
XMLConstants
;
import
javax
.
xml
.
transform
.
Source
;
import
javax
.
xml
.
transform
.
stream
.
StreamSource
;
import
javax
.
xml
.
validation
.
Schema
;
import
javax
.
xml
.
validation
.
SchemaFactory
;
import
javax
.
xml
.
validation
.
Validator
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
ValidateMediator
extends
AbstractListMediator
{
private
List
<
Value
>
schemaKeys
=
new
ArrayList
<
Value
>
(
)
;
private
ResourceMap
resourceMap
;
private
final
SourceXPathSupport
source
=
new
SourceXPathSupport
(
)
;
private
final
List
<
MediatorProperty
>
explicityFeatures
=
new
ArrayList
<
MediatorProperty
>
(
)
;
private
Schema
cachedSchema
;
private
final
Object
validatorLock
=
new
Object
(
)
;
private
final
SchemaFactory
factory
=
SchemaFactory
.
newInstance
(
XMLConstants
.
W3C_XML_SCHEMA_NS_URI
)
;
@
SuppressWarnings
(
{
"ThrowableResultOfMethodCallIgnored"
}
)
public
boolean
mediate
(
MessageContext
synCtx
)
{
SynapseLog
synLog
=
getLog
(
synCtx
)
;
synLog
.
traceOrDebug
(
"Start : Validate mediator"
)
;
if
(
synLog
.
isTraceTraceEnabled
(
)
)
{
synLog
.
traceTrace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
Source
validateSrc
=
getValidationSource
(
synCtx
,
synLog
)
;
boolean
reCreate
=
false
;
for
(
Value
schemaKey
:
schemaKeys
)
{
String
propKey
=
schemaKey
.
evaluateValue
(
synCtx
)
;
Entry
dp
=
synCtx
.
getConfiguration
(
)
.
getEntryDefinition
(
propKey
)
;
if
(
dp
!=
null
&&
dp
.
isDynamic
(
)
)
{
if
(
!
dp
.
isCached
(
)
||
dp
.
isExpired
(
)
)
{
reCreate
=
true
;
}
}
}
ValidateMediatorErrorHandler
errorHandler
=
new
ValidateMediatorErrorHandler
(
)
;
synchronized
(
validatorLock
)
{
if
(
reCreate
||
cachedSchema
==
null
)
{
factory
.
setErrorHandler
(
errorHandler
)
;
StreamSource
[
]
sources
=
new
StreamSource
[
schemaKeys
.
size
(
)
]
;
int
i
=
0
;
for
(
Value
schemaKey
:
schemaKeys
)
{
String
propName
=
schemaKey
.
evaluateValue
(
synCtx
)
;
sources
[
i
++
]
=
SynapseConfigUtils
.
getStreamSource
(
synCtx
.
getEntry
(
propName
)
)
;
}
try
{
SynapseConfiguration
synCfg
=
synCtx
.
getConfiguration
(
)
;
if
(
synCfg
.
getProperty
(
SynapseConstants
.
SYNAPSE_SCHEMA_RESOLVER
)
!=
null
)
{
setUserDefinedSchemaResourceResolver
(
synCtx
)
;
}
else
{
factory
.
setResourceResolver
(
new
SchemaResourceResolver
(
synCtx
.
getConfiguration
(
)
,
resourceMap
)
)
;
}
cachedSchema
=
factory
.
newSchema
(
sources
)
;
}
catch
(
SAXException
e
)
{
handleException
(
"Error creating a new schema objects for "
+
"schemas : "
+
schemaKeys
.
toString
(
)
,
e
,
synCtx
)
;
}
catch
(
RuntimeException
e
)
{
handleException
(
"Error creating a new schema objects for "
+
"schemas : "
+
schemaKeys
.
toString
(
)
,
e
,
synCtx
)
;
}
if
(
errorHandler
.
isValidationError
(
)
)
{
errorHandler
.
setValidationError
(
false
)
;
cachedSchema
=
null
;
handleException
(
"Error creating a new schema objects for schemas : "
+
schemaKeys
.
toString
(
)
,
errorHandler
.
getSaxParseException
(
)
,
synCtx
)
;
}
}
}
try
{
Validator
validator
=
cachedSchema
.
newValidator
(
)
;
validator
.
setErrorHandler
(
errorHandler
)
;
validator
.
validate
(
validateSrc
)
;
if
(
errorHandler
.
isValidationError
(
)
)
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
String
msg
=
"Validation of element returned by XPath : "
+
source
+
" failed against the given schema(s) "
+
schemaKeys
+
"with error : "
+
errorHandler
.
getSaxParseException
(
)
.
getMessage
(
)
+
" Executing 'on-fail' sequence"
;
synLog
.
traceOrDebug
(
msg
)
;
synCtx
.
getServiceLog
(
)
.
warn
(
msg
)
;
if
(
synLog
.
isTraceTraceEnabled
(
)
)
{
synLog
.
traceTrace
(
"Failed message envelope : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_MESSAGE
,
errorHandler
.
getSaxParseException
(
)
.
getMessage
(
)
)
;
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_EXCEPTION
,
errorHandler
.
getSaxParseException
(
)
)
;
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_DETAIL
,
FaultHandler
.
getStackTrace
(
errorHandler
.
getSaxParseException
(
)
)
)
;
return
super
.
mediate
(
synCtx
)
;
}
}
catch
(
SAXException
e
)
{
handleException
(
"Error validating "
+
source
+
" element"
,
e
,
synCtx
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Error validating "
+
source
+
" element"
,
e
,
synCtx
)
;
}
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Validation of element returned by the XPath expression : "
+
source
+
" succeeded against the given schemas and the current message"
)
;
synLog
.
traceOrDebug
(
"End : Validate mediator"
)
;
}
return
true
;
}
private
void
setUserDefinedSchemaResourceResolver
(
MessageContext
synCtx
)
{
SynapseConfiguration
synCfg
=
synCtx
.
getConfiguration
(
)
;
String
schemaResolverName
=
synCfg
.
getProperty
(
SynapseConstants
.
SYNAPSE_SCHEMA_RESOLVER
)
;
Class
schemaClazz
;
Object
schemaClazzObject
;
try
{
schemaClazz
=
Class
.
forName
(
schemaResolverName
)
;
}
catch
(
ClassNotFoundException
e
)
{
String
msg
=
"System could not find the class defined for the specific properties"
+
"\n SchemaResolverImplementation:"
+
schemaResolverName
;
handleException
(
msg
,
e
,
synCtx
)
;
return
;
}
try
{
schemaClazzObject
=
schemaClazz
.
newInstance
(
)
;
UserDefinedXmlSchemaURIResolver
userDefSchemaResResolver
=
(
UserDefinedXmlSchemaURIResolver
)
schemaClazzObject
;
userDefSchemaResResolver
.
init
(
resourceMap
,
synCfg
,
schemaKeys
)
;
factory
.
setResourceResolver
(
userDefSchemaResResolver
)
;
}
catch
(
Exception
e
)
{
String
msg
=
"Could not create an instance from the class"
;
handleException
(
msg
,
e
,
synCtx
)
;
}
}
private
Source
getValidationSource
(
MessageContext
synCtx
,
SynapseLog
synLog
)
{
try
{
OMNode
validateSource
=
source
.
selectOMNode
(
synCtx
,
synLog
)
;
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Validation source : "
+
validateSource
.
toString
(
)
)
;
}
return
AXIOMUtils
.
asSource
(
validateSource
)
;
}
catch
(
Exception
e
)
{
handleException
(
"Error accessing source element : "
+
source
,
e
,
synCtx
)
;
}
return
null
;
}
private
static
class
ValidateMediatorErrorHandler
extends
DefaultHandler
{
private
boolean
validationError
=
false
;
private
SAXParseException
saxParseException
=
null
;
public
void
error
(
SAXParseException
exception
)
throws
SAXException
{
validationError
=
true
;
saxParseException
=
exception
;
}
public
void
fatalError
(
SAXParseException
exception
)
throws
SAXException
{
validationError
=
true
;
saxParseException
=
exception
;
}
public
void
warning
(
SAXParseException
exception
)
throws
SAXException
{
}
public
boolean
isValidationError
(
)
{
return
validationError
;
}
public
SAXParseException
getSaxParseException
(
)
{
return
saxParseException
;
}
public
void
setValidationError
(
boolean
validationError
)
{
this
.
validationError
=
validationError
;
}
}
public
Object
getFeature
(
String
key
)
{
for
(
MediatorProperty
prop
:
explicityFeatures
)
{
if
(
key
.
equals
(
prop
.
getName
(
)
)
)
{
return
prop
.
getValue
(
)
;
}
}
return
null
;
}
public
void
addFeature
(
String
featureName
,
boolean
isFeatureEnable
)
throws
SAXException
{
MediatorProperty
mp
=
new
MediatorProperty
(
)
;
mp
.
setName
(
featureName
)
;
if
(
isFeatureEnable
)
{
mp
.
setValue
(
"true"
)
;
}
else
{
mp
.
setValue
(
"false"
)
;
}
explicityFeatures
.
add
(
mp
)
;
factory
.
setFeature
(
featureName
,
isFeatureEnable
)
;
}
public
void
setSchemaKeys
(
List
<
Value
>
schemaKeys
)
{
this
.
schemaKeys
=
schemaKeys
;
}
public
void
setSource
(
SynapseXPath
source
)
{
this
.
source
.
setXPath
(
source
)
;
}
public
void
setResourceMap
(
ResourceMap
resourceMap
)
{
this
.
resourceMap
=
resourceMap
;
}
public
SynapseXPath
getSource
(
)
{
return
source
.
getXPath
(
)
;
}
public
List
<
Value
>
getSchemaKeys
(
)
{
return
schemaKeys
;
}
public
List
<
MediatorProperty
>
getFeatures
(
)
{
return
explicityFeatures
;
}
public
ResourceMap
getResourceMap
(
)
{
return
resourceMap
;
}
@
Override
public
boolean
isContentAware
(
)
{
return
true
;
}
}
