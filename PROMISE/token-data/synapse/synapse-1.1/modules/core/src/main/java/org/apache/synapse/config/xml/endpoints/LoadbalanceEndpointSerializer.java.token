package
org
.
apache
.
synapse
.
config
.
xml
.
endpoints
;
import
org
.
apache
.
axiom
.
om
.
OMAbstractFactory
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axis2
.
clustering
.
Member
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
config
.
xml
.
XMLConfigConstants
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
LoadbalanceEndpoint
;
public
class
LoadbalanceEndpointSerializer
extends
EndpointSerializer
{
protected
OMElement
serializeEndpoint
(
Endpoint
endpoint
)
{
if
(
!
(
endpoint
instanceof
LoadbalanceEndpoint
)
)
{
handleException
(
"Invalid endpoint type."
)
;
}
fac
=
OMAbstractFactory
.
getOMFactory
(
)
;
OMElement
endpointElement
=
fac
.
createOMElement
(
"endpoint"
,
SynapseConstants
.
SYNAPSE_OMNAMESPACE
)
;
LoadbalanceEndpoint
loadbalanceEndpoint
=
(
LoadbalanceEndpoint
)
endpoint
;
serializeCommonAttributes
(
endpoint
,
endpointElement
)
;
OMElement
loadbalanceElement
=
fac
.
createOMElement
(
"loadbalance"
,
SynapseConstants
.
SYNAPSE_OMNAMESPACE
)
;
endpointElement
.
addChild
(
loadbalanceElement
)
;
loadbalanceElement
.
addAttribute
(
XMLConfigConstants
.
LOADBALANCE_ALGORITHM
,
loadbalanceEndpoint
.
getAlgorithm
(
)
.
getClass
(
)
.
getName
(
)
,
null
)
;
if
(
!
loadbalanceEndpoint
.
isFailover
(
)
)
{
loadbalanceElement
.
addAttribute
(
"failover"
,
"false"
,
null
)
;
}
if
(
loadbalanceEndpoint
.
getChildren
(
)
!=
null
)
{
for
(
Endpoint
childEndpoint
:
loadbalanceEndpoint
.
getChildren
(
)
)
{
loadbalanceElement
.
addChild
(
EndpointSerializer
.
getElementFromEndpoint
(
childEndpoint
)
)
;
}
}
else
{
for
(
Member
member
:
loadbalanceEndpoint
.
getMembers
(
)
)
{
OMElement
memberEle
=
fac
.
createOMElement
(
"member"
,
SynapseConstants
.
SYNAPSE_OMNAMESPACE
,
loadbalanceElement
)
;
memberEle
.
addAttribute
(
fac
.
createOMAttribute
(
"hostName"
,
null
,
member
.
getHostName
(
)
)
)
;
memberEle
.
addAttribute
(
fac
.
createOMAttribute
(
"httpPort"
,
null
,
String
.
valueOf
(
member
.
getHttpPort
(
)
)
)
)
;
memberEle
.
addAttribute
(
fac
.
createOMAttribute
(
"httpsPort"
,
null
,
String
.
valueOf
(
member
.
getHttpsPort
(
)
)
)
)
;
loadbalanceElement
.
addChild
(
memberEle
)
;
}
}
serializeProperties
(
loadbalanceEndpoint
,
endpointElement
)
;
return
endpointElement
;
}
}
