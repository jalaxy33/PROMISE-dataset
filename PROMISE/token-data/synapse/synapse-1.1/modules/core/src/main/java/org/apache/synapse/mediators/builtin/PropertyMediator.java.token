package
org
.
apache
.
synapse
.
mediators
.
builtin
;
import
org
.
apache
.
http
.
protocol
.
HTTP
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseLog
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
config
.
xml
.
XMLConfigConstants
;
import
org
.
apache
.
synapse
.
config
.
SynapseConfigUtils
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractMediator
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
SynapseXPath
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axis2
.
util
.
JavaUtils
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
import
java
.
util
.
regex
.
Pattern
;
import
java
.
util
.
regex
.
Matcher
;
public
class
PropertyMediator
extends
AbstractMediator
{
private
String
name
=
null
;
private
Object
value
=
null
;
private
String
type
=
null
;
private
OMElement
valueElement
=
null
;
private
SynapseXPath
expression
=
null
;
private
String
scope
=
null
;
public
static
final
int
ACTION_SET
=
0
;
public
static
final
int
ACTION_REMOVE
=
1
;
private
int
action
=
ACTION_SET
;
private
Pattern
pattern
;
private
int
group
=
0
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
SynapseLog
synLog
=
getLog
(
synCtx
)
;
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Start : Property mediator"
)
;
if
(
synLog
.
isTraceTraceEnabled
(
)
)
{
synLog
.
traceTrace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
if
(
action
==
ACTION_SET
)
{
Object
resultValue
=
getResultValue
(
synCtx
)
;
if
(
resultValue
instanceof
String
&&
pattern
!=
null
)
{
resultValue
=
getMatchedValue
(
(
String
)
resultValue
,
synLog
)
;
}
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Setting property : "
+
name
+
" at scope : "
+
(
scope
==
null
?
"default"
:
scope
)
+
" to : "
+
resultValue
+
" (i.e. "
+
(
value
!=
null
?
"constant : "
+
value
:
"result of expression : "
+
expression
)
+
")"
)
;
}
if
(
scope
==
null
||
XMLConfigConstants
.
SCOPE_DEFAULT
.
equals
(
scope
)
)
{
synCtx
.
setProperty
(
name
,
resultValue
)
;
}
else
if
(
XMLConfigConstants
.
SCOPE_AXIS2
.
equals
(
scope
)
&&
synCtx
instanceof
Axis2MessageContext
)
{
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
synCtx
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
axis2MessageCtx
.
setProperty
(
name
,
resultValue
)
;
}
else
if
(
XMLConfigConstants
.
SCOPE_CLIENT
.
equals
(
scope
)
&&
synCtx
instanceof
Axis2MessageContext
)
{
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
synCtx
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
axis2MessageCtx
.
getOptions
(
)
.
setProperty
(
name
,
resultValue
)
;
}
else
if
(
XMLConfigConstants
.
SCOPE_TRANSPORT
.
equals
(
scope
)
&&
synCtx
instanceof
Axis2MessageContext
)
{
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
synCtx
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
Object
headers
=
axis2MessageCtx
.
getProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
)
;
if
(
headers
!=
null
&&
headers
instanceof
Map
)
{
Map
headersMap
=
(
Map
)
headers
;
headersMap
.
put
(
name
,
resultValue
)
;
}
if
(
headers
==
null
)
{
Map
headersMap
=
new
HashMap
(
)
;
headersMap
.
put
(
name
,
resultValue
)
;
axis2MessageCtx
.
setProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
,
headersMap
)
;
}
}
}
else
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Removing property : "
+
name
+
" (scope:"
+
(
scope
==
null
?
"default"
:
scope
)
+
")"
)
;
}
if
(
scope
==
null
||
XMLConfigConstants
.
SCOPE_DEFAULT
.
equals
(
scope
)
)
{
Set
pros
=
synCtx
.
getPropertyKeySet
(
)
;
if
(
pros
!=
null
)
{
pros
.
remove
(
name
)
;
}
}
else
if
(
(
XMLConfigConstants
.
SCOPE_AXIS2
.
equals
(
scope
)
||
XMLConfigConstants
.
SCOPE_CLIENT
.
equals
(
scope
)
)
&&
synCtx
instanceof
Axis2MessageContext
)
{
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
synCtx
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
axis2MessageCtx
.
removeProperty
(
name
)
;
}
else
if
(
XMLConfigConstants
.
SCOPE_TRANSPORT
.
equals
(
scope
)
&&
synCtx
instanceof
Axis2MessageContext
)
{
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
synCtx
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
Object
headers
=
axis2MessageCtx
.
getProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
)
;
if
(
headers
!=
null
&&
headers
instanceof
Map
)
{
Map
headersMap
=
(
Map
)
headers
;
headersMap
.
remove
(
name
)
;
}
else
{
synLog
.
traceOrDebug
(
"No transport headers found for the message"
)
;
}
}
}
synLog
.
traceOrDebug
(
"End : Property mediator"
)
;
return
true
;
}
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
public
Object
getValue
(
)
{
return
value
;
}
public
void
setValue
(
String
value
)
{
setValue
(
value
,
null
)
;
}
public
void
setValue
(
String
value
,
String
type
)
{
this
.
type
=
type
;
this
.
value
=
convertValue
(
value
,
type
)
;
}
public
String
getType
(
)
{
return
type
;
}
public
OMElement
getValueElement
(
)
{
return
valueElement
;
}
public
void
setValueElement
(
OMElement
valueElement
)
{
this
.
valueElement
=
valueElement
;
}
public
SynapseXPath
getExpression
(
)
{
return
expression
;
}
public
void
setExpression
(
SynapseXPath
expression
)
{
setExpression
(
expression
,
null
)
;
}
public
void
setExpression
(
SynapseXPath
expression
,
String
type
)
{
this
.
expression
=
expression
;
this
.
type
=
type
;
}
public
String
getScope
(
)
{
return
scope
;
}
public
void
setScope
(
String
scope
)
{
this
.
scope
=
scope
;
}
public
int
getAction
(
)
{
return
action
;
}
public
void
setAction
(
int
action
)
{
this
.
action
=
action
;
}
public
Pattern
getPattern
(
)
{
return
pattern
;
}
public
void
setPattern
(
Pattern
pattern
)
{
this
.
pattern
=
pattern
;
}
public
int
getGroup
(
)
{
return
group
;
}
public
void
setGroup
(
int
group
)
{
this
.
group
=
group
;
}
private
Object
getResultValue
(
MessageContext
synCtx
)
{
if
(
value
!=
null
)
{
return
value
;
}
else
if
(
valueElement
!=
null
)
{
return
valueElement
.
cloneOMElement
(
)
;
}
else
{
return
convertValue
(
expression
.
stringValueOf
(
synCtx
)
,
type
)
;
}
}
private
Object
convertValue
(
String
value
,
String
type
)
{
if
(
type
==
null
)
{
return
value
;
}
try
{
XMLConfigConstants
.
DATA_TYPES
dataType
=
XMLConfigConstants
.
DATA_TYPES
.
valueOf
(
type
)
;
switch
(
dataType
)
{
case
BOOLEAN
:
return
JavaUtils
.
isTrueExplicitly
(
value
)
;
case
DOUBLE
:
return
Double
.
parseDouble
(
value
)
;
case
FLOAT
:
return
Float
.
parseFloat
(
value
)
;
case
INTEGER
:
return
Integer
.
parseInt
(
value
)
;
case
LONG
:
return
Long
.
parseLong
(
value
)
;
case
OM
:
return
SynapseConfigUtils
.
stringToOM
(
value
)
;
case
SHORT
:
return
Short
.
parseShort
(
value
)
;
default
:
return
value
;
}
}
catch
(
IllegalArgumentException
e
)
{
String
msg
=
"Unknown type : "
+
type
+
" for the property mediator or the "
+
"property value cannot be converted into the specified type."
;
log
.
error
(
msg
,
e
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
}
private
String
getMatchedValue
(
String
value
,
SynapseLog
synLog
)
{
String
matchedValue
=
value
;
Matcher
matcher
=
pattern
.
matcher
(
value
)
;
if
(
matcher
.
matches
(
)
)
{
if
(
matcher
.
groupCount
(
)
>=
group
)
{
matchedValue
=
matcher
.
group
(
group
)
;
}
else
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
String
msg
=
"Failed to get a match for regx : "
+
pattern
.
toString
(
)
+
" with the property value :"
+
value
+
" for group :"
+
group
;
synLog
.
traceOrDebug
(
msg
)
;
}
}
}
else
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
String
msg
=
"Unable to find a match for regx : "
+
pattern
.
toString
(
)
+
" with the property value :"
+
value
;
synLog
.
traceOrDebug
(
msg
)
;
}
matchedValue
=
""
;
}
return
matchedValue
;
}
@
Override
public
boolean
isContentAware
(
)
{
if
(
expression
!=
null
)
{
return
expression
.
isContentAware
(
)
;
}
boolean
contentAware
=
false
;
if
(
XMLConfigConstants
.
SCOPE_AXIS2
.
equals
(
scope
)
)
{
if
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
MESSAGE_TYPE
.
equals
(
name
)
)
{
contentAware
=
true
;
}
}
else
if
(
XMLConfigConstants
.
SCOPE_TRANSPORT
.
equals
(
scope
)
)
{
if
(
HTTP
.
CONTENT_ENCODING
.
equals
(
name
)
)
{
contentAware
=
true
;
}
}
return
contentAware
;
}
}
