package
org
.
apache
.
synapse
.
core
.
axis2
;
import
org
.
apache
.
axis2
.
AxisFault
;
import
org
.
apache
.
axis2
.
Constants
;
import
org
.
apache
.
axis2
.
addressing
.
AddressingConstants
;
import
org
.
apache
.
axis2
.
addressing
.
EndpointReference
;
import
org
.
apache
.
axis2
.
client
.
OperationClient
;
import
org
.
apache
.
axis2
.
client
.
Options
;
import
org
.
apache
.
axis2
.
context
.
ConfigurationContext
;
import
org
.
apache
.
axis2
.
context
.
MessageContext
;
import
org
.
apache
.
axis2
.
context
.
ServiceContext
;
import
org
.
apache
.
axis2
.
context
.
ServiceGroupContext
;
import
org
.
apache
.
axis2
.
description
.
*
;
import
org
.
apache
.
axis2
.
engine
.
AxisConfiguration
;
import
org
.
apache
.
axis2
.
transport
.
http
.
HTTPConstants
;
import
org
.
apache
.
axis2
.
transport
.
http
.
HTTPTransportUtils
;
import
org
.
apache
.
axis2
.
transport
.
TransportUtils
;
import
org
.
apache
.
axis2
.
wsdl
.
WSDLConstants
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
endpoints
.
EndpointDefinition
;
import
org
.
apache
.
synapse
.
rest
.
RESTConstants
;
import
org
.
apache
.
synapse
.
transport
.
nhttp
.
NhttpConstants
;
import
org
.
apache
.
synapse
.
util
.
MessageHelper
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
Map
;
public
class
Axis2FlexibleMEPClient
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
Axis2FlexibleMEPClient
.
class
)
;
public
static
void
send
(
EndpointDefinition
endpoint
,
org
.
apache
.
synapse
.
MessageContext
synapseOutMessageContext
)
throws
AxisFault
{
boolean
separateListener
=
false
;
boolean
wsSecurityEnabled
=
false
;
String
wsSecPolicyKey
=
null
;
String
inboundWsSecPolicyKey
=
null
;
String
outboundWsSecPolicyKey
=
null
;
boolean
wsAddressingEnabled
=
false
;
String
wsAddressingVersion
=
null
;
if
(
endpoint
!=
null
)
{
separateListener
=
endpoint
.
isUseSeparateListener
(
)
;
wsSecurityEnabled
=
endpoint
.
isSecurityOn
(
)
;
wsSecPolicyKey
=
endpoint
.
getWsSecPolicyKey
(
)
;
inboundWsSecPolicyKey
=
endpoint
.
getInboundWsSecPolicyKey
(
)
;
outboundWsSecPolicyKey
=
endpoint
.
getOutboundWsSecPolicyKey
(
)
;
wsAddressingEnabled
=
endpoint
.
isAddressingOn
(
)
;
wsAddressingVersion
=
endpoint
.
getAddressingVersion
(
)
;
}
if
(
log
.
isDebugEnabled
(
)
)
{
String
to
;
if
(
endpoint
!=
null
&&
endpoint
.
getAddress
(
)
!=
null
)
{
to
=
endpoint
.
getAddress
(
synapseOutMessageContext
)
;
}
else
{
to
=
synapseOutMessageContext
.
getTo
(
)
.
toString
(
)
;
}
log
.
debug
(
"Sending [add = "
+
wsAddressingEnabled
+
"] [sec = "
+
wsSecurityEnabled
+
(
endpoint
!=
null
?
"] [mtom = "
+
endpoint
.
isUseMTOM
(
)
+
"] [swa = "
+
endpoint
.
isUseSwa
(
)
+
"] [format = "
+
endpoint
.
getFormat
(
)
+
"] [force soap11="
+
endpoint
.
isForceSOAP11
(
)
+
"] [force soap12="
+
endpoint
.
isForceSOAP12
(
)
+
"] [pox="
+
endpoint
.
isForcePOX
(
)
+
"] [get="
+
endpoint
.
isForceGET
(
)
+
"] [encoding="
+
endpoint
.
getCharSetEncoding
(
)
:
""
)
+
"] [to="
+
to
+
"]"
)
;
}
MessageContext
originalInMsgCtx
=
(
(
Axis2MessageContext
)
synapseOutMessageContext
)
.
getAxis2MessageContext
(
)
;
String
session
=
(
String
)
synapseOutMessageContext
.
getProperty
(
"LB_COOKIE_HEADER"
)
;
if
(
session
!=
null
)
{
Map
headers
=
(
Map
)
originalInMsgCtx
.
getProperty
(
MessageContext
.
TRANSPORT_HEADERS
)
;
headers
.
put
(
"Cookie"
,
session
)
;
}
String
preserveAddressingProperty
=
(
String
)
synapseOutMessageContext
.
getProperty
(
SynapseConstants
.
PRESERVE_WS_ADDRESSING
)
;
MessageContext
axisOutMsgCtx
=
cloneForSend
(
originalInMsgCtx
,
preserveAddressingProperty
)
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Message [Original Request Message ID : "
+
synapseOutMessageContext
.
getMessageID
(
)
+
"]"
+
" [New Cloned Request Message ID : "
+
axisOutMsgCtx
.
getMessageID
(
)
+
"]"
)
;
}
if
(
endpoint
!=
null
)
{
if
(
SynapseConstants
.
FORMAT_POX
.
equals
(
endpoint
.
getFormat
(
)
)
)
{
axisOutMsgCtx
.
setDoingREST
(
true
)
;
axisOutMsgCtx
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
MESSAGE_TYPE
,
org
.
apache
.
axis2
.
transport
.
http
.
HTTPConstants
.
MEDIA_TYPE_APPLICATION_XML
)
;
axisOutMsgCtx
.
setProperty
(
Constants
.
Configuration
.
CONTENT_TYPE
,
org
.
apache
.
axis2
.
transport
.
http
.
HTTPConstants
.
MEDIA_TYPE_APPLICATION_XML
)
;
}
else
if
(
SynapseConstants
.
FORMAT_GET
.
equals
(
endpoint
.
getFormat
(
)
)
)
{
axisOutMsgCtx
.
setDoingREST
(
true
)
;
axisOutMsgCtx
.
setProperty
(
Constants
.
Configuration
.
HTTP_METHOD
,
Constants
.
Configuration
.
HTTP_METHOD_GET
)
;
axisOutMsgCtx
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
MESSAGE_TYPE
,
org
.
apache
.
axis2
.
transport
.
http
.
HTTPConstants
.
MEDIA_TYPE_X_WWW_FORM
)
;
}
else
if
(
SynapseConstants
.
FORMAT_SOAP11
.
equals
(
endpoint
.
getFormat
(
)
)
)
{
axisOutMsgCtx
.
setDoingREST
(
false
)
;
axisOutMsgCtx
.
removeProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
MESSAGE_TYPE
)
;
axisOutMsgCtx
.
setProperty
(
Constants
.
Configuration
.
HTTP_METHOD
,
Constants
.
Configuration
.
HTTP_METHOD_POST
)
;
if
(
axisOutMsgCtx
.
getSoapAction
(
)
==
null
&&
axisOutMsgCtx
.
getWSAAction
(
)
!=
null
)
{
axisOutMsgCtx
.
setSoapAction
(
axisOutMsgCtx
.
getWSAAction
(
)
)
;
}
if
(
!
axisOutMsgCtx
.
isSOAP11
(
)
)
{
SOAPUtils
.
convertSOAP12toSOAP11
(
axisOutMsgCtx
)
;
}
}
else
if
(
SynapseConstants
.
FORMAT_SOAP12
.
equals
(
endpoint
.
getFormat
(
)
)
)
{
axisOutMsgCtx
.
setDoingREST
(
false
)
;
axisOutMsgCtx
.
removeProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
MESSAGE_TYPE
)
;
axisOutMsgCtx
.
setProperty
(
Constants
.
Configuration
.
HTTP_METHOD
,
Constants
.
Configuration
.
HTTP_METHOD_POST
)
;
if
(
axisOutMsgCtx
.
getSoapAction
(
)
==
null
&&
axisOutMsgCtx
.
getWSAAction
(
)
!=
null
)
{
axisOutMsgCtx
.
setSoapAction
(
axisOutMsgCtx
.
getWSAAction
(
)
)
;
}
if
(
axisOutMsgCtx
.
isSOAP11
(
)
)
{
SOAPUtils
.
convertSOAP11toSOAP12
(
axisOutMsgCtx
)
;
}
}
else
if
(
SynapseConstants
.
FORMAT_REST
.
equals
(
endpoint
.
getFormat
(
)
)
)
{
if
(
originalInMsgCtx
.
getProperty
(
Constants
.
Configuration
.
HTTP_METHOD
)
!=
null
)
{
Object
method
=
originalInMsgCtx
.
getProperty
(
Constants
.
Configuration
.
HTTP_METHOD
)
;
if
(
method
.
equals
(
Constants
.
Configuration
.
HTTP_METHOD_GET
)
||
method
.
equals
(
Constants
.
Configuration
.
HTTP_METHOD_DELETE
)
)
{
axisOutMsgCtx
.
removeProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
MESSAGE_TYPE
)
;
}
}
axisOutMsgCtx
.
setDoingREST
(
true
)
;
}
else
{
processWSDL2RESTRequestMessageType
(
originalInMsgCtx
,
axisOutMsgCtx
)
;
}
if
(
endpoint
.
isUseMTOM
(
)
)
{
axisOutMsgCtx
.
setDoingMTOM
(
true
)
;
axisOutMsgCtx
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
ENABLE_MTOM
,
org
.
apache
.
axis2
.
Constants
.
VALUE_TRUE
)
;
axisOutMsgCtx
.
setDoingMTOM
(
true
)
;
}
else
if
(
endpoint
.
isUseSwa
(
)
)
{
axisOutMsgCtx
.
setDoingSwA
(
true
)
;
axisOutMsgCtx
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
ENABLE_SWA
,
org
.
apache
.
axis2
.
Constants
.
VALUE_TRUE
)
;
axisOutMsgCtx
.
setDoingSwA
(
true
)
;
}
if
(
endpoint
.
getCharSetEncoding
(
)
!=
null
)
{
axisOutMsgCtx
.
setProperty
(
Constants
.
Configuration
.
CHARACTER_SET_ENCODING
,
endpoint
.
getCharSetEncoding
(
)
)
;
}
String
restSuffix
=
(
String
)
axisOutMsgCtx
.
getProperty
(
NhttpConstants
.
REST_URL_POSTFIX
)
;
boolean
isRest
=
SynapseConstants
.
FORMAT_REST
.
equals
(
endpoint
.
getFormat
(
)
)
;
if
(
!
isRest
&&
!
endpoint
.
isForceSOAP11
(
)
&&
!
endpoint
.
isForceSOAP12
(
)
)
{
isRest
=
isRequestRest
(
originalInMsgCtx
)
;
}
if
(
endpoint
.
getAddress
(
)
!=
null
)
{
if
(
isRest
&&
restSuffix
!=
null
&&
!
""
.
equals
(
restSuffix
)
)
{
String
address
=
endpoint
.
getAddress
(
synapseOutMessageContext
)
;
String
url
;
if
(
!
address
.
endsWith
(
"/"
)
&&
!
restSuffix
.
startsWith
(
"/"
)
&&
!
restSuffix
.
startsWith
(
"?"
)
)
{
url
=
address
+
"/"
+
restSuffix
;
}
else
{
url
=
address
+
restSuffix
;
}
axisOutMsgCtx
.
setTo
(
new
EndpointReference
(
url
)
)
;
}
else
{
axisOutMsgCtx
.
setTo
(
new
EndpointReference
(
endpoint
.
getAddress
(
synapseOutMessageContext
)
)
)
;
}
axisOutMsgCtx
.
setProperty
(
NhttpConstants
.
ENDPOINT_PREFIX
,
endpoint
.
getAddress
(
synapseOutMessageContext
)
)
;
}
else
{
if
(
isRest
&&
restSuffix
!=
null
&&
!
""
.
equals
(
restSuffix
)
)
{
EndpointReference
epr
=
axisOutMsgCtx
.
getTo
(
)
;
if
(
epr
!=
null
)
{
String
address
=
epr
.
getAddress
(
)
;
String
url
;
if
(
!
address
.
endsWith
(
"/"
)
&&
!
restSuffix
.
startsWith
(
"/"
)
&&
!
restSuffix
.
startsWith
(
"?"
)
)
{
url
=
address
+
"/"
+
restSuffix
;
}
else
{
url
=
address
+
restSuffix
;
}
axisOutMsgCtx
.
setTo
(
new
EndpointReference
(
url
)
)
;
}
}
}
if
(
endpoint
.
isUseSeparateListener
(
)
)
{
axisOutMsgCtx
.
getOptions
(
)
.
setUseSeparateListener
(
true
)
;
}
}
else
{
processWSDL2RESTRequestMessageType
(
originalInMsgCtx
,
axisOutMsgCtx
)
;
}
if
(
axisOutMsgCtx
.
isDoingREST
(
)
&&
HTTPConstants
.
MEDIA_TYPE_X_WWW_FORM
.
equals
(
axisOutMsgCtx
.
getProperty
(
Constants
.
Configuration
.
MESSAGE_TYPE
)
)
)
{
if
(
axisOutMsgCtx
.
getProperty
(
WSDL2Constants
.
ATTR_WHTTP_LOCATION
)
==
null
&&
axisOutMsgCtx
.
getEnvelope
(
)
.
getBody
(
)
.
getFirstElement
(
)
!=
null
)
{
axisOutMsgCtx
.
setProperty
(
WSDL2Constants
.
ATTR_WHTTP_LOCATION
,
axisOutMsgCtx
.
getEnvelope
(
)
.
getBody
(
)
.
getFirstElement
(
)
.
getLocalName
(
)
)
;
}
}
if
(
wsAddressingEnabled
)
{
if
(
wsAddressingVersion
!=
null
&&
SynapseConstants
.
ADDRESSING_VERSION_SUBMISSION
.
equals
(
wsAddressingVersion
)
)
{
axisOutMsgCtx
.
setProperty
(
AddressingConstants
.
WS_ADDRESSING_VERSION
,
AddressingConstants
.
Submission
.
WSA_NAMESPACE
)
;
}
else
if
(
wsAddressingVersion
!=
null
&&
SynapseConstants
.
ADDRESSING_VERSION_FINAL
.
equals
(
wsAddressingVersion
)
)
{
axisOutMsgCtx
.
setProperty
(
AddressingConstants
.
WS_ADDRESSING_VERSION
,
AddressingConstants
.
Final
.
WSA_NAMESPACE
)
;
}
axisOutMsgCtx
.
setProperty
(
AddressingConstants
.
DISABLE_ADDRESSING_FOR_OUT_MESSAGES
,
Boolean
.
FALSE
)
;
}
else
{
axisOutMsgCtx
.
setProperty
(
AddressingConstants
.
DISABLE_ADDRESSING_FOR_OUT_MESSAGES
,
Boolean
.
TRUE
)
;
}
String
preserveHeaderProperty
=
(
String
)
synapseOutMessageContext
.
getProperty
(
SynapseConstants
.
PRESERVE_PROCESSED_HEADERS
)
;
if
(
preserveHeaderProperty
==
null
||
!
Boolean
.
parseBoolean
(
preserveHeaderProperty
)
)
{
MessageHelper
.
removeProcessedHeaders
(
axisOutMsgCtx
,
(
preserveAddressingProperty
!=
null
&&
Boolean
.
parseBoolean
(
preserveAddressingProperty
)
)
)
;
}
ConfigurationContext
axisCfgCtx
=
axisOutMsgCtx
.
getConfigurationContext
(
)
;
AxisConfiguration
axisCfg
=
axisCfgCtx
.
getAxisConfiguration
(
)
;
AxisService
anonymousService
=
AnonymousServiceFactory
.
getAnonymousService
(
synapseOutMessageContext
.
getConfiguration
(
)
,
axisCfg
,
wsAddressingEnabled
,
wsSecurityEnabled
)
;
anonymousService
.
getParent
(
)
.
addParameter
(
SynapseConstants
.
HIDDEN_SERVICE_PARAM
,
"true"
)
;
ServiceGroupContext
sgc
=
new
ServiceGroupContext
(
axisCfgCtx
,
(
AxisServiceGroup
)
anonymousService
.
getParent
(
)
)
;
ServiceContext
serviceCtx
=
sgc
.
getServiceContext
(
anonymousService
)
;
boolean
outOnlyMessage
=
"true"
.
equals
(
synapseOutMessageContext
.
getProperty
(
SynapseConstants
.
OUT_ONLY
)
)
;
AxisOperation
axisAnonymousOperation
=
anonymousService
.
getOperation
(
outOnlyMessage
?
new
QName
(
AnonymousServiceFactory
.
OUT_ONLY_OPERATION
)
:
new
QName
(
AnonymousServiceFactory
.
OUT_IN_OPERATION
)
)
;
Options
clientOptions
=
MessageHelper
.
cloneOptions
(
originalInMsgCtx
.
getOptions
(
)
)
;
clientOptions
.
setUseSeparateListener
(
separateListener
)
;
if
(
wsSecurityEnabled
)
{
if
(
wsSecPolicyKey
!=
null
)
{
clientOptions
.
setProperty
(
SynapseConstants
.
RAMPART_POLICY
,
MessageHelper
.
getPolicy
(
synapseOutMessageContext
,
wsSecPolicyKey
)
)
;
}
else
{
if
(
inboundWsSecPolicyKey
!=
null
)
{
clientOptions
.
setProperty
(
SynapseConstants
.
RAMPART_IN_POLICY
,
MessageHelper
.
getPolicy
(
synapseOutMessageContext
,
inboundWsSecPolicyKey
)
)
;
}
if
(
outboundWsSecPolicyKey
!=
null
)
{
clientOptions
.
setProperty
(
SynapseConstants
.
RAMPART_OUT_POLICY
,
MessageHelper
.
getPolicy
(
synapseOutMessageContext
,
outboundWsSecPolicyKey
)
)
;
}
}
axisOutMsgCtx
.
getEnvelope
(
)
.
getOrCreateHeader
(
)
;
}
OperationClient
mepClient
=
axisAnonymousOperation
.
createClient
(
serviceCtx
,
clientOptions
)
;
mepClient
.
addMessageContext
(
axisOutMsgCtx
)
;
axisOutMsgCtx
.
setAxisMessage
(
axisAnonymousOperation
.
getMessage
(
WSDLConstants
.
MESSAGE_LABEL_OUT_VALUE
)
)
;
if
(
endpoint
!=
null
&&
endpoint
.
getTimeoutDuration
(
)
>
0
)
{
axisOutMsgCtx
.
setProperty
(
SynapseConstants
.
SEND_TIMEOUT
,
endpoint
.
getTimeoutDuration
(
)
)
;
}
if
(
!
outOnlyMessage
)
{
AsyncCallback
callback
=
new
AsyncCallback
(
synapseOutMessageContext
)
;
if
(
endpoint
!=
null
)
{
callback
.
setTimeOutOn
(
System
.
currentTimeMillis
(
)
+
endpoint
.
getTimeoutDuration
(
)
)
;
callback
.
setTimeOutAction
(
endpoint
.
getTimeoutAction
(
)
)
;
}
else
{
callback
.
setTimeOutOn
(
System
.
currentTimeMillis
(
)
)
;
}
mepClient
.
setCallback
(
callback
)
;
}
if
(
originalInMsgCtx
.
isPropertyTrue
(
NhttpConstants
.
FORCE_HTTP_1_0
)
)
{
synapseOutMessageContext
.
getEnvelope
(
)
.
toString
(
)
;
}
originalInMsgCtx
.
getOperationContext
(
)
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
RESPONSE_WRITTEN
,
"SKIP"
)
;
Object
o
=
originalInMsgCtx
.
getProperty
(
"TRANSPORT_OUT_DESCRIPTION"
)
;
if
(
o
!=
null
&&
o
instanceof
TransportOutDescription
)
{
axisOutMsgCtx
.
setTransportOut
(
(
TransportOutDescription
)
o
)
;
clientOptions
.
setTransportOut
(
(
TransportOutDescription
)
o
)
;
clientOptions
.
setProperty
(
"TRANSPORT_OUT_DESCRIPTION"
,
o
)
;
}
mepClient
.
execute
(
true
)
;
}
private
static
MessageContext
cloneForSend
(
MessageContext
ori
,
String
preserveAddressing
)
throws
AxisFault
{
MessageContext
newMC
=
MessageHelper
.
clonePartially
(
ori
)
;
newMC
.
setEnvelope
(
ori
.
getEnvelope
(
)
)
;
if
(
preserveAddressing
!=
null
&&
Boolean
.
parseBoolean
(
preserveAddressing
)
)
{
newMC
.
setMessageID
(
ori
.
getMessageID
(
)
)
;
}
else
{
MessageHelper
.
removeAddressingHeaders
(
newMC
)
;
}
newMC
.
setProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
,
ori
.
getProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
)
)
;
return
newMC
;
}
public
static
void
clearSecurityProperties
(
Options
options
)
{
Options
current
=
options
;
while
(
current
!=
null
&&
current
.
getProperty
(
SynapseConstants
.
RAMPART_POLICY
)
!=
null
)
{
current
.
setProperty
(
SynapseConstants
.
RAMPART_POLICY
,
null
)
;
current
=
current
.
getParent
(
)
;
}
}
private
static
void
processWSDL2RESTRequestMessageType
(
MessageContext
originalInMsgCtx
,
MessageContext
axisOutMsgCtx
)
{
Object
restContentType
=
originalInMsgCtx
.
getProperty
(
NhttpConstants
.
REST_REQUEST_CONTENT_TYPE
)
;
if
(
restContentType
==
null
)
{
String
httpMethod
=
(
String
)
originalInMsgCtx
.
getProperty
(
Constants
.
Configuration
.
HTTP_METHOD
)
;
if
(
Constants
.
Configuration
.
HTTP_METHOD_GET
.
equals
(
httpMethod
)
||
Constants
.
Configuration
.
HTTP_METHOD_DELETE
.
equals
(
httpMethod
)
)
{
restContentType
=
HTTPConstants
.
MEDIA_TYPE_X_WWW_FORM
;
}
}
if
(
restContentType
!=
null
&&
restContentType
instanceof
String
)
{
String
contentType
=
TransportUtils
.
getContentType
(
(
String
)
restContentType
,
originalInMsgCtx
)
;
axisOutMsgCtx
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
MESSAGE_TYPE
,
contentType
)
;
originalInMsgCtx
.
setProperty
(
org
.
apache
.
axis2
.
Constants
.
Configuration
.
MESSAGE_TYPE
,
contentType
)
;
}
}
private
static
boolean
isRequestRest
(
MessageContext
originalInMsgCtx
)
{
boolean
isRestRequest
=
originalInMsgCtx
.
getProperty
(
NhttpConstants
.
REST_REQUEST_CONTENT_TYPE
)
!=
null
;
if
(
!
isRestRequest
)
{
String
httpMethod
=
(
String
)
originalInMsgCtx
.
getProperty
(
Constants
.
Configuration
.
HTTP_METHOD
)
;
isRestRequest
=
Constants
.
Configuration
.
HTTP_METHOD_GET
.
equals
(
httpMethod
)
||
Constants
.
Configuration
.
HTTP_METHOD_DELETE
.
equals
(
httpMethod
)
||
Constants
.
Configuration
.
HTTP_METHOD_PUT
.
equals
(
httpMethod
)
||
RESTConstants
.
METHOD_OPTIONS
.
equals
(
httpMethod
)
;
if
(
!
isRestRequest
)
{
isRestRequest
=
Constants
.
Configuration
.
HTTP_METHOD_POST
.
equals
(
httpMethod
)
&&
HTTPTransportUtils
.
isRESTRequest
(
String
.
valueOf
(
originalInMsgCtx
.
getProperty
(
Constants
.
Configuration
.
MESSAGE_TYPE
)
)
)
;
}
}
return
isRestRequest
;
}
}
