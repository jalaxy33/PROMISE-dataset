package
org
.
apache
.
synapse
.
config
.
xml
.
endpoints
;
import
org
.
apache
.
axiom
.
om
.
OMAttribute
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
om
.
OMNode
;
import
org
.
apache
.
axiom
.
util
.
UIDGenerator
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
config
.
XMLToObjectMapper
;
import
org
.
apache
.
synapse
.
config
.
xml
.
XMLConfigConstants
;
import
org
.
apache
.
synapse
.
config
.
xml
.
MediatorPropertyFactory
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
IndirectEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
EndpointDefinition
;
import
org
.
apache
.
synapse
.
PropertyInclude
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorProperty
;
import
org
.
apache
.
synapse
.
endpoints
.
AbstractEndpoint
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
*
;
public
abstract
class
EndpointFactory
implements
XMLToObjectMapper
{
static
Log
log
;
private
DefinitionFactory
customDefnFactory
=
null
;
protected
EndpointFactory
(
)
{
log
=
LogFactory
.
getLog
(
this
.
getClass
(
)
)
;
}
private
static
final
String
ENDPOINT_NAME_PREFIX
=
"endpoint_"
;
public
static
final
QName
ON_FAULT_Q
=
new
QName
(
XMLConfigConstants
.
NULL_NAMESPACE
,
"onError"
)
;
private
static
final
QName
DESCRIPTION_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"description"
)
;
public
static
Endpoint
getEndpointFromElement
(
OMElement
elem
,
boolean
isAnonymous
,
Properties
properties
)
{
return
getEndpointFactory
(
elem
)
.
createEndpointWithName
(
elem
,
isAnonymous
,
properties
)
;
}
public
static
Endpoint
getEndpointFromElement
(
OMElement
elem
,
DefinitionFactory
factory
,
boolean
isAnonymous
,
Properties
properties
)
{
EndpointFactory
fac
=
getEndpointFactory
(
elem
)
;
fac
.
setEndpointDefinitionFactory
(
factory
)
;
return
fac
.
createEndpointWithName
(
elem
,
isAnonymous
,
properties
)
;
}
public
Object
getObjectFromOMNode
(
OMNode
om
,
Properties
properties
)
{
if
(
om
instanceof
OMElement
)
{
return
createEndpointWithName
(
(
OMElement
)
om
,
false
,
properties
)
;
}
else
{
handleException
(
"Invalid XML configuration for an Endpoint. OMElement expected"
)
;
}
return
null
;
}
protected
abstract
Endpoint
createEndpoint
(
OMElement
epConfig
,
boolean
anonymousEndpoint
,
Properties
properties
)
;
private
Endpoint
createEndpointWithName
(
OMElement
epConfig
,
boolean
anonymousEndpoint
,
Properties
properties
)
{
Endpoint
ep
=
createEndpoint
(
epConfig
,
anonymousEndpoint
,
properties
)
;
OMElement
descriptionElem
=
epConfig
.
getFirstChildWithName
(
DESCRIPTION_Q
)
;
if
(
descriptionElem
!=
null
)
{
ep
.
setDescription
(
descriptionElem
.
getText
(
)
)
;
}
if
(
anonymousEndpoint
&&
ep
.
getName
(
)
==
null
)
{
String
uuid
=
UIDGenerator
.
generateUID
(
)
;
uuid
=
uuid
.
replace
(
':'
,
'_'
)
;
ep
.
setName
(
ENDPOINT_NAME_PREFIX
+
uuid
)
;
if
(
ep
instanceof
AbstractEndpoint
)
{
(
(
AbstractEndpoint
)
ep
)
.
setAnonymous
(
true
)
;
}
}
OMAttribute
onFaultAtt
=
epConfig
.
getAttribute
(
ON_FAULT_Q
)
;
if
(
onFaultAtt
!=
null
)
{
ep
.
setErrorHandler
(
onFaultAtt
.
getAttributeValue
(
)
)
;
}
return
ep
;
}
protected
void
extractSpecificEndpointProperties
(
EndpointDefinition
definition
,
OMElement
elem
)
{
}
private
static
EndpointFactory
getEndpointFactory
(
OMElement
configElement
)
{
if
(
configElement
.
getAttribute
(
new
QName
(
"key"
)
)
!=
null
)
{
return
IndirectEndpointFactory
.
getInstance
(
)
;
}
if
(
configElement
.
getAttribute
(
new
QName
(
"key-expression"
)
)
!=
null
)
{
return
ResolvingEndpointFactory
.
getInstance
(
)
;
}
if
(
configElement
.
getAttribute
(
new
QName
(
"template"
)
)
!=
null
)
{
return
new
TemplateEndpointFactory
(
)
;
}
OMElement
addressElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"address"
)
)
;
if
(
addressElement
!=
null
)
{
return
AddressEndpointFactory
.
getInstance
(
)
;
}
OMElement
wsdlElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"wsdl"
)
)
;
if
(
wsdlElement
!=
null
)
{
return
WSDLEndpointFactory
.
getInstance
(
)
;
}
OMElement
defaultElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"default"
)
)
;
if
(
defaultElement
!=
null
)
{
return
DefaultEndpointFactory
.
getInstance
(
)
;
}
OMElement
lbElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"loadbalance"
)
)
;
if
(
lbElement
!=
null
)
{
OMElement
sessionElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"session"
)
)
;
if
(
sessionElement
!=
null
)
{
return
SALoadbalanceEndpointFactory
.
getInstance
(
)
;
}
else
{
return
LoadbalanceEndpointFactory
.
getInstance
(
)
;
}
}
OMElement
dlbElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"dynamicLoadbalance"
)
)
;
if
(
dlbElement
!=
null
)
{
return
DynamicLoadbalanceEndpointFactory
.
getInstance
(
)
;
}
OMElement
sdlbElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"serviceDynamicLoadbalance"
)
)
;
if
(
sdlbElement
!=
null
)
{
return
ServiceDynamicLoadbalanceEndpointFactory
.
getInstance
(
)
;
}
OMElement
foElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"failover"
)
)
;
if
(
foElement
!=
null
)
{
return
FailoverEndpointFactory
.
getInstance
(
)
;
}
OMElement
rcplElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"recipientlist"
)
)
;
if
(
rcplElement
!=
null
)
{
return
RecipientListEndpointFactory
.
getInstance
(
)
;
}
OMElement
classElement
=
configElement
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"class"
)
)
;
if
(
classElement
!=
null
)
{
return
ClassEndpointFactory
.
getInstance
(
)
;
}
handleException
(
"Invalid endpoint configuration."
)
;
return
null
;
}
protected
ArrayList
<
Endpoint
>
getEndpoints
(
OMElement
listEndpointElement
,
Endpoint
parent
,
Properties
properties
)
{
ArrayList
<
Endpoint
>
endpoints
=
new
ArrayList
<
Endpoint
>
(
)
;
ArrayList
<
String
>
keys
=
new
ArrayList
<
String
>
(
)
;
Iterator
iter
=
listEndpointElement
.
getChildrenWithName
(
XMLConfigConstants
.
ENDPOINT_ELT
)
;
while
(
iter
.
hasNext
(
)
)
{
OMElement
endptElem
=
(
OMElement
)
iter
.
next
(
)
;
Endpoint
endpoint
=
EndpointFactory
.
getEndpointFromElement
(
endptElem
,
true
,
properties
)
;
if
(
endpoint
instanceof
IndirectEndpoint
)
{
String
key
=
(
(
IndirectEndpoint
)
endpoint
)
.
getKey
(
)
;
if
(
!
keys
.
contains
(
key
)
)
{
keys
.
add
(
key
)
;
}
else
{
handleException
(
"Same endpoint definition cannot be used with in the siblings"
)
;
}
}
endpoint
.
setParentEndpoint
(
parent
)
;
endpoints
.
add
(
endpoint
)
;
}
return
endpoints
;
}
public
void
setEndpointDefinitionFactory
(
DefinitionFactory
factory
)
{
customDefnFactory
=
factory
;
}
public
DefinitionFactory
getEndpointDefinitionFactory
(
)
{
return
customDefnFactory
;
}
protected
void
processProperties
(
PropertyInclude
endpoint
,
OMElement
endpointElement
)
{
List
<
MediatorProperty
>
properties
=
MediatorPropertyFactory
.
getMediatorProperties
(
endpointElement
)
;
if
(
properties
!=
null
&&
properties
.
size
(
)
>
0
)
{
endpoint
.
addProperties
(
properties
)
;
}
}
protected
static
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
protected
static
void
handleException
(
String
msg
,
Exception
e
)
{
log
.
error
(
msg
,
e
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
}
