package
org
.
apache
.
synapse
.
config
.
xml
;
import
org
.
apache
.
axiom
.
om
.
OMAbstractFactory
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
om
.
OMFactory
;
import
org
.
apache
.
axiom
.
om
.
OMNamespace
;
import
org
.
apache
.
axiom
.
om
.
xpath
.
AXIOMXPath
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
aspects
.
AspectConfigurable
;
import
org
.
apache
.
synapse
.
aspects
.
statistics
.
StatisticsConfigurable
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorProperty
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
Collection
;
public
abstract
class
AbstractMediatorSerializer
implements
MediatorSerializer
{
protected
static
Log
log
;
protected
static
final
OMFactory
fac
=
OMAbstractFactory
.
getOMFactory
(
)
;
protected
static
final
OMNamespace
synNS
=
SynapseConstants
.
SYNAPSE_OMNAMESPACE
;
protected
static
final
OMNamespace
nullNS
=
fac
.
createOMNamespace
(
XMLConfigConstants
.
NULL_NAMESPACE
,
""
)
;
protected
static
final
QName
PROP_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"property"
)
;
protected
static
final
QName
DESCRIPTION_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"description"
)
;
protected
AbstractMediatorSerializer
(
)
{
log
=
LogFactory
.
getLog
(
this
.
getClass
(
)
)
;
}
public
final
OMElement
serializeMediator
(
OMElement
parent
,
Mediator
m
)
{
if
(
m
instanceof
AnonymousListMediator
)
{
(
(
AnonymousListMediatorSerializer
)
this
)
.
serializeChildren
(
parent
,
(
(
AnonymousListMediator
)
m
)
.
getList
(
)
)
;
return
parent
;
}
else
{
OMElement
elem
=
serializeSpecificMediator
(
m
)
;
if
(
m
.
getDescription
(
)
!=
null
)
{
OMElement
descriptionElem
=
fac
.
createOMElement
(
DESCRIPTION_Q
,
elem
)
;
descriptionElem
.
setText
(
m
.
getDescription
(
)
)
;
elem
.
addChild
(
descriptionElem
)
;
}
if
(
parent
!=
null
)
{
parent
.
addChild
(
elem
)
;
}
return
elem
;
}
}
protected
abstract
OMElement
serializeSpecificMediator
(
Mediator
m
)
;
protected
static
void
saveTracingState
(
OMElement
mediatorOmElement
,
Mediator
mediator
)
{
int
traceState
=
mediator
.
getTraceState
(
)
;
String
traceValue
=
null
;
if
(
traceState
==
org
.
apache
.
synapse
.
SynapseConstants
.
TRACING_ON
)
{
traceValue
=
XMLConfigConstants
.
TRACE_ENABLE
;
}
else
if
(
traceState
==
org
.
apache
.
synapse
.
SynapseConstants
.
TRACING_OFF
)
{
traceValue
=
XMLConfigConstants
.
TRACE_DISABLE
;
}
if
(
traceValue
!=
null
)
{
mediatorOmElement
.
addAttribute
(
fac
.
createOMAttribute
(
XMLConfigConstants
.
TRACE_ATTRIB_NAME
,
nullNS
,
traceValue
)
)
;
}
if
(
mediator
instanceof
AspectConfigurable
)
{
StatisticsConfigurable
statisticsConfigurable
=
(
(
AspectConfigurable
)
mediator
)
.
getAspectConfiguration
(
)
;
if
(
statisticsConfigurable
!=
null
&&
statisticsConfigurable
.
isStatisticsEnable
(
)
)
{
mediatorOmElement
.
addAttribute
(
fac
.
createOMAttribute
(
XMLConfigConstants
.
STATISTICS_ATTRIB_NAME
,
nullNS
,
XMLConfigConstants
.
STATISTICS_ENABLE
)
)
;
}
}
}
protected
void
serializeMediatorProperties
(
OMElement
parent
,
Collection
<
MediatorProperty
>
props
,
QName
childElementName
)
{
for
(
MediatorProperty
mp
:
props
)
{
OMElement
prop
=
fac
.
createOMElement
(
childElementName
,
parent
)
;
if
(
mp
.
getName
(
)
!=
null
)
{
prop
.
addAttribute
(
fac
.
createOMAttribute
(
"name"
,
nullNS
,
mp
.
getName
(
)
)
)
;
}
else
{
handleException
(
"Mediator property name missing"
)
;
}
if
(
mp
.
getValue
(
)
!=
null
)
{
prop
.
addAttribute
(
fac
.
createOMAttribute
(
"value"
,
nullNS
,
mp
.
getValue
(
)
)
)
;
}
else
if
(
mp
.
getExpression
(
)
!=
null
)
{
SynapseXPathSerializer
.
serializeXPath
(
mp
.
getExpression
(
)
,
prop
,
"expression"
)
;
}
else
{
handleException
(
"Mediator property must have a literal value or be an expression"
)
;
}
}
}
protected
void
serializeMediatorProperties
(
OMElement
parent
,
Collection
<
MediatorProperty
>
props
)
{
serializeMediatorProperties
(
parent
,
props
,
PROP_Q
)
;
}
protected
void
serializeProperties
(
OMElement
parent
,
Collection
<
MediatorProperty
>
props
)
{
serializeMediatorProperties
(
parent
,
props
)
;
}
protected
void
serializeNamespaces
(
OMElement
elem
,
AXIOMXPath
xpath
)
{
for
(
Object
obj
:
xpath
.
getNamespaces
(
)
.
keySet
(
)
)
{
String
prefix
=
(
String
)
obj
;
String
uri
=
xpath
.
getNamespaceContext
(
)
.
translateNamespacePrefixToUri
(
prefix
)
;
if
(
!
XMLConfigConstants
.
SYNAPSE_NAMESPACE
.
equals
(
uri
)
)
{
elem
.
declareNamespace
(
uri
,
prefix
)
;
}
}
}
protected
void
handleException
(
String
msg
)
{
LogFactory
.
getLog
(
this
.
getClass
(
)
)
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
protected
void
handleException
(
String
msg
,
Exception
e
)
{
LogFactory
.
getLog
(
this
.
getClass
(
)
)
.
error
(
msg
,
e
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
}
