package
org
.
apache
.
synapse
.
config
.
xml
.
endpoints
;
import
java
.
util
.
Collection
;
import
javax
.
xml
.
namespace
.
QName
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
om
.
OMFactory
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
PropertyInclude
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
config
.
xml
.
MediatorPropertySerializer
;
import
org
.
apache
.
synapse
.
endpoints
.
AbstractEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
AddressEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
DefaultEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
DynamicLoadbalanceEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
EndpointDefinition
;
import
org
.
apache
.
synapse
.
endpoints
.
FailoverEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
IndirectEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
LoadbalanceEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
RecipientListEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
ResolvingEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
SALoadbalanceEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
TemplateEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
WSDLEndpoint
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorProperty
;
public
abstract
class
EndpointSerializer
{
private
Log
log
;
protected
OMFactory
fac
;
protected
EndpointSerializer
(
)
{
log
=
LogFactory
.
getLog
(
this
.
getClass
(
)
)
;
}
public
static
OMElement
getElementFromEndpoint
(
Endpoint
endpoint
)
{
EndpointSerializer
endpointSerializer
=
getEndpointSerializer
(
endpoint
)
;
OMElement
elem
=
endpointSerializer
.
serializeEndpoint
(
endpoint
)
;
OMElement
descriptionElem
=
endpointSerializer
.
getSerializedDescription
(
endpoint
)
;
if
(
descriptionElem
!=
null
)
{
elem
.
addChild
(
descriptionElem
)
;
}
return
elem
;
}
protected
abstract
OMElement
serializeEndpoint
(
Endpoint
endpoint
)
;
private
OMElement
getSerializedDescription
(
Endpoint
endpoint
)
{
OMElement
descriptionElem
=
fac
.
createOMElement
(
"description"
,
SynapseConstants
.
SYNAPSE_OMNAMESPACE
)
;
if
(
endpoint
.
getDescription
(
)
!=
null
)
{
descriptionElem
.
setText
(
endpoint
.
getDescription
(
)
)
;
return
descriptionElem
;
}
else
{
return
null
;
}
}
protected
void
serializeSpecificEndpointProperties
(
EndpointDefinition
endpointDefinition
,
OMElement
element
)
{
}
protected
void
handleException
(
String
message
)
{
log
.
error
(
message
)
;
throw
new
SynapseException
(
message
)
;
}
public
static
EndpointSerializer
getEndpointSerializer
(
Endpoint
endpoint
)
{
if
(
endpoint
instanceof
AddressEndpoint
)
{
return
new
AddressEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
DefaultEndpoint
)
{
return
new
DefaultEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
WSDLEndpoint
)
{
return
new
WSDLEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
IndirectEndpoint
)
{
return
new
IndirectEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
ResolvingEndpoint
)
{
return
new
ResolvingEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
SALoadbalanceEndpoint
)
{
return
new
SALoadbalanceEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
DynamicLoadbalanceEndpoint
)
{
return
new
DynamicLoadbalanceEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
LoadbalanceEndpoint
)
{
return
new
LoadbalanceEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
FailoverEndpoint
)
{
return
new
FailoverEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
TemplateEndpoint
)
{
return
new
TemplateEndpointSerializer
(
)
;
}
else
if
(
endpoint
instanceof
RecipientListEndpoint
)
{
return
new
RecipientListEndpointSerializer
(
)
;
}
throw
new
SynapseException
(
"Serializer for endpoint "
+
endpoint
.
getClass
(
)
.
toString
(
)
+
" is not defined."
)
;
}
protected
void
serializeCommonAttributes
(
Endpoint
endpoint
,
OMElement
element
)
{
String
name
=
endpoint
.
getName
(
)
;
boolean
anon
=
(
(
AbstractEndpoint
)
endpoint
)
.
isAnonymous
(
)
;
if
(
name
!=
null
&&
!
anon
)
{
element
.
addAttribute
(
"name"
,
name
,
null
)
;
}
String
messageStore
=
endpoint
.
getErrorHandler
(
)
;
if
(
messageStore
!=
null
)
{
element
.
addAttribute
(
EndpointFactory
.
ON_FAULT_Q
.
getLocalPart
(
)
,
messageStore
,
null
)
;
}
}
protected
void
serializeProperties
(
PropertyInclude
endpoint
,
OMElement
element
)
{
Collection
<
MediatorProperty
>
properties
=
endpoint
.
getProperties
(
)
;
if
(
properties
!=
null
&&
properties
.
size
(
)
>
0
)
{
MediatorPropertySerializer
.
serializeMediatorProperties
(
element
,
properties
)
;
}
}
}
