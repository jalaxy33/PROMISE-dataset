package
org
.
apache
.
synapse
.
mediators
.
base
;
import
org
.
apache
.
synapse
.
*
;
import
org
.
apache
.
synapse
.
aspects
.
ComponentType
;
import
org
.
apache
.
synapse
.
aspects
.
statistics
.
StatisticsReporter
;
import
org
.
apache
.
synapse
.
core
.
SynapseEnvironment
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractListMediator
;
import
org
.
apache
.
synapse
.
mediators
.
Value
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorFaultHandler
;
import
java
.
util
.
Stack
;
public
class
SequenceMediator
extends
AbstractListMediator
implements
Nameable
{
private
String
name
=
null
;
private
Value
key
=
null
;
private
String
errorHandler
=
null
;
private
boolean
dynamic
=
false
;
private
boolean
initialized
=
false
;
private
String
registryKey
=
null
;
private
String
fileName
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
SynapseLog
synLog
=
getLog
(
synCtx
)
;
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Start : Sequence "
+
(
name
==
null
?
(
key
==
null
?
"<anonymous"
:
"key=<"
+
key
)
:
"<"
+
name
)
+
">"
)
;
if
(
synLog
.
isTraceTraceEnabled
(
)
)
{
synLog
.
traceTrace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
if
(
key
==
null
)
{
Mediator
errorHandlerMediator
=
null
;
try
{
if
(
isStatisticsEnable
(
)
)
{
StatisticsReporter
.
reportForComponent
(
synCtx
,
getAspectConfiguration
(
)
,
ComponentType
.
SEQUENCE
)
;
}
if
(
errorHandler
!=
null
)
{
errorHandlerMediator
=
synCtx
.
getSequence
(
errorHandler
)
;
if
(
errorHandlerMediator
!=
null
)
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Setting the onError handler : "
+
errorHandler
+
" for the sequence : "
+
name
)
;
}
synCtx
.
pushFaultHandler
(
new
MediatorFaultHandler
(
errorHandlerMediator
)
)
;
}
else
{
synLog
.
auditWarn
(
"onError handler : "
+
errorHandler
+
" for sequence : "
+
name
+
" cannot be found"
)
;
}
}
boolean
result
=
super
.
mediate
(
synCtx
)
;
if
(
errorHandlerMediator
!=
null
)
{
Stack
faultStack
=
synCtx
.
getFaultStack
(
)
;
if
(
faultStack
!=
null
&&
!
faultStack
.
isEmpty
(
)
)
{
Object
o
=
faultStack
.
peek
(
)
;
if
(
o
instanceof
MediatorFaultHandler
&&
errorHandlerMediator
.
equals
(
(
(
MediatorFaultHandler
)
o
)
.
getFaultMediator
(
)
)
)
{
faultStack
.
pop
(
)
;
}
}
}
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
if
(
synLog
.
isTraceTraceEnabled
(
)
)
{
synLog
.
traceTrace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
synLog
.
traceOrDebug
(
"End : Sequence <"
+
(
name
==
null
?
"anonymous"
:
name
)
+
">"
)
;
}
return
result
;
}
finally
{
if
(
isStatisticsEnable
(
)
)
{
boolean
shouldReport
=
Boolean
.
parseBoolean
(
String
.
valueOf
(
synCtx
.
getProperty
(
SynapseConstants
.
OUT_ONLY
)
)
)
;
if
(
!
shouldReport
)
{
shouldReport
=
!
(
Boolean
.
parseBoolean
(
String
.
valueOf
(
synCtx
.
getProperty
(
SynapseConstants
.
SENDING_REQUEST
)
)
)
)
;
}
if
(
shouldReport
)
{
StatisticsReporter
.
reportForComponent
(
synCtx
,
getAspectConfiguration
(
)
,
ComponentType
.
SEQUENCE
)
;
}
}
}
}
else
{
String
sequenceKey
=
key
.
evaluateValue
(
synCtx
)
;
Mediator
m
=
synCtx
.
getSequence
(
sequenceKey
)
;
if
(
m
==
null
)
{
handleException
(
"Sequence named "
+
key
+
" cannot be found"
,
synCtx
)
;
}
else
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Executing with key "
+
key
)
;
}
boolean
result
=
m
.
mediate
(
synCtx
)
;
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"End : Sequence key=<"
+
key
+
">"
)
;
}
return
result
;
}
}
return
false
;
}
@
Override
public
synchronized
void
init
(
SynapseEnvironment
se
)
{
if
(
!
initialized
)
{
super
.
init
(
se
)
;
initialized
=
true
;
}
}
@
Override
public
synchronized
void
destroy
(
)
{
if
(
initialized
)
{
super
.
destroy
(
)
;
initialized
=
false
;
}
}
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
public
Value
getKey
(
)
{
return
key
;
}
public
void
setKey
(
Value
key
)
{
this
.
key
=
key
;
}
public
String
getErrorHandler
(
)
{
return
errorHandler
;
}
public
void
setErrorHandler
(
String
errorHandler
)
{
this
.
errorHandler
=
errorHandler
;
}
public
boolean
isDynamic
(
)
{
return
dynamic
;
}
public
void
setDynamic
(
boolean
dynamic
)
{
this
.
dynamic
=
dynamic
;
}
public
String
getRegistryKey
(
)
{
return
registryKey
;
}
public
void
setRegistryKey
(
String
registryKey
)
{
this
.
registryKey
=
registryKey
;
}
public
String
getAuditId
(
)
{
return
getName
(
)
;
}
public
String
getFileName
(
)
{
return
fileName
;
}
public
void
setFileName
(
String
fileName
)
{
this
.
fileName
=
fileName
;
}
public
boolean
isInitialized
(
)
{
return
initialized
;
}
@
Override
public
boolean
isContentAware
(
)
{
return
false
;
}
}
