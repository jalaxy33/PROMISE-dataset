package
org
.
apache
.
synapse
.
config
.
xml
;
import
org
.
apache
.
axiom
.
om
.
OMNamespace
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
javax
.
xml
.
namespace
.
QName
;
public
class
XMLConfigConstants
{
public
static
final
String
SYNAPSE_NAMESPACE
=
SynapseConstants
.
SYNAPSE_NAMESPACE
;
public
static
final
OMNamespace
SYNAPSE_OMNAMESPACE
=
SynapseConstants
.
SYNAPSE_OMNAMESPACE
;
public
static
final
String
SCOPE_DEFAULT
=
"default"
;
public
static
final
String
SCOPE_FUNC
=
"func"
;
public
static
final
String
SCOPE_AXIS2
=
"axis2"
;
public
static
final
String
SCOPE_CLIENT
=
"axis2-client"
;
public
static
final
String
SCOPE_TRANSPORT
=
"transport"
;
public
static
final
String
SCOPE_REGISTRY
=
"registry"
;
public
static
final
String
SCOPE_SYSTEM
=
"system"
;
public
static
final
String
HEADER_SCOPE_SOAP
=
"soap"
;
public
static
final
String
HEADER_SCOPE_TRANSPORT
=
"transport"
;
public
static
final
String
KEY
=
"key"
;
public
static
final
String
RECEIVE
=
"receive"
;
public
static
enum
DATA_TYPES
{
STRING
,
BOOLEAN
,
INTEGER
,
LONG
,
SHORT
,
FLOAT
,
DOUBLE
,
OM
}
public
static
final
String
SEQUENCE_VERSION_1_0
=
"1.0"
;
public
static
final
String
SEQUENCE_VERSION_1_1
=
"1.1"
;
public
static
final
QName
DEFINITIONS_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"definitions"
)
;
public
static
final
QName
DESCRIPTION_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"description"
)
;
public
static
final
QName
SEQUENCE_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"sequence"
)
;
public
static
final
QName
TEMPLATE_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"template"
)
;
public
static
final
QName
IMPORT_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"import"
)
;
public
static
final
QName
ENDPOINT_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"endpoint"
)
;
public
static
final
QName
ENTRY_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"localEntry"
)
;
public
static
final
QName
REGISTRY_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"registry"
)
;
public
static
final
QName
PROXY_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"proxy"
)
;
public
static
final
QName
EVENT_SOURCE_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"eventSource"
)
;
public
static
final
QName
MESSAGE_STORE_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"messageStore"
)
;
public
static
final
QName
MESSAGE_PROCESSOR_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"messageProcessor"
)
;
public
static
final
QName
API_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"api"
)
;
public
static
final
String
NULL_NAMESPACE
=
""
;
public
static
final
Object
QUARTZ_QNAME
=
new
QName
(
"http://www.opensymphony.com/quartz/JobSchedulingData"
,
"quartz"
)
;
public
static
final
QName
EXECUTOR_ELT
=
new
QName
(
SYNAPSE_NAMESPACE
,
"priorityExecutor"
)
;
public
static
final
String
TRACE_ATTRIB_NAME
=
"trace"
;
public
static
final
String
TRACE_ENABLE
=
"enable"
;
public
static
final
String
TRACE_DISABLE
=
"disable"
;
public
static
final
String
STATISTICS_ATTRIB_NAME
=
"statistics"
;
public
static
final
String
STATISTICS_ENABLE
=
"enable"
;
public
static
final
String
STATISTICS_DISABLE
=
"disable"
;
public
static
final
String
SUSPEND_ON_FAILURE
=
"suspendOnFailure"
;
public
static
final
String
SUSPEND_INITIAL_DURATION
=
"initialDuration"
;
public
static
final
String
SUSPEND_PROGRESSION_FACTOR
=
"progressionFactor"
;
public
static
final
String
SUSPEND_MAXIMUM_DURATION
=
"maximumDuration"
;
public
static
final
String
ERROR_CODES
=
"errorCodes"
;
public
static
final
String
MARK_FOR_SUSPENSION
=
"markForSuspension"
;
public
static
final
String
RETRIES_BEFORE_SUSPENSION
=
"retriesBeforeSuspension"
;
public
static
final
String
RETRY_DELAY
=
"retryDelay"
;
public
static
final
String
RETRY_CONFIG
=
"retryConfig"
;
public
static
final
String
LOADBALANCE_POLICY
=
"policy"
;
public
static
final
String
LOADBALANCE_ALGORITHM
=
"algorithm"
;
public
static
final
String
ALGORITHM_NAME
=
"policy"
;
public
static
final
String
ONREJECT
=
"onReject"
;
public
static
final
String
ONACCEPT
=
"onAccept"
;
public
static
final
QName
ATT_XPATH_RELATIVE
=
new
QName
(
"relative"
)
;
public
static
final
String
XPATH_BODY_RELATIVE
=
"body"
;
public
static
final
String
XPATH_ENVELOPE_RELATIVE
=
"envelope"
;
}
