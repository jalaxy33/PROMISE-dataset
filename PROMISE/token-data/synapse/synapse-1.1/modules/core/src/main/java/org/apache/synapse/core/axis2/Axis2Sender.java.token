package
org
.
apache
.
synapse
.
core
.
axis2
;
import
org
.
apache
.
axiom
.
util
.
UIDGenerator
;
import
org
.
apache
.
axis2
.
AxisFault
;
import
org
.
apache
.
axis2
.
Constants
;
import
org
.
apache
.
axis2
.
addressing
.
AddressingConstants
;
import
org
.
apache
.
axis2
.
addressing
.
AddressingHelper
;
import
org
.
apache
.
axis2
.
context
.
MessageContext
;
import
org
.
apache
.
axis2
.
engine
.
AxisEngine
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
aspects
.
statistics
.
StatisticsReporter
;
import
org
.
apache
.
synapse
.
endpoints
.
EndpointDefinition
;
import
org
.
apache
.
synapse
.
transport
.
nhttp
.
NhttpConstants
;
import
org
.
apache
.
synapse
.
util
.
MessageHelper
;
import
org
.
apache
.
synapse
.
util
.
POXUtils
;
public
class
Axis2Sender
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
Axis2Sender
.
class
)
;
public
static
void
sendOn
(
EndpointDefinition
endpoint
,
org
.
apache
.
synapse
.
MessageContext
synapseInMessageContext
)
{
try
{
Axis2FlexibleMEPClient
.
send
(
endpoint
,
synapseInMessageContext
)
;
if
(
synapseInMessageContext
.
isResponse
(
)
)
{
StatisticsReporter
.
reportForAllOnResponseSent
(
synapseInMessageContext
)
;
}
}
catch
(
Exception
e
)
{
handleException
(
"Unexpected error during sending message out"
,
e
)
;
}
}
public
static
void
sendBack
(
org
.
apache
.
synapse
.
MessageContext
smc
)
{
MessageContext
messageContext
=
(
(
Axis2MessageContext
)
smc
)
.
getAxis2MessageContext
(
)
;
if
(
messageContext
.
isPropertyTrue
(
NhttpConstants
.
SC_ACCEPTED
)
&&
messageContext
.
getTransportOut
(
)
!=
null
&&
!
messageContext
.
getTransportOut
(
)
.
getName
(
)
.
startsWith
(
Constants
.
TRANSPORT_HTTP
)
)
{
return
;
}
if
(
messageContext
.
isDoingREST
(
)
&&
messageContext
.
isFault
(
)
)
{
POXUtils
.
convertSOAPFaultToPOX
(
messageContext
)
;
}
try
{
messageContext
.
setProperty
(
SynapseConstants
.
ISRESPONSE_PROPERTY
,
Boolean
.
TRUE
)
;
if
(
AddressingHelper
.
isReplyRedirected
(
messageContext
)
&&
!
messageContext
.
getReplyTo
(
)
.
hasNoneAddress
(
)
)
{
messageContext
.
setTo
(
messageContext
.
getReplyTo
(
)
)
;
messageContext
.
setReplyTo
(
null
)
;
messageContext
.
setWSAAction
(
""
)
;
messageContext
.
setSoapAction
(
""
)
;
messageContext
.
setProperty
(
NhttpConstants
.
IGNORE_SC_ACCEPTED
,
Constants
.
VALUE_TRUE
)
;
messageContext
.
setProperty
(
AddressingConstants
.
DISABLE_ADDRESSING_FOR_OUT_MESSAGES
,
Boolean
.
FALSE
)
;
}
if
(
messageContext
.
getEnvelope
(
)
.
hasFault
(
)
&&
AddressingHelper
.
isFaultRedirected
(
messageContext
)
&&
!
messageContext
.
getFaultTo
(
)
.
hasNoneAddress
(
)
)
{
messageContext
.
setTo
(
messageContext
.
getFaultTo
(
)
)
;
messageContext
.
setFaultTo
(
null
)
;
messageContext
.
setWSAAction
(
""
)
;
messageContext
.
setSoapAction
(
""
)
;
messageContext
.
setProperty
(
NhttpConstants
.
IGNORE_SC_ACCEPTED
,
Constants
.
VALUE_TRUE
)
;
messageContext
.
setProperty
(
AddressingConstants
.
DISABLE_ADDRESSING_FOR_OUT_MESSAGES
,
Boolean
.
FALSE
)
;
}
String
preserveAddressingProperty
=
(
String
)
smc
.
getProperty
(
SynapseConstants
.
PRESERVE_WS_ADDRESSING
)
;
if
(
preserveAddressingProperty
!=
null
&&
Boolean
.
parseBoolean
(
preserveAddressingProperty
)
)
{
messageContext
.
setMessageID
(
smc
.
getMessageID
(
)
)
;
}
else
{
MessageHelper
.
removeAddressingHeaders
(
messageContext
)
;
messageContext
.
setMessageID
(
UIDGenerator
.
generateURNString
(
)
)
;
}
String
preserveHeaderProperty
=
(
String
)
smc
.
getProperty
(
SynapseConstants
.
PRESERVE_PROCESSED_HEADERS
)
;
if
(
preserveHeaderProperty
==
null
||
!
Boolean
.
parseBoolean
(
preserveHeaderProperty
)
)
{
MessageHelper
.
removeProcessedHeaders
(
messageContext
,
(
preserveAddressingProperty
!=
null
&&
Boolean
.
parseBoolean
(
preserveAddressingProperty
)
)
)
;
}
if
(
messageContext
.
isEngaged
(
SynapseConstants
.
SECURITY_MODULE_NAME
)
)
{
messageContext
.
getEnvelope
(
)
.
getOrCreateHeader
(
)
;
}
Axis2FlexibleMEPClient
.
clearSecurityProperties
(
messageContext
.
getOptions
(
)
)
;
StatisticsReporter
.
reportForAllOnResponseSent
(
smc
)
;
AxisEngine
.
send
(
messageContext
)
;
}
catch
(
AxisFault
e
)
{
handleException
(
"Unexpected error sending message back"
,
e
)
;
}
}
private
static
void
handleException
(
String
msg
,
Exception
e
)
{
log
.
error
(
msg
,
e
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
}
