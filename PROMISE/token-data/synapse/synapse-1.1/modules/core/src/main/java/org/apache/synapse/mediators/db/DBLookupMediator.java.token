package
org
.
apache
.
synapse
.
mediators
.
db
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseLog
;
import
java
.
sql
.
PreparedStatement
;
import
java
.
sql
.
ResultSet
;
import
java
.
sql
.
SQLException
;
import
java
.
sql
.
Connection
;
public
class
DBLookupMediator
extends
AbstractDBMediator
{
protected
void
processStatement
(
Statement
stmnt
,
MessageContext
msgCtx
)
{
SynapseLog
synLog
=
getLog
(
msgCtx
)
;
Connection
con
=
null
;
ResultSet
rs
=
null
;
try
{
con
=
this
.
getDataSource
(
)
.
getConnection
(
)
;
PreparedStatement
ps
=
getPreparedStatement
(
stmnt
,
con
,
msgCtx
)
;
rs
=
ps
.
executeQuery
(
)
;
if
(
rs
.
next
(
)
)
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Processing the first row returned : "
+
stmnt
.
getRawStatement
(
)
)
;
}
for
(
String
propName
:
stmnt
.
getResultsMap
(
)
.
keySet
(
)
)
{
String
columnStr
=
stmnt
.
getResultsMap
(
)
.
get
(
propName
)
;
Object
obj
;
try
{
int
colNum
=
Integer
.
parseInt
(
columnStr
)
;
obj
=
rs
.
getObject
(
colNum
)
;
}
catch
(
NumberFormatException
ignore
)
{
obj
=
rs
.
getObject
(
columnStr
)
;
}
if
(
obj
!=
null
)
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Column : "
+
columnStr
+
" returned value : "
+
obj
+
" Setting this as the message property : "
+
propName
)
;
}
msgCtx
.
setProperty
(
propName
,
obj
.
toString
(
)
)
;
}
else
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebugWarn
(
"Column : "
+
columnStr
+
" returned null Skip setting message property : "
+
propName
)
;
}
}
}
}
else
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Statement : "
+
stmnt
.
getRawStatement
(
)
+
" returned 0 rows"
)
;
}
}
}
catch
(
SQLException
e
)
{
handleException
(
"Error executing statement : "
+
stmnt
.
getRawStatement
(
)
+
" against DataSource : "
+
getDSName
(
)
,
e
,
msgCtx
)
;
}
finally
{
if
(
rs
!=
null
)
{
try
{
rs
.
close
(
)
;
}
catch
(
SQLException
ignore
)
{
}
}
if
(
con
!=
null
)
{
try
{
con
.
close
(
)
;
}
catch
(
SQLException
ignore
)
{
}
}
}
}
}
