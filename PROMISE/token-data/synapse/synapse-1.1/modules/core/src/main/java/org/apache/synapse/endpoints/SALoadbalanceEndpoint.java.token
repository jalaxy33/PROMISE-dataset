package
org
.
apache
.
synapse
.
endpoints
;
import
org
.
apache
.
axis2
.
context
.
ConfigurationContext
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
core
.
SynapseEnvironment
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2SynapseEnvironment
;
import
org
.
apache
.
synapse
.
endpoints
.
dispatch
.
Dispatcher
;
import
org
.
apache
.
synapse
.
endpoints
.
dispatch
.
HttpSessionDispatcher
;
import
org
.
apache
.
synapse
.
endpoints
.
dispatch
.
SALSessions
;
import
org
.
apache
.
synapse
.
endpoints
.
dispatch
.
SessionInformation
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorProperty
;
import
org
.
apache
.
synapse
.
transport
.
passthru
.
util
.
RelayUtils
;
import
javax
.
xml
.
stream
.
XMLStreamException
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
public
class
SALoadbalanceEndpoint
extends
LoadbalanceEndpoint
{
private
Dispatcher
dispatcher
=
null
;
private
long
sessionTimeout
=
-
1
;
public
void
init
(
SynapseEnvironment
synapseEnvironment
)
{
ConfigurationContext
cc
=
(
(
Axis2SynapseEnvironment
)
synapseEnvironment
)
.
getAxis2ConfigurationContext
(
)
;
if
(
!
initialized
)
{
super
.
init
(
synapseEnvironment
)
;
SALSessions
salSessions
=
SALSessions
.
getInstance
(
)
;
if
(
!
salSessions
.
isInitialized
(
)
)
{
salSessions
.
initialize
(
isClusteringEnabled
,
cc
)
;
}
if
(
isClusteringEnabled
&&
(
this
.
getParentEndpoint
(
)
==
null
||
!
(
this
.
getParentEndpoint
(
)
instanceof
SALoadbalanceEndpoint
)
)
)
{
SALSessions
.
getInstance
(
)
.
registerChildren
(
this
,
getChildren
(
)
)
;
}
}
}
public
void
send
(
MessageContext
synCtx
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Start : Session Affinity Load-balance Endpoint "
+
getName
(
)
)
;
}
SessionInformation
sessionInformation
=
(
SessionInformation
)
synCtx
.
getProperty
(
SynapseConstants
.
PROP_SAL_CURRENT_SESSION_INFORMATION
)
;
List
<
Endpoint
>
endpoints
=
(
List
<
Endpoint
>
)
synCtx
.
getProperty
(
SynapseConstants
.
PROP_SAL_ENDPOINT_CURRENT_ENDPOINT_LIST
)
;
if
(
!
(
dispatcher
instanceof
HttpSessionDispatcher
)
)
{
try
{
RelayUtils
.
buildMessage
(
(
(
Axis2MessageContext
)
synCtx
)
.
getAxis2MessageContext
(
)
,
false
)
;
}
catch
(
Exception
e
)
{
handleException
(
"Error while building message"
,
e
)
;
}
}
evaluateProperties
(
synCtx
)
;
if
(
sessionInformation
==
null
&&
endpoints
==
null
)
{
sessionInformation
=
dispatcher
.
getSession
(
synCtx
)
;
if
(
sessionInformation
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Current session id : "
+
sessionInformation
.
getId
(
)
)
;
}
endpoints
=
dispatcher
.
getEndpoints
(
sessionInformation
)
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Endpoint sequence (path) on current session : "
+
this
+
endpoints
)
;
}
synCtx
.
setProperty
(
SynapseConstants
.
PROP_SAL_ENDPOINT_CURRENT_ENDPOINT_LIST
,
endpoints
)
;
synCtx
.
setProperty
(
SynapseConstants
.
PROP_SAL_CURRENT_SESSION_INFORMATION
,
sessionInformation
)
;
}
}
if
(
sessionInformation
!=
null
&&
endpoints
!=
null
)
{
sendMessageOnCurrentSession
(
sessionInformation
.
getId
(
)
,
endpoints
,
synCtx
)
;
}
else
{
sendMessageOnNewSession
(
synCtx
)
;
}
}
public
Dispatcher
getDispatcher
(
)
{
return
dispatcher
;
}
public
void
setDispatcher
(
Dispatcher
dispatcher
)
{
this
.
dispatcher
=
dispatcher
;
}
public
void
onChildEndpointFail
(
Endpoint
endpoint
,
MessageContext
synCtx
)
{
logOnChildEndpointFail
(
endpoint
,
synCtx
)
;
Object
o
=
synCtx
.
getProperty
(
SynapseConstants
.
PROP_SAL_ENDPOINT_FIRST_MESSAGE_IN_SESSION
)
;
if
(
o
!=
null
&&
Boolean
.
TRUE
.
equals
(
o
)
&&
!
(
(
AbstractEndpoint
)
endpoint
)
.
isRetryDisabled
(
synCtx
)
)
{
dispatcher
.
unbind
(
synCtx
)
;
Object
epListObj
=
synCtx
.
getProperty
(
SynapseConstants
.
PROP_SAL_ENDPOINT_ENDPOINT_LIST
)
;
if
(
epListObj
instanceof
List
)
{
List
<
Endpoint
>
endpointList
=
(
List
<
Endpoint
>
)
epListObj
;
if
(
!
endpointList
.
isEmpty
(
)
)
{
if
(
endpointList
.
get
(
0
)
==
this
)
{
endpointList
.
clear
(
)
;
}
else
{
if
(
endpointList
.
contains
(
this
)
)
{
int
lastIndex
=
endpointList
.
indexOf
(
this
)
;
List
<
Endpoint
>
head
=
endpointList
.
subList
(
lastIndex
,
endpointList
.
size
(
)
)
;
head
.
clear
(
)
;
}
}
}
}
send
(
synCtx
)
;
}
else
{
informFailure
(
synCtx
,
SynapseConstants
.
ENDPOINT_SAL_FAILED_SESSION
,
"Failure an endpoint "
+
endpoint
+
"  in the current session"
)
;
}
}
private
void
sendMessageOnCurrentSession
(
String
sessionID
,
List
<
Endpoint
>
endpoints
,
MessageContext
synCtx
)
{
Endpoint
endpoint
=
null
;
boolean
invalidSequence
=
false
;
if
(
endpoints
.
isEmpty
(
)
)
{
invalidSequence
=
true
;
}
else
{
if
(
endpoints
.
contains
(
this
)
)
{
int
length
=
endpoints
.
size
(
)
;
if
(
length
>
1
)
{
int
beginIndex
=
endpoints
.
lastIndexOf
(
this
)
+
1
;
if
(
beginIndex
==
length
)
{
invalidSequence
=
true
;
}
else
{
endpoints
=
endpoints
.
subList
(
beginIndex
,
length
)
;
if
(
!
endpoints
.
isEmpty
(
)
)
{
endpoint
=
endpoints
.
remove
(
0
)
;
}
else
{
invalidSequence
=
true
;
}
}
}
else
{
invalidSequence
=
true
;
}
}
else
{
endpoint
=
endpoints
.
remove
(
0
)
;
}
}
if
(
invalidSequence
)
{
informFailure
(
synCtx
,
SynapseConstants
.
ENDPOINT_SAL_INVALID_PATH
,
"Invalid endpoint sequence "
+
endpoints
+
" for session with id "
+
sessionID
)
;
return
;
}
if
(
endpoint
!=
null
&&
endpoint
.
readyToSend
(
)
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Using the endpoint "
+
endpoint
+
" for sending the message"
)
;
}
synCtx
.
pushFaultHandler
(
this
)
;
endpoint
.
send
(
synCtx
)
;
}
else
{
informFailure
(
synCtx
,
SynapseConstants
.
ENDPOINT_SAL_NOT_READY
,
"The endpoint "
+
endpoint
+
" on the session with id "
+
sessionID
+
" is not ready."
)
;
}
}
private
void
sendMessageOnNewSession
(
MessageContext
synCtx
)
{
Endpoint
endpoint
=
getNextChild
(
synCtx
)
;
if
(
endpoint
==
null
)
{
informFailure
(
synCtx
,
SynapseConstants
.
ENDPOINT_LB_NONE_READY
,
"SLALoadbalance endpoint : "
+
getName
(
)
+
" - no ready child endpoints"
)
;
}
else
{
prepareEndPointSequence
(
synCtx
,
endpoint
)
;
synCtx
.
getEnvelope
(
)
.
build
(
)
;
synCtx
.
setProperty
(
SynapseConstants
.
PROP_SAL_ENDPOINT_FIRST_MESSAGE_IN_SESSION
,
Boolean
.
TRUE
)
;
synCtx
.
pushFaultHandler
(
this
)
;
endpoint
.
send
(
synCtx
)
;
}
}
private
void
prepareEndPointSequence
(
MessageContext
synCtx
,
Endpoint
endpoint
)
{
Object
o
=
synCtx
.
getProperty
(
SynapseConstants
.
PROP_SAL_ENDPOINT_ENDPOINT_LIST
)
;
List
<
Endpoint
>
endpointList
;
if
(
o
instanceof
List
)
{
endpointList
=
(
List
<
Endpoint
>
)
o
;
endpointList
.
add
(
this
)
;
}
else
{
endpointList
=
new
ArrayList
<
Endpoint
>
(
)
;
endpointList
.
add
(
this
)
;
synCtx
.
setProperty
(
SynapseConstants
.
PROP_SAL_ENDPOINT_ENDPOINT_LIST
,
endpointList
)
;
synCtx
.
setProperty
(
SynapseConstants
.
PROP_SAL_ENDPOINT_CURRENT_DISPATCHER
,
dispatcher
)
;
}
if
(
!
(
endpoint
instanceof
SALoadbalanceEndpoint
)
)
{
endpointList
.
add
(
endpoint
)
;
if
(
dispatcher
.
isServerInitiatedSession
(
)
)
{
dispatcher
.
removeSessionID
(
synCtx
)
;
}
}
}
public
long
getSessionTimeout
(
)
{
return
sessionTimeout
;
}
public
void
setSessionTimeout
(
long
sessionTimeout
)
{
this
.
sessionTimeout
=
sessionTimeout
;
}
}
