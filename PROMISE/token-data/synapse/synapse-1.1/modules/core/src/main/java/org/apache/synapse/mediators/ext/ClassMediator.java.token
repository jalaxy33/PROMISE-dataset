package
org
.
apache
.
synapse
.
mediators
.
ext
;
import
org
.
apache
.
synapse
.
ManagedLifecycle
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
SynapseLog
;
import
org
.
apache
.
synapse
.
core
.
SynapseEnvironment
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractMediator
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
ClassMediator
extends
AbstractMediator
implements
ManagedLifecycle
{
private
Mediator
mediator
=
null
;
private
final
Map
<
String
,
Object
>
properties
=
new
HashMap
<
String
,
Object
>
(
)
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
SynapseLog
synLog
=
getLog
(
synCtx
)
;
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Start : Class mediator"
)
;
if
(
synLog
.
isTraceTraceEnabled
(
)
)
{
synLog
.
traceTrace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"invoking : "
+
mediator
.
getClass
(
)
+
".mediate()"
)
;
}
boolean
result
;
try
{
result
=
mediator
.
mediate
(
synCtx
)
;
}
catch
(
Exception
e
)
{
throw
new
SynapseException
(
"Error occured in the mediation of the class mediator"
,
e
)
;
}
synLog
.
traceOrDebug
(
"End : Class mediator"
)
;
return
result
;
}
public
void
destroy
(
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Destroying class mediator instance for : "
+
mediator
.
getClass
(
)
)
;
}
if
(
mediator
instanceof
ManagedLifecycle
)
{
(
(
ManagedLifecycle
)
mediator
)
.
destroy
(
)
;
}
}
public
void
init
(
SynapseEnvironment
se
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Initializing class mediator instance for : "
+
mediator
.
getClass
(
)
)
;
}
if
(
mediator
==
null
)
{
log
.
warn
(
"init() called before mediator reference set"
)
;
return
;
}
if
(
mediator
instanceof
ManagedLifecycle
)
{
(
(
ManagedLifecycle
)
mediator
)
.
init
(
se
)
;
}
}
public
void
setMediator
(
Mediator
mediator
)
{
this
.
mediator
=
mediator
;
}
public
Mediator
getMediator
(
)
{
return
mediator
;
}
public
void
addProperty
(
String
name
,
Object
value
)
{
properties
.
put
(
name
,
value
)
;
}
public
Map
getProperties
(
)
{
return
this
.
properties
;
}
@
Override
public
boolean
isContentAware
(
)
{
return
mediator
.
isContentAware
(
)
;
}
}
