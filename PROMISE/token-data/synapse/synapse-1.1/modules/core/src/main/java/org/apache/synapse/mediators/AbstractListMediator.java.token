package
org
.
apache
.
synapse
.
mediators
;
import
org
.
apache
.
synapse
.
*
;
import
org
.
apache
.
synapse
.
core
.
SynapseEnvironment
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
transport
.
passthru
.
util
.
RelayUtils
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
abstract
class
AbstractListMediator
extends
AbstractMediator
implements
ListMediator
{
protected
final
List
<
Mediator
>
mediators
=
new
ArrayList
<
Mediator
>
(
)
;
private
boolean
contentAware
=
false
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
int
parentsEffectiveTraceState
=
synCtx
.
getTracingState
(
)
;
setEffectiveTraceState
(
synCtx
)
;
int
myEffectiveTraceState
=
synCtx
.
getTracingState
(
)
;
try
{
SynapseLog
synLog
=
getLog
(
synCtx
)
;
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Sequence <"
+
getType
(
)
+
"> :: mediate()"
)
;
}
if
(
contentAware
)
{
try
{
RelayUtils
.
buildMessage
(
(
(
Axis2MessageContext
)
synCtx
)
.
getAxis2MessageContext
(
)
,
false
)
;
}
catch
(
Exception
e
)
{
handleException
(
"Error while building message"
,
e
,
synCtx
)
;
}
}
for
(
Mediator
mediator
:
mediators
)
{
synCtx
.
setTracingState
(
myEffectiveTraceState
)
;
if
(
!
mediator
.
mediate
(
synCtx
)
)
{
return
false
;
}
}
}
catch
(
SynapseException
e
)
{
throw
e
;
}
catch
(
Exception
e
)
{
handleException
(
"Runtime error occurred while mediating the message"
,
e
,
synCtx
)
;
}
finally
{
synCtx
.
setTracingState
(
parentsEffectiveTraceState
)
;
}
return
true
;
}
public
List
<
Mediator
>
getList
(
)
{
return
mediators
;
}
public
boolean
addChild
(
Mediator
m
)
{
return
mediators
.
add
(
m
)
;
}
public
boolean
addAll
(
List
<
Mediator
>
c
)
{
return
mediators
.
addAll
(
c
)
;
}
public
Mediator
getChild
(
int
pos
)
{
return
mediators
.
get
(
pos
)
;
}
public
boolean
removeChild
(
Mediator
m
)
{
return
mediators
.
remove
(
m
)
;
}
public
Mediator
removeChild
(
int
pos
)
{
return
mediators
.
remove
(
pos
)
;
}
public
void
init
(
SynapseEnvironment
se
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Initializing child mediators of mediator : "
+
getType
(
)
)
;
}
for
(
Mediator
mediator
:
mediators
)
{
if
(
mediator
instanceof
ManagedLifecycle
)
{
(
(
ManagedLifecycle
)
mediator
)
.
init
(
se
)
;
}
if
(
mediator
.
isContentAware
(
)
)
{
contentAware
=
true
;
}
}
}
public
void
destroy
(
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Destroying child mediators of mediator : "
+
getType
(
)
)
;
}
for
(
Mediator
mediator
:
mediators
)
{
if
(
mediator
instanceof
ManagedLifecycle
)
{
(
(
ManagedLifecycle
)
mediator
)
.
destroy
(
)
;
}
}
}
@
Override
public
boolean
isContentAware
(
)
{
return
contentAware
;
}
}
