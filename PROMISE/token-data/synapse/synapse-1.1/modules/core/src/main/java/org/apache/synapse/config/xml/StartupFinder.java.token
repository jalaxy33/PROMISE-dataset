package
org
.
apache
.
synapse
.
config
.
xml
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Map
;
import
java
.
util
.
Properties
;
import
java
.
util
.
ServiceLoader
;
import
javax
.
xml
.
namespace
.
QName
;
import
org
.
apache
.
axiom
.
om
.
*
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
Startup
;
import
org
.
apache
.
synapse
.
config
.
XMLToObjectMapper
;
import
org
.
apache
.
synapse
.
startup
.
quartz
.
SimpleQuartzFactory
;
public
class
StartupFinder
implements
XMLToObjectMapper
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
ConfigurationFactoryAndSerializerFinder
.
class
)
;
private
final
static
StartupFinder
instance
=
new
StartupFinder
(
)
;
private
static
Map
<
QName
,
Class
<
?
extends
StartupFactory
>
>
factoryMap
=
new
HashMap
<
QName
,
Class
<
?
extends
StartupFactory
>
>
(
)
;
private
static
Map
<
QName
,
Class
<
?
extends
StartupSerializer
>
>
serializerMap
=
new
HashMap
<
QName
,
Class
<
?
extends
StartupSerializer
>
>
(
)
;
private
static
boolean
initialized
=
false
;
public
static
synchronized
StartupFinder
getInstance
(
)
{
if
(
!
initialized
)
{
loadStartups
(
)
;
}
return
instance
;
}
public
static
synchronized
void
reset
(
)
{
factoryMap
.
clear
(
)
;
serializerMap
.
clear
(
)
;
initialized
=
false
;
}
private
static
final
Class
<
?
>
[
]
builtins
=
{
SimpleQuartzFactory
.
class
}
;
private
StartupFinder
(
)
{
}
private
static
void
loadStartups
(
)
{
for
(
Class
<
?
>
builtin
:
builtins
)
{
if
(
builtin
!=
null
)
{
Class
<
?
extends
StartupFactory
>
b
=
builtin
.
asSubclass
(
StartupFactory
.
class
)
;
StartupFactory
sf
;
try
{
sf
=
b
.
newInstance
(
)
;
}
catch
(
Exception
e
)
{
throw
new
SynapseException
(
"cannot instantiate "
+
b
.
getName
(
)
,
e
)
;
}
factoryMap
.
put
(
sf
.
getTagQName
(
)
,
b
)
;
serializerMap
.
put
(
sf
.
getTagQName
(
)
,
sf
.
getSerializerClass
(
)
)
;
}
}
registerExtensions
(
)
;
initialized
=
true
;
}
private
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
private
static
void
registerExtensions
(
)
{
Iterator
<
StartupFactory
>
factories
=
ServiceLoader
.
load
(
StartupFactory
.
class
)
.
iterator
(
)
;
while
(
factories
.
hasNext
(
)
)
{
StartupFactory
factory
=
factories
.
next
(
)
;
QName
tag
=
factory
.
getTagQName
(
)
;
factoryMap
.
put
(
tag
,
factory
.
getClass
(
)
)
;
serializerMap
.
put
(
tag
,
factory
.
getSerializerClass
(
)
)
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Added StartupFactory "
+
factory
.
getClass
(
)
+
" to handle "
+
tag
)
;
}
}
}
public
boolean
isStartup
(
QName
name
)
{
return
factoryMap
.
containsKey
(
name
)
;
}
@
SuppressWarnings
(
{
"UnusedDeclaration"
}
)
public
Startup
getStartup
(
OMElement
element
,
Properties
properties
)
{
QName
qName
=
element
.
getQName
(
)
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Creating the Startup for : "
+
qName
)
;
}
Class
<
?
extends
StartupFactory
>
cls
=
factoryMap
.
get
(
qName
)
;
if
(
cls
==
null
)
{
String
msg
=
"Unknown Startup type referenced by startup element : "
+
qName
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
try
{
StartupFactory
sf
=
cls
.
newInstance
(
)
;
return
sf
.
createStartup
(
element
)
;
}
catch
(
InstantiationException
e
)
{
String
msg
=
"Error initializing configuration factory : "
+
cls
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
catch
(
IllegalAccessException
e
)
{
String
msg
=
"Error initializing configuration factory : "
+
cls
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
}
public
OMElement
serializeStartup
(
OMElement
parent
,
Startup
startup
)
{
Class
<
?
extends
StartupSerializer
>
cls
=
serializerMap
.
get
(
startup
.
getTagQName
(
)
)
;
if
(
cls
==
null
)
{
String
msg
=
"Unknown startup type referenced by startup element : "
+
startup
.
getTagQName
(
)
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
try
{
StartupSerializer
ss
=
cls
.
newInstance
(
)
;
return
ss
.
serializeStartup
(
parent
,
startup
)
;
}
catch
(
InstantiationException
e
)
{
String
msg
=
"Error initializing startup serializer: "
+
cls
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
catch
(
IllegalAccessException
e
)
{
String
msg
=
"Error initializing startup ser: "
+
cls
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
}
public
Map
<
QName
,
Class
<
?
extends
StartupFactory
>
>
getFactoryMap
(
)
{
return
factoryMap
;
}
public
Map
<
QName
,
Class
<
?
extends
StartupSerializer
>
>
getSerializerMap
(
)
{
return
serializerMap
;
}
public
Startup
getObjectFromOMNode
(
OMNode
om
,
Properties
properties
)
{
if
(
om
instanceof
OMElement
)
{
return
getStartup
(
(
OMElement
)
om
,
properties
)
;
}
else
{
handleException
(
"Invalid configuration XML : "
+
om
)
;
}
return
null
;
}
}
