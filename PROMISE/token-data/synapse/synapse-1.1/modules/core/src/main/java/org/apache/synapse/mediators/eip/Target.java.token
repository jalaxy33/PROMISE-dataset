package
org
.
apache
.
synapse
.
mediators
.
eip
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
org
.
apache
.
synapse
.
mediators
.
base
.
SequenceMediator
;
import
org
.
apache
.
axis2
.
addressing
.
EndpointReference
;
public
class
Target
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
Target
.
class
)
;
private
String
toAddress
=
null
;
private
String
soapAction
=
null
;
private
SequenceMediator
sequence
=
null
;
private
String
sequenceRef
=
null
;
private
Endpoint
endpoint
=
null
;
private
String
endpointRef
=
null
;
private
boolean
asynchronous
=
true
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
boolean
returnValue
=
true
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Target mediation : START"
)
;
}
if
(
soapAction
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Setting the SOAPAction as : "
+
soapAction
)
;
}
synCtx
.
setSoapAction
(
soapAction
)
;
}
if
(
toAddress
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Setting the To header as : "
+
toAddress
)
;
}
if
(
synCtx
.
getTo
(
)
!=
null
)
{
synCtx
.
getTo
(
)
.
setAddress
(
toAddress
)
;
}
else
{
synCtx
.
setTo
(
new
EndpointReference
(
toAddress
)
)
;
}
}
if
(
sequence
!=
null
)
{
if
(
asynchronous
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Asynchronously mediating using the in-lined anonymous sequence"
)
;
}
synCtx
.
getEnvironment
(
)
.
injectAsync
(
synCtx
,
sequence
)
;
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Synchronously mediating using the in-lined anonymous sequence"
)
;
}
returnValue
=
sequence
.
mediate
(
synCtx
)
;
}
}
else
if
(
sequenceRef
!=
null
)
{
SequenceMediator
refSequence
=
(
SequenceMediator
)
synCtx
.
getSequence
(
sequenceRef
)
;
if
(
refSequence
!=
null
)
{
if
(
asynchronous
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Asynchronously mediating using the sequence "
+
"named : "
+
sequenceRef
)
;
}
synCtx
.
getEnvironment
(
)
.
injectAsync
(
synCtx
,
refSequence
)
;
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Synchronously mediating using the sequence "
+
"named : "
+
sequenceRef
)
;
}
returnValue
=
refSequence
.
mediate
(
synCtx
)
;
}
}
else
{
handleException
(
"Couldn't find the sequence named : "
+
sequenceRef
)
;
}
}
else
if
(
endpoint
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Sending using the in-lined anonymous endpoint"
)
;
}
endpoint
.
send
(
synCtx
)
;
}
else
if
(
endpointRef
!=
null
)
{
Endpoint
epr
=
synCtx
.
getConfiguration
(
)
.
getEndpoint
(
endpointRef
)
;
if
(
epr
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Sending using the endpoint named : "
+
endpointRef
)
;
}
epr
.
send
(
synCtx
)
;
}
else
{
handleException
(
"Couldn't find the endpoint named : "
+
endpointRef
)
;
}
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Target mediation : END"
)
;
}
return
returnValue
;
}
private
void
handleException
(
String
message
)
{
log
.
error
(
message
)
;
throw
new
SynapseException
(
message
)
;
}
public
String
getToAddress
(
)
{
return
toAddress
;
}
public
void
setToAddress
(
String
toAddress
)
{
this
.
toAddress
=
toAddress
;
}
public
String
getSoapAction
(
)
{
return
soapAction
;
}
public
void
setSoapAction
(
String
soapAction
)
{
this
.
soapAction
=
soapAction
;
}
public
SequenceMediator
getSequence
(
)
{
return
sequence
;
}
public
void
setSequence
(
SequenceMediator
sequence
)
{
this
.
sequence
=
sequence
;
}
public
String
getSequenceRef
(
)
{
return
sequenceRef
;
}
public
void
setSequenceRef
(
String
sequenceRef
)
{
this
.
sequenceRef
=
sequenceRef
;
}
public
Endpoint
getEndpoint
(
)
{
return
endpoint
;
}
public
void
setEndpoint
(
Endpoint
endpoint
)
{
this
.
endpoint
=
endpoint
;
}
public
String
getEndpointRef
(
)
{
return
endpointRef
;
}
public
void
setEndpointRef
(
String
endpointRef
)
{
this
.
endpointRef
=
endpointRef
;
}
public
void
setAsynchronous
(
boolean
asynchronous
)
{
this
.
asynchronous
=
asynchronous
;
}
public
boolean
isAsynchronous
(
)
{
return
asynchronous
;
}
}
