package
org
.
apache
.
synapse
.
config
.
xml
;
import
org
.
apache
.
axiom
.
om
.
OMAttribute
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axis2
.
util
.
JavaUtils
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
mediators
.
eip
.
Target
;
import
org
.
apache
.
synapse
.
mediators
.
eip
.
splitter
.
CloneMediator
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Properties
;
public
class
CloneMediatorFactory
extends
AbstractMediatorFactory
{
private
static
final
QName
CLONE_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"clone"
)
;
private
static
final
QName
ATT_CONTINUE_PARENT
=
new
QName
(
"continueParent"
)
;
private
static
final
QName
TARGET_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"target"
)
;
private
static
final
QName
ID_Q
=
new
QName
(
XMLConfigConstants
.
NULL_NAMESPACE
,
"id"
)
;
private
static
final
QName
SEQUENTIAL_Q
=
new
QName
(
"sequential"
)
;
public
Mediator
createSpecificMediator
(
OMElement
elem
,
Properties
properties
)
{
boolean
asynchronousExe
=
true
;
CloneMediator
mediator
=
new
CloneMediator
(
)
;
processAuditStatus
(
mediator
,
elem
)
;
OMAttribute
id
=
elem
.
getAttribute
(
ID_Q
)
;
if
(
id
!=
null
)
{
mediator
.
setId
(
id
.
getAttributeValue
(
)
)
;
}
OMAttribute
continueParent
=
elem
.
getAttribute
(
ATT_CONTINUE_PARENT
)
;
if
(
continueParent
!=
null
)
{
mediator
.
setContinueParent
(
JavaUtils
.
isTrueExplicitly
(
continueParent
.
getAttributeValue
(
)
)
)
;
}
OMAttribute
synchronousExeAttr
=
elem
.
getAttribute
(
SEQUENTIAL_Q
)
;
if
(
synchronousExeAttr
!=
null
&&
synchronousExeAttr
.
getAttributeValue
(
)
.
equals
(
"true"
)
)
{
asynchronousExe
=
false
;
}
Iterator
targetElements
=
elem
.
getChildrenWithName
(
TARGET_Q
)
;
while
(
targetElements
.
hasNext
(
)
)
{
Target
target
=
TargetFactory
.
createTarget
(
(
OMElement
)
targetElements
.
next
(
)
,
properties
)
;
target
.
setAsynchronous
(
asynchronousExe
)
;
mediator
.
addTarget
(
target
)
;
}
mediator
.
setSequential
(
!
asynchronousExe
)
;
return
mediator
;
}
public
QName
getTagQName
(
)
{
return
CLONE_Q
;
}
}
