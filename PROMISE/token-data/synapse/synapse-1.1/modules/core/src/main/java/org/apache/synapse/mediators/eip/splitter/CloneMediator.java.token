package
org
.
apache
.
synapse
.
mediators
.
eip
.
splitter
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
ManagedLifecycle
;
import
org
.
apache
.
synapse
.
SynapseLog
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
core
.
SynapseEnvironment
;
import
org
.
apache
.
synapse
.
util
.
MessageHelper
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractMediator
;
import
org
.
apache
.
synapse
.
mediators
.
eip
.
Target
;
import
org
.
apache
.
synapse
.
mediators
.
eip
.
EIPConstants
;
import
org
.
apache
.
axis2
.
AxisFault
;
import
org
.
apache
.
axis2
.
Constants
;
import
org
.
apache
.
axis2
.
context
.
OperationContext
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
java
.
util
.
Iterator
;
public
class
CloneMediator
extends
AbstractMediator
implements
ManagedLifecycle
{
private
boolean
continueParent
=
false
;
private
List
<
Target
>
targets
=
new
ArrayList
<
Target
>
(
)
;
private
String
id
=
null
;
private
boolean
sequential
=
false
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
SynapseLog
synLog
=
getLog
(
synCtx
)
;
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Start : Clone mediator"
)
;
if
(
synLog
.
isTraceTraceEnabled
(
)
)
{
synLog
.
traceTrace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
Iterator
<
Target
>
iter
=
targets
.
iterator
(
)
;
int
i
=
0
;
while
(
iter
.
hasNext
(
)
)
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Submitting "
+
(
i
+
1
)
+
" of "
+
targets
.
size
(
)
+
" messages for processing in parallel"
)
;
}
iter
.
next
(
)
.
mediate
(
getClonedMessageContext
(
synCtx
,
i
++
,
targets
.
size
(
)
)
)
;
}
OperationContext
opCtx
=
(
(
Axis2MessageContext
)
synCtx
)
.
getAxis2MessageContext
(
)
.
getOperationContext
(
)
;
if
(
!
continueParent
&&
opCtx
!=
null
)
{
opCtx
.
setProperty
(
Constants
.
RESPONSE_WRITTEN
,
"SKIP"
)
;
}
synLog
.
traceOrDebug
(
"End : Clone mediator"
)
;
return
continueParent
;
}
private
MessageContext
getClonedMessageContext
(
MessageContext
synCtx
,
int
messageSequence
,
int
messageCount
)
{
MessageContext
newCtx
=
null
;
try
{
newCtx
=
MessageHelper
.
cloneMessageContext
(
synCtx
)
;
(
(
Axis2MessageContext
)
newCtx
)
.
getAxis2MessageContext
(
)
.
setServerSide
(
(
(
Axis2MessageContext
)
synCtx
)
.
getAxis2MessageContext
(
)
.
isServerSide
(
)
)
;
if
(
id
!=
null
)
{
newCtx
.
setProperty
(
EIPConstants
.
AGGREGATE_CORRELATION
+
"."
+
id
,
synCtx
.
getMessageID
(
)
)
;
newCtx
.
setProperty
(
EIPConstants
.
MESSAGE_SEQUENCE
+
"."
+
id
,
String
.
valueOf
(
messageSequence
)
+
EIPConstants
.
MESSAGE_SEQUENCE_DELEMITER
+
messageCount
)
;
}
else
{
newCtx
.
setProperty
(
EIPConstants
.
MESSAGE_SEQUENCE
,
String
.
valueOf
(
messageSequence
)
+
EIPConstants
.
MESSAGE_SEQUENCE_DELEMITER
+
messageCount
)
;
}
}
catch
(
AxisFault
axisFault
)
{
handleException
(
"Error cloning the message context"
,
axisFault
,
synCtx
)
;
}
return
newCtx
;
}
public
boolean
isContinueParent
(
)
{
return
continueParent
;
}
public
void
setContinueParent
(
boolean
continueParent
)
{
this
.
continueParent
=
continueParent
;
}
public
List
<
Target
>
getTargets
(
)
{
return
targets
;
}
public
void
setTargets
(
List
<
Target
>
targets
)
{
this
.
targets
=
targets
;
}
public
void
addTarget
(
Target
target
)
{
this
.
targets
.
add
(
target
)
;
}
public
String
getId
(
)
{
return
id
;
}
public
void
setId
(
String
id
)
{
this
.
id
=
id
;
}
public
boolean
isSequential
(
)
{
return
sequential
;
}
public
void
setSequential
(
boolean
sequential
)
{
this
.
sequential
=
sequential
;
}
public
void
init
(
SynapseEnvironment
se
)
{
for
(
Target
target
:
targets
)
{
ManagedLifecycle
seq
=
target
.
getSequence
(
)
;
if
(
seq
!=
null
)
{
seq
.
init
(
se
)
;
}
Endpoint
endpoint
=
target
.
getEndpoint
(
)
;
if
(
endpoint
!=
null
)
{
endpoint
.
init
(
se
)
;
}
}
}
public
void
destroy
(
)
{
for
(
Target
target
:
targets
)
{
ManagedLifecycle
seq
=
target
.
getSequence
(
)
;
if
(
seq
!=
null
)
{
seq
.
destroy
(
)
;
}
Endpoint
endpoint
=
target
.
getEndpoint
(
)
;
if
(
endpoint
!=
null
)
{
endpoint
.
destroy
(
)
;
}
}
}
}
