package
org
.
apache
.
synapse
.
config
.
xml
;
import
org
.
apache
.
axiom
.
om
.
OMAttribute
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
Nameable
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
aspects
.
AspectConfigurable
;
import
org
.
apache
.
synapse
.
aspects
.
AspectConfiguration
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
LinkedHashMap
;
import
java
.
util
.
Map
;
import
java
.
util
.
Properties
;
@
SuppressWarnings
(
{
"UnusedDeclaration"
}
)
public
abstract
class
AbstractMediatorFactory
implements
MediatorFactory
{
static
Log
log
;
protected
static
final
QName
ATT_NAME
=
new
QName
(
"name"
)
;
protected
static
final
QName
ATT_VALUE
=
new
QName
(
"value"
)
;
protected
static
final
QName
ATT_XPATH
=
new
QName
(
"xpath"
)
;
protected
static
final
QName
ATT_REGEX
=
new
QName
(
"regex"
)
;
protected
static
final
QName
ATT_SEQUENCE
=
new
QName
(
"sequence"
)
;
protected
static
final
QName
ATT_EXPRN
=
new
QName
(
"expression"
)
;
protected
static
final
QName
ATT_KEY
=
new
QName
(
"key"
)
;
protected
static
final
QName
ATT_SOURCE
=
new
QName
(
"source"
)
;
protected
static
final
QName
ATT_TARGET
=
new
QName
(
"target"
)
;
protected
static
final
QName
ATT_ONERROR
=
new
QName
(
"onError"
)
;
protected
static
final
QName
ATT_STATS
=
new
QName
(
XMLConfigConstants
.
STATISTICS_ATTRIB_NAME
)
;
protected
static
final
QName
PROP_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"property"
)
;
protected
static
final
QName
FEATURE_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"feature"
)
;
protected
static
final
QName
TARGET_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"target"
)
;
protected
static
final
QName
DESCRIPTION_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"description"
)
;
protected
AbstractMediatorFactory
(
)
{
log
=
LogFactory
.
getLog
(
this
.
getClass
(
)
)
;
}
public
final
Mediator
createMediator
(
OMElement
elem
,
Properties
properties
)
{
Mediator
mediator
=
createSpecificMediator
(
elem
,
properties
)
;
OMElement
descElem
=
elem
.
getFirstChildWithName
(
DESCRIPTION_Q
)
;
if
(
descElem
!=
null
)
{
mediator
.
setDescription
(
descElem
.
getText
(
)
)
;
}
return
mediator
;
}
protected
abstract
Mediator
createSpecificMediator
(
OMElement
elem
,
Properties
properties
)
;
@
Deprecated
protected
void
processTraceState
(
Mediator
mediator
,
OMElement
mediatorOmElement
)
{
processAuditStatus
(
mediator
,
mediatorOmElement
)
;
}
protected
void
processAuditStatus
(
Mediator
mediator
,
OMElement
mediatorOmElement
)
{
OMAttribute
trace
=
mediatorOmElement
.
getAttribute
(
new
QName
(
XMLConfigConstants
.
NULL_NAMESPACE
,
XMLConfigConstants
.
TRACE_ATTRIB_NAME
)
)
;
if
(
trace
!=
null
)
{
String
traceValue
=
trace
.
getAttributeValue
(
)
;
if
(
traceValue
!=
null
)
{
if
(
traceValue
.
equals
(
XMLConfigConstants
.
TRACE_ENABLE
)
)
{
mediator
.
setTraceState
(
org
.
apache
.
synapse
.
SynapseConstants
.
TRACING_ON
)
;
}
else
if
(
traceValue
.
equals
(
XMLConfigConstants
.
TRACE_DISABLE
)
)
{
mediator
.
setTraceState
(
org
.
apache
.
synapse
.
SynapseConstants
.
TRACING_OFF
)
;
}
}
}
String
name
=
null
;
if
(
mediator
instanceof
Nameable
)
{
name
=
(
(
Nameable
)
mediator
)
.
getName
(
)
;
}
if
(
name
==
null
||
""
.
equals
(
name
)
)
{
name
=
SynapseConstants
.
ANONYMOUS_SEQUENCE
;
}
if
(
mediator
instanceof
AspectConfigurable
)
{
AspectConfiguration
configuration
=
new
AspectConfiguration
(
name
)
;
(
(
AspectConfigurable
)
mediator
)
.
configure
(
configuration
)
;
OMAttribute
statistics
=
mediatorOmElement
.
getAttribute
(
ATT_STATS
)
;
if
(
statistics
!=
null
)
{
String
statisticsValue
=
statistics
.
getAttributeValue
(
)
;
if
(
statisticsValue
!=
null
)
{
if
(
XMLConfigConstants
.
STATISTICS_ENABLE
.
equals
(
statisticsValue
)
)
{
configuration
.
enableStatistics
(
)
;
}
}
}
}
}
protected
Map
<
String
,
String
>
collectNameValuePairs
(
OMElement
elem
,
QName
childElementName
)
{
Map
<
String
,
String
>
result
=
new
LinkedHashMap
<
String
,
String
>
(
)
;
for
(
Iterator
it
=
elem
.
getChildrenWithName
(
childElementName
)
;
it
.
hasNext
(
)
;
)
{
OMElement
child
=
(
OMElement
)
it
.
next
(
)
;
OMAttribute
attName
=
child
.
getAttribute
(
ATT_NAME
)
;
OMAttribute
attValue
=
child
.
getAttribute
(
ATT_VALUE
)
;
if
(
attName
!=
null
&&
attValue
!=
null
)
{
String
name
=
attName
.
getAttributeValue
(
)
.
trim
(
)
;
String
value
=
attValue
.
getAttributeValue
(
)
.
trim
(
)
;
if
(
result
.
containsKey
(
name
)
)
{
handleException
(
"Duplicate "
+
childElementName
.
getLocalPart
(
)
+
" with name "
+
name
)
;
}
else
{
result
.
put
(
name
,
value
)
;
}
}
else
{
handleException
(
"Both of the name and value attributes are required for a "
+
childElementName
.
getLocalPart
(
)
)
;
}
}
return
result
;
}
protected
void
handleException
(
String
message
,
Exception
e
)
{
LogFactory
.
getLog
(
this
.
getClass
(
)
)
.
error
(
message
,
e
)
;
throw
new
SynapseException
(
message
,
e
)
;
}
protected
void
handleException
(
String
message
)
{
LogFactory
.
getLog
(
this
.
getClass
(
)
)
.
error
(
message
)
;
throw
new
SynapseException
(
message
)
;
}
}
