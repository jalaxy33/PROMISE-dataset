package
org
.
apache
.
synapse
.
startup
.
tasks
;
import
org
.
apache
.
axiom
.
om
.
OMAbstractFactory
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
soap
.
SOAPEnvelope
;
import
org
.
apache
.
axis2
.
AxisFault
;
import
org
.
apache
.
axis2
.
Constants
;
import
org
.
apache
.
axis2
.
addressing
.
EndpointReference
;
import
org
.
apache
.
axis2
.
context
.
ConfigurationContext
;
import
org
.
apache
.
axis2
.
description
.
AxisService
;
import
org
.
apache
.
axis2
.
engine
.
AxisEngine
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
ManagedLifecycle
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
core
.
SynapseEnvironment
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2SynapseEnvironment
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorFaultHandler
;
import
org
.
apache
.
synapse
.
mediators
.
base
.
SequenceMediator
;
import
org
.
apache
.
synapse
.
task
.
Task
;
import
org
.
apache
.
synapse
.
util
.
PayloadHelper
;
import
org
.
apache
.
axiom
.
util
.
UIDGenerator
;
public
class
MessageInjector
implements
Task
,
ManagedLifecycle
{
private
Log
log
=
LogFactory
.
getLog
(
MessageInjector
.
class
)
;
private
OMElement
message
=
null
;
private
String
to
=
null
;
private
String
format
=
null
;
private
String
soapAction
=
null
;
private
SynapseEnvironment
synapseEnvironment
;
public
final
static
String
SOAP11_FORMAT
=
"soap11"
;
public
final
static
String
SOAP12_FORMAT
=
"soap12"
;
public
final
static
String
POX_FORMAT
=
"pox"
;
public
final
static
String
GET_FORMAT
=
"get"
;
private
final
static
String
INJECT_TO_PROXY
=
"proxy"
;
private
final
static
String
INJECT_TO_SEQUENCE
=
"sequence"
;
private
final
static
String
INJECT_TO_MAIN_SEQ
=
"main"
;
private
String
injectTo
=
INJECT_TO_MAIN_SEQ
;
private
String
sequenceName
=
null
;
private
String
proxyName
=
null
;
public
void
init
(
SynapseEnvironment
se
)
{
synapseEnvironment
=
se
;
}
public
void
setMessage
(
OMElement
elem
)
{
log
.
debug
(
"set message "
+
elem
.
toString
(
)
)
;
message
=
elem
;
}
public
void
setTo
(
String
url
)
{
to
=
url
;
}
public
void
setFormat
(
String
format
)
{
this
.
format
=
format
;
}
public
void
setSoapAction
(
String
soapAction
)
{
this
.
soapAction
=
soapAction
;
}
public
void
setInjectTo
(
String
injectTo
)
{
this
.
injectTo
=
injectTo
;
}
public
void
setSequenceName
(
String
sequenceName
)
{
this
.
sequenceName
=
sequenceName
;
}
public
void
setProxyName
(
String
proxyName
)
{
this
.
proxyName
=
proxyName
;
}
public
void
execute
(
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"execute"
)
;
}
if
(
synapseEnvironment
==
null
)
{
handleError
(
"Synapse Environment not set"
)
;
return
;
}
if
(
message
==
null
)
{
handleError
(
"message not set"
)
;
return
;
}
if
(
INJECT_TO_PROXY
.
equalsIgnoreCase
(
injectTo
)
)
{
if
(
proxyName
==
null
||
proxyName
.
equals
(
""
)
)
{
handleError
(
"Proxy service name not specified"
)
;
}
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MsgCtx
=
new
org
.
apache
.
axis2
.
context
.
MessageContext
(
)
;
ConfigurationContext
configurationContext
=
(
(
Axis2SynapseEnvironment
)
synapseEnvironment
)
.
getAxis2ConfigurationContext
(
)
;
axis2MsgCtx
.
setConfigurationContext
(
configurationContext
)
;
axis2MsgCtx
.
setIncomingTransportName
(
Constants
.
TRANSPORT_LOCAL
)
;
axis2MsgCtx
.
setServerSide
(
true
)
;
axis2MsgCtx
.
setMessageID
(
UIDGenerator
.
generateURNString
(
)
)
;
try
{
AxisService
axisService
=
configurationContext
.
getAxisConfiguration
(
)
.
getService
(
proxyName
)
;
if
(
axisService
==
null
)
{
handleError
(
"Proxy Service: "
+
proxyName
+
" not found"
)
;
}
axis2MsgCtx
.
setAxisService
(
axisService
)
;
}
catch
(
AxisFault
axisFault
)
{
handleError
(
"Error occurred while attempting to find the Proxy Service"
)
;
}
if
(
to
!=
null
)
{
axis2MsgCtx
.
setTo
(
new
EndpointReference
(
to
)
)
;
}
SOAPEnvelope
envelope
=
null
;
if
(
format
==
null
)
{
envelope
=
OMAbstractFactory
.
getSOAP12Factory
(
)
.
createSOAPEnvelope
(
)
;
}
else
if
(
SOAP11_FORMAT
.
equalsIgnoreCase
(
format
)
)
{
envelope
=
OMAbstractFactory
.
getSOAP11Factory
(
)
.
createSOAPEnvelope
(
)
;
}
else
if
(
SOAP12_FORMAT
.
equalsIgnoreCase
(
format
)
)
{
envelope
=
OMAbstractFactory
.
getSOAP12Factory
(
)
.
createSOAPEnvelope
(
)
;
}
else
if
(
POX_FORMAT
.
equalsIgnoreCase
(
format
)
)
{
envelope
=
OMAbstractFactory
.
getSOAP12Factory
(
)
.
createSOAPEnvelope
(
)
;
axis2MsgCtx
.
setDoingREST
(
true
)
;
}
else
if
(
GET_FORMAT
.
equalsIgnoreCase
(
format
)
)
{
envelope
=
OMAbstractFactory
.
getSOAP12Factory
(
)
.
createSOAPEnvelope
(
)
;
axis2MsgCtx
.
setDoingREST
(
true
)
;
axis2MsgCtx
.
setProperty
(
Constants
.
Configuration
.
HTTP_METHOD
,
Constants
.
Configuration
.
HTTP_METHOD_GET
)
;
}
else
{
handleError
(
"incorrect format specified"
)
;
}
try
{
PayloadHelper
.
setXMLPayload
(
envelope
,
message
.
cloneOMElement
(
)
)
;
axis2MsgCtx
.
setEnvelope
(
envelope
)
;
}
catch
(
AxisFault
axisFault
)
{
handleError
(
"Error in setting the message payload : "
+
message
)
;
}
if
(
soapAction
!=
null
)
{
axis2MsgCtx
.
setSoapAction
(
soapAction
)
;
}
try
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"injecting message to proxy service : "
+
proxyName
)
;
}
AxisEngine
.
receive
(
axis2MsgCtx
)
;
}
catch
(
AxisFault
axisFault
)
{
handleError
(
"Error occurred while invoking proxy service : "
+
proxyName
)
;
}
}
else
{
MessageContext
mc
=
synapseEnvironment
.
createMessageContext
(
)
;
mc
.
setMessageID
(
UIDGenerator
.
generateURNString
(
)
)
;
mc
.
pushFaultHandler
(
new
MediatorFaultHandler
(
mc
.
getFaultSequence
(
)
)
)
;
if
(
to
!=
null
)
{
mc
.
setTo
(
new
EndpointReference
(
to
)
)
;
}
if
(
format
==
null
)
{
PayloadHelper
.
setXMLPayload
(
mc
,
message
.
cloneOMElement
(
)
)
;
}
else
{
try
{
if
(
SOAP11_FORMAT
.
equalsIgnoreCase
(
format
)
)
{
mc
.
setEnvelope
(
OMAbstractFactory
.
getSOAP11Factory
(
)
.
createSOAPEnvelope
(
)
)
;
}
else
if
(
SOAP12_FORMAT
.
equalsIgnoreCase
(
format
)
)
{
mc
.
setEnvelope
(
OMAbstractFactory
.
getSOAP12Factory
(
)
.
createSOAPEnvelope
(
)
)
;
}
else
if
(
POX_FORMAT
.
equalsIgnoreCase
(
format
)
)
{
mc
.
setDoingPOX
(
true
)
;
}
else
if
(
GET_FORMAT
.
equalsIgnoreCase
(
format
)
)
{
mc
.
setDoingGET
(
true
)
;
}
PayloadHelper
.
setXMLPayload
(
mc
,
message
.
cloneOMElement
(
)
)
;
}
catch
(
AxisFault
axisFault
)
{
handleError
(
"Error in setting the message payload : "
+
message
)
;
}
}
if
(
soapAction
!=
null
)
{
mc
.
setSoapAction
(
soapAction
)
;
}
if
(
INJECT_TO_SEQUENCE
.
equalsIgnoreCase
(
injectTo
)
)
{
if
(
sequenceName
==
null
||
sequenceName
.
equals
(
""
)
)
{
handleError
(
"Sequence name not specified"
)
;
}
SequenceMediator
seq
=
(
SequenceMediator
)
synapseEnvironment
.
getSynapseConfiguration
(
)
.
getSequence
(
sequenceName
)
;
if
(
seq
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"injecting message to sequence : "
+
sequenceName
)
;
}
synapseEnvironment
.
injectAsync
(
mc
,
seq
)
;
}
else
{
handleError
(
"Sequence: "
+
sequenceName
+
" not found"
)
;
}
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"injecting message to main sequence"
)
;
}
synapseEnvironment
.
injectMessage
(
mc
)
;
}
}
}
public
void
destroy
(
)
{
}
private
void
handleError
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
}
