package
org
.
apache
.
synapse
.
config
.
xml
;
import
org
.
apache
.
axiom
.
om
.
OMAttribute
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
mediators
.
transform
.
XSLTMediator
;
import
org
.
apache
.
synapse
.
mediators
.
Value
;
import
org
.
jaxen
.
JaxenException
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
Map
;
import
java
.
util
.
Properties
;
public
class
XSLTMediatorFactory
extends
AbstractMediatorFactory
{
private
static
final
QName
TAG_NAME
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"xslt"
)
;
private
static
final
QName
ATTRIBUTE_Q
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"attribute"
)
;
public
QName
getTagQName
(
)
{
return
TAG_NAME
;
}
public
Mediator
createSpecificMediator
(
OMElement
elem
,
Properties
properties
)
{
XSLTMediator
transformMediator
=
new
XSLTMediator
(
)
;
OMAttribute
attXslt
=
elem
.
getAttribute
(
ATT_KEY
)
;
OMAttribute
attSource
=
elem
.
getAttribute
(
ATT_SOURCE
)
;
OMAttribute
attTarget
=
elem
.
getAttribute
(
ATT_TARGET
)
;
if
(
attXslt
!=
null
)
{
ValueFactory
keyFac
=
new
ValueFactory
(
)
;
Value
generatedKey
=
keyFac
.
createValue
(
XMLConfigConstants
.
KEY
,
elem
)
;
transformMediator
.
setXsltKey
(
generatedKey
)
;
}
else
{
handleException
(
"The '"
+
XMLConfigConstants
.
KEY
+
"' "
+
"attribute is required for the XSLT mediator"
)
;
}
if
(
attSource
!=
null
)
{
try
{
transformMediator
.
setSourceXPathString
(
attSource
.
getAttributeValue
(
)
)
;
transformMediator
.
setSource
(
SynapseXPathFactory
.
getSynapseXPath
(
elem
,
ATT_SOURCE
)
)
;
}
catch
(
JaxenException
e
)
{
handleException
(
"Invalid XPath specified for the source attribute : "
+
attSource
.
getAttributeValue
(
)
)
;
}
}
if
(
attTarget
!=
null
)
{
transformMediator
.
setTargetPropertyName
(
attTarget
.
getAttributeValue
(
)
)
;
}
processAuditStatus
(
transformMediator
,
elem
)
;
for
(
Map
.
Entry
<
String
,
String
>
entry
:
collectNameValuePairs
(
elem
,
FEATURE_Q
)
.
entrySet
(
)
)
{
String
value
=
entry
.
getValue
(
)
;
boolean
isFeatureEnabled
;
if
(
"true"
.
equals
(
value
)
)
{
isFeatureEnabled
=
true
;
}
else
if
(
"false"
.
equals
(
value
)
)
{
isFeatureEnabled
=
false
;
}
else
{
handleException
(
"The feature must have value true or false"
)
;
break
;
}
transformMediator
.
addFeature
(
entry
.
getKey
(
)
,
isFeatureEnabled
)
;
}
for
(
Map
.
Entry
<
String
,
String
>
entry
:
collectNameValuePairs
(
elem
,
ATTRIBUTE_Q
)
.
entrySet
(
)
)
{
transformMediator
.
addAttribute
(
entry
.
getKey
(
)
,
entry
.
getValue
(
)
)
;
}
transformMediator
.
addAllProperties
(
MediatorPropertyFactory
.
getMediatorProperties
(
elem
)
)
;
transformMediator
.
setResourceMap
(
ResourceMapFactory
.
createResourceMap
(
elem
)
)
;
return
transformMediator
;
}
}
