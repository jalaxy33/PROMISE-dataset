package
org
.
apache
.
synapse
.
config
.
xml
.
endpoints
;
import
org
.
apache
.
axiom
.
om
.
OMAttribute
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axis2
.
clustering
.
Member
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
config
.
xml
.
endpoints
.
utils
.
LoadbalanceAlgorithmFactory
;
import
org
.
apache
.
synapse
.
config
.
xml
.
XMLConfigConstants
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
LoadbalanceEndpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
algorithms
.
LoadbalanceAlgorithm
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Properties
;
public
final
class
LoadbalanceEndpointFactory
extends
EndpointFactory
{
private
static
LoadbalanceEndpointFactory
instance
=
new
LoadbalanceEndpointFactory
(
)
;
private
static
final
QName
MEMBER
=
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"member"
)
;
private
LoadbalanceEndpointFactory
(
)
{
}
public
static
LoadbalanceEndpointFactory
getInstance
(
)
{
return
instance
;
}
protected
Endpoint
createEndpoint
(
OMElement
epConfig
,
boolean
anonymousEndpoint
,
Properties
properties
)
{
OMElement
loadbalanceElement
=
epConfig
.
getFirstChildWithName
(
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"loadbalance"
)
)
;
if
(
loadbalanceElement
!=
null
)
{
LoadbalanceEndpoint
loadbalanceEndpoint
=
new
LoadbalanceEndpoint
(
)
;
OMAttribute
name
=
epConfig
.
getAttribute
(
new
QName
(
org
.
apache
.
synapse
.
config
.
xml
.
XMLConfigConstants
.
NULL_NAMESPACE
,
"name"
)
)
;
if
(
name
!=
null
)
{
loadbalanceEndpoint
.
setName
(
name
.
getAttributeValue
(
)
)
;
}
LoadbalanceAlgorithm
algorithm
=
null
;
if
(
loadbalanceElement
.
getFirstChildWithName
(
XMLConfigConstants
.
ENDPOINT_ELT
)
!=
null
)
{
if
(
loadbalanceElement
.
getChildrenWithName
(
(
MEMBER
)
)
.
hasNext
(
)
)
{
String
msg
=
"Invalid Synapse configuration. "
+
"child elements"
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
List
<
Endpoint
>
endpoints
=
getEndpoints
(
loadbalanceElement
,
loadbalanceEndpoint
,
properties
)
;
loadbalanceEndpoint
.
setChildren
(
endpoints
)
;
algorithm
=
LoadbalanceAlgorithmFactory
.
createLoadbalanceAlgorithm
(
loadbalanceElement
,
endpoints
)
;
algorithm
.
setLoadBalanceEndpoint
(
loadbalanceEndpoint
)
;
}
else
if
(
loadbalanceElement
.
getFirstChildWithName
(
MEMBER
)
!=
null
)
{
if
(
loadbalanceElement
.
getChildrenWithName
(
(
XMLConfigConstants
.
ENDPOINT_ELT
)
)
.
hasNext
(
)
)
{
String
msg
=
"Invalid Synapse configuration. "
+
"loadbalanceEndpoint element cannot have both member & endpoint "
+
"child elements"
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
List
<
Member
>
members
=
getMembers
(
loadbalanceElement
)
;
loadbalanceEndpoint
.
setMembers
(
members
)
;
algorithm
=
LoadbalanceAlgorithmFactory
.
createLoadbalanceAlgorithm2
(
loadbalanceElement
,
members
)
;
loadbalanceEndpoint
.
startApplicationMembershipTimer
(
)
;
}
if
(
loadbalanceEndpoint
.
getChildren
(
)
==
null
&&
loadbalanceEndpoint
.
getMembers
(
)
==
null
)
{
String
msg
=
"Invalid Synapse configuration.\n"
+
"A LoadbalanceEndpoint must have child elements, but the LoadbalanceEndpoint "
+
"'"
+
loadbalanceEndpoint
.
getName
(
)
+
"' does not have any child elements."
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
loadbalanceEndpoint
.
setAlgorithm
(
algorithm
)
;
String
failover
=
loadbalanceElement
.
getAttributeValue
(
new
QName
(
"failover"
)
)
;
if
(
failover
!=
null
&&
failover
.
equalsIgnoreCase
(
"false"
)
)
{
loadbalanceEndpoint
.
setFailover
(
false
)
;
}
processProperties
(
loadbalanceEndpoint
,
epConfig
)
;
return
loadbalanceEndpoint
;
}
return
null
;
}
private
List
<
Member
>
getMembers
(
OMElement
loadbalanceElement
)
{
List
<
Member
>
members
=
new
ArrayList
<
Member
>
(
)
;
for
(
Iterator
memberIter
=
loadbalanceElement
.
getChildrenWithName
(
MEMBER
)
;
memberIter
.
hasNext
(
)
;
)
{
OMElement
memberEle
=
(
OMElement
)
memberIter
.
next
(
)
;
Member
member
=
new
Member
(
memberEle
.
getAttributeValue
(
new
QName
(
"hostName"
)
)
,
-
1
)
;
String
http
=
memberEle
.
getAttributeValue
(
new
QName
(
"httpPort"
)
)
;
if
(
http
!=
null
)
{
member
.
setHttpPort
(
Integer
.
parseInt
(
http
)
)
;
}
String
https
=
memberEle
.
getAttributeValue
(
new
QName
(
"httpsPort"
)
)
;
if
(
https
!=
null
&&
https
.
trim
(
)
.
length
(
)
!=
0
)
{
member
.
setHttpsPort
(
Integer
.
parseInt
(
https
.
trim
(
)
)
)
;
}
members
.
add
(
member
)
;
}
return
members
;
}
}
