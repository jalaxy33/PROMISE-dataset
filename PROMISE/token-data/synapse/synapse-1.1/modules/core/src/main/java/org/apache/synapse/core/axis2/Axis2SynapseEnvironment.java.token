package
org
.
apache
.
synapse
.
core
.
axis2
;
import
org
.
apache
.
axiom
.
om
.
OMAbstractFactory
;
import
org
.
apache
.
axiom
.
util
.
UIDGenerator
;
import
org
.
apache
.
axiom
.
util
.
blob
.
OverflowBlob
;
import
org
.
apache
.
axis2
.
context
.
ConfigurationContext
;
import
org
.
apache
.
axis2
.
context
.
OperationContext
;
import
org
.
apache
.
axis2
.
context
.
ServiceContext
;
import
org
.
apache
.
axis2
.
description
.
InOutAxisOperation
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
ServerContextInformation
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
aspects
.
statistics
.
StatisticsCollector
;
import
org
.
apache
.
synapse
.
config
.
SynapseConfiguration
;
import
org
.
apache
.
synapse
.
core
.
SynapseEnvironment
;
import
org
.
apache
.
synapse
.
endpoints
.
EndpointDefinition
;
import
org
.
apache
.
synapse
.
endpoints
.
dispatch
.
Dispatcher
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorFaultHandler
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorWorker
;
import
org
.
apache
.
synapse
.
mediators
.
base
.
SequenceMediator
;
import
org
.
apache
.
synapse
.
rest
.
RESTRequestHandler
;
import
org
.
apache
.
synapse
.
task
.
SynapseTaskManager
;
import
org
.
apache
.
synapse
.
transport
.
passthru
.
util
.
RelayUtils
;
import
org
.
apache
.
synapse
.
util
.
concurrent
.
SynapseThreadPool
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
ext
.
SynapseXpathFunctionContextProvider
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
ext
.
SynapseXpathVariableResolver
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
import
java
.
util
.
concurrent
.
ExecutorService
;
public
class
Axis2SynapseEnvironment
implements
SynapseEnvironment
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
Axis2SynapseEnvironment
.
class
)
;
private
SynapseConfiguration
synapseConfig
;
private
ConfigurationContext
configContext
;
private
ExecutorService
executorService
;
private
boolean
initialized
=
false
;
private
SynapseTaskManager
taskManager
;
private
RESTRequestHandler
restHandler
;
private
StatisticsCollector
statisticsCollector
=
new
StatisticsCollector
(
)
;
private
ServerContextInformation
contextInformation
;
Map
<
QName
,
SynapseXpathFunctionContextProvider
>
xpathFunctionExtensions
=
new
HashMap
<
QName
,
SynapseXpathFunctionContextProvider
>
(
)
;
Map
<
QName
,
SynapseXpathVariableResolver
>
xpathVariableExtensions
=
new
HashMap
<
QName
,
SynapseXpathVariableResolver
>
(
)
;
public
Axis2SynapseEnvironment
(
SynapseConfiguration
synCfg
)
{
int
coreThreads
=
SynapseThreadPool
.
SYNAPSE_CORE_THREADS
;
int
maxThreads
=
SynapseThreadPool
.
SYNAPSE_MAX_THREADS
;
long
keepAlive
=
SynapseThreadPool
.
SYNAPSE_KEEP_ALIVE
;
int
qLength
=
SynapseThreadPool
.
SYNAPSE_THREAD_QLEN
;
try
{
qLength
=
Integer
.
parseInt
(
synCfg
.
getProperty
(
SynapseThreadPool
.
SYN_THREAD_QLEN
)
)
;
}
catch
(
Exception
ignore
)
{
}
try
{
coreThreads
=
Integer
.
parseInt
(
synCfg
.
getProperty
(
SynapseThreadPool
.
SYN_THREAD_CORE
)
)
;
}
catch
(
Exception
ignore
)
{
}
try
{
maxThreads
=
Integer
.
parseInt
(
synCfg
.
getProperty
(
SynapseThreadPool
.
SYN_THREAD_MAX
)
)
;
}
catch
(
Exception
ignore
)
{
}
try
{
keepAlive
=
Long
.
parseLong
(
synCfg
.
getProperty
(
SynapseThreadPool
.
SYN_THREAD_ALIVE
)
)
;
}
catch
(
Exception
ignore
)
{
}
this
.
executorService
=
new
SynapseThreadPool
(
coreThreads
,
maxThreads
,
keepAlive
,
qLength
,
synCfg
.
getProperty
(
SynapseThreadPool
.
SYN_THREAD_GROUP
,
SynapseThreadPool
.
SYNAPSE_THREAD_GROUP
)
,
synCfg
.
getProperty
(
SynapseThreadPool
.
SYN_THREAD_IDPREFIX
,
SynapseThreadPool
.
SYNAPSE_THREAD_ID_PREFIX
)
)
;
taskManager
=
new
SynapseTaskManager
(
)
;
restHandler
=
new
RESTRequestHandler
(
)
;
}
public
Axis2SynapseEnvironment
(
ConfigurationContext
cfgCtx
,
SynapseConfiguration
synapseConfig
)
{
this
(
synapseConfig
)
;
this
.
configContext
=
cfgCtx
;
this
.
synapseConfig
=
synapseConfig
;
}
public
Axis2SynapseEnvironment
(
ConfigurationContext
cfgCtx
,
SynapseConfiguration
synapseConfig
,
ServerContextInformation
contextInformation
)
{
this
(
cfgCtx
,
synapseConfig
)
;
this
.
contextInformation
=
contextInformation
;
}
public
boolean
injectMessage
(
final
MessageContext
synCtx
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Injecting MessageContext"
)
;
}
synCtx
.
setEnvironment
(
this
)
;
Mediator
mandatorySeq
=
synCtx
.
getConfiguration
(
)
.
getMandatorySequence
(
)
;
if
(
mandatorySeq
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Start mediating the message in the "
+
"pre-mediate state using the mandatory sequence"
)
;
}
if
(
!
mandatorySeq
.
mediate
(
synCtx
)
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
(
synCtx
.
isResponse
(
)
?
"Response"
:
"Request"
)
+
" message for the "
+
(
synCtx
.
getProperty
(
SynapseConstants
.
PROXY_SERVICE
)
!=
null
?
"proxy service "
+
synCtx
.
getProperty
(
SynapseConstants
.
PROXY_SERVICE
)
:
"message mediation"
)
+
" dropped in the "
+
"pre-mediation state by the mandatory sequence : \n"
+
synCtx
)
;
}
return
false
;
}
}
String
receivingSequence
=
(
String
)
synCtx
.
getProperty
(
SynapseConstants
.
RECEIVING_SEQUENCE
)
;
Set
keySet
=
synCtx
.
getPropertyKeySet
(
)
;
if
(
keySet
!=
null
)
{
keySet
.
remove
(
SynapseConstants
.
RECEIVING_SEQUENCE
)
;
}
String
proxyName
=
(
String
)
synCtx
.
getProperty
(
SynapseConstants
.
PROXY_SERVICE
)
;
if
(
proxyName
==
null
||
""
.
equals
(
proxyName
)
)
{
synCtx
.
pushFaultHandler
(
new
MediatorFaultHandler
(
synCtx
.
getFaultSequence
(
)
)
)
;
if
(
receivingSequence
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Using Sequence with name: "
+
receivingSequence
+
" for injected message"
)
;
}
Mediator
seqMediator
=
synCtx
.
getSequence
(
receivingSequence
)
;
if
(
seqMediator
!=
null
)
{
return
seqMediator
.
mediate
(
synCtx
)
;
}
else
{
log
.
warn
(
"Cannot find a Sequence with name: "
+
receivingSequence
+
" for injecting the response message"
)
;
return
false
;
}
}
else
{
boolean
processed
=
restHandler
.
process
(
synCtx
)
;
if
(
processed
)
{
return
true
;
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Using Main Sequence for injected message"
)
;
}
return
synCtx
.
getMainSequence
(
)
.
mediate
(
synCtx
)
;
}
}
ProxyService
proxyService
=
synCtx
.
getConfiguration
(
)
.
getProxyService
(
proxyName
)
;
if
(
proxyService
!=
null
)
{
if
(
proxyService
.
getTargetFaultSequence
(
)
!=
null
)
{
Mediator
faultSequence
=
synCtx
.
getSequence
(
proxyService
.
getTargetFaultSequence
(
)
)
;
if
(
faultSequence
!=
null
)
{
synCtx
.
pushFaultHandler
(
new
MediatorFaultHandler
(
faultSequence
)
)
;
}
else
{
log
.
warn
(
"Cloud not find any fault-sequence named :"
+
proxyService
.
getTargetFaultSequence
(
)
+
"; Setting the default"
+
" fault sequence for out path"
)
;
synCtx
.
pushFaultHandler
(
new
MediatorFaultHandler
(
synCtx
.
getFaultSequence
(
)
)
)
;
}
}
else
if
(
proxyService
.
getTargetInLineFaultSequence
(
)
!=
null
)
{
synCtx
.
pushFaultHandler
(
new
MediatorFaultHandler
(
proxyService
.
getTargetInLineFaultSequence
(
)
)
)
;
}
else
{
synCtx
.
pushFaultHandler
(
new
MediatorFaultHandler
(
synCtx
.
getFaultSequence
(
)
)
)
;
}
Mediator
outSequence
=
getProxyOutSequence
(
synCtx
,
proxyService
)
;
if
(
receivingSequence
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Using Sequence with name: "
+
receivingSequence
+
" for injected message"
)
;
}
Mediator
seqMediator
=
synCtx
.
getSequence
(
receivingSequence
)
;
if
(
seqMediator
!=
null
)
{
seqMediator
.
mediate
(
synCtx
)
;
}
else
{
log
.
warn
(
"Cannot find a Sequence with name: "
+
receivingSequence
+
" for injecting the message"
)
;
return
false
;
}
}
else
if
(
outSequence
!=
null
)
{
outSequence
.
mediate
(
synCtx
)
;
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
proxyService
+
" does not specifies an out-sequence - sending the response back"
)
;
}
Axis2Sender
.
sendBack
(
synCtx
)
;
}
}
return
true
;
}
public
void
injectAsync
(
final
MessageContext
synCtx
,
SequenceMediator
seq
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Injecting MessageContext for asynchronous mediation using the : "
+
(
seq
.
getName
(
)
==
null
?
"Anonymous"
:
seq
.
getName
(
)
)
+
" Sequence"
)
;
}
synCtx
.
setEnvironment
(
this
)
;
executorService
.
execute
(
new
MediatorWorker
(
seq
,
synCtx
)
)
;
}
public
void
send
(
EndpointDefinition
endpoint
,
MessageContext
synCtx
)
{
if
(
synCtx
.
isResponse
(
)
)
{
if
(
endpoint
!=
null
)
{
if
(
isTransportSwitching
(
synCtx
,
endpoint
)
)
{
buildMessage
(
synCtx
)
;
}
Axis2Sender
.
sendOn
(
endpoint
,
synCtx
)
;
}
else
{
String
proxyName
=
(
String
)
synCtx
.
getProperty
(
SynapseConstants
.
PROXY_SERVICE
)
;
if
(
proxyName
!=
null
)
{
ProxyService
proxyService
=
synapseConfig
.
getProxyService
(
proxyName
)
;
if
(
proxyService
.
isModuleEngaged
(
)
)
{
buildMessage
(
synCtx
)
;
}
}
Axis2Sender
.
sendBack
(
synCtx
)
;
}
}
else
{
Dispatcher
dispatcher
=
(
Dispatcher
)
synCtx
.
getProperty
(
SynapseConstants
.
PROP_SAL_ENDPOINT_CURRENT_DISPATCHER
)
;
if
(
dispatcher
!=
null
)
{
if
(
!
dispatcher
.
isServerInitiatedSession
(
)
)
{
dispatcher
.
updateSession
(
synCtx
)
;
}
}
synCtx
.
setProperty
(
SynapseConstants
.
SENDING_REQUEST
,
true
)
;
if
(
endpoint
==
null
||
isTransportSwitching
(
synCtx
,
endpoint
)
)
{
buildMessage
(
synCtx
)
;
}
Axis2Sender
.
sendOn
(
endpoint
,
synCtx
)
;
}
}
private
boolean
isTransportSwitching
(
MessageContext
synCtx
,
EndpointDefinition
endpoint
)
{
if
(
endpoint
.
getAddress
(
)
!=
null
)
{
return
!
endpoint
.
getAddress
(
)
.
startsWith
(
"http"
)
;
}
else
{
String
address
=
synCtx
.
getTo
(
)
.
getAddress
(
)
;
if
(
address
!=
null
)
{
return
!
address
.
startsWith
(
"http"
)
;
}
}
return
false
;
}
private
void
buildMessage
(
MessageContext
synCtx
)
{
try
{
RelayUtils
.
buildMessage
(
(
(
Axis2MessageContext
)
synCtx
)
.
getAxis2MessageContext
(
)
,
false
)
;
}
catch
(
Exception
e
)
{
handleException
(
"Error while building message"
,
e
)
;
}
}
public
MessageContext
createMessageContext
(
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Creating Message Context"
)
;
}
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MC
=
new
org
.
apache
.
axis2
.
context
.
MessageContext
(
)
;
axis2MC
.
setConfigurationContext
(
this
.
configContext
)
;
ServiceContext
svcCtx
=
new
ServiceContext
(
)
;
OperationContext
opCtx
=
new
OperationContext
(
new
InOutAxisOperation
(
)
,
svcCtx
)
;
axis2MC
.
setServiceContext
(
svcCtx
)
;
axis2MC
.
setOperationContext
(
opCtx
)
;
MessageContext
mc
=
new
Axis2MessageContext
(
axis2MC
,
synapseConfig
,
this
)
;
mc
.
setMessageID
(
UIDGenerator
.
generateURNString
(
)
)
;
try
{
mc
.
setEnvelope
(
OMAbstractFactory
.
getSOAP12Factory
(
)
.
createSOAPEnvelope
(
)
)
;
mc
.
getEnvelope
(
)
.
addChild
(
OMAbstractFactory
.
getSOAP12Factory
(
)
.
createSOAPBody
(
)
)
;
}
catch
(
Exception
e
)
{
handleException
(
"Unable to attach the SOAP envelope to "
+
"the created new message context"
,
e
)
;
}
return
mc
;
}
public
OverflowBlob
createOverflowBlob
(
)
{
String
chkSize
=
synapseConfig
.
getProperty
(
SynapseConstants
.
CHUNK_SIZE
)
;
String
chunkNumber
=
synapseConfig
.
getProperty
(
SynapseConstants
.
THRESHOLD_CHUNKS
)
;
int
numberOfChunks
=
SynapseConstants
.
DEFAULT_THRESHOLD_CHUNKS
;
int
chunkSize
=
SynapseConstants
.
DEFAULT_CHUNK_SIZE
;
if
(
chkSize
!=
null
)
{
chunkSize
=
Integer
.
parseInt
(
chkSize
)
;
}
if
(
chunkNumber
!=
null
)
{
numberOfChunks
=
Integer
.
parseInt
(
chunkNumber
)
;
}
String
tempPrefix
=
synapseConfig
.
getProperty
(
SynapseConstants
.
TEMP_FILE_PREFIX
,
SynapseConstants
.
DEFAULT_TEMPFILE_PREFIX
)
;
String
tempSuffix
=
synapseConfig
.
getProperty
(
SynapseConstants
.
TEMP_FILE_SUFIX
,
SynapseConstants
.
DEFAULT_TEMPFILE_SUFIX
)
;
return
new
OverflowBlob
(
numberOfChunks
,
chunkSize
,
tempPrefix
,
tempSuffix
)
;
}
public
StatisticsCollector
getStatisticsCollector
(
)
{
return
statisticsCollector
;
}
@
Deprecated
public
void
setStatisticsCollector
(
StatisticsCollector
collector
)
{
this
.
statisticsCollector
=
collector
;
}
public
ExecutorService
getExecutorService
(
)
{
return
executorService
;
}
public
boolean
isInitialized
(
)
{
return
initialized
;
}
public
void
setInitialized
(
boolean
state
)
{
this
.
initialized
=
state
;
}
public
SynapseConfiguration
getSynapseConfiguration
(
)
{
return
this
.
synapseConfig
;
}
public
SynapseTaskManager
getTaskManager
(
)
{
return
this
.
taskManager
;
}
public
ServerContextInformation
getServerContextInformation
(
)
{
return
contextInformation
;
}
public
ConfigurationContext
getAxis2ConfigurationContext
(
)
{
return
this
.
configContext
;
}
public
Map
<
QName
,
SynapseXpathFunctionContextProvider
>
getXpathFunctionExtensions
(
)
{
return
xpathFunctionExtensions
;
}
public
Map
<
QName
,
SynapseXpathVariableResolver
>
getXpathVariableExtensions
(
)
{
return
xpathVariableExtensions
;
}
public
void
setXpathFunctionExtensions
(
SynapseXpathFunctionContextProvider
functionExt
)
{
if
(
functionExt
!=
null
)
{
xpathFunctionExtensions
.
put
(
functionExt
.
getResolvingQName
(
)
,
functionExt
)
;
}
}
public
void
setXpathVariableExtensions
(
SynapseXpathVariableResolver
variableExt
)
{
if
(
variableExt
!=
null
)
{
xpathVariableExtensions
.
put
(
variableExt
.
getResolvingQName
(
)
,
variableExt
)
;
}
}
private
void
handleException
(
String
message
,
Throwable
e
)
{
log
.
error
(
message
,
e
)
;
throw
new
SynapseException
(
message
,
e
)
;
}
private
Mediator
getProxyOutSequence
(
MessageContext
synCtx
,
ProxyService
proxyService
)
{
String
sequenceName
=
proxyService
.
getTargetOutSequence
(
)
;
if
(
sequenceName
!=
null
&&
!
""
.
equals
(
sequenceName
)
)
{
Mediator
outSequence
=
synCtx
.
getSequence
(
sequenceName
)
;
if
(
outSequence
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Using the sequence named "
+
sequenceName
+
" for the outgoing message mediation of the proxy service "
+
proxyService
)
;
}
return
outSequence
;
}
else
{
log
.
error
(
"Unable to find the out-sequence "
+
"specified by the name "
+
sequenceName
)
;
throw
new
SynapseException
(
"Unable to find the "
+
"out-sequence specified by the name "
+
sequenceName
)
;
}
}
else
{
Mediator
outSequence
=
proxyService
.
getTargetInLineOutSequence
(
)
;
if
(
outSequence
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Using the anonymous out-sequence specified in the proxy service "
+
proxyService
+
" for outgoing message mediation"
)
;
}
return
outSequence
;
}
}
return
null
;
}
}
