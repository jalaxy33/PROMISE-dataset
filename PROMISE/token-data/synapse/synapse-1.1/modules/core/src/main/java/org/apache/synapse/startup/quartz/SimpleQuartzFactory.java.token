package
org
.
apache
.
synapse
.
startup
.
quartz
;
import
javax
.
xml
.
namespace
.
QName
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
config
.
xml
.
XMLConfigConstants
;
import
org
.
apache
.
synapse
.
config
.
xml
.
StartupFactory
;
import
org
.
apache
.
synapse
.
Startup
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
task
.
TaskDescription
;
import
org
.
apache
.
synapse
.
task
.
TaskDescriptionFactory
;
public
class
SimpleQuartzFactory
implements
StartupFactory
{
public
final
static
QName
TASK
=
new
QName
(
XMLConfigConstants
.
SYNAPSE_NAMESPACE
,
"task"
)
;
private
final
static
Log
log
=
LogFactory
.
getLog
(
SimpleQuartzFactory
.
class
)
;
public
Startup
createStartup
(
OMElement
el
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Creating SimpleQuartz Task"
)
;
}
if
(
el
.
getQName
(
)
.
equals
(
TASK
)
)
{
SimpleQuartz
simpleQuartz
=
new
SimpleQuartz
(
)
;
TaskDescription
taskDescription
=
TaskDescriptionFactory
.
createTaskDescription
(
el
,
XMLConfigConstants
.
SYNAPSE_OMNAMESPACE
)
;
if
(
taskDescription
==
null
)
{
handleException
(
"Invalid task - Task description can not be created  from :"
+
el
)
;
return
null
;
}
simpleQuartz
.
setName
(
taskDescription
.
getName
(
)
)
;
simpleQuartz
.
setTaskDescription
(
taskDescription
)
;
simpleQuartz
.
setDescription
(
taskDescription
.
getDescription
(
)
)
;
return
simpleQuartz
;
}
else
{
handleException
(
"Syntax error in the task : wrong QName for the task"
)
;
return
null
;
}
}
public
Class
<
SimpleQuartzSerializer
>
getSerializerClass
(
)
{
return
SimpleQuartzSerializer
.
class
;
}
public
QName
getTagQName
(
)
{
return
TASK
;
}
private
void
handleException
(
String
message
)
{
log
.
error
(
message
)
;
throw
new
SynapseException
(
message
)
;
}
}
