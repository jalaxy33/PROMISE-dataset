package
org
.
apache
.
synapse
.
config
.
xml
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
mediators
.
builtin
.
PropertyMediator
;
public
class
PropertyMediatorSerializer
extends
AbstractMediatorSerializer
{
public
OMElement
serializeSpecificMediator
(
Mediator
m
)
{
if
(
!
(
m
instanceof
PropertyMediator
)
)
{
handleException
(
"Unsupported mediator passed in for serialization : "
+
m
.
getType
(
)
)
;
}
PropertyMediator
mediator
=
(
PropertyMediator
)
m
;
OMElement
property
=
fac
.
createOMElement
(
"property"
,
synNS
)
;
saveTracingState
(
property
,
mediator
)
;
if
(
mediator
.
getName
(
)
!=
null
)
{
property
.
addAttribute
(
fac
.
createOMAttribute
(
"name"
,
nullNS
,
mediator
.
getName
(
)
)
)
;
}
else
{
handleException
(
"Invalid property mediator. Name is required"
)
;
}
if
(
mediator
.
getValue
(
)
!=
null
)
{
property
.
addAttribute
(
fac
.
createOMAttribute
(
"value"
,
nullNS
,
mediator
.
getValue
(
)
.
toString
(
)
)
)
;
}
else
if
(
mediator
.
getValueElement
(
)
!=
null
)
{
property
.
addChild
(
mediator
.
getValueElement
(
)
)
;
}
else
if
(
mediator
.
getExpression
(
)
!=
null
)
{
SynapseXPathSerializer
.
serializeXPath
(
mediator
.
getExpression
(
)
,
property
,
"expression"
)
;
}
else
if
(
mediator
.
getAction
(
)
==
PropertyMediator
.
ACTION_SET
)
{
handleException
(
"Invalid property mediator. Value or expression is required if "
+
"action is SET"
)
;
}
if
(
mediator
.
getScope
(
)
!=
null
)
{
property
.
addAttribute
(
fac
.
createOMAttribute
(
"scope"
,
nullNS
,
mediator
.
getScope
(
)
)
)
;
}
if
(
mediator
.
getAction
(
)
==
PropertyMediator
.
ACTION_REMOVE
)
{
property
.
addAttribute
(
fac
.
createOMAttribute
(
"action"
,
nullNS
,
"remove"
)
)
;
}
else
if
(
mediator
.
getType
(
)
!=
null
)
{
property
.
addAttribute
(
fac
.
createOMAttribute
(
"type"
,
nullNS
,
mediator
.
getType
(
)
)
)
;
}
if
(
mediator
.
getPattern
(
)
!=
null
)
{
property
.
addAttribute
(
fac
.
createOMAttribute
(
"pattern"
,
nullNS
,
mediator
.
getPattern
(
)
.
toString
(
)
)
)
;
if
(
mediator
.
getGroup
(
)
>=
0
)
{
property
.
addAttribute
(
fac
.
createOMAttribute
(
"group"
,
nullNS
,
Integer
.
toString
(
mediator
.
getGroup
(
)
)
)
)
;
}
}
return
property
;
}
public
String
getMediatorClassName
(
)
{
return
PropertyMediator
.
class
.
getName
(
)
;
}
}
