package
org
.
apache
.
synapse
.
mediators
.
transform
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
soap
.
SOAPEnvelope
;
import
org
.
apache
.
axiom
.
soap
.
SOAPFactory
;
import
org
.
apache
.
axiom
.
soap
.
SOAPHeader
;
import
org
.
apache
.
axiom
.
soap
.
SOAPHeaderBlock
;
import
org
.
apache
.
axis2
.
addressing
.
EndpointReference
;
import
org
.
apache
.
axis2
.
addressing
.
RelatesTo
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseLog
;
import
org
.
apache
.
synapse
.
config
.
xml
.
XMLConfigConstants
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractMediator
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
SynapseXPath
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
class
HeaderMediator
extends
AbstractMediator
{
public
static
final
int
ACTION_SET
=
0
;
public
static
final
int
ACTION_REMOVE
=
1
;
private
QName
qName
=
null
;
private
String
value
=
null
;
private
int
action
=
ACTION_SET
;
private
List
<
OMElement
>
embeddedXmlContent
=
new
ArrayList
<
OMElement
>
(
)
;
private
SynapseXPath
expression
=
null
;
private
String
scope
=
null
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
SynapseLog
synLog
=
getLog
(
synCtx
)
;
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Start : Header mediator"
)
;
if
(
synLog
.
isTraceTraceEnabled
(
)
)
{
synLog
.
traceTrace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
if
(
XMLConfigConstants
.
HEADER_SCOPE_TRANSPORT
.
equals
(
scope
)
)
{
alterTransportHeader
(
synCtx
)
;
}
else
{
alterSOAPOrKnownHeader
(
synCtx
)
;
}
synLog
.
traceOrDebug
(
"End : Header mediator"
)
;
return
true
;
}
private
void
alterSOAPOrKnownHeader
(
MessageContext
synCtx
)
{
SynapseLog
synLog
=
getLog
(
synCtx
)
;
if
(
action
==
ACTION_SET
)
{
String
value
=
(
getExpression
(
)
==
null
?
getValue
(
)
:
expression
.
stringValueOf
(
synCtx
)
)
;
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Setting header : "
+
qName
+
" to : "
+
value
)
;
}
if
(
!
isImplicit
(
)
&&
(
qName
.
getNamespaceURI
(
)
==
null
||
""
.
equals
(
qName
.
getNamespaceURI
(
)
)
)
)
{
if
(
SynapseConstants
.
HEADER_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setTo
(
new
EndpointReference
(
value
)
)
;
}
else
if
(
SynapseConstants
.
HEADER_FROM
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setFrom
(
new
EndpointReference
(
value
)
)
;
}
else
if
(
SynapseConstants
.
HEADER_ACTION
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setWSAAction
(
value
)
;
}
else
if
(
SynapseConstants
.
HEADER_FAULT
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setFaultTo
(
new
EndpointReference
(
value
)
)
;
}
else
if
(
SynapseConstants
.
HEADER_REPLY_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setReplyTo
(
new
EndpointReference
(
value
)
)
;
}
else
if
(
SynapseConstants
.
HEADER_RELATES_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setRelatesTo
(
new
RelatesTo
[
]
{
new
RelatesTo
(
value
)
}
)
;
}
else
{
addCustomHeader
(
synCtx
,
value
)
;
}
}
else
{
addCustomHeader
(
synCtx
,
value
)
;
}
}
else
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Removing Header : "
+
qName
)
;
}
if
(
qName
.
getNamespaceURI
(
)
==
null
||
""
.
equals
(
qName
.
getNamespaceURI
(
)
)
)
{
if
(
SynapseConstants
.
HEADER_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setTo
(
null
)
;
}
else
if
(
SynapseConstants
.
HEADER_FROM
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setFrom
(
null
)
;
}
else
if
(
SynapseConstants
.
HEADER_ACTION
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setWSAAction
(
null
)
;
}
else
if
(
SynapseConstants
.
HEADER_FAULT
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setFaultTo
(
null
)
;
}
else
if
(
SynapseConstants
.
HEADER_REPLY_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setReplyTo
(
null
)
;
}
else
if
(
SynapseConstants
.
HEADER_RELATES_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setRelatesTo
(
null
)
;
}
else
{
SOAPEnvelope
envelope
=
synCtx
.
getEnvelope
(
)
;
if
(
envelope
!=
null
)
{
SOAPHeader
header
=
envelope
.
getHeader
(
)
;
if
(
header
!=
null
)
{
removeFromHeaderList
(
header
.
getHeaderBlocksWithNSURI
(
""
)
)
;
}
}
}
}
else
{
SOAPEnvelope
envelope
=
synCtx
.
getEnvelope
(
)
;
if
(
envelope
!=
null
)
{
SOAPHeader
header
=
envelope
.
getHeader
(
)
;
if
(
header
!=
null
)
{
removeFromHeaderList
(
header
.
getHeaderBlocksWithNSURI
(
qName
.
getNamespaceURI
(
)
)
)
;
}
}
}
}
}
private
void
alterTransportHeader
(
MessageContext
synCtx
)
{
SynapseLog
synLog
=
getLog
(
synCtx
)
;
String
headerName
=
qName
.
getLocalPart
(
)
;
String
value
=
(
getExpression
(
)
==
null
?
getValue
(
)
:
expression
.
stringValueOf
(
synCtx
)
)
;
if
(
action
==
ACTION_SET
)
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Setting Transport header : "
+
headerName
+
" to : "
+
value
)
;
}
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
synCtx
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
Object
headers
=
axis2MessageCtx
.
getProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
)
;
if
(
headers
!=
null
&&
headers
instanceof
Map
)
{
Map
headersMap
=
(
Map
)
headers
;
headersMap
.
put
(
headerName
,
value
)
;
}
else
if
(
headers
==
null
)
{
Map
headersMap
=
new
HashMap
(
)
;
headersMap
.
put
(
headerName
,
value
)
;
axis2MessageCtx
.
setProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
,
headersMap
)
;
}
}
else
{
if
(
synLog
.
isTraceOrDebugEnabled
(
)
)
{
synLog
.
traceOrDebug
(
"Removing Transport Header : "
+
qName
)
;
}
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
synCtx
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
Object
headers
=
axis2MessageCtx
.
getProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
)
;
if
(
headers
!=
null
&&
headers
instanceof
Map
)
{
Map
headersMap
=
(
Map
)
headers
;
headersMap
.
remove
(
headerName
)
;
}
else
{
synLog
.
traceOrDebug
(
"No transport headers found"
)
;
}
}
}
private
void
addCustomHeader
(
MessageContext
synCtx
,
String
value
)
{
SOAPEnvelope
env
=
synCtx
.
getEnvelope
(
)
;
if
(
env
==
null
)
{
return
;
}
SOAPFactory
fac
=
(
SOAPFactory
)
env
.
getOMFactory
(
)
;
SOAPHeader
header
=
env
.
getOrCreateHeader
(
)
;
if
(
!
isImplicit
(
)
)
{
SOAPHeaderBlock
hb
=
header
.
addHeaderBlock
(
qName
.
getLocalPart
(
)
,
fac
.
createOMNamespace
(
qName
.
getNamespaceURI
(
)
,
qName
.
getPrefix
(
)
)
)
;
hb
.
setText
(
value
)
;
}
else
if
(
hasEmbeddedXml
(
)
)
{
for
(
OMElement
e
:
embeddedXmlContent
)
{
header
.
addChild
(
e
.
cloneOMElement
(
)
)
;
}
}
}
private
void
removeFromHeaderList
(
List
headersList
)
{
if
(
headersList
==
null
||
headersList
.
isEmpty
(
)
)
{
return
;
}
for
(
Object
o
:
headersList
)
{
if
(
o
instanceof
SOAPHeaderBlock
)
{
SOAPHeaderBlock
header
=
(
SOAPHeaderBlock
)
o
;
if
(
header
.
getLocalName
(
)
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
header
.
detach
(
)
;
}
}
else
if
(
o
instanceof
OMElement
)
{
OMElement
omElem
=
(
OMElement
)
o
;
if
(
omElem
.
getLocalName
(
)
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
omElem
.
detach
(
)
;
}
}
}
}
public
List
<
OMElement
>
getEmbeddedXml
(
)
{
return
embeddedXmlContent
;
}
public
void
addEmbeddedXml
(
OMElement
element
)
{
if
(
element
!=
null
&&
!
embeddedXmlContent
.
contains
(
element
)
)
{
embeddedXmlContent
.
add
(
element
)
;
}
}
public
boolean
hasEmbeddedXml
(
)
{
return
!
embeddedXmlContent
.
isEmpty
(
)
;
}
public
boolean
isImplicit
(
)
{
return
getQName
(
)
==
null
;
}
public
int
getAction
(
)
{
return
action
;
}
public
void
setAction
(
int
action
)
{
this
.
action
=
action
;
}
public
QName
getQName
(
)
{
return
qName
;
}
public
void
setQName
(
QName
qName
)
{
this
.
qName
=
qName
;
}
public
String
getValue
(
)
{
return
value
;
}
public
void
setValue
(
String
value
)
{
this
.
value
=
value
;
}
public
SynapseXPath
getExpression
(
)
{
return
expression
;
}
public
void
setExpression
(
SynapseXPath
expression
)
{
this
.
expression
=
expression
;
}
public
String
getScope
(
)
{
return
scope
;
}
public
void
setScope
(
String
scope
)
{
this
.
scope
=
scope
;
}
@
Override
public
boolean
isContentAware
(
)
{
if
(
XMLConfigConstants
.
SCOPE_TRANSPORT
.
equals
(
scope
)
)
{
return
false
;
}
else
{
return
true
;
}
}
}
