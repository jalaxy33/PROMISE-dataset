package
org
.
apache
.
synapse
.
config
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
om
.
OMNode
;
import
org
.
apache
.
axiom
.
om
.
impl
.
builder
.
StAXOMBuilder
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
javax
.
xml
.
stream
.
XMLInputFactory
;
import
javax
.
xml
.
stream
.
XMLStreamException
;
import
javax
.
xml
.
stream
.
XMLStreamReader
;
import
javax
.
xml
.
transform
.
stream
.
StreamSource
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
net
.
URL
;
import
java
.
net
.
URLConnection
;
import
java
.
net
.
URI
;
import
java
.
net
.
MalformedURLException
;
public
class
Util
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
Util
.
class
)
;
public
static
StreamSource
getStreamSource
(
Object
o
)
{
if
(
o
==
null
)
{
handleException
(
"Cannot convert null to a StreamSource"
)
;
}
else
if
(
o
instanceof
OMNode
)
{
OMNode
omNode
=
(
OMNode
)
o
;
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
try
{
omNode
.
serialize
(
baos
)
;
return
new
StreamSource
(
new
ByteArrayInputStream
(
baos
.
toByteArray
(
)
)
)
;
}
catch
(
XMLStreamException
e
)
{
handleException
(
"Error converting to a StreamSource"
,
e
)
;
}
}
else
{
handleException
(
"Cannot convert object to a StreamSource"
)
;
}
return
null
;
}
public
static
InputStream
getInputStream
(
Object
o
)
{
if
(
o
==
null
)
{
handleException
(
"Cannot convert null to a StreamSource"
)
;
}
else
if
(
o
instanceof
OMElement
)
{
OMElement
omElement
=
(
OMElement
)
o
;
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
try
{
omElement
.
serialize
(
baos
)
;
return
new
ByteArrayInputStream
(
baos
.
toByteArray
(
)
)
;
}
catch
(
XMLStreamException
e
)
{
handleException
(
"Error converting to a StreamSource"
,
e
)
;
}
}
else
if
(
o
instanceof
URI
)
{
try
{
return
(
(
URI
)
(
o
)
)
.
toURL
(
)
.
openStream
(
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Error opening stream form URI"
,
e
)
;
}
}
else
{
handleException
(
"Cannot convert object to a StreamSource"
)
;
}
return
null
;
}
public
static
Object
getObject
(
URL
url
)
{
try
{
URLConnection
urlc
=
url
.
openConnection
(
)
;
XMLToObjectMapper
xmlToObject
=
getXmlToObjectMapper
(
urlc
.
getContentType
(
)
)
;
try
{
XMLStreamReader
parser
=
XMLInputFactory
.
newInstance
(
)
.
createXMLStreamReader
(
urlc
.
getInputStream
(
)
)
;
StAXOMBuilder
builder
=
new
StAXOMBuilder
(
parser
)
;
OMElement
omElem
=
builder
.
getDocumentElement
(
)
;
omElem
.
build
(
)
;
if
(
xmlToObject
!=
null
)
{
return
xmlToObject
.
getObjectFromOMNode
(
omElem
)
;
}
else
{
return
omElem
;
}
}
catch
(
XMLStreamException
e
)
{
log
.
warn
(
"Content at URL : "
+
url
+
" is non XML.."
)
;
return
urlc
.
getContent
(
)
;
}
}
catch
(
IOException
e
)
{
handleException
(
"Error connecting to URL : "
+
url
,
e
)
;
}
return
null
;
}
public
static
OMElement
getOMElementFromURL
(
String
url
)
throws
IOException
{
URLConnection
conn
=
new
URL
(
url
)
.
openConnection
(
)
;
conn
.
setReadTimeout
(
10000
)
;
conn
.
setConnectTimeout
(
2000
)
;
conn
.
setRequestProperty
(
"Connection"
,
"close"
)
;
InputStream
urlInStream
=
conn
.
getInputStream
(
)
;
if
(
urlInStream
!=
null
)
{
try
{
StAXOMBuilder
builder
=
new
StAXOMBuilder
(
urlInStream
)
;
OMElement
doc
=
builder
.
getDocumentElement
(
)
;
doc
.
build
(
)
;
return
doc
;
}
catch
(
Exception
e
)
{
handleException
(
"Error parsing resource at URL : "
+
url
+
" as XML"
,
e
)
;
}
finally
{
try
{
urlInStream
.
close
(
)
;
}
catch
(
IOException
ignore
)
{
}
}
}
return
null
;
}
private
static
void
handleException
(
String
msg
,
Exception
e
)
{
log
.
error
(
msg
,
e
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
private
static
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
public
static
XMLToObjectMapper
getXmlToObjectMapper
(
String
contentType
)
{
return
null
;
}
}
