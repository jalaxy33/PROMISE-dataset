package
org
.
apache
.
synapse
.
endpoints
;
import
org
.
apache
.
synapse
.
endpoints
.
algorithms
.
LoadbalanceAlgorithm
;
import
org
.
apache
.
synapse
.
endpoints
.
dispatch
.
Dispatcher
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
FaultHandler
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
axis2
.
context
.
OperationContext
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
SALoadbalanceEndpoint
implements
Endpoint
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
SALoadbalanceEndpoint
.
class
)
;
private
static
final
String
FIRST_MESSAGE_IN_SESSION
=
"first_message_in_session"
;
private
String
name
=
null
;
private
List
endpoints
=
null
;
private
LoadbalanceAlgorithm
algorithm
=
null
;
private
volatile
boolean
active
=
true
;
private
Endpoint
parentEndpoint
=
null
;
private
Dispatcher
dispatcher
=
null
;
public
void
send
(
MessageContext
synMessageContext
)
{
Endpoint
endpoint
=
null
;
endpoint
=
dispatcher
.
getEndpoint
(
synMessageContext
)
;
if
(
endpoint
==
null
)
{
endpoint
=
algorithm
.
getNextEndpoint
(
synMessageContext
)
;
if
(
dispatcher
.
isServerInitiatedSession
(
)
)
{
Axis2MessageContext
axis2MsgCtx
=
(
Axis2MessageContext
)
synMessageContext
;
OperationContext
opCtx
=
axis2MsgCtx
.
getAxis2MessageContext
(
)
.
getOperationContext
(
)
;
Object
o
=
opCtx
.
getProperty
(
"endpointList"
)
;
if
(
o
!=
null
)
{
List
endpointList
=
(
List
)
o
;
endpointList
.
add
(
this
)
;
if
(
!
(
endpoint
instanceof
SALoadbalanceEndpoint
)
)
{
endpointList
.
add
(
endpoint
)
;
}
}
else
{
List
endpointList
=
new
ArrayList
(
)
;
endpointList
.
add
(
this
)
;
if
(
!
(
endpoint
instanceof
SALoadbalanceEndpoint
)
)
{
endpointList
.
add
(
endpoint
)
;
}
opCtx
.
setProperty
(
"endpointList"
,
endpointList
)
;
}
}
else
{
dispatcher
.
updateSession
(
synMessageContext
,
endpoint
)
;
}
synMessageContext
.
getEnvelope
(
)
.
build
(
)
;
synMessageContext
.
setProperty
(
FIRST_MESSAGE_IN_SESSION
,
Boolean
.
TRUE
)
;
}
if
(
endpoint
!=
null
)
{
if
(
endpoint
.
isActive
(
synMessageContext
)
)
{
endpoint
.
send
(
synMessageContext
)
;
}
else
{
informFailure
(
synMessageContext
)
;
}
}
else
{
setActive
(
false
,
synMessageContext
)
;
informFailure
(
synMessageContext
)
;
}
}
public
void
updateSession
(
MessageContext
responseMsgCtx
,
List
endpointList
)
{
Endpoint
endpoint
=
(
Endpoint
)
endpointList
.
remove
(
0
)
;
dispatcher
.
updateSession
(
responseMsgCtx
,
endpoint
)
;
if
(
endpoint
instanceof
SALoadbalanceEndpoint
)
{
(
(
SALoadbalanceEndpoint
)
endpoint
)
.
updateSession
(
responseMsgCtx
,
endpointList
)
;
}
}
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
.
trim
(
)
;
}
public
LoadbalanceAlgorithm
getAlgorithm
(
)
{
return
algorithm
;
}
public
void
setAlgorithm
(
LoadbalanceAlgorithm
algorithm
)
{
this
.
algorithm
=
algorithm
;
}
public
boolean
isActive
(
MessageContext
synMessageContext
)
{
return
active
;
}
public
void
setActive
(
boolean
active
,
MessageContext
synMessageContext
)
{
this
.
active
=
active
;
}
public
List
getEndpoints
(
)
{
return
endpoints
;
}
public
void
setEndpoints
(
List
endpoints
)
{
this
.
endpoints
=
endpoints
;
}
public
void
setParentEndpoint
(
Endpoint
parentEndpoint
)
{
this
.
parentEndpoint
=
parentEndpoint
;
}
public
Dispatcher
getDispatcher
(
)
{
return
dispatcher
;
}
public
void
setDispatcher
(
Dispatcher
dispatcher
)
{
this
.
dispatcher
=
dispatcher
;
}
public
void
onChildEndpointFail
(
Endpoint
endpoint
,
MessageContext
synMessageContext
)
{
Object
o
=
synMessageContext
.
getProperty
(
FIRST_MESSAGE_IN_SESSION
)
;
if
(
o
!=
null
&&
Boolean
.
TRUE
.
equals
(
o
)
)
{
dispatcher
.
unbind
(
synMessageContext
)
;
send
(
synMessageContext
)
;
}
else
{
informFailure
(
synMessageContext
)
;
}
}
private
void
informFailure
(
MessageContext
synMessageContext
)
{
if
(
parentEndpoint
!=
null
)
{
parentEndpoint
.
onChildEndpointFail
(
this
,
synMessageContext
)
;
}
else
{
Object
o
=
synMessageContext
.
getFaultStack
(
)
.
pop
(
)
;
if
(
o
!=
null
)
{
(
(
FaultHandler
)
o
)
.
handleFault
(
synMessageContext
)
;
}
}
}
private
static
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
}
