package
org
.
apache
.
synapse
.
statistics
.
impl
;
import
org
.
apache
.
synapse
.
statistics
.
StatisticsStack
;
import
org
.
apache
.
synapse
.
statistics
.
StatisticsCollector
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
EndPointStatisticsStack
implements
StatisticsStack
{
private
List
endpointStatistics
;
private
boolean
isCompleteInFlowStatisicsReport
=
false
;
public
void
put
(
String
key
,
long
initTime
,
boolean
isInFlow
,
boolean
isStatisticsEnable
,
boolean
isFault
)
{
if
(
endpointStatistics
==
null
)
{
endpointStatistics
=
new
ArrayList
(
)
;
}
endpointStatistics
.
add
(
new
EndPointStatistics
(
key
,
initTime
,
isInFlow
,
isStatisticsEnable
,
isFault
)
)
;
}
public
void
reportToStatisticsCollector
(
StatisticsCollector
statisticsCollector
,
boolean
isFault
)
{
if
(
endpointStatistics
!=
null
&&
!
endpointStatistics
.
isEmpty
(
)
)
{
EndPointStatistics
statistics
=
(
EndPointStatistics
)
endpointStatistics
.
get
(
endpointStatistics
.
size
(
)
-
1
)
;
if
(
statistics
!=
null
&&
statistics
.
isStatisticsEnable
&&
statistics
.
endPointName
!=
null
)
{
if
(
statistics
.
inTimeForInFlow
!=
-
1
)
{
long
initTimeForOutFlow
=
System
.
currentTimeMillis
(
)
;
statisticsCollector
.
reportForEndPoint
(
statistics
.
endPointName
,
false
,
statistics
.
inTimeForInFlow
,
initTimeForOutFlow
,
isFault
)
;
statistics
.
inTimeForInFlow
=
-
1
;
statistics
.
inTimeForOutFlow
=
initTimeForOutFlow
;
}
else
if
(
statistics
.
inTimeForOutFlow
!=
-
1
&&
isCompleteInFlowStatisicsReport
)
{
statisticsCollector
.
reportForEndPoint
(
statistics
.
endPointName
,
true
,
statistics
.
inTimeForOutFlow
,
System
.
currentTimeMillis
(
)
,
isFault
)
;
endpointStatistics
.
remove
(
statistics
)
;
}
}
}
}
public
void
reportToStatisticsCollector
(
StatisticsCollector
statisticsCollector
,
boolean
isFault
,
String
name
)
{
if
(
endpointStatistics
!=
null
&&
!
endpointStatistics
.
isEmpty
(
)
)
{
List
tobeRemoved
=
new
ArrayList
(
)
;
for
(
Iterator
epIterator
=
endpointStatistics
.
iterator
(
)
;
epIterator
.
hasNext
(
)
;
)
{
Object
statisticsObj
=
epIterator
.
next
(
)
;
if
(
statisticsObj
instanceof
EndPointStatistics
)
{
EndPointStatistics
statistics
=
(
EndPointStatistics
)
statisticsObj
;
if
(
statistics
.
isStatisticsEnable
&&
statistics
.
endPointName
!=
null
&&
statistics
.
endPointName
.
equals
(
name
)
)
{
if
(
statistics
.
inTimeForInFlow
!=
-
1
)
{
long
initTimeForOutFlow
=
System
.
currentTimeMillis
(
)
;
statisticsCollector
.
reportForEndPoint
(
statistics
.
endPointName
,
false
,
statistics
.
inTimeForInFlow
,
initTimeForOutFlow
,
isFault
)
;
statistics
.
inTimeForInFlow
=
-
1
;
statistics
.
inTimeForOutFlow
=
initTimeForOutFlow
;
}
else
if
(
statistics
.
inTimeForOutFlow
!=
-
1
&&
isCompleteInFlowStatisicsReport
)
{
statisticsCollector
.
reportForEndPoint
(
statistics
.
endPointName
,
true
,
statistics
.
inTimeForOutFlow
,
System
.
currentTimeMillis
(
)
,
isFault
)
;
tobeRemoved
.
add
(
statistics
)
;
}
}
}
}
endpointStatistics
.
removeAll
(
tobeRemoved
)
;
}
}
public
void
reportAllToStatisticsCollector
(
StatisticsCollector
statisticsCollector
,
boolean
isFault
)
{
if
(
endpointStatistics
!=
null
&&
!
endpointStatistics
.
isEmpty
(
)
)
{
List
tobeRemoved
=
new
ArrayList
(
)
;
for
(
Iterator
epIterator
=
endpointStatistics
.
iterator
(
)
;
epIterator
.
hasNext
(
)
;
)
{
Object
statisticsObj
=
epIterator
.
next
(
)
;
if
(
statisticsObj
instanceof
EndPointStatistics
)
{
EndPointStatistics
statistics
=
(
EndPointStatistics
)
statisticsObj
;
if
(
statistics
.
isStatisticsEnable
&&
statistics
.
endPointName
!=
null
)
{
if
(
statistics
.
inTimeForInFlow
!=
-
1
)
{
long
initTimeForOutFlow
=
System
.
currentTimeMillis
(
)
;
statisticsCollector
.
reportForEndPoint
(
statistics
.
endPointName
,
false
,
statistics
.
inTimeForInFlow
,
initTimeForOutFlow
,
isFault
)
;
statistics
.
inTimeForInFlow
=
-
1
;
statistics
.
inTimeForOutFlow
=
initTimeForOutFlow
;
}
else
if
(
statistics
.
inTimeForOutFlow
!=
-
1
&&
isCompleteInFlowStatisicsReport
)
{
statisticsCollector
.
reportForEndPoint
(
statistics
.
endPointName
,
true
,
statistics
.
inTimeForOutFlow
,
System
.
currentTimeMillis
(
)
,
isFault
)
;
tobeRemoved
.
add
(
statistics
)
;
}
}
}
}
endpointStatistics
.
removeAll
(
tobeRemoved
)
;
}
isCompleteInFlowStatisicsReport
=
true
;
}
class
EndPointStatistics
{
private
String
endPointName
;
private
boolean
isStatisticsEnable
;
private
boolean
isFault
;
private
long
inTimeForInFlow
=
-
1
;
private
long
inTimeForOutFlow
=
-
1
;
public
EndPointStatistics
(
String
endPointName
,
long
initTime
,
boolean
inFlow
,
boolean
statisticsEnable
,
boolean
fault
)
{
if
(
inFlow
)
{
this
.
endPointName
=
endPointName
;
this
.
inTimeForInFlow
=
initTime
;
isStatisticsEnable
=
statisticsEnable
;
isFault
=
fault
;
}
}
public
boolean
equals
(
Object
o
)
{
if
(
this
==
o
)
return
true
;
if
(
o
==
null
||
getClass
(
)
!=
o
.
getClass
(
)
)
return
false
;
EndPointStatistics
that
=
(
EndPointStatistics
)
o
;
if
(
endPointName
!=
null
?
!
endPointName
.
equals
(
that
.
endPointName
)
:
that
.
endPointName
!=
null
)
return
false
;
return
true
;
}
public
int
hashCode
(
)
{
return
(
endPointName
!=
null
?
endPointName
.
hashCode
(
)
:
0
)
;
}
}
}
