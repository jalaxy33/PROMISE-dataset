package
org
.
apache
.
synapse
.
endpoints
.
algorithms
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
java
.
util
.
ArrayList
;
public
class
RoundRobin
implements
LoadbalanceAlgorithm
{
private
ArrayList
endpoints
=
null
;
private
int
currentEPR
=
0
;
public
RoundRobin
(
ArrayList
endpoints
)
{
this
.
endpoints
=
endpoints
;
}
public
Endpoint
getNextEndpoint
(
MessageContext
synapseMessageContext
)
{
Endpoint
nextEndpoint
=
null
;
int
attempts
=
0
;
do
{
synchronized
(
this
)
{
nextEndpoint
=
(
Endpoint
)
endpoints
.
get
(
currentEPR
)
;
if
(
currentEPR
==
endpoints
.
size
(
)
-
1
)
{
currentEPR
=
0
;
}
else
{
currentEPR
++
;
}
}
attempts
++
;
if
(
attempts
>
endpoints
.
size
(
)
)
{
return
null
;
}
}
while
(
!
nextEndpoint
.
isActive
(
synapseMessageContext
)
)
;
return
nextEndpoint
;
}
public
void
reset
(
)
{
currentEPR
=
0
;
}
}
