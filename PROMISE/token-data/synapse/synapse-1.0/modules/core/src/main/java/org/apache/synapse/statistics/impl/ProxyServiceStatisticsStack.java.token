package
org
.
apache
.
synapse
.
statistics
.
impl
;
import
org
.
apache
.
synapse
.
statistics
.
StatisticsStack
;
import
org
.
apache
.
synapse
.
statistics
.
StatisticsCollector
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
public
class
ProxyServiceStatisticsStack
implements
StatisticsStack
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
ProxyServiceStatisticsStack
.
class
)
;
private
String
proxyServiceName
;
private
boolean
isStatisticsEnable
=
false
;
private
long
inTimeForInFlow
=
-
1
;
private
long
inTimeForOutFlow
=
-
1
;
private
boolean
isINFault
;
private
boolean
isOUTFault
;
public
void
put
(
String
key
,
long
initTime
,
boolean
isInFlow
,
boolean
isStatisticsEnable
,
boolean
isFault
)
{
if
(
isInFlow
)
{
this
.
proxyServiceName
=
key
;
this
.
isStatisticsEnable
=
isStatisticsEnable
;
this
.
inTimeForInFlow
=
initTime
;
this
.
isINFault
=
isFault
;
}
}
public
void
reportToStatisticsCollector
(
StatisticsCollector
statisticsCollector
,
boolean
isFault
)
{
if
(
proxyServiceName
!=
null
&&
isStatisticsEnable
&&
inTimeForInFlow
!=
-
1
)
{
inTimeForOutFlow
=
System
.
currentTimeMillis
(
)
;
isOUTFault
=
isFault
;
statisticsCollector
.
reportForProxyService
(
proxyServiceName
,
false
,
inTimeForInFlow
,
inTimeForOutFlow
,
isINFault
)
;
inTimeForInFlow
=
-
1
;
}
else
if
(
inTimeForOutFlow
!=
-
1
)
{
statisticsCollector
.
reportForProxyService
(
proxyServiceName
,
true
,
inTimeForOutFlow
,
System
.
currentTimeMillis
(
)
,
isFault
)
;
inTimeForOutFlow
=
-
1
;
}
}
public
void
reportToStatisticsCollector
(
StatisticsCollector
statisticsCollector
,
boolean
isFault
,
String
name
)
{
if
(
name
!=
null
&&
proxyServiceName
!=
null
&&
proxyServiceName
.
equals
(
name
)
)
{
reportToStatisticsCollector
(
statisticsCollector
,
isFault
)
;
}
else
{
handleException
(
"Invalid ProxyService Name "
+
name
+
" expected "
+
proxyServiceName
)
;
}
}
public
void
reportAllToStatisticsCollector
(
StatisticsCollector
statisticsCollector
,
boolean
isFault
)
{
reportToStatisticsCollector
(
statisticsCollector
,
isFault
)
;
}
private
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
}
