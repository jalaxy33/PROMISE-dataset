package
org
.
apache
.
synapse
.
mediators
.
base
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
Constants
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractListMediator
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorFaultHandler
;
import
org
.
apache
.
synapse
.
statistics
.
StatisticsUtils
;
import
org
.
apache
.
synapse
.
statistics
.
StatisticsStack
;
import
org
.
apache
.
synapse
.
statistics
.
impl
.
SequenceStatisticsStack
;
import
java
.
util
.
Stack
;
public
class
SequenceMediator
extends
AbstractListMediator
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
SequenceMediator
.
class
)
;
private
static
final
Log
trace
=
LogFactory
.
getLog
(
Constants
.
TRACE_LOGGER
)
;
private
String
name
=
null
;
private
String
key
=
null
;
private
String
errorHandler
=
null
;
private
boolean
dynamic
=
false
;
private
String
registryKey
=
null
;
private
int
statisticsEnable
=
Constants
.
STATISTICS_UNSET
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
log
.
debug
(
"Sequence mediator <"
+
(
name
==
null
?
"anonymous"
:
name
)
+
"> :: mediate()"
)
;
boolean
shouldTrace
=
shouldTrace
(
synCtx
.
getTracingState
(
)
)
;
if
(
key
==
null
)
{
boolean
isStatisticsEnable
=
(
org
.
apache
.
synapse
.
Constants
.
STATISTICS_ON
==
statisticsEnable
)
;
if
(
isStatisticsEnable
)
{
StatisticsStack
sequenceStack
=
(
StatisticsStack
)
synCtx
.
getProperty
(
Constants
.
SEQUENCE_STATISTICS_STACK
)
;
if
(
sequenceStack
==
null
)
{
sequenceStack
=
new
SequenceStatisticsStack
(
)
;
synCtx
.
setProperty
(
Constants
.
SEQUENCE_STATISTICS_STACK
,
sequenceStack
)
;
}
String
seqName
=
(
name
==
null
?
Constants
.
ANONYMOUS_SEQUENCES
:
name
)
;
boolean
isFault
=
synCtx
.
getEnvelope
(
)
.
getBody
(
)
.
hasFault
(
)
;
sequenceStack
.
put
(
seqName
,
System
.
currentTimeMillis
(
)
,
!
synCtx
.
isResponse
(
)
,
isStatisticsEnable
,
isFault
)
;
}
try
{
if
(
shouldTrace
)
{
trace
.
trace
(
"Start : Sequence <"
+
(
name
==
null
?
"anonymous"
:
name
)
+
">"
)
;
}
if
(
errorHandler
!=
null
)
{
log
.
debug
(
"Setting the onError handler for the sequence"
)
;
synCtx
.
pushFaultHandler
(
new
MediatorFaultHandler
(
synCtx
.
getSequence
(
errorHandler
)
)
)
;
}
boolean
ret
=
super
.
mediate
(
synCtx
)
;
Stack
faultStack
=
synCtx
.
getFaultStack
(
)
;
if
(
errorHandler
!=
null
&&
!
faultStack
.
isEmpty
(
)
)
{
Object
o
=
faultStack
.
peek
(
)
;
if
(
o
instanceof
MediatorFaultHandler
&&
synCtx
.
getSequence
(
errorHandler
)
.
equals
(
(
(
MediatorFaultHandler
)
o
)
.
getFaultMediator
(
)
)
)
{
faultStack
.
pop
(
)
;
}
}
return
ret
;
}
finally
{
if
(
isStatisticsEnable
)
{
StatisticsUtils
.
processSequenceStatistics
(
synCtx
)
;
}
StatisticsUtils
.
processProxyServiceStatistics
(
synCtx
)
;
if
(
shouldTrace
)
{
trace
.
trace
(
"End : Sequence <"
+
(
name
==
null
?
"anonymous"
:
name
)
+
">"
)
;
}
}
}
else
{
Mediator
m
=
synCtx
.
getSequence
(
key
)
;
if
(
m
==
null
)
{
if
(
shouldTrace
)
{
trace
.
trace
(
"Sequence named "
+
key
+
" cannot be found."
)
;
}
handleException
(
"Sequence named "
+
key
+
" cannot be found."
)
;
}
else
{
if
(
shouldTrace
)
{
trace
.
trace
(
"Executing sequence named "
+
key
)
;
}
return
m
.
mediate
(
synCtx
)
;
}
}
return
false
;
}
private
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
public
String
getKey
(
)
{
return
key
;
}
public
void
setKey
(
String
key
)
{
this
.
key
=
key
;
}
public
String
getErrorHandler
(
)
{
return
errorHandler
;
}
public
void
setErrorHandler
(
String
errorHandler
)
{
this
.
errorHandler
=
errorHandler
;
}
public
int
getStatisticsEnable
(
)
{
return
statisticsEnable
;
}
public
void
setStatisticsEnable
(
int
statisticsEnable
)
{
this
.
statisticsEnable
=
statisticsEnable
;
}
public
boolean
isDynamic
(
)
{
return
dynamic
;
}
public
void
setDynamic
(
boolean
dynamic
)
{
this
.
dynamic
=
dynamic
;
}
public
String
getRegistryKey
(
)
{
return
registryKey
;
}
public
void
setRegistryKey
(
String
registryKey
)
{
this
.
registryKey
=
registryKey
;
}
}
