package
org
.
apache
.
synapse
.
config
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
Constants
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
org
.
apache
.
synapse
.
mediators
.
base
.
SequenceMediator
;
import
org
.
apache
.
synapse
.
config
.
xml
.
MediatorFactoryFinder
;
import
org
.
apache
.
synapse
.
config
.
xml
.
endpoints
.
XMLToEndpointMapper
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
ProxyService
;
import
org
.
apache
.
synapse
.
registry
.
Registry
;
import
org
.
apache
.
axis2
.
AxisFault
;
import
org
.
apache
.
axis2
.
engine
.
AxisConfiguration
;
import
org
.
apache
.
axiom
.
om
.
impl
.
builder
.
StAXOMBuilder
;
import
javax
.
xml
.
stream
.
XMLStreamReader
;
import
javax
.
xml
.
stream
.
XMLInputFactory
;
import
javax
.
xml
.
stream
.
XMLStreamException
;
import
java
.
util
.
*
;
import
java
.
net
.
URLConnection
;
import
java
.
io
.
IOException
;
public
class
SynapseConfiguration
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
SynapseConfiguration
.
class
)
;
Registry
registry
=
null
;
private
Map
proxyServices
=
new
HashMap
(
)
;
private
Map
localRegistry
=
new
HashMap
(
)
;
private
AxisConfiguration
axisConfiguration
=
null
;
private
String
pathToConfigFile
=
null
;
public
void
addSequence
(
String
key
,
Mediator
mediator
)
{
localRegistry
.
put
(
key
,
mediator
)
;
}
public
void
addSequence
(
String
key
,
Entry
entry
)
{
localRegistry
.
put
(
key
,
entry
)
;
}
public
Map
getDefinedSequences
(
)
{
Map
definedSequences
=
new
HashMap
(
)
;
Iterator
itr
=
localRegistry
.
values
(
)
.
iterator
(
)
;
while
(
itr
.
hasNext
(
)
)
{
Object
o
=
itr
.
next
(
)
;
if
(
o
instanceof
SequenceMediator
)
{
definedSequences
.
put
(
(
(
SequenceMediator
)
o
)
.
getName
(
)
,
o
)
;
}
}
return
definedSequences
;
}
public
Mediator
getSequence
(
String
key
)
{
Object
o
=
localRegistry
.
get
(
key
)
;
if
(
o
!=
null
&&
o
instanceof
Mediator
)
{
return
(
Mediator
)
o
;
}
Entry
entry
=
null
;
if
(
o
!=
null
&&
o
instanceof
Entry
)
{
entry
=
(
Entry
)
o
;
}
else
{
entry
=
new
Entry
(
key
)
;
entry
.
setType
(
Entry
.
REMOTE_ENTRY
)
;
entry
.
setMapper
(
MediatorFactoryFinder
.
getInstance
(
)
)
;
}
if
(
registry
!=
null
)
{
o
=
registry
.
getResource
(
entry
)
;
if
(
o
!=
null
&&
o
instanceof
Mediator
)
{
localRegistry
.
put
(
key
,
entry
)
;
return
(
Mediator
)
o
;
}
}
return
null
;
}
public
void
removeSequence
(
String
key
)
{
localRegistry
.
remove
(
key
)
;
}
public
Mediator
getMainSequence
(
)
{
return
getSequence
(
Constants
.
MAIN_SEQUENCE_KEY
)
;
}
public
Mediator
getFaultSequence
(
)
{
return
getSequence
(
Constants
.
FAULT_SEQUENCE_KEY
)
;
}
public
void
addEntry
(
String
key
,
Entry
entry
)
{
if
(
entry
.
getType
(
)
==
Entry
.
URL_SRC
)
{
try
{
entry
.
setValue
(
Util
.
getOMElementFromURL
(
entry
.
getSrc
(
)
.
toString
(
)
)
)
;
localRegistry
.
put
(
key
,
entry
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Can not read from source URL : "
+
entry
.
getSrc
(
)
)
;
}
}
else
{
localRegistry
.
put
(
key
,
entry
)
;
}
}
public
Map
getDefinedEntries
(
)
{
Map
definedEntries
=
new
HashMap
(
)
;
Iterator
itr
=
localRegistry
.
values
(
)
.
iterator
(
)
;
while
(
itr
.
hasNext
(
)
)
{
Object
o
=
itr
.
next
(
)
;
if
(
o
instanceof
Entry
&&
(
(
Entry
)
o
)
.
getType
(
)
!=
Entry
.
REMOTE_ENTRY
)
{
definedEntries
.
put
(
(
(
Entry
)
o
)
.
getKey
(
)
,
o
)
;
}
}
return
definedEntries
;
}
public
Object
getEntry
(
String
key
)
{
Object
o
=
localRegistry
.
get
(
key
)
;
if
(
o
!=
null
&&
o
instanceof
Entry
)
{
Entry
entry
=
(
Entry
)
o
;
if
(
entry
.
isDynamic
(
)
)
{
if
(
entry
.
isCached
(
)
&&
!
entry
.
isExpired
(
)
)
{
return
entry
.
getValue
(
)
;
}
else
if
(
registry
!=
null
)
{
o
=
registry
.
getResource
(
entry
)
;
}
}
else
{
return
entry
.
getValue
(
)
;
}
}
return
o
;
}
public
Entry
getEntryDefinition
(
String
key
)
{
Object
o
=
localRegistry
.
get
(
key
)
;
if
(
o
==
null
||
o
instanceof
Entry
)
{
if
(
o
==
null
)
{
Entry
entry
=
new
Entry
(
key
)
;
entry
.
setType
(
Entry
.
REMOTE_ENTRY
)
;
addEntry
(
key
,
entry
)
;
return
entry
;
}
return
(
Entry
)
o
;
}
else
{
handleException
(
"Invalid local registry entry : "
+
key
)
;
return
null
;
}
}
public
void
removeEntry
(
String
key
)
{
localRegistry
.
remove
(
key
)
;
}
public
void
addEndpoint
(
String
key
,
Endpoint
endpoint
)
{
localRegistry
.
put
(
key
,
endpoint
)
;
}
public
void
addEndpoint
(
String
key
,
Entry
entry
)
{
localRegistry
.
put
(
key
,
entry
)
;
}
public
Map
getDefinedEndpoints
(
)
{
Map
definedEndpoints
=
new
HashMap
(
)
;
Iterator
itr
=
localRegistry
.
values
(
)
.
iterator
(
)
;
while
(
itr
.
hasNext
(
)
)
{
Object
o
=
itr
.
next
(
)
;
if
(
o
instanceof
Endpoint
)
{
definedEndpoints
.
put
(
(
(
Endpoint
)
o
)
.
getName
(
)
,
o
)
;
}
}
return
definedEndpoints
;
}
public
Endpoint
getEndpoint
(
String
key
)
{
Object
o
=
localRegistry
.
get
(
key
)
;
if
(
o
!=
null
&&
o
instanceof
Endpoint
)
{
return
(
Endpoint
)
o
;
}
Entry
entry
=
null
;
if
(
o
!=
null
&&
o
instanceof
Entry
)
{
entry
=
(
Entry
)
o
;
}
else
{
entry
=
new
Entry
(
key
)
;
entry
.
setType
(
Entry
.
REMOTE_ENTRY
)
;
entry
.
setMapper
(
XMLToEndpointMapper
.
getInstance
(
)
)
;
}
if
(
registry
!=
null
)
{
o
=
registry
.
getResource
(
entry
)
;
if
(
o
!=
null
&&
o
instanceof
Endpoint
)
{
localRegistry
.
put
(
key
,
entry
)
;
return
(
Endpoint
)
o
;
}
}
return
null
;
}
public
void
removeEndpoint
(
String
key
)
{
localRegistry
.
remove
(
key
)
;
}
public
void
addProxyService
(
String
name
,
ProxyService
proxy
)
{
proxyServices
.
put
(
name
,
proxy
)
;
}
public
ProxyService
getProxyService
(
String
name
)
{
return
(
ProxyService
)
proxyServices
.
get
(
name
)
;
}
public
void
removeProxyService
(
String
name
)
{
Object
o
=
proxyServices
.
get
(
name
)
;
if
(
o
==
null
)
{
handleException
(
"Unknown proxy service for name : "
+
name
)
;
}
else
{
try
{
if
(
getAxisConfiguration
(
)
.
getServiceForActivation
(
name
)
!=
null
)
{
if
(
getAxisConfiguration
(
)
.
getServiceForActivation
(
name
)
.
isActive
(
)
)
{
getAxisConfiguration
(
)
.
getService
(
name
)
.
setActive
(
false
)
;
}
getAxisConfiguration
(
)
.
removeService
(
name
)
;
}
proxyServices
.
remove
(
name
)
;
}
catch
(
AxisFault
axisFault
)
{
handleException
(
axisFault
.
getMessage
(
)
)
;
}
}
}
public
Collection
getProxyServices
(
)
{
return
proxyServices
.
values
(
)
;
}
public
Map
getLocalRegistry
(
)
{
return
Collections
.
unmodifiableMap
(
localRegistry
)
;
}
public
Registry
getRegistry
(
)
{
return
registry
;
}
public
void
setRegistry
(
Registry
registry
)
{
this
.
registry
=
registry
;
}
public
void
setAxisConfiguration
(
AxisConfiguration
axisConfig
)
{
this
.
axisConfiguration
=
axisConfig
;
}
public
AxisConfiguration
getAxisConfiguration
(
)
{
return
axisConfiguration
;
}
public
String
getPathToConfigFile
(
)
{
return
pathToConfigFile
;
}
public
void
setPathToConfigFile
(
String
pathToConfigFile
)
{
this
.
pathToConfigFile
=
pathToConfigFile
;
}
private
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
}
