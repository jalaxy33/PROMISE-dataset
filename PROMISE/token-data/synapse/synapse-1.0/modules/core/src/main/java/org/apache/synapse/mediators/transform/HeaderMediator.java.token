package
org
.
apache
.
synapse
.
mediators
.
transform
;
import
org
.
apache
.
axiom
.
om
.
xpath
.
AXIOMXPath
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
soap
.
SOAPHeaderBlock
;
import
org
.
apache
.
axiom
.
soap
.
SOAPEnvelope
;
import
org
.
apache
.
axiom
.
soap
.
SOAPFactory
;
import
org
.
apache
.
axiom
.
soap
.
SOAPHeader
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
*
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractMediator
;
import
org
.
apache
.
axis2
.
addressing
.
EndpointReference
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
util
.
List
;
import
java
.
util
.
Iterator
;
public
class
HeaderMediator
extends
AbstractMediator
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
HeaderMediator
.
class
)
;
private
static
final
Log
trace
=
LogFactory
.
getLog
(
Constants
.
TRACE_LOGGER
)
;
public
static
final
int
ACTION_SET
=
0
;
public
static
final
int
ACTION_REMOVE
=
1
;
private
QName
qName
=
null
;
private
String
value
=
null
;
private
int
action
=
ACTION_SET
;
private
AXIOMXPath
expression
=
null
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
log
.
debug
(
"Header mediator <"
+
(
action
==
ACTION_SET
?
"Set"
:
"Remove"
)
+
"> :: mediate()"
)
;
boolean
shouldTrace
=
shouldTrace
(
synCtx
.
getTracingState
(
)
)
;
if
(
shouldTrace
)
{
trace
.
trace
(
"Start : Header mediator, action = "
+
(
action
==
ACTION_SET
?
"set"
:
"remove"
)
)
;
}
if
(
action
==
ACTION_SET
)
{
String
value
=
(
getValue
(
)
!=
null
?
getValue
(
)
:
Axis2MessageContext
.
getStringValue
(
getExpression
(
)
,
synCtx
)
)
;
log
.
debug
(
"Setting header : "
+
qName
+
" to : "
+
value
)
;
if
(
shouldTrace
)
{
trace
.
trace
(
"Set Header : "
+
qName
+
" to : "
+
value
)
;
}
if
(
qName
.
getNamespaceURI
(
)
==
null
||
""
.
equals
(
qName
.
getNamespaceURI
(
)
)
)
{
if
(
Constants
.
HEADER_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setTo
(
new
EndpointReference
(
value
)
)
;
}
else
if
(
Constants
.
HEADER_FROM
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setFrom
(
new
EndpointReference
(
value
)
)
;
}
else
if
(
Constants
.
HEADER_ACTION
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setWSAAction
(
value
)
;
}
else
if
(
Constants
.
HEADER_FAULT
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setFaultTo
(
new
EndpointReference
(
value
)
)
;
}
else
if
(
Constants
.
HEADER_REPLY_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setReplyTo
(
new
EndpointReference
(
value
)
)
;
}
else
{
addCustomHeader
(
synCtx
)
;
}
}
else
{
addCustomHeader
(
synCtx
)
;
}
}
else
{
log
.
debug
(
"Removing header : "
+
qName
+
" from current message"
)
;
if
(
shouldTrace
)
{
trace
.
trace
(
"Remove Header : "
+
qName
)
;
}
if
(
qName
.
getNamespaceURI
(
)
==
null
||
""
.
equals
(
qName
.
getNamespaceURI
(
)
)
)
{
if
(
Constants
.
HEADER_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setTo
(
null
)
;
}
else
if
(
Constants
.
HEADER_FROM
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setFrom
(
null
)
;
}
else
if
(
Constants
.
HEADER_ACTION
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setWSAAction
(
null
)
;
}
else
if
(
Constants
.
HEADER_FAULT
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setFaultTo
(
null
)
;
}
else
if
(
Constants
.
HEADER_REPLY_TO
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
synCtx
.
setReplyTo
(
null
)
;
}
else
{
removeFromHeaderList
(
synCtx
.
getEnvelope
(
)
.
getHeader
(
)
.
getHeaderBlocksWithNSURI
(
""
)
)
;
}
}
else
{
removeFromHeaderList
(
synCtx
.
getEnvelope
(
)
.
getHeader
(
)
.
getHeaderBlocksWithNSURI
(
qName
.
getNamespaceURI
(
)
)
)
;
}
}
if
(
shouldTrace
)
{
trace
.
trace
(
"End : Header mediator"
)
;
}
return
true
;
}
private
void
addCustomHeader
(
MessageContext
synCtx
)
{
SOAPEnvelope
env
=
synCtx
.
getEnvelope
(
)
;
SOAPFactory
fac
=
(
SOAPFactory
)
env
.
getOMFactory
(
)
;
SOAPHeader
header
=
env
.
getHeader
(
)
;
if
(
header
==
null
)
{
header
=
fac
.
createSOAPHeader
(
env
)
;
}
SOAPHeaderBlock
hb
=
header
.
addHeaderBlock
(
qName
.
getLocalPart
(
)
,
fac
.
createOMNamespace
(
qName
.
getNamespaceURI
(
)
,
qName
.
getPrefix
(
)
)
)
;
hb
.
setText
(
value
)
;
}
private
void
removeFromHeaderList
(
List
headersList
)
{
if
(
headersList
==
null
||
headersList
.
isEmpty
(
)
)
{
return
;
}
Iterator
iter
=
headersList
.
iterator
(
)
;
while
(
iter
.
hasNext
(
)
)
{
Object
o
=
iter
.
next
(
)
;
if
(
o
instanceof
SOAPHeaderBlock
)
{
SOAPHeaderBlock
header
=
(
SOAPHeaderBlock
)
o
;
if
(
header
.
getLocalName
(
)
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
header
.
detach
(
)
;
}
}
else
if
(
o
instanceof
OMElement
)
{
OMElement
omElem
=
(
OMElement
)
o
;
if
(
omElem
.
getLocalName
(
)
.
equals
(
qName
.
getLocalPart
(
)
)
)
{
omElem
.
detach
(
)
;
}
}
}
}
public
int
getAction
(
)
{
return
action
;
}
public
void
setAction
(
int
action
)
{
this
.
action
=
action
;
}
public
QName
getQName
(
)
{
return
qName
;
}
public
void
setQName
(
QName
qName
)
{
this
.
qName
=
qName
;
}
public
String
getValue
(
)
{
return
value
;
}
public
void
setValue
(
String
value
)
{
this
.
value
=
value
;
}
public
AXIOMXPath
getExpression
(
)
{
return
expression
;
}
public
void
setExpression
(
AXIOMXPath
expression
)
{
this
.
expression
=
expression
;
}
private
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
}
