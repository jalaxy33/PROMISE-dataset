package
org
.
apache
.
synapse
.
mediators
.
builtin
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
Constants
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
org
.
apache
.
synapse
.
endpoints
.
SALoadbalanceEndpoint
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractMediator
;
import
org
.
apache
.
axis2
.
context
.
OperationContext
;
import
java
.
util
.
List
;
public
class
SendMediator
extends
AbstractMediator
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
SendMediator
.
class
)
;
private
static
final
Log
trace
=
LogFactory
.
getLog
(
Constants
.
TRACE_LOGGER
)
;
private
Endpoint
endpoint
=
null
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
log
.
debug
(
"Send mediator :: mediate()"
)
;
boolean
shouldTrace
=
shouldTrace
(
synCtx
.
getTracingState
(
)
)
;
try
{
if
(
shouldTrace
)
{
trace
.
trace
(
"Start : Send mediator"
)
;
trace
.
trace
(
"Sending Message :: "
+
synCtx
.
getEnvelope
(
)
)
;
}
if
(
endpoint
==
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Sending message using implicit message properties.."
)
;
log
.
debug
(
"Sending To: "
+
(
synCtx
.
getTo
(
)
!=
null
?
synCtx
.
getTo
(
)
.
getAddress
(
)
:
"null"
)
)
;
log
.
debug
(
"SOAPAction: "
+
(
synCtx
.
getWSAAction
(
)
!=
null
?
synCtx
.
getWSAAction
(
)
:
"null"
)
)
;
log
.
debug
(
"Body : \n"
+
synCtx
.
getEnvelope
(
)
)
;
}
if
(
synCtx
.
isResponse
(
)
)
{
Axis2MessageContext
axis2MsgCtx
=
(
Axis2MessageContext
)
synCtx
;
OperationContext
opCtx
=
axis2MsgCtx
.
getAxis2MessageContext
(
)
.
getOperationContext
(
)
;
Object
o
=
opCtx
.
getProperty
(
"endpointList"
)
;
if
(
o
!=
null
)
{
List
endpointList
=
(
List
)
o
;
Object
e
=
endpointList
.
remove
(
0
)
;
if
(
e
!=
null
&&
e
instanceof
SALoadbalanceEndpoint
)
{
SALoadbalanceEndpoint
saLoadbalanceEndpoint
=
(
SALoadbalanceEndpoint
)
e
;
saLoadbalanceEndpoint
.
updateSession
(
synCtx
,
endpointList
)
;
}
}
}
synCtx
.
getEnvironment
(
)
.
send
(
null
,
synCtx
)
;
}
else
{
endpoint
.
send
(
synCtx
)
;
}
}
finally
{
if
(
shouldTrace
)
{
trace
.
trace
(
"End : Send mediator"
)
;
}
}
return
true
;
}
public
Endpoint
getEndpoint
(
)
{
return
endpoint
;
}
public
void
setEndpoint
(
Endpoint
endpoint
)
{
this
.
endpoint
=
endpoint
;
}
}
