package
org
.
apache
.
synapse
.
mediators
.
builtin
;
import
org
.
apache
.
axiom
.
om
.
xpath
.
AXIOMXPath
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
Constants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractMediator
;
import
java
.
util
.
Map
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Set
;
public
class
PropertyMediator
extends
AbstractMediator
{
private
String
name
=
null
;
private
String
value
=
null
;
private
AXIOMXPath
expression
=
null
;
private
String
scope
=
null
;
public
static
final
int
ACTION_SET
=
0
;
public
static
final
int
ACTION_REMOVE
=
1
;
private
int
action
=
ACTION_SET
;
private
static
final
Log
log
=
LogFactory
.
getLog
(
PropertyMediator
.
class
)
;
private
static
final
Log
trace
=
LogFactory
.
getLog
(
Constants
.
TRACE_LOGGER
)
;
public
boolean
mediate
(
MessageContext
smc
)
{
log
.
debug
(
"Property mediator :: mediate()"
)
;
boolean
shouldTrace
=
shouldTrace
(
smc
.
getTracingState
(
)
)
;
if
(
shouldTrace
)
{
trace
.
trace
(
"Start : Property mediator"
)
;
}
if
(
action
==
ACTION_SET
)
{
String
resultValue
=
(
this
.
value
!=
null
?
this
.
value
:
Axis2MessageContext
.
getStringValue
(
expression
,
smc
)
)
;
log
.
debug
(
"Setting : "
+
name
+
" property (scope:"
+
(
scope
==
null
?
"default"
:
scope
)
+
") = "
+
resultValue
)
;
if
(
shouldTrace
)
{
trace
.
trace
(
"Property Name : "
+
name
+
" (scope:"
+
(
scope
==
null
?
"default"
:
scope
)
+
") set to "
+
(
value
!=
null
?
" resultValue = "
+
value
:
" result of expression "
+
expression
+
" = "
+
resultValue
)
)
;
}
if
(
scope
==
null
)
{
smc
.
setProperty
(
name
,
resultValue
)
;
}
else
if
(
Constants
.
SCOPE_DEFAULT
.
equals
(
scope
)
)
{
smc
.
setProperty
(
name
,
resultValue
)
;
}
else
if
(
Constants
.
SCOPE_AXIS2
.
equals
(
scope
)
&&
smc
instanceof
Axis2MessageContext
)
{
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
smc
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
axis2MessageCtx
.
setProperty
(
name
,
resultValue
)
;
}
else
if
(
Constants
.
SCOPE_TRANSPORT
.
equals
(
scope
)
&&
smc
instanceof
Axis2MessageContext
)
{
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
smc
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
Object
headers
=
axis2MessageCtx
.
getProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
)
;
if
(
headers
!=
null
&&
headers
instanceof
Map
)
{
Map
headersMap
=
(
HashMap
)
headers
;
headersMap
.
put
(
name
,
resultValue
)
;
}
if
(
headers
==
null
)
{
Map
headersMap
=
new
HashMap
(
)
;
headersMap
.
put
(
name
,
resultValue
)
;
axis2MessageCtx
.
setProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
,
headersMap
)
;
}
}
else
{
String
msg
=
"Unsupported scope : "
+
scope
+
" for property mediator"
;
handleException
(
msg
)
;
}
}
else
{
log
.
debug
(
"Removing : "
+
name
+
" property (scope:"
+
(
scope
==
null
?
"default"
:
scope
)
+
") "
)
;
trace
.
trace
(
"Remove - Property Name : "
+
name
+
" (scope:"
+
(
scope
==
null
?
"default"
:
scope
)
+
")"
)
;
if
(
scope
==
null
)
{
Set
pros
=
smc
.
getPropertyKeySet
(
)
;
if
(
pros
!=
null
)
{
pros
.
remove
(
name
)
;
}
}
else
if
(
Constants
.
SCOPE_DEFAULT
.
equals
(
scope
)
)
{
Set
pros
=
smc
.
getPropertyKeySet
(
)
;
if
(
pros
!=
null
)
{
pros
.
remove
(
name
)
;
}
}
else
if
(
Constants
.
SCOPE_AXIS2
.
equals
(
scope
)
&&
smc
instanceof
Axis2MessageContext
)
{
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
smc
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
Map
pros
=
axis2MessageCtx
.
getProperties
(
)
;
if
(
pros
!=
null
)
{
pros
.
remove
(
name
)
;
}
}
else
if
(
Constants
.
SCOPE_TRANSPORT
.
equals
(
scope
)
&&
smc
instanceof
Axis2MessageContext
)
{
Axis2MessageContext
axis2smc
=
(
Axis2MessageContext
)
smc
;
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageCtx
=
axis2smc
.
getAxis2MessageContext
(
)
;
Object
headers
=
axis2MessageCtx
.
getProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
)
;
if
(
headers
!=
null
&&
headers
instanceof
Map
)
{
Map
headersMap
=
(
HashMap
)
headers
;
headersMap
.
remove
(
name
)
;
}
if
(
headers
==
null
)
{
log
.
info
(
"No Headers found "
)
;
}
}
else
{
String
msg
=
"Unsupported scope : "
+
scope
+
" for property mediator"
;
handleException
(
msg
)
;
}
}
if
(
shouldTrace
)
{
trace
.
trace
(
"End : Property mediator"
)
;
}
return
true
;
}
private
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
public
String
getValue
(
)
{
return
value
;
}
public
void
setValue
(
String
value
)
{
this
.
value
=
value
;
}
public
AXIOMXPath
getExpression
(
)
{
return
expression
;
}
public
void
setExpression
(
AXIOMXPath
expression
)
{
this
.
expression
=
expression
;
}
public
String
getScope
(
)
{
return
scope
;
}
public
void
setScope
(
String
scope
)
{
this
.
scope
=
scope
;
}
public
int
getAction
(
)
{
return
action
;
}
public
void
setAction
(
int
action
)
{
this
.
action
=
action
;
}
}
