package
org
.
apache
.
synapse
.
config
.
xml
.
endpoints
.
utils
;
import
org
.
apache
.
synapse
.
endpoints
.
utils
.
EndpointDefinition
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
xml
.
sax
.
InputSource
;
import
javax
.
wsdl
.
factory
.
WSDLFactory
;
import
javax
.
wsdl
.
WSDLException
;
import
javax
.
wsdl
.
Definition
;
import
javax
.
wsdl
.
Service
;
import
javax
.
wsdl
.
Port
;
import
javax
.
wsdl
.
extensions
.
soap
.
SOAPAddress
;
import
javax
.
wsdl
.
extensions
.
soap12
.
SOAP12Address
;
import
javax
.
wsdl
.
xml
.
WSDLReader
;
import
javax
.
xml
.
namespace
.
QName
;
import
javax
.
xml
.
stream
.
XMLStreamException
;
import
java
.
util
.
List
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
InputStream
;
public
class
WSDL11EndpointBuilder
{
private
static
Log
log
=
LogFactory
.
getLog
(
WSDL11EndpointBuilder
.
class
)
;
public
EndpointDefinition
createEndpointDefinitionFromWSDL
(
OMElement
wsdl
,
String
service
,
String
port
)
{
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
try
{
wsdl
.
serialize
(
baos
)
;
InputStream
in
=
new
ByteArrayInputStream
(
baos
.
toByteArray
(
)
)
;
InputSource
inputSource
=
new
InputSource
(
in
)
;
WSDLFactory
fac
=
WSDLFactory
.
newInstance
(
)
;
WSDLReader
reader
=
fac
.
newWSDLReader
(
)
;
Definition
definition
=
reader
.
readWSDL
(
null
,
inputSource
)
;
return
createEndpointDefinitionFromWSDL
(
definition
,
service
,
port
)
;
}
catch
(
XMLStreamException
e
)
{
handleException
(
"Error retrieving the WSDL definition from the inline WSDL."
)
;
}
catch
(
WSDLException
e
)
{
handleException
(
"Error retrieving the WSDL definition from the inline WSDL."
)
;
}
return
null
;
}
public
EndpointDefinition
createEndpointDefinitionFromWSDL
(
String
wsdlURI
,
String
service
,
String
port
)
{
try
{
WSDLFactory
fac
=
WSDLFactory
.
newInstance
(
)
;
WSDLReader
reader
=
fac
.
newWSDLReader
(
)
;
Definition
definition
=
reader
.
readWSDL
(
wsdlURI
)
;
return
createEndpointDefinitionFromWSDL
(
definition
,
service
,
port
)
;
}
catch
(
WSDLException
e
)
{
handleException
(
"Error retrieving the WSDL definition from the WSDL URI."
)
;
}
return
null
;
}
private
EndpointDefinition
createEndpointDefinitionFromWSDL
(
Definition
definition
,
String
serviceName
,
String
portName
)
{
if
(
definition
==
null
)
{
handleException
(
"WSDL is not specified."
)
;
}
if
(
serviceName
==
null
)
{
handleException
(
"Service of the WSDL document is not specified."
)
;
}
if
(
portName
==
null
)
{
handleException
(
"Port of the WSDL document is not specified."
)
;
}
String
serviceURL
=
null
;
String
tns
=
definition
.
getTargetNamespace
(
)
;
Service
service
=
definition
.
getService
(
new
QName
(
tns
,
serviceName
)
)
;
if
(
service
!=
null
)
{
Port
port
=
service
.
getPort
(
portName
)
;
if
(
port
!=
null
)
{
List
ext
=
port
.
getExtensibilityElements
(
)
;
for
(
int
i
=
0
;
i
<
ext
.
size
(
)
;
i
++
)
{
Object
o
=
ext
.
get
(
i
)
;
if
(
o
instanceof
SOAPAddress
)
{
SOAPAddress
address
=
(
SOAPAddress
)
o
;
serviceURL
=
address
.
getLocationURI
(
)
;
break
;
}
else
if
(
o
instanceof
SOAP12Address
)
{
SOAP12Address
address
=
(
SOAP12Address
)
o
;
serviceURL
=
address
.
getLocationURI
(
)
;
break
;
}
}
}
}
if
(
serviceURL
!=
null
)
{
EndpointDefinition
endpointDefinition
=
new
EndpointDefinition
(
)
;
endpointDefinition
.
setAddress
(
serviceURL
)
;
return
endpointDefinition
;
}
else
{
handleException
(
"Couldn't retrieve endpoint information from the WSDL."
)
;
}
return
null
;
}
private
static
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
}
