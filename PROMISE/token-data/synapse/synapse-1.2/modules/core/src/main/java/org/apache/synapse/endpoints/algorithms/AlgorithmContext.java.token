package
org
.
apache
.
synapse
.
endpoints
.
algorithms
;
import
org
.
apache
.
axis2
.
clustering
.
ClusteringFault
;
import
org
.
apache
.
axis2
.
clustering
.
context
.
Replicator
;
import
org
.
apache
.
axis2
.
context
.
ConfigurationContext
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseException
;
public
class
AlgorithmContext
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
AlgorithmContext
.
class
)
;
private
static
final
String
UNDERSCORE_STRING
=
"_"
;
private
static
final
String
CURRENT_EPR
=
"currentEPR"
;
private
ConfigurationContext
configCtx
;
private
boolean
isClusteringEnable
=
false
;
private
String
currentEPRPropertyKey
;
private
int
currentEPR
=
0
;
public
int
getCurrentEndpointIndex
(
)
{
if
(
this
.
isClusteringEnable
)
{
if
(
this
.
currentEPRPropertyKey
==
null
||
""
.
equals
(
this
.
currentEPRPropertyKey
)
)
{
handleException
(
"Cannot find the required key to find the "
+
"shared state of the 'currentEPR' attribute"
)
;
}
Object
value
=
this
.
configCtx
.
getPropertyNonReplicable
(
this
.
currentEPRPropertyKey
)
;
if
(
value
==
null
)
{
return
0
;
}
try
{
if
(
value
instanceof
Integer
)
{
return
(
(
Integer
)
value
)
.
intValue
(
)
;
}
else
if
(
value
instanceof
String
)
{
return
Integer
.
parseInt
(
(
String
)
value
)
;
}
}
catch
(
NumberFormatException
e
)
{
handleException
(
"The invalid value for the 'currentEPR' attribute"
)
;
}
}
else
{
return
currentEPR
;
}
return
0
;
}
public
void
setCurrentEPR
(
int
currentEPR
)
{
if
(
isClusteringEnable
)
{
if
(
currentEPRPropertyKey
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Setting the current EPR "
+
currentEPR
+
" with the key "
+
currentEPRPropertyKey
)
;
}
setAndReplicateState
(
currentEPRPropertyKey
,
currentEPR
)
;
}
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Setting the current EPR "
+
currentEPR
)
;
}
this
.
currentEPR
=
currentEPR
;
}
}
public
ConfigurationContext
getConfigurationContext
(
)
{
return
configCtx
;
}
public
void
setConfigurationContext
(
ConfigurationContext
configCtx
)
{
if
(
configCtx
==
null
)
{
handleException
(
"The ConfigurationContext cannot be null when system "
+
"in a cluster environment"
)
;
}
this
.
configCtx
=
configCtx
;
this
.
isClusteringEnable
=
true
;
}
public
void
setContextID
(
String
contextID
)
{
if
(
contextID
==
null
||
""
.
equals
(
contextID
)
)
{
handleException
(
"The Context ID cannot be null when system in a cluster environment"
)
;
}
StringBuffer
buffer
=
new
StringBuffer
(
)
;
buffer
.
append
(
contextID
)
;
buffer
.
append
(
UNDERSCORE_STRING
)
;
buffer
.
append
(
CURRENT_EPR
)
;
currentEPRPropertyKey
=
buffer
.
toString
(
)
;
}
protected
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
protected
void
handleException
(
String
msg
,
Exception
e
)
{
log
.
error
(
msg
,
e
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
private
void
setAndReplicateState
(
String
key
,
Object
value
)
{
if
(
configCtx
!=
null
&&
key
!=
null
&&
value
!=
null
)
{
try
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Start replicating the property with key : "
+
key
+
" value : "
+
value
)
;
}
configCtx
.
setProperty
(
key
,
value
)
;
Replicator
.
replicate
(
configCtx
,
new
String
[
]
{
key
}
)
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Completed replication of the property with key : "
+
key
)
;
}
}
catch
(
ClusteringFault
clusteringFault
)
{
handleException
(
"Error during the replicating states "
,
clusteringFault
)
;
}
}
}
}
