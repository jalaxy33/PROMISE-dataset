package
org
.
apache
.
synapse
.
config
;
import
org
.
apache
.
axiom
.
om
.
*
;
import
org
.
apache
.
axiom
.
om
.
impl
.
builder
.
StAXOMBuilder
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
ServerManager
;
import
org
.
apache
.
synapse
.
util
.
SynapseBinaryDataSource
;
import
org
.
xml
.
sax
.
InputSource
;
import
javax
.
xml
.
stream
.
XMLInputFactory
;
import
javax
.
xml
.
stream
.
XMLStreamException
;
import
javax
.
xml
.
stream
.
XMLStreamReader
;
import
javax
.
xml
.
transform
.
stream
.
StreamSource
;
import
javax
.
activation
.
DataHandler
;
import
java
.
io
.
*
;
import
java
.
net
.
*
;
public
class
SynapseConfigUtils
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
SynapseConfigUtils
.
class
)
;
public
static
StreamSource
getStreamSource
(
Object
o
)
{
if
(
o
==
null
)
{
handleException
(
"Cannot convert null to a StreamSource"
)
;
}
else
if
(
o
instanceof
OMElement
)
{
OMElement
omElement
=
(
OMElement
)
o
;
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
try
{
omElement
.
serialize
(
baos
)
;
return
new
StreamSource
(
new
ByteArrayInputStream
(
baos
.
toByteArray
(
)
)
)
;
}
catch
(
XMLStreamException
e
)
{
handleException
(
"Error converting to a StreamSource"
,
e
)
;
}
}
else
if
(
o
instanceof
OMText
)
{
DataHandler
dataHandler
=
(
DataHandler
)
(
(
OMText
)
o
)
.
getDataHandler
(
)
;
if
(
dataHandler
!=
null
)
{
try
{
return
new
StreamSource
(
dataHandler
.
getInputStream
(
)
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Error in reading content as a stream "
)
;
}
}
}
else
{
handleException
(
"Cannot convert object to a StreamSource"
)
;
}
return
null
;
}
public
static
InputStream
getInputStream
(
Object
o
)
{
if
(
o
==
null
)
{
handleException
(
"Cannot convert null to a StreamSource"
)
;
}
else
if
(
o
instanceof
OMElement
)
{
OMElement
omElement
=
(
OMElement
)
o
;
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
try
{
omElement
.
serialize
(
baos
)
;
return
new
ByteArrayInputStream
(
baos
.
toByteArray
(
)
)
;
}
catch
(
XMLStreamException
e
)
{
handleException
(
"Error converting to a StreamSource"
,
e
)
;
}
}
else
if
(
o
instanceof
OMText
)
{
DataHandler
dataHandler
=
(
DataHandler
)
(
(
OMText
)
o
)
.
getDataHandler
(
)
;
if
(
dataHandler
!=
null
)
{
try
{
return
dataHandler
.
getInputStream
(
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Error in reading content as a stream "
)
;
}
}
}
else
if
(
o
instanceof
URI
)
{
try
{
return
(
(
URI
)
(
o
)
)
.
toURL
(
)
.
openStream
(
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Error opening stream form URI"
,
e
)
;
}
}
else
{
handleException
(
"Cannot convert object to a StreamSource"
)
;
}
return
null
;
}
public
static
Object
getObject
(
URL
url
)
{
try
{
if
(
url
!=
null
&&
"file"
.
equals
(
url
.
getProtocol
(
)
)
)
{
try
{
url
.
openStream
(
)
;
}
catch
(
IOException
ignored
)
{
String
path
=
url
.
getPath
(
)
;
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Can not open a connection to the URL with a path :"
+
path
)
;
}
String
synapseHome
=
ServerManager
.
getInstance
(
)
.
getSynapseHome
(
)
;
if
(
synapseHome
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Trying  to resolve an absolute path of the "
+
" URL using the synapse.home : "
+
synapseHome
)
;
}
if
(
synapseHome
.
endsWith
(
"/"
)
)
{
synapseHome
=
synapseHome
.
substring
(
0
,
synapseHome
.
lastIndexOf
(
"/"
)
)
;
}
url
=
new
URL
(
url
.
getProtocol
(
)
+
":"
+
synapseHome
+
"/"
+
path
)
;
try
{
url
.
openStream
(
)
;
}
catch
(
IOException
e
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Faild to resolve an absolute path of the "
+
" URL using the synapse.home : "
+
synapseHome
)
;
}
log
.
warn
(
"IO Error reading from URL "
+
url
.
getPath
(
)
+
e
)
;
}
}
}
}
if
(
url
==
null
)
{
return
null
;
}
URLConnection
urlc
=
url
.
openConnection
(
)
;
XMLToObjectMapper
xmlToObject
=
getXmlToObjectMapper
(
urlc
.
getContentType
(
)
)
;
InputStream
inputStream
=
urlc
.
getInputStream
(
)
;
try
{
XMLStreamReader
parser
=
XMLInputFactory
.
newInstance
(
)
.
createXMLStreamReader
(
inputStream
)
;
StAXOMBuilder
builder
=
new
StAXOMBuilder
(
parser
)
;
OMElement
omElem
=
builder
.
getDocumentElement
(
)
;
omElem
.
build
(
)
;
if
(
xmlToObject
!=
null
)
{
return
xmlToObject
.
getObjectFromOMNode
(
omElem
)
;
}
else
{
return
omElem
;
}
}
catch
(
XMLStreamException
e
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Content at URL : "
+
url
+
" is non XML.."
)
;
}
return
readNonXML
(
url
)
;
}
catch
(
OMException
e
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Content at URL : "
+
url
+
" is non XML.."
)
;
}
return
readNonXML
(
url
)
;
}
finally
{
inputStream
.
close
(
)
;
}
}
catch
(
IOException
e
)
{
handleException
(
"Error connecting to URL : "
+
url
,
e
)
;
}
return
null
;
}
public
static
OMNode
readNonXML
(
URL
url
)
{
try
{
URLConnection
newConnection
=
url
.
openConnection
(
)
;
BufferedInputStream
newInputStream
=
new
BufferedInputStream
(
newConnection
.
getInputStream
(
)
)
;
OMFactory
omFactory
=
OMAbstractFactory
.
getOMFactory
(
)
;
return
omFactory
.
createOMText
(
new
DataHandler
(
new
SynapseBinaryDataSource
(
newInputStream
,
newConnection
.
getContentType
(
)
)
)
,
true
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Error when getting a stream from resource's content"
,
e
)
;
}
return
null
;
}
public
static
OMNode
getOMElementFromURL
(
String
urlStr
)
throws
IOException
{
URL
url
=
getURLFromPath
(
urlStr
)
;
if
(
url
==
null
)
{
return
null
;
}
URLConnection
conn
=
url
.
openConnection
(
)
;
conn
.
setReadTimeout
(
getReadTimeout
(
)
)
;
conn
.
setConnectTimeout
(
getConnectionTimeout
(
)
)
;
conn
.
setRequestProperty
(
"Connection"
,
"close"
)
;
BufferedInputStream
urlInStream
=
new
BufferedInputStream
(
conn
.
getInputStream
(
)
)
;
try
{
StAXOMBuilder
builder
=
new
StAXOMBuilder
(
urlInStream
)
;
OMElement
doc
=
builder
.
getDocumentElement
(
)
;
doc
.
build
(
)
;
return
doc
;
}
catch
(
Exception
e
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
info
(
"Content at URL : "
+
url
+
" is non XML.."
)
;
}
Object
content
=
readNonXML
(
url
)
;
if
(
content
instanceof
OMNode
)
{
return
(
OMNode
)
content
;
}
}
finally
{
try
{
urlInStream
.
close
(
)
;
}
catch
(
IOException
ignore
)
{
}
}
return
null
;
}
public
static
InputSource
getInputSourceFormURI
(
URI
uri
)
{
if
(
uri
==
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Can not create a URL from 'null' "
)
;
}
return
null
;
}
try
{
URL
url
=
uri
.
toURL
(
)
;
String
protocol
=
url
.
getProtocol
(
)
;
String
path
=
url
.
getPath
(
)
;
if
(
protocol
==
null
||
""
.
equals
(
protocol
)
)
{
url
=
new
URL
(
"file:"
+
path
)
;
}
URLConnection
conn
=
url
.
openConnection
(
)
;
conn
.
setReadTimeout
(
getReadTimeout
(
)
)
;
conn
.
setConnectTimeout
(
getConnectionTimeout
(
)
)
;
conn
.
setRequestProperty
(
"Connection"
,
"close"
)
;
BufferedInputStream
urlInStream
=
new
BufferedInputStream
(
conn
.
getInputStream
(
)
)
;
return
new
InputSource
(
urlInStream
)
;
}
catch
(
MalformedURLException
e
)
{
handleException
(
"Invalid URL ' "
+
uri
+
" '"
,
e
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Error reading at URI ' "
+
uri
+
" ' "
,
e
)
;
}
return
null
;
}
private
static
int
getReadTimeout
(
)
{
return
ServerManager
.
getInstance
(
)
.
getReadTimeout
(
)
;
}
private
static
int
getConnectionTimeout
(
)
{
return
ServerManager
.
getInstance
(
)
.
getConnectTimeout
(
)
;
}
private
static
void
handleException
(
String
msg
,
Exception
e
)
{
log
.
warn
(
msg
,
e
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
private
static
void
handleException
(
String
msg
)
{
log
.
warn
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
public
static
XMLToObjectMapper
getXmlToObjectMapper
(
String
contentType
)
{
return
null
;
}
public
static
URL
getURLFromPath
(
String
path
)
{
if
(
path
==
null
||
"null"
.
equals
(
path
)
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Can not create a URL from 'null' "
)
;
}
return
null
;
}
URL
url
=
null
;
try
{
url
=
new
URL
(
path
)
;
if
(
"file"
.
equals
(
url
.
getProtocol
(
)
)
)
{
try
{
url
.
openStream
(
)
;
}
catch
(
MalformedURLException
e
)
{
handleException
(
"Invalid URL reference : "
+
path
,
e
)
;
}
catch
(
IOException
ignored
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Can not open a connection to the URL with a path :"
+
path
)
;
}
String
synapseHome
=
ServerManager
.
getInstance
(
)
.
getSynapseHome
(
)
;
if
(
synapseHome
!=
null
)
{
if
(
synapseHome
.
endsWith
(
"/"
)
)
{
synapseHome
=
synapseHome
.
substring
(
0
,
synapseHome
.
lastIndexOf
(
"/"
)
)
;
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Trying  to resolve an absolute path of the "
+
" URL using the synapse.home : "
+
synapseHome
)
;
}
try
{
url
=
new
URL
(
url
.
getProtocol
(
)
+
":"
+
synapseHome
+
"/"
+
url
.
getPath
(
)
)
;
url
.
openStream
(
)
;
}
catch
(
MalformedURLException
e
)
{
handleException
(
"Invalid URL reference "
+
url
.
getPath
(
)
+
e
)
;
}
catch
(
IOException
e
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Faild to resolve an absolute path of the "
+
" URL using the synapse.home : "
+
synapseHome
)
;
}
log
.
warn
(
"IO Error reading from URL : "
+
url
.
getPath
(
)
+
e
)
;
}
}
}
}
}
catch
(
MalformedURLException
e
)
{
handleException
(
"Invalid URL reference :  "
+
path
,
e
)
;
}
catch
(
IOException
e
)
{
handleException
(
"IO Error reading from URL : "
+
path
,
e
)
;
}
return
url
;
}
public
static
String
resolveRelativeURI
(
String
parentLocation
,
String
relativeLocation
)
{
if
(
relativeLocation
==
null
)
{
throw
new
IllegalArgumentException
(
"Import URI cannot be null"
)
;
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Resolving import URI ' "
+
parentLocation
+
" '  against base URI ' "
+
relativeLocation
+
" '  "
)
;
}
URI
importUri
=
null
;
try
{
importUri
=
new
URI
(
relativeLocation
)
;
if
(
importUri
.
isAbsolute
(
)
)
{
return
importUri
.
toString
(
)
;
}
}
catch
(
URISyntaxException
e
)
{
handleException
(
"Invalid URI : "
+
relativeLocation
,
e
)
;
}
if
(
parentLocation
==
null
)
{
return
importUri
.
toString
(
)
;
}
else
{
if
(
relativeLocation
.
startsWith
(
"/"
)
||
relativeLocation
.
startsWith
(
"\\"
)
)
{
if
(
importUri
!=
null
&&
!
importUri
.
isAbsolute
(
)
)
{
try
{
importUri
=
new
URI
(
"file:"
+
relativeLocation
)
;
return
importUri
.
toString
(
)
;
}
catch
(
URISyntaxException
e
)
{
handleException
(
"Invalid URI ' "
+
importUri
.
getPath
(
)
+
" '"
,
e
)
;
}
}
}
else
{
int
index
=
parentLocation
.
lastIndexOf
(
"/"
)
;
if
(
index
==
-
1
)
{
index
=
parentLocation
.
lastIndexOf
(
"\\"
)
;
}
if
(
index
!=
-
1
)
{
String
basepath
=
parentLocation
.
substring
(
0
,
index
+
1
)
;
String
resolvedPath
=
basepath
+
relativeLocation
;
try
{
URI
resolvedUri
=
new
URI
(
resolvedPath
)
;
if
(
!
resolvedUri
.
isAbsolute
(
)
)
{
resolvedUri
=
new
URI
(
"file:"
+
resolvedPath
)
;
}
return
resolvedUri
.
toString
(
)
;
}
catch
(
URISyntaxException
e
)
{
handleException
(
"Invalid URI ' "
+
resolvedPath
+
" '"
,
e
)
;
}
}
else
{
return
importUri
.
toString
(
)
;
}
}
}
return
null
;
}
}
