package
org
.
apache
.
synapse
.
statistics
.
impl
;
import
org
.
apache
.
synapse
.
statistics
.
StatisticsStack
;
import
org
.
apache
.
synapse
.
statistics
.
StatisticsCollector
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
public
class
SequenceStatisticsStack
implements
StatisticsStack
{
private
List
sequenceStatisticsList
=
new
ArrayList
(
)
;
public
void
put
(
String
sequenceName
,
long
initTime
,
boolean
isInFlow
,
boolean
isStatisticsEnable
,
boolean
isFault
)
{
sequenceStatisticsList
.
add
(
new
SequenceStatistics
(
sequenceName
,
initTime
,
isInFlow
,
isStatisticsEnable
,
isFault
)
)
;
}
public
void
reportToStatisticsCollector
(
StatisticsCollector
statisticsCollector
,
boolean
isFault
)
{
int
top
=
sequenceStatisticsList
.
size
(
)
;
if
(
top
>
0
)
{
popSequenceStatistics
(
sequenceStatisticsList
.
size
(
)
-
1
,
statisticsCollector
)
;
}
}
public
void
reportToStatisticsCollector
(
StatisticsCollector
statisticsCollector
,
boolean
isFault
,
String
name
)
{
if
(
!
sequenceStatisticsList
.
isEmpty
(
)
)
{
List
tobeRemoved
=
new
ArrayList
(
)
;
for
(
Iterator
seqIterator
=
sequenceStatisticsList
.
iterator
(
)
;
seqIterator
.
hasNext
(
)
;
)
{
SequenceStatistics
sequenceStatistics
=
(
SequenceStatistics
)
seqIterator
.
next
(
)
;
if
(
sequenceStatistics
!=
null
)
{
if
(
sequenceStatistics
.
isStatisticsEnable
&&
sequenceStatistics
.
sequenceName
!=
null
&&
sequenceStatistics
.
sequenceName
.
equals
(
name
)
)
{
statisticsCollector
.
reportForSequence
(
sequenceStatistics
.
sequenceName
,
!
sequenceStatistics
.
isInFlow
,
sequenceStatistics
.
initTime
,
System
.
currentTimeMillis
(
)
,
sequenceStatistics
.
isFault
)
;
}
tobeRemoved
.
add
(
sequenceStatistics
)
;
}
}
sequenceStatisticsList
.
removeAll
(
tobeRemoved
)
;
}
}
public
void
reportAllToStatisticsCollector
(
StatisticsCollector
statisticsCollector
,
boolean
isFault
)
{
int
i
=
sequenceStatisticsList
.
size
(
)
-
1
;
for
(
;
i
>=
0
;
i
--
)
{
popSequenceStatistics
(
i
,
statisticsCollector
)
;
}
}
private
void
popSequenceStatistics
(
int
index
,
StatisticsCollector
statisticsCollector
)
{
if
(
index
>=
0
)
{
SequenceStatistics
sequenceStatistics
=
(
SequenceStatistics
)
sequenceStatisticsList
.
get
(
index
)
;
if
(
sequenceStatistics
!=
null
)
{
if
(
sequenceStatistics
.
isStatisticsEnable
&&
sequenceStatistics
.
sequenceName
!=
null
)
{
statisticsCollector
.
reportForSequence
(
sequenceStatistics
.
sequenceName
,
!
sequenceStatistics
.
isInFlow
,
sequenceStatistics
.
initTime
,
System
.
currentTimeMillis
(
)
,
sequenceStatistics
.
isFault
)
;
}
sequenceStatisticsList
.
remove
(
index
)
;
}
}
}
class
SequenceStatistics
{
String
sequenceName
;
long
initTime
;
boolean
isInFlow
;
boolean
isStatisticsEnable
;
private
boolean
isFault
;
public
SequenceStatistics
(
String
sequenceName
,
long
initTime
,
boolean
inFlow
,
boolean
statisticsEnable
,
boolean
isFault
)
{
this
.
sequenceName
=
sequenceName
;
this
.
initTime
=
initTime
;
isInFlow
=
inFlow
;
isStatisticsEnable
=
statisticsEnable
;
this
.
isFault
=
isFault
;
}
public
boolean
equals
(
Object
o
)
{
if
(
this
==
o
)
return
true
;
if
(
o
==
null
||
getClass
(
)
!=
o
.
getClass
(
)
)
return
false
;
final
SequenceStatistics
that
=
(
SequenceStatistics
)
o
;
if
(
!
sequenceName
.
equals
(
that
.
sequenceName
)
)
return
false
;
return
true
;
}
public
int
hashCode
(
)
{
return
sequenceName
.
hashCode
(
)
;
}
}
}
