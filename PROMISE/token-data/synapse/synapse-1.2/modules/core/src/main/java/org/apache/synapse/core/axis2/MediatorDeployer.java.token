package
org
.
apache
.
synapse
.
core
.
axis2
;
import
org
.
apache
.
axis2
.
context
.
ConfigurationContext
;
import
org
.
apache
.
axis2
.
deployment
.
Deployer
;
import
org
.
apache
.
axis2
.
deployment
.
DeploymentClassLoader
;
import
org
.
apache
.
axis2
.
deployment
.
DeploymentException
;
import
org
.
apache
.
axis2
.
deployment
.
repository
.
util
.
DeploymentFileData
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
config
.
xml
.
MediatorFactory
;
import
org
.
apache
.
synapse
.
config
.
xml
.
MediatorFactoryFinder
;
import
org
.
apache
.
synapse
.
config
.
xml
.
MediatorSerializer
;
import
org
.
apache
.
synapse
.
config
.
xml
.
MediatorSerializerFinder
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
net
.
URL
;
public
class
MediatorDeployer
implements
Deployer
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
MediatorDeployer
.
class
)
;
private
ConfigurationContext
cfgCtx
=
null
;
public
void
init
(
ConfigurationContext
configurationContext
)
{
this
.
cfgCtx
=
configurationContext
;
}
public
void
deploy
(
DeploymentFileData
deploymentFileData
)
throws
DeploymentException
{
log
.
info
(
"Loading mediator from: "
+
deploymentFileData
.
getAbsolutePath
(
)
)
;
ClassLoader
prevCl
=
Thread
.
currentThread
(
)
.
getContextClassLoader
(
)
;
try
{
DeploymentClassLoader
urlCl
=
new
DeploymentClassLoader
(
new
URL
[
]
{
deploymentFileData
.
getFile
(
)
.
toURL
(
)
}
,
null
,
prevCl
)
;
Thread
.
currentThread
(
)
.
setContextClassLoader
(
urlCl
)
;
URL
facURL
=
urlCl
.
findResource
(
"META-INF/services/org.apache.synapse.config.xml.MediatorFactory"
)
;
if
(
facURL
!=
null
)
{
InputStream
facStream
=
facURL
.
openStream
(
)
;
InputStreamReader
facreader
=
new
InputStreamReader
(
facStream
)
;
StringBuffer
facSB
=
new
StringBuffer
(
)
;
int
c
;
while
(
(
c
=
facreader
.
read
(
)
)
!=
-
1
)
{
facSB
.
append
(
(
char
)
c
)
;
}
String
[
]
facClassNames
=
facSB
.
toString
(
)
.
split
(
"\n"
)
;
for
(
String
facClassName
:
facClassNames
)
{
log
.
info
(
"Registering the Mediator factory: "
+
facClassName
)
;
Class
facClass
=
urlCl
.
loadClass
(
facClassName
)
;
MediatorFactory
facInst
=
(
MediatorFactory
)
facClass
.
newInstance
(
)
;
MediatorFactoryFinder
.
getInstance
(
)
.
getFactoryMap
(
)
.
put
(
facInst
.
getTagQName
(
)
,
facClass
)
;
log
.
info
(
"Mediator loaded and registered for "
+
"the tag name: "
+
facInst
.
getTagQName
(
)
)
;
}
}
else
{
handleException
(
"Unable to find the MediatorFactory implementation. "
+
"Unable to register the MediatorFactory with the FactoryFinder"
)
;
}
URL
serURL
=
urlCl
.
findResource
(
"META-INF/services/org.apache.synapse.config.xml.MediatorSerializer"
)
;
if
(
serURL
!=
null
)
{
InputStream
serStream
=
serURL
.
openStream
(
)
;
InputStreamReader
serReader
=
new
InputStreamReader
(
serStream
)
;
StringBuffer
serSB
=
new
StringBuffer
(
)
;
int
c
;
while
(
(
c
=
serReader
.
read
(
)
)
!=
-
1
)
{
serSB
.
append
(
(
char
)
c
)
;
}
String
[
]
serClassNames
=
serSB
.
toString
(
)
.
split
(
"\n"
)
;
for
(
String
serClassName
:
serClassNames
)
{
log
.
info
(
"Registering the Mediator serializer: "
+
serClassName
)
;
Class
serClass
=
urlCl
.
loadClass
(
serClassName
)
;
MediatorSerializer
serInst
=
(
MediatorSerializer
)
serClass
.
newInstance
(
)
;
MediatorSerializerFinder
.
getInstance
(
)
.
getSerializerMap
(
)
.
put
(
serInst
.
getMediatorClassName
(
)
,
serInst
)
;
log
.
info
(
"Mediator loaded and registered for "
+
"the serialization as: "
+
serInst
.
getMediatorClassName
(
)
)
;
}
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Unable to find the MediatorSerializer implementation. "
+
"Unable to register the MediatorSerializer with the SerializerFinder"
)
;
}
}
}
catch
(
IOException
e
)
{
handleException
(
"I/O error in reading the mediator jar file"
,
e
)
;
}
catch
(
ClassNotFoundException
e
)
{
handleException
(
"Unable to find the specified class on the path or in the jar file"
,
e
)
;
}
catch
(
IllegalAccessException
e
)
{
handleException
(
"Unable to load the class from the jar"
,
e
)
;
}
catch
(
InstantiationException
e
)
{
handleException
(
"Unable to instantiate the class specified"
,
e
)
;
}
finally
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Restoring the context class loader to the original"
)
;
}
Thread
.
currentThread
(
)
.
setContextClassLoader
(
prevCl
)
;
}
}
public
void
setDirectory
(
String
string
)
{
}
public
void
setExtension
(
String
string
)
{
}
public
void
unDeploy
(
String
string
)
throws
DeploymentException
{
}
private
void
handleException
(
String
message
,
Exception
e
)
throws
DeploymentException
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
message
,
e
)
;
}
throw
new
DeploymentException
(
message
,
e
)
;
}
private
void
handleException
(
String
message
)
throws
DeploymentException
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
message
)
;
}
throw
new
DeploymentException
(
message
)
;
}
}
