package
org
.
apache
.
synapse
.
mediators
.
builtin
;
import
org
.
apache
.
axiom
.
om
.
OMNode
;
import
org
.
apache
.
axiom
.
soap
.
SOAP11Constants
;
import
org
.
apache
.
axiom
.
soap
.
SOAP12Constants
;
import
org
.
apache
.
synapse
.
FaultHandler
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
config
.
Entry
;
import
org
.
apache
.
synapse
.
config
.
SynapseConfigUtils
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractListMediator
;
import
org
.
apache
.
synapse
.
mediators
.
MediatorProperty
;
import
org
.
apache
.
synapse
.
util
.
AXIOMUtils
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
SynapseXPath
;
import
org
.
jaxen
.
JaxenException
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
SAXParseException
;
import
org
.
xml
.
sax
.
helpers
.
DefaultHandler
;
import
javax
.
xml
.
XMLConstants
;
import
javax
.
xml
.
transform
.
Source
;
import
javax
.
xml
.
transform
.
stream
.
StreamSource
;
import
javax
.
xml
.
validation
.
Schema
;
import
javax
.
xml
.
validation
.
SchemaFactory
;
import
javax
.
xml
.
validation
.
Validator
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
ValidateMediator
extends
AbstractListMediator
{
private
List
<
String
>
schemaKeys
=
new
ArrayList
<
String
>
(
)
;
private
SynapseXPath
source
=
null
;
private
List
<
MediatorProperty
>
explicityFeatures
=
new
ArrayList
<
MediatorProperty
>
(
)
;
private
Schema
cachedSchema
;
private
final
Object
validatorLock
=
new
Object
(
)
;
private
SchemaFactory
factory
=
SchemaFactory
.
newInstance
(
XMLConstants
.
W3C_XML_SCHEMA_NS_URI
)
;
public
static
final
String
DEFAULT_XPATH
=
"s11:Body/child::*[position()=1] | "
+
"s12:Body/child::*[position()=1]"
;
public
ValidateMediator
(
)
{
try
{
this
.
source
=
new
SynapseXPath
(
DEFAULT_XPATH
)
;
this
.
source
.
addNamespace
(
"s11"
,
SOAP11Constants
.
SOAP_ENVELOPE_NAMESPACE_URI
)
;
this
.
source
.
addNamespace
(
"s12"
,
SOAP12Constants
.
SOAP_ENVELOPE_NAMESPACE_URI
)
;
}
catch
(
JaxenException
e
)
{
String
msg
=
"Error creating default source XPath expression : "
+
DEFAULT_XPATH
;
log
.
error
(
msg
,
e
)
;
throw
new
SynapseException
(
msg
,
e
)
;
}
}
public
boolean
mediate
(
MessageContext
synCtx
)
{
boolean
traceOn
=
isTraceOn
(
synCtx
)
;
boolean
traceOrDebugOn
=
isTraceOrDebugOn
(
traceOn
)
;
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Start : Validate mediator"
)
;
if
(
traceOn
&&
trace
.
isTraceEnabled
(
)
)
{
trace
.
trace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
Source
validateSrc
=
getValidationSource
(
synCtx
,
traceOrDebugOn
,
traceOn
)
;
boolean
reCreate
=
false
;
for
(
String
propKey
:
schemaKeys
)
{
Entry
dp
=
synCtx
.
getConfiguration
(
)
.
getEntryDefinition
(
propKey
)
;
if
(
dp
!=
null
&&
dp
.
isDynamic
(
)
)
{
if
(
!
dp
.
isCached
(
)
||
dp
.
isExpired
(
)
)
{
reCreate
=
true
;
}
}
}
MyErrorHandler
errorHandler
=
new
MyErrorHandler
(
)
;
synchronized
(
validatorLock
)
{
if
(
reCreate
||
cachedSchema
==
null
)
{
factory
.
setErrorHandler
(
errorHandler
)
;
StreamSource
[
]
sources
=
new
StreamSource
[
schemaKeys
.
size
(
)
]
;
int
i
=
0
;
for
(
String
propName
:
schemaKeys
)
{
sources
[
i
++
]
=
SynapseConfigUtils
.
getStreamSource
(
synCtx
.
getEntry
(
propName
)
)
;
}
try
{
cachedSchema
=
factory
.
newSchema
(
sources
)
;
}
catch
(
SAXException
e
)
{
handleException
(
"Error creating a new schema objects for "
+
"schemas : "
+
schemaKeys
.
toString
(
)
,
e
,
synCtx
)
;
}
if
(
errorHandler
.
isValidationError
(
)
)
{
errorHandler
.
setValidationError
(
false
)
;
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Error creating a new schema objects for "
+
"schemas : "
+
schemaKeys
.
toString
(
)
)
;
}
}
}
}
try
{
Validator
validator
=
cachedSchema
.
newValidator
(
)
;
validator
.
setErrorHandler
(
errorHandler
)
;
validator
.
validate
(
validateSrc
)
;
if
(
errorHandler
.
isValidationError
(
)
)
{
if
(
traceOrDebugOn
)
{
String
msg
=
"Validation of element returned by XPath : "
+
source
+
" failed against the given schema(s) "
+
schemaKeys
+
"with error : "
+
errorHandler
.
getSaxParseException
(
)
.
getMessage
(
)
+
" Executing 'on-fail' sequence"
;
traceOrDebug
(
traceOn
,
msg
)
;
synCtx
.
getServiceLog
(
)
.
warn
(
msg
)
;
if
(
traceOn
&&
trace
.
isTraceEnabled
(
)
)
{
log
.
debug
(
"Failed message envelope : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_MESSAGE
,
errorHandler
.
getSaxParseException
(
)
.
getMessage
(
)
)
;
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_EXCEPTION
,
errorHandler
.
getSaxParseException
(
)
)
;
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_DETAIL
,
FaultHandler
.
getStackTrace
(
errorHandler
.
getSaxParseException
(
)
)
)
;
return
super
.
mediate
(
synCtx
)
;
}
}
catch
(
SAXException
e
)
{
handleException
(
"Error validating "
+
source
+
" element"
,
e
,
synCtx
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Error validating "
+
source
+
" element"
,
e
,
synCtx
)
;
}
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Validation of element returned by the XPath expression : "
+
source
+
" succeeded against the given schemas and the current message"
)
;
}
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"End : Validate mediator"
)
;
}
return
true
;
}
private
Source
getValidationSource
(
MessageContext
synCtx
,
boolean
traceOrDebugOn
,
boolean
traceOn
)
{
try
{
OMNode
validateSource
=
getValidateSource
(
synCtx
)
;
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Validation source : "
+
validateSource
.
toString
(
)
)
;
}
return
AXIOMUtils
.
asSource
(
validateSource
)
;
}
catch
(
Exception
e
)
{
handleException
(
"Error accessing source element : "
+
source
,
e
,
synCtx
)
;
}
return
null
;
}
private
class
MyErrorHandler
extends
DefaultHandler
{
private
boolean
validationError
=
false
;
private
SAXParseException
saxParseException
=
null
;
public
void
error
(
SAXParseException
exception
)
throws
SAXException
{
validationError
=
true
;
saxParseException
=
exception
;
}
public
void
fatalError
(
SAXParseException
exception
)
throws
SAXException
{
validationError
=
true
;
saxParseException
=
exception
;
}
public
void
warning
(
SAXParseException
exception
)
throws
SAXException
{
}
public
boolean
isValidationError
(
)
{
return
validationError
;
}
public
SAXParseException
getSaxParseException
(
)
{
return
saxParseException
;
}
public
void
setValidationError
(
boolean
validationError
)
{
this
.
validationError
=
validationError
;
}
}
private
OMNode
getValidateSource
(
MessageContext
synCtx
)
{
try
{
Object
o
=
source
.
evaluate
(
synCtx
)
;
if
(
o
instanceof
OMNode
)
{
return
(
OMNode
)
o
;
}
else
if
(
o
instanceof
List
&&
!
(
(
List
)
o
)
.
isEmpty
(
)
)
{
return
(
OMNode
)
(
(
List
)
o
)
.
get
(
0
)
;
}
else
{
handleException
(
"The evaluation of the XPath expression "
+
source
+
" did not result in an OMNode : "
+
o
,
synCtx
)
;
}
}
catch
(
JaxenException
e
)
{
handleException
(
"Error evaluating XPath expression : "
+
source
,
e
,
synCtx
)
;
}
return
null
;
}
public
Object
getFeature
(
String
key
)
{
for
(
MediatorProperty
prop
:
explicityFeatures
)
{
if
(
key
.
equals
(
prop
.
getName
(
)
)
)
{
return
prop
.
getValue
(
)
;
}
}
return
null
;
}
public
void
addFeature
(
String
featureName
,
boolean
isFeatureEnable
)
throws
SAXException
{
MediatorProperty
mp
=
new
MediatorProperty
(
)
;
mp
.
setName
(
featureName
)
;
if
(
isFeatureEnable
)
{
mp
.
setValue
(
"true"
)
;
}
else
{
mp
.
setValue
(
"false"
)
;
}
explicityFeatures
.
add
(
mp
)
;
factory
.
setFeature
(
featureName
,
isFeatureEnable
)
;
}
public
void
setSchemaKeys
(
List
<
String
>
schemaKeys
)
{
this
.
schemaKeys
=
schemaKeys
;
}
public
void
setSource
(
SynapseXPath
source
)
{
this
.
source
=
source
;
}
public
SynapseXPath
getSource
(
)
{
return
source
;
}
public
List
<
String
>
getSchemaKeys
(
)
{
return
schemaKeys
;
}
public
List
<
MediatorProperty
>
getFeatures
(
)
{
return
explicityFeatures
;
}
}
