package
org
.
apache
.
synapse
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
java
.
util
.
Stack
;
import
java
.
io
.
StringWriter
;
import
java
.
io
.
Writer
;
import
java
.
io
.
PrintWriter
;
public
abstract
class
FaultHandler
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
FaultHandler
.
class
)
;
private
static
final
Log
trace
=
LogFactory
.
getLog
(
SynapseConstants
.
TRACE_LOGGER
)
;
public
void
handleFault
(
MessageContext
synCtx
)
{
boolean
traceOn
=
synCtx
.
getTracingState
(
)
==
SynapseConstants
.
TRACING_ON
;
boolean
traceOrDebugOn
=
traceOn
||
log
.
isDebugEnabled
(
)
;
if
(
traceOrDebugOn
)
{
traceOrDebugWarn
(
traceOn
,
"FaultHandler executing impl: "
+
this
.
getClass
(
)
.
getName
(
)
)
;
}
try
{
synCtx
.
getServiceLog
(
)
.
info
(
"FaultHandler executing impl: "
+
this
.
getClass
(
)
.
getName
(
)
)
;
onFault
(
synCtx
)
;
}
catch
(
SynapseException
e
)
{
Stack
faultStack
=
synCtx
.
getFaultStack
(
)
;
if
(
faultStack
!=
null
&&
!
faultStack
.
isEmpty
(
)
)
{
(
(
FaultHandler
)
faultStack
.
pop
(
)
)
.
handleFault
(
synCtx
)
;
}
}
}
public
void
handleFault
(
MessageContext
synCtx
,
Exception
e
)
{
boolean
traceOn
=
synCtx
.
getTracingState
(
)
==
SynapseConstants
.
TRACING_ON
;
boolean
traceOrDebugOn
=
traceOn
||
log
.
isDebugEnabled
(
)
;
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_CODE
,
"00000"
)
;
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_MESSAGE
,
e
.
getMessage
(
)
.
split
(
"\n"
)
[
0
]
)
;
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_DETAIL
,
getStackTrace
(
e
)
)
;
synCtx
.
setProperty
(
SynapseConstants
.
ERROR_EXCEPTION
,
e
)
;
if
(
traceOrDebugOn
)
{
traceOrDebugWarn
(
traceOn
,
"Fault handler - setting ERROR_MESSAGE : "
+
synCtx
.
getProperty
(
SynapseConstants
.
ERROR_MESSAGE
)
)
;
traceOrDebugWarn
(
traceOn
,
"Fault handler - setting ERROR_DETAIL : "
+
synCtx
.
getProperty
(
SynapseConstants
.
ERROR_DETAIL
)
)
;
traceOrDebugWarn
(
traceOn
,
"Fault handler - setting ERROR_EXCEPTION : "
+
synCtx
.
getProperty
(
SynapseConstants
.
ERROR_EXCEPTION
)
)
;
}
synCtx
.
getServiceLog
(
)
.
warn
(
"Fault handler - setting ERROR_MESSAGE : "
+
synCtx
.
getProperty
(
SynapseConstants
.
ERROR_MESSAGE
)
)
;
try
{
onFault
(
synCtx
)
;
}
catch
(
SynapseException
se
)
{
Stack
faultStack
=
synCtx
.
getFaultStack
(
)
;
if
(
faultStack
!=
null
&&
!
faultStack
.
isEmpty
(
)
)
{
(
(
FaultHandler
)
faultStack
.
pop
(
)
)
.
handleFault
(
synCtx
,
se
)
;
}
}
}
public
abstract
void
onFault
(
MessageContext
synCtx
)
;
public
static
String
getStackTrace
(
Throwable
aThrowable
)
{
final
Writer
result
=
new
StringWriter
(
)
;
final
PrintWriter
printWriter
=
new
PrintWriter
(
result
)
;
aThrowable
.
printStackTrace
(
printWriter
)
;
return
result
.
toString
(
)
;
}
private
void
traceOrDebugWarn
(
boolean
traceOn
,
String
msg
)
{
if
(
traceOn
)
{
trace
.
warn
(
msg
)
;
}
log
.
warn
(
msg
)
;
}
}
