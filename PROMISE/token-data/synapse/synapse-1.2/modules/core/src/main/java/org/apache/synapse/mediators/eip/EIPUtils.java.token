package
org
.
apache
.
synapse
.
mediators
.
eip
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axiom
.
om
.
OMNode
;
import
org
.
apache
.
axiom
.
soap
.
SOAPEnvelope
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
SynapseXPath
;
import
org
.
jaxen
.
JaxenException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
public
class
EIPUtils
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
EIPUtils
.
class
)
;
public
static
List
getMatchingElements
(
SOAPEnvelope
envelope
,
SynapseXPath
expression
)
throws
JaxenException
{
Object
o
=
expression
.
evaluate
(
envelope
)
;
if
(
o
instanceof
OMNode
)
{
List
list
=
new
ArrayList
(
)
;
list
.
add
(
o
)
;
return
list
;
}
else
if
(
o
instanceof
List
)
{
return
(
List
)
o
;
}
else
{
return
new
ArrayList
(
)
;
}
}
public
static
List
<
OMNode
>
getDetachedMatchingElements
(
SOAPEnvelope
envelope
,
SynapseXPath
expression
)
throws
JaxenException
{
List
<
OMNode
>
elementList
=
new
ArrayList
<
OMNode
>
(
)
;
Object
o
=
expression
.
evaluate
(
envelope
)
;
if
(
o
instanceof
OMNode
)
{
elementList
.
add
(
(
(
OMNode
)
o
)
.
detach
(
)
)
;
}
else
if
(
o
instanceof
List
)
{
for
(
Object
elem
:
(
List
)
o
)
{
if
(
elem
instanceof
OMNode
)
{
elementList
.
add
(
(
(
OMNode
)
elem
)
.
detach
(
)
)
;
}
}
}
return
elementList
;
}
public
static
void
enrichEnvelope
(
SOAPEnvelope
envelope
,
SOAPEnvelope
enricher
,
SynapseXPath
expression
)
throws
JaxenException
{
OMElement
enrichingElement
;
List
elementList
=
getMatchingElements
(
envelope
,
expression
)
;
if
(
elementList
!=
null
&&
!
elementList
.
isEmpty
(
)
)
{
Object
o
=
elementList
.
get
(
0
)
;
if
(
o
instanceof
OMElement
&&
(
(
OMElement
)
o
)
.
getParent
(
)
!=
null
&&
(
(
OMElement
)
o
)
.
getParent
(
)
instanceof
OMElement
)
{
enrichingElement
=
(
OMElement
)
(
(
OMElement
)
o
)
.
getParent
(
)
;
}
else
{
enrichingElement
=
envelope
.
getBody
(
)
;
}
List
list
=
getMatchingElements
(
enricher
,
expression
)
;
if
(
list
!=
null
)
{
Iterator
itr
=
list
.
iterator
(
)
;
while
(
itr
.
hasNext
(
)
)
{
o
=
itr
.
next
(
)
;
if
(
o
!=
null
&&
o
instanceof
OMElement
)
{
enrichingElement
.
addChild
(
(
OMElement
)
o
)
;
}
}
}
}
}
}
