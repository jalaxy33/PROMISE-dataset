package
org
.
apache
.
synapse
.
config
;
import
org
.
apache
.
axis2
.
AxisFault
;
import
org
.
apache
.
axis2
.
engine
.
AxisConfiguration
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
*
;
import
org
.
apache
.
synapse
.
config
.
xml
.
MediatorFactoryFinder
;
import
org
.
apache
.
synapse
.
config
.
xml
.
endpoints
.
XMLToEndpointMapper
;
import
org
.
apache
.
synapse
.
core
.
SynapseEnvironment
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
ProxyService
;
import
org
.
apache
.
synapse
.
endpoints
.
Endpoint
;
import
org
.
apache
.
synapse
.
mediators
.
base
.
SequenceMediator
;
import
org
.
apache
.
synapse
.
registry
.
Registry
;
import
javax
.
xml
.
namespace
.
QName
;
import
java
.
io
.
IOException
;
import
java
.
util
.
*
;
public
class
SynapseConfiguration
implements
ManagedLifecycle
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
SynapseConfiguration
.
class
)
;
Registry
registry
=
null
;
private
QName
defaultQName
=
null
;
private
Mediator
mandatorySequence
=
null
;
private
Map
<
String
,
ProxyService
>
proxyServices
=
new
HashMap
<
String
,
ProxyService
>
(
)
;
private
Map
<
String
,
Startup
>
startups
=
new
HashMap
<
String
,
Startup
>
(
)
;
private
Map
<
String
,
Object
>
localRegistry
=
new
HashMap
<
String
,
Object
>
(
)
;
private
Properties
properties
=
new
Properties
(
)
;
private
Timer
synapseTimer
=
new
Timer
(
true
)
;
private
AxisConfiguration
axisConfiguration
=
null
;
private
String
pathToConfigFile
=
null
;
public
void
addSequence
(
String
key
,
Mediator
mediator
)
{
localRegistry
.
put
(
key
,
mediator
)
;
}
public
void
addSequence
(
String
key
,
Entry
entry
)
{
localRegistry
.
put
(
key
,
entry
)
;
}
public
Map
<
String
,
SequenceMediator
>
getDefinedSequences
(
)
{
Map
<
String
,
SequenceMediator
>
definedSequences
=
new
HashMap
<
String
,
SequenceMediator
>
(
)
;
for
(
Object
o
:
localRegistry
.
values
(
)
)
{
if
(
o
instanceof
SequenceMediator
)
{
SequenceMediator
seq
=
(
SequenceMediator
)
o
;
definedSequences
.
put
(
seq
.
getName
(
)
,
seq
)
;
}
}
return
definedSequences
;
}
public
Mediator
getMandatorySequence
(
)
{
return
mandatorySequence
;
}
public
void
setMandatorySequence
(
Mediator
mandatorySequence
)
{
this
.
mandatorySequence
=
mandatorySequence
;
}
public
Mediator
getSequence
(
String
key
)
{
Object
o
=
localRegistry
.
get
(
key
)
;
if
(
o
!=
null
&&
o
instanceof
Mediator
)
{
return
(
Mediator
)
o
;
}
Entry
entry
;
if
(
o
!=
null
&&
o
instanceof
Entry
)
{
entry
=
(
Entry
)
o
;
}
else
{
entry
=
new
Entry
(
key
)
;
entry
.
setType
(
Entry
.
REMOTE_ENTRY
)
;
entry
.
setMapper
(
MediatorFactoryFinder
.
getInstance
(
)
)
;
}
if
(
registry
!=
null
)
{
o
=
registry
.
getResource
(
entry
)
;
if
(
o
!=
null
&&
o
instanceof
Mediator
)
{
localRegistry
.
put
(
key
,
entry
)
;
return
(
Mediator
)
o
;
}
}
return
null
;
}
public
void
removeSequence
(
String
key
)
{
localRegistry
.
remove
(
key
)
;
}
public
Mediator
getMainSequence
(
)
{
return
getSequence
(
SynapseConstants
.
MAIN_SEQUENCE_KEY
)
;
}
public
Mediator
getFaultSequence
(
)
{
return
getSequence
(
SynapseConstants
.
FAULT_SEQUENCE_KEY
)
;
}
public
void
addEntry
(
String
key
,
Entry
entry
)
{
if
(
entry
.
getType
(
)
==
Entry
.
URL_SRC
&&
entry
.
getValue
(
)
==
null
)
{
try
{
entry
.
setValue
(
SynapseConfigUtils
.
getOMElementFromURL
(
entry
.
getSrc
(
)
.
toString
(
)
)
)
;
localRegistry
.
put
(
key
,
entry
)
;
}
catch
(
IOException
e
)
{
handleException
(
"Can not read from source URL : "
+
entry
.
getSrc
(
)
)
;
}
}
else
{
localRegistry
.
put
(
key
,
entry
)
;
}
}
public
Map
<
String
,
Entry
>
getCachedEntries
(
)
{
Map
<
String
,
Entry
>
cachedEntries
=
new
HashMap
<
String
,
Entry
>
(
)
;
for
(
Object
o
:
localRegistry
.
values
(
)
)
{
if
(
o
!=
null
&&
o
instanceof
Entry
)
{
Entry
entry
=
(
Entry
)
o
;
if
(
entry
.
isDynamic
(
)
&&
entry
.
isCached
(
)
)
{
cachedEntries
.
put
(
entry
.
getKey
(
)
,
entry
)
;
}
}
}
return
cachedEntries
;
}
public
Map
<
String
,
Entry
>
getDefinedEntries
(
)
{
Map
<
String
,
Entry
>
definedEntries
=
new
HashMap
<
String
,
Entry
>
(
)
;
for
(
Object
o
:
localRegistry
.
values
(
)
)
{
if
(
o
instanceof
Entry
&&
(
(
Entry
)
o
)
.
getType
(
)
!=
Entry
.
REMOTE_ENTRY
)
{
Entry
entry
=
(
Entry
)
o
;
definedEntries
.
put
(
entry
.
getKey
(
)
,
entry
)
;
}
}
return
definedEntries
;
}
public
Object
getEntry
(
String
key
)
{
Object
o
=
localRegistry
.
get
(
key
)
;
if
(
o
!=
null
&&
o
instanceof
Entry
)
{
Entry
entry
=
(
Entry
)
o
;
if
(
entry
.
isDynamic
(
)
)
{
if
(
entry
.
isCached
(
)
&&
!
entry
.
isExpired
(
)
)
{
return
entry
.
getValue
(
)
;
}
else
if
(
registry
!=
null
)
{
o
=
registry
.
getResource
(
entry
)
;
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Will not  evaluate the value of the remote entry with a key "
+
key
+
",  because the registry is not available"
)
;
}
return
null
;
}
}
else
{
return
entry
.
getValue
(
)
;
}
}
return
o
;
}
public
Entry
getEntryDefinition
(
String
key
)
{
Object
o
=
localRegistry
.
get
(
key
)
;
if
(
o
==
null
||
o
instanceof
Entry
)
{
if
(
o
==
null
)
{
Entry
entry
=
new
Entry
(
key
)
;
entry
.
setType
(
Entry
.
REMOTE_ENTRY
)
;
addEntry
(
key
,
entry
)
;
return
entry
;
}
return
(
Entry
)
o
;
}
else
{
handleException
(
"Invalid local registry entry : "
+
key
)
;
return
null
;
}
}
public
void
removeEntry
(
String
key
)
{
localRegistry
.
remove
(
key
)
;
}
public
void
clearCachedEntry
(
String
key
)
{
Entry
entry
=
getEntryDefinition
(
key
)
;
if
(
entry
.
isDynamic
(
)
&&
entry
.
isCached
(
)
)
{
entry
.
clearCache
(
)
;
}
}
public
void
clearCache
(
)
{
for
(
Object
o
:
localRegistry
.
values
(
)
)
{
if
(
o
!=
null
&&
o
instanceof
Entry
)
{
Entry
entry
=
(
Entry
)
o
;
if
(
entry
.
isDynamic
(
)
&&
entry
.
isCached
(
)
)
{
entry
.
clearCache
(
)
;
}
}
}
}
public
void
addEndpoint
(
String
key
,
Endpoint
endpoint
)
{
localRegistry
.
put
(
key
,
endpoint
)
;
}
public
void
addEndpoint
(
String
key
,
Entry
entry
)
{
localRegistry
.
put
(
key
,
entry
)
;
}
public
Map
<
String
,
Endpoint
>
getDefinedEndpoints
(
)
{
Map
<
String
,
Endpoint
>
definedEndpoints
=
new
HashMap
<
String
,
Endpoint
>
(
)
;
for
(
Object
o
:
localRegistry
.
values
(
)
)
{
if
(
o
instanceof
Endpoint
)
{
Endpoint
ep
=
(
Endpoint
)
o
;
definedEndpoints
.
put
(
ep
.
getName
(
)
,
ep
)
;
}
}
return
definedEndpoints
;
}
public
Endpoint
getEndpoint
(
String
key
)
{
Object
o
=
localRegistry
.
get
(
key
)
;
if
(
o
!=
null
&&
o
instanceof
Endpoint
)
{
return
(
Endpoint
)
o
;
}
Entry
entry
;
if
(
o
!=
null
&&
o
instanceof
Entry
)
{
entry
=
(
Entry
)
o
;
}
else
{
entry
=
new
Entry
(
key
)
;
entry
.
setType
(
Entry
.
REMOTE_ENTRY
)
;
entry
.
setMapper
(
XMLToEndpointMapper
.
getInstance
(
)
)
;
}
if
(
registry
!=
null
)
{
o
=
registry
.
getResource
(
entry
)
;
if
(
o
!=
null
&&
o
instanceof
Endpoint
)
{
localRegistry
.
put
(
key
,
entry
)
;
return
(
Endpoint
)
o
;
}
}
return
null
;
}
public
void
removeEndpoint
(
String
key
)
{
localRegistry
.
remove
(
key
)
;
}
public
void
addProxyService
(
String
name
,
ProxyService
proxy
)
{
proxyServices
.
put
(
name
,
proxy
)
;
}
public
ProxyService
getProxyService
(
String
name
)
{
return
proxyServices
.
get
(
name
)
;
}
public
void
removeProxyService
(
String
name
)
{
Object
o
=
proxyServices
.
get
(
name
)
;
if
(
o
==
null
)
{
handleException
(
"Unknown proxy service for name : "
+
name
)
;
}
else
{
try
{
if
(
getAxisConfiguration
(
)
.
getServiceForActivation
(
name
)
!=
null
)
{
if
(
getAxisConfiguration
(
)
.
getServiceForActivation
(
name
)
.
isActive
(
)
)
{
getAxisConfiguration
(
)
.
getService
(
name
)
.
setActive
(
false
)
;
}
getAxisConfiguration
(
)
.
removeService
(
name
)
;
}
proxyServices
.
remove
(
name
)
;
}
catch
(
AxisFault
axisFault
)
{
handleException
(
axisFault
.
getMessage
(
)
)
;
}
}
}
public
Collection
<
ProxyService
>
getProxyServices
(
)
{
return
proxyServices
.
values
(
)
;
}
public
Map
getLocalRegistry
(
)
{
return
Collections
.
unmodifiableMap
(
localRegistry
)
;
}
public
Registry
getRegistry
(
)
{
return
registry
;
}
public
void
setRegistry
(
Registry
registry
)
{
this
.
registry
=
registry
;
}
public
void
setAxisConfiguration
(
AxisConfiguration
axisConfig
)
{
this
.
axisConfiguration
=
axisConfig
;
}
public
AxisConfiguration
getAxisConfiguration
(
)
{
return
axisConfiguration
;
}
public
String
getPathToConfigFile
(
)
{
return
pathToConfigFile
;
}
public
void
setPathToConfigFile
(
String
pathToConfigFile
)
{
this
.
pathToConfigFile
=
pathToConfigFile
;
}
public
void
setDefaultQName
(
QName
defaultQName
)
{
this
.
defaultQName
=
defaultQName
;
}
public
QName
getDefaultQName
(
)
{
return
defaultQName
;
}
public
Timer
getSynapseTimer
(
)
{
return
synapseTimer
;
}
public
Collection
<
Startup
>
getStartups
(
)
{
return
startups
.
values
(
)
;
}
public
Startup
getStartup
(
String
id
)
{
return
startups
.
get
(
id
)
;
}
public
void
addStartup
(
Startup
startup
)
{
startups
.
put
(
startup
.
getName
(
)
,
startup
)
;
}
public
void
removeStartup
(
String
name
)
{
startups
.
remove
(
name
)
;
}
public
Properties
getProperties
(
)
{
return
properties
;
}
public
void
setProperties
(
Properties
properties
)
{
this
.
properties
=
properties
;
}
public
String
getProperty
(
String
propKey
,
String
def
)
{
String
val
=
System
.
getProperty
(
propKey
)
;
if
(
val
==
null
)
{
val
=
properties
.
getProperty
(
propKey
)
;
}
if
(
val
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Using synapse tuning parameter : "
+
propKey
+
" = "
+
val
)
;
}
return
val
;
}
return
def
;
}
public
long
getProperty
(
String
propKey
,
long
def
)
{
String
val
=
System
.
getProperty
(
propKey
)
;
if
(
val
==
null
)
{
val
=
properties
.
getProperty
(
propKey
)
;
}
if
(
val
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Using synapse tuning parameter : "
+
propKey
+
" = "
+
val
)
;
}
return
Long
.
valueOf
(
val
)
;
}
return
def
;
}
public
String
getProperty
(
String
propKey
)
{
String
val
=
System
.
getProperty
(
propKey
)
;
if
(
val
==
null
)
{
val
=
properties
.
getProperty
(
propKey
)
;
}
if
(
val
!=
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Using synapse tuning parameter : "
+
propKey
+
" = "
+
val
)
;
}
return
val
;
}
return
null
;
}
public
void
destroy
(
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Destroying the Synapse Configuration"
)
;
}
synapseTimer
.
cancel
(
)
;
synapseTimer
=
null
;
for
(
ProxyService
p
:
getProxyServices
(
)
)
{
if
(
p
.
getTargetInLineInSequence
(
)
!=
null
)
{
p
.
getTargetInLineInSequence
(
)
.
destroy
(
)
;
}
if
(
p
.
getTargetInLineOutSequence
(
)
!=
null
)
{
p
.
getTargetInLineOutSequence
(
)
.
destroy
(
)
;
}
}
for
(
SequenceMediator
seq
:
getDefinedSequences
(
)
.
values
(
)
)
{
if
(
seq
!=
null
)
{
seq
.
destroy
(
)
;
}
}
if
(
startups
!=
null
)
{
for
(
Startup
stp
:
startups
.
values
(
)
)
{
if
(
stp
!=
null
)
{
stp
.
destroy
(
)
;
}
}
}
}
public
void
init
(
SynapseEnvironment
se
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Initializing the Synapse Configuration"
)
;
}
if
(
registry
!=
null
&&
registry
instanceof
ManagedLifecycle
)
{
(
(
ManagedLifecycle
)
registry
)
.
init
(
se
)
;
}
for
(
ProxyService
p
:
getProxyServices
(
)
)
{
if
(
p
.
getTargetInLineInSequence
(
)
!=
null
)
{
p
.
getTargetInLineInSequence
(
)
.
init
(
se
)
;
}
if
(
p
.
getTargetInLineOutSequence
(
)
!=
null
)
{
p
.
getTargetInLineOutSequence
(
)
.
init
(
se
)
;
}
}
for
(
SequenceMediator
seq
:
getDefinedSequences
(
)
.
values
(
)
)
{
if
(
seq
!=
null
)
{
seq
.
init
(
se
)
;
}
}
}
private
void
handleException
(
String
msg
)
{
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
}
