package
org
.
apache
.
synapse
.
util
.
xpath
;
import
org
.
apache
.
axiom
.
soap
.
SOAPEnvelope
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
jaxen
.
UnresolvableException
;
import
org
.
jaxen
.
VariableContext
;
import
java
.
util
.
Map
;
public
class
SynapseXPathVariableContext
implements
VariableContext
{
private
final
VariableContext
parent
;
private
final
MessageContext
synCtx
;
private
final
SOAPEnvelope
env
;
public
SynapseXPathVariableContext
(
VariableContext
parent
,
MessageContext
synCtx
)
{
this
.
parent
=
parent
;
this
.
synCtx
=
synCtx
;
this
.
env
=
synCtx
.
getEnvelope
(
)
;
}
public
SynapseXPathVariableContext
(
VariableContext
parent
,
SOAPEnvelope
env
)
{
this
.
parent
=
parent
;
this
.
synCtx
=
null
;
this
.
env
=
env
;
}
public
Object
getVariableValue
(
String
namespaceURI
,
String
prefix
,
String
localName
)
throws
UnresolvableException
{
if
(
namespaceURI
==
null
)
{
if
(
env
!=
null
)
{
if
(
SynapseXPathConstants
.
SOAP_BODY_VARIABLE
.
equals
(
localName
)
)
{
return
env
.
getBody
(
)
;
}
else
if
(
SynapseXPathConstants
.
SOAP_HEADER_VARIABLE
.
equals
(
localName
)
)
{
return
env
.
getHeader
(
)
;
}
}
if
(
prefix
!=
null
&&
!
""
.
equals
(
prefix
)
&&
synCtx
!=
null
)
{
if
(
SynapseXPathConstants
.
MESSAGE_CONTEXT_VARIABLE_PREFIX
.
equals
(
prefix
)
)
{
return
synCtx
.
getProperty
(
localName
)
;
}
else
if
(
SynapseXPathConstants
.
AXIS2_CONTEXT_VARIABLE_PREFIX
.
equals
(
prefix
)
)
{
return
(
(
Axis2MessageContext
)
synCtx
)
.
getAxis2MessageContext
(
)
.
getProperty
(
localName
)
;
}
else
if
(
SynapseXPathConstants
.
TRANSPORT_VARIABLE_PREFIX
.
equals
(
prefix
)
)
{
org
.
apache
.
axis2
.
context
.
MessageContext
axis2MessageContext
=
(
(
Axis2MessageContext
)
synCtx
)
.
getAxis2MessageContext
(
)
;
Object
headers
=
axis2MessageContext
.
getProperty
(
org
.
apache
.
axis2
.
context
.
MessageContext
.
TRANSPORT_HEADERS
)
;
if
(
headers
!=
null
&&
headers
instanceof
Map
)
{
Map
headersMap
=
(
Map
)
headers
;
return
headersMap
.
get
(
localName
)
;
}
}
}
}
return
parent
.
getVariableValue
(
namespaceURI
,
prefix
,
localName
)
;
}
}
