package
org
.
apache
.
synapse
.
endpoints
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
FaultHandler
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
endpoints
.
utils
.
EndpointDefinition
;
import
org
.
apache
.
synapse
.
statistics
.
impl
.
EndPointStatisticsStack
;
import
java
.
util
.
Stack
;
public
class
DefaultEndpoint
extends
FaultHandler
implements
Endpoint
{
protected
Log
log
;
protected
static
final
Log
trace
=
LogFactory
.
getLog
(
SynapseConstants
.
TRACE_LOGGER
)
;
private
String
name
=
null
;
private
EndpointDefinition
endpoint
=
null
;
private
Endpoint
parentEndpoint
=
null
;
public
DefaultEndpoint
(
)
{
log
=
LogFactory
.
getLog
(
this
.
getClass
(
)
)
;
}
public
EndpointDefinition
getEndpoint
(
)
{
return
endpoint
;
}
public
void
setEndpoint
(
EndpointDefinition
endpoint
)
{
this
.
endpoint
=
endpoint
;
}
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
.
trim
(
)
;
}
public
boolean
isActive
(
MessageContext
synMessageContext
)
{
return
true
;
}
public
synchronized
void
setActive
(
boolean
active
,
MessageContext
synMessageContext
)
{
}
public
void
send
(
MessageContext
synCtx
)
{
boolean
traceOn
=
isTraceOn
(
synCtx
)
;
boolean
traceOrDebugOn
=
isTraceOrDebugOn
(
traceOn
)
;
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Start : Default Endpoint"
)
;
if
(
traceOn
&&
trace
.
isTraceEnabled
(
)
)
{
trace
.
trace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
String
endPointName
=
this
.
getName
(
)
;
if
(
endPointName
==
null
)
{
endPointName
=
SynapseConstants
.
ANONYMOUS_ENDPOINT
;
}
boolean
statisticsEnable
=
(
SynapseConstants
.
STATISTICS_ON
==
endpoint
.
getStatisticsState
(
)
)
;
if
(
statisticsEnable
)
{
EndPointStatisticsStack
endPointStatisticsStack
=
null
;
Object
statisticsStackObj
=
synCtx
.
getProperty
(
org
.
apache
.
synapse
.
SynapseConstants
.
ENDPOINT_STATS
)
;
if
(
statisticsStackObj
==
null
)
{
endPointStatisticsStack
=
new
EndPointStatisticsStack
(
)
;
synCtx
.
setProperty
(
org
.
apache
.
synapse
.
SynapseConstants
.
ENDPOINT_STATS
,
endPointStatisticsStack
)
;
}
else
if
(
statisticsStackObj
instanceof
EndPointStatisticsStack
)
{
endPointStatisticsStack
=
(
EndPointStatisticsStack
)
statisticsStackObj
;
}
if
(
endPointStatisticsStack
!=
null
)
{
boolean
isFault
=
synCtx
.
getEnvelope
(
)
.
getBody
(
)
.
hasFault
(
)
;
endPointStatisticsStack
.
put
(
endPointName
,
System
.
currentTimeMillis
(
)
,
!
synCtx
.
isResponse
(
)
,
statisticsEnable
,
isFault
)
;
}
}
if
(
synCtx
.
getTo
(
)
!=
null
&&
synCtx
.
getTo
(
)
.
getAddress
(
)
!=
null
)
{
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Sending message to endpoint : "
+
endPointName
+
" resolves to address = "
+
synCtx
.
getTo
(
)
.
getAddress
(
)
)
;
traceOrDebug
(
traceOn
,
"SOAPAction: "
+
(
synCtx
.
getSoapAction
(
)
!=
null
?
synCtx
.
getSoapAction
(
)
:
"null"
)
)
;
traceOrDebug
(
traceOn
,
"WSA-Action: "
+
(
synCtx
.
getWSAAction
(
)
!=
null
?
synCtx
.
getWSAAction
(
)
:
"null"
)
)
;
if
(
traceOn
&&
trace
.
isTraceEnabled
(
)
)
{
trace
.
trace
(
"Envelope : \n"
+
synCtx
.
getEnvelope
(
)
)
;
}
}
}
synCtx
.
pushFaultHandler
(
this
)
;
synCtx
.
setProperty
(
SynapseConstants
.
PROCESSED_ENDPOINT
,
this
)
;
synCtx
.
getEnvironment
(
)
.
send
(
endpoint
,
synCtx
)
;
}
public
void
onChildEndpointFail
(
Endpoint
endpoint
,
MessageContext
synMessageContext
)
{
}
public
void
setParentEndpoint
(
Endpoint
parentEndpoint
)
{
this
.
parentEndpoint
=
parentEndpoint
;
}
public
void
onFault
(
MessageContext
synCtx
)
{
if
(
parentEndpoint
!=
null
)
{
parentEndpoint
.
onChildEndpointFail
(
this
,
synCtx
)
;
}
else
{
Stack
faultStack
=
synCtx
.
getFaultStack
(
)
;
if
(
!
faultStack
.
isEmpty
(
)
)
{
(
(
FaultHandler
)
faultStack
.
pop
(
)
)
.
handleFault
(
synCtx
)
;
}
}
}
protected
boolean
isTraceOn
(
MessageContext
msgCtx
)
{
return
(
endpoint
.
getTraceState
(
)
==
SynapseConstants
.
TRACING_ON
)
||
(
endpoint
.
getTraceState
(
)
==
SynapseConstants
.
TRACING_UNSET
&&
msgCtx
.
getTracingState
(
)
==
SynapseConstants
.
TRACING_ON
)
;
}
protected
boolean
isTraceOrDebugOn
(
boolean
isTraceOn
)
{
return
isTraceOn
||
log
.
isDebugEnabled
(
)
;
}
protected
void
traceOrDebug
(
boolean
traceOn
,
String
msg
)
{
if
(
traceOn
)
{
trace
.
info
(
msg
)
;
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
msg
)
;
}
}
}
