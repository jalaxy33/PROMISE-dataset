package
org
.
apache
.
synapse
.
config
.
xml
;
import
org
.
apache
.
axiom
.
om
.
OMAttribute
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
mediators
.
eip
.
splitter
.
IterateMediator
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
SynapseXPath
;
import
org
.
jaxen
.
JaxenException
;
import
javax
.
xml
.
namespace
.
QName
;
public
class
IterateMediatorFactory
extends
AbstractMediatorFactory
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
IterateMediatorFactory
.
class
)
;
private
static
final
QName
ITERATE_Q
=
new
QName
(
SynapseConstants
.
SYNAPSE_NAMESPACE
,
"iterate"
)
;
private
static
final
QName
ATT_CONTPAR
=
new
QName
(
"continueParent"
)
;
private
static
final
QName
ATT_PREPLD
=
new
QName
(
"preservePayload"
)
;
private
static
final
QName
ATT_ATTACHPATH
=
new
QName
(
"attachPath"
)
;
public
Mediator
createMediator
(
OMElement
elem
)
{
IterateMediator
mediator
=
new
IterateMediator
(
)
;
processTraceState
(
mediator
,
elem
)
;
OMAttribute
continueParent
=
elem
.
getAttribute
(
ATT_CONTPAR
)
;
if
(
continueParent
!=
null
)
{
mediator
.
setContinueParent
(
Boolean
.
valueOf
(
continueParent
.
getAttributeValue
(
)
)
.
booleanValue
(
)
)
;
}
OMAttribute
preservePayload
=
elem
.
getAttribute
(
ATT_PREPLD
)
;
if
(
preservePayload
!=
null
)
{
mediator
.
setPreservePayload
(
Boolean
.
valueOf
(
preservePayload
.
getAttributeValue
(
)
)
.
booleanValue
(
)
)
;
}
OMAttribute
expression
=
elem
.
getAttribute
(
ATT_EXPRN
)
;
if
(
expression
!=
null
)
{
try
{
mediator
.
setExpression
(
SynapseXPathFactory
.
getSynapseXPath
(
elem
,
ATT_EXPRN
)
)
;
}
catch
(
JaxenException
e
)
{
handleException
(
"Unable to build the IterateMediator. "
+
"Invalid XPATH "
+
expression
.
getAttributeValue
(
)
,
e
)
;
}
}
else
{
handleException
(
"XPATH expression is required "
+
"for an IterateMediator under the \"expression\" attribute"
)
;
}
OMAttribute
attachPath
=
elem
.
getAttribute
(
ATT_ATTACHPATH
)
;
String
attachPathValue
=
"."
;
if
(
attachPath
!=
null
&&
!
mediator
.
isPreservePayload
(
)
)
{
handleException
(
"Wrong configuration for the iterate mediator :: if the iterator "
+
"should not preserve payload, then attachPath can not be present"
)
;
}
else
if
(
attachPath
!=
null
)
{
attachPathValue
=
attachPath
.
getAttributeValue
(
)
;
}
try
{
SynapseXPath
xp
=
new
SynapseXPath
(
attachPathValue
)
;
OMElementUtils
.
addNameSpaces
(
xp
,
elem
,
log
)
;
mediator
.
setAttachPath
(
xp
)
;
}
catch
(
JaxenException
e
)
{
handleException
(
"Unable to build the IterateMediator. Invalid XPATH "
+
attachPathValue
,
e
)
;
}
OMElement
targetElement
=
elem
.
getFirstChildWithName
(
TARGET_Q
)
;
if
(
targetElement
!=
null
)
{
mediator
.
setTarget
(
TargetFactory
.
createTarget
(
targetElement
)
)
;
}
else
{
handleException
(
"Target for an iterate mediator is required :: missing target"
)
;
}
return
mediator
;
}
public
QName
getTagQName
(
)
{
return
ITERATE_Q
;
}
}
