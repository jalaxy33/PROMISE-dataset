package
org
.
apache
.
synapse
.
endpoints
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
axis2
.
clustering
.
ClusterManager
;
import
org
.
apache
.
axis2
.
context
.
ConfigurationContext
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
FaultHandler
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
org
.
apache
.
synapse
.
endpoints
.
utils
.
EndpointDefinition
;
import
org
.
apache
.
synapse
.
statistics
.
impl
.
EndPointStatisticsStack
;
import
java
.
util
.
Stack
;
public
class
WSDLEndpoint
extends
FaultHandler
implements
Endpoint
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
WSDLEndpoint
.
class
)
;
private
static
final
Log
trace
=
LogFactory
.
getLog
(
SynapseConstants
.
TRACE_LOGGER
)
;
private
String
name
=
null
;
private
String
wsdlURI
;
private
OMElement
wsdlDoc
;
private
String
serviceName
;
private
String
portName
;
private
Endpoint
parentEndpoint
=
null
;
private
EndpointDefinition
endpoint
=
null
;
private
final
EndpointContext
endpointContext
=
new
EndpointContext
(
)
;
public
void
send
(
MessageContext
synCtx
)
{
boolean
traceOn
=
isTraceOn
(
synCtx
)
;
boolean
traceOrDebugOn
=
isTraceOrDebugOn
(
traceOn
)
;
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Start : WSDL Endpoint"
)
;
if
(
traceOn
&&
trace
.
isTraceEnabled
(
)
)
{
trace
.
trace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
if
(
endpoint
.
getAddress
(
)
!=
null
)
{
String
eprAddress
=
endpoint
.
getAddress
(
)
;
boolean
isClusteringEnable
=
false
;
org
.
apache
.
axis2
.
context
.
MessageContext
axisMC
=
(
(
Axis2MessageContext
)
synCtx
)
.
getAxis2MessageContext
(
)
;
ConfigurationContext
cc
=
axisMC
.
getConfigurationContext
(
)
;
ClusterManager
clusterManager
=
cc
.
getAxisConfiguration
(
)
.
getClusterManager
(
)
;
if
(
clusterManager
!=
null
&&
clusterManager
.
getContextManager
(
)
!=
null
)
{
isClusteringEnable
=
true
;
}
String
endPointName
=
this
.
getName
(
)
;
if
(
endPointName
==
null
)
{
if
(
traceOrDebugOn
&&
isClusteringEnable
)
{
log
.
warn
(
"In a clustering environment , the endpoint  name should be "
+
"specified even for anonymous endpoints. Otherwise, the clustering "
+
"would not be functioned correctly if there are more than one "
+
"anonymous endpoints. "
)
;
}
endPointName
=
SynapseConstants
.
ANONYMOUS_ENDPOINT
;
}
if
(
isClusteringEnable
)
{
if
(
endpointContext
.
getConfigurationContext
(
)
==
null
)
{
endpointContext
.
setConfigurationContext
(
cc
)
;
endpointContext
.
setContextID
(
endPointName
)
;
}
}
boolean
statisticsEnable
=
(
SynapseConstants
.
STATISTICS_ON
==
endpoint
.
getStatisticsState
(
)
)
;
if
(
statisticsEnable
)
{
EndPointStatisticsStack
endPointStatisticsStack
=
null
;
Object
statisticsStackObj
=
synCtx
.
getProperty
(
org
.
apache
.
synapse
.
SynapseConstants
.
ENDPOINT_STATS
)
;
if
(
statisticsStackObj
==
null
)
{
endPointStatisticsStack
=
new
EndPointStatisticsStack
(
)
;
synCtx
.
setProperty
(
org
.
apache
.
synapse
.
SynapseConstants
.
ENDPOINT_STATS
,
endPointStatisticsStack
)
;
}
else
if
(
statisticsStackObj
instanceof
EndPointStatisticsStack
)
{
endPointStatisticsStack
=
(
EndPointStatisticsStack
)
statisticsStackObj
;
}
if
(
endPointStatisticsStack
!=
null
)
{
boolean
isFault
=
synCtx
.
getEnvelope
(
)
.
getBody
(
)
.
hasFault
(
)
;
endPointStatisticsStack
.
put
(
endPointName
,
System
.
currentTimeMillis
(
)
,
!
synCtx
.
isResponse
(
)
,
statisticsEnable
,
isFault
)
;
}
}
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Sending message to WSDL endpoint : "
+
endPointName
+
" resolves to address = "
+
eprAddress
)
;
traceOrDebug
(
traceOn
,
"SOAPAction: "
+
(
synCtx
.
getSoapAction
(
)
!=
null
?
synCtx
.
getSoapAction
(
)
:
"null"
)
)
;
traceOrDebug
(
traceOn
,
"WSA-Action: "
+
(
synCtx
.
getWSAAction
(
)
!=
null
?
synCtx
.
getWSAAction
(
)
:
"null"
)
)
;
if
(
traceOn
&&
trace
.
isTraceEnabled
(
)
)
{
trace
.
trace
(
"Envelope : \n"
+
synCtx
.
getEnvelope
(
)
)
;
}
}
synCtx
.
pushFaultHandler
(
this
)
;
synCtx
.
setProperty
(
SynapseConstants
.
PROCESSED_ENDPOINT
,
this
)
;
synCtx
.
getEnvironment
(
)
.
send
(
endpoint
,
synCtx
)
;
}
}
public
void
onFault
(
MessageContext
synCtx
)
{
setActive
(
false
,
synCtx
)
;
if
(
parentEndpoint
!=
null
)
{
parentEndpoint
.
onChildEndpointFail
(
this
,
synCtx
)
;
}
else
{
Stack
faultStack
=
synCtx
.
getFaultStack
(
)
;
if
(
!
faultStack
.
isEmpty
(
)
)
{
(
(
FaultHandler
)
faultStack
.
pop
(
)
)
.
handleFault
(
synCtx
)
;
}
}
}
public
void
onChildEndpointFail
(
Endpoint
endpoint
,
MessageContext
synMessageContext
)
{
}
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
.
trim
(
)
;
}
public
String
getWsdlURI
(
)
{
return
wsdlURI
;
}
public
void
setWsdlURI
(
String
wsdlURI
)
{
this
.
wsdlURI
=
wsdlURI
;
}
public
OMElement
getWsdlDoc
(
)
{
return
wsdlDoc
;
}
public
void
setWsdlDoc
(
OMElement
wsdlDoc
)
{
this
.
wsdlDoc
=
wsdlDoc
;
}
public
String
getServiceName
(
)
{
return
serviceName
;
}
public
void
setServiceName
(
String
serviceName
)
{
this
.
serviceName
=
serviceName
;
}
public
String
getPortName
(
)
{
return
portName
;
}
public
void
setPortName
(
String
portName
)
{
this
.
portName
=
portName
;
}
public
boolean
isActive
(
MessageContext
synMessageContext
)
{
boolean
active
=
endpointContext
.
isActive
(
)
;
if
(
!
active
)
{
long
recoverOn
=
endpointContext
.
getRecoverOn
(
)
;
if
(
System
.
currentTimeMillis
(
)
>
recoverOn
)
{
active
=
true
;
endpointContext
.
setActive
(
true
)
;
}
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"WSDLEndpoint with name '"
+
name
+
"' is in "
+
(
active
?
"active"
:
"inactive"
)
+
" state"
)
;
}
return
active
;
}
public
void
setActive
(
boolean
active
,
MessageContext
synMessageContext
)
{
if
(
!
active
)
{
if
(
endpoint
.
getSuspendOnFailDuration
(
)
!=
-
1
)
{
endpointContext
.
setRecoverOn
(
System
.
currentTimeMillis
(
)
+
endpoint
.
getSuspendOnFailDuration
(
)
)
;
}
else
{
endpointContext
.
setRecoverOn
(
Long
.
MAX_VALUE
)
;
}
}
endpointContext
.
setActive
(
true
)
;
}
public
void
setParentEndpoint
(
Endpoint
parentEndpoint
)
{
this
.
parentEndpoint
=
parentEndpoint
;
}
public
EndpointDefinition
getEndpoint
(
)
{
return
endpoint
;
}
public
void
setEndpoint
(
EndpointDefinition
endpoint
)
{
this
.
endpoint
=
endpoint
;
}
protected
boolean
isTraceOn
(
MessageContext
msgCtx
)
{
return
(
endpoint
.
getTraceState
(
)
==
SynapseConstants
.
TRACING_ON
)
||
(
endpoint
.
getTraceState
(
)
==
SynapseConstants
.
TRACING_UNSET
&&
msgCtx
.
getTracingState
(
)
==
SynapseConstants
.
TRACING_ON
)
;
}
protected
boolean
isTraceOrDebugOn
(
boolean
isTraceOn
)
{
return
isTraceOn
||
log
.
isDebugEnabled
(
)
;
}
protected
void
traceOrDebug
(
boolean
traceOn
,
String
msg
)
{
if
(
traceOn
)
{
trace
.
info
(
msg
)
;
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
msg
)
;
}
}
}
