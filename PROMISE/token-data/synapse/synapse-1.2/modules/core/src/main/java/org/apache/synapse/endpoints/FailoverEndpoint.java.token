package
org
.
apache
.
synapse
.
endpoints
;
import
org
.
apache
.
axis2
.
clustering
.
ClusterManager
;
import
org
.
apache
.
axis2
.
context
.
ConfigurationContext
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
FaultHandler
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
org
.
apache
.
synapse
.
core
.
axis2
.
Axis2MessageContext
;
import
java
.
util
.
List
;
public
class
FailoverEndpoint
implements
Endpoint
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
FailoverEndpoint
.
class
)
;
private
String
name
=
null
;
private
List
<
Endpoint
>
endpoints
=
null
;
private
Endpoint
currentEndpoint
=
null
;
private
Endpoint
parentEndpoint
=
null
;
private
final
EndpointContext
endpointContext
=
new
EndpointContext
(
)
;
public
void
send
(
MessageContext
synMessageContext
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Start : Failover Endpoint"
)
;
}
boolean
isClusteringEnable
=
false
;
org
.
apache
.
axis2
.
context
.
MessageContext
axisMC
=
(
(
Axis2MessageContext
)
synMessageContext
)
.
getAxis2MessageContext
(
)
;
ConfigurationContext
cc
=
axisMC
.
getConfigurationContext
(
)
;
ClusterManager
clusterManager
=
cc
.
getAxisConfiguration
(
)
.
getClusterManager
(
)
;
if
(
clusterManager
!=
null
&&
clusterManager
.
getContextManager
(
)
!=
null
)
{
isClusteringEnable
=
true
;
}
String
endPointName
=
this
.
getName
(
)
;
if
(
endPointName
==
null
)
{
if
(
log
.
isDebugEnabled
(
)
&&
isClusteringEnable
)
{
log
.
warn
(
"In a clustering environment , the endpoint  name should be specified"
+
"even for anonymous endpoints. Otherwise , the clustering would not be "
+
"functioned correctly if there are more than one anonymous endpoints. "
)
;
}
endPointName
=
SynapseConstants
.
ANONYMOUS_ENDPOINT
;
}
if
(
isClusteringEnable
)
{
if
(
endpointContext
.
getConfigurationContext
(
)
==
null
)
{
endpointContext
.
setConfigurationContext
(
cc
)
;
endpointContext
.
setContextID
(
endPointName
)
;
}
}
synMessageContext
.
getEnvelope
(
)
.
build
(
)
;
if
(
currentEndpoint
.
isActive
(
synMessageContext
)
)
{
currentEndpoint
.
send
(
synMessageContext
)
;
}
else
{
boolean
foundEndpoint
=
false
;
for
(
Endpoint
endpoint
:
endpoints
)
{
if
(
endpoint
.
isActive
(
synMessageContext
)
)
{
foundEndpoint
=
true
;
currentEndpoint
=
endpoint
;
currentEndpoint
.
send
(
synMessageContext
)
;
break
;
}
}
if
(
!
foundEndpoint
)
{
setActive
(
false
,
synMessageContext
)
;
if
(
parentEndpoint
!=
null
)
{
parentEndpoint
.
onChildEndpointFail
(
this
,
synMessageContext
)
;
}
else
{
Object
o
=
synMessageContext
.
getFaultStack
(
)
.
pop
(
)
;
if
(
o
!=
null
)
{
(
(
FaultHandler
)
o
)
.
handleFault
(
synMessageContext
)
;
}
}
}
}
}
public
String
getName
(
)
{
return
this
.
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
.
trim
(
)
;
}
public
boolean
isActive
(
MessageContext
synMessageContext
)
{
boolean
active
=
endpointContext
.
isActive
(
)
;
if
(
!
active
)
{
for
(
Endpoint
endpoint
:
endpoints
)
{
if
(
endpoint
.
isActive
(
synMessageContext
)
)
{
active
=
true
;
endpointContext
.
setActive
(
true
)
;
}
}
}
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Endpoint  '"
+
name
+
"' is in state ' "
+
active
+
" '"
)
;
}
return
active
;
}
public
void
setActive
(
boolean
active
,
MessageContext
synMessageContext
)
{
this
.
endpointContext
.
setActive
(
active
)
;
}
public
List
<
Endpoint
>
getEndpoints
(
)
{
return
endpoints
;
}
public
void
setEndpoints
(
List
<
Endpoint
>
endpoints
)
{
this
.
endpoints
=
endpoints
;
if
(
endpoints
.
size
(
)
>
0
)
{
currentEndpoint
=
endpoints
.
get
(
0
)
;
}
}
public
void
onChildEndpointFail
(
Endpoint
endpoint
,
MessageContext
synMessageContext
)
{
send
(
synMessageContext
)
;
}
public
void
setParentEndpoint
(
Endpoint
parentEndpoint
)
{
this
.
parentEndpoint
=
parentEndpoint
;
}
}
