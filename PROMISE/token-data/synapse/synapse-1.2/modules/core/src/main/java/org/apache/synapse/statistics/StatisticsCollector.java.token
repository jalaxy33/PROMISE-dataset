package
org
.
apache
.
synapse
.
statistics
;
import
org
.
apache
.
synapse
.
SynapseConstants
;
import
java
.
util
.
*
;
public
class
StatisticsCollector
{
private
Map
sequenceStatistics
=
Collections
.
synchronizedMap
(
new
HashMap
(
)
)
;
private
Map
endpointStatistics
=
Collections
.
synchronizedMap
(
new
HashMap
(
)
)
;
private
Map
proxyServicesStatistics
=
Collections
.
synchronizedMap
(
new
HashMap
(
)
)
;
public
void
reportForEndPoint
(
String
keyOfStatistic
,
boolean
isResponse
,
long
inTime
,
long
outTime
,
boolean
isFault
)
{
StatisticsHolder
statisticsHolder
=
(
StatisticsHolder
)
endpointStatistics
.
get
(
keyOfStatistic
)
;
if
(
statisticsHolder
==
null
)
{
statisticsHolder
=
new
StatisticsHolder
(
)
;
statisticsHolder
.
setKey
(
keyOfStatistic
)
;
statisticsHolder
.
setStatisticsCategory
(
SynapseConstants
.
ENDPOINT_STATISTICS
)
;
endpointStatistics
.
put
(
keyOfStatistic
,
statisticsHolder
)
;
}
statisticsHolder
.
update
(
isResponse
,
inTime
,
outTime
,
isFault
)
;
}
public
void
reportForProxyService
(
String
keyOfStatistic
,
boolean
isResponse
,
long
inTime
,
long
outTime
,
boolean
isFault
)
{
StatisticsHolder
statisticsHolder
=
(
StatisticsHolder
)
proxyServicesStatistics
.
get
(
keyOfStatistic
)
;
if
(
statisticsHolder
==
null
)
{
statisticsHolder
=
new
StatisticsHolder
(
)
;
statisticsHolder
.
setKey
(
keyOfStatistic
)
;
statisticsHolder
.
setStatisticsCategory
(
SynapseConstants
.
PROXYSERVICE_STATISTICS
)
;
proxyServicesStatistics
.
put
(
keyOfStatistic
,
statisticsHolder
)
;
}
statisticsHolder
.
update
(
isResponse
,
inTime
,
outTime
,
isFault
)
;
}
public
void
reportForSequence
(
String
keyOfStatistic
,
boolean
isResponse
,
long
inTime
,
long
outTime
,
boolean
isFault
)
{
StatisticsHolder
statisticsHolder
=
(
StatisticsHolder
)
sequenceStatistics
.
get
(
keyOfStatistic
)
;
if
(
statisticsHolder
==
null
)
{
statisticsHolder
=
new
StatisticsHolder
(
)
;
statisticsHolder
.
setKey
(
keyOfStatistic
)
;
statisticsHolder
.
setStatisticsCategory
(
SynapseConstants
.
SEQUENCE_STATISTICS
)
;
sequenceStatistics
.
put
(
keyOfStatistic
,
statisticsHolder
)
;
}
statisticsHolder
.
update
(
isResponse
,
inTime
,
outTime
,
isFault
)
;
}
public
Map
getSequenceStatistics
(
)
{
return
sequenceStatistics
;
}
public
Map
getProxyServiceStatistics
(
)
{
return
proxyServicesStatistics
;
}
public
Map
getEndPointStatistics
(
)
{
return
endpointStatistics
;
}
public
void
resetSequenceStatistics
(
)
{
this
.
sequenceStatistics
.
clear
(
)
;
}
public
void
resetProxyServiceStatistics
(
)
{
this
.
proxyServicesStatistics
.
clear
(
)
;
}
public
void
resetEndPointStatistics
(
)
{
this
.
endpointStatistics
.
clear
(
)
;
}
}
