package
org
.
apache
.
synapse
.
core
.
axis2
;
import
org
.
apache
.
axiom
.
om
.
OMElement
;
import
org
.
apache
.
commons
.
logging
.
Log
;
import
org
.
apache
.
commons
.
logging
.
LogFactory
;
import
org
.
apache
.
synapse
.
SynapseException
;
import
org
.
apache
.
synapse
.
config
.
SynapseConfiguration
;
import
org
.
xml
.
sax
.
InputSource
;
import
javax
.
xml
.
stream
.
XMLStreamException
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
util
.
Collections
;
import
java
.
util
.
LinkedHashMap
;
import
java
.
util
.
Map
;
public
class
ResourceMap
{
private
static
final
Log
log
=
LogFactory
.
getLog
(
ResourceMap
.
class
)
;
private
final
Map
<
String
,
String
>
resources
=
new
LinkedHashMap
<
String
,
String
>
(
)
;
public
void
addResource
(
String
location
,
String
key
)
{
resources
.
put
(
location
,
key
)
;
}
public
Map
<
String
,
String
>
getResources
(
)
{
return
Collections
.
unmodifiableMap
(
resources
)
;
}
public
InputSource
resolve
(
SynapseConfiguration
synCfg
,
String
location
)
{
String
key
=
(
String
)
resources
.
get
(
location
)
;
if
(
key
==
null
)
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"No resource mapping is defined for location '"
+
location
+
"'"
)
;
}
return
null
;
}
else
{
if
(
log
.
isDebugEnabled
(
)
)
{
log
.
debug
(
"Resolving location '"
+
location
+
"' to registry item '"
+
key
+
"'"
)
;
}
synCfg
.
getEntryDefinition
(
key
)
;
Object
keyObject
=
synCfg
.
getEntry
(
key
)
;
if
(
keyObject
instanceof
OMElement
)
{
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
try
{
(
(
OMElement
)
keyObject
)
.
serialize
(
baos
)
;
}
catch
(
XMLStreamException
ex
)
{
String
msg
=
"Unable to serialize registry item '"
+
key
+
"' for location '"
+
location
+
"'"
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
,
ex
)
;
}
return
new
InputSource
(
new
ByteArrayInputStream
(
baos
.
toByteArray
(
)
)
)
;
}
else
{
String
msg
=
"Registry item '"
+
key
+
"' for location '"
+
location
+
"' is not an OMElement"
;
log
.
error
(
msg
)
;
throw
new
SynapseException
(
msg
)
;
}
}
}
}
