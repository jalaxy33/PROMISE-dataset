package
org
.
apache
.
synapse
.
mediators
.
filters
;
import
org
.
apache
.
synapse
.
Mediator
;
import
org
.
apache
.
synapse
.
MessageContext
;
import
org
.
apache
.
synapse
.
mediators
.
AbstractListMediator
;
import
org
.
apache
.
synapse
.
mediators
.
ListMediator
;
import
org
.
apache
.
synapse
.
util
.
xpath
.
SynapseXPath
;
import
org
.
jaxen
.
JaxenException
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
public
class
FilterMediator
extends
AbstractListMediator
implements
org
.
apache
.
synapse
.
mediators
.
FilterMediator
{
private
SynapseXPath
source
=
null
;
private
Pattern
regex
=
null
;
private
SynapseXPath
xpath
=
null
;
private
ListMediator
elseMediator
=
null
;
private
boolean
thenElementPresent
=
false
;
private
String
thenKey
=
null
;
private
String
elseKey
=
null
;
public
boolean
mediate
(
MessageContext
synCtx
)
{
boolean
traceOn
=
isTraceOn
(
synCtx
)
;
boolean
traceOrDebugOn
=
isTraceOrDebugOn
(
traceOn
)
;
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Start : Filter mediator"
)
;
if
(
traceOn
&&
trace
.
isTraceEnabled
(
)
)
{
trace
.
trace
(
"Message : "
+
synCtx
.
getEnvelope
(
)
)
;
}
}
boolean
result
=
false
;
if
(
test
(
synCtx
)
)
{
if
(
thenKey
!=
null
)
{
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
(
xpath
==
null
?
"Source : "
+
source
+
" against : "
+
regex
.
pattern
(
)
+
" matches"
:
"XPath expression : "
+
xpath
+
" evaluates to true"
)
+
" - executing then sequence with key : "
+
thenKey
)
;
}
Mediator
seq
=
synCtx
.
getSequence
(
thenKey
)
;
if
(
seq
!=
null
)
{
result
=
seq
.
mediate
(
synCtx
)
;
}
else
{
handleException
(
"Couldn't find the referred then sequence with key : "
+
thenKey
,
synCtx
)
;
}
}
else
{
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
(
xpath
==
null
?
"Source : "
+
source
+
" against : "
+
regex
.
pattern
(
)
+
" matches"
:
"XPath expression : "
+
xpath
+
" evaluates to true"
)
+
" - executing child mediators"
)
;
}
result
=
super
.
mediate
(
synCtx
)
;
}
}
else
{
if
(
elseKey
!=
null
)
{
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
(
xpath
==
null
?
"Source : "
+
source
+
" against : "
+
regex
.
pattern
(
)
+
" does not match"
:
"XPath expression : "
+
xpath
+
" evaluates to false"
)
+
" - executing the else sequence with key : "
+
elseKey
)
;
}
Mediator
elseSeq
=
synCtx
.
getSequence
(
elseKey
)
;
if
(
elseSeq
!=
null
)
{
result
=
elseSeq
.
mediate
(
synCtx
)
;
}
else
{
handleException
(
"Couldn't find the referred else sequence with key : "
+
elseKey
,
synCtx
)
;
}
}
else
if
(
elseMediator
!=
null
)
{
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
(
xpath
==
null
?
"Source : "
+
source
+
" against : "
+
regex
.
pattern
(
)
+
" does not match"
:
"XPath expression : "
+
xpath
+
" evaluates to false"
)
+
" - executing the else path child mediators"
)
;
}
result
=
elseMediator
.
mediate
(
synCtx
)
;
}
else
{
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
(
xpath
==
null
?
"Source : "
+
source
+
" against : "
+
regex
.
pattern
(
)
+
" does not match"
:
"XPath expression : "
+
xpath
+
" evaluates to false and no else path"
)
+
" - skipping child mediators"
)
;
}
result
=
true
;
}
}
if
(
traceOrDebugOn
)
{
trace
.
trace
(
"End : Filter mediator "
)
;
}
return
result
;
}
public
boolean
test
(
MessageContext
synCtx
)
{
boolean
traceOn
=
isTraceOn
(
synCtx
)
;
boolean
traceOrDebugOn
=
isTraceOrDebugOn
(
traceOn
)
;
if
(
xpath
!=
null
)
{
try
{
return
xpath
.
booleanValueOf
(
synCtx
)
;
}
catch
(
JaxenException
e
)
{
handleException
(
"Error evaluating XPath expression : "
+
xpath
,
e
,
synCtx
)
;
}
}
else
if
(
source
!=
null
&&
regex
!=
null
)
{
String
sourceString
=
source
.
stringValueOf
(
synCtx
)
;
if
(
sourceString
==
null
)
{
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Source String : "
+
source
+
" evaluates to null"
)
;
}
return
false
;
}
Matcher
matcher
=
regex
.
matcher
(
sourceString
)
;
if
(
matcher
==
null
)
{
if
(
traceOrDebugOn
)
{
traceOrDebug
(
traceOn
,
"Regex pattren matcher for : "
+
regex
.
pattern
(
)
+
"against source : "
+
sourceString
+
" is null"
)
;
}
return
false
;
}
return
matcher
.
matches
(
)
;
}
return
false
;
}
public
SynapseXPath
getSource
(
)
{
return
source
;
}
public
void
setSource
(
SynapseXPath
source
)
{
this
.
source
=
source
;
}
public
Pattern
getRegex
(
)
{
return
regex
;
}
public
void
setRegex
(
Pattern
regex
)
{
this
.
regex
=
regex
;
}
public
SynapseXPath
getXpath
(
)
{
return
xpath
;
}
public
void
setXpath
(
SynapseXPath
xpath
)
{
this
.
xpath
=
xpath
;
}
public
ListMediator
getElseMediator
(
)
{
return
elseMediator
;
}
public
void
setElseMediator
(
ListMediator
elseMediator
)
{
this
.
elseMediator
=
elseMediator
;
}
public
boolean
isThenElementPresent
(
)
{
return
thenElementPresent
;
}
public
void
setThenElementPresent
(
boolean
thenElementPresent
)
{
this
.
thenElementPresent
=
thenElementPresent
;
}
public
String
getThenKey
(
)
{
return
thenKey
;
}
public
void
setThenKey
(
String
thenKey
)
{
this
.
thenKey
=
thenKey
;
}
public
String
getElseKey
(
)
{
return
elseKey
;
}
public
void
setElseKey
(
String
elseKey
)
{
this
.
elseKey
=
elseKey
;
}
}
