package
org
.
apache
.
tools
.
ant
;
import
java
.
lang
.
reflect
.
*
;
import
java
.
util
.
*
;
import
java
.
util
.
zip
.
*
;
import
java
.
io
.
*
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
public
class
AntClassLoader
extends
ClassLoader
{
static
private
final
int
BUFFER_SIZE
=
1024
;
private
Path
classpath
;
private
Project
project
;
private
boolean
systemFirst
=
true
;
private
Vector
systemPackages
=
new
Vector
(
)
;
private
Vector
loaderPackages
=
new
Vector
(
)
;
private
boolean
ignoreBase
=
false
;
private
static
Method
getProtectionDomain
=
null
;
private
static
Method
defineClassProtectionDomain
=
null
;
static
{
try
{
getProtectionDomain
=
Class
.
class
.
getMethod
(
"getProtectionDomain"
,
new
Class
[
0
]
)
;
Class
protectionDomain
=
Class
.
forName
(
"java.security.ProtectionDomain"
)
;
Class
[
]
args
=
new
Class
[
]
{
String
.
class
,
byte
[
]
.
class
,
Integer
.
TYPE
,
Integer
.
TYPE
,
protectionDomain
}
;
defineClassProtectionDomain
=
ClassLoader
.
class
.
getDeclaredMethod
(
"defineClass"
,
args
)
;
}
catch
(
Exception
e
)
{
}
}
public
AntClassLoader
(
Project
project
,
Path
classpath
)
{
this
.
project
=
project
;
this
.
classpath
=
classpath
.
concatSystemClasspath
(
"ignore"
)
;
addSystemPackageRoot
(
"java"
)
;
addSystemPackageRoot
(
"javax"
)
;
}
public
AntClassLoader
(
Project
project
,
Path
classpath
,
boolean
systemFirst
)
{
this
(
project
,
classpath
)
;
this
.
systemFirst
=
systemFirst
;
}
public
void
setIsolated
(
boolean
isolated
)
{
ignoreBase
=
isolated
;
}
public
void
addSystemPackageRoot
(
String
packageRoot
)
{
systemPackages
.
addElement
(
packageRoot
+
"."
)
;
}
public
void
addLoaderPackageRoot
(
String
packageRoot
)
{
loaderPackages
.
addElement
(
packageRoot
+
"."
)
;
}
public
Class
forceLoadClass
(
String
classname
)
throws
ClassNotFoundException
{
project
.
log
(
"force loading "
+
classname
,
Project
.
MSG_DEBUG
)
;
Class
theClass
=
findLoadedClass
(
classname
)
;
if
(
theClass
==
null
)
{
theClass
=
findClass
(
classname
)
;
}
return
theClass
;
}
public
Class
forceLoadSystemClass
(
String
classname
)
throws
ClassNotFoundException
{
project
.
log
(
"force system loading "
+
classname
,
Project
.
MSG_DEBUG
)
;
Class
theClass
=
findLoadedClass
(
classname
)
;
if
(
theClass
==
null
)
{
theClass
=
findBaseClass
(
classname
)
;
}
return
theClass
;
}
public
InputStream
getResourceAsStream
(
String
name
)
{
InputStream
stream
=
null
;
String
[
]
pathElements
=
classpath
.
list
(
)
;
for
(
int
i
=
0
;
i
<
pathElements
.
length
&&
stream
==
null
;
++
i
)
{
File
pathComponent
=
project
.
resolveFile
(
(
String
)
pathElements
[
i
]
)
;
stream
=
getResourceStream
(
pathComponent
,
name
)
;
}
return
stream
;
}
private
InputStream
getResourceStream
(
File
file
,
String
resourceName
)
{
try
{
if
(
!
file
.
exists
(
)
)
{
return
null
;
}
if
(
file
.
isDirectory
(
)
)
{
File
resource
=
new
File
(
file
,
resourceName
)
;
if
(
resource
.
exists
(
)
)
{
return
new
FileInputStream
(
resource
)
;
}
}
else
{
ZipFile
zipFile
=
null
;
try
{
zipFile
=
new
ZipFile
(
file
)
;
ZipEntry
entry
=
zipFile
.
getEntry
(
resourceName
)
;
if
(
entry
!=
null
)
{
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
byte
[
]
buffer
=
new
byte
[
BUFFER_SIZE
]
;
int
bytesRead
;
InputStream
stream
=
zipFile
.
getInputStream
(
entry
)
;
while
(
(
bytesRead
=
stream
.
read
(
buffer
,
0
,
BUFFER_SIZE
)
)
!=
-
1
)
{
baos
.
write
(
buffer
,
0
,
bytesRead
)
;
}
return
new
ByteArrayInputStream
(
baos
.
toByteArray
(
)
)
;
}
}
finally
{
if
(
zipFile
!=
null
)
{
zipFile
.
close
(
)
;
}
}
}
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
return
null
;
}
protected
Class
loadClass
(
String
classname
,
boolean
resolve
)
throws
ClassNotFoundException
{
boolean
useSystemFirst
=
systemFirst
;
for
(
Enumeration
e
=
systemPackages
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
packageName
=
(
String
)
e
.
nextElement
(
)
;
if
(
classname
.
startsWith
(
packageName
)
)
{
useSystemFirst
=
true
;
break
;
}
}
for
(
Enumeration
e
=
loaderPackages
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
packageName
=
(
String
)
e
.
nextElement
(
)
;
if
(
classname
.
startsWith
(
packageName
)
)
{
useSystemFirst
=
false
;
break
;
}
}
Class
theClass
=
findLoadedClass
(
classname
)
;
if
(
theClass
==
null
)
{
if
(
useSystemFirst
)
{
try
{
theClass
=
findBaseClass
(
classname
)
;
project
.
log
(
"Class "
+
classname
+
" loaded from system loader"
,
Project
.
MSG_DEBUG
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
theClass
=
findClass
(
classname
)
;
project
.
log
(
"Class "
+
classname
+
" loaded from ant loader"
,
Project
.
MSG_DEBUG
)
;
}
}
else
{
try
{
theClass
=
findClass
(
classname
)
;
project
.
log
(
"Class "
+
classname
+
" loaded from ant loader"
,
Project
.
MSG_DEBUG
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
if
(
ignoreBase
)
{
throw
cnfe
;
}
theClass
=
findBaseClass
(
classname
)
;
project
.
log
(
"Class "
+
classname
+
" loaded from system loader"
,
Project
.
MSG_DEBUG
)
;
}
}
}
if
(
resolve
)
{
resolveClass
(
theClass
)
;
}
return
theClass
;
}
private
String
getClassFilename
(
String
classname
)
{
return
classname
.
replace
(
'.'
,
'/'
)
+
".class"
;
}
private
Class
getClassFromStream
(
InputStream
stream
,
String
classname
)
throws
IOException
{
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
int
bytesRead
=
-
1
;
byte
[
]
buffer
=
new
byte
[
1024
]
;
while
(
(
bytesRead
=
stream
.
read
(
buffer
,
0
,
1024
)
)
!=
-
1
)
{
baos
.
write
(
buffer
,
0
,
bytesRead
)
;
}
byte
[
]
classData
=
baos
.
toByteArray
(
)
;
if
(
defineClassProtectionDomain
!=
null
)
{
try
{
Object
domain
=
getProtectionDomain
.
invoke
(
Project
.
class
,
new
Object
[
0
]
)
;
Object
[
]
args
=
new
Object
[
]
{
classname
,
classData
,
new
Integer
(
0
)
,
new
Integer
(
classData
.
length
)
,
domain
}
;
return
(
Class
)
defineClassProtectionDomain
.
invoke
(
this
,
args
)
;
}
catch
(
InvocationTargetException
ite
)
{
Throwable
t
=
ite
.
getTargetException
(
)
;
if
(
t
instanceof
ClassFormatError
)
{
throw
(
ClassFormatError
)
t
;
}
else
{
throw
new
IOException
(
t
.
toString
(
)
)
;
}
}
catch
(
Exception
e
)
{
throw
new
IOException
(
e
.
toString
(
)
)
;
}
}
else
{
return
defineClass
(
classname
,
classData
,
0
,
classData
.
length
)
;
}
}
public
Class
findClass
(
String
name
)
throws
ClassNotFoundException
{
project
.
log
(
"Finding class "
+
name
,
Project
.
MSG_DEBUG
)
;
try
{
return
findClass
(
name
,
classpath
)
;
}
catch
(
ClassNotFoundException
e
)
{
throw
e
;
}
}
private
Class
findClass
(
String
name
,
Path
path
)
throws
ClassNotFoundException
{
InputStream
stream
=
null
;
String
classFilename
=
getClassFilename
(
name
)
;
try
{
String
[
]
pathElements
=
path
.
list
(
)
;
for
(
int
i
=
0
;
i
<
pathElements
.
length
&&
stream
==
null
;
++
i
)
{
File
pathComponent
=
project
.
resolveFile
(
(
String
)
pathElements
[
i
]
)
;
stream
=
getResourceStream
(
pathComponent
,
classFilename
)
;
}
if
(
stream
==
null
)
{
throw
new
ClassNotFoundException
(
)
;
}
return
getClassFromStream
(
stream
,
name
)
;
}
catch
(
IOException
ioe
)
{
ioe
.
printStackTrace
(
)
;
throw
new
ClassNotFoundException
(
)
;
}
finally
{
try
{
if
(
stream
!=
null
)
{
stream
.
close
(
)
;
}
}
catch
(
IOException
e
)
{
}
}
}
private
Class
findBaseClass
(
String
name
)
throws
ClassNotFoundException
{
ClassLoader
base
=
AntClassLoader
.
class
.
getClassLoader
(
)
;
if
(
base
==
null
)
{
return
findSystemClass
(
name
)
;
}
else
{
return
base
.
loadClass
(
name
)
;
}
}
}
