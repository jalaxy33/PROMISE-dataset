package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
org
.
apache
.
tools
.
ant
.
*
;
import
org
.
apache
.
tools
.
ant
.
types
.
*
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
public
abstract
class
MatchingTask
extends
Task
{
protected
boolean
useDefaultExcludes
=
true
;
protected
FileSet
fileset
=
new
FileSet
(
)
;
public
PatternSet
.
NameEntry
createInclude
(
)
{
return
fileset
.
createInclude
(
)
;
}
public
PatternSet
.
NameEntry
createExclude
(
)
{
return
fileset
.
createExclude
(
)
;
}
public
PatternSet
createPatternSet
(
)
{
return
fileset
.
createPatternSet
(
)
;
}
public
void
setIncludes
(
String
includes
)
{
fileset
.
setIncludes
(
includes
)
;
}
public
void
XsetItems
(
String
itemString
)
{
log
(
"The items attribute is deprecated. "
+
"Please use the includes attribute."
,
Project
.
MSG_WARN
)
;
if
(
itemString
==
null
||
itemString
.
equals
(
"*"
)
||
itemString
.
equals
(
"."
)
)
{
createInclude
(
)
.
setName
(
"**"
)
;
}
else
{
StringTokenizer
tok
=
new
StringTokenizer
(
itemString
,
", "
)
;
while
(
tok
.
hasMoreTokens
(
)
)
{
String
pattern
=
tok
.
nextToken
(
)
.
trim
(
)
;
if
(
pattern
.
length
(
)
>
0
)
{
createInclude
(
)
.
setName
(
pattern
+
"/**"
)
;
}
}
}
}
public
void
setExcludes
(
String
excludes
)
{
fileset
.
setExcludes
(
excludes
)
;
}
public
void
XsetIgnore
(
String
ignoreString
)
{
log
(
"The ignore attribute is deprecated."
+
"Please use the excludes attribute."
,
Project
.
MSG_WARN
)
;
if
(
ignoreString
!=
null
&&
ignoreString
.
length
(
)
>
0
)
{
Vector
tmpExcludes
=
new
Vector
(
)
;
StringTokenizer
tok
=
new
StringTokenizer
(
ignoreString
,
", "
,
false
)
;
while
(
tok
.
hasMoreTokens
(
)
)
{
createExclude
(
)
.
setName
(
"**/"
+
tok
.
nextToken
(
)
.
trim
(
)
+
"/**"
)
;
}
}
}
public
void
setDefaultexcludes
(
boolean
useDefaultExcludes
)
{
this
.
useDefaultExcludes
=
useDefaultExcludes
;
}
protected
DirectoryScanner
getDirectoryScanner
(
File
baseDir
)
{
fileset
.
setDir
(
baseDir
)
;
fileset
.
setDefaultexcludes
(
useDefaultExcludes
)
;
return
fileset
.
getDirectoryScanner
(
project
)
;
}
public
void
setIncludesfile
(
File
includesfile
)
{
fileset
.
setIncludesfile
(
includesfile
)
;
}
public
void
setExcludesfile
(
File
excludesfile
)
{
fileset
.
setExcludesfile
(
excludesfile
)
;
}
}
