package
org
.
apache
.
tools
.
ant
.
types
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
FileScanner
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
java
.
io
.
File
;
import
java
.
util
.
Stack
;
import
java
.
util
.
Vector
;
public
class
FileSet
extends
DataType
{
private
PatternSet
defaultPatterns
=
new
PatternSet
(
)
;
private
Vector
additionalPatterns
=
new
Vector
(
)
;
private
File
dir
;
private
boolean
useDefaultExcludes
=
true
;
public
FileSet
(
)
{
super
(
)
;
}
protected
FileSet
(
FileSet
fileset
)
{
this
.
dir
=
fileset
.
dir
;
this
.
defaultPatterns
=
fileset
.
defaultPatterns
;
this
.
additionalPatterns
=
fileset
.
additionalPatterns
;
this
.
useDefaultExcludes
=
fileset
.
useDefaultExcludes
;
}
public
void
setRefid
(
Reference
r
)
throws
BuildException
{
if
(
dir
!=
null
||
defaultPatterns
.
hasPatterns
(
)
)
{
throw
tooManyAttributes
(
)
;
}
if
(
!
additionalPatterns
.
isEmpty
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
super
.
setRefid
(
r
)
;
}
public
void
setDir
(
File
dir
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
if
(
!
dir
.
exists
(
)
)
{
throw
new
BuildException
(
dir
.
getAbsolutePath
(
)
+
" not found."
)
;
}
if
(
!
dir
.
isDirectory
(
)
)
{
throw
new
BuildException
(
dir
.
getAbsolutePath
(
)
+
" is not a directory."
)
;
}
this
.
dir
=
dir
;
}
public
File
getDir
(
Project
p
)
{
if
(
isReference
(
)
)
{
return
getRef
(
p
)
.
getDir
(
p
)
;
}
return
dir
;
}
public
PatternSet
createPatternSet
(
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
PatternSet
patterns
=
new
PatternSet
(
)
;
additionalPatterns
.
addElement
(
patterns
)
;
return
patterns
;
}
public
PatternSet
.
NameEntry
createInclude
(
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
return
defaultPatterns
.
createInclude
(
)
;
}
public
PatternSet
.
NameEntry
createExclude
(
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
return
defaultPatterns
.
createExclude
(
)
;
}
public
void
setIncludes
(
String
includes
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
defaultPatterns
.
setIncludes
(
includes
)
;
}
public
void
setExcludes
(
String
excludes
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
defaultPatterns
.
setExcludes
(
excludes
)
;
}
public
void
setIncludesfile
(
File
incl
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
defaultPatterns
.
setIncludesfile
(
incl
)
;
}
public
void
setExcludesfile
(
File
excl
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
defaultPatterns
.
setExcludesfile
(
excl
)
;
}
public
void
setDefaultexcludes
(
boolean
useDefaultExcludes
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
useDefaultExcludes
=
useDefaultExcludes
;
}
public
DirectoryScanner
getDirectoryScanner
(
Project
p
)
{
if
(
isReference
(
)
)
{
return
getRef
(
p
)
.
getDirectoryScanner
(
p
)
;
}
if
(
dir
==
null
)
{
throw
new
BuildException
(
"No directory specified for fileset."
)
;
}
DirectoryScanner
ds
=
new
DirectoryScanner
(
)
;
setupDirectoryScanner
(
ds
,
p
)
;
ds
.
scan
(
)
;
return
ds
;
}
public
void
setupDirectoryScanner
(
FileScanner
ds
,
Project
p
)
{
if
(
ds
==
null
)
{
throw
new
IllegalArgumentException
(
"ds cannot be null"
)
;
}
ds
.
setBasedir
(
dir
)
;
for
(
int
i
=
0
;
i
<
additionalPatterns
.
size
(
)
;
i
++
)
{
Object
o
=
additionalPatterns
.
elementAt
(
i
)
;
defaultPatterns
.
append
(
(
PatternSet
)
o
,
p
)
;
}
ds
.
setIncludes
(
defaultPatterns
.
getIncludePatterns
(
p
)
)
;
ds
.
setExcludes
(
defaultPatterns
.
getExcludePatterns
(
p
)
)
;
if
(
useDefaultExcludes
)
ds
.
addDefaultExcludes
(
)
;
}
protected
FileSet
getRef
(
Project
p
)
{
if
(
!
checked
)
{
Stack
stk
=
new
Stack
(
)
;
stk
.
push
(
this
)
;
dieOnCircularReference
(
stk
,
p
)
;
}
Object
o
=
ref
.
getReferencedObject
(
p
)
;
if
(
!
(
o
instanceof
FileSet
)
)
{
String
msg
=
ref
.
getRefId
(
)
+
" doesn\'t denote a fileset"
;
throw
new
BuildException
(
msg
)
;
}
else
{
return
(
FileSet
)
o
;
}
}
}
