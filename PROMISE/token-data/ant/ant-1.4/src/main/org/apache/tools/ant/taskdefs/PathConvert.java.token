package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
types
.
*
;
import
java
.
util
.
*
;
import
java
.
io
.
File
;
public
class
PathConvert
extends
Task
{
public
class
MapEntry
{
public
void
setFrom
(
String
from
)
{
this
.
from
=
from
;
}
public
void
setTo
(
String
to
)
{
this
.
to
=
to
;
}
public
String
apply
(
String
elem
)
{
if
(
from
==
null
||
to
==
null
)
{
throw
new
BuildException
(
"Both 'from' and 'to' must be set in a map entry"
)
;
}
String
cmpElem
=
onWindows
?
elem
.
toLowerCase
(
)
:
elem
;
String
cmpFrom
=
onWindows
?
from
.
toLowerCase
(
)
:
from
;
if
(
cmpElem
.
startsWith
(
cmpFrom
)
)
{
int
len
=
from
.
length
(
)
;
if
(
len
>=
elem
.
length
(
)
)
{
elem
=
to
;
}
else
{
elem
=
to
+
elem
.
substring
(
len
)
;
}
}
return
elem
;
}
private
String
from
=
null
;
private
String
to
=
null
;
}
public
Path
createPath
(
)
{
if
(
isReference
(
)
)
throw
noChildrenAllowed
(
)
;
if
(
path
==
null
)
{
path
=
new
Path
(
getProject
(
)
)
;
}
return
path
.
createPath
(
)
;
}
public
MapEntry
createMap
(
)
{
MapEntry
entry
=
new
MapEntry
(
)
;
prefixMap
.
addElement
(
entry
)
;
return
entry
;
}
public
void
setTargetos
(
String
target
)
{
targetOS
=
target
.
toLowerCase
(
)
;
if
(
!
targetOS
.
equals
(
"windows"
)
&&
!
target
.
equals
(
"unix"
)
)
{
throw
new
BuildException
(
"targetos must be one of 'unix' or 'windows'"
)
;
}
targetWindows
=
targetOS
.
equals
(
"windows"
)
;
}
public
void
setProperty
(
String
p
)
{
property
=
p
;
}
public
void
setRefid
(
Reference
r
)
{
if
(
path
!=
null
)
throw
noChildrenAllowed
(
)
;
refid
=
r
;
}
public
void
setPathSep
(
String
sep
)
{
pathSep
=
sep
;
}
public
void
setDirSep
(
String
sep
)
{
dirSep
=
sep
;
}
public
boolean
isReference
(
)
{
return
refid
!=
null
;
}
public
void
execute
(
)
throws
BuildException
{
if
(
isReference
(
)
)
{
path
=
new
Path
(
getProject
(
)
)
.
createPath
(
)
;
Object
obj
=
refid
.
getReferencedObject
(
getProject
(
)
)
;
if
(
obj
instanceof
Path
)
{
path
.
setRefid
(
refid
)
;
}
else
if
(
obj
instanceof
FileSet
)
{
FileSet
fs
=
(
FileSet
)
obj
;
path
.
addFileset
(
fs
)
;
}
else
{
throw
new
BuildException
(
"'refid' does not refer to a path or fileset"
)
;
}
}
validateSetup
(
)
;
String
osname
=
System
.
getProperty
(
"os.name"
)
.
toLowerCase
(
)
;
onWindows
=
(
osname
.
indexOf
(
"windows"
)
>=
0
)
;
char
fromDirSep
=
onWindows
?
'\\'
:
'/'
;
char
toDirSep
=
dirSep
.
charAt
(
0
)
;
StringBuffer
rslt
=
new
StringBuffer
(
100
)
;
String
[
]
elems
=
path
.
list
(
)
;
for
(
int
i
=
0
;
i
<
elems
.
length
;
i
++
)
{
String
elem
=
elems
[
i
]
;
elem
=
mapElement
(
elem
)
;
elem
=
elem
.
replace
(
fromDirSep
,
toDirSep
)
;
if
(
i
!=
0
)
rslt
.
append
(
pathSep
)
;
rslt
.
append
(
elem
)
;
}
String
value
=
rslt
.
toString
(
)
;
log
(
"Set property "
+
property
+
" = "
+
value
,
Project
.
MSG_VERBOSE
)
;
getProject
(
)
.
setProperty
(
property
,
value
)
;
}
private
String
mapElement
(
String
elem
)
{
int
size
=
prefixMap
.
size
(
)
;
if
(
size
!=
0
)
{
for
(
int
i
=
0
;
i
<
size
;
i
++
)
{
MapEntry
entry
=
(
MapEntry
)
prefixMap
.
elementAt
(
i
)
;
String
newElem
=
entry
.
apply
(
elem
)
;
if
(
newElem
!=
elem
)
{
elem
=
newElem
;
break
;
}
}
}
return
elem
;
}
private
void
validateSetup
(
)
throws
BuildException
{
if
(
path
==
null
)
throw
new
BuildException
(
"You must specify a path to convert"
)
;
if
(
property
==
null
)
throw
new
BuildException
(
"You must specify a property"
)
;
if
(
targetOS
==
null
&&
pathSep
==
null
&&
dirSep
==
null
)
throw
new
BuildException
(
"You must specify at least one of targetOS, dirSep, or pathSep"
)
;
String
dsep
=
File
.
separator
;
String
psep
=
File
.
pathSeparator
;
if
(
targetOS
!=
null
)
{
psep
=
targetWindows
?
";"
:
":"
;
dsep
=
targetWindows
?
"\\"
:
"/"
;
}
if
(
pathSep
!=
null
)
{
psep
=
pathSep
;
}
if
(
dirSep
!=
null
)
{
dsep
=
dirSep
;
}
pathSep
=
psep
;
dirSep
=
dsep
;
}
private
BuildException
noChildrenAllowed
(
)
{
return
new
BuildException
(
"You must not specify nested PATH elements when using refid"
)
;
}
private
Path
path
=
null
;
private
Reference
refid
=
null
;
private
String
targetOS
=
null
;
private
boolean
targetWindows
=
false
;
private
boolean
onWindows
=
false
;
private
String
property
=
null
;
private
Vector
prefixMap
=
new
Vector
(
)
;
private
String
pathSep
=
null
;
private
String
dirSep
=
null
;
}
