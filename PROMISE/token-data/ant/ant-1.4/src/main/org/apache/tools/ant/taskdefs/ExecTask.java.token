package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
org
.
apache
.
tools
.
ant
.
*
;
import
org
.
apache
.
tools
.
ant
.
types
.
*
;
import
java
.
io
.
*
;
public
class
ExecTask
extends
Task
{
private
static
String
lSep
=
System
.
getProperty
(
"line.separator"
)
;
private
String
os
;
private
File
out
;
private
File
dir
;
protected
boolean
failOnError
=
false
;
protected
boolean
newEnvironment
=
false
;
private
Integer
timeout
=
null
;
private
Environment
env
=
new
Environment
(
)
;
protected
Commandline
cmdl
=
new
Commandline
(
)
;
private
FileOutputStream
fos
=
null
;
private
ByteArrayOutputStream
baos
=
null
;
private
String
outputprop
;
private
boolean
vmLauncher
=
true
;
public
void
setTimeout
(
Integer
value
)
{
timeout
=
value
;
}
public
void
setExecutable
(
String
value
)
{
cmdl
.
setExecutable
(
value
)
;
}
public
void
setDir
(
File
d
)
{
this
.
dir
=
d
;
}
public
void
setOs
(
String
os
)
{
this
.
os
=
os
;
}
public
void
setCommand
(
Commandline
cmdl
)
{
log
(
"The command attribute is deprecated. "
+
"Please use the executable attribute and nested arg elements."
,
Project
.
MSG_WARN
)
;
this
.
cmdl
=
cmdl
;
}
public
void
setOutput
(
File
out
)
{
this
.
out
=
out
;
}
public
void
setOutputproperty
(
String
outputprop
)
{
this
.
outputprop
=
outputprop
;
}
public
void
setFailonerror
(
boolean
fail
)
{
failOnError
=
fail
;
}
public
void
setNewenvironment
(
boolean
newenv
)
{
newEnvironment
=
newenv
;
}
public
void
addEnv
(
Environment
.
Variable
var
)
{
env
.
addVariable
(
var
)
;
}
public
Commandline
.
Argument
createArg
(
)
{
return
cmdl
.
createArgument
(
)
;
}
public
void
execute
(
)
throws
BuildException
{
checkConfiguration
(
)
;
if
(
isValidOs
(
)
)
{
runExec
(
prepareExec
(
)
)
;
}
}
protected
void
checkConfiguration
(
)
throws
BuildException
{
if
(
cmdl
.
getExecutable
(
)
==
null
)
{
throw
new
BuildException
(
"no executable specified"
,
location
)
;
}
if
(
dir
!=
null
&&
!
dir
.
exists
(
)
)
{
throw
new
BuildException
(
"The directory you specified does not exist"
)
;
}
if
(
dir
!=
null
&&
!
dir
.
isDirectory
(
)
)
{
throw
new
BuildException
(
"The directory you specified is not a directory"
)
;
}
}
protected
boolean
isValidOs
(
)
{
String
myos
=
System
.
getProperty
(
"os.name"
)
;
log
(
"Current OS is "
+
myos
,
Project
.
MSG_VERBOSE
)
;
if
(
(
os
!=
null
)
&&
(
os
.
indexOf
(
myos
)
<
0
)
)
{
log
(
"This OS, "
+
myos
+
" was not found in the specified list of valid OSes: "
+
os
,
Project
.
MSG_VERBOSE
)
;
return
false
;
}
return
true
;
}
public
void
setVMLauncher
(
boolean
vmLauncher
)
{
this
.
vmLauncher
=
vmLauncher
;
}
protected
Execute
prepareExec
(
)
throws
BuildException
{
if
(
dir
==
null
)
dir
=
project
.
getBaseDir
(
)
;
log
(
cmdl
.
toString
(
)
,
Project
.
MSG_VERBOSE
)
;
Execute
exe
=
new
Execute
(
createHandler
(
)
,
createWatchdog
(
)
)
;
exe
.
setAntRun
(
project
)
;
exe
.
setWorkingDirectory
(
dir
)
;
exe
.
setVMLauncher
(
vmLauncher
)
;
String
[
]
environment
=
env
.
getVariables
(
)
;
if
(
environment
!=
null
)
{
for
(
int
i
=
0
;
i
<
environment
.
length
;
i
++
)
{
log
(
"Setting environment variable: "
+
environment
[
i
]
,
Project
.
MSG_VERBOSE
)
;
}
}
exe
.
setNewenvironment
(
newEnvironment
)
;
exe
.
setEnvironment
(
environment
)
;
return
exe
;
}
protected
final
void
runExecute
(
Execute
exe
)
throws
IOException
{
int
err
=
-
1
;
err
=
exe
.
execute
(
)
;
if
(
err
!=
0
)
{
if
(
failOnError
)
{
throw
new
BuildException
(
taskType
+
" returned: "
+
err
,
location
)
;
}
else
{
log
(
"Result: "
+
err
,
Project
.
MSG_ERR
)
;
}
}
if
(
baos
!=
null
)
{
BufferedReader
in
=
new
BufferedReader
(
new
StringReader
(
baos
.
toString
(
)
)
)
;
String
line
=
null
;
StringBuffer
val
=
new
StringBuffer
(
)
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
if
(
val
.
length
(
)
!=
0
)
{
val
.
append
(
lSep
)
;
}
val
.
append
(
line
)
;
}
project
.
setProperty
(
outputprop
,
val
.
toString
(
)
)
;
}
}
protected
void
runExec
(
Execute
exe
)
throws
BuildException
{
exe
.
setCommandline
(
cmdl
.
getCommandline
(
)
)
;
try
{
runExecute
(
exe
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
"Execute failed: "
+
e
,
e
,
location
)
;
}
finally
{
logFlush
(
)
;
}
}
protected
ExecuteStreamHandler
createHandler
(
)
throws
BuildException
{
if
(
out
!=
null
)
{
try
{
fos
=
new
FileOutputStream
(
out
)
;
log
(
"Output redirected to "
+
out
,
Project
.
MSG_VERBOSE
)
;
return
new
PumpStreamHandler
(
fos
)
;
}
catch
(
FileNotFoundException
fne
)
{
throw
new
BuildException
(
"Cannot write to "
+
out
,
fne
,
location
)
;
}
catch
(
IOException
ioe
)
{
throw
new
BuildException
(
"Cannot write to "
+
out
,
ioe
,
location
)
;
}
}
else
if
(
outputprop
!=
null
)
{
baos
=
new
ByteArrayOutputStream
(
)
;
log
(
"Output redirected to ByteArray"
,
Project
.
MSG_VERBOSE
)
;
return
new
PumpStreamHandler
(
baos
)
;
}
else
{
return
new
LogStreamHandler
(
this
,
Project
.
MSG_INFO
,
Project
.
MSG_WARN
)
;
}
}
protected
ExecuteWatchdog
createWatchdog
(
)
throws
BuildException
{
if
(
timeout
==
null
)
return
null
;
return
new
ExecuteWatchdog
(
timeout
.
intValue
(
)
)
;
}
protected
void
logFlush
(
)
{
try
{
if
(
fos
!=
null
)
fos
.
close
(
)
;
if
(
baos
!=
null
)
baos
.
close
(
)
;
}
catch
(
IOException
io
)
{
}
}
}
