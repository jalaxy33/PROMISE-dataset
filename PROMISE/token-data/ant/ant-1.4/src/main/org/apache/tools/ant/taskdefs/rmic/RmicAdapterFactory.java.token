package
org
.
apache
.
tools
.
ant
.
taskdefs
.
rmic
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
Project
;
public
class
RmicAdapterFactory
{
private
RmicAdapterFactory
(
)
{
}
public
static
RmicAdapter
getRmic
(
String
rmicType
,
Task
task
)
throws
BuildException
{
if
(
rmicType
==
null
)
{
try
{
Class
.
forName
(
"sun.rmi.rmic.Main"
)
;
rmicType
=
"sun"
;
}
catch
(
ClassNotFoundException
cnfe
)
{
try
{
Class
.
forName
(
"kaffe.rmi.rmic.RMIC"
)
;
Class
.
forName
(
"kaffe.tools.compiler.Compiler"
)
;
rmicType
=
"kaffe"
;
}
catch
(
ClassNotFoundException
cnfk
)
{
throw
new
BuildException
(
"Couldn\'t guess rmic implementation"
)
;
}
}
}
if
(
rmicType
.
equalsIgnoreCase
(
"sun"
)
)
{
return
new
SunRmic
(
)
;
}
else
if
(
rmicType
.
equalsIgnoreCase
(
"kaffe"
)
)
{
return
new
KaffeRmic
(
)
;
}
else
if
(
rmicType
.
equalsIgnoreCase
(
"weblogic"
)
)
{
return
new
WLRmic
(
)
;
}
return
resolveClassName
(
rmicType
)
;
}
private
static
RmicAdapter
resolveClassName
(
String
className
)
throws
BuildException
{
try
{
Class
c
=
Class
.
forName
(
className
)
;
Object
o
=
c
.
newInstance
(
)
;
return
(
RmicAdapter
)
o
;
}
catch
(
ClassNotFoundException
cnfe
)
{
throw
new
BuildException
(
className
+
" can\'t be found."
,
cnfe
)
;
}
catch
(
ClassCastException
cce
)
{
throw
new
BuildException
(
className
+
" isn\'t the classname of "
+
"a rmic adapter."
,
cce
)
;
}
catch
(
Throwable
t
)
{
throw
new
BuildException
(
className
+
" caused an interesting "
+
"exception."
,
t
)
;
}
}
}
