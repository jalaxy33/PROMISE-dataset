package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
org
.
apache
.
tools
.
ant
.
*
;
import
java
.
io
.
*
;
public
class
JikesOutputParser
implements
ExecuteStreamHandler
{
protected
Task
task
;
protected
boolean
errorFlag
=
false
;
protected
int
errors
,
warnings
;
protected
boolean
error
=
false
;
protected
boolean
emacsMode
;
protected
BufferedReader
br
;
public
void
setProcessInputStream
(
OutputStream
os
)
{
}
public
void
setProcessErrorStream
(
InputStream
is
)
{
}
public
void
setProcessOutputStream
(
InputStream
is
)
throws
IOException
{
br
=
new
BufferedReader
(
new
InputStreamReader
(
is
)
)
;
}
public
void
start
(
)
throws
IOException
{
parseOutput
(
br
)
;
}
public
void
stop
(
)
{
}
protected
JikesOutputParser
(
Task
task
,
boolean
emacsMode
)
{
super
(
)
;
this
.
task
=
task
;
this
.
emacsMode
=
emacsMode
;
}
protected
void
parseOutput
(
BufferedReader
reader
)
throws
IOException
{
if
(
emacsMode
)
parseEmacsOutput
(
reader
)
;
else
parseStandardOutput
(
reader
)
;
}
private
void
parseStandardOutput
(
BufferedReader
reader
)
throws
IOException
{
String
line
;
String
lower
;
while
(
(
line
=
reader
.
readLine
(
)
)
!=
null
)
{
lower
=
line
.
toLowerCase
(
)
;
if
(
line
.
trim
(
)
.
equals
(
""
)
)
continue
;
if
(
lower
.
indexOf
(
"error"
)
!=
-
1
)
setError
(
true
)
;
else
if
(
lower
.
indexOf
(
"warning"
)
!=
-
1
)
setError
(
false
)
;
else
{
if
(
emacsMode
)
setError
(
true
)
;
}
log
(
line
)
;
}
}
private
void
parseEmacsOutput
(
BufferedReader
reader
)
throws
IOException
{
parseStandardOutput
(
reader
)
;
}
private
void
setError
(
boolean
err
)
{
error
=
err
;
if
(
error
)
errorFlag
=
true
;
}
private
void
log
(
String
line
)
{
if
(
!
emacsMode
)
{
task
.
log
(
""
,
(
error
?
Project
.
MSG_ERR
:
Project
.
MSG_WARN
)
)
;
}
task
.
log
(
line
,
(
error
?
Project
.
MSG_ERR
:
Project
.
MSG_WARN
)
)
;
}
protected
boolean
getErrorFlag
(
)
{
return
errorFlag
;
}
}
