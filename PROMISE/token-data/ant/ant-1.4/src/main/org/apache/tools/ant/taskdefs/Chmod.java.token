package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
org
.
apache
.
tools
.
ant
.
*
;
import
org
.
apache
.
tools
.
ant
.
types
.
*
;
import
java
.
io
.
*
;
import
java
.
util
.
*
;
public
class
Chmod
extends
ExecuteOn
{
private
FileSet
defaultSet
=
new
FileSet
(
)
;
private
boolean
defaultSetDefined
=
false
;
private
boolean
havePerm
=
false
;
public
Chmod
(
)
{
super
.
setExecutable
(
"chmod"
)
;
super
.
setParallel
(
true
)
;
super
.
setSkipEmptyFilesets
(
true
)
;
}
public
void
setFile
(
File
src
)
{
FileSet
fs
=
new
FileSet
(
)
;
fs
.
setDir
(
new
File
(
src
.
getParent
(
)
)
)
;
fs
.
createInclude
(
)
.
setName
(
src
.
getName
(
)
)
;
addFileset
(
fs
)
;
}
public
void
setDir
(
File
src
)
{
defaultSet
.
setDir
(
src
)
;
}
public
void
setPerm
(
String
perm
)
{
createArg
(
)
.
setValue
(
perm
)
;
havePerm
=
true
;
}
public
PatternSet
.
NameEntry
createInclude
(
)
{
defaultSetDefined
=
true
;
return
defaultSet
.
createInclude
(
)
;
}
public
PatternSet
.
NameEntry
createExclude
(
)
{
defaultSetDefined
=
true
;
return
defaultSet
.
createExclude
(
)
;
}
public
PatternSet
createPatternSet
(
)
{
defaultSetDefined
=
true
;
return
defaultSet
.
createPatternSet
(
)
;
}
public
void
setIncludes
(
String
includes
)
{
defaultSetDefined
=
true
;
defaultSet
.
setIncludes
(
includes
)
;
}
public
void
setExcludes
(
String
excludes
)
{
defaultSetDefined
=
true
;
defaultSet
.
setExcludes
(
excludes
)
;
}
public
void
setDefaultexcludes
(
boolean
useDefaultExcludes
)
{
defaultSetDefined
=
true
;
defaultSet
.
setDefaultexcludes
(
useDefaultExcludes
)
;
}
protected
void
checkConfiguration
(
)
{
if
(
!
havePerm
)
{
throw
new
BuildException
(
"Required attribute perm not set in chmod"
,
location
)
;
}
if
(
defaultSetDefined
&&
defaultSet
.
getDir
(
project
)
!=
null
)
{
addFileset
(
defaultSet
)
;
}
super
.
checkConfiguration
(
)
;
}
public
void
execute
(
)
throws
BuildException
{
if
(
defaultSetDefined
||
defaultSet
.
getDir
(
project
)
==
null
)
{
super
.
execute
(
)
;
}
else
if
(
isValidOs
(
)
)
{
createArg
(
)
.
setValue
(
defaultSet
.
getDir
(
project
)
.
getPath
(
)
)
;
Execute
execute
=
prepareExec
(
)
;
try
{
execute
.
setCommandline
(
cmdl
.
getCommandline
(
)
)
;
runExecute
(
execute
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
"Execute failed: "
+
e
,
e
,
location
)
;
}
finally
{
logFlush
(
)
;
}
}
}
public
void
setExecutable
(
String
e
)
{
throw
new
BuildException
(
taskType
+
" doesn\'t support the executable attribute"
,
location
)
;
}
public
void
setCommand
(
String
e
)
{
throw
new
BuildException
(
taskType
+
" doesn\'t support the command attribute"
,
location
)
;
}
public
void
setSkipEmptyFilesets
(
boolean
skip
)
{
throw
new
BuildException
(
taskType
+
" doesn\'t support the skipemptyfileset attribute"
,
location
)
;
}
protected
boolean
isValidOs
(
)
{
return
System
.
getProperty
(
"path.separator"
)
.
equals
(
":"
)
&&
(
!
System
.
getProperty
(
"os.name"
)
.
startsWith
(
"Mac"
)
||
System
.
getProperty
(
"os.name"
)
.
endsWith
(
"X"
)
)
&&
super
.
isValidOs
(
)
;
}
}
