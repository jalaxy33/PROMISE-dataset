package
org
.
apache
.
tools
.
ant
;
import
java
.
io
.
*
;
public
class
DefaultLogger
implements
BuildLogger
{
private
static
int
LEFT_COLUMN_SIZE
=
12
;
protected
PrintStream
out
;
protected
PrintStream
err
;
protected
int
msgOutputLevel
=
Project
.
MSG_ERR
;
private
long
startTime
=
System
.
currentTimeMillis
(
)
;
protected
static
String
lSep
=
System
.
getProperty
(
"line.separator"
)
;
protected
boolean
emacsMode
=
false
;
public
void
setMessageOutputLevel
(
int
level
)
{
this
.
msgOutputLevel
=
level
;
}
public
void
setOutputPrintStream
(
PrintStream
output
)
{
this
.
out
=
output
;
}
public
void
setErrorPrintStream
(
PrintStream
err
)
{
this
.
err
=
err
;
}
public
void
setEmacsMode
(
boolean
emacsMode
)
{
this
.
emacsMode
=
emacsMode
;
}
public
void
buildStarted
(
BuildEvent
event
)
{
startTime
=
System
.
currentTimeMillis
(
)
;
}
public
void
buildFinished
(
BuildEvent
event
)
{
Throwable
error
=
event
.
getException
(
)
;
if
(
error
==
null
)
{
out
.
println
(
lSep
+
"BUILD SUCCESSFUL"
)
;
}
else
{
err
.
println
(
lSep
+
"BUILD FAILED"
+
lSep
)
;
if
(
Project
.
MSG_VERBOSE
<=
msgOutputLevel
||
!
(
error
instanceof
BuildException
)
)
{
error
.
printStackTrace
(
err
)
;
}
else
{
if
(
error
instanceof
BuildException
)
{
err
.
println
(
error
.
toString
(
)
)
;
}
else
{
err
.
println
(
error
.
getMessage
(
)
)
;
}
}
}
out
.
println
(
lSep
+
"Total time: "
+
formatTime
(
System
.
currentTimeMillis
(
)
-
startTime
)
)
;
}
public
void
targetStarted
(
BuildEvent
event
)
{
if
(
Project
.
MSG_INFO
<=
msgOutputLevel
)
{
out
.
println
(
lSep
+
event
.
getTarget
(
)
.
getName
(
)
+
":"
)
;
}
}
public
void
targetFinished
(
BuildEvent
event
)
{
}
public
void
taskStarted
(
BuildEvent
event
)
{
}
public
void
taskFinished
(
BuildEvent
event
)
{
}
public
void
messageLogged
(
BuildEvent
event
)
{
PrintStream
logTo
=
event
.
getPriority
(
)
==
Project
.
MSG_ERR
?
err
:
out
;
if
(
event
.
getPriority
(
)
<=
msgOutputLevel
)
{
if
(
event
.
getTask
(
)
!=
null
)
{
String
name
=
event
.
getTask
(
)
.
getTaskName
(
)
;
if
(
!
emacsMode
)
{
String
msg
=
"["
+
name
+
"] "
;
for
(
int
i
=
0
;
i
<
(
LEFT_COLUMN_SIZE
-
msg
.
length
(
)
)
;
i
++
)
{
logTo
.
print
(
" "
)
;
}
logTo
.
print
(
msg
)
;
}
}
logTo
.
println
(
event
.
getMessage
(
)
)
;
}
}
protected
static
String
formatTime
(
long
millis
)
{
long
seconds
=
millis
/
1000
;
long
minutes
=
seconds
/
60
;
if
(
minutes
>
0
)
{
return
Long
.
toString
(
minutes
)
+
" minute"
+
(
minutes
==
1
?
" "
:
"s "
)
+
Long
.
toString
(
seconds
%
60
)
+
" second"
+
(
seconds
%
60
==
1
?
""
:
"s"
)
;
}
else
{
return
Long
.
toString
(
seconds
)
+
" second"
+
(
seconds
%
60
==
1
?
""
:
"s"
)
;
}
}
}
