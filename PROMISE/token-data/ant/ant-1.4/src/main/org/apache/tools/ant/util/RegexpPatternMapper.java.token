package
org
.
apache
.
tools
.
ant
.
util
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
util
.
regexp
.
RegexpMatcher
;
import
org
.
apache
.
tools
.
ant
.
util
.
regexp
.
RegexpMatcherFactory
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Vector
;
public
class
RegexpPatternMapper
implements
FileNameMapper
{
protected
RegexpMatcher
reg
=
null
;
protected
char
[
]
to
=
null
;
protected
StringBuffer
result
=
new
StringBuffer
(
)
;
public
RegexpPatternMapper
(
)
throws
BuildException
{
reg
=
(
new
RegexpMatcherFactory
(
)
)
.
newRegexpMatcher
(
)
;
}
public
void
setFrom
(
String
from
)
throws
BuildException
{
try
{
reg
.
setPattern
(
from
)
;
}
catch
(
NoClassDefFoundError
e
)
{
throw
new
BuildException
(
"Cannot load regular expression matcher"
,
e
)
;
}
}
public
void
setTo
(
String
to
)
{
this
.
to
=
to
.
toCharArray
(
)
;
}
public
String
[
]
mapFileName
(
String
sourceFileName
)
{
if
(
reg
==
null
||
to
==
null
||
!
reg
.
matches
(
sourceFileName
)
)
{
return
null
;
}
return
new
String
[
]
{
replaceReferences
(
sourceFileName
)
}
;
}
protected
String
replaceReferences
(
String
source
)
{
Vector
v
=
reg
.
getGroups
(
source
)
;
result
.
setLength
(
0
)
;
for
(
int
i
=
0
;
i
<
to
.
length
;
i
++
)
{
if
(
to
[
i
]
==
'\\'
)
{
if
(
++
i
<
to
.
length
)
{
int
value
=
Character
.
digit
(
to
[
i
]
,
10
)
;
if
(
value
>
-
1
)
{
result
.
append
(
(
String
)
v
.
elementAt
(
value
)
)
;
}
else
{
result
.
append
(
to
[
i
]
)
;
}
}
else
{
result
.
append
(
'\\'
)
;
}
}
else
{
result
.
append
(
to
[
i
]
)
;
}
}
return
result
.
toString
(
)
;
}
}
