package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
public
class
LogOutputStream
extends
OutputStream
{
private
static
final
int
INTIAL_SIZE
=
132
;
private
static
final
int
CR
=
0x0d
;
private
static
final
int
LF
=
0x0a
;
private
ByteArrayOutputStream
buffer
=
new
ByteArrayOutputStream
(
INTIAL_SIZE
)
;
private
boolean
skip
=
false
;
private
Task
task
;
private
int
level
=
Project
.
MSG_INFO
;
public
LogOutputStream
(
Task
task
,
int
level
)
{
this
.
task
=
task
;
this
.
level
=
level
;
}
public
void
write
(
int
cc
)
throws
IOException
{
final
byte
c
=
(
byte
)
cc
;
if
(
(
c
==
'\n'
)
||
(
c
==
'\r'
)
)
{
if
(
!
skip
)
{
processBuffer
(
)
;
}
}
else
{
buffer
.
write
(
cc
)
;
}
skip
=
(
c
==
'\r'
)
;
}
public
void
flush
(
)
{
processBuffer
(
)
;
}
protected
void
processBuffer
(
)
{
processLine
(
buffer
.
toString
(
)
)
;
buffer
.
reset
(
)
;
}
protected
void
processLine
(
String
line
)
{
processLine
(
line
,
level
)
;
}
protected
void
processLine
(
String
line
,
int
level
)
{
task
.
log
(
line
,
level
)
;
}
public
void
close
(
)
throws
IOException
{
if
(
buffer
.
size
(
)
>
0
)
{
processBuffer
(
)
;
}
super
.
close
(
)
;
}
public
int
getMessageLevel
(
)
{
return
level
;
}
public
void
write
(
byte
[
]
b
,
int
off
,
int
len
)
throws
IOException
{
int
offset
=
off
;
int
blockStartOffset
=
offset
;
int
remaining
=
len
;
while
(
remaining
>
0
)
{
while
(
remaining
>
0
&&
b
[
offset
]
!=
LF
&&
b
[
offset
]
!=
CR
)
{
offset
++
;
remaining
--
;
}
int
blockLength
=
offset
-
blockStartOffset
;
if
(
blockLength
>
0
)
{
buffer
.
write
(
b
,
blockStartOffset
,
blockLength
)
;
}
while
(
remaining
>
0
&&
(
b
[
offset
]
==
LF
||
b
[
offset
]
==
CR
)
)
{
write
(
b
[
offset
]
)
;
offset
++
;
remaining
--
;
}
blockStartOffset
=
offset
;
}
}
}
