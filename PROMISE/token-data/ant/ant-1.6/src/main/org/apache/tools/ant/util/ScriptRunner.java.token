package
org
.
apache
.
tools
.
ant
.
util
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
org
.
apache
.
bsf
.
BSFException
;
import
org
.
apache
.
bsf
.
BSFManager
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
java
.
util
.
Map
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
public
class
ScriptRunner
{
private
String
language
;
private
String
script
=
""
;
private
Map
beans
=
new
HashMap
(
)
;
public
void
addBeans
(
Map
dictionary
)
{
for
(
Iterator
i
=
dictionary
.
keySet
(
)
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
String
key
=
(
String
)
i
.
next
(
)
;
try
{
Object
val
=
dictionary
.
get
(
key
)
;
addBean
(
key
,
val
)
;
}
catch
(
BuildException
ex
)
{
}
}
}
public
void
addBean
(
String
key
,
Object
bean
)
{
boolean
isValid
=
key
.
length
(
)
>
0
&&
Character
.
isJavaIdentifierStart
(
key
.
charAt
(
0
)
)
;
for
(
int
i
=
1
;
isValid
&&
i
<
key
.
length
(
)
;
i
++
)
{
isValid
=
Character
.
isJavaIdentifierPart
(
key
.
charAt
(
i
)
)
;
}
if
(
isValid
)
{
beans
.
put
(
key
,
bean
)
;
}
}
public
void
executeScript
(
String
execName
)
throws
BuildException
{
if
(
language
==
null
)
{
throw
new
BuildException
(
"script language must be specified"
)
;
}
try
{
BSFManager
manager
=
new
BSFManager
(
)
;
for
(
Iterator
i
=
beans
.
keySet
(
)
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
String
key
=
(
String
)
i
.
next
(
)
;
Object
value
=
beans
.
get
(
key
)
;
if
(
value
!=
null
)
{
manager
.
declareBean
(
key
,
value
,
value
.
getClass
(
)
)
;
}
else
{
manager
.
undeclareBean
(
key
)
;
}
}
manager
.
exec
(
language
,
execName
,
0
,
0
,
script
)
;
}
catch
(
BSFException
be
)
{
Throwable
t
=
be
;
Throwable
te
=
be
.
getTargetException
(
)
;
if
(
te
!=
null
)
{
if
(
te
instanceof
BuildException
)
{
throw
(
BuildException
)
te
;
}
else
{
t
=
te
;
}
}
throw
new
BuildException
(
t
)
;
}
}
public
void
setLanguage
(
String
language
)
{
this
.
language
=
language
;
}
public
String
getLanguage
(
)
{
return
language
;
}
public
void
setSrc
(
File
file
)
{
if
(
!
file
.
exists
(
)
)
{
throw
new
BuildException
(
"file "
+
file
.
getPath
(
)
+
" not found."
)
;
}
int
count
=
(
int
)
file
.
length
(
)
;
byte
[
]
data
=
new
byte
[
count
]
;
try
{
FileInputStream
inStream
=
new
FileInputStream
(
file
)
;
inStream
.
read
(
data
)
;
inStream
.
close
(
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
e
)
;
}
script
+=
new
String
(
data
)
;
}
public
void
addText
(
String
text
)
{
this
.
script
+=
text
;
}
}
