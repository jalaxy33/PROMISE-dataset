package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
PatternSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
AndSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
ContainsRegexpSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
ContainsSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
DateSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
DependSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
DepthSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
ExtendSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
FilenameSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
MajoritySelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
NoneSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
NotSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
OrSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
PresentSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
SelectSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
SizeSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
FileSelector
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
modifiedselector
.
ModifiedSelector
;
public
class
Delete
extends
MatchingTask
{
private
static
final
int
DELETE_RETRY_SLEEP_MILLIS
=
10
;
protected
File
file
=
null
;
protected
File
dir
=
null
;
protected
Vector
filesets
=
new
Vector
(
)
;
protected
boolean
usedMatchingTask
=
false
;
protected
boolean
includeEmpty
=
false
;
private
int
verbosity
=
Project
.
MSG_VERBOSE
;
private
boolean
quiet
=
false
;
private
boolean
failonerror
=
true
;
public
void
setFile
(
File
file
)
{
this
.
file
=
file
;
}
public
void
setDir
(
File
dir
)
{
this
.
dir
=
dir
;
}
public
void
setVerbose
(
boolean
verbose
)
{
if
(
verbose
)
{
this
.
verbosity
=
Project
.
MSG_INFO
;
}
else
{
this
.
verbosity
=
Project
.
MSG_VERBOSE
;
}
}
public
void
setQuiet
(
boolean
quiet
)
{
this
.
quiet
=
quiet
;
if
(
quiet
)
{
this
.
failonerror
=
false
;
}
}
public
void
setFailOnError
(
boolean
failonerror
)
{
this
.
failonerror
=
failonerror
;
}
public
void
setIncludeEmptyDirs
(
boolean
includeEmpty
)
{
this
.
includeEmpty
=
includeEmpty
;
}
public
void
addFileset
(
FileSet
set
)
{
filesets
.
addElement
(
set
)
;
}
public
PatternSet
.
NameEntry
createInclude
(
)
{
usedMatchingTask
=
true
;
return
super
.
createInclude
(
)
;
}
public
PatternSet
.
NameEntry
createIncludesFile
(
)
{
usedMatchingTask
=
true
;
return
super
.
createIncludesFile
(
)
;
}
public
PatternSet
.
NameEntry
createExclude
(
)
{
usedMatchingTask
=
true
;
return
super
.
createExclude
(
)
;
}
public
PatternSet
.
NameEntry
createExcludesFile
(
)
{
usedMatchingTask
=
true
;
return
super
.
createExcludesFile
(
)
;
}
public
PatternSet
createPatternSet
(
)
{
usedMatchingTask
=
true
;
return
super
.
createPatternSet
(
)
;
}
public
void
setIncludes
(
String
includes
)
{
usedMatchingTask
=
true
;
super
.
setIncludes
(
includes
)
;
}
public
void
setExcludes
(
String
excludes
)
{
usedMatchingTask
=
true
;
super
.
setExcludes
(
excludes
)
;
}
public
void
setDefaultexcludes
(
boolean
useDefaultExcludes
)
{
usedMatchingTask
=
true
;
super
.
setDefaultexcludes
(
useDefaultExcludes
)
;
}
public
void
setIncludesfile
(
File
includesfile
)
{
usedMatchingTask
=
true
;
super
.
setIncludesfile
(
includesfile
)
;
}
public
void
setExcludesfile
(
File
excludesfile
)
{
usedMatchingTask
=
true
;
super
.
setExcludesfile
(
excludesfile
)
;
}
public
void
setCaseSensitive
(
boolean
isCaseSensitive
)
{
usedMatchingTask
=
true
;
super
.
setCaseSensitive
(
isCaseSensitive
)
;
}
public
void
setFollowSymlinks
(
boolean
followSymlinks
)
{
usedMatchingTask
=
true
;
super
.
setFollowSymlinks
(
followSymlinks
)
;
}
public
void
addSelector
(
SelectSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addSelector
(
selector
)
;
}
public
void
addAnd
(
AndSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addAnd
(
selector
)
;
}
public
void
addOr
(
OrSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addOr
(
selector
)
;
}
public
void
addNot
(
NotSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addNot
(
selector
)
;
}
public
void
addNone
(
NoneSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addNone
(
selector
)
;
}
public
void
addMajority
(
MajoritySelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addMajority
(
selector
)
;
}
public
void
addDate
(
DateSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addDate
(
selector
)
;
}
public
void
addSize
(
SizeSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addSize
(
selector
)
;
}
public
void
addFilename
(
FilenameSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addFilename
(
selector
)
;
}
public
void
addCustom
(
ExtendSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addCustom
(
selector
)
;
}
public
void
addContains
(
ContainsSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addContains
(
selector
)
;
}
public
void
addPresent
(
PresentSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addPresent
(
selector
)
;
}
public
void
addDepth
(
DepthSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addDepth
(
selector
)
;
}
public
void
addDepend
(
DependSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addDepend
(
selector
)
;
}
public
void
addContainsRegexp
(
ContainsRegexpSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addContainsRegexp
(
selector
)
;
}
public
void
addModified
(
ModifiedSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
addModified
(
selector
)
;
}
public
void
add
(
FileSelector
selector
)
{
usedMatchingTask
=
true
;
super
.
add
(
selector
)
;
}
public
void
execute
(
)
throws
BuildException
{
if
(
usedMatchingTask
)
{
log
(
"DEPRECATED - Use of the implicit FileSet is deprecated.  "
+
"Use a nested fileset element instead."
)
;
}
if
(
file
==
null
&&
dir
==
null
&&
filesets
.
size
(
)
==
0
)
{
throw
new
BuildException
(
"At least one of the file or dir "
+
"attributes, or a fileset element, "
+
"must be set."
)
;
}
if
(
quiet
&&
failonerror
)
{
throw
new
BuildException
(
"quiet and failonerror cannot both be "
+
"set to true"
,
getLocation
(
)
)
;
}
if
(
file
!=
null
)
{
if
(
file
.
exists
(
)
)
{
if
(
file
.
isDirectory
(
)
)
{
log
(
"Directory "
+
file
.
getAbsolutePath
(
)
+
" cannot be removed using the file attribute.  "
+
"Use dir instead."
)
;
}
else
{
log
(
"Deleting: "
+
file
.
getAbsolutePath
(
)
)
;
if
(
!
delete
(
file
)
)
{
String
message
=
"Unable to delete file "
+
file
.
getAbsolutePath
(
)
;
if
(
failonerror
)
{
throw
new
BuildException
(
message
)
;
}
else
{
log
(
message
,
quiet
?
Project
.
MSG_VERBOSE
:
Project
.
MSG_WARN
)
;
}
}
}
}
else
{
log
(
"Could not find file "
+
file
.
getAbsolutePath
(
)
+
" to delete."
,
Project
.
MSG_VERBOSE
)
;
}
}
if
(
dir
!=
null
&&
dir
.
exists
(
)
&&
dir
.
isDirectory
(
)
&&
!
usedMatchingTask
)
{
if
(
verbosity
==
Project
.
MSG_VERBOSE
)
{
log
(
"Deleting directory "
+
dir
.
getAbsolutePath
(
)
)
;
}
removeDir
(
dir
)
;
}
for
(
int
i
=
0
;
i
<
filesets
.
size
(
)
;
i
++
)
{
FileSet
fs
=
(
FileSet
)
filesets
.
elementAt
(
i
)
;
try
{
DirectoryScanner
ds
=
fs
.
getDirectoryScanner
(
getProject
(
)
)
;
String
[
]
files
=
ds
.
getIncludedFiles
(
)
;
String
[
]
dirs
=
ds
.
getIncludedDirectories
(
)
;
removeFiles
(
fs
.
getDir
(
getProject
(
)
)
,
files
,
dirs
)
;
}
catch
(
BuildException
be
)
{
if
(
failonerror
)
{
throw
be
;
}
else
{
log
(
be
.
getMessage
(
)
,
quiet
?
Project
.
MSG_VERBOSE
:
Project
.
MSG_WARN
)
;
}
}
}
if
(
usedMatchingTask
&&
dir
!=
null
)
{
try
{
DirectoryScanner
ds
=
super
.
getDirectoryScanner
(
dir
)
;
String
[
]
files
=
ds
.
getIncludedFiles
(
)
;
String
[
]
dirs
=
ds
.
getIncludedDirectories
(
)
;
removeFiles
(
dir
,
files
,
dirs
)
;
}
catch
(
BuildException
be
)
{
if
(
failonerror
)
{
throw
be
;
}
else
{
log
(
be
.
getMessage
(
)
,
quiet
?
Project
.
MSG_VERBOSE
:
Project
.
MSG_WARN
)
;
}
}
}
}
private
boolean
delete
(
File
f
)
{
if
(
!
f
.
delete
(
)
)
{
try
{
Thread
.
sleep
(
DELETE_RETRY_SLEEP_MILLIS
)
;
return
f
.
delete
(
)
;
}
catch
(
InterruptedException
ex
)
{
return
f
.
delete
(
)
;
}
}
return
true
;
}
protected
void
removeDir
(
File
d
)
{
String
[
]
list
=
d
.
list
(
)
;
if
(
list
==
null
)
{
list
=
new
String
[
0
]
;
}
for
(
int
i
=
0
;
i
<
list
.
length
;
i
++
)
{
String
s
=
list
[
i
]
;
File
f
=
new
File
(
d
,
s
)
;
if
(
f
.
isDirectory
(
)
)
{
removeDir
(
f
)
;
}
else
{
log
(
"Deleting "
+
f
.
getAbsolutePath
(
)
,
verbosity
)
;
if
(
!
delete
(
f
)
)
{
String
message
=
"Unable to delete file "
+
f
.
getAbsolutePath
(
)
;
if
(
failonerror
)
{
throw
new
BuildException
(
message
)
;
}
else
{
log
(
message
,
quiet
?
Project
.
MSG_VERBOSE
:
Project
.
MSG_WARN
)
;
}
}
}
}
log
(
"Deleting directory "
+
d
.
getAbsolutePath
(
)
,
verbosity
)
;
if
(
!
delete
(
d
)
)
{
String
message
=
"Unable to delete directory "
+
dir
.
getAbsolutePath
(
)
;
if
(
failonerror
)
{
throw
new
BuildException
(
message
)
;
}
else
{
log
(
message
,
quiet
?
Project
.
MSG_VERBOSE
:
Project
.
MSG_WARN
)
;
}
}
}
protected
void
removeFiles
(
File
d
,
String
[
]
files
,
String
[
]
dirs
)
{
if
(
files
.
length
>
0
)
{
log
(
"Deleting "
+
files
.
length
+
" files from "
+
d
.
getAbsolutePath
(
)
)
;
for
(
int
j
=
0
;
j
<
files
.
length
;
j
++
)
{
File
f
=
new
File
(
d
,
files
[
j
]
)
;
log
(
"Deleting "
+
f
.
getAbsolutePath
(
)
,
verbosity
)
;
if
(
!
delete
(
f
)
)
{
String
message
=
"Unable to delete file "
+
f
.
getAbsolutePath
(
)
;
if
(
failonerror
)
{
throw
new
BuildException
(
message
)
;
}
else
{
log
(
message
,
quiet
?
Project
.
MSG_VERBOSE
:
Project
.
MSG_WARN
)
;
}
}
}
}
if
(
dirs
.
length
>
0
&&
includeEmpty
)
{
int
dirCount
=
0
;
for
(
int
j
=
dirs
.
length
-
1
;
j
>=
0
;
j
--
)
{
File
dir
=
new
File
(
d
,
dirs
[
j
]
)
;
String
[
]
dirFiles
=
dir
.
list
(
)
;
if
(
dirFiles
==
null
||
dirFiles
.
length
==
0
)
{
log
(
"Deleting "
+
dir
.
getAbsolutePath
(
)
,
verbosity
)
;
if
(
!
delete
(
dir
)
)
{
String
message
=
"Unable to delete directory "
+
dir
.
getAbsolutePath
(
)
;
if
(
failonerror
)
{
throw
new
BuildException
(
message
)
;
}
else
{
log
(
message
,
quiet
?
Project
.
MSG_VERBOSE
:
Project
.
MSG_WARN
)
;
}
}
else
{
dirCount
++
;
}
}
}
if
(
dirCount
>
0
)
{
log
(
"Deleted "
+
dirCount
+
" director"
+
(
dirCount
==
1
?
"y"
:
"ies"
)
+
" from "
+
d
.
getAbsolutePath
(
)
)
;
}
}
}
}
