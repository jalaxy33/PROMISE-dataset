package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
BufferedInputStream
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
Reader
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Properties
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
filters
.
util
.
ChainReaderHelper
;
import
org
.
apache
.
tools
.
ant
.
types
.
FilterChain
;
public
final
class
LoadProperties
extends
Task
{
private
File
srcFile
=
null
;
private
final
Vector
filterChains
=
new
Vector
(
)
;
private
String
encoding
=
null
;
public
final
void
setSrcFile
(
final
File
srcFile
)
{
this
.
srcFile
=
srcFile
;
}
public
final
void
setEncoding
(
final
String
encoding
)
{
this
.
encoding
=
encoding
;
}
public
final
void
execute
(
)
throws
BuildException
{
if
(
srcFile
==
null
)
{
throw
new
BuildException
(
"Source file not defined."
)
;
}
if
(
!
srcFile
.
exists
(
)
)
{
throw
new
BuildException
(
"Source file does not exist."
)
;
}
if
(
!
srcFile
.
isFile
(
)
)
{
throw
new
BuildException
(
"Source file is not a file."
)
;
}
FileInputStream
fis
=
null
;
BufferedInputStream
bis
=
null
;
Reader
instream
=
null
;
ByteArrayInputStream
tis
=
null
;
try
{
final
long
len
=
srcFile
.
length
(
)
;
fis
=
new
FileInputStream
(
srcFile
)
;
bis
=
new
BufferedInputStream
(
fis
)
;
if
(
encoding
==
null
)
{
instream
=
new
InputStreamReader
(
bis
)
;
}
else
{
instream
=
new
InputStreamReader
(
bis
,
encoding
)
;
}
ChainReaderHelper
crh
=
new
ChainReaderHelper
(
)
;
crh
.
setPrimaryReader
(
instream
)
;
crh
.
setFilterChains
(
filterChains
)
;
crh
.
setProject
(
getProject
(
)
)
;
instream
=
crh
.
getAssembledReader
(
)
;
String
text
=
crh
.
readFully
(
instream
)
;
if
(
text
!=
null
)
{
if
(
!
text
.
endsWith
(
"\n"
)
)
{
text
=
text
+
"\n"
;
}
if
(
encoding
==
null
)
{
tis
=
new
ByteArrayInputStream
(
text
.
getBytes
(
)
)
;
}
else
{
tis
=
new
ByteArrayInputStream
(
text
.
getBytes
(
encoding
)
)
;
}
final
Properties
props
=
new
Properties
(
)
;
props
.
load
(
tis
)
;
Property
propertyTask
=
(
Property
)
getProject
(
)
.
createTask
(
"property"
)
;
propertyTask
.
setTaskName
(
getTaskName
(
)
)
;
propertyTask
.
addProperties
(
props
)
;
}
}
catch
(
final
IOException
ioe
)
{
final
String
message
=
"Unable to load file: "
+
ioe
.
toString
(
)
;
throw
new
BuildException
(
message
,
ioe
,
getLocation
(
)
)
;
}
catch
(
final
BuildException
be
)
{
throw
be
;
}
finally
{
try
{
if
(
fis
!=
null
)
{
fis
.
close
(
)
;
}
}
catch
(
IOException
ioex
)
{
}
try
{
if
(
tis
!=
null
)
{
tis
.
close
(
)
;
}
}
catch
(
IOException
ioex
)
{
}
}
}
public
final
void
addFilterChain
(
FilterChain
filter
)
{
filterChains
.
addElement
(
filter
)
;
}
}
