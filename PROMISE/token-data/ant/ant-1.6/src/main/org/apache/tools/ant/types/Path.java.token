package
org
.
apache
.
tools
.
ant
.
types
;
import
java
.
io
.
File
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Locale
;
import
java
.
util
.
Stack
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
PathTokenizer
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
util
.
JavaEnvUtils
;
public
class
Path
extends
DataType
implements
Cloneable
{
private
Vector
elements
;
public
static
Path
systemClasspath
=
new
Path
(
null
,
System
.
getProperty
(
"java.class.path"
)
)
;
public
class
PathElement
{
private
String
[
]
parts
;
public
void
setLocation
(
File
loc
)
{
parts
=
new
String
[
]
{
translateFile
(
loc
.
getAbsolutePath
(
)
)
}
;
}
public
void
setPath
(
String
path
)
{
parts
=
Path
.
translatePath
(
getProject
(
)
,
path
)
;
}
public
String
[
]
getParts
(
)
{
return
parts
;
}
}
public
Path
(
Project
p
,
String
path
)
{
this
(
p
)
;
createPathElement
(
)
.
setPath
(
path
)
;
}
public
Path
(
Project
project
)
{
setProject
(
project
)
;
elements
=
new
Vector
(
)
;
}
public
void
setLocation
(
File
location
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
createPathElement
(
)
.
setLocation
(
location
)
;
}
public
void
setPath
(
String
path
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
createPathElement
(
)
.
setPath
(
path
)
;
}
public
void
setRefid
(
Reference
r
)
throws
BuildException
{
if
(
!
elements
.
isEmpty
(
)
)
{
throw
tooManyAttributes
(
)
;
}
elements
.
addElement
(
r
)
;
super
.
setRefid
(
r
)
;
}
public
PathElement
createPathElement
(
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
PathElement
pe
=
new
PathElement
(
)
;
elements
.
addElement
(
pe
)
;
return
pe
;
}
public
void
addFileset
(
FileSet
fs
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
elements
.
addElement
(
fs
)
;
setChecked
(
false
)
;
}
public
void
addFilelist
(
FileList
fl
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
elements
.
addElement
(
fl
)
;
setChecked
(
false
)
;
}
public
void
addDirset
(
DirSet
dset
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
elements
.
addElement
(
dset
)
;
setChecked
(
false
)
;
}
public
void
add
(
Path
path
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
elements
.
addElement
(
path
)
;
setChecked
(
false
)
;
}
public
Path
createPath
(
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
Path
p
=
new
Path
(
getProject
(
)
)
;
elements
.
addElement
(
p
)
;
setChecked
(
false
)
;
return
p
;
}
public
void
append
(
Path
other
)
{
if
(
other
==
null
)
{
return
;
}
String
[
]
l
=
other
.
list
(
)
;
for
(
int
i
=
0
;
i
<
l
.
length
;
i
++
)
{
if
(
elements
.
indexOf
(
l
[
i
]
)
==
-
1
)
{
elements
.
addElement
(
l
[
i
]
)
;
}
}
}
public
void
addExisting
(
Path
source
)
{
addExisting
(
source
,
false
)
;
}
public
void
addExisting
(
Path
source
,
boolean
tryUserDir
)
{
String
[
]
list
=
source
.
list
(
)
;
File
userDir
=
(
tryUserDir
)
?
new
File
(
System
.
getProperty
(
"user.dir"
)
)
:
null
;
for
(
int
i
=
0
;
i
<
list
.
length
;
i
++
)
{
File
f
=
null
;
if
(
getProject
(
)
!=
null
)
{
f
=
getProject
(
)
.
resolveFile
(
list
[
i
]
)
;
}
else
{
f
=
new
File
(
list
[
i
]
)
;
}
if
(
tryUserDir
&&
!
f
.
exists
(
)
)
{
f
=
new
File
(
userDir
,
list
[
i
]
)
;
}
if
(
f
.
exists
(
)
)
{
setLocation
(
f
)
;
}
else
{
log
(
"dropping "
+
f
+
" from path as it doesn't exist"
,
Project
.
MSG_VERBOSE
)
;
}
}
}
public
String
[
]
list
(
)
{
if
(
!
isChecked
(
)
)
{
Stack
stk
=
new
Stack
(
)
;
stk
.
push
(
this
)
;
dieOnCircularReference
(
stk
,
getProject
(
)
)
;
}
Vector
result
=
new
Vector
(
2
*
elements
.
size
(
)
)
;
for
(
int
i
=
0
;
i
<
elements
.
size
(
)
;
i
++
)
{
Object
o
=
elements
.
elementAt
(
i
)
;
if
(
o
instanceof
Reference
)
{
Reference
r
=
(
Reference
)
o
;
o
=
r
.
getReferencedObject
(
getProject
(
)
)
;
if
(
!
(
o
instanceof
Path
)
)
{
String
msg
=
r
.
getRefId
(
)
+
" doesn\'t denote a path "
+
o
;
throw
new
BuildException
(
msg
)
;
}
}
if
(
o
instanceof
String
)
{
addUnlessPresent
(
result
,
(
String
)
o
)
;
}
else
if
(
o
instanceof
PathElement
)
{
String
[
]
parts
=
(
(
PathElement
)
o
)
.
getParts
(
)
;
if
(
parts
==
null
)
{
throw
new
BuildException
(
"You must either set location or"
+
" path on <pathelement>"
)
;
}
for
(
int
j
=
0
;
j
<
parts
.
length
;
j
++
)
{
addUnlessPresent
(
result
,
parts
[
j
]
)
;
}
}
else
if
(
o
instanceof
Path
)
{
Path
p
=
(
Path
)
o
;
if
(
p
.
getProject
(
)
==
null
)
{
p
.
setProject
(
getProject
(
)
)
;
}
String
[
]
parts
=
p
.
list
(
)
;
for
(
int
j
=
0
;
j
<
parts
.
length
;
j
++
)
{
addUnlessPresent
(
result
,
parts
[
j
]
)
;
}
}
else
if
(
o
instanceof
DirSet
)
{
DirSet
dset
=
(
DirSet
)
o
;
DirectoryScanner
ds
=
dset
.
getDirectoryScanner
(
getProject
(
)
)
;
String
[
]
s
=
ds
.
getIncludedDirectories
(
)
;
File
dir
=
dset
.
getDir
(
getProject
(
)
)
;
addUnlessPresent
(
result
,
dir
,
s
)
;
}
else
if
(
o
instanceof
FileSet
)
{
FileSet
fs
=
(
FileSet
)
o
;
DirectoryScanner
ds
=
fs
.
getDirectoryScanner
(
getProject
(
)
)
;
String
[
]
s
=
ds
.
getIncludedFiles
(
)
;
File
dir
=
fs
.
getDir
(
getProject
(
)
)
;
addUnlessPresent
(
result
,
dir
,
s
)
;
}
else
if
(
o
instanceof
FileList
)
{
FileList
fl
=
(
FileList
)
o
;
String
[
]
s
=
fl
.
getFiles
(
getProject
(
)
)
;
File
dir
=
fl
.
getDir
(
getProject
(
)
)
;
addUnlessPresent
(
result
,
dir
,
s
)
;
}
}
String
[
]
res
=
new
String
[
result
.
size
(
)
]
;
result
.
copyInto
(
res
)
;
return
res
;
}
public
String
toString
(
)
{
final
String
[
]
list
=
list
(
)
;
if
(
list
.
length
==
0
)
{
return
""
;
}
final
StringBuffer
result
=
new
StringBuffer
(
list
[
0
]
.
toString
(
)
)
;
for
(
int
i
=
1
;
i
<
list
.
length
;
i
++
)
{
result
.
append
(
File
.
pathSeparatorChar
)
;
result
.
append
(
list
[
i
]
)
;
}
return
result
.
toString
(
)
;
}
public
static
String
[
]
translatePath
(
Project
project
,
String
source
)
{
final
Vector
result
=
new
Vector
(
)
;
if
(
source
==
null
)
{
return
new
String
[
0
]
;
}
PathTokenizer
tok
=
new
PathTokenizer
(
source
)
;
StringBuffer
element
=
new
StringBuffer
(
)
;
while
(
tok
.
hasMoreTokens
(
)
)
{
String
pathElement
=
tok
.
nextToken
(
)
;
try
{
element
.
append
(
resolveFile
(
project
,
pathElement
)
)
;
}
catch
(
BuildException
e
)
{
project
.
log
(
"Dropping path element "
+
pathElement
+
" as it is not valid relative to the project"
,
Project
.
MSG_VERBOSE
)
;
}
for
(
int
i
=
0
;
i
<
element
.
length
(
)
;
i
++
)
{
translateFileSep
(
element
,
i
)
;
}
result
.
addElement
(
element
.
toString
(
)
)
;
element
=
new
StringBuffer
(
)
;
}
String
[
]
res
=
new
String
[
result
.
size
(
)
]
;
result
.
copyInto
(
res
)
;
return
res
;
}
public
static
String
translateFile
(
String
source
)
{
if
(
source
==
null
)
{
return
""
;
}
final
StringBuffer
result
=
new
StringBuffer
(
source
)
;
for
(
int
i
=
0
;
i
<
result
.
length
(
)
;
i
++
)
{
translateFileSep
(
result
,
i
)
;
}
return
result
.
toString
(
)
;
}
protected
static
boolean
translateFileSep
(
StringBuffer
buffer
,
int
pos
)
{
if
(
buffer
.
charAt
(
pos
)
==
'/'
||
buffer
.
charAt
(
pos
)
==
'\\'
)
{
buffer
.
setCharAt
(
pos
,
File
.
separatorChar
)
;
return
true
;
}
return
false
;
}
public
int
size
(
)
{
return
list
(
)
.
length
;
}
public
Object
clone
(
)
{
try
{
Path
p
=
(
Path
)
super
.
clone
(
)
;
p
.
elements
=
(
Vector
)
elements
.
clone
(
)
;
return
p
;
}
catch
(
CloneNotSupportedException
e
)
{
throw
new
BuildException
(
e
)
;
}
}
protected
void
dieOnCircularReference
(
Stack
stk
,
Project
p
)
throws
BuildException
{
if
(
isChecked
(
)
)
{
return
;
}
Enumeration
e
=
elements
.
elements
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
Object
o
=
e
.
nextElement
(
)
;
if
(
o
instanceof
Reference
)
{
o
=
(
(
Reference
)
o
)
.
getReferencedObject
(
p
)
;
}
if
(
o
instanceof
DataType
)
{
if
(
stk
.
contains
(
o
)
)
{
throw
circularReference
(
)
;
}
else
{
stk
.
push
(
o
)
;
(
(
DataType
)
o
)
.
dieOnCircularReference
(
stk
,
p
)
;
stk
.
pop
(
)
;
}
}
}
setChecked
(
true
)
;
}
private
static
String
resolveFile
(
Project
project
,
String
relativeName
)
{
if
(
project
!=
null
)
{
File
f
=
project
.
resolveFile
(
relativeName
)
;
return
f
.
getAbsolutePath
(
)
;
}
return
relativeName
;
}
private
static
void
addUnlessPresent
(
Vector
v
,
String
s
)
{
if
(
v
.
indexOf
(
s
)
==
-
1
)
{
v
.
addElement
(
s
)
;
}
}
private
static
void
addUnlessPresent
(
Vector
v
,
File
dir
,
String
[
]
s
)
{
for
(
int
j
=
0
;
j
<
s
.
length
;
j
++
)
{
File
d
=
new
File
(
dir
,
s
[
j
]
)
;
String
absolutePath
=
d
.
getAbsolutePath
(
)
;
addUnlessPresent
(
v
,
translateFile
(
absolutePath
)
)
;
}
}
public
Path
concatSystemClasspath
(
)
{
return
concatSystemClasspath
(
"last"
)
;
}
public
Path
concatSystemClasspath
(
String
defValue
)
{
Path
result
=
new
Path
(
getProject
(
)
)
;
String
order
=
defValue
;
if
(
getProject
(
)
!=
null
)
{
String
o
=
getProject
(
)
.
getProperty
(
"build.sysclasspath"
)
;
if
(
o
!=
null
)
{
order
=
o
;
}
}
if
(
order
.
equals
(
"only"
)
)
{
result
.
addExisting
(
Path
.
systemClasspath
,
true
)
;
}
else
if
(
order
.
equals
(
"first"
)
)
{
result
.
addExisting
(
Path
.
systemClasspath
,
true
)
;
result
.
addExisting
(
this
)
;
}
else
if
(
order
.
equals
(
"ignore"
)
)
{
result
.
addExisting
(
this
)
;
}
else
{
if
(
!
order
.
equals
(
"last"
)
)
{
log
(
"invalid value for build.sysclasspath: "
+
order
,
Project
.
MSG_WARN
)
;
}
result
.
addExisting
(
this
)
;
result
.
addExisting
(
Path
.
systemClasspath
,
true
)
;
}
return
result
;
}
public
void
addJavaRuntime
(
)
{
if
(
"Kaffe"
.
equals
(
System
.
getProperty
(
"java.vm.name"
)
)
)
{
File
kaffeShare
=
new
File
(
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
"share"
+
File
.
separator
+
"kaffe"
)
;
if
(
kaffeShare
.
isDirectory
(
)
)
{
FileSet
kaffeJarFiles
=
new
FileSet
(
)
;
kaffeJarFiles
.
setDir
(
kaffeShare
)
;
kaffeJarFiles
.
setIncludes
(
"*.jar"
)
;
addFileset
(
kaffeJarFiles
)
;
}
}
if
(
System
.
getProperty
(
"java.vendor"
)
.
toLowerCase
(
Locale
.
US
)
.
indexOf
(
"microsoft"
)
>=
0
)
{
FileSet
msZipFiles
=
new
FileSet
(
)
;
msZipFiles
.
setDir
(
new
File
(
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
"Packages"
)
)
;
msZipFiles
.
setIncludes
(
"*.ZIP"
)
;
addFileset
(
msZipFiles
)
;
}
else
if
(
JavaEnvUtils
.
isJavaVersion
(
JavaEnvUtils
.
JAVA_1_1
)
)
{
addExisting
(
new
Path
(
null
,
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
"lib"
+
File
.
separator
+
"classes.zip"
)
)
;
}
else
{
addExisting
(
new
Path
(
null
,
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
"lib"
+
File
.
separator
+
"rt.jar"
)
)
;
addExisting
(
new
Path
(
null
,
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
"jre"
+
File
.
separator
+
"lib"
+
File
.
separator
+
"rt.jar"
)
)
;
String
[
]
secJars
=
{
"jce"
,
"jsse"
}
;
for
(
int
i
=
0
;
i
<
secJars
.
length
;
i
++
)
{
addExisting
(
new
Path
(
null
,
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
"lib"
+
File
.
separator
+
secJars
[
i
]
+
".jar"
)
)
;
addExisting
(
new
Path
(
null
,
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
".."
+
File
.
separator
+
"Classes"
+
File
.
separator
+
secJars
[
i
]
+
".jar"
)
)
;
}
String
[
]
ibmJars
=
{
"core"
,
"graphics"
,
"security"
,
"server"
,
"xml"
}
;
for
(
int
i
=
0
;
i
<
ibmJars
.
length
;
i
++
)
{
addExisting
(
new
Path
(
null
,
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
"lib"
+
File
.
separator
+
ibmJars
[
i
]
+
".jar"
)
)
;
}
addExisting
(
new
Path
(
null
,
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
".."
+
File
.
separator
+
"Classes"
+
File
.
separator
+
"classes.jar"
)
)
;
addExisting
(
new
Path
(
null
,
System
.
getProperty
(
"java.home"
)
+
File
.
separator
+
".."
+
File
.
separator
+
"Classes"
+
File
.
separator
+
"ui.jar"
)
)
;
}
}
public
void
addExtdirs
(
Path
extdirs
)
{
if
(
extdirs
==
null
)
{
String
extProp
=
System
.
getProperty
(
"java.ext.dirs"
)
;
if
(
extProp
!=
null
)
{
extdirs
=
new
Path
(
getProject
(
)
,
extProp
)
;
}
else
{
return
;
}
}
String
[
]
dirs
=
extdirs
.
list
(
)
;
for
(
int
i
=
0
;
i
<
dirs
.
length
;
i
++
)
{
File
dir
=
getProject
(
)
.
resolveFile
(
dirs
[
i
]
)
;
if
(
dir
.
exists
(
)
&&
dir
.
isDirectory
(
)
)
{
FileSet
fs
=
new
FileSet
(
)
;
fs
.
setDir
(
dir
)
;
fs
.
setIncludes
(
"*"
)
;
addFileset
(
fs
)
;
}
}
}
}
