package
org
.
apache
.
tools
.
ant
.
types
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
zip
.
ZipException
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
zip
.
ZipEntry
;
import
org
.
apache
.
tools
.
zip
.
ZipFile
;
public
class
ZipScanner
extends
DirectoryScanner
{
protected
File
srcFile
;
private
Resource
lastScannedResource
;
private
Hashtable
myentries
;
private
String
encoding
;
public
void
setSrc
(
File
srcFile
)
{
this
.
srcFile
=
srcFile
;
}
public
void
setEncoding
(
String
encoding
)
{
this
.
encoding
=
encoding
;
}
public
String
[
]
getIncludedFiles
(
)
{
if
(
srcFile
!=
null
)
{
Vector
myvector
=
new
Vector
(
)
;
scanme
(
)
;
for
(
Enumeration
e
=
myentries
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
Resource
myresource
=
(
Resource
)
e
.
nextElement
(
)
;
if
(
!
myresource
.
isDirectory
(
)
&&
match
(
myresource
.
getName
(
)
)
)
{
myvector
.
addElement
(
myresource
.
getName
(
)
)
;
}
}
String
[
]
files
=
new
String
[
myvector
.
size
(
)
]
;
myvector
.
copyInto
(
files
)
;
Arrays
.
sort
(
files
)
;
return
files
;
}
else
{
return
super
.
getIncludedFiles
(
)
;
}
}
public
String
[
]
getIncludedDirectories
(
)
{
if
(
srcFile
!=
null
)
{
Vector
myvector
=
new
Vector
(
)
;
scanme
(
)
;
for
(
Enumeration
e
=
myentries
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
Resource
myresource
=
(
Resource
)
e
.
nextElement
(
)
;
if
(
myresource
.
isDirectory
(
)
&&
match
(
myresource
.
getName
(
)
)
)
{
myvector
.
addElement
(
myresource
.
getName
(
)
)
;
}
}
String
[
]
files
=
new
String
[
myvector
.
size
(
)
]
;
myvector
.
copyInto
(
files
)
;
Arrays
.
sort
(
files
)
;
return
files
;
}
else
{
return
super
.
getIncludedDirectories
(
)
;
}
}
public
void
init
(
)
{
if
(
includes
==
null
)
{
includes
=
new
String
[
1
]
;
includes
[
0
]
=
"**"
;
}
if
(
excludes
==
null
)
{
excludes
=
new
String
[
0
]
;
}
}
public
boolean
match
(
String
path
)
{
String
vpath
=
path
.
replace
(
'/'
,
File
.
separatorChar
)
.
replace
(
'\\'
,
File
.
separatorChar
)
;
return
isIncluded
(
vpath
)
&&
!
isExcluded
(
vpath
)
;
}
public
Resource
getResource
(
String
name
)
{
if
(
srcFile
==
null
)
{
return
super
.
getResource
(
name
)
;
}
else
if
(
name
.
equals
(
""
)
)
{
return
new
Resource
(
""
,
true
,
Long
.
MAX_VALUE
,
true
)
;
}
scanme
(
)
;
if
(
myentries
.
containsKey
(
name
)
)
{
return
(
Resource
)
myentries
.
get
(
name
)
;
}
else
if
(
myentries
.
containsKey
(
name
+
"/"
)
)
{
return
(
Resource
)
myentries
.
get
(
name
+
"/"
)
;
}
else
{
return
new
Resource
(
name
)
;
}
}
private
void
scanme
(
)
{
Resource
thisresource
=
new
Resource
(
srcFile
.
getAbsolutePath
(
)
,
srcFile
.
exists
(
)
,
srcFile
.
lastModified
(
)
)
;
if
(
lastScannedResource
!=
null
&&
lastScannedResource
.
getName
(
)
.
equals
(
thisresource
.
getName
(
)
)
&&
lastScannedResource
.
getLastModified
(
)
==
thisresource
.
getLastModified
(
)
)
{
return
;
}
ZipEntry
entry
=
null
;
ZipFile
zf
=
null
;
myentries
=
new
Hashtable
(
)
;
try
{
try
{
zf
=
new
ZipFile
(
srcFile
,
encoding
)
;
}
catch
(
ZipException
ex
)
{
throw
new
BuildException
(
"problem reading "
+
srcFile
,
ex
)
;
}
catch
(
IOException
ex
)
{
throw
new
BuildException
(
"problem opening "
+
srcFile
,
ex
)
;
}
Enumeration
e
=
zf
.
getEntries
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
entry
=
(
ZipEntry
)
e
.
nextElement
(
)
;
myentries
.
put
(
new
String
(
entry
.
getName
(
)
)
,
new
Resource
(
entry
.
getName
(
)
,
true
,
entry
.
getTime
(
)
,
entry
.
isDirectory
(
)
)
)
;
}
}
finally
{
if
(
zf
!=
null
)
{
try
{
zf
.
close
(
)
;
}
catch
(
IOException
ex
)
{
}
}
}
lastScannedResource
=
thisresource
;
}
}
