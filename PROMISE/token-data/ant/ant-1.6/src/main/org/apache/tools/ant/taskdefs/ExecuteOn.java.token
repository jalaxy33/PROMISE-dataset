package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
types
.
Commandline
;
import
org
.
apache
.
tools
.
ant
.
types
.
AbstractFileSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
DirSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileList
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
Mapper
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileNameMapper
;
import
org
.
apache
.
tools
.
ant
.
util
.
SourceFileScanner
;
public
class
ExecuteOn
extends
ExecTask
{
protected
Vector
filesets
=
new
Vector
(
)
;
private
Vector
filelists
=
new
Vector
(
)
;
private
boolean
relative
=
false
;
private
boolean
parallel
=
false
;
private
boolean
forwardSlash
=
false
;
protected
String
type
=
"file"
;
protected
Commandline
.
Marker
srcFilePos
=
null
;
private
boolean
skipEmpty
=
false
;
protected
Commandline
.
Marker
targetFilePos
=
null
;
protected
Mapper
mapperElement
=
null
;
protected
FileNameMapper
mapper
=
null
;
protected
File
destDir
=
null
;
private
int
maxParallel
=
-
1
;
private
boolean
addSourceFile
=
true
;
private
boolean
verbose
=
false
;
protected
boolean
srcIsFirst
=
true
;
public
void
addFileset
(
FileSet
set
)
{
filesets
.
addElement
(
set
)
;
}
public
void
addDirset
(
DirSet
set
)
{
filesets
.
addElement
(
set
)
;
}
public
void
addFilelist
(
FileList
list
)
{
filelists
.
addElement
(
list
)
;
}
public
void
setRelative
(
boolean
relative
)
{
this
.
relative
=
relative
;
}
public
void
setParallel
(
boolean
parallel
)
{
this
.
parallel
=
parallel
;
}
public
void
setType
(
FileDirBoth
type
)
{
this
.
type
=
type
.
getValue
(
)
;
}
public
void
setSkipEmptyFilesets
(
boolean
skip
)
{
skipEmpty
=
skip
;
}
public
void
setDest
(
File
destDir
)
{
this
.
destDir
=
destDir
;
}
public
void
setForwardslash
(
boolean
forwardSlash
)
{
this
.
forwardSlash
=
forwardSlash
;
}
public
void
setMaxParallel
(
int
max
)
{
maxParallel
=
max
;
}
public
void
setAddsourcefile
(
boolean
b
)
{
addSourceFile
=
b
;
}
public
void
setVerbose
(
boolean
b
)
{
verbose
=
b
;
}
public
Commandline
.
Marker
createSrcfile
(
)
{
if
(
srcFilePos
!=
null
)
{
throw
new
BuildException
(
getTaskType
(
)
+
" doesn\'t support multiple "
+
"srcfile elements."
,
getLocation
(
)
)
;
}
srcFilePos
=
cmdl
.
createMarker
(
)
;
return
srcFilePos
;
}
public
Commandline
.
Marker
createTargetfile
(
)
{
if
(
targetFilePos
!=
null
)
{
throw
new
BuildException
(
getTaskType
(
)
+
" doesn\'t support multiple "
+
"targetfile elements."
,
getLocation
(
)
)
;
}
targetFilePos
=
cmdl
.
createMarker
(
)
;
srcIsFirst
=
(
srcFilePos
!=
null
)
;
return
targetFilePos
;
}
public
Mapper
createMapper
(
)
throws
BuildException
{
if
(
mapperElement
!=
null
)
{
throw
new
BuildException
(
"Cannot define more than one mapper"
,
getLocation
(
)
)
;
}
mapperElement
=
new
Mapper
(
getProject
(
)
)
;
return
mapperElement
;
}
protected
void
checkConfiguration
(
)
{
if
(
"execon"
.
equals
(
getTaskName
(
)
)
)
{
log
(
"!! execon is deprecated. Use apply instead. !!"
)
;
}
super
.
checkConfiguration
(
)
;
if
(
filesets
.
size
(
)
==
0
&&
filelists
.
size
(
)
==
0
)
{
throw
new
BuildException
(
"no filesets and no filelists specified"
,
getLocation
(
)
)
;
}
if
(
targetFilePos
!=
null
||
mapperElement
!=
null
||
destDir
!=
null
)
{
if
(
mapperElement
==
null
)
{
throw
new
BuildException
(
"no mapper specified"
,
getLocation
(
)
)
;
}
if
(
destDir
==
null
)
{
throw
new
BuildException
(
"no dest attribute specified"
,
getLocation
(
)
)
;
}
mapper
=
mapperElement
.
getImplementation
(
)
;
}
}
protected
void
runExec
(
Execute
exe
)
throws
BuildException
{
int
totalFiles
=
0
;
int
totalDirs
=
0
;
boolean
haveExecuted
=
false
;
try
{
Vector
fileNames
=
new
Vector
(
)
;
Vector
baseDirs
=
new
Vector
(
)
;
for
(
int
i
=
0
;
i
<
filesets
.
size
(
)
;
i
++
)
{
String
currentType
=
type
;
AbstractFileSet
fs
=
(
AbstractFileSet
)
filesets
.
elementAt
(
i
)
;
if
(
fs
instanceof
DirSet
)
{
if
(
!
"dir"
.
equals
(
type
)
)
{
log
(
"Found a nested dirset but type is "
+
type
+
". "
+
"Temporarily switching to type=\"dir\" on the"
+
" assumption that you really did mean"
+
" <dirset> not <fileset>."
,
Project
.
MSG_DEBUG
)
;
currentType
=
"dir"
;
}
}
File
base
=
fs
.
getDir
(
getProject
(
)
)
;
DirectoryScanner
ds
=
fs
.
getDirectoryScanner
(
getProject
(
)
)
;
if
(
!
"dir"
.
equals
(
currentType
)
)
{
String
[
]
s
=
getFiles
(
base
,
ds
)
;
for
(
int
j
=
0
;
j
<
s
.
length
;
j
++
)
{
totalFiles
++
;
fileNames
.
addElement
(
s
[
j
]
)
;
baseDirs
.
addElement
(
base
)
;
}
}
if
(
!
"file"
.
equals
(
currentType
)
)
{
String
[
]
s
=
getDirs
(
base
,
ds
)
;
for
(
int
j
=
0
;
j
<
s
.
length
;
j
++
)
{
totalDirs
++
;
fileNames
.
addElement
(
s
[
j
]
)
;
baseDirs
.
addElement
(
base
)
;
}
}
if
(
fileNames
.
size
(
)
==
0
&&
skipEmpty
)
{
log
(
"Skipping fileset for directory "
+
base
+
". It is empty."
,
Project
.
MSG_INFO
)
;
continue
;
}
if
(
!
parallel
)
{
String
[
]
s
=
new
String
[
fileNames
.
size
(
)
]
;
fileNames
.
copyInto
(
s
)
;
for
(
int
j
=
0
;
j
<
s
.
length
;
j
++
)
{
String
[
]
command
=
getCommandline
(
s
[
j
]
,
base
)
;
log
(
Commandline
.
describeCommand
(
command
)
,
Project
.
MSG_VERBOSE
)
;
exe
.
setCommandline
(
command
)
;
if
(
haveExecuted
)
{
exe
.
setStreamHandler
(
createHandler
(
)
)
;
}
runExecute
(
exe
)
;
haveExecuted
=
true
;
}
fileNames
.
removeAllElements
(
)
;
baseDirs
.
removeAllElements
(
)
;
}
}
for
(
int
i
=
0
;
i
<
filelists
.
size
(
)
;
i
++
)
{
FileList
list
=
(
FileList
)
filelists
.
elementAt
(
i
)
;
File
base
=
list
.
getDir
(
getProject
(
)
)
;
String
[
]
names
=
list
.
getFiles
(
getProject
(
)
)
;
for
(
int
j
=
0
;
j
<
names
.
length
;
j
++
)
{
File
f
=
new
File
(
base
,
names
[
j
]
)
;
if
(
(
f
.
isFile
(
)
&&
!
"dir"
.
equals
(
type
)
)
||
(
f
.
isDirectory
(
)
&&
!
"file"
.
equals
(
type
)
)
)
{
if
(
f
.
isFile
(
)
)
{
totalFiles
++
;
}
else
{
totalDirs
++
;
}
fileNames
.
addElement
(
names
[
j
]
)
;
baseDirs
.
addElement
(
base
)
;
}
}
if
(
fileNames
.
size
(
)
==
0
&&
skipEmpty
)
{
log
(
"Skipping filelist for directory "
+
base
+
". It is empty."
,
Project
.
MSG_INFO
)
;
continue
;
}
if
(
!
parallel
)
{
String
[
]
s
=
new
String
[
fileNames
.
size
(
)
]
;
fileNames
.
copyInto
(
s
)
;
for
(
int
j
=
0
;
j
<
s
.
length
;
j
++
)
{
String
[
]
command
=
getCommandline
(
s
[
j
]
,
base
)
;
log
(
Commandline
.
describeCommand
(
command
)
,
Project
.
MSG_VERBOSE
)
;
exe
.
setCommandline
(
command
)
;
if
(
haveExecuted
)
{
exe
.
setStreamHandler
(
createHandler
(
)
)
;
}
runExecute
(
exe
)
;
haveExecuted
=
true
;
}
fileNames
.
removeAllElements
(
)
;
baseDirs
.
removeAllElements
(
)
;
}
}
if
(
parallel
&&
(
fileNames
.
size
(
)
>
0
||
!
skipEmpty
)
)
{
runParallel
(
exe
,
fileNames
,
baseDirs
)
;
haveExecuted
=
true
;
}
if
(
haveExecuted
)
{
log
(
"Applied "
+
cmdl
.
getExecutable
(
)
+
" to "
+
totalFiles
+
" file"
+
(
totalFiles
!=
1
?
"s"
:
""
)
+
" and "
+
totalDirs
+
" director"
+
(
totalDirs
!=
1
?
"ies"
:
"y"
)
+
"."
,
verbose
?
Project
.
MSG_INFO
:
Project
.
MSG_VERBOSE
)
;
}
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
"Execute failed: "
+
e
,
e
,
getLocation
(
)
)
;
}
finally
{
logFlush
(
)
;
}
}
protected
String
[
]
getCommandline
(
String
[
]
srcFiles
,
File
[
]
baseDirs
)
{
final
char
fileSeparator
=
File
.
separatorChar
;
Vector
targets
=
new
Vector
(
)
;
if
(
targetFilePos
!=
null
)
{
Hashtable
addedFiles
=
new
Hashtable
(
)
;
for
(
int
i
=
0
;
i
<
srcFiles
.
length
;
i
++
)
{
String
[
]
subTargets
=
mapper
.
mapFileName
(
srcFiles
[
i
]
)
;
if
(
subTargets
!=
null
)
{
for
(
int
j
=
0
;
j
<
subTargets
.
length
;
j
++
)
{
String
name
=
null
;
if
(
!
relative
)
{
name
=
(
new
File
(
destDir
,
subTargets
[
j
]
)
)
.
getAbsolutePath
(
)
;
}
else
{
name
=
subTargets
[
j
]
;
}
if
(
forwardSlash
&&
fileSeparator
!=
'/'
)
{
name
=
name
.
replace
(
fileSeparator
,
'/'
)
;
}
if
(
!
addedFiles
.
contains
(
name
)
)
{
targets
.
addElement
(
name
)
;
addedFiles
.
put
(
name
,
name
)
;
}
}
}
}
}
String
[
]
targetFiles
=
new
String
[
targets
.
size
(
)
]
;
targets
.
copyInto
(
targetFiles
)
;
if
(
!
addSourceFile
)
{
srcFiles
=
new
String
[
0
]
;
}
String
[
]
orig
=
cmdl
.
getCommandline
(
)
;
String
[
]
result
=
new
String
[
orig
.
length
+
srcFiles
.
length
+
targetFiles
.
length
]
;
int
srcIndex
=
orig
.
length
;
if
(
srcFilePos
!=
null
)
{
srcIndex
=
srcFilePos
.
getPosition
(
)
;
}
if
(
targetFilePos
!=
null
)
{
int
targetIndex
=
targetFilePos
.
getPosition
(
)
;
if
(
srcIndex
<
targetIndex
||
(
srcIndex
==
targetIndex
&&
srcIsFirst
)
)
{
System
.
arraycopy
(
orig
,
0
,
result
,
0
,
srcIndex
)
;
System
.
arraycopy
(
orig
,
srcIndex
,
result
,
srcIndex
+
srcFiles
.
length
,
targetIndex
-
srcIndex
)
;
System
.
arraycopy
(
targetFiles
,
0
,
result
,
targetIndex
+
srcFiles
.
length
,
targetFiles
.
length
)
;
System
.
arraycopy
(
orig
,
targetIndex
,
result
,
targetIndex
+
srcFiles
.
length
+
targetFiles
.
length
,
orig
.
length
-
targetIndex
)
;
}
else
{
System
.
arraycopy
(
orig
,
0
,
result
,
0
,
targetIndex
)
;
System
.
arraycopy
(
targetFiles
,
0
,
result
,
targetIndex
,
targetFiles
.
length
)
;
System
.
arraycopy
(
orig
,
targetIndex
,
result
,
targetIndex
+
targetFiles
.
length
,
srcIndex
-
targetIndex
)
;
System
.
arraycopy
(
orig
,
srcIndex
,
result
,
srcIndex
+
srcFiles
.
length
+
targetFiles
.
length
,
orig
.
length
-
srcIndex
)
;
srcIndex
+=
targetFiles
.
length
;
}
}
else
{
System
.
arraycopy
(
orig
,
0
,
result
,
0
,
srcIndex
)
;
System
.
arraycopy
(
orig
,
srcIndex
,
result
,
srcIndex
+
srcFiles
.
length
,
orig
.
length
-
srcIndex
)
;
}
for
(
int
i
=
0
;
i
<
srcFiles
.
length
;
i
++
)
{
if
(
!
relative
)
{
result
[
srcIndex
+
i
]
=
(
new
File
(
baseDirs
[
i
]
,
srcFiles
[
i
]
)
)
.
getAbsolutePath
(
)
;
}
else
{
result
[
srcIndex
+
i
]
=
srcFiles
[
i
]
;
}
if
(
forwardSlash
&&
fileSeparator
!=
'/'
)
{
result
[
srcIndex
+
i
]
=
result
[
srcIndex
+
i
]
.
replace
(
fileSeparator
,
'/'
)
;
}
}
return
result
;
}
protected
String
[
]
getCommandline
(
String
srcFile
,
File
baseDir
)
{
return
getCommandline
(
new
String
[
]
{
srcFile
}
,
new
File
[
]
{
baseDir
}
)
;
}
protected
String
[
]
getFiles
(
File
baseDir
,
DirectoryScanner
ds
)
{
if
(
mapper
!=
null
)
{
SourceFileScanner
sfs
=
new
SourceFileScanner
(
this
)
;
return
sfs
.
restrict
(
ds
.
getIncludedFiles
(
)
,
baseDir
,
destDir
,
mapper
)
;
}
else
{
return
ds
.
getIncludedFiles
(
)
;
}
}
protected
String
[
]
getDirs
(
File
baseDir
,
DirectoryScanner
ds
)
{
if
(
mapper
!=
null
)
{
SourceFileScanner
sfs
=
new
SourceFileScanner
(
this
)
;
return
sfs
.
restrict
(
ds
.
getIncludedDirectories
(
)
,
baseDir
,
destDir
,
mapper
)
;
}
else
{
return
ds
.
getIncludedDirectories
(
)
;
}
}
protected
void
runParallel
(
Execute
exe
,
Vector
fileNames
,
Vector
baseDirs
)
throws
IOException
,
BuildException
{
String
[
]
s
=
new
String
[
fileNames
.
size
(
)
]
;
fileNames
.
copyInto
(
s
)
;
File
[
]
b
=
new
File
[
baseDirs
.
size
(
)
]
;
baseDirs
.
copyInto
(
b
)
;
if
(
maxParallel
<=
0
||
s
.
length
==
0
)
{
String
[
]
command
=
getCommandline
(
s
,
b
)
;
log
(
Commandline
.
describeCommand
(
command
)
,
Project
.
MSG_VERBOSE
)
;
exe
.
setCommandline
(
command
)
;
runExecute
(
exe
)
;
}
else
{
int
stillToDo
=
fileNames
.
size
(
)
;
int
currentOffset
=
0
;
while
(
stillToDo
>
0
)
{
int
currentAmount
=
Math
.
min
(
stillToDo
,
maxParallel
)
;
String
[
]
cs
=
new
String
[
currentAmount
]
;
System
.
arraycopy
(
s
,
currentOffset
,
cs
,
0
,
currentAmount
)
;
File
[
]
cb
=
new
File
[
currentAmount
]
;
System
.
arraycopy
(
b
,
currentOffset
,
cb
,
0
,
currentAmount
)
;
String
[
]
command
=
getCommandline
(
cs
,
cb
)
;
log
(
Commandline
.
describeCommand
(
command
)
,
Project
.
MSG_VERBOSE
)
;
exe
.
setCommandline
(
command
)
;
if
(
currentOffset
>
0
)
{
exe
.
setStreamHandler
(
createHandler
(
)
)
;
}
runExecute
(
exe
)
;
stillToDo
-=
currentAmount
;
currentOffset
+=
currentAmount
;
}
}
}
public
static
class
FileDirBoth
extends
EnumeratedAttribute
{
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
"file"
,
"dir"
,
"both"
}
;
}
}
}
