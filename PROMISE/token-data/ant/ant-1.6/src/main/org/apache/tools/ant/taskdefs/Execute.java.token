package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
File
;
import
java
.
io
.
FileWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
PrintWriter
;
import
java
.
io
.
StringReader
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
condition
.
Os
;
import
org
.
apache
.
tools
.
ant
.
types
.
Commandline
;
public
class
Execute
{
public
static
final
int
INVALID
=
Integer
.
MAX_VALUE
;
private
String
[
]
cmdl
=
null
;
private
String
[
]
env
=
null
;
private
int
exitValue
=
INVALID
;
private
ExecuteStreamHandler
streamHandler
;
private
ExecuteWatchdog
watchdog
;
private
File
workingDirectory
=
null
;
private
Project
project
=
null
;
private
boolean
newEnvironment
=
false
;
private
boolean
useVMLauncher
=
true
;
private
static
String
antWorkingDirectory
=
System
.
getProperty
(
"user.dir"
)
;
private
static
CommandLauncher
vmLauncher
=
null
;
private
static
CommandLauncher
shellLauncher
=
null
;
private
static
Vector
procEnvironment
=
null
;
private
boolean
spawn
=
false
;
private
static
ProcessDestroyer
processDestroyer
=
new
ProcessDestroyer
(
)
;
static
{
try
{
if
(
Os
.
isFamily
(
"openvms"
)
)
{
vmLauncher
=
new
VmsCommandLauncher
(
)
;
}
else
if
(
!
Os
.
isFamily
(
"os/2"
)
)
{
vmLauncher
=
new
Java13CommandLauncher
(
)
;
}
}
catch
(
NoSuchMethodException
exc
)
{
}
if
(
Os
.
isFamily
(
"mac"
)
&&
!
Os
.
isFamily
(
"unix"
)
)
{
shellLauncher
=
new
MacCommandLauncher
(
new
CommandLauncher
(
)
)
;
}
else
if
(
Os
.
isFamily
(
"os/2"
)
)
{
shellLauncher
=
new
OS2CommandLauncher
(
new
CommandLauncher
(
)
)
;
}
else
if
(
Os
.
isFamily
(
"windows"
)
)
{
CommandLauncher
baseLauncher
;
if
(
System
.
getProperty
(
"java.version"
)
.
startsWith
(
"1.1"
)
)
{
baseLauncher
=
new
Java11CommandLauncher
(
)
;
}
else
{
baseLauncher
=
new
CommandLauncher
(
)
;
}
if
(
!
Os
.
isFamily
(
"win9x"
)
)
{
shellLauncher
=
new
WinNTCommandLauncher
(
baseLauncher
)
;
}
else
{
shellLauncher
=
new
ScriptCommandLauncher
(
"bin/antRun.bat"
,
baseLauncher
)
;
}
}
else
if
(
Os
.
isFamily
(
"netware"
)
)
{
CommandLauncher
baseLauncher
;
if
(
System
.
getProperty
(
"java.version"
)
.
startsWith
(
"1.1"
)
)
{
baseLauncher
=
new
Java11CommandLauncher
(
)
;
}
else
{
baseLauncher
=
new
CommandLauncher
(
)
;
}
shellLauncher
=
new
PerlScriptCommandLauncher
(
"bin/antRun.pl"
,
baseLauncher
)
;
}
else
if
(
Os
.
isFamily
(
"openvms"
)
)
{
shellLauncher
=
vmLauncher
;
}
else
{
shellLauncher
=
new
ScriptCommandLauncher
(
"bin/antRun"
,
new
CommandLauncher
(
)
)
;
}
}
public
void
setSpawn
(
boolean
spawn
)
{
this
.
spawn
=
spawn
;
}
public
static
synchronized
Vector
getProcEnvironment
(
)
{
if
(
procEnvironment
!=
null
)
{
return
procEnvironment
;
}
procEnvironment
=
new
Vector
(
)
;
try
{
ByteArrayOutputStream
out
=
new
ByteArrayOutputStream
(
)
;
Execute
exe
=
new
Execute
(
new
PumpStreamHandler
(
out
)
)
;
exe
.
setCommandline
(
getProcEnvCommand
(
)
)
;
exe
.
setNewenvironment
(
true
)
;
int
retval
=
exe
.
execute
(
)
;
if
(
retval
!=
0
)
{
}
BufferedReader
in
=
new
BufferedReader
(
new
StringReader
(
toString
(
out
)
)
)
;
if
(
Os
.
isFamily
(
"openvms"
)
)
{
procEnvironment
=
addVMSLogicals
(
procEnvironment
,
in
)
;
return
procEnvironment
;
}
String
var
=
null
;
String
line
,
lineSep
=
System
.
getProperty
(
"line.separator"
)
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
if
(
line
.
indexOf
(
'='
)
==
-
1
)
{
if
(
var
==
null
)
{
var
=
lineSep
+
line
;
}
else
{
var
+=
lineSep
+
line
;
}
}
else
{
if
(
var
!=
null
)
{
procEnvironment
.
addElement
(
var
)
;
}
var
=
line
;
}
}
if
(
var
!=
null
)
{
procEnvironment
.
addElement
(
var
)
;
}
}
catch
(
java
.
io
.
IOException
exc
)
{
exc
.
printStackTrace
(
)
;
}
return
procEnvironment
;
}
private
static
String
[
]
getProcEnvCommand
(
)
{
if
(
Os
.
isFamily
(
"os/2"
)
)
{
String
[
]
cmd
=
{
"cmd"
,
"/c"
,
"set"
}
;
return
cmd
;
}
else
if
(
Os
.
isFamily
(
"windows"
)
)
{
if
(
!
Os
.
isFamily
(
"win9x"
)
)
{
String
[
]
cmd
=
{
"cmd"
,
"/c"
,
"set"
}
;
return
cmd
;
}
else
{
String
[
]
cmd
=
{
"command.com"
,
"/c"
,
"set"
}
;
return
cmd
;
}
}
else
if
(
Os
.
isFamily
(
"z/os"
)
||
Os
.
isFamily
(
"unix"
)
)
{
String
[
]
cmd
=
new
String
[
1
]
;
if
(
new
File
(
"/bin/env"
)
.
canRead
(
)
)
{
cmd
[
0
]
=
"/bin/env"
;
}
else
if
(
new
File
(
"/usr/bin/env"
)
.
canRead
(
)
)
{
cmd
[
0
]
=
"/usr/bin/env"
;
}
else
{
cmd
[
0
]
=
"env"
;
}
return
cmd
;
}
else
if
(
Os
.
isFamily
(
"netware"
)
||
Os
.
isFamily
(
"os/400"
)
)
{
String
[
]
cmd
=
{
"env"
}
;
return
cmd
;
}
else
if
(
Os
.
isFamily
(
"openvms"
)
)
{
String
[
]
cmd
=
{
"show"
,
"logical"
}
;
return
cmd
;
}
else
{
String
[
]
cmd
=
null
;
return
cmd
;
}
}
public
static
String
toString
(
ByteArrayOutputStream
bos
)
{
if
(
Os
.
isFamily
(
"z/os"
)
)
{
try
{
return
bos
.
toString
(
"Cp1047"
)
;
}
catch
(
java
.
io
.
UnsupportedEncodingException
e
)
{
}
}
else
if
(
Os
.
isFamily
(
"os/400"
)
)
{
try
{
return
bos
.
toString
(
"Cp500"
)
;
}
catch
(
java
.
io
.
UnsupportedEncodingException
e
)
{
}
}
return
bos
.
toString
(
)
;
}
public
Execute
(
)
{
this
(
new
PumpStreamHandler
(
)
,
null
)
;
}
public
Execute
(
ExecuteStreamHandler
streamHandler
)
{
this
(
streamHandler
,
null
)
;
}
public
Execute
(
ExecuteStreamHandler
streamHandler
,
ExecuteWatchdog
watchdog
)
{
setStreamHandler
(
streamHandler
)
;
this
.
watchdog
=
watchdog
;
}
public
void
setStreamHandler
(
ExecuteStreamHandler
streamHandler
)
{
this
.
streamHandler
=
streamHandler
;
}
public
String
[
]
getCommandline
(
)
{
return
cmdl
;
}
public
void
setCommandline
(
String
[
]
commandline
)
{
cmdl
=
commandline
;
}
public
void
setNewenvironment
(
boolean
newenv
)
{
newEnvironment
=
newenv
;
}
public
String
[
]
getEnvironment
(
)
{
if
(
env
==
null
||
newEnvironment
)
{
return
env
;
}
return
patchEnvironment
(
)
;
}
public
void
setEnvironment
(
String
[
]
env
)
{
this
.
env
=
env
;
}
public
void
setWorkingDirectory
(
File
wd
)
{
if
(
wd
==
null
||
wd
.
getAbsolutePath
(
)
.
equals
(
antWorkingDirectory
)
)
{
workingDirectory
=
null
;
}
else
{
workingDirectory
=
wd
;
}
}
public
void
setAntRun
(
Project
project
)
throws
BuildException
{
this
.
project
=
project
;
}
public
void
setVMLauncher
(
boolean
useVMLauncher
)
{
this
.
useVMLauncher
=
useVMLauncher
;
}
public
static
Process
launch
(
Project
project
,
String
[
]
command
,
String
[
]
env
,
File
dir
,
boolean
useVM
)
throws
IOException
{
CommandLauncher
launcher
=
vmLauncher
!=
null
?
vmLauncher
:
shellLauncher
;
if
(
!
useVM
)
{
launcher
=
shellLauncher
;
}
return
launcher
.
exec
(
project
,
command
,
env
,
dir
)
;
}
public
int
execute
(
)
throws
IOException
{
final
Process
process
=
launch
(
project
,
getCommandline
(
)
,
getEnvironment
(
)
,
workingDirectory
,
useVMLauncher
)
;
try
{
streamHandler
.
setProcessInputStream
(
process
.
getOutputStream
(
)
)
;
streamHandler
.
setProcessOutputStream
(
process
.
getInputStream
(
)
)
;
streamHandler
.
setProcessErrorStream
(
process
.
getErrorStream
(
)
)
;
}
catch
(
IOException
e
)
{
process
.
destroy
(
)
;
throw
e
;
}
streamHandler
.
start
(
)
;
try
{
processDestroyer
.
add
(
process
)
;
if
(
watchdog
!=
null
)
{
watchdog
.
start
(
process
)
;
}
waitFor
(
process
)
;
if
(
watchdog
!=
null
)
{
watchdog
.
stop
(
)
;
}
streamHandler
.
stop
(
)
;
if
(
watchdog
!=
null
)
{
watchdog
.
checkException
(
)
;
}
return
getExitValue
(
)
;
}
finally
{
processDestroyer
.
remove
(
process
)
;
}
}
public
void
spawn
(
)
throws
IOException
{
final
Process
process
=
launch
(
project
,
getCommandline
(
)
,
getEnvironment
(
)
,
workingDirectory
,
useVMLauncher
)
;
if
(
Os
.
isFamily
(
"windows"
)
)
{
try
{
Thread
.
sleep
(
1000
)
;
}
catch
(
InterruptedException
e
)
{
project
.
log
(
"interruption in the sleep after having spawned a process"
,
Project
.
MSG_VERBOSE
)
;
}
}
project
.
log
(
"spawned process "
+
process
.
toString
(
)
,
Project
.
MSG_VERBOSE
)
;
}
protected
void
waitFor
(
Process
process
)
{
try
{
process
.
waitFor
(
)
;
setExitValue
(
process
.
exitValue
(
)
)
;
}
catch
(
InterruptedException
e
)
{
process
.
destroy
(
)
;
}
}
protected
void
setExitValue
(
int
value
)
{
exitValue
=
value
;
}
public
int
getExitValue
(
)
{
return
exitValue
;
}
public
static
boolean
isFailure
(
int
exitValue
)
{
if
(
Os
.
isFamily
(
"openvms"
)
)
{
return
(
exitValue
%
2
)
==
0
;
}
else
{
return
exitValue
!=
0
;
}
}
public
boolean
killedProcess
(
)
{
return
watchdog
!=
null
&&
watchdog
.
killedProcess
(
)
;
}
private
String
[
]
patchEnvironment
(
)
{
if
(
Os
.
isFamily
(
"openvms"
)
)
{
return
env
;
}
Vector
osEnv
=
(
Vector
)
getProcEnvironment
(
)
.
clone
(
)
;
for
(
int
i
=
0
;
i
<
env
.
length
;
i
++
)
{
int
pos
=
env
[
i
]
.
indexOf
(
'='
)
;
String
key
=
env
[
i
]
.
substring
(
0
,
pos
+
1
)
;
int
size
=
osEnv
.
size
(
)
;
for
(
int
j
=
0
;
j
<
size
;
j
++
)
{
if
(
(
(
String
)
osEnv
.
elementAt
(
j
)
)
.
startsWith
(
key
)
)
{
osEnv
.
removeElementAt
(
j
)
;
break
;
}
}
osEnv
.
addElement
(
env
[
i
]
)
;
}
String
[
]
result
=
new
String
[
osEnv
.
size
(
)
]
;
osEnv
.
copyInto
(
result
)
;
return
result
;
}
public
static
void
runCommand
(
Task
task
,
String
[
]
cmdline
)
throws
BuildException
{
try
{
task
.
log
(
Commandline
.
describeCommand
(
cmdline
)
,
Project
.
MSG_VERBOSE
)
;
Execute
exe
=
new
Execute
(
new
LogStreamHandler
(
task
,
Project
.
MSG_INFO
,
Project
.
MSG_ERR
)
)
;
exe
.
setAntRun
(
task
.
getProject
(
)
)
;
exe
.
setCommandline
(
cmdline
)
;
int
retval
=
exe
.
execute
(
)
;
if
(
isFailure
(
retval
)
)
{
throw
new
BuildException
(
cmdline
[
0
]
+
" failed with return code "
+
retval
,
task
.
getLocation
(
)
)
;
}
}
catch
(
java
.
io
.
IOException
exc
)
{
throw
new
BuildException
(
"Could not launch "
+
cmdline
[
0
]
+
": "
+
exc
,
task
.
getLocation
(
)
)
;
}
}
private
static
Vector
addVMSLogicals
(
Vector
environment
,
BufferedReader
in
)
throws
IOException
{
HashMap
logicals
=
new
HashMap
(
)
;
String
logName
=
null
,
logValue
=
null
,
newLogName
;
String
line
=
null
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
if
(
line
.
startsWith
(
"\t="
)
)
{
if
(
logName
!=
null
)
{
logValue
+=
","
+
line
.
substring
(
4
,
line
.
length
(
)
-
1
)
;
}
}
else
if
(
line
.
startsWith
(
"  \""
)
)
{
if
(
logName
!=
null
)
{
logicals
.
put
(
logName
,
logValue
)
;
}
int
eqIndex
=
line
.
indexOf
(
'='
)
;
newLogName
=
line
.
substring
(
3
,
eqIndex
-
2
)
;
if
(
logicals
.
containsKey
(
newLogName
)
)
{
logName
=
null
;
}
else
{
logName
=
newLogName
;
logValue
=
line
.
substring
(
eqIndex
+
3
,
line
.
length
(
)
-
1
)
;
}
}
}
if
(
logName
!=
null
)
{
logicals
.
put
(
logName
,
logValue
)
;
}
for
(
Iterator
i
=
logicals
.
keySet
(
)
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
String
logical
=
(
String
)
i
.
next
(
)
;
environment
.
add
(
logical
+
"="
+
logicals
.
get
(
logical
)
)
;
}
return
environment
;
}
private
static
class
CommandLauncher
{
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
)
throws
IOException
{
if
(
project
!=
null
)
{
project
.
log
(
"Execute:CommandLauncher: "
+
Commandline
.
describeCommand
(
cmd
)
,
Project
.
MSG_DEBUG
)
;
}
return
Runtime
.
getRuntime
(
)
.
exec
(
cmd
,
env
)
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
,
File
workingDir
)
throws
IOException
{
if
(
workingDir
==
null
)
{
return
exec
(
project
,
cmd
,
env
)
;
}
throw
new
IOException
(
"Cannot execute a process in different "
+
"directory under this JVM"
)
;
}
}
private
static
class
Java11CommandLauncher
extends
CommandLauncher
{
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
)
throws
IOException
{
String
[
]
newcmd
=
new
String
[
cmd
.
length
]
;
for
(
int
i
=
0
;
i
<
cmd
.
length
;
i
++
)
{
newcmd
[
i
]
=
Commandline
.
quoteArgument
(
cmd
[
i
]
)
;
}
if
(
project
!=
null
)
{
project
.
log
(
"Execute:Java11CommandLauncher: "
+
Commandline
.
describeCommand
(
newcmd
)
,
Project
.
MSG_DEBUG
)
;
}
return
Runtime
.
getRuntime
(
)
.
exec
(
newcmd
,
env
)
;
}
}
private
static
class
Java13CommandLauncher
extends
CommandLauncher
{
public
Java13CommandLauncher
(
)
throws
NoSuchMethodException
{
myExecWithCWD
=
Runtime
.
class
.
getMethod
(
"exec"
,
new
Class
[
]
{
String
[
]
.
class
,
String
[
]
.
class
,
File
.
class
}
)
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
,
File
workingDir
)
throws
IOException
{
try
{
if
(
project
!=
null
)
{
project
.
log
(
"Execute:Java13CommandLauncher: "
+
Commandline
.
describeCommand
(
cmd
)
,
Project
.
MSG_DEBUG
)
;
}
Object
[
]
arguments
=
{
cmd
,
env
,
workingDir
}
;
return
(
Process
)
myExecWithCWD
.
invoke
(
Runtime
.
getRuntime
(
)
,
arguments
)
;
}
catch
(
InvocationTargetException
exc
)
{
Throwable
realexc
=
exc
.
getTargetException
(
)
;
if
(
realexc
instanceof
ThreadDeath
)
{
throw
(
ThreadDeath
)
realexc
;
}
else
if
(
realexc
instanceof
IOException
)
{
throw
(
IOException
)
realexc
;
}
else
{
throw
new
BuildException
(
"Unable to execute command"
,
realexc
)
;
}
}
catch
(
Exception
exc
)
{
throw
new
BuildException
(
"Unable to execute command"
,
exc
)
;
}
}
private
Method
myExecWithCWD
;
}
private
static
class
CommandLauncherProxy
extends
CommandLauncher
{
CommandLauncherProxy
(
CommandLauncher
launcher
)
{
myLauncher
=
launcher
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
)
throws
IOException
{
return
myLauncher
.
exec
(
project
,
cmd
,
env
)
;
}
private
CommandLauncher
myLauncher
;
}
private
static
class
OS2CommandLauncher
extends
CommandLauncherProxy
{
OS2CommandLauncher
(
CommandLauncher
launcher
)
{
super
(
launcher
)
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
,
File
workingDir
)
throws
IOException
{
File
commandDir
=
workingDir
;
if
(
workingDir
==
null
)
{
if
(
project
!=
null
)
{
commandDir
=
project
.
getBaseDir
(
)
;
}
else
{
return
exec
(
project
,
cmd
,
env
)
;
}
}
final
int
preCmdLength
=
7
;
final
String
cmdDir
=
commandDir
.
getAbsolutePath
(
)
;
String
[
]
newcmd
=
new
String
[
cmd
.
length
+
preCmdLength
]
;
newcmd
[
0
]
=
"cmd"
;
newcmd
[
1
]
=
"/c"
;
newcmd
[
2
]
=
cmdDir
.
substring
(
0
,
2
)
;
newcmd
[
3
]
=
"&&"
;
newcmd
[
4
]
=
"cd"
;
newcmd
[
5
]
=
cmdDir
.
substring
(
2
)
;
newcmd
[
6
]
=
"&&"
;
System
.
arraycopy
(
cmd
,
0
,
newcmd
,
preCmdLength
,
cmd
.
length
)
;
return
exec
(
project
,
newcmd
,
env
)
;
}
}
private
static
class
WinNTCommandLauncher
extends
CommandLauncherProxy
{
WinNTCommandLauncher
(
CommandLauncher
launcher
)
{
super
(
launcher
)
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
,
File
workingDir
)
throws
IOException
{
File
commandDir
=
workingDir
;
if
(
workingDir
==
null
)
{
if
(
project
!=
null
)
{
commandDir
=
project
.
getBaseDir
(
)
;
}
else
{
return
exec
(
project
,
cmd
,
env
)
;
}
}
final
int
preCmdLength
=
6
;
String
[
]
newcmd
=
new
String
[
cmd
.
length
+
preCmdLength
]
;
newcmd
[
0
]
=
"cmd"
;
newcmd
[
1
]
=
"/c"
;
newcmd
[
2
]
=
"cd"
;
newcmd
[
3
]
=
"/d"
;
newcmd
[
4
]
=
commandDir
.
getAbsolutePath
(
)
;
newcmd
[
5
]
=
"&&"
;
System
.
arraycopy
(
cmd
,
0
,
newcmd
,
preCmdLength
,
cmd
.
length
)
;
return
exec
(
project
,
newcmd
,
env
)
;
}
}
private
static
class
MacCommandLauncher
extends
CommandLauncherProxy
{
MacCommandLauncher
(
CommandLauncher
launcher
)
{
super
(
launcher
)
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
,
File
workingDir
)
throws
IOException
{
if
(
workingDir
==
null
)
{
return
exec
(
project
,
cmd
,
env
)
;
}
System
.
getProperties
(
)
.
put
(
"user.dir"
,
workingDir
.
getAbsolutePath
(
)
)
;
try
{
return
exec
(
project
,
cmd
,
env
)
;
}
finally
{
System
.
getProperties
(
)
.
put
(
"user.dir"
,
antWorkingDirectory
)
;
}
}
}
private
static
class
ScriptCommandLauncher
extends
CommandLauncherProxy
{
ScriptCommandLauncher
(
String
script
,
CommandLauncher
launcher
)
{
super
(
launcher
)
;
myScript
=
script
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
,
File
workingDir
)
throws
IOException
{
if
(
project
==
null
)
{
if
(
workingDir
==
null
)
{
return
exec
(
project
,
cmd
,
env
)
;
}
throw
new
IOException
(
"Cannot locate antRun script: "
+
"No project provided"
)
;
}
String
antHome
=
project
.
getProperty
(
"ant.home"
)
;
if
(
antHome
==
null
)
{
throw
new
IOException
(
"Cannot locate antRun script: "
+
"Property 'ant.home' not found"
)
;
}
String
antRun
=
project
.
resolveFile
(
antHome
+
File
.
separator
+
myScript
)
.
toString
(
)
;
File
commandDir
=
workingDir
;
if
(
workingDir
==
null
&&
project
!=
null
)
{
commandDir
=
project
.
getBaseDir
(
)
;
}
String
[
]
newcmd
=
new
String
[
cmd
.
length
+
2
]
;
newcmd
[
0
]
=
antRun
;
newcmd
[
1
]
=
commandDir
.
getAbsolutePath
(
)
;
System
.
arraycopy
(
cmd
,
0
,
newcmd
,
2
,
cmd
.
length
)
;
return
exec
(
project
,
newcmd
,
env
)
;
}
private
String
myScript
;
}
private
static
class
PerlScriptCommandLauncher
extends
CommandLauncherProxy
{
PerlScriptCommandLauncher
(
String
script
,
CommandLauncher
launcher
)
{
super
(
launcher
)
;
myScript
=
script
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
,
File
workingDir
)
throws
IOException
{
if
(
project
==
null
)
{
if
(
workingDir
==
null
)
{
return
exec
(
project
,
cmd
,
env
)
;
}
throw
new
IOException
(
"Cannot locate antRun script: "
+
"No project provided"
)
;
}
String
antHome
=
project
.
getProperty
(
"ant.home"
)
;
if
(
antHome
==
null
)
{
throw
new
IOException
(
"Cannot locate antRun script: "
+
"Property 'ant.home' not found"
)
;
}
String
antRun
=
project
.
resolveFile
(
antHome
+
File
.
separator
+
myScript
)
.
toString
(
)
;
File
commandDir
=
workingDir
;
if
(
workingDir
==
null
&&
project
!=
null
)
{
commandDir
=
project
.
getBaseDir
(
)
;
}
String
[
]
newcmd
=
new
String
[
cmd
.
length
+
3
]
;
newcmd
[
0
]
=
"perl"
;
newcmd
[
1
]
=
antRun
;
newcmd
[
2
]
=
commandDir
.
getAbsolutePath
(
)
;
System
.
arraycopy
(
cmd
,
0
,
newcmd
,
3
,
cmd
.
length
)
;
return
exec
(
project
,
newcmd
,
env
)
;
}
private
String
myScript
;
}
private
static
class
VmsCommandLauncher
extends
Java13CommandLauncher
{
public
VmsCommandLauncher
(
)
throws
NoSuchMethodException
{
super
(
)
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
)
throws
IOException
{
String
[
]
vmsCmd
=
{
createCommandFile
(
cmd
,
env
)
.
getPath
(
)
}
;
return
super
.
exec
(
project
,
vmsCmd
,
env
)
;
}
public
Process
exec
(
Project
project
,
String
[
]
cmd
,
String
[
]
env
,
File
workingDir
)
throws
IOException
{
String
[
]
vmsCmd
=
{
createCommandFile
(
cmd
,
env
)
.
getPath
(
)
}
;
return
super
.
exec
(
project
,
vmsCmd
,
env
,
workingDir
)
;
}
private
File
createCommandFile
(
String
[
]
cmd
,
String
[
]
env
)
throws
IOException
{
File
script
=
File
.
createTempFile
(
"ANT"
,
".COM"
)
;
script
.
deleteOnExit
(
)
;
PrintWriter
out
=
null
;
try
{
out
=
new
PrintWriter
(
new
FileWriter
(
script
)
)
;
if
(
env
!=
null
)
{
int
eqIndex
;
for
(
int
i
=
1
;
i
<
env
.
length
;
i
++
)
{
eqIndex
=
env
[
i
]
.
indexOf
(
'='
)
;
if
(
eqIndex
!=
-
1
)
{
out
.
print
(
"$ DEFINE/NOLOG "
)
;
out
.
print
(
env
[
i
]
.
substring
(
0
,
eqIndex
)
)
;
out
.
print
(
" \""
)
;
out
.
print
(
env
[
i
]
.
substring
(
eqIndex
+
1
)
)
;
out
.
println
(
'\"'
)
;
}
}
}
out
.
print
(
"$ "
+
cmd
[
0
]
)
;
for
(
int
i
=
1
;
i
<
cmd
.
length
;
i
++
)
{
out
.
println
(
" -"
)
;
out
.
print
(
cmd
[
i
]
)
;
}
}
finally
{
if
(
out
!=
null
)
{
out
.
close
(
)
;
}
}
return
script
;
}
}
}
