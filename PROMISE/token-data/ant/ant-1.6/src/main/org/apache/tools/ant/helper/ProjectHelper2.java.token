package
org
.
apache
.
tools
.
ant
.
helper
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
FileNotFoundException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
net
.
URL
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Stack
;
import
org
.
xml
.
sax
.
Locator
;
import
org
.
xml
.
sax
.
InputSource
;
import
org
.
xml
.
sax
.
SAXParseException
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
Attributes
;
import
org
.
xml
.
sax
.
helpers
.
DefaultHandler
;
import
org
.
apache
.
tools
.
ant
.
util
.
JAXPUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
apache
.
tools
.
ant
.
ProjectHelper
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Target
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
RuntimeConfigurable
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Location
;
import
org
.
apache
.
tools
.
ant
.
UnknownElement
;
import
org
.
xml
.
sax
.
XMLReader
;
public
class
ProjectHelper2
extends
ProjectHelper
{
private
static
AntHandler
elementHandler
=
new
ElementHandler
(
)
;
private
static
AntHandler
targetHandler
=
new
TargetHandler
(
)
;
private
static
AntHandler
mainHandler
=
new
MainHandler
(
)
;
private
static
AntHandler
projectHandler
=
new
ProjectHandler
(
)
;
private
static
FileUtils
fu
=
FileUtils
.
newFileUtils
(
)
;
public
UnknownElement
parseUnknownElement
(
Project
project
,
URL
source
)
throws
BuildException
{
Target
dummyTarget
=
new
Target
(
)
;
dummyTarget
.
setProject
(
project
)
;
AntXMLContext
context
=
new
AntXMLContext
(
project
)
;
context
.
addTarget
(
dummyTarget
)
;
context
.
setImplicitTarget
(
dummyTarget
)
;
parse
(
context
.
getProject
(
)
,
source
,
new
RootHandler
(
context
,
elementHandler
)
)
;
Task
[
]
tasks
=
dummyTarget
.
getTasks
(
)
;
if
(
tasks
.
length
!=
1
)
{
throw
new
BuildException
(
"No tasks defined"
)
;
}
return
(
UnknownElement
)
tasks
[
0
]
;
}
public
void
parse
(
Project
project
,
Object
source
)
throws
BuildException
{
getImportStack
(
)
.
addElement
(
source
)
;
AntXMLContext
context
=
null
;
context
=
(
AntXMLContext
)
project
.
getReference
(
"ant.parsing.context"
)
;
if
(
context
==
null
)
{
context
=
new
AntXMLContext
(
project
)
;
project
.
addReference
(
"ant.parsing.context"
,
context
)
;
project
.
addReference
(
"ant.targets"
,
context
.
getTargets
(
)
)
;
}
if
(
getImportStack
(
)
.
size
(
)
>
1
)
{
context
.
setIgnoreProjectTag
(
true
)
;
Target
currentTarget
=
context
.
getCurrentTarget
(
)
;
try
{
Target
newCurrent
=
new
Target
(
)
;
newCurrent
.
setProject
(
project
)
;
newCurrent
.
setName
(
""
)
;
context
.
setCurrentTarget
(
newCurrent
)
;
parse
(
project
,
source
,
new
RootHandler
(
context
,
mainHandler
)
)
;
newCurrent
.
execute
(
)
;
}
finally
{
context
.
setCurrentTarget
(
currentTarget
)
;
}
}
else
{
parse
(
project
,
source
,
new
RootHandler
(
context
,
mainHandler
)
)
;
context
.
getImplicitTarget
(
)
.
execute
(
)
;
}
}
public
void
parse
(
Project
project
,
Object
source
,
RootHandler
handler
)
throws
BuildException
{
AntXMLContext
context
=
handler
.
context
;
File
buildFile
=
null
;
URL
url
=
null
;
String
buildFileName
=
null
;
if
(
source
instanceof
File
)
{
buildFile
=
(
File
)
source
;
buildFile
=
new
File
(
buildFile
.
getAbsolutePath
(
)
)
;
context
.
setBuildFile
(
buildFile
)
;
buildFileName
=
buildFile
.
toString
(
)
;
}
else
if
(
source
instanceof
URL
)
{
if
(
handler
.
getCurrentAntHandler
(
)
!=
elementHandler
)
{
throw
new
BuildException
(
"Source "
+
source
.
getClass
(
)
.
getName
(
)
+
" not supported by this plugin for "
+
" non task xml"
)
;
}
url
=
(
URL
)
source
;
buildFileName
=
url
.
toString
(
)
;
}
else
{
throw
new
BuildException
(
"Source "
+
source
.
getClass
(
)
.
getName
(
)
+
" not supported by this plugin"
)
;
}
InputStream
inputStream
=
null
;
InputSource
inputSource
=
null
;
try
{
XMLReader
parser
=
JAXPUtils
.
getNamespaceXMLReader
(
)
;
String
uri
=
null
;
if
(
buildFile
!=
null
)
{
uri
=
fu
.
toURI
(
buildFile
.
getAbsolutePath
(
)
)
;
inputStream
=
new
FileInputStream
(
buildFile
)
;
}
else
{
inputStream
=
url
.
openStream
(
)
;
uri
=
url
.
toString
(
)
;
}
inputSource
=
new
InputSource
(
inputStream
)
;
if
(
uri
!=
null
)
{
inputSource
.
setSystemId
(
uri
)
;
}
project
.
log
(
"parsing buildfile "
+
buildFileName
+
" with URI = "
+
uri
,
Project
.
MSG_VERBOSE
)
;
DefaultHandler
hb
=
handler
;
parser
.
setContentHandler
(
hb
)
;
parser
.
setEntityResolver
(
hb
)
;
parser
.
setErrorHandler
(
hb
)
;
parser
.
setDTDHandler
(
hb
)
;
parser
.
parse
(
inputSource
)
;
}
catch
(
SAXParseException
exc
)
{
Location
location
=
new
Location
(
exc
.
getSystemId
(
)
,
exc
.
getLineNumber
(
)
,
exc
.
getColumnNumber
(
)
)
;
Throwable
t
=
exc
.
getException
(
)
;
if
(
t
instanceof
BuildException
)
{
BuildException
be
=
(
BuildException
)
t
;
if
(
be
.
getLocation
(
)
==
Location
.
UNKNOWN_LOCATION
)
{
be
.
setLocation
(
location
)
;
}
throw
be
;
}
throw
new
BuildException
(
exc
.
getMessage
(
)
,
t
,
location
)
;
}
catch
(
SAXException
exc
)
{
Throwable
t
=
exc
.
getException
(
)
;
if
(
t
instanceof
BuildException
)
{
throw
(
BuildException
)
t
;
}
throw
new
BuildException
(
exc
.
getMessage
(
)
,
t
)
;
}
catch
(
FileNotFoundException
exc
)
{
throw
new
BuildException
(
exc
)
;
}
catch
(
UnsupportedEncodingException
exc
)
{
throw
new
BuildException
(
"Encoding of project file "
+
buildFileName
+
" is invalid."
,
exc
)
;
}
catch
(
IOException
exc
)
{
throw
new
BuildException
(
"Error reading project file "
+
buildFileName
+
": "
+
exc
.
getMessage
(
)
,
exc
)
;
}
finally
{
if
(
inputStream
!=
null
)
{
try
{
inputStream
.
close
(
)
;
}
catch
(
IOException
ioe
)
{
}
}
}
}
public
static
class
AntHandler
{
public
void
onStartElement
(
String
uri
,
String
tag
,
String
qname
,
Attributes
attrs
,
AntXMLContext
context
)
throws
SAXParseException
{
}
public
AntHandler
onStartChild
(
String
uri
,
String
tag
,
String
qname
,
Attributes
attrs
,
AntXMLContext
context
)
throws
SAXParseException
{
throw
new
SAXParseException
(
"Unexpected element \""
+
qname
+
" \""
,
context
.
getLocator
(
)
)
;
}
public
void
onEndChild
(
String
uri
,
String
tag
,
String
qname
,
AntXMLContext
context
)
throws
SAXParseException
{
}
public
void
onEndElement
(
String
uri
,
String
tag
,
AntXMLContext
context
)
{
}
public
void
characters
(
char
[
]
buf
,
int
start
,
int
count
,
AntXMLContext
context
)
throws
SAXParseException
{
String
s
=
new
String
(
buf
,
start
,
count
)
.
trim
(
)
;
if
(
s
.
length
(
)
>
0
)
{
throw
new
SAXParseException
(
"Unexpected text \""
+
s
+
"\""
,
context
.
getLocator
(
)
)
;
}
}
protected
void
checkNamespace
(
String
uri
)
{
}
}
public
static
class
RootHandler
extends
DefaultHandler
{
private
Stack
antHandlers
=
new
Stack
(
)
;
private
AntHandler
currentHandler
=
null
;
private
AntXMLContext
context
;
public
RootHandler
(
AntXMLContext
context
,
AntHandler
rootHandler
)
{
currentHandler
=
rootHandler
;
antHandlers
.
push
(
currentHandler
)
;
this
.
context
=
context
;
}
public
AntHandler
getCurrentAntHandler
(
)
{
return
currentHandler
;
}
public
InputSource
resolveEntity
(
String
publicId
,
String
systemId
)
{
context
.
getProject
(
)
.
log
(
"resolving systemId: "
+
systemId
,
Project
.
MSG_VERBOSE
)
;
if
(
systemId
.
startsWith
(
"file:"
)
)
{
String
path
=
fu
.
fromURI
(
systemId
)
;
File
file
=
new
File
(
path
)
;
if
(
!
file
.
isAbsolute
(
)
)
{
file
=
fu
.
resolveFile
(
context
.
getBuildFileParent
(
)
,
path
)
;
}
try
{
InputSource
inputSource
=
new
InputSource
(
new
FileInputStream
(
file
)
)
;
inputSource
.
setSystemId
(
fu
.
toURI
(
file
.
getAbsolutePath
(
)
)
)
;
return
inputSource
;
}
catch
(
FileNotFoundException
fne
)
{
context
.
getProject
(
)
.
log
(
file
.
getAbsolutePath
(
)
+
" could not be found"
,
Project
.
MSG_WARN
)
;
}
}
return
null
;
}
public
void
startElement
(
String
uri
,
String
tag
,
String
qname
,
Attributes
attrs
)
throws
SAXParseException
{
AntHandler
next
=
currentHandler
.
onStartChild
(
uri
,
tag
,
qname
,
attrs
,
context
)
;
antHandlers
.
push
(
currentHandler
)
;
currentHandler
=
next
;
currentHandler
.
onStartElement
(
uri
,
tag
,
qname
,
attrs
,
context
)
;
}
public
void
setDocumentLocator
(
Locator
locator
)
{
context
.
setLocator
(
locator
)
;
}
public
void
endElement
(
String
uri
,
String
name
,
String
qName
)
throws
SAXException
{
currentHandler
.
onEndElement
(
uri
,
name
,
context
)
;
AntHandler
prev
=
(
AntHandler
)
antHandlers
.
pop
(
)
;
currentHandler
=
prev
;
if
(
currentHandler
!=
null
)
{
currentHandler
.
onEndChild
(
uri
,
name
,
qName
,
context
)
;
}
}
public
void
characters
(
char
[
]
buf
,
int
start
,
int
count
)
throws
SAXParseException
{
currentHandler
.
characters
(
buf
,
start
,
count
,
context
)
;
}
public
void
startPrefixMapping
(
String
prefix
,
String
uri
)
{
context
.
startPrefixMapping
(
prefix
,
uri
)
;
}
public
void
endPrefixMapping
(
String
prefix
)
{
context
.
endPrefixMapping
(
prefix
)
;
}
}
public
static
class
MainHandler
extends
AntHandler
{
public
AntHandler
onStartChild
(
String
uri
,
String
name
,
String
qname
,
Attributes
attrs
,
AntXMLContext
context
)
throws
SAXParseException
{
if
(
name
.
equals
(
"project"
)
&&
(
uri
.
equals
(
""
)
||
uri
.
equals
(
ANT_CORE_URI
)
)
)
{
return
ProjectHelper2
.
projectHandler
;
}
else
{
throw
new
SAXParseException
(
"Unexpected element \""
+
qname
+
"\" "
+
name
,
context
.
getLocator
(
)
)
;
}
}
}
public
static
class
ProjectHandler
extends
AntHandler
{
public
void
onStartElement
(
String
uri
,
String
tag
,
String
qname
,
Attributes
attrs
,
AntXMLContext
context
)
throws
SAXParseException
{
String
id
=
null
;
String
baseDir
=
null
;
boolean
nameAttributeSet
=
false
;
Project
project
=
context
.
getProject
(
)
;
for
(
int
i
=
0
;
i
<
attrs
.
getLength
(
)
;
i
++
)
{
String
attrUri
=
attrs
.
getURI
(
i
)
;
if
(
attrUri
!=
null
&&
!
attrUri
.
equals
(
""
)
&&
!
attrUri
.
equals
(
uri
)
)
{
continue
;
}
String
key
=
attrs
.
getLocalName
(
i
)
;
String
value
=
attrs
.
getValue
(
i
)
;
if
(
key
.
equals
(
"default"
)
)
{
if
(
value
!=
null
&&
!
value
.
equals
(
""
)
)
{
if
(
!
context
.
isIgnoringProjectTag
(
)
)
{
project
.
setDefault
(
value
)
;
}
}
}
else
if
(
key
.
equals
(
"name"
)
)
{
if
(
value
!=
null
)
{
context
.
setCurrentProjectName
(
value
)
;
nameAttributeSet
=
true
;
if
(
!
context
.
isIgnoringProjectTag
(
)
)
{
project
.
setName
(
value
)
;
project
.
addReference
(
value
,
project
)
;
}
}
}
else
if
(
key
.
equals
(
"id"
)
)
{
if
(
value
!=
null
)
{
if
(
!
context
.
isIgnoringProjectTag
(
)
)
{
project
.
addReference
(
value
,
project
)
;
}
}
}
else
if
(
key
.
equals
(
"basedir"
)
)
{
if
(
!
context
.
isIgnoringProjectTag
(
)
)
{
baseDir
=
value
;
}
}
else
{
throw
new
SAXParseException
(
"Unexpected attribute \""
+
attrs
.
getQName
(
i
)
+
"\""
,
context
.
getLocator
(
)
)
;
}
}
String
antFileProp
=
"ant.file."
+
context
.
getCurrentProjectName
(
)
;
String
dup
=
project
.
getProperty
(
antFileProp
)
;
if
(
dup
!=
null
&&
nameAttributeSet
)
{
File
dupFile
=
new
File
(
dup
)
;
if
(
context
.
isIgnoringProjectTag
(
)
&&
!
dupFile
.
equals
(
context
.
getBuildFile
(
)
)
)
{
project
.
log
(
"Duplicated project name in import. Project "
+
context
.
getCurrentProjectName
(
)
+
" defined first in "
+
dup
+
" and again in "
+
context
.
getBuildFile
(
)
,
Project
.
MSG_WARN
)
;
}
}
if
(
context
.
getBuildFile
(
)
!=
null
)
{
project
.
setUserProperty
(
"ant.file."
+
context
.
getCurrentProjectName
(
)
,
context
.
getBuildFile
(
)
.
toString
(
)
)
;
}
if
(
context
.
isIgnoringProjectTag
(
)
)
{
return
;
}
if
(
project
.
getProperty
(
"basedir"
)
!=
null
)
{
project
.
setBasedir
(
project
.
getProperty
(
"basedir"
)
)
;
}
else
{
if
(
baseDir
==
null
)
{
project
.
setBasedir
(
context
.
getBuildFileParent
(
)
.
getAbsolutePath
(
)
)
;
}
else
{
if
(
(
new
File
(
baseDir
)
)
.
isAbsolute
(
)
)
{
project
.
setBasedir
(
baseDir
)
;
}
else
{
project
.
setBaseDir
(
fu
.
resolveFile
(
context
.
getBuildFileParent
(
)
,
baseDir
)
)
;
}
}
}
project
.
addTarget
(
""
,
context
.
getImplicitTarget
(
)
)
;
context
.
setCurrentTarget
(
context
.
getImplicitTarget
(
)
)
;
}
public
AntHandler
onStartChild
(
String
uri
,
String
name
,
String
qname
,
Attributes
attrs
,
AntXMLContext
context
)
throws
SAXParseException
{
if
(
name
.
equals
(
"target"
)
&&
(
uri
.
equals
(
""
)
||
uri
.
equals
(
ANT_CORE_URI
)
)
)
{
return
ProjectHelper2
.
targetHandler
;
}
else
{
return
ProjectHelper2
.
elementHandler
;
}
}
}
public
static
class
TargetHandler
extends
AntHandler
{
public
void
onStartElement
(
String
uri
,
String
tag
,
String
qname
,
Attributes
attrs
,
AntXMLContext
context
)
throws
SAXParseException
{
String
name
=
null
;
String
depends
=
""
;
Project
project
=
context
.
getProject
(
)
;
Target
target
=
new
Target
(
)
;
target
.
setProject
(
project
)
;
context
.
addTarget
(
target
)
;
for
(
int
i
=
0
;
i
<
attrs
.
getLength
(
)
;
i
++
)
{
String
attrUri
=
attrs
.
getURI
(
i
)
;
if
(
attrUri
!=
null
&&
!
attrUri
.
equals
(
""
)
&&
!
attrUri
.
equals
(
uri
)
)
{
continue
;
}
String
key
=
attrs
.
getLocalName
(
i
)
;
String
value
=
attrs
.
getValue
(
i
)
;
if
(
key
.
equals
(
"name"
)
)
{
name
=
value
;
if
(
""
.
equals
(
name
)
)
{
throw
new
BuildException
(
"name attribute must "
+
"not be empty"
)
;
}
}
else
if
(
key
.
equals
(
"depends"
)
)
{
depends
=
value
;
}
else
if
(
key
.
equals
(
"if"
)
)
{
target
.
setIf
(
value
)
;
}
else
if
(
key
.
equals
(
"unless"
)
)
{
target
.
setUnless
(
value
)
;
}
else
if
(
key
.
equals
(
"id"
)
)
{
if
(
value
!=
null
&&
!
value
.
equals
(
""
)
)
{
context
.
getProject
(
)
.
addReference
(
value
,
target
)
;
}
}
else
if
(
key
.
equals
(
"description"
)
)
{
target
.
setDescription
(
value
)
;
}
else
{
throw
new
SAXParseException
(
"Unexpected attribute \""
+
key
+
"\""
,
context
.
getLocator
(
)
)
;
}
}
if
(
name
==
null
)
{
throw
new
SAXParseException
(
"target element appears without "
+
"a name attribute"
,
context
.
getLocator
(
)
)
;
}
Hashtable
currentTargets
=
project
.
getTargets
(
)
;
if
(
currentTargets
.
containsKey
(
name
)
)
{
if
(
context
.
getCurrentProjectName
(
)
!=
null
)
{
String
newName
=
context
.
getCurrentProjectName
(
)
+
"."
+
name
;
project
.
log
(
"Already defined in main or a previous import, "
+
"define "
+
name
+
" as "
+
newName
,
Project
.
MSG_VERBOSE
)
;
name
=
newName
;
}
else
{
project
.
log
(
"Already defined in main or a previous import, "
+
"ignore "
+
name
,
Project
.
MSG_VERBOSE
)
;
name
=
null
;
}
}
if
(
name
!=
null
)
{
target
.
setName
(
name
)
;
project
.
addOrReplaceTarget
(
name
,
target
)
;
}
if
(
depends
.
length
(
)
>
0
)
{
target
.
setDepends
(
depends
)
;
}
}
public
AntHandler
onStartChild
(
String
uri
,
String
name
,
String
qname
,
Attributes
attrs
,
AntXMLContext
context
)
throws
SAXParseException
{
return
ProjectHelper2
.
elementHandler
;
}
public
void
onEndElement
(
String
uri
,
String
tag
,
AntXMLContext
context
)
{
context
.
setCurrentTarget
(
context
.
getImplicitTarget
(
)
)
;
}
}
public
static
class
ElementHandler
extends
AntHandler
{
public
ElementHandler
(
)
{
}
public
void
onStartElement
(
String
uri
,
String
tag
,
String
qname
,
Attributes
attrs
,
AntXMLContext
context
)
throws
SAXParseException
{
RuntimeConfigurable
parentWrapper
=
context
.
currentWrapper
(
)
;
Object
parent
=
null
;
if
(
parentWrapper
!=
null
)
{
parent
=
parentWrapper
.
getProxy
(
)
;
}
UnknownElement
task
=
new
UnknownElement
(
tag
)
;
task
.
setProject
(
context
.
getProject
(
)
)
;
task
.
setNamespace
(
uri
)
;
task
.
setQName
(
qname
)
;
task
.
setTaskType
(
ProjectHelper
.
genComponentName
(
task
.
getNamespace
(
)
,
tag
)
)
;
task
.
setTaskName
(
qname
)
;
Location
location
=
new
Location
(
context
.
getLocator
(
)
.
getSystemId
(
)
,
context
.
getLocator
(
)
.
getLineNumber
(
)
,
context
.
getLocator
(
)
.
getColumnNumber
(
)
)
;
task
.
setLocation
(
location
)
;
task
.
setOwningTarget
(
context
.
getCurrentTarget
(
)
)
;
context
.
configureId
(
task
,
attrs
)
;
if
(
parent
!=
null
)
{
(
(
UnknownElement
)
parent
)
.
addChild
(
task
)
;
}
else
{
context
.
getCurrentTarget
(
)
.
addTask
(
task
)
;
}
RuntimeConfigurable
wrapper
=
new
RuntimeConfigurable
(
task
,
task
.
getTaskName
(
)
)
;
for
(
int
i
=
0
;
i
<
attrs
.
getLength
(
)
;
i
++
)
{
String
attrUri
=
attrs
.
getURI
(
i
)
;
if
(
attrUri
!=
null
&&
!
attrUri
.
equals
(
""
)
&&
!
attrUri
.
equals
(
uri
)
)
{
continue
;
}
String
name
=
attrs
.
getLocalName
(
i
)
;
String
value
=
attrs
.
getValue
(
i
)
;
if
(
name
.
equals
(
"ant-type"
)
)
{
int
index
=
value
.
indexOf
(
":"
)
;
if
(
index
!=
-
1
)
{
String
prefix
=
value
.
substring
(
0
,
index
)
;
String
mappedUri
=
context
.
getPrefixMapping
(
prefix
)
;
if
(
mappedUri
==
null
)
{
throw
new
BuildException
(
"Unable to find XML NS prefix "
+
prefix
)
;
}
value
=
ProjectHelper
.
genComponentName
(
mappedUri
,
value
.
substring
(
index
+
1
)
)
;
}
}
wrapper
.
setAttribute
(
name
,
value
)
;
}
if
(
parentWrapper
!=
null
)
{
parentWrapper
.
addChild
(
wrapper
)
;
}
context
.
pushWrapper
(
wrapper
)
;
}
public
void
characters
(
char
[
]
buf
,
int
start
,
int
count
,
AntXMLContext
context
)
throws
SAXParseException
{
RuntimeConfigurable
wrapper
=
context
.
currentWrapper
(
)
;
wrapper
.
addText
(
buf
,
start
,
count
)
;
}
public
AntHandler
onStartChild
(
String
uri
,
String
tag
,
String
qname
,
Attributes
attrs
,
AntXMLContext
context
)
throws
SAXParseException
{
return
ProjectHelper2
.
elementHandler
;
}
public
void
onEndElement
(
String
uri
,
String
tag
,
AntXMLContext
context
)
{
context
.
popWrapper
(
)
;
}
}
}
