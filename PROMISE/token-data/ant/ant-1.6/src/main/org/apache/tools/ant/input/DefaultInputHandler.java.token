package
org
.
apache
.
tools
.
ant
.
input
;
import
java
.
io
.
DataInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
util
.
Enumeration
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
util
.
KeepAliveInputStream
;
public
class
DefaultInputHandler
implements
InputHandler
{
public
DefaultInputHandler
(
)
{
}
public
void
handleInput
(
InputRequest
request
)
throws
BuildException
{
String
prompt
=
getPrompt
(
request
)
;
DataInputStream
in
=
null
;
try
{
in
=
new
DataInputStream
(
new
KeepAliveInputStream
(
getInputStream
(
)
)
)
;
do
{
System
.
err
.
println
(
prompt
)
;
try
{
String
input
=
in
.
readLine
(
)
;
request
.
setInput
(
input
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
"Failed to read input from"
+
" Console."
,
e
)
;
}
}
while
(
!
request
.
isInputValid
(
)
)
;
}
finally
{
if
(
in
!=
null
)
{
try
{
in
.
close
(
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
"Failed to close input."
,
e
)
;
}
}
}
}
protected
String
getPrompt
(
InputRequest
request
)
{
String
prompt
=
request
.
getPrompt
(
)
;
if
(
request
instanceof
MultipleChoiceInputRequest
)
{
StringBuffer
sb
=
new
StringBuffer
(
prompt
)
;
sb
.
append
(
"("
)
;
Enumeration
e
=
(
(
MultipleChoiceInputRequest
)
request
)
.
getChoices
(
)
.
elements
(
)
;
boolean
first
=
true
;
while
(
e
.
hasMoreElements
(
)
)
{
if
(
!
first
)
{
sb
.
append
(
","
)
;
}
sb
.
append
(
e
.
nextElement
(
)
)
;
first
=
false
;
}
sb
.
append
(
")"
)
;
prompt
=
sb
.
toString
(
)
;
}
return
prompt
;
}
protected
InputStream
getInputStream
(
)
{
return
System
.
in
;
}
}
