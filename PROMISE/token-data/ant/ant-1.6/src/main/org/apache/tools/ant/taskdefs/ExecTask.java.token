package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
types
.
Commandline
;
import
org
.
apache
.
tools
.
ant
.
types
.
Environment
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
public
class
ExecTask
extends
Task
{
private
String
os
;
private
File
dir
;
protected
boolean
failOnError
=
false
;
protected
boolean
newEnvironment
=
false
;
private
Long
timeout
=
null
;
private
Environment
env
=
new
Environment
(
)
;
protected
Commandline
cmdl
=
new
Commandline
(
)
;
private
String
resultProperty
;
private
boolean
failIfExecFails
=
true
;
private
String
executable
;
private
boolean
resolveExecutable
=
false
;
private
boolean
spawn
=
false
;
private
boolean
incompatibleWithSpawn
=
false
;
private
Redirector
redirector
=
new
Redirector
(
this
)
;
private
boolean
vmLauncher
=
true
;
public
void
setSpawn
(
boolean
spawn
)
{
this
.
spawn
=
spawn
;
}
public
void
setTimeout
(
Long
value
)
{
timeout
=
value
;
incompatibleWithSpawn
=
true
;
}
public
void
setTimeout
(
Integer
value
)
{
if
(
value
==
null
)
{
timeout
=
null
;
}
else
{
setTimeout
(
new
Long
(
value
.
intValue
(
)
)
)
;
}
incompatibleWithSpawn
=
true
;
}
public
void
setExecutable
(
String
value
)
{
this
.
executable
=
value
;
cmdl
.
setExecutable
(
value
)
;
}
public
void
setDir
(
File
d
)
{
this
.
dir
=
d
;
}
public
void
setOs
(
String
os
)
{
this
.
os
=
os
;
}
public
void
setCommand
(
Commandline
cmdl
)
{
log
(
"The command attribute is deprecated. "
+
"Please use the executable attribute and nested arg elements."
,
Project
.
MSG_WARN
)
;
this
.
cmdl
=
cmdl
;
}
public
void
setOutput
(
File
out
)
{
redirector
.
setOutput
(
out
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setInput
(
File
input
)
{
redirector
.
setInput
(
input
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setInputString
(
String
inputString
)
{
redirector
.
setInputString
(
inputString
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setLogError
(
boolean
logError
)
{
redirector
.
setLogError
(
logError
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setError
(
File
error
)
{
redirector
.
setError
(
error
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setOutputproperty
(
String
outputProp
)
{
redirector
.
setOutputProperty
(
outputProp
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setErrorProperty
(
String
errorProperty
)
{
redirector
.
setErrorProperty
(
errorProperty
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setFailonerror
(
boolean
fail
)
{
failOnError
=
fail
;
incompatibleWithSpawn
=
true
;
}
public
void
setNewenvironment
(
boolean
newenv
)
{
newEnvironment
=
newenv
;
}
public
void
setResolveExecutable
(
boolean
resolveExecutable
)
{
this
.
resolveExecutable
=
resolveExecutable
;
}
public
boolean
getResolveExecutable
(
)
{
return
resolveExecutable
;
}
public
void
addEnv
(
Environment
.
Variable
var
)
{
env
.
addVariable
(
var
)
;
}
public
Commandline
.
Argument
createArg
(
)
{
return
cmdl
.
createArgument
(
)
;
}
public
void
setResultProperty
(
String
resultProperty
)
{
this
.
resultProperty
=
resultProperty
;
incompatibleWithSpawn
=
true
;
}
protected
void
maybeSetResultPropertyValue
(
int
result
)
{
String
res
=
Integer
.
toString
(
result
)
;
if
(
resultProperty
!=
null
)
{
getProject
(
)
.
setNewProperty
(
resultProperty
,
res
)
;
}
}
public
void
setFailIfExecutionFails
(
boolean
flag
)
{
failIfExecFails
=
flag
;
incompatibleWithSpawn
=
true
;
}
public
void
setAppend
(
boolean
append
)
{
redirector
.
setAppend
(
append
)
;
incompatibleWithSpawn
=
true
;
}
protected
String
resolveExecutable
(
String
exec
,
boolean
searchPath
)
{
if
(
!
resolveExecutable
)
{
return
exec
;
}
File
executableFile
=
getProject
(
)
.
resolveFile
(
exec
)
;
if
(
executableFile
.
exists
(
)
)
{
return
executableFile
.
getAbsolutePath
(
)
;
}
FileUtils
fileUtils
=
FileUtils
.
newFileUtils
(
)
;
if
(
dir
!=
null
)
{
executableFile
=
fileUtils
.
resolveFile
(
dir
,
exec
)
;
if
(
executableFile
.
exists
(
)
)
{
return
executableFile
.
getAbsolutePath
(
)
;
}
}
if
(
searchPath
)
{
Vector
env
=
Execute
.
getProcEnvironment
(
)
;
Enumeration
e
=
env
.
elements
(
)
;
Path
p
=
null
;
while
(
e
.
hasMoreElements
(
)
)
{
String
line
=
(
String
)
e
.
nextElement
(
)
;
if
(
line
.
startsWith
(
"PATH="
)
||
line
.
startsWith
(
"Path="
)
)
{
p
=
new
Path
(
getProject
(
)
,
line
.
substring
(
5
)
)
;
break
;
}
}
if
(
p
!=
null
)
{
String
[
]
dirs
=
p
.
list
(
)
;
for
(
int
i
=
0
;
i
<
dirs
.
length
;
i
++
)
{
executableFile
=
fileUtils
.
resolveFile
(
new
File
(
dirs
[
i
]
)
,
exec
)
;
if
(
executableFile
.
exists
(
)
)
{
return
executableFile
.
getAbsolutePath
(
)
;
}
}
}
}
return
exec
;
}
public
void
execute
(
)
throws
BuildException
{
File
savedDir
=
dir
;
cmdl
.
setExecutable
(
resolveExecutable
(
executable
,
false
)
)
;
checkConfiguration
(
)
;
if
(
isValidOs
(
)
)
{
try
{
runExec
(
prepareExec
(
)
)
;
}
finally
{
dir
=
savedDir
;
}
}
}
protected
void
checkConfiguration
(
)
throws
BuildException
{
if
(
cmdl
.
getExecutable
(
)
==
null
)
{
throw
new
BuildException
(
"no executable specified"
,
getLocation
(
)
)
;
}
if
(
dir
!=
null
&&
!
dir
.
exists
(
)
)
{
throw
new
BuildException
(
"The directory you specified does not "
+
"exist"
)
;
}
if
(
dir
!=
null
&&
!
dir
.
isDirectory
(
)
)
{
throw
new
BuildException
(
"The directory you specified is not a "
+
"directory"
)
;
}
if
(
spawn
&&
incompatibleWithSpawn
)
{
getProject
(
)
.
log
(
"spawn does not allow attributes related to input, "
+
"output, error, result"
,
Project
.
MSG_ERR
)
;
getProject
(
)
.
log
(
"spawn does not also not allow timeout"
,
Project
.
MSG_ERR
)
;
throw
new
BuildException
(
"You have used an attribute which is "
+
"not compatible with spawn"
)
;
}
}
protected
boolean
isValidOs
(
)
{
String
myos
=
System
.
getProperty
(
"os.name"
)
;
log
(
"Current OS is "
+
myos
,
Project
.
MSG_VERBOSE
)
;
if
(
(
os
!=
null
)
&&
(
os
.
indexOf
(
myos
)
<
0
)
)
{
log
(
"This OS, "
+
myos
+
" was not found in the specified list of valid OSes: "
+
os
,
Project
.
MSG_VERBOSE
)
;
return
false
;
}
return
true
;
}
public
void
setVMLauncher
(
boolean
vmLauncher
)
{
this
.
vmLauncher
=
vmLauncher
;
}
protected
Execute
prepareExec
(
)
throws
BuildException
{
if
(
dir
==
null
)
{
dir
=
getProject
(
)
.
getBaseDir
(
)
;
}
Execute
exe
=
new
Execute
(
createHandler
(
)
,
createWatchdog
(
)
)
;
exe
.
setAntRun
(
getProject
(
)
)
;
exe
.
setWorkingDirectory
(
dir
)
;
exe
.
setVMLauncher
(
vmLauncher
)
;
exe
.
setSpawn
(
spawn
)
;
String
[
]
environment
=
env
.
getVariables
(
)
;
if
(
environment
!=
null
)
{
for
(
int
i
=
0
;
i
<
environment
.
length
;
i
++
)
{
log
(
"Setting environment variable: "
+
environment
[
i
]
,
Project
.
MSG_VERBOSE
)
;
}
}
exe
.
setNewenvironment
(
newEnvironment
)
;
exe
.
setEnvironment
(
environment
)
;
return
exe
;
}
protected
final
void
runExecute
(
Execute
exe
)
throws
IOException
{
int
returnCode
=
-
1
;
if
(
!
spawn
)
{
returnCode
=
exe
.
execute
(
)
;
if
(
exe
.
killedProcess
(
)
)
{
String
msg
=
"Timeout: killed the sub-process"
;
if
(
failOnError
)
{
throw
new
BuildException
(
msg
)
;
}
else
{
log
(
msg
,
Project
.
MSG_WARN
)
;
}
}
maybeSetResultPropertyValue
(
returnCode
)
;
if
(
Execute
.
isFailure
(
returnCode
)
)
{
if
(
failOnError
)
{
throw
new
BuildException
(
getTaskType
(
)
+
" returned: "
+
returnCode
,
getLocation
(
)
)
;
}
else
{
log
(
"Result: "
+
returnCode
,
Project
.
MSG_ERR
)
;
}
}
redirector
.
complete
(
)
;
}
else
{
exe
.
spawn
(
)
;
}
}
protected
void
runExec
(
Execute
exe
)
throws
BuildException
{
log
(
cmdl
.
describeCommand
(
)
,
Project
.
MSG_VERBOSE
)
;
exe
.
setCommandline
(
cmdl
.
getCommandline
(
)
)
;
try
{
runExecute
(
exe
)
;
}
catch
(
IOException
e
)
{
if
(
failIfExecFails
)
{
throw
new
BuildException
(
"Execute failed: "
+
e
.
toString
(
)
,
e
,
getLocation
(
)
)
;
}
else
{
log
(
"Execute failed: "
+
e
.
toString
(
)
,
Project
.
MSG_ERR
)
;
}
}
finally
{
logFlush
(
)
;
}
}
protected
ExecuteStreamHandler
createHandler
(
)
throws
BuildException
{
return
redirector
.
createHandler
(
)
;
}
protected
ExecuteWatchdog
createWatchdog
(
)
throws
BuildException
{
if
(
timeout
==
null
)
{
return
null
;
}
return
new
ExecuteWatchdog
(
timeout
.
longValue
(
)
)
;
}
protected
void
logFlush
(
)
{
}
}
