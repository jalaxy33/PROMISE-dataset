package
org
.
apache
.
tools
.
ant
;
import
java
.
io
.
Serializable
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
List
;
import
java
.
util
.
Locale
;
import
java
.
util
.
Map
;
import
java
.
util
.
Iterator
;
import
org
.
apache
.
tools
.
ant
.
util
.
CollectionUtils
;
import
org
.
xml
.
sax
.
AttributeList
;
import
org
.
xml
.
sax
.
helpers
.
AttributeListImpl
;
public
class
RuntimeConfigurable
implements
Serializable
{
private
static
final
String
ANT_TYPE
=
"ant-type"
;
private
String
elementTag
=
null
;
private
List
children
=
null
;
private
transient
Object
wrappedObject
=
null
;
private
transient
IntrospectionHelper
.
Creator
creator
;
private
transient
AttributeList
attributes
;
private
List
attributeNames
=
null
;
private
Map
attributeMap
=
null
;
private
StringBuffer
characters
=
null
;
private
boolean
proxyConfigured
=
false
;
private
String
polyType
=
null
;
public
RuntimeConfigurable
(
Object
proxy
,
String
elementTag
)
{
wrappedObject
=
proxy
;
this
.
elementTag
=
elementTag
;
proxyConfigured
=
false
;
if
(
proxy
instanceof
Task
)
{
(
(
Task
)
proxy
)
.
setRuntimeConfigurableWrapper
(
this
)
;
}
}
public
void
setProxy
(
Object
proxy
)
{
wrappedObject
=
proxy
;
proxyConfigured
=
false
;
}
void
setCreator
(
IntrospectionHelper
.
Creator
creator
)
{
this
.
creator
=
creator
;
}
public
Object
getProxy
(
)
{
return
wrappedObject
;
}
public
String
getPolyType
(
)
{
return
polyType
;
}
public
void
setPolyType
(
String
polyType
)
{
this
.
polyType
=
polyType
;
}
public
void
setAttributes
(
AttributeList
attributes
)
{
this
.
attributes
=
new
AttributeListImpl
(
attributes
)
;
for
(
int
i
=
0
;
i
<
attributes
.
getLength
(
)
;
i
++
)
{
setAttribute
(
attributes
.
getName
(
i
)
,
attributes
.
getValue
(
i
)
)
;
}
}
public
void
setAttribute
(
String
name
,
String
value
)
{
if
(
name
.
equalsIgnoreCase
(
ANT_TYPE
)
)
{
this
.
polyType
=
value
;
}
else
{
if
(
attributeNames
==
null
)
{
attributeNames
=
new
ArrayList
(
)
;
attributeMap
=
new
HashMap
(
)
;
}
attributeNames
.
add
(
name
)
;
attributeMap
.
put
(
name
,
value
)
;
}
}
public
Hashtable
getAttributeMap
(
)
{
if
(
attributeMap
!=
null
)
{
return
new
Hashtable
(
attributeMap
)
;
}
else
{
return
new
Hashtable
(
1
)
;
}
}
public
AttributeList
getAttributes
(
)
{
return
attributes
;
}
public
void
addChild
(
RuntimeConfigurable
child
)
{
if
(
children
==
null
)
{
children
=
new
ArrayList
(
)
;
}
children
.
add
(
child
)
;
}
RuntimeConfigurable
getChild
(
int
index
)
{
return
(
RuntimeConfigurable
)
children
.
get
(
index
)
;
}
public
Enumeration
getChildren
(
)
{
if
(
children
!=
null
)
{
return
Collections
.
enumeration
(
children
)
;
}
else
{
return
new
CollectionUtils
.
EmptyEnumeration
(
)
;
}
}
public
void
addText
(
String
data
)
{
if
(
data
.
length
(
)
==
0
)
{
return
;
}
if
(
characters
!=
null
)
{
characters
.
append
(
data
)
;
}
else
{
characters
=
new
StringBuffer
(
data
)
;
}
}
public
void
addText
(
char
[
]
buf
,
int
start
,
int
count
)
{
if
(
count
==
0
)
{
return
;
}
if
(
characters
==
null
)
{
characters
=
new
StringBuffer
(
count
)
;
}
characters
.
append
(
buf
,
start
,
count
)
;
}
public
StringBuffer
getText
(
)
{
if
(
characters
!=
null
)
{
return
characters
;
}
else
{
return
new
StringBuffer
(
0
)
;
}
}
public
String
getElementTag
(
)
{
return
elementTag
;
}
public
void
maybeConfigure
(
Project
p
)
throws
BuildException
{
maybeConfigure
(
p
,
true
)
;
}
public
void
maybeConfigure
(
Project
p
,
boolean
configureChildren
)
throws
BuildException
{
String
id
=
null
;
if
(
proxyConfigured
)
{
return
;
}
Object
target
=
(
wrappedObject
instanceof
TypeAdapter
)
?
(
(
TypeAdapter
)
wrappedObject
)
.
getProxy
(
)
:
wrappedObject
;
IntrospectionHelper
ih
=
IntrospectionHelper
.
getHelper
(
p
,
target
.
getClass
(
)
)
;
if
(
attributeNames
!=
null
)
{
for
(
int
i
=
0
;
i
<
attributeNames
.
size
(
)
;
i
++
)
{
String
name
=
(
String
)
attributeNames
.
get
(
i
)
;
String
value
=
(
String
)
attributeMap
.
get
(
name
)
;
value
=
p
.
replaceProperties
(
value
)
;
try
{
ih
.
setAttribute
(
p
,
target
,
name
.
toLowerCase
(
Locale
.
US
)
,
value
)
;
}
catch
(
BuildException
be
)
{
if
(
!
name
.
equals
(
"id"
)
)
{
throw
be
;
}
}
}
id
=
(
String
)
attributeMap
.
get
(
"id"
)
;
}
if
(
characters
!=
null
)
{
ProjectHelper
.
addText
(
p
,
wrappedObject
,
characters
.
substring
(
0
)
)
;
}
Enumeration
e
=
getChildren
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
RuntimeConfigurable
child
=
(
RuntimeConfigurable
)
e
.
nextElement
(
)
;
if
(
child
.
wrappedObject
instanceof
Task
)
{
Task
childTask
=
(
Task
)
child
.
wrappedObject
;
childTask
.
setRuntimeConfigurableWrapper
(
child
)
;
}
if
(
(
child
.
creator
!=
null
)
&&
configureChildren
)
{
child
.
maybeConfigure
(
p
)
;
child
.
creator
.
store
(
)
;
continue
;
}
String
tag
=
child
.
getElementTag
(
)
.
toLowerCase
(
Locale
.
US
)
;
if
(
configureChildren
&&
ih
.
supportsNestedElement
(
tag
)
)
{
child
.
maybeConfigure
(
p
)
;
ProjectHelper
.
storeChild
(
p
,
target
,
child
.
wrappedObject
,
tag
)
;
}
}
if
(
id
!=
null
)
{
p
.
addReference
(
id
,
wrappedObject
)
;
}
proxyConfigured
=
true
;
}
public
void
reconfigure
(
Project
p
)
{
proxyConfigured
=
false
;
maybeConfigure
(
p
)
;
}
public
void
applyPreSet
(
RuntimeConfigurable
r
)
{
if
(
r
.
attributeMap
!=
null
)
{
for
(
Iterator
i
=
r
.
attributeMap
.
keySet
(
)
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
String
name
=
(
String
)
i
.
next
(
)
;
if
(
attributeMap
==
null
||
attributeMap
.
get
(
name
)
==
null
)
{
setAttribute
(
name
,
(
String
)
r
.
attributeMap
.
get
(
name
)
)
;
}
}
}
if
(
r
.
polyType
!=
null
&&
polyType
==
null
)
{
polyType
=
r
.
polyType
;
}
if
(
r
.
children
!=
null
)
{
List
newChildren
=
new
ArrayList
(
)
;
newChildren
.
addAll
(
r
.
children
)
;
if
(
children
!=
null
)
{
newChildren
.
addAll
(
children
)
;
}
children
=
newChildren
;
}
if
(
r
.
characters
!=
null
)
{
if
(
characters
==
null
||
characters
.
toString
(
)
.
trim
(
)
.
length
(
)
==
0
)
{
characters
=
new
StringBuffer
(
r
.
characters
.
toString
(
)
)
;
}
}
}
}
