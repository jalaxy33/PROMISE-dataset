package
org
.
apache
.
tools
.
ant
.
taskdefs
.
cvslib
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
File
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
FileReader
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
PrintWriter
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
util
.
Vector
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
AbstractCvsTask
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
public
class
CvsTagDiff
extends
AbstractCvsTask
{
static
final
String
FILE_STRING
=
"File "
;
static
final
String
TO_STRING
=
" to "
;
static
final
String
FILE_IS_NEW
=
" is new;"
;
static
final
String
REVISION
=
"revision "
;
static
final
String
FILE_HAS_CHANGED
=
" changed from revision "
;
static
final
String
FILE_WAS_REMOVED
=
" is removed"
;
private
String
mypackage
;
private
String
mystartTag
;
private
String
myendTag
;
private
String
mystartDate
;
private
String
myendDate
;
private
File
mydestfile
;
private
FileUtils
myfileUtils
=
FileUtils
.
newFileUtils
(
)
;
public
void
setPackage
(
String
p
)
{
mypackage
=
p
;
}
public
void
setStartTag
(
String
s
)
{
mystartTag
=
s
;
}
public
void
setStartDate
(
String
s
)
{
mystartDate
=
s
;
}
public
void
setEndTag
(
String
s
)
{
myendTag
=
s
;
}
public
void
setEndDate
(
String
s
)
{
myendDate
=
s
;
}
public
void
setDestFile
(
File
f
)
{
mydestfile
=
f
;
}
public
void
execute
(
)
throws
BuildException
{
validate
(
)
;
addCommandArgument
(
"rdiff"
)
;
addCommandArgument
(
"-s"
)
;
if
(
mystartTag
!=
null
)
{
addCommandArgument
(
"-r"
)
;
addCommandArgument
(
mystartTag
)
;
}
else
{
addCommandArgument
(
"-D"
)
;
addCommandArgument
(
mystartDate
)
;
}
if
(
myendTag
!=
null
)
{
addCommandArgument
(
"-r"
)
;
addCommandArgument
(
myendTag
)
;
}
else
{
addCommandArgument
(
"-D"
)
;
addCommandArgument
(
myendDate
)
;
}
StringTokenizer
myTokenizer
=
new
StringTokenizer
(
mypackage
)
;
while
(
myTokenizer
.
hasMoreTokens
(
)
)
{
addCommandArgument
(
myTokenizer
.
nextToken
(
)
)
;
}
setCommand
(
""
)
;
File
tmpFile
=
null
;
try
{
tmpFile
=
myfileUtils
.
createTempFile
(
"cvstagdiff"
,
".log"
,
null
)
;
tmpFile
.
deleteOnExit
(
)
;
setOutput
(
tmpFile
)
;
super
.
execute
(
)
;
CvsTagEntry
[
]
entries
=
parseRDiff
(
tmpFile
)
;
writeTagDiff
(
entries
)
;
}
finally
{
if
(
tmpFile
!=
null
)
{
tmpFile
.
delete
(
)
;
}
}
}
private
CvsTagEntry
[
]
parseRDiff
(
File
tmpFile
)
throws
BuildException
{
BufferedReader
reader
=
null
;
try
{
reader
=
new
BufferedReader
(
new
FileReader
(
tmpFile
)
)
;
String
toBeRemoved
=
FILE_STRING
+
mypackage
+
"/"
;
int
headerLength
=
toBeRemoved
.
length
(
)
;
Vector
entries
=
new
Vector
(
)
;
String
line
=
reader
.
readLine
(
)
;
int
index
;
CvsTagEntry
entry
=
null
;
while
(
null
!=
line
)
{
if
(
line
.
length
(
)
>
headerLength
)
{
if
(
line
.
startsWith
(
toBeRemoved
)
)
{
line
=
line
.
substring
(
headerLength
)
;
}
else
{
line
=
line
.
substring
(
FILE_STRING
.
length
(
)
)
;
}
if
(
(
index
=
line
.
indexOf
(
FILE_IS_NEW
)
)
!=
-
1
)
{
String
filename
=
line
.
substring
(
0
,
index
)
;
String
rev
=
null
;
int
indexrev
=
-
1
;
if
(
(
indexrev
=
line
.
indexOf
(
REVISION
,
index
)
)
!=
-
1
)
{
rev
=
line
.
substring
(
indexrev
+
REVISION
.
length
(
)
)
;
}
entry
=
new
CvsTagEntry
(
filename
,
rev
)
;
entries
.
addElement
(
entry
)
;
log
(
entry
.
toString
(
)
,
Project
.
MSG_VERBOSE
)
;
}
else
if
(
(
index
=
line
.
indexOf
(
FILE_HAS_CHANGED
)
)
!=
-
1
)
{
String
filename
=
line
.
substring
(
0
,
index
)
;
int
revSeparator
=
line
.
indexOf
(
" to "
,
index
)
;
String
prevRevision
=
line
.
substring
(
index
+
FILE_HAS_CHANGED
.
length
(
)
,
revSeparator
)
;
String
revision
=
line
.
substring
(
revSeparator
+
TO_STRING
.
length
(
)
)
;
entry
=
new
CvsTagEntry
(
filename
,
revision
,
prevRevision
)
;
entries
.
addElement
(
entry
)
;
log
(
entry
.
toString
(
)
,
Project
.
MSG_VERBOSE
)
;
}
else
if
(
(
index
=
line
.
indexOf
(
FILE_WAS_REMOVED
)
)
!=
-
1
)
{
String
filename
=
line
.
substring
(
0
,
index
)
;
String
rev
=
null
;
int
indexrev
=
-
1
;
if
(
(
indexrev
=
line
.
indexOf
(
REVISION
,
index
)
)
!=
-
1
)
{
rev
=
line
.
substring
(
indexrev
+
REVISION
.
length
(
)
)
;
}
entry
=
new
CvsTagEntry
(
filename
,
null
,
rev
)
;
entries
.
addElement
(
entry
)
;
log
(
entry
.
toString
(
)
,
Project
.
MSG_VERBOSE
)
;
}
}
line
=
reader
.
readLine
(
)
;
}
CvsTagEntry
[
]
array
=
new
CvsTagEntry
[
entries
.
size
(
)
]
;
entries
.
copyInto
(
array
)
;
return
array
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
"Error in parsing"
,
e
)
;
}
finally
{
if
(
reader
!=
null
)
{
try
{
reader
.
close
(
)
;
}
catch
(
IOException
e
)
{
log
(
e
.
toString
(
)
,
Project
.
MSG_ERR
)
;
}
}
}
}
private
void
writeTagDiff
(
CvsTagEntry
[
]
entries
)
throws
BuildException
{
FileOutputStream
output
=
null
;
try
{
output
=
new
FileOutputStream
(
mydestfile
)
;
PrintWriter
writer
=
new
PrintWriter
(
new
OutputStreamWriter
(
output
,
"UTF-8"
)
)
;
writer
.
println
(
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
)
;
writer
.
print
(
"<tagdiff "
)
;
if
(
mystartTag
!=
null
)
{
writer
.
print
(
"startTag=\""
+
mystartTag
+
"\" "
)
;
}
else
{
writer
.
print
(
"startDate=\""
+
mystartDate
+
"\" "
)
;
}
if
(
myendTag
!=
null
)
{
writer
.
print
(
"endTag=\""
+
myendTag
+
"\" "
)
;
}
else
{
writer
.
print
(
"endDate=\""
+
myendDate
+
"\" "
)
;
}
writer
.
print
(
"cvsroot=\""
+
getCvsRoot
(
)
+
"\" "
)
;
writer
.
print
(
"package=\""
+
mypackage
+
"\" "
)
;
writer
.
println
(
">"
)
;
for
(
int
i
=
0
,
c
=
entries
.
length
;
i
<
c
;
i
++
)
{
writeTagEntry
(
writer
,
entries
[
i
]
)
;
}
writer
.
println
(
"</tagdiff>"
)
;
writer
.
flush
(
)
;
writer
.
close
(
)
;
}
catch
(
UnsupportedEncodingException
uee
)
{
log
(
uee
.
toString
(
)
,
Project
.
MSG_ERR
)
;
}
catch
(
IOException
ioe
)
{
throw
new
BuildException
(
ioe
.
toString
(
)
,
ioe
)
;
}
finally
{
if
(
null
!=
output
)
{
try
{
output
.
close
(
)
;
}
catch
(
IOException
ioe
)
{
log
(
ioe
.
toString
(
)
,
Project
.
MSG_ERR
)
;
}
}
}
}
private
void
writeTagEntry
(
PrintWriter
writer
,
CvsTagEntry
entry
)
{
writer
.
println
(
"\t<entry>"
)
;
writer
.
println
(
"\t\t<file>"
)
;
writer
.
println
(
"\t\t\t<name>"
+
entry
.
getFile
(
)
+
"</name>"
)
;
if
(
entry
.
getRevision
(
)
!=
null
)
{
writer
.
println
(
"\t\t\t<revision>"
+
entry
.
getRevision
(
)
+
"</revision>"
)
;
}
if
(
entry
.
getPreviousRevision
(
)
!=
null
)
{
writer
.
println
(
"\t\t\t<prevrevision>"
+
entry
.
getPreviousRevision
(
)
+
"</prevrevision>"
)
;
}
writer
.
println
(
"\t\t</file>"
)
;
writer
.
println
(
"\t</entry>"
)
;
}
private
void
validate
(
)
throws
BuildException
{
if
(
null
==
mypackage
)
{
throw
new
BuildException
(
"Package/module must be set."
)
;
}
if
(
null
==
mydestfile
)
{
throw
new
BuildException
(
"Destfile must be set."
)
;
}
if
(
null
==
mystartTag
&&
null
==
mystartDate
)
{
throw
new
BuildException
(
"Start tag or start date must be set."
)
;
}
if
(
null
!=
mystartTag
&&
null
!=
mystartDate
)
{
throw
new
BuildException
(
"Only one of start tag and start date "
+
"must be set."
)
;
}
if
(
null
==
myendTag
&&
null
==
myendDate
)
{
throw
new
BuildException
(
"End tag or end date must be set."
)
;
}
if
(
null
!=
myendTag
&&
null
!=
myendDate
)
{
throw
new
BuildException
(
"Only one of end tag and end date must "
+
"be set."
)
;
}
}
}
