package
org
.
apache
.
tools
.
ant
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
tools
.
ant
.
util
.
CollectionUtils
;
public
class
Target
implements
TaskContainer
{
private
String
name
;
private
String
ifCondition
=
""
;
private
String
unlessCondition
=
""
;
private
List
dependencies
=
null
;
private
List
children
=
new
ArrayList
(
)
;
private
Project
project
;
private
String
description
=
null
;
public
Target
(
)
{
}
public
void
setProject
(
Project
project
)
{
this
.
project
=
project
;
}
public
Project
getProject
(
)
{
return
project
;
}
public
void
setDepends
(
String
depS
)
{
if
(
depS
.
length
(
)
>
0
)
{
StringTokenizer
tok
=
new
StringTokenizer
(
depS
,
","
,
true
)
;
while
(
tok
.
hasMoreTokens
(
)
)
{
String
token
=
tok
.
nextToken
(
)
.
trim
(
)
;
if
(
token
.
equals
(
""
)
||
token
.
equals
(
","
)
)
{
throw
new
BuildException
(
"Syntax Error: Depend "
+
"attribute for target \""
+
getName
(
)
+
"\" has an empty string for dependency."
)
;
}
addDependency
(
token
)
;
if
(
tok
.
hasMoreTokens
(
)
)
{
token
=
tok
.
nextToken
(
)
;
if
(
!
tok
.
hasMoreTokens
(
)
||
!
token
.
equals
(
","
)
)
{
throw
new
BuildException
(
"Syntax Error: Depend "
+
"attribute for target \""
+
getName
(
)
+
"\" ends with a , character"
)
;
}
}
}
}
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
public
String
getName
(
)
{
return
name
;
}
public
void
addTask
(
Task
task
)
{
children
.
add
(
task
)
;
}
public
void
addDataType
(
RuntimeConfigurable
r
)
{
children
.
add
(
r
)
;
}
public
Task
[
]
getTasks
(
)
{
List
tasks
=
new
ArrayList
(
children
.
size
(
)
)
;
Iterator
it
=
children
.
iterator
(
)
;
while
(
it
.
hasNext
(
)
)
{
Object
o
=
it
.
next
(
)
;
if
(
o
instanceof
Task
)
{
tasks
.
add
(
o
)
;
}
}
return
(
Task
[
]
)
tasks
.
toArray
(
new
Task
[
tasks
.
size
(
)
]
)
;
}
public
void
addDependency
(
String
dependency
)
{
if
(
dependencies
==
null
)
{
dependencies
=
new
ArrayList
(
2
)
;
}
dependencies
.
add
(
dependency
)
;
}
public
Enumeration
getDependencies
(
)
{
if
(
dependencies
!=
null
)
{
return
Collections
.
enumeration
(
dependencies
)
;
}
else
{
return
new
CollectionUtils
.
EmptyEnumeration
(
)
;
}
}
public
boolean
dependsOn
(
String
other
)
{
if
(
getProject
(
)
!=
null
)
{
List
l
=
getProject
(
)
.
topoSort
(
getName
(
)
,
getProject
(
)
.
getTargets
(
)
)
;
int
myIdx
=
l
.
indexOf
(
this
)
;
int
otherIdx
=
l
.
indexOf
(
getProject
(
)
.
getTargets
(
)
.
get
(
other
)
)
;
return
myIdx
>=
otherIdx
;
}
return
false
;
}
public
void
setIf
(
String
property
)
{
this
.
ifCondition
=
(
property
==
null
)
?
""
:
property
;
}
public
void
setUnless
(
String
property
)
{
this
.
unlessCondition
=
(
property
==
null
)
?
""
:
property
;
}
public
void
setDescription
(
String
description
)
{
this
.
description
=
description
;
}
public
String
getDescription
(
)
{
return
description
;
}
public
String
toString
(
)
{
return
name
;
}
public
void
execute
(
)
throws
BuildException
{
if
(
testIfCondition
(
)
&&
testUnlessCondition
(
)
)
{
for
(
int
taskPosition
=
0
;
taskPosition
<
children
.
size
(
)
;
++
taskPosition
)
{
Object
o
=
children
.
get
(
taskPosition
)
;
if
(
o
instanceof
Task
)
{
Task
task
=
(
Task
)
o
;
task
.
perform
(
)
;
}
else
{
RuntimeConfigurable
r
=
(
RuntimeConfigurable
)
o
;
r
.
maybeConfigure
(
project
)
;
}
}
}
else
if
(
!
testIfCondition
(
)
)
{
project
.
log
(
this
,
"Skipped because property '"
+
project
.
replaceProperties
(
this
.
ifCondition
)
+
"' not set."
,
Project
.
MSG_VERBOSE
)
;
}
else
{
project
.
log
(
this
,
"Skipped because property '"
+
project
.
replaceProperties
(
this
.
unlessCondition
)
+
"' set."
,
Project
.
MSG_VERBOSE
)
;
}
}
public
final
void
performTasks
(
)
{
try
{
project
.
fireTargetStarted
(
this
)
;
execute
(
)
;
project
.
fireTargetFinished
(
this
,
null
)
;
}
catch
(
RuntimeException
exc
)
{
project
.
fireTargetFinished
(
this
,
exc
)
;
throw
exc
;
}
}
void
replaceChild
(
Task
el
,
RuntimeConfigurable
o
)
{
int
index
;
while
(
(
index
=
children
.
indexOf
(
el
)
)
>=
0
)
{
children
.
set
(
index
,
o
)
;
}
}
void
replaceChild
(
Task
el
,
Task
o
)
{
int
index
;
while
(
(
index
=
children
.
indexOf
(
el
)
)
>=
0
)
{
children
.
set
(
index
,
o
)
;
}
}
private
boolean
testIfCondition
(
)
{
if
(
""
.
equals
(
ifCondition
)
)
{
return
true
;
}
String
test
=
project
.
replaceProperties
(
ifCondition
)
;
return
project
.
getProperty
(
test
)
!=
null
;
}
private
boolean
testUnlessCondition
(
)
{
if
(
""
.
equals
(
unlessCondition
)
)
{
return
true
;
}
String
test
=
project
.
replaceProperties
(
unlessCondition
)
;
return
project
.
getProperty
(
test
)
==
null
;
}
}
