package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
BufferedInputStream
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
util
.
zip
.
GZIPInputStream
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
apache
.
tools
.
bzip2
.
CBZip2InputStream
;
import
org
.
apache
.
tools
.
tar
.
TarEntry
;
import
org
.
apache
.
tools
.
tar
.
TarInputStream
;
public
class
Untar
extends
Expand
{
private
UntarCompressionMethod
compression
=
new
UntarCompressionMethod
(
)
;
public
void
setCompression
(
UntarCompressionMethod
method
)
{
compression
=
method
;
}
public
void
setEncoding
(
String
encoding
)
{
throw
new
BuildException
(
"The "
+
getTaskName
(
)
+
" task doesn't support the encoding"
+
" attribute"
,
getLocation
(
)
)
;
}
protected
void
expandFile
(
FileUtils
fileUtils
,
File
srcF
,
File
dir
)
{
TarInputStream
tis
=
null
;
try
{
log
(
"Expanding: "
+
srcF
+
" into "
+
dir
,
Project
.
MSG_INFO
)
;
tis
=
new
TarInputStream
(
compression
.
decompress
(
srcF
,
new
BufferedInputStream
(
new
FileInputStream
(
srcF
)
)
)
)
;
TarEntry
te
=
null
;
while
(
(
te
=
tis
.
getNextEntry
(
)
)
!=
null
)
{
extractFile
(
fileUtils
,
srcF
,
dir
,
tis
,
te
.
getName
(
)
,
te
.
getModTime
(
)
,
te
.
isDirectory
(
)
)
;
}
log
(
"expand complete"
,
Project
.
MSG_VERBOSE
)
;
}
catch
(
IOException
ioe
)
{
throw
new
BuildException
(
"Error while expanding "
+
srcF
.
getPath
(
)
,
ioe
,
getLocation
(
)
)
;
}
finally
{
if
(
tis
!=
null
)
{
try
{
tis
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
}
}
}
public
static
final
class
UntarCompressionMethod
extends
EnumeratedAttribute
{
private
static
final
String
NONE
=
"none"
;
private
static
final
String
GZIP
=
"gzip"
;
private
static
final
String
BZIP2
=
"bzip2"
;
public
UntarCompressionMethod
(
)
{
super
(
)
;
setValue
(
NONE
)
;
}
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
NONE
,
GZIP
,
BZIP2
}
;
}
private
InputStream
decompress
(
final
File
file
,
final
InputStream
istream
)
throws
IOException
,
BuildException
{
final
String
value
=
getValue
(
)
;
if
(
GZIP
.
equals
(
value
)
)
{
return
new
GZIPInputStream
(
istream
)
;
}
else
{
if
(
BZIP2
.
equals
(
value
)
)
{
final
char
[
]
magic
=
new
char
[
]
{
'B'
,
'Z'
}
;
for
(
int
i
=
0
;
i
<
magic
.
length
;
i
++
)
{
if
(
istream
.
read
(
)
!=
magic
[
i
]
)
{
throw
new
BuildException
(
"Invalid bz2 file."
+
file
.
toString
(
)
)
;
}
}
return
new
CBZip2InputStream
(
istream
)
;
}
}
return
istream
;
}
}
}
