package
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
modifiedselector
;
import
java
.
util
.
Comparator
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Iterator
;
import
java
.
io
.
File
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
IntrospectionHelper
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
import
org
.
apache
.
tools
.
ant
.
types
.
Parameter
;
import
org
.
apache
.
tools
.
ant
.
types
.
selectors
.
BaseExtendSelector
;
public
class
ModifiedSelector
extends
BaseExtendSelector
{
private
Cache
cache
=
null
;
private
Algorithm
algorithm
=
null
;
private
Comparator
comparator
=
null
;
private
boolean
update
=
true
;
private
boolean
selectDirectories
=
true
;
private
boolean
isConfigured
=
false
;
private
AlgorithmName
algoName
=
null
;
private
CacheName
cacheName
=
null
;
private
ComparatorName
compName
=
null
;
private
Vector
configParameter
=
new
Vector
(
)
;
private
Vector
specialParameter
=
new
Vector
(
)
;
public
ModifiedSelector
(
)
{
}
public
void
verifySettings
(
)
{
configure
(
)
;
if
(
cache
==
null
)
{
setError
(
"Cache must be set."
)
;
}
else
if
(
algorithm
==
null
)
{
setError
(
"Algorithm must be set."
)
;
}
else
if
(
!
cache
.
isValid
(
)
)
{
setError
(
"Cache must be proper configured."
)
;
}
else
if
(
!
algorithm
.
isValid
(
)
)
{
setError
(
"Algorithm must be proper configured."
)
;
}
}
public
void
configure
(
)
{
if
(
isConfigured
)
{
return
;
}
isConfigured
=
true
;
org
.
apache
.
tools
.
ant
.
Project
project
=
getProject
(
)
;
String
filename
=
"cache.properties"
;
File
cachefile
=
null
;
if
(
project
!=
null
)
{
cachefile
=
new
File
(
project
.
getBaseDir
(
)
,
filename
)
;
}
else
{
cachefile
=
new
File
(
filename
)
;
}
cache
=
new
PropertiesfileCache
(
cachefile
)
;
algorithm
=
new
DigestAlgorithm
(
)
;
comparator
=
new
EqualComparator
(
)
;
update
=
true
;
selectDirectories
=
true
;
for
(
Iterator
itConfig
=
configParameter
.
iterator
(
)
;
itConfig
.
hasNext
(
)
;
)
{
Parameter
par
=
(
Parameter
)
itConfig
.
next
(
)
;
if
(
par
.
getName
(
)
.
indexOf
(
"."
)
>
0
)
{
specialParameter
.
add
(
par
)
;
}
else
{
useParameter
(
par
)
;
}
}
configParameter
=
new
Vector
(
)
;
String
className
=
null
;
String
pkg
=
"org.apache.tools.ant.types.selectors.cacheselector"
;
if
(
algorithm
==
null
)
{
if
(
"hashvalue"
.
equals
(
algoName
.
getValue
(
)
)
)
{
className
=
pkg
+
".HashvalueAlgorithm"
;
}
else
if
(
"digest"
.
equals
(
algoName
.
getValue
(
)
)
)
{
className
=
pkg
+
".DigestAlgorithm"
;
}
if
(
className
!=
null
)
{
try
{
algorithm
=
(
Algorithm
)
Class
.
forName
(
className
)
.
newInstance
(
)
;
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
}
}
if
(
cache
==
null
)
{
if
(
"propertyfile"
.
equals
(
cacheName
.
getValue
(
)
)
)
{
className
=
pkg
+
".PropertiesfileCache"
;
}
if
(
className
!=
null
)
{
try
{
cache
=
(
Cache
)
Class
.
forName
(
className
)
.
newInstance
(
)
;
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
}
}
if
(
comparator
==
null
)
{
if
(
"equal"
.
equals
(
compName
.
getValue
(
)
)
)
{
className
=
pkg
+
".EqualComparator"
;
}
else
if
(
"role"
.
equals
(
compName
.
getValue
(
)
)
)
{
className
=
"java.text.RuleBasedCollator"
;
}
if
(
className
!=
null
)
{
try
{
comparator
=
(
Comparator
)
Class
.
forName
(
className
)
.
newInstance
(
)
;
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
}
}
for
(
Iterator
itSpecial
=
specialParameter
.
iterator
(
)
;
itSpecial
.
hasNext
(
)
;
)
{
Parameter
par
=
(
Parameter
)
itSpecial
.
next
(
)
;
useParameter
(
par
)
;
}
specialParameter
=
new
Vector
(
)
;
}
public
boolean
isSelected
(
File
basedir
,
String
filename
,
File
file
)
{
validate
(
)
;
File
f
=
new
File
(
basedir
,
filename
)
;
if
(
f
.
isDirectory
(
)
)
{
return
selectDirectories
;
}
String
cachedValue
=
String
.
valueOf
(
cache
.
get
(
f
.
getAbsolutePath
(
)
)
)
;
String
newValue
=
algorithm
.
getValue
(
f
)
;
boolean
rv
=
(
comparator
.
compare
(
cachedValue
,
newValue
)
!=
0
)
;
if
(
update
&&
!
cachedValue
.
equals
(
newValue
)
)
{
cache
.
put
(
f
.
getAbsolutePath
(
)
,
newValue
)
;
cache
.
save
(
)
;
}
return
rv
;
}
public
void
setUpdate
(
boolean
update
)
{
this
.
update
=
update
;
}
public
void
setSeldirs
(
boolean
seldirs
)
{
selectDirectories
=
seldirs
;
}
public
void
addParam
(
String
key
,
Object
value
)
{
Parameter
par
=
new
Parameter
(
)
;
par
.
setName
(
key
)
;
par
.
setValue
(
String
.
valueOf
(
value
)
)
;
configParameter
.
add
(
par
)
;
}
public
void
addParam
(
Parameter
parameter
)
{
configParameter
.
add
(
parameter
)
;
}
public
void
setParameters
(
Parameter
[
]
parameters
)
{
if
(
parameters
!=
null
)
{
for
(
int
i
=
0
;
i
<
parameters
.
length
;
i
++
)
{
configParameter
.
add
(
parameters
[
i
]
)
;
}
}
}
public
void
useParameter
(
Parameter
parameter
)
{
String
key
=
parameter
.
getName
(
)
;
String
value
=
parameter
.
getValue
(
)
;
if
(
"cache"
.
equals
(
key
)
)
{
CacheName
cn
=
new
CacheName
(
)
;
cn
.
setValue
(
value
)
;
setCache
(
cn
)
;
}
else
if
(
"algorithm"
.
equals
(
key
)
)
{
AlgorithmName
an
=
new
AlgorithmName
(
)
;
an
.
setValue
(
value
)
;
setAlgorithm
(
an
)
;
}
else
if
(
"comparator"
.
equals
(
key
)
)
{
ComparatorName
cn
=
new
ComparatorName
(
)
;
cn
.
setValue
(
value
)
;
setComparator
(
cn
)
;
}
else
if
(
"update"
.
equals
(
key
)
)
{
boolean
updateValue
=
(
"true"
.
equalsIgnoreCase
(
value
)
)
?
true
:
false
;
setUpdate
(
updateValue
)
;
}
else
if
(
"seldirs"
.
equals
(
key
)
)
{
boolean
sdValue
=
(
"true"
.
equalsIgnoreCase
(
value
)
)
?
true
:
false
;
setSeldirs
(
sdValue
)
;
}
else
if
(
key
.
startsWith
(
"cache."
)
)
{
String
name
=
key
.
substring
(
6
)
;
tryToSetAParameter
(
cache
,
name
,
value
)
;
}
else
if
(
key
.
startsWith
(
"algorithm."
)
)
{
String
name
=
key
.
substring
(
10
)
;
tryToSetAParameter
(
algorithm
,
name
,
value
)
;
}
else
if
(
key
.
startsWith
(
"comparator."
)
)
{
String
name
=
key
.
substring
(
11
)
;
tryToSetAParameter
(
comparator
,
name
,
value
)
;
}
else
{
setError
(
"Invalid parameter "
+
key
)
;
}
}
protected
void
tryToSetAParameter
(
Object
obj
,
String
name
,
String
value
)
{
Project
prj
=
(
getProject
(
)
!=
null
)
?
getProject
(
)
:
new
Project
(
)
;
IntrospectionHelper
iHelper
=
IntrospectionHelper
.
getHelper
(
prj
,
obj
.
getClass
(
)
)
;
try
{
iHelper
.
setAttribute
(
prj
,
obj
,
name
,
value
)
;
}
catch
(
org
.
apache
.
tools
.
ant
.
BuildException
e
)
{
}
}
public
String
toString
(
)
{
StringBuffer
buf
=
new
StringBuffer
(
"{modifiedselector"
)
;
buf
.
append
(
" update="
)
.
append
(
update
)
;
buf
.
append
(
" seldirs="
)
.
append
(
selectDirectories
)
;
buf
.
append
(
" cache="
)
.
append
(
cache
)
;
buf
.
append
(
" algorithm="
)
.
append
(
algorithm
)
;
buf
.
append
(
" comparator="
)
.
append
(
comparator
)
;
buf
.
append
(
"}"
)
;
return
buf
.
toString
(
)
;
}
public
Cache
getCache
(
)
{
return
cache
;
}
public
void
setCache
(
CacheName
name
)
{
cacheName
=
name
;
}
public
static
class
CacheName
extends
EnumeratedAttribute
{
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
"propertyfile"
}
;
}
}
public
Algorithm
getAlgorithm
(
)
{
return
algorithm
;
}
public
void
setAlgorithm
(
AlgorithmName
name
)
{
algoName
=
name
;
}
public
static
class
AlgorithmName
extends
EnumeratedAttribute
{
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
"hashvalue"
,
"digest"
}
;
}
}
public
Comparator
getComparator
(
)
{
return
comparator
;
}
public
void
setComparator
(
ComparatorName
name
)
{
compName
=
name
;
}
public
static
class
ComparatorName
extends
EnumeratedAttribute
{
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
"equal"
,
"rule"
}
;
}
}
}
