package
org
.
apache
.
tools
.
ant
.
taskdefs
.
compilers
;
import
java
.
lang
.
reflect
.
Method
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
types
.
Commandline
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
public
class
Kjc
extends
DefaultCompilerAdapter
{
public
boolean
execute
(
)
throws
BuildException
{
attributes
.
log
(
"Using kjc compiler"
,
Project
.
MSG_VERBOSE
)
;
Commandline
cmd
=
setupKjcCommand
(
)
;
try
{
Class
c
=
Class
.
forName
(
"at.dms.kjc.Main"
)
;
Method
compile
=
c
.
getMethod
(
"compile"
,
new
Class
[
]
{
String
[
]
.
class
}
)
;
Boolean
ok
=
(
Boolean
)
compile
.
invoke
(
null
,
new
Object
[
]
{
cmd
.
getArguments
(
)
}
)
;
return
ok
.
booleanValue
(
)
;
}
catch
(
ClassNotFoundException
ex
)
{
throw
new
BuildException
(
"Cannot use kjc compiler, as it is not "
+
"available. A common solution is to "
+
"set the environment variable CLASSPATH "
+
"to your kjc archive (kjc.jar)."
,
location
)
;
}
catch
(
Exception
ex
)
{
if
(
ex
instanceof
BuildException
)
{
throw
(
BuildException
)
ex
;
}
else
{
throw
new
BuildException
(
"Error starting kjc compiler: "
,
ex
,
location
)
;
}
}
}
protected
Commandline
setupKjcCommand
(
)
{
Commandline
cmd
=
new
Commandline
(
)
;
Path
classpath
=
getCompileClasspath
(
)
;
if
(
deprecation
==
true
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-deprecation"
)
;
}
if
(
destDir
!=
null
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-d"
)
;
cmd
.
createArgument
(
)
.
setFile
(
destDir
)
;
}
cmd
.
createArgument
(
)
.
setValue
(
"-classpath"
)
;
Path
cp
=
new
Path
(
project
)
;
if
(
bootclasspath
!=
null
)
{
cp
.
append
(
bootclasspath
)
;
}
if
(
extdirs
!=
null
)
{
cp
.
addExtdirs
(
extdirs
)
;
}
cp
.
append
(
classpath
)
;
if
(
compileSourcepath
!=
null
)
{
cp
.
append
(
compileSourcepath
)
;
}
else
{
cp
.
append
(
src
)
;
}
cmd
.
createArgument
(
)
.
setPath
(
cp
)
;
if
(
encoding
!=
null
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-encoding"
)
;
cmd
.
createArgument
(
)
.
setValue
(
encoding
)
;
}
if
(
debug
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-g"
)
;
}
if
(
optimize
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-O2"
)
;
}
if
(
verbose
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-verbose"
)
;
}
addCurrentCompilerArgs
(
cmd
)
;
logAndAddFilesToCompile
(
cmd
)
;
return
cmd
;
}
}
