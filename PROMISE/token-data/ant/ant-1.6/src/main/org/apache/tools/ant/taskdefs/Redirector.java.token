package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
FileNotFoundException
;
import
java
.
io
.
IOException
;
import
java
.
io
.
StringReader
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
PrintStream
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
util
.
LazyFileOutputStream
;
import
org
.
apache
.
tools
.
ant
.
util
.
StringUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
TeeOutputStream
;
public
class
Redirector
{
private
File
out
;
private
File
error
;
private
File
input
;
private
boolean
logError
=
false
;
private
ByteArrayOutputStream
baos
=
null
;
private
ByteArrayOutputStream
errorBaos
=
null
;
private
String
outputProperty
;
private
String
errorProperty
;
private
String
inputString
;
private
boolean
append
=
false
;
private
Task
managingTask
;
private
OutputStream
outputStream
=
null
;
private
OutputStream
errorStream
=
null
;
private
InputStream
inputStream
=
null
;
private
PrintStream
outPrintStream
=
null
;
private
PrintStream
errorPrintStream
=
null
;
public
Redirector
(
Task
managingTask
)
{
this
.
managingTask
=
managingTask
;
}
public
void
setInput
(
File
input
)
{
this
.
input
=
input
;
}
public
void
setInputString
(
String
inputString
)
{
this
.
inputString
=
inputString
;
}
public
void
setOutput
(
File
out
)
{
this
.
out
=
out
;
}
public
void
setLogError
(
boolean
logError
)
{
this
.
logError
=
logError
;
}
public
void
setError
(
File
error
)
{
this
.
error
=
error
;
}
public
void
setOutputProperty
(
String
outputProperty
)
{
this
.
outputProperty
=
outputProperty
;
}
public
void
setAppend
(
boolean
append
)
{
this
.
append
=
append
;
}
public
void
setErrorProperty
(
String
errorProperty
)
{
this
.
errorProperty
=
errorProperty
;
}
private
void
setPropertyFromBAOS
(
ByteArrayOutputStream
baos
,
String
propertyName
)
throws
IOException
{
BufferedReader
in
=
new
BufferedReader
(
new
StringReader
(
Execute
.
toString
(
baos
)
)
)
;
String
line
=
null
;
StringBuffer
val
=
new
StringBuffer
(
)
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
if
(
val
.
length
(
)
!=
0
)
{
val
.
append
(
StringUtils
.
LINE_SEP
)
;
}
val
.
append
(
line
)
;
}
managingTask
.
getProject
(
)
.
setNewProperty
(
propertyName
,
val
.
toString
(
)
)
;
}
public
void
createStreams
(
)
{
if
(
out
==
null
&&
outputProperty
==
null
)
{
outputStream
=
new
LogOutputStream
(
managingTask
,
Project
.
MSG_INFO
)
;
errorStream
=
new
LogOutputStream
(
managingTask
,
Project
.
MSG_WARN
)
;
}
else
{
if
(
out
!=
null
)
{
outputStream
=
new
LazyFileOutputStream
(
out
,
append
)
;
managingTask
.
log
(
"Output redirected to "
+
out
,
Project
.
MSG_VERBOSE
)
;
}
if
(
outputProperty
!=
null
)
{
baos
=
new
ByteArrayOutputStream
(
)
;
managingTask
.
log
(
"Output redirected to property: "
+
outputProperty
,
Project
.
MSG_VERBOSE
)
;
if
(
out
==
null
)
{
outputStream
=
baos
;
}
else
{
outputStream
=
new
TeeOutputStream
(
outputStream
,
baos
)
;
}
}
else
{
baos
=
null
;
}
errorStream
=
outputStream
;
}
if
(
logError
)
{
errorStream
=
new
LogOutputStream
(
managingTask
,
Project
.
MSG_WARN
)
;
}
if
(
error
!=
null
)
{
errorStream
=
new
LazyFileOutputStream
(
error
,
append
)
;
managingTask
.
log
(
"Error redirected to "
+
error
,
Project
.
MSG_VERBOSE
)
;
}
if
(
errorProperty
!=
null
)
{
errorBaos
=
new
ByteArrayOutputStream
(
)
;
managingTask
.
log
(
"Error redirected to property: "
+
errorProperty
,
Project
.
MSG_VERBOSE
)
;
if
(
error
==
null
)
{
errorStream
=
errorBaos
;
}
else
{
errorStream
=
new
TeeOutputStream
(
errorStream
,
errorBaos
)
;
}
}
else
{
errorBaos
=
null
;
}
if
(
input
!=
null
&&
inputString
!=
null
)
{
throw
new
BuildException
(
"The \"input\" and \"inputstring\" "
+
"attributes cannot both be specified"
)
;
}
if
(
input
!=
null
)
{
try
{
inputStream
=
new
FileInputStream
(
input
)
;
}
catch
(
FileNotFoundException
fne
)
{
throw
new
BuildException
(
"Cannot read from "
+
input
,
fne
)
;
}
}
else
if
(
inputString
!=
null
)
{
inputStream
=
new
ByteArrayInputStream
(
inputString
.
getBytes
(
)
)
;
}
}
public
ExecuteStreamHandler
createHandler
(
)
throws
BuildException
{
createStreams
(
)
;
return
new
PumpStreamHandler
(
outputStream
,
errorStream
,
inputStream
)
;
}
protected
void
handleOutput
(
String
output
)
{
if
(
outPrintStream
==
null
)
{
outPrintStream
=
new
PrintStream
(
outputStream
)
;
}
outPrintStream
.
print
(
output
)
;
}
protected
int
handleInput
(
byte
[
]
buffer
,
int
offset
,
int
length
)
throws
IOException
{
if
(
inputStream
==
null
)
{
return
managingTask
.
getProject
(
)
.
defaultInput
(
buffer
,
offset
,
length
)
;
}
else
{
return
inputStream
.
read
(
buffer
,
offset
,
length
)
;
}
}
protected
void
handleFlush
(
String
output
)
{
if
(
outPrintStream
==
null
)
{
outPrintStream
=
new
PrintStream
(
outputStream
)
;
}
outPrintStream
.
print
(
output
)
;
outPrintStream
.
flush
(
)
;
}
protected
void
handleErrorOutput
(
String
output
)
{
if
(
errorPrintStream
==
null
)
{
errorPrintStream
=
new
PrintStream
(
errorStream
)
;
}
errorPrintStream
.
print
(
output
)
;
}
protected
void
handleErrorFlush
(
String
output
)
{
if
(
errorPrintStream
==
null
)
{
errorPrintStream
=
new
PrintStream
(
errorStream
)
;
}
errorPrintStream
.
print
(
output
)
;
}
public
OutputStream
getOutputStream
(
)
{
return
outputStream
;
}
public
OutputStream
getErrorStream
(
)
{
return
errorStream
;
}
public
InputStream
getInputStream
(
)
{
return
inputStream
;
}
public
void
complete
(
)
throws
IOException
{
System
.
out
.
flush
(
)
;
System
.
err
.
flush
(
)
;
if
(
inputStream
!=
null
)
{
inputStream
.
close
(
)
;
}
if
(
outputStream
instanceof
LazyFileOutputStream
)
{
(
(
LazyFileOutputStream
)
outputStream
)
.
open
(
)
;
}
outputStream
.
close
(
)
;
if
(
errorStream
!=
outputStream
)
{
if
(
errorStream
instanceof
LazyFileOutputStream
)
{
(
(
LazyFileOutputStream
)
errorStream
)
.
open
(
)
;
}
errorStream
.
close
(
)
;
}
if
(
baos
!=
null
)
{
setPropertyFromBAOS
(
baos
,
outputProperty
)
;
}
if
(
errorBaos
!=
null
)
{
setPropertyFromBAOS
(
errorBaos
,
errorProperty
)
;
}
}
}
