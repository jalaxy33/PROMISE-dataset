package
org
.
apache
.
tools
.
ant
.
loader
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
Reader
;
import
org
.
apache
.
tools
.
ant
.
AntClassLoader
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
java
.
util
.
jar
.
Manifest
;
import
java
.
util
.
jar
.
JarFile
;
import
java
.
util
.
zip
.
ZipFile
;
import
java
.
util
.
jar
.
Attributes
;
import
java
.
util
.
jar
.
Attributes
.
Name
;
import
java
.
net
.
URL
;
import
java
.
net
.
MalformedURLException
;
import
java
.
util
.
zip
.
ZipEntry
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
public
class
AntClassLoader2
extends
AntClassLoader
{
private
FileUtils
fileUtils
;
public
AntClassLoader2
(
)
{
fileUtils
=
FileUtils
.
newFileUtils
(
)
;
}
protected
Class
defineClassFromData
(
File
container
,
byte
[
]
classData
,
String
className
)
throws
IOException
{
definePackage
(
container
,
className
)
;
return
defineClass
(
className
,
classData
,
0
,
classData
.
length
,
Project
.
class
.
getProtectionDomain
(
)
)
;
}
private
Manifest
getJarManifest
(
File
container
)
throws
IOException
{
if
(
container
.
isDirectory
(
)
)
{
return
null
;
}
JarFile
jarFile
=
null
;
try
{
jarFile
=
new
JarFile
(
container
)
;
return
jarFile
.
getManifest
(
)
;
}
finally
{
if
(
jarFile
!=
null
)
{
jarFile
.
close
(
)
;
}
}
}
protected
void
definePackage
(
File
container
,
String
className
)
throws
IOException
{
int
classIndex
=
className
.
lastIndexOf
(
'.'
)
;
if
(
classIndex
==
-
1
)
{
return
;
}
String
packageName
=
className
.
substring
(
0
,
classIndex
)
;
if
(
getPackage
(
packageName
)
!=
null
)
{
return
;
}
Manifest
manifest
=
getJarManifest
(
container
)
;
if
(
manifest
==
null
)
{
definePackage
(
packageName
,
null
,
null
,
null
,
null
,
null
,
null
,
null
)
;
}
else
{
definePackage
(
container
,
packageName
,
manifest
)
;
}
}
protected
void
definePackage
(
File
container
,
String
packageName
,
Manifest
manifest
)
{
String
sectionName
=
packageName
.
replace
(
'.'
,
'/'
)
+
"/"
;
String
specificationTitle
=
null
;
String
specificationVendor
=
null
;
String
specificationVersion
=
null
;
String
implementationTitle
=
null
;
String
implementationVendor
=
null
;
String
implementationVersion
=
null
;
String
sealedString
=
null
;
URL
sealBase
=
null
;
Attributes
sectionAttributes
=
manifest
.
getAttributes
(
sectionName
)
;
if
(
sectionAttributes
!=
null
)
{
specificationTitle
=
sectionAttributes
.
getValue
(
Name
.
SPECIFICATION_TITLE
)
;
specificationVendor
=
sectionAttributes
.
getValue
(
Name
.
SPECIFICATION_VENDOR
)
;
specificationVersion
=
sectionAttributes
.
getValue
(
Name
.
SPECIFICATION_VERSION
)
;
implementationTitle
=
sectionAttributes
.
getValue
(
Name
.
IMPLEMENTATION_TITLE
)
;
implementationVendor
=
sectionAttributes
.
getValue
(
Name
.
IMPLEMENTATION_VENDOR
)
;
implementationVersion
=
sectionAttributes
.
getValue
(
Name
.
IMPLEMENTATION_VERSION
)
;
sealedString
=
sectionAttributes
.
getValue
(
Name
.
SEALED
)
;
}
Attributes
mainAttributes
=
manifest
.
getMainAttributes
(
)
;
if
(
mainAttributes
!=
null
)
{
if
(
specificationTitle
==
null
)
{
specificationTitle
=
mainAttributes
.
getValue
(
Name
.
SPECIFICATION_TITLE
)
;
}
if
(
specificationVendor
==
null
)
{
specificationVendor
=
mainAttributes
.
getValue
(
Name
.
SPECIFICATION_VENDOR
)
;
}
if
(
specificationVersion
==
null
)
{
specificationVersion
=
mainAttributes
.
getValue
(
Name
.
SPECIFICATION_VERSION
)
;
}
if
(
implementationTitle
==
null
)
{
implementationTitle
=
mainAttributes
.
getValue
(
Name
.
IMPLEMENTATION_TITLE
)
;
}
if
(
implementationVendor
==
null
)
{
implementationVendor
=
mainAttributes
.
getValue
(
Name
.
IMPLEMENTATION_VENDOR
)
;
}
if
(
implementationVersion
==
null
)
{
implementationVersion
=
mainAttributes
.
getValue
(
Name
.
IMPLEMENTATION_VERSION
)
;
}
if
(
sealedString
==
null
)
{
sealedString
=
mainAttributes
.
getValue
(
Name
.
SEALED
)
;
}
}
if
(
sealedString
!=
null
&&
sealedString
.
equalsIgnoreCase
(
"true"
)
)
{
try
{
sealBase
=
new
URL
(
"file:"
+
container
.
getPath
(
)
)
;
}
catch
(
MalformedURLException
e
)
{
}
}
definePackage
(
packageName
,
specificationTitle
,
specificationVersion
,
specificationVendor
,
implementationTitle
,
implementationVersion
,
implementationVendor
,
sealBase
)
;
}
protected
void
addPathFile
(
File
pathComponent
)
throws
IOException
{
super
.
addPathFile
(
pathComponent
)
;
if
(
pathComponent
.
isDirectory
(
)
)
{
return
;
}
String
classpath
=
null
;
ZipFile
jarFile
=
null
;
InputStream
manifestStream
=
null
;
try
{
jarFile
=
new
ZipFile
(
pathComponent
)
;
manifestStream
=
jarFile
.
getInputStream
(
new
ZipEntry
(
"META-INF/MANIFEST.MF"
)
)
;
if
(
manifestStream
==
null
)
{
return
;
}
Reader
manifestReader
=
new
InputStreamReader
(
manifestStream
,
"UTF-8"
)
;
org
.
apache
.
tools
.
ant
.
taskdefs
.
Manifest
manifest
=
new
org
.
apache
.
tools
.
ant
.
taskdefs
.
Manifest
(
manifestReader
)
;
classpath
=
manifest
.
getMainSection
(
)
.
getAttributeValue
(
"Class-Path"
)
;
}
catch
(
org
.
apache
.
tools
.
ant
.
taskdefs
.
ManifestException
e
)
{
}
finally
{
if
(
manifestStream
!=
null
)
{
manifestStream
.
close
(
)
;
}
if
(
jarFile
!=
null
)
{
jarFile
.
close
(
)
;
}
}
if
(
classpath
!=
null
)
{
URL
baseURL
=
fileUtils
.
getFileURL
(
pathComponent
)
;
StringTokenizer
st
=
new
StringTokenizer
(
classpath
)
;
while
(
st
.
hasMoreTokens
(
)
)
{
String
classpathElement
=
st
.
nextToken
(
)
;
URL
libraryURL
=
new
URL
(
baseURL
,
classpathElement
)
;
if
(
!
libraryURL
.
getProtocol
(
)
.
equals
(
"file"
)
)
{
log
(
"Skipping jar library "
+
classpathElement
+
" since only relative URLs are supported by this"
+
" loader"
,
Project
.
MSG_VERBOSE
)
;
continue
;
}
File
libraryFile
=
new
File
(
libraryURL
.
getFile
(
)
)
;
if
(
libraryFile
.
exists
(
)
&&
!
isInPath
(
libraryFile
)
)
{
addPathFile
(
libraryFile
)
;
}
}
}
}
}
