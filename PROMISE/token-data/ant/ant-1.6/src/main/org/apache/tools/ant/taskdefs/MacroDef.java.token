package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
HashMap
;
import
org
.
apache
.
tools
.
ant
.
AntTypeDefinition
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
ComponentHelper
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
ProjectHelper
;
import
org
.
apache
.
tools
.
ant
.
RuntimeConfigurable
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
TaskContainer
;
import
org
.
apache
.
tools
.
ant
.
UnknownElement
;
public
class
MacroDef
extends
AntlibDefinition
{
private
NestedSequential
nestedSequential
;
private
String
name
;
private
List
attributes
=
new
ArrayList
(
)
;
private
Map
elements
=
new
HashMap
(
)
;
public
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
public
NestedSequential
createSequential
(
)
{
if
(
this
.
nestedSequential
!=
null
)
{
throw
new
BuildException
(
"Only one sequential allowed"
)
;
}
this
.
nestedSequential
=
new
NestedSequential
(
)
;
return
this
.
nestedSequential
;
}
public
static
class
NestedSequential
implements
TaskContainer
{
private
List
nested
=
new
ArrayList
(
)
;
public
void
addTask
(
Task
task
)
{
nested
.
add
(
task
)
;
}
public
List
getNested
(
)
{
return
nested
;
}
public
boolean
similar
(
NestedSequential
other
)
{
if
(
nested
.
size
(
)
!=
other
.
nested
.
size
(
)
)
{
return
false
;
}
for
(
int
i
=
0
;
i
<
nested
.
size
(
)
;
++
i
)
{
UnknownElement
me
=
(
UnknownElement
)
nested
.
get
(
i
)
;
UnknownElement
o
=
(
UnknownElement
)
other
.
nested
.
get
(
i
)
;
if
(
!
me
.
similar
(
o
)
)
{
return
false
;
}
}
return
true
;
}
}
public
UnknownElement
getNestedTask
(
)
{
UnknownElement
ret
=
new
UnknownElement
(
"sequential"
)
;
ret
.
setTaskName
(
"sequential"
)
;
ret
.
setNamespace
(
""
)
;
ret
.
setQName
(
"sequential"
)
;
new
RuntimeConfigurable
(
ret
,
"sequential"
)
;
for
(
int
i
=
0
;
i
<
nestedSequential
.
getNested
(
)
.
size
(
)
;
++
i
)
{
UnknownElement
e
=
(
UnknownElement
)
nestedSequential
.
getNested
(
)
.
get
(
i
)
;
ret
.
addChild
(
e
)
;
ret
.
getWrapper
(
)
.
addChild
(
e
.
getWrapper
(
)
)
;
}
return
ret
;
}
public
List
getAttributes
(
)
{
return
attributes
;
}
public
Map
getElements
(
)
{
return
elements
;
}
public
static
boolean
isValidNameCharacter
(
char
c
)
{
return
Character
.
isLetterOrDigit
(
c
)
||
c
==
'.'
||
c
==
'-'
;
}
private
static
boolean
isValidName
(
String
name
)
{
if
(
name
.
length
(
)
==
0
)
{
return
false
;
}
for
(
int
i
=
0
;
i
<
name
.
length
(
)
;
++
i
)
{
if
(
!
isValidNameCharacter
(
name
.
charAt
(
i
)
)
)
{
return
false
;
}
}
return
true
;
}
public
void
addConfiguredAttribute
(
Attribute
attribute
)
{
if
(
attribute
.
getName
(
)
==
null
)
{
throw
new
BuildException
(
"the attribute nested element needed a \"name\" attribute"
)
;
}
for
(
int
i
=
0
;
i
<
attributes
.
size
(
)
;
++
i
)
{
if
(
(
(
Attribute
)
attributes
.
get
(
i
)
)
.
getName
(
)
.
equals
(
attribute
.
getName
(
)
)
)
{
throw
new
BuildException
(
"the attribute "
+
attribute
.
getName
(
)
+
" has already been specified"
)
;
}
}
attributes
.
add
(
attribute
)
;
}
public
void
addConfiguredElement
(
TemplateElement
element
)
{
if
(
element
.
getName
(
)
==
null
)
{
throw
new
BuildException
(
"the element nested element needed a \"name\" attribute"
)
;
}
if
(
elements
.
get
(
element
.
getName
(
)
)
!=
null
)
{
throw
new
BuildException
(
"the element "
+
element
.
getName
(
)
+
" has already been specified"
)
;
}
elements
.
put
(
element
.
getName
(
)
,
element
)
;
}
public
void
execute
(
)
{
if
(
nestedSequential
==
null
)
{
throw
new
BuildException
(
"Missing sequential element"
)
;
}
if
(
name
==
null
)
{
throw
new
BuildException
(
"Name not specified"
)
;
}
name
=
ProjectHelper
.
genComponentName
(
getURI
(
)
,
name
)
;
MyAntTypeDefinition
def
=
new
MyAntTypeDefinition
(
this
)
;
def
.
setName
(
name
)
;
def
.
setClass
(
MacroInstance
.
class
)
;
ComponentHelper
helper
=
ComponentHelper
.
getComponentHelper
(
getProject
(
)
)
;
helper
.
addDataTypeDefinition
(
def
)
;
}
public
static
class
Attribute
{
private
String
name
;
private
String
defaultValue
;
public
void
setName
(
String
name
)
{
if
(
!
isValidName
(
name
)
)
{
throw
new
BuildException
(
"Illegal name ["
+
name
+
"] for attribute"
)
;
}
this
.
name
=
name
;
}
public
String
getName
(
)
{
return
name
;
}
public
void
setDefault
(
String
defaultValue
)
{
this
.
defaultValue
=
defaultValue
;
}
public
String
getDefault
(
)
{
return
defaultValue
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
obj
==
null
)
{
return
false
;
}
if
(
obj
.
getClass
(
)
!=
getClass
(
)
)
{
return
false
;
}
Attribute
other
=
(
Attribute
)
obj
;
if
(
name
==
null
)
{
if
(
other
.
name
!=
null
)
{
return
false
;
}
}
else
if
(
!
name
.
equals
(
other
.
name
)
)
{
return
false
;
}
if
(
defaultValue
==
null
)
{
if
(
other
.
defaultValue
!=
null
)
{
return
false
;
}
}
else
if
(
!
defaultValue
.
equals
(
other
.
defaultValue
)
)
{
return
false
;
}
return
true
;
}
public
int
hashCode
(
)
{
return
objectHashCode
(
defaultValue
)
+
objectHashCode
(
name
)
;
}
}
public
static
class
TemplateElement
{
private
String
name
;
private
boolean
optional
=
false
;
public
void
setName
(
String
name
)
{
if
(
!
isValidName
(
name
)
)
{
throw
new
BuildException
(
"Illegal name ["
+
name
+
"] for attribute"
)
;
}
this
.
name
=
name
;
}
public
String
getName
(
)
{
return
name
;
}
public
void
setOptional
(
boolean
optional
)
{
this
.
optional
=
optional
;
}
public
boolean
isOptional
(
)
{
return
optional
;
}
public
boolean
equals
(
Object
obj
)
{
if
(
obj
==
null
)
{
return
false
;
}
if
(
obj
.
getClass
(
)
!=
getClass
(
)
)
{
return
false
;
}
TemplateElement
other
=
(
TemplateElement
)
obj
;
if
(
name
==
null
)
{
if
(
other
.
name
!=
null
)
{
return
false
;
}
}
else
if
(
!
name
.
equals
(
other
.
name
)
)
{
return
false
;
}
return
optional
==
other
.
optional
;
}
public
int
hashCode
(
)
{
return
objectHashCode
(
name
)
+
(
optional
?
1
:
0
)
;
}
}
public
boolean
equals
(
Object
obj
)
{
if
(
obj
==
null
)
{
return
false
;
}
if
(
!
obj
.
getClass
(
)
.
equals
(
getClass
(
)
)
)
{
return
false
;
}
MacroDef
other
=
(
MacroDef
)
obj
;
if
(
name
==
null
)
{
return
other
.
name
==
null
;
}
if
(
!
name
.
equals
(
other
.
name
)
)
{
return
false
;
}
if
(
getURI
(
)
==
null
||
getURI
(
)
.
equals
(
""
)
||
getURI
(
)
.
equals
(
ProjectHelper
.
ANT_CORE_URI
)
)
{
if
(
!
(
other
.
getURI
(
)
==
null
||
other
.
getURI
(
)
.
equals
(
""
)
||
other
.
getURI
(
)
.
equals
(
ProjectHelper
.
ANT_CORE_URI
)
)
)
{
return
false
;
}
}
else
{
if
(
!
getURI
(
)
.
equals
(
other
.
getURI
(
)
)
)
{
return
false
;
}
}
if
(
!
nestedSequential
.
similar
(
other
.
nestedSequential
)
)
{
return
false
;
}
if
(
!
attributes
.
equals
(
other
.
attributes
)
)
{
return
false
;
}
if
(
!
elements
.
equals
(
other
.
elements
)
)
{
return
false
;
}
return
true
;
}
public
int
hashCode
(
)
{
return
objectHashCode
(
name
)
+
objectHashCode
(
getURI
(
)
)
+
objectHashCode
(
nestedSequential
)
+
objectHashCode
(
attributes
)
+
objectHashCode
(
elements
)
;
}
private
static
class
MyAntTypeDefinition
extends
AntTypeDefinition
{
private
MacroDef
macroDef
;
public
MyAntTypeDefinition
(
MacroDef
macroDef
)
{
this
.
macroDef
=
macroDef
;
}
public
Object
create
(
Project
project
)
{
Object
o
=
super
.
create
(
project
)
;
if
(
o
==
null
)
{
return
null
;
}
(
(
MacroInstance
)
o
)
.
setMacroDef
(
macroDef
)
;
return
o
;
}
public
boolean
sameDefinition
(
AntTypeDefinition
other
,
Project
project
)
{
if
(
!
super
.
sameDefinition
(
other
,
project
)
)
{
return
false
;
}
MyAntTypeDefinition
otherDef
=
(
MyAntTypeDefinition
)
other
;
return
macroDef
.
equals
(
otherDef
.
macroDef
)
;
}
public
boolean
similarDefinition
(
AntTypeDefinition
other
,
Project
project
)
{
if
(
!
super
.
similarDefinition
(
other
,
project
)
)
{
return
false
;
}
MyAntTypeDefinition
otherDef
=
(
MyAntTypeDefinition
)
other
;
return
macroDef
.
equals
(
otherDef
.
macroDef
)
;
}
}
private
static
int
objectHashCode
(
Object
o
)
{
if
(
o
==
null
)
{
return
0
;
}
else
{
return
o
.
hashCode
(
)
;
}
}
}
