package
org
.
apache
.
tools
.
ant
.
types
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Properties
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
public
class
FilterSet
extends
DataType
implements
Cloneable
{
public
static
class
Filter
{
String
token
;
String
value
;
public
Filter
(
String
token
,
String
value
)
{
this
.
token
=
token
;
this
.
value
=
value
;
}
public
Filter
(
)
{
}
public
void
setToken
(
String
token
)
{
this
.
token
=
token
;
}
public
void
setValue
(
String
value
)
{
this
.
value
=
value
;
}
public
String
getToken
(
)
{
return
token
;
}
public
String
getValue
(
)
{
return
value
;
}
}
public
class
FiltersFile
{
public
FiltersFile
(
)
{
}
public
void
setFile
(
File
file
)
{
readFiltersFromFile
(
file
)
;
}
}
public
static
final
String
DEFAULT_TOKEN_START
=
"@"
;
public
static
final
String
DEFAULT_TOKEN_END
=
"@"
;
private
String
startOfToken
=
DEFAULT_TOKEN_START
;
private
String
endOfToken
=
DEFAULT_TOKEN_END
;
private
Vector
filters
=
new
Vector
(
)
;
public
FilterSet
(
)
{
}
protected
FilterSet
(
FilterSet
filterset
)
{
super
(
)
;
this
.
filters
=
(
Vector
)
filterset
.
getFilters
(
)
.
clone
(
)
;
}
protected
Vector
getFilters
(
)
{
if
(
isReference
(
)
)
{
return
getRef
(
)
.
getFilters
(
)
;
}
return
filters
;
}
protected
FilterSet
getRef
(
)
{
return
(
FilterSet
)
getCheckedRef
(
FilterSet
.
class
,
"filterset"
)
;
}
public
Hashtable
getFilterHash
(
)
{
int
filterSize
=
getFilters
(
)
.
size
(
)
;
Hashtable
filterHash
=
new
Hashtable
(
filterSize
+
1
)
;
for
(
Enumeration
e
=
getFilters
(
)
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
Filter
filter
=
(
Filter
)
e
.
nextElement
(
)
;
filterHash
.
put
(
filter
.
getToken
(
)
,
filter
.
getValue
(
)
)
;
}
return
filterHash
;
}
public
void
setFiltersfile
(
File
filtersFile
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
readFiltersFromFile
(
filtersFile
)
;
}
public
void
setBeginToken
(
String
startOfToken
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
if
(
startOfToken
==
null
||
""
.
equals
(
startOfToken
)
)
{
throw
new
BuildException
(
"beginToken must not be empty"
)
;
}
this
.
startOfToken
=
startOfToken
;
}
public
String
getBeginToken
(
)
{
if
(
isReference
(
)
)
{
return
getRef
(
)
.
getBeginToken
(
)
;
}
return
startOfToken
;
}
public
void
setEndToken
(
String
endOfToken
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
if
(
endOfToken
==
null
||
""
.
equals
(
endOfToken
)
)
{
throw
new
BuildException
(
"endToken must not be empty"
)
;
}
this
.
endOfToken
=
endOfToken
;
}
public
String
getEndToken
(
)
{
if
(
isReference
(
)
)
{
return
getRef
(
)
.
getEndToken
(
)
;
}
return
endOfToken
;
}
public
void
readFiltersFromFile
(
File
filtersFile
)
throws
BuildException
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
if
(
!
filtersFile
.
exists
(
)
)
{
throw
new
BuildException
(
"Could not read filters from file "
+
filtersFile
+
" as it doesn't exist."
)
;
}
if
(
filtersFile
.
isFile
(
)
)
{
log
(
"Reading filters from "
+
filtersFile
,
Project
.
MSG_VERBOSE
)
;
FileInputStream
in
=
null
;
try
{
Properties
props
=
new
Properties
(
)
;
in
=
new
FileInputStream
(
filtersFile
)
;
props
.
load
(
in
)
;
Enumeration
e
=
props
.
propertyNames
(
)
;
Vector
filters
=
getFilters
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
String
strPropName
=
(
String
)
e
.
nextElement
(
)
;
String
strValue
=
props
.
getProperty
(
strPropName
)
;
filters
.
addElement
(
new
Filter
(
strPropName
,
strValue
)
)
;
}
}
catch
(
Exception
ex
)
{
throw
new
BuildException
(
"Could not read filters from file: "
+
filtersFile
)
;
}
finally
{
if
(
in
!=
null
)
{
try
{
in
.
close
(
)
;
}
catch
(
IOException
ioex
)
{
}
}
}
}
else
{
throw
new
BuildException
(
"Must specify a file not a directory in "
+
"the filtersfile attribute:"
+
filtersFile
)
;
}
}
public
String
replaceTokens
(
String
line
)
{
String
beginToken
=
getBeginToken
(
)
;
String
endToken
=
getEndToken
(
)
;
int
index
=
line
.
indexOf
(
beginToken
)
;
if
(
index
>
-
1
)
{
Hashtable
tokens
=
getFilterHash
(
)
;
try
{
StringBuffer
b
=
new
StringBuffer
(
)
;
int
i
=
0
;
String
token
=
null
;
String
value
=
null
;
do
{
int
endIndex
=
line
.
indexOf
(
endToken
,
index
+
beginToken
.
length
(
)
+
1
)
;
if
(
endIndex
==
-
1
)
{
break
;
}
token
=
line
.
substring
(
index
+
beginToken
.
length
(
)
,
endIndex
)
;
b
.
append
(
line
.
substring
(
i
,
index
)
)
;
if
(
tokens
.
containsKey
(
token
)
)
{
value
=
(
String
)
tokens
.
get
(
token
)
;
if
(
!
value
.
equals
(
token
)
)
{
value
=
replaceTokens
(
value
,
token
)
;
}
log
(
"Replacing: "
+
beginToken
+
token
+
endToken
+
" -> "
+
value
,
Project
.
MSG_VERBOSE
)
;
b
.
append
(
value
)
;
i
=
index
+
beginToken
.
length
(
)
+
token
.
length
(
)
+
endToken
.
length
(
)
;
}
else
{
b
.
append
(
beginToken
)
;
i
=
index
+
beginToken
.
length
(
)
;
}
}
while
(
(
index
=
line
.
indexOf
(
beginToken
,
i
)
)
>
-
1
)
;
b
.
append
(
line
.
substring
(
i
)
)
;
return
b
.
toString
(
)
;
}
catch
(
StringIndexOutOfBoundsException
e
)
{
return
line
;
}
}
else
{
return
line
;
}
}
private
Vector
passedTokens
;
private
boolean
duplicateToken
=
false
;
private
String
replaceTokens
(
String
line
,
String
parent
)
throws
BuildException
{
if
(
passedTokens
==
null
)
{
passedTokens
=
new
Vector
(
)
;
}
if
(
passedTokens
.
contains
(
parent
)
&&
!
duplicateToken
)
{
duplicateToken
=
true
;
StringBuffer
sb
=
new
StringBuffer
(
)
;
sb
.
append
(
"Inifinite loop in tokens. Currently known tokens : "
)
;
sb
.
append
(
passedTokens
)
;
sb
.
append
(
"\nProblem token : "
+
getBeginToken
(
)
+
parent
+
getEndToken
(
)
)
;
sb
.
append
(
" called from "
+
getBeginToken
(
)
+
passedTokens
.
lastElement
(
)
)
;
sb
.
append
(
getEndToken
(
)
)
;
System
.
out
.
println
(
sb
.
toString
(
)
)
;
return
parent
;
}
passedTokens
.
addElement
(
parent
)
;
String
value
=
this
.
replaceTokens
(
line
)
;
if
(
value
.
indexOf
(
getBeginToken
(
)
)
==
-
1
&&
!
duplicateToken
)
{
duplicateToken
=
false
;
passedTokens
=
null
;
}
else
if
(
duplicateToken
)
{
if
(
passedTokens
.
size
(
)
>
0
)
{
value
=
(
String
)
passedTokens
.
lastElement
(
)
;
passedTokens
.
removeElementAt
(
passedTokens
.
size
(
)
-
1
)
;
if
(
passedTokens
.
size
(
)
==
0
)
{
value
=
getBeginToken
(
)
+
value
+
getEndToken
(
)
;
duplicateToken
=
false
;
}
}
}
return
value
;
}
public
void
addFilter
(
Filter
filter
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
filters
.
addElement
(
filter
)
;
}
public
FiltersFile
createFiltersfile
(
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
return
new
FiltersFile
(
)
;
}
public
void
addFilter
(
String
token
,
String
value
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
filters
.
addElement
(
new
Filter
(
token
,
value
)
)
;
}
public
void
addConfiguredFilterSet
(
FilterSet
filterSet
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
for
(
Enumeration
e
=
filterSet
.
getFilters
(
)
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
filters
.
addElement
(
e
.
nextElement
(
)
)
;
}
}
public
boolean
hasFilters
(
)
{
return
getFilters
(
)
.
size
(
)
>
0
;
}
public
Object
clone
(
)
throws
BuildException
{
if
(
isReference
(
)
)
{
return
(
(
FilterSet
)
getRef
(
)
)
.
clone
(
)
;
}
else
{
try
{
FilterSet
fs
=
(
FilterSet
)
super
.
clone
(
)
;
fs
.
filters
=
(
Vector
)
getFilters
(
)
.
clone
(
)
;
fs
.
setProject
(
getProject
(
)
)
;
return
fs
;
}
catch
(
CloneNotSupportedException
e
)
{
throw
new
BuildException
(
e
)
;
}
}
}
}
