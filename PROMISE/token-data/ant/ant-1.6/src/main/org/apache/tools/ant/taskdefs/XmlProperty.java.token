package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Hashtable
;
import
javax
.
xml
.
parsers
.
DocumentBuilderFactory
;
import
javax
.
xml
.
parsers
.
ParserConfigurationException
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
w3c
.
dom
.
Document
;
import
org
.
w3c
.
dom
.
Element
;
import
org
.
w3c
.
dom
.
NamedNodeMap
;
import
org
.
w3c
.
dom
.
Node
;
import
org
.
w3c
.
dom
.
NodeList
;
import
org
.
xml
.
sax
.
SAXException
;
public
class
XmlProperty
extends
org
.
apache
.
tools
.
ant
.
Task
{
private
File
src
;
private
String
prefix
=
""
;
private
boolean
keepRoot
=
true
;
private
boolean
validate
=
false
;
private
boolean
collapseAttributes
=
false
;
private
boolean
semanticAttributes
=
false
;
private
boolean
includeSemanticAttribute
=
false
;
private
File
rootDirectory
=
null
;
private
FileUtils
fileUtils
=
FileUtils
.
newFileUtils
(
)
;
private
Hashtable
addedAttributes
=
new
Hashtable
(
)
;
private
static
final
String
ID
=
"id"
;
private
static
final
String
REF_ID
=
"refid"
;
private
static
final
String
LOCATION
=
"location"
;
private
static
final
String
VALUE
=
"value"
;
private
static
final
String
PATH
=
"path"
;
private
static
final
String
PATHID
=
"pathid"
;
private
static
final
String
[
]
ATTRIBUTES
=
new
String
[
]
{
ID
,
REF_ID
,
LOCATION
,
VALUE
,
PATH
,
PATHID
}
;
public
XmlProperty
(
)
{
super
(
)
;
}
public
void
init
(
)
{
super
.
init
(
)
;
}
public
void
execute
(
)
throws
BuildException
{
if
(
getFile
(
)
==
null
)
{
String
msg
=
"XmlProperty task requires a file attribute"
;
throw
new
BuildException
(
msg
)
;
}
try
{
log
(
"Loading "
+
src
.
getAbsolutePath
(
)
,
Project
.
MSG_VERBOSE
)
;
if
(
src
.
exists
(
)
)
{
DocumentBuilderFactory
factory
=
DocumentBuilderFactory
.
newInstance
(
)
;
factory
.
setValidating
(
validate
)
;
factory
.
setNamespaceAware
(
false
)
;
Document
document
=
factory
.
newDocumentBuilder
(
)
.
parse
(
src
)
;
Element
topElement
=
document
.
getDocumentElement
(
)
;
addedAttributes
=
new
Hashtable
(
)
;
if
(
keepRoot
)
{
addNodeRecursively
(
topElement
,
prefix
,
null
)
;
}
else
{
NodeList
topChildren
=
topElement
.
getChildNodes
(
)
;
int
numChildren
=
topChildren
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
numChildren
;
i
++
)
{
addNodeRecursively
(
topChildren
.
item
(
i
)
,
prefix
,
null
)
;
}
}
}
else
{
log
(
"Unable to find property file: "
+
src
.
getAbsolutePath
(
)
,
Project
.
MSG_VERBOSE
)
;
}
}
catch
(
SAXException
sxe
)
{
Exception
x
=
sxe
;
if
(
sxe
.
getException
(
)
!=
null
)
{
x
=
sxe
.
getException
(
)
;
}
throw
new
BuildException
(
x
)
;
}
catch
(
ParserConfigurationException
pce
)
{
throw
new
BuildException
(
pce
)
;
}
catch
(
IOException
ioe
)
{
throw
new
BuildException
(
ioe
)
;
}
}
private
void
addNodeRecursively
(
Node
node
,
String
prefix
,
Object
container
)
{
String
nodePrefix
=
prefix
;
if
(
node
.
getNodeType
(
)
!=
Node
.
TEXT_NODE
)
{
if
(
prefix
.
trim
(
)
.
length
(
)
>
0
)
{
nodePrefix
+=
"."
;
}
nodePrefix
+=
node
.
getNodeName
(
)
;
}
Object
nodeObject
=
processNode
(
node
,
nodePrefix
,
container
)
;
if
(
node
.
hasChildNodes
(
)
)
{
NodeList
nodeChildren
=
node
.
getChildNodes
(
)
;
int
numChildren
=
nodeChildren
.
getLength
(
)
;
for
(
int
i
=
0
;
i
<
numChildren
;
i
++
)
{
addNodeRecursively
(
nodeChildren
.
item
(
i
)
,
nodePrefix
,
nodeObject
)
;
}
}
}
void
addNodeRecursively
(
org
.
w3c
.
dom
.
Node
node
,
String
prefix
)
{
addNodeRecursively
(
node
,
prefix
,
null
)
;
}
public
Object
processNode
(
Node
node
,
String
prefix
,
Object
container
)
{
Object
addedPath
=
null
;
String
id
=
null
;
if
(
node
.
hasAttributes
(
)
)
{
NamedNodeMap
nodeAttributes
=
node
.
getAttributes
(
)
;
Node
idNode
=
nodeAttributes
.
getNamedItem
(
ID
)
;
id
=
(
semanticAttributes
&&
idNode
!=
null
?
idNode
.
getNodeValue
(
)
:
null
)
;
for
(
int
i
=
0
;
i
<
nodeAttributes
.
getLength
(
)
;
i
++
)
{
Node
attributeNode
=
nodeAttributes
.
item
(
i
)
;
if
(
!
semanticAttributes
)
{
String
attributeName
=
getAttributeName
(
attributeNode
)
;
String
attributeValue
=
getAttributeValue
(
attributeNode
)
;
addProperty
(
prefix
+
attributeName
,
attributeValue
,
null
)
;
}
else
{
String
nodeName
=
attributeNode
.
getNodeName
(
)
;
String
attributeValue
=
getAttributeValue
(
attributeNode
)
;
Path
containingPath
=
(
container
!=
null
&&
container
instanceof
Path
?
(
Path
)
container
:
null
)
;
if
(
nodeName
.
equals
(
ID
)
)
{
continue
;
}
else
if
(
containingPath
!=
null
&&
nodeName
.
equals
(
PATH
)
)
{
containingPath
.
setPath
(
attributeValue
)
;
}
else
if
(
container
instanceof
Path
&&
nodeName
.
equals
(
REF_ID
)
)
{
containingPath
.
setPath
(
attributeValue
)
;
}
else
if
(
container
instanceof
Path
&&
nodeName
.
equals
(
LOCATION
)
)
{
containingPath
.
setLocation
(
resolveFile
(
attributeValue
)
)
;
}
else
if
(
nodeName
.
equals
(
PATHID
)
)
{
if
(
container
!=
null
)
{
throw
new
BuildException
(
"XmlProperty does not "
+
"support nested paths"
)
;
}
addedPath
=
new
Path
(
getProject
(
)
)
;
getProject
(
)
.
addReference
(
attributeValue
,
addedPath
)
;
}
else
{
String
attributeName
=
getAttributeName
(
attributeNode
)
;
addProperty
(
prefix
+
attributeName
,
attributeValue
,
id
)
;
}
}
}
}
String
nodeText
=
null
;
if
(
node
.
getNodeType
(
)
==
Node
.
TEXT_NODE
)
{
nodeText
=
getAttributeValue
(
node
)
;
}
else
if
(
(
node
.
getNodeType
(
)
==
Node
.
ELEMENT_NODE
)
&&
(
node
.
getChildNodes
(
)
.
getLength
(
)
==
1
)
&&
(
node
.
getFirstChild
(
)
.
getNodeType
(
)
==
Node
.
CDATA_SECTION_NODE
)
)
{
nodeText
=
node
.
getFirstChild
(
)
.
getNodeValue
(
)
;
}
if
(
nodeText
!=
null
)
{
if
(
semanticAttributes
&&
id
==
null
&&
container
instanceof
String
)
{
id
=
(
String
)
container
;
System
.
out
.
println
(
"Setting id = "
+
id
)
;
}
if
(
nodeText
.
trim
(
)
.
length
(
)
!=
0
)
{
addProperty
(
prefix
,
nodeText
,
id
)
;
}
}
return
(
addedPath
!=
null
?
addedPath
:
id
)
;
}
private
void
addProperty
(
String
name
,
String
value
,
String
id
)
{
String
msg
=
name
+
":"
+
value
;
if
(
id
!=
null
)
{
msg
+=
(
"(id="
+
id
+
")"
)
;
}
log
(
msg
,
Project
.
MSG_DEBUG
)
;
if
(
addedAttributes
.
containsKey
(
name
)
)
{
value
=
(
String
)
addedAttributes
.
get
(
name
)
+
","
+
value
;
getProject
(
)
.
setProperty
(
name
,
value
)
;
}
else
{
getProject
(
)
.
setNewProperty
(
name
,
value
)
;
}
addedAttributes
.
put
(
name
,
value
)
;
if
(
id
!=
null
)
{
getProject
(
)
.
addReference
(
id
,
value
)
;
}
}
private
String
getAttributeName
(
Node
attributeNode
)
{
String
attributeName
=
attributeNode
.
getNodeName
(
)
;
if
(
semanticAttributes
)
{
if
(
attributeName
.
equals
(
REF_ID
)
)
{
return
""
;
}
else
if
(
!
isSemanticAttribute
(
attributeName
)
||
includeSemanticAttribute
)
{
return
"."
+
attributeName
;
}
else
{
return
""
;
}
}
else
if
(
collapseAttributes
)
{
return
"."
+
attributeName
;
}
else
{
return
"("
+
attributeName
+
")"
;
}
}
private
static
boolean
isSemanticAttribute
(
String
attributeName
)
{
for
(
int
i
=
0
;
i
<
ATTRIBUTES
.
length
;
i
++
)
{
if
(
attributeName
.
equals
(
ATTRIBUTES
[
i
]
)
)
{
return
true
;
}
}
return
false
;
}
private
String
getAttributeValue
(
Node
attributeNode
)
{
String
nodeValue
=
attributeNode
.
getNodeValue
(
)
.
trim
(
)
;
if
(
semanticAttributes
)
{
String
attributeName
=
attributeNode
.
getNodeName
(
)
;
nodeValue
=
getProject
(
)
.
replaceProperties
(
nodeValue
)
;
if
(
attributeName
.
equals
(
LOCATION
)
)
{
File
f
=
resolveFile
(
nodeValue
)
;
return
f
.
getPath
(
)
;
}
else
if
(
attributeName
.
equals
(
REF_ID
)
)
{
Object
ref
=
getProject
(
)
.
getReference
(
nodeValue
)
;
if
(
ref
!=
null
)
{
return
ref
.
toString
(
)
;
}
}
}
return
nodeValue
;
}
public
void
setFile
(
File
src
)
{
this
.
src
=
src
;
}
public
void
setPrefix
(
String
prefix
)
{
this
.
prefix
=
prefix
.
trim
(
)
;
}
public
void
setKeeproot
(
boolean
keepRoot
)
{
this
.
keepRoot
=
keepRoot
;
}
public
void
setValidate
(
boolean
validate
)
{
this
.
validate
=
validate
;
}
public
void
setCollapseAttributes
(
boolean
collapseAttributes
)
{
this
.
collapseAttributes
=
collapseAttributes
;
}
public
void
setSemanticAttributes
(
boolean
semanticAttributes
)
{
this
.
semanticAttributes
=
semanticAttributes
;
}
public
void
setRootDirectory
(
File
rootDirectory
)
{
this
.
rootDirectory
=
rootDirectory
;
}
public
void
setIncludeSemanticAttribute
(
boolean
includeSemanticAttribute
)
{
this
.
includeSemanticAttribute
=
includeSemanticAttribute
;
}
protected
File
getFile
(
)
{
return
this
.
src
;
}
protected
String
getPrefix
(
)
{
return
this
.
prefix
;
}
protected
boolean
getKeeproot
(
)
{
return
this
.
keepRoot
;
}
protected
boolean
getValidate
(
)
{
return
this
.
validate
;
}
protected
boolean
getCollapseAttributes
(
)
{
return
this
.
collapseAttributes
;
}
protected
boolean
getSemanticAttributes
(
)
{
return
this
.
semanticAttributes
;
}
protected
File
getRootDirectory
(
)
{
return
this
.
rootDirectory
;
}
protected
boolean
getIncludeSementicAttribute
(
)
{
return
this
.
includeSemanticAttribute
;
}
private
File
resolveFile
(
String
fileName
)
{
if
(
rootDirectory
==
null
)
{
return
getProject
(
)
.
resolveFile
(
fileName
)
;
}
return
fileUtils
.
resolveFile
(
rootDirectory
,
fileName
)
;
}
}
