package
org
.
apache
.
tools
.
ant
.
types
;
import
java
.
util
.
Stack
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
util
.
regexp
.
Regexp
;
import
org
.
apache
.
tools
.
ant
.
util
.
regexp
.
RegexpFactory
;
public
class
RegularExpression
extends
DataType
{
public
static
final
String
DATA_TYPE_NAME
=
"regexp"
;
private
static
final
RegexpFactory
factory
=
new
RegexpFactory
(
)
;
private
Regexp
regexp
;
public
RegularExpression
(
)
{
this
.
regexp
=
factory
.
newRegexp
(
)
;
}
public
void
setPattern
(
String
pattern
)
{
this
.
regexp
.
setPattern
(
pattern
)
;
}
public
String
getPattern
(
Project
p
)
{
if
(
isReference
(
)
)
{
return
getRef
(
p
)
.
getPattern
(
p
)
;
}
return
regexp
.
getPattern
(
)
;
}
public
Regexp
getRegexp
(
Project
p
)
{
if
(
isReference
(
)
)
{
return
getRef
(
p
)
.
getRegexp
(
p
)
;
}
return
this
.
regexp
;
}
public
RegularExpression
getRef
(
Project
p
)
{
if
(
!
isChecked
(
)
)
{
Stack
stk
=
new
Stack
(
)
;
stk
.
push
(
this
)
;
dieOnCircularReference
(
stk
,
p
)
;
}
Object
o
=
getRefid
(
)
.
getReferencedObject
(
p
)
;
if
(
!
(
o
instanceof
RegularExpression
)
)
{
String
msg
=
getRefid
(
)
.
getRefId
(
)
+
" doesn\'t denote a "
+
DATA_TYPE_NAME
;
throw
new
BuildException
(
msg
)
;
}
else
{
return
(
RegularExpression
)
o
;
}
}
}
