package
org
.
apache
.
tools
.
ant
.
types
.
selectors
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStreamReader
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
types
.
Parameter
;
import
org
.
apache
.
tools
.
ant
.
types
.
RegularExpression
;
import
org
.
apache
.
tools
.
ant
.
util
.
regexp
.
Regexp
;
public
class
ContainsRegexpSelector
extends
BaseExtendSelector
{
private
String
userProvidedExpression
=
null
;
private
RegularExpression
myRegExp
=
null
;
private
Regexp
myExpression
=
null
;
public
static
final
String
EXPRESSION_KEY
=
"expression"
;
public
ContainsRegexpSelector
(
)
{
}
public
String
toString
(
)
{
StringBuffer
buf
=
new
StringBuffer
(
"{containsregexpselector expression: "
)
;
buf
.
append
(
userProvidedExpression
)
;
buf
.
append
(
"}"
)
;
return
buf
.
toString
(
)
;
}
public
void
setExpression
(
String
theexpression
)
{
this
.
userProvidedExpression
=
theexpression
;
}
public
void
setParameters
(
Parameter
[
]
parameters
)
{
super
.
setParameters
(
parameters
)
;
if
(
parameters
!=
null
)
{
for
(
int
i
=
0
;
i
<
parameters
.
length
;
i
++
)
{
String
paramname
=
parameters
[
i
]
.
getName
(
)
;
if
(
EXPRESSION_KEY
.
equalsIgnoreCase
(
paramname
)
)
{
setExpression
(
parameters
[
i
]
.
getValue
(
)
)
;
}
else
{
setError
(
"Invalid parameter "
+
paramname
)
;
}
}
}
}
public
void
verifySettings
(
)
{
if
(
userProvidedExpression
==
null
)
{
setError
(
"The expression attribute is required"
)
;
}
}
public
boolean
isSelected
(
File
basedir
,
String
filename
,
File
file
)
{
String
teststr
=
null
;
BufferedReader
in
=
null
;
validate
(
)
;
if
(
file
.
isDirectory
(
)
)
{
return
true
;
}
if
(
myRegExp
==
null
)
{
myRegExp
=
new
RegularExpression
(
)
;
myRegExp
.
setPattern
(
userProvidedExpression
)
;
myExpression
=
myRegExp
.
getRegexp
(
getProject
(
)
)
;
}
try
{
in
=
new
BufferedReader
(
new
InputStreamReader
(
new
FileInputStream
(
file
)
)
)
;
teststr
=
in
.
readLine
(
)
;
while
(
teststr
!=
null
)
{
if
(
myExpression
.
matches
(
teststr
)
)
{
return
true
;
}
teststr
=
in
.
readLine
(
)
;
}
return
false
;
}
catch
(
IOException
ioe
)
{
throw
new
BuildException
(
"Could not read file "
+
filename
)
;
}
finally
{
if
(
in
!=
null
)
{
try
{
in
.
close
(
)
;
}
catch
(
Exception
e
)
{
throw
new
BuildException
(
"Could not close file "
+
filename
)
;
}
}
}
}
}
