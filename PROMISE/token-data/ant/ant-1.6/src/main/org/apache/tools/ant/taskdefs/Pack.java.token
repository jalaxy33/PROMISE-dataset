package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Task
;
public
abstract
class
Pack
extends
Task
{
protected
File
zipFile
;
protected
File
source
;
public
void
setZipfile
(
File
zipFile
)
{
this
.
zipFile
=
zipFile
;
}
public
void
setDestfile
(
File
zipFile
)
{
setZipfile
(
zipFile
)
;
}
public
void
setSrc
(
File
src
)
{
source
=
src
;
}
private
void
validate
(
)
throws
BuildException
{
if
(
zipFile
==
null
)
{
throw
new
BuildException
(
"zipfile attribute is required"
,
getLocation
(
)
)
;
}
if
(
zipFile
.
isDirectory
(
)
)
{
throw
new
BuildException
(
"zipfile attribute must not "
+
"represent a directory!"
,
getLocation
(
)
)
;
}
if
(
source
==
null
)
{
throw
new
BuildException
(
"src attribute is required"
,
getLocation
(
)
)
;
}
if
(
source
.
isDirectory
(
)
)
{
throw
new
BuildException
(
"Src attribute must not "
+
"represent a directory!"
,
getLocation
(
)
)
;
}
}
public
void
execute
(
)
throws
BuildException
{
validate
(
)
;
if
(
!
source
.
exists
(
)
)
{
log
(
"Nothing to do: "
+
source
.
getAbsolutePath
(
)
+
" doesn't exist."
)
;
}
else
if
(
zipFile
.
lastModified
(
)
<
source
.
lastModified
(
)
)
{
log
(
"Building: "
+
zipFile
.
getAbsolutePath
(
)
)
;
pack
(
)
;
}
else
{
log
(
"Nothing to do: "
+
zipFile
.
getAbsolutePath
(
)
+
" is up to date."
)
;
}
}
private
void
zipFile
(
InputStream
in
,
OutputStream
zOut
)
throws
IOException
{
byte
[
]
buffer
=
new
byte
[
8
*
1024
]
;
int
count
=
0
;
do
{
zOut
.
write
(
buffer
,
0
,
count
)
;
count
=
in
.
read
(
buffer
,
0
,
buffer
.
length
)
;
}
while
(
count
!=
-
1
)
;
}
protected
void
zipFile
(
File
file
,
OutputStream
zOut
)
throws
IOException
{
FileInputStream
fIn
=
new
FileInputStream
(
file
)
;
try
{
zipFile
(
fIn
,
zOut
)
;
}
finally
{
fIn
.
close
(
)
;
}
}
protected
abstract
void
pack
(
)
;
}
