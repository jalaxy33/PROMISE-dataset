package
org
.
apache
.
tools
.
ant
;
import
org
.
apache
.
tools
.
ant
.
util
.
LoaderUtils
;
import
javax
.
xml
.
parsers
.
SAXParserFactory
;
import
javax
.
xml
.
parsers
.
SAXParser
;
import
java
.
io
.
File
;
import
java
.
io
.
FilenameFilter
;
import
java
.
io
.
PrintStream
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Properties
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
public
final
class
Diagnostics
{
private
static
final
String
TEST_CLASS
=
"org.apache.tools.ant.taskdefs.optional.Test"
;
private
Diagnostics
(
)
{
}
public
static
boolean
isOptionalAvailable
(
)
{
try
{
Class
.
forName
(
TEST_CLASS
)
;
}
catch
(
ClassNotFoundException
e
)
{
return
false
;
}
return
true
;
}
public
static
void
validateVersion
(
)
throws
BuildException
{
try
{
Class
optional
=
Class
.
forName
(
"org.apache.tools.ant.taskdefs.optional.Test"
)
;
String
coreVersion
=
getImplementationVersion
(
Main
.
class
)
;
String
optionalVersion
=
getImplementationVersion
(
optional
)
;
if
(
coreVersion
!=
null
&&
!
coreVersion
.
equals
(
optionalVersion
)
)
{
throw
new
BuildException
(
"Invalid implementation version "
+
"between Ant core and Ant optional tasks.\n"
+
" core    : "
+
coreVersion
+
"\n"
+
" optional: "
+
optionalVersion
)
;
}
}
catch
(
ClassNotFoundException
e
)
{
}
}
public
static
File
[
]
listLibraries
(
)
{
String
home
=
System
.
getProperty
(
"ant.home"
)
;
if
(
home
==
null
)
{
return
null
;
}
File
libDir
=
new
File
(
home
,
"lib"
)
;
FilenameFilter
filter
=
new
FilenameFilter
(
)
{
public
boolean
accept
(
File
dir
,
String
name
)
{
return
name
.
endsWith
(
".jar"
)
;
}
}
;
String
[
]
filenames
=
libDir
.
list
(
filter
)
;
if
(
filenames
==
null
)
{
return
null
;
}
File
[
]
files
=
new
File
[
filenames
.
length
]
;
for
(
int
i
=
0
;
i
<
filenames
.
length
;
i
++
)
{
files
[
i
]
=
new
File
(
libDir
,
filenames
[
i
]
)
;
}
return
files
;
}
public
static
void
main
(
String
[
]
args
)
{
doReport
(
System
.
out
)
;
}
private
static
String
getImplementationVersion
(
Class
clazz
)
{
try
{
Method
method
=
Class
.
class
.
getMethod
(
"getPackage"
,
new
Class
[
0
]
)
;
Object
pkg
=
method
.
invoke
(
clazz
,
null
)
;
if
(
pkg
!=
null
)
{
method
=
pkg
.
getClass
(
)
.
getMethod
(
"getImplementationVersion"
,
new
Class
[
0
]
)
;
Object
version
=
method
.
invoke
(
pkg
,
null
)
;
return
(
String
)
version
;
}
}
catch
(
Exception
e
)
{
return
"?.?"
;
}
return
null
;
}
private
static
String
getXmlParserName
(
)
{
SAXParser
saxParser
=
getSAXParser
(
)
;
if
(
saxParser
==
null
)
{
return
"Could not create an XML Parser"
;
}
String
saxParserName
=
saxParser
.
getClass
(
)
.
getName
(
)
;
return
saxParserName
;
}
private
static
SAXParser
getSAXParser
(
)
{
SAXParserFactory
saxParserFactory
=
SAXParserFactory
.
newInstance
(
)
;
if
(
saxParserFactory
==
null
)
{
return
null
;
}
SAXParser
saxParser
=
null
;
try
{
saxParser
=
saxParserFactory
.
newSAXParser
(
)
;
}
catch
(
Exception
e
)
{
}
return
saxParser
;
}
private
static
String
getXMLParserLocation
(
)
{
SAXParser
saxParser
=
getSAXParser
(
)
;
if
(
saxParser
==
null
)
{
return
null
;
}
String
location
=
getClassLocation
(
saxParser
.
getClass
(
)
)
;
return
location
;
}
private
static
String
getClassLocation
(
Class
clazz
)
{
File
f
=
LoaderUtils
.
getClassSource
(
clazz
)
;
return
f
==
null
?
null
:
f
.
getAbsolutePath
(
)
;
}
public
static
void
doReport
(
PrintStream
out
)
{
out
.
println
(
"------- Ant diagnostics report -------"
)
;
out
.
println
(
Main
.
getAntVersion
(
)
)
;
out
.
println
(
)
;
out
.
println
(
"-------------------------------------------"
)
;
out
.
println
(
" Implementation Version (JDK1.2+ only)"
)
;
out
.
println
(
"-------------------------------------------"
)
;
out
.
println
(
"core tasks     : "
+
getImplementationVersion
(
Main
.
class
)
)
;
Class
optional
=
null
;
try
{
optional
=
Class
.
forName
(
"org.apache.tools.ant.taskdefs.optional.Test"
)
;
out
.
println
(
"optional tasks : "
+
getImplementationVersion
(
optional
)
)
;
}
catch
(
ClassNotFoundException
e
)
{
out
.
println
(
"optional tasks : not available"
)
;
}
out
.
println
(
)
;
out
.
println
(
"-------------------------------------------"
)
;
out
.
println
(
" ANT_HOME/lib jar listing"
)
;
out
.
println
(
"-------------------------------------------"
)
;
doReportLibraries
(
out
)
;
out
.
println
(
)
;
out
.
println
(
"-------------------------------------------"
)
;
out
.
println
(
" Tasks availability"
)
;
out
.
println
(
"-------------------------------------------"
)
;
doReportTasksAvailability
(
out
)
;
out
.
println
(
)
;
out
.
println
(
"-------------------------------------------"
)
;
out
.
println
(
" org.apache.env.Which diagnostics"
)
;
out
.
println
(
"-------------------------------------------"
)
;
doReportWhich
(
out
)
;
out
.
println
(
)
;
out
.
println
(
"-------------------------------------------"
)
;
out
.
println
(
" XML Parser information"
)
;
out
.
println
(
"-------------------------------------------"
)
;
doReportParserInfo
(
out
)
;
out
.
println
(
)
;
out
.
println
(
"-------------------------------------------"
)
;
out
.
println
(
" System properties"
)
;
out
.
println
(
"-------------------------------------------"
)
;
doReportSystemProperties
(
out
)
;
out
.
println
(
)
;
}
private
static
void
doReportSystemProperties
(
PrintStream
out
)
{
for
(
Enumeration
keys
=
System
.
getProperties
(
)
.
keys
(
)
;
keys
.
hasMoreElements
(
)
;
)
{
String
key
=
(
String
)
keys
.
nextElement
(
)
;
out
.
println
(
key
+
" : "
+
System
.
getProperty
(
key
)
)
;
}
}
private
static
void
doReportLibraries
(
PrintStream
out
)
{
out
.
println
(
"ant.home: "
+
System
.
getProperty
(
"ant.home"
)
)
;
File
[
]
libs
=
listLibraries
(
)
;
if
(
libs
==
null
)
{
out
.
println
(
"Unable to list libraries."
)
;
return
;
}
for
(
int
i
=
0
;
i
<
libs
.
length
;
i
++
)
{
out
.
println
(
libs
[
i
]
.
getName
(
)
+
" ("
+
libs
[
i
]
.
length
(
)
+
" bytes)"
)
;
}
}
private
static
void
doReportWhich
(
PrintStream
out
)
{
Throwable
error
=
null
;
try
{
Class
which
=
Class
.
forName
(
"org.apache.env.Which"
)
;
Method
method
=
which
.
getMethod
(
"main"
,
new
Class
[
]
{
String
[
]
.
class
}
)
;
method
.
invoke
(
null
,
new
Object
[
]
{
new
String
[
]
{
}
}
)
;
}
catch
(
ClassNotFoundException
e
)
{
out
.
println
(
"Not available."
)
;
out
.
println
(
"Download it at http://xml.apache.org/commons/"
)
;
}
catch
(
InvocationTargetException
e
)
{
error
=
e
.
getTargetException
(
)
==
null
?
e
:
e
.
getTargetException
(
)
;
}
catch
(
Throwable
e
)
{
error
=
e
;
}
if
(
error
!=
null
)
{
out
.
println
(
"Error while running org.apache.env.Which"
)
;
error
.
printStackTrace
(
)
;
}
}
private
static
void
doReportTasksAvailability
(
PrintStream
out
)
{
InputStream
is
=
Main
.
class
.
getResourceAsStream
(
"/org/apache/tools/ant/taskdefs/defaults.properties"
)
;
if
(
is
==
null
)
{
out
.
println
(
"None available"
)
;
}
else
{
Properties
props
=
new
Properties
(
)
;
try
{
props
.
load
(
is
)
;
for
(
Enumeration
keys
=
props
.
keys
(
)
;
keys
.
hasMoreElements
(
)
;
)
{
String
key
=
(
String
)
keys
.
nextElement
(
)
;
String
classname
=
props
.
getProperty
(
key
)
;
try
{
Class
.
forName
(
classname
)
;
props
.
remove
(
key
)
;
}
catch
(
ClassNotFoundException
e
)
{
out
.
println
(
key
+
" : Not Available"
)
;
}
catch
(
NoClassDefFoundError
e
)
{
String
pkg
=
e
.
getMessage
(
)
.
replace
(
'/'
,
'.'
)
;
out
.
println
(
key
+
" : Missing dependency "
+
pkg
)
;
}
catch
(
Error
e
)
{
out
.
println
(
key
+
" : Initialization error"
)
;
}
}
if
(
props
.
size
(
)
==
0
)
{
out
.
println
(
"All defined tasks are available"
)
;
}
}
catch
(
IOException
e
)
{
out
.
println
(
e
.
getMessage
(
)
)
;
}
}
}
private
static
void
doReportParserInfo
(
PrintStream
out
)
{
String
parserName
=
getXmlParserName
(
)
;
String
parserLocation
=
getXMLParserLocation
(
)
;
if
(
parserName
==
null
)
{
parserName
=
"unknown"
;
}
if
(
parserLocation
==
null
)
{
parserLocation
=
"unknown"
;
}
out
.
println
(
"XML Parser : "
+
parserName
)
;
out
.
println
(
"XML Parser Location: "
+
parserLocation
)
;
}
}
