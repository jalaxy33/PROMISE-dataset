package
org
.
apache
.
tools
.
ant
.
util
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
java
.
lang
.
reflect
.
Constructor
;
public
abstract
class
WeakishReference
{
private
static
Constructor
referenceConstructor
;
private
final
static
String
WEAK_REFERENCE_NAME
=
"org.apache.tools.ant.util.optional.WeakishReference12"
;
public
static
WeakishReference
createReference
(
Object
object
)
{
if
(
referenceConstructor
==
null
)
{
createReferenceConstructor
(
)
;
}
try
{
return
(
WeakishReference
)
referenceConstructor
.
newInstance
(
new
Object
[
]
{
object
}
)
;
}
catch
(
Exception
e
)
{
throw
new
BuildException
(
"while creating a weakish reference"
,
e
)
;
}
}
private
static
void
createReferenceConstructor
(
)
{
Class
[
]
ctor
=
new
Class
[
]
{
Object
.
class
}
;
try
{
referenceConstructor
=
HardReference
.
class
.
getConstructor
(
ctor
)
;
}
catch
(
NoSuchMethodException
e
)
{
throw
new
BuildException
(
"when creating a Hard Reference constructor"
,
e
)
;
}
if
(
!
JavaEnvUtils
.
isJavaVersion
(
JavaEnvUtils
.
JAVA_1_1
)
)
{
try
{
Class
clazz
=
Class
.
forName
(
WEAK_REFERENCE_NAME
)
;
referenceConstructor
=
clazz
.
getConstructor
(
ctor
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
catch
(
NoSuchMethodException
e
)
{
}
}
}
public
abstract
Object
get
(
)
;
public
static
class
HardReference
extends
WeakishReference
{
private
Object
object
;
public
HardReference
(
Object
object
)
{
this
.
object
=
object
;
}
public
Object
get
(
)
{
return
object
;
}
}
}
