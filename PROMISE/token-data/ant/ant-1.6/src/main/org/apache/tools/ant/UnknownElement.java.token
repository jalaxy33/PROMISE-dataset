package
org
.
apache
.
tools
.
ant
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
io
.
IOException
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
PreSetDef
;
public
class
UnknownElement
extends
Task
{
private
String
elementName
;
private
String
namespace
;
private
String
qname
;
private
Object
realThing
;
private
List
children
=
null
;
private
boolean
presetDefed
=
false
;
public
UnknownElement
(
String
elementName
)
{
this
.
elementName
=
elementName
;
}
public
String
getTag
(
)
{
return
elementName
;
}
public
String
getNamespace
(
)
{
return
namespace
;
}
public
void
setNamespace
(
String
namespace
)
{
if
(
namespace
.
equals
(
ProjectHelper
.
ANT_CURRENT_URI
)
)
{
ComponentHelper
helper
=
ComponentHelper
.
getComponentHelper
(
getProject
(
)
)
;
namespace
=
helper
.
getCurrentAntlibUri
(
)
;
}
this
.
namespace
=
namespace
;
}
public
String
getQName
(
)
{
return
qname
;
}
public
void
setQName
(
String
qname
)
{
this
.
qname
=
qname
;
}
public
RuntimeConfigurable
getWrapper
(
)
{
return
super
.
getWrapper
(
)
;
}
public
void
maybeConfigure
(
)
throws
BuildException
{
configure
(
makeObject
(
this
,
getWrapper
(
)
)
)
;
}
public
void
configure
(
Object
realObject
)
{
realThing
=
realObject
;
getWrapper
(
)
.
setProxy
(
realThing
)
;
Task
task
=
null
;
if
(
realThing
instanceof
Task
)
{
task
=
(
Task
)
realThing
;
task
.
setRuntimeConfigurableWrapper
(
getWrapper
(
)
)
;
this
.
getOwningTarget
(
)
.
replaceChild
(
this
,
(
Task
)
realThing
)
;
}
handleChildren
(
realThing
,
getWrapper
(
)
)
;
if
(
task
!=
null
)
{
task
.
maybeConfigure
(
)
;
}
else
{
getWrapper
(
)
.
maybeConfigure
(
getProject
(
)
)
;
}
}
protected
void
handleOutput
(
String
output
)
{
if
(
realThing
instanceof
Task
)
{
(
(
Task
)
realThing
)
.
handleOutput
(
output
)
;
}
else
{
super
.
handleOutput
(
output
)
;
}
}
protected
int
handleInput
(
byte
[
]
buffer
,
int
offset
,
int
length
)
throws
IOException
{
if
(
realThing
instanceof
Task
)
{
return
(
(
Task
)
realThing
)
.
handleInput
(
buffer
,
offset
,
length
)
;
}
else
{
return
super
.
handleInput
(
buffer
,
offset
,
length
)
;
}
}
protected
void
handleFlush
(
String
output
)
{
if
(
realThing
instanceof
Task
)
{
(
(
Task
)
realThing
)
.
handleFlush
(
output
)
;
}
else
{
super
.
handleFlush
(
output
)
;
}
}
protected
void
handleErrorOutput
(
String
output
)
{
if
(
realThing
instanceof
Task
)
{
(
(
Task
)
realThing
)
.
handleErrorOutput
(
output
)
;
}
else
{
super
.
handleErrorOutput
(
output
)
;
}
}
protected
void
handleErrorFlush
(
String
output
)
{
if
(
realThing
instanceof
Task
)
{
(
(
Task
)
realThing
)
.
handleErrorOutput
(
output
)
;
}
else
{
super
.
handleErrorOutput
(
output
)
;
}
}
public
void
execute
(
)
{
if
(
realThing
==
null
)
{
throw
new
BuildException
(
"Could not create task of type: "
+
elementName
,
getLocation
(
)
)
;
}
if
(
realThing
instanceof
Task
)
{
(
(
Task
)
realThing
)
.
execute
(
)
;
}
realThing
=
null
;
}
public
void
addChild
(
UnknownElement
child
)
{
if
(
children
==
null
)
{
children
=
new
ArrayList
(
)
;
}
children
.
add
(
child
)
;
}
protected
void
handleChildren
(
Object
parent
,
RuntimeConfigurable
parentWrapper
)
throws
BuildException
{
if
(
parent
instanceof
TypeAdapter
)
{
parent
=
(
(
TypeAdapter
)
parent
)
.
getProxy
(
)
;
}
String
parentUri
=
getNamespace
(
)
;
Class
parentClass
=
parent
.
getClass
(
)
;
IntrospectionHelper
ih
=
IntrospectionHelper
.
getHelper
(
parentClass
)
;
if
(
children
!=
null
)
{
Iterator
it
=
children
.
iterator
(
)
;
for
(
int
i
=
0
;
it
.
hasNext
(
)
;
i
++
)
{
RuntimeConfigurable
childWrapper
=
parentWrapper
.
getChild
(
i
)
;
UnknownElement
child
=
(
UnknownElement
)
it
.
next
(
)
;
if
(
!
handleChild
(
parentUri
,
ih
,
parent
,
child
,
childWrapper
)
)
{
if
(
!
(
parent
instanceof
TaskContainer
)
)
{
ih
.
throwNotSupported
(
getProject
(
)
,
parent
,
child
.
getTag
(
)
)
;
}
else
{
TaskContainer
container
=
(
TaskContainer
)
parent
;
container
.
addTask
(
child
)
;
}
}
}
}
}
protected
String
getComponentName
(
)
{
return
ProjectHelper
.
genComponentName
(
getNamespace
(
)
,
getTag
(
)
)
;
}
public
void
applyPreSet
(
UnknownElement
u
)
{
if
(
presetDefed
)
{
return
;
}
getWrapper
(
)
.
applyPreSet
(
u
.
getWrapper
(
)
)
;
if
(
u
.
children
!=
null
)
{
List
newChildren
=
new
ArrayList
(
)
;
newChildren
.
addAll
(
u
.
children
)
;
if
(
children
!=
null
)
{
newChildren
.
addAll
(
children
)
;
}
children
=
newChildren
;
}
presetDefed
=
true
;
}
protected
Object
makeObject
(
UnknownElement
ue
,
RuntimeConfigurable
w
)
{
ComponentHelper
helper
=
ComponentHelper
.
getComponentHelper
(
getProject
(
)
)
;
String
name
=
ue
.
getComponentName
(
)
;
Object
o
=
helper
.
createComponent
(
ue
,
ue
.
getNamespace
(
)
,
name
)
;
if
(
o
==
null
)
{
throw
getNotFoundException
(
"task or type"
,
name
)
;
}
if
(
o
instanceof
PreSetDef
.
PreSetDefinition
)
{
PreSetDef
.
PreSetDefinition
def
=
(
PreSetDef
.
PreSetDefinition
)
o
;
o
=
def
.
createObject
(
ue
.
getProject
(
)
)
;
ue
.
applyPreSet
(
def
.
getPreSets
(
)
)
;
if
(
o
instanceof
Task
)
{
Task
task
=
(
Task
)
o
;
task
.
setTaskType
(
ue
.
getTaskType
(
)
)
;
task
.
setTaskName
(
ue
.
getTaskName
(
)
)
;
}
}
if
(
o
instanceof
Task
)
{
Task
task
=
(
Task
)
o
;
task
.
setOwningTarget
(
getOwningTarget
(
)
)
;
task
.
init
(
)
;
}
return
o
;
}
protected
Task
makeTask
(
UnknownElement
ue
,
RuntimeConfigurable
w
)
{
Task
task
=
getProject
(
)
.
createTask
(
ue
.
getTag
(
)
)
;
if
(
task
!=
null
)
{
task
.
setLocation
(
getLocation
(
)
)
;
task
.
setOwningTarget
(
getOwningTarget
(
)
)
;
task
.
init
(
)
;
}
return
task
;
}
protected
BuildException
getNotFoundException
(
String
what
,
String
elementName
)
{
String
lSep
=
System
.
getProperty
(
"line.separator"
)
;
String
msg
=
"Could not create "
+
what
+
" of type: "
+
elementName
+
"."
+
lSep
+
lSep
+
"Ant could not find the task or a class this "
+
"task relies upon."
+
lSep
+
lSep
+
"This is common and has a number of causes; the usual "
+
lSep
+
"solutions are to read the manual pages then download and"
+
lSep
+
"install needed JAR files, or fix the build file: "
+
lSep
+
" - You have misspelt '"
+
elementName
+
"'."
+
lSep
+
"   Fix: check your spelling."
+
lSep
+
" - The task needs an external JAR file to execute"
+
lSep
+
"   and this is not found at the right place in the classpath."
+
lSep
+
"   Fix: check the documentation for dependencies."
+
lSep
+
"   Fix: declare the task."
+
lSep
+
" - The task is an Ant optional task and optional.jar is absent"
+
lSep
+
"   Fix: look for optional.jar in ANT_HOME/lib, download if needed"
+
lSep
+
" - The task was not built into optional.jar as dependent"
+
lSep
+
"   libraries were not found at build time."
+
lSep
+
"   Fix: look in the JAR to verify, then rebuild with the needed"
+
lSep
+
"   libraries, or download a release version from apache.org"
+
lSep
+
" - The build file was written for a later version of Ant"
+
lSep
+
"   Fix: upgrade to at least the latest release version of Ant"
+
lSep
+
" - The task is not an Ant core or optional task "
+
lSep
+
"   and needs to be declared using <taskdef>."
+
lSep
+
lSep
+
"Remember that for JAR files to be visible to Ant tasks implemented"
+
lSep
+
"in ANT_HOME/lib, the files must be in the same directory or on the"
+
lSep
+
"classpath"
+
lSep
+
lSep
+
"Please neither file bug reports on this problem, nor email the"
+
lSep
+
"Ant mailing lists, until all of these causes have been explored,"
+
lSep
+
"as this is not an Ant bug."
;
return
new
BuildException
(
msg
,
getLocation
(
)
)
;
}
public
String
getTaskName
(
)
{
return
realThing
==
null
||
!
(
realThing
instanceof
Task
)
?
super
.
getTaskName
(
)
:
(
(
Task
)
realThing
)
.
getTaskName
(
)
;
}
public
Task
getTask
(
)
{
if
(
realThing
instanceof
Task
)
{
return
(
Task
)
realThing
;
}
return
null
;
}
public
Object
getRealThing
(
)
{
return
realThing
;
}
private
boolean
handleChild
(
String
parentUri
,
IntrospectionHelper
ih
,
Object
parent
,
UnknownElement
child
,
RuntimeConfigurable
childWrapper
)
{
String
childName
=
ProjectHelper
.
genComponentName
(
child
.
getNamespace
(
)
,
child
.
getTag
(
)
)
;
if
(
ih
.
supportsNestedElement
(
parentUri
,
childName
)
)
{
IntrospectionHelper
.
Creator
creator
=
ih
.
getElementCreator
(
getProject
(
)
,
parentUri
,
parent
,
childName
,
child
)
;
creator
.
setPolyType
(
childWrapper
.
getPolyType
(
)
)
;
Object
realChild
=
creator
.
create
(
)
;
if
(
realChild
instanceof
PreSetDef
.
PreSetDefinition
)
{
PreSetDef
.
PreSetDefinition
def
=
(
PreSetDef
.
PreSetDefinition
)
realChild
;
realChild
=
creator
.
getRealObject
(
)
;
child
.
applyPreSet
(
def
.
getPreSets
(
)
)
;
}
childWrapper
.
setCreator
(
creator
)
;
childWrapper
.
setProxy
(
realChild
)
;
if
(
realChild
instanceof
Task
)
{
Task
childTask
=
(
Task
)
realChild
;
childTask
.
setRuntimeConfigurableWrapper
(
childWrapper
)
;
childTask
.
setTaskName
(
childName
)
;
childTask
.
setTaskType
(
childName
)
;
childTask
.
setLocation
(
child
.
getLocation
(
)
)
;
}
child
.
handleChildren
(
realChild
,
childWrapper
)
;
return
true
;
}
return
false
;
}
public
boolean
similar
(
Object
obj
)
{
if
(
obj
==
null
)
{
return
false
;
}
if
(
!
getClass
(
)
.
getName
(
)
.
equals
(
obj
.
getClass
(
)
.
getName
(
)
)
)
{
return
false
;
}
UnknownElement
other
=
(
UnknownElement
)
obj
;
if
(
!
equalsString
(
elementName
,
other
.
elementName
)
)
{
return
false
;
}
if
(
!
namespace
.
equals
(
other
.
namespace
)
)
{
return
false
;
}
if
(
!
qname
.
equals
(
other
.
qname
)
)
{
return
false
;
}
if
(
!
getWrapper
(
)
.
getAttributeMap
(
)
.
equals
(
other
.
getWrapper
(
)
.
getAttributeMap
(
)
)
)
{
return
false
;
}
if
(
!
getWrapper
(
)
.
getText
(
)
.
toString
(
)
.
equals
(
other
.
getWrapper
(
)
.
getText
(
)
.
toString
(
)
)
)
{
return
false
;
}
if
(
children
==
null
||
children
.
size
(
)
==
0
)
{
return
other
.
children
==
null
||
other
.
children
.
size
(
)
==
0
;
}
if
(
other
.
children
==
null
)
{
return
false
;
}
if
(
children
.
size
(
)
!=
other
.
children
.
size
(
)
)
{
return
false
;
}
for
(
int
i
=
0
;
i
<
children
.
size
(
)
;
++
i
)
{
UnknownElement
child
=
(
UnknownElement
)
children
.
get
(
i
)
;
if
(
!
child
.
similar
(
other
.
children
.
get
(
i
)
)
)
{
return
false
;
}
}
return
true
;
}
private
boolean
equalsString
(
String
a
,
String
b
)
{
if
(
a
==
null
)
{
return
b
==
null
;
}
return
a
.
equals
(
b
)
;
}
}
