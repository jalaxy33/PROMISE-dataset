package
org
.
apache
.
tools
.
ant
.
util
;
import
java
.
io
.
File
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
types
.
ResourceFactory
;
import
org
.
apache
.
tools
.
ant
.
types
.
Resource
;
public
class
SourceFileScanner
implements
ResourceFactory
{
protected
Task
task
;
private
FileUtils
fileUtils
;
private
File
destDir
;
public
SourceFileScanner
(
Task
task
)
{
this
.
task
=
task
;
fileUtils
=
FileUtils
.
newFileUtils
(
)
;
}
public
String
[
]
restrict
(
String
[
]
files
,
File
srcDir
,
File
destDir
,
FileNameMapper
mapper
)
{
this
.
destDir
=
destDir
;
Vector
v
=
new
Vector
(
)
;
for
(
int
i
=
0
;
i
<
files
.
length
;
i
++
)
{
File
src
=
fileUtils
.
resolveFile
(
srcDir
,
files
[
i
]
)
;
v
.
addElement
(
new
Resource
(
files
[
i
]
,
src
.
exists
(
)
,
src
.
lastModified
(
)
,
src
.
isDirectory
(
)
)
)
;
}
Resource
[
]
sourceresources
=
new
Resource
[
v
.
size
(
)
]
;
v
.
copyInto
(
sourceresources
)
;
Resource
[
]
outofdate
=
ResourceUtils
.
selectOutOfDateSources
(
task
,
sourceresources
,
mapper
,
this
)
;
String
[
]
result
=
new
String
[
outofdate
.
length
]
;
for
(
int
counter
=
0
;
counter
<
outofdate
.
length
;
counter
++
)
{
result
[
counter
]
=
outofdate
[
counter
]
.
getName
(
)
;
}
return
result
;
}
public
File
[
]
restrictAsFiles
(
String
[
]
files
,
File
srcDir
,
File
destDir
,
FileNameMapper
mapper
)
{
String
[
]
res
=
restrict
(
files
,
srcDir
,
destDir
,
mapper
)
;
File
[
]
result
=
new
File
[
res
.
length
]
;
for
(
int
i
=
0
;
i
<
res
.
length
;
i
++
)
{
result
[
i
]
=
new
File
(
srcDir
,
res
[
i
]
)
;
}
return
result
;
}
public
Resource
getResource
(
String
name
)
{
File
src
=
fileUtils
.
resolveFile
(
destDir
,
name
)
;
return
new
Resource
(
name
,
src
.
exists
(
)
,
src
.
lastModified
(
)
,
src
.
isDirectory
(
)
)
;
}
}
