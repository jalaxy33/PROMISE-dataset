package
org
.
apache
.
tools
.
ant
.
taskdefs
.
email
;
import
java
.
io
.
File
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
StringTokenizer
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
public
class
EmailTask
extends
Task
{
public
static
final
String
AUTO
=
"auto"
;
public
static
final
String
MIME
=
"mime"
;
public
static
final
String
UU
=
"uu"
;
public
static
final
String
PLAIN
=
"plain"
;
public
static
class
Encoding
extends
EnumeratedAttribute
{
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
AUTO
,
MIME
,
UU
,
PLAIN
}
;
}
}
private
String
encoding
=
AUTO
;
private
String
host
=
"localhost"
;
private
int
port
=
25
;
private
String
subject
=
null
;
private
Message
message
=
null
;
private
boolean
failOnError
=
true
;
private
boolean
includeFileNames
=
false
;
private
String
messageMimeType
=
null
;
private
EmailAddress
from
=
null
;
private
Vector
replyToList
=
new
Vector
(
)
;
private
Vector
toList
=
new
Vector
(
)
;
private
Vector
ccList
=
new
Vector
(
)
;
private
Vector
bccList
=
new
Vector
(
)
;
private
Vector
files
=
new
Vector
(
)
;
private
Vector
filesets
=
new
Vector
(
)
;
private
String
charset
=
null
;
private
String
user
=
null
;
private
String
password
=
null
;
private
boolean
SSL
=
false
;
public
void
setUser
(
String
user
)
{
this
.
user
=
user
;
}
public
void
setPassword
(
String
password
)
{
this
.
password
=
password
;
}
public
void
setSSL
(
boolean
SSL
)
{
this
.
SSL
=
SSL
;
}
public
void
setEncoding
(
Encoding
encoding
)
{
this
.
encoding
=
encoding
.
getValue
(
)
;
}
public
void
setMailport
(
int
port
)
{
this
.
port
=
port
;
}
public
void
setMailhost
(
String
host
)
{
this
.
host
=
host
;
}
public
void
setSubject
(
String
subject
)
{
this
.
subject
=
subject
;
}
public
void
setMessage
(
String
message
)
{
if
(
this
.
message
!=
null
)
{
throw
new
BuildException
(
"Only one message can be sent in an "
+
"email"
)
;
}
this
.
message
=
new
Message
(
message
)
;
this
.
message
.
setProject
(
getProject
(
)
)
;
}
public
void
setMessageFile
(
File
file
)
{
if
(
this
.
message
!=
null
)
{
throw
new
BuildException
(
"Only one message can be sent in an "
+
"email"
)
;
}
this
.
message
=
new
Message
(
file
)
;
this
.
message
.
setProject
(
getProject
(
)
)
;
}
public
void
setMessageMimeType
(
String
type
)
{
this
.
messageMimeType
=
type
;
}
public
void
addMessage
(
Message
message
)
throws
BuildException
{
if
(
this
.
message
!=
null
)
{
throw
new
BuildException
(
"Only one message can be sent in an "
+
"email"
)
;
}
this
.
message
=
message
;
}
public
void
addFrom
(
EmailAddress
address
)
{
if
(
this
.
from
!=
null
)
{
throw
new
BuildException
(
"Emails can only be from one address"
)
;
}
this
.
from
=
address
;
}
public
void
setFrom
(
String
address
)
{
if
(
this
.
from
!=
null
)
{
throw
new
BuildException
(
"Emails can only be from one address"
)
;
}
this
.
from
=
new
EmailAddress
(
address
)
;
}
public
void
addReplyTo
(
EmailAddress
address
)
{
this
.
replyToList
.
add
(
address
)
;
}
public
void
setReplyTo
(
String
address
)
{
this
.
replyToList
.
add
(
new
EmailAddress
(
address
)
)
;
}
public
void
addTo
(
EmailAddress
address
)
{
toList
.
addElement
(
address
)
;
}
public
void
setToList
(
String
list
)
{
StringTokenizer
tokens
=
new
StringTokenizer
(
list
,
","
)
;
while
(
tokens
.
hasMoreTokens
(
)
)
{
toList
.
addElement
(
new
EmailAddress
(
tokens
.
nextToken
(
)
)
)
;
}
}
public
void
addCc
(
EmailAddress
address
)
{
ccList
.
addElement
(
address
)
;
}
public
void
setCcList
(
String
list
)
{
StringTokenizer
tokens
=
new
StringTokenizer
(
list
,
","
)
;
while
(
tokens
.
hasMoreTokens
(
)
)
{
ccList
.
addElement
(
new
EmailAddress
(
tokens
.
nextToken
(
)
)
)
;
}
}
public
void
addBcc
(
EmailAddress
address
)
{
bccList
.
addElement
(
address
)
;
}
public
void
setBccList
(
String
list
)
{
StringTokenizer
tokens
=
new
StringTokenizer
(
list
,
","
)
;
while
(
tokens
.
hasMoreTokens
(
)
)
{
bccList
.
addElement
(
new
EmailAddress
(
tokens
.
nextToken
(
)
)
)
;
}
}
public
void
setFailOnError
(
boolean
failOnError
)
{
this
.
failOnError
=
failOnError
;
}
public
void
setFiles
(
String
filenames
)
{
StringTokenizer
t
=
new
StringTokenizer
(
filenames
,
", "
)
;
while
(
t
.
hasMoreTokens
(
)
)
{
files
.
addElement
(
getProject
(
)
.
resolveFile
(
t
.
nextToken
(
)
)
)
;
}
}
public
void
addFileset
(
FileSet
fs
)
{
filesets
.
addElement
(
fs
)
;
}
public
void
setIncludefilenames
(
boolean
includeFileNames
)
{
this
.
includeFileNames
=
includeFileNames
;
}
public
boolean
getIncludeFileNames
(
)
{
return
includeFileNames
;
}
public
void
execute
(
)
{
Message
savedMessage
=
message
;
Vector
savedFiles
=
(
Vector
)
files
.
clone
(
)
;
try
{
Mailer
mailer
=
null
;
boolean
autoFound
=
false
;
if
(
encoding
.
equals
(
MIME
)
||
(
encoding
.
equals
(
AUTO
)
&&
!
autoFound
)
)
{
try
{
mailer
=
(
Mailer
)
Class
.
forName
(
"org.apache.tools.ant.taskdefs.email.MimeMailer"
)
.
newInstance
(
)
;
autoFound
=
true
;
log
(
"Using MIME mail"
,
Project
.
MSG_VERBOSE
)
;
}
catch
(
Throwable
e
)
{
log
(
"Failed to initialise MIME mail: "
+
e
.
getMessage
(
)
,
Project
.
MSG_WARN
)
;
}
}
if
(
autoFound
==
false
&&
(
(
user
!=
null
)
||
(
password
!=
null
)
)
&&
(
encoding
.
equals
(
UU
)
||
encoding
.
equals
(
PLAIN
)
)
)
{
throw
new
BuildException
(
"SMTP auth only possible with MIME mail"
)
;
}
if
(
autoFound
==
false
&&
(
SSL
)
&&
(
encoding
.
equals
(
UU
)
||
encoding
.
equals
(
PLAIN
)
)
)
{
throw
new
BuildException
(
"SSL only possible with MIME mail"
)
;
}
if
(
encoding
.
equals
(
UU
)
||
(
encoding
.
equals
(
AUTO
)
&&
!
autoFound
)
)
{
try
{
mailer
=
(
Mailer
)
Class
.
forName
(
"org.apache.tools.ant.taskdefs.email.UUMailer"
)
.
newInstance
(
)
;
autoFound
=
true
;
log
(
"Using UU mail"
,
Project
.
MSG_VERBOSE
)
;
}
catch
(
Throwable
e
)
{
log
(
"Failed to initialise UU mail"
,
Project
.
MSG_WARN
)
;
}
}
if
(
encoding
.
equals
(
PLAIN
)
||
(
encoding
.
equals
(
AUTO
)
&&
!
autoFound
)
)
{
mailer
=
new
PlainMailer
(
)
;
autoFound
=
true
;
log
(
"Using plain mail"
,
Project
.
MSG_VERBOSE
)
;
}
if
(
mailer
==
null
)
{
throw
new
BuildException
(
"Failed to initialise encoding: "
+
encoding
)
;
}
if
(
message
==
null
)
{
message
=
new
Message
(
)
;
message
.
setProject
(
getProject
(
)
)
;
}
if
(
from
==
null
||
from
.
getAddress
(
)
==
null
)
{
throw
new
BuildException
(
"A from element is required"
)
;
}
if
(
toList
.
isEmpty
(
)
&&
ccList
.
isEmpty
(
)
&&
bccList
.
isEmpty
(
)
)
{
throw
new
BuildException
(
"At least one of to,cc or bcc must "
+
"be supplied"
)
;
}
if
(
messageMimeType
!=
null
)
{
if
(
message
.
isMimeTypeSpecified
(
)
)
{
throw
new
BuildException
(
"The mime type can only be "
+
"specified in one location"
)
;
}
else
{
message
.
setMimeType
(
messageMimeType
)
;
}
}
if
(
charset
!=
null
)
{
if
(
message
.
getCharset
(
)
!=
null
)
{
throw
new
BuildException
(
"The charset can only be "
+
"specified in one location"
)
;
}
else
{
message
.
setCharset
(
charset
)
;
}
}
Enumeration
e
=
filesets
.
elements
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
FileSet
fs
=
(
FileSet
)
e
.
nextElement
(
)
;
DirectoryScanner
ds
=
fs
.
getDirectoryScanner
(
getProject
(
)
)
;
String
[
]
includedFiles
=
ds
.
getIncludedFiles
(
)
;
File
baseDir
=
ds
.
getBasedir
(
)
;
for
(
int
j
=
0
;
j
<
includedFiles
.
length
;
++
j
)
{
File
file
=
new
File
(
baseDir
,
includedFiles
[
j
]
)
;
files
.
addElement
(
file
)
;
}
}
log
(
"Sending email: "
+
subject
,
Project
.
MSG_INFO
)
;
log
(
"From "
+
from
,
Project
.
MSG_VERBOSE
)
;
log
(
"ReplyTo "
+
replyToList
,
Project
.
MSG_VERBOSE
)
;
log
(
"To "
+
toList
,
Project
.
MSG_VERBOSE
)
;
log
(
"Cc "
+
ccList
,
Project
.
MSG_VERBOSE
)
;
log
(
"Bcc "
+
bccList
,
Project
.
MSG_VERBOSE
)
;
mailer
.
setHost
(
host
)
;
mailer
.
setPort
(
port
)
;
mailer
.
setUser
(
user
)
;
mailer
.
setPassword
(
password
)
;
mailer
.
setSSL
(
SSL
)
;
mailer
.
setMessage
(
message
)
;
mailer
.
setFrom
(
from
)
;
mailer
.
setReplyToList
(
replyToList
)
;
mailer
.
setToList
(
toList
)
;
mailer
.
setCcList
(
ccList
)
;
mailer
.
setBccList
(
bccList
)
;
mailer
.
setFiles
(
files
)
;
mailer
.
setSubject
(
subject
)
;
mailer
.
setTask
(
this
)
;
mailer
.
setIncludeFileNames
(
includeFileNames
)
;
mailer
.
send
(
)
;
int
count
=
files
.
size
(
)
;
log
(
"Sent email with "
+
count
+
" attachment"
+
(
count
==
1
?
""
:
"s"
)
,
Project
.
MSG_INFO
)
;
}
catch
(
BuildException
e
)
{
log
(
"Failed to send email"
,
Project
.
MSG_WARN
)
;
if
(
failOnError
)
{
throw
e
;
}
}
catch
(
Exception
e
)
{
log
(
"Failed to send email"
,
Project
.
MSG_WARN
)
;
if
(
failOnError
)
{
throw
new
BuildException
(
e
)
;
}
}
finally
{
message
=
savedMessage
;
files
=
savedFiles
;
}
}
public
void
setCharset
(
String
charset
)
{
this
.
charset
=
charset
;
}
public
String
getCharset
(
)
{
return
charset
;
}
}
