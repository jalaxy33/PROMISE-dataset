package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
PrintWriter
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
public
class
ManifestTask
extends
Task
{
private
Manifest
nestedManifest
=
new
Manifest
(
)
;
private
File
manifestFile
;
private
Mode
mode
;
private
String
encoding
;
public
static
class
Mode
extends
EnumeratedAttribute
{
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
"update"
,
"replace"
}
;
}
}
public
ManifestTask
(
)
{
mode
=
new
Mode
(
)
;
mode
.
setValue
(
"replace"
)
;
}
public
void
addConfiguredSection
(
Manifest
.
Section
section
)
throws
ManifestException
{
nestedManifest
.
addConfiguredSection
(
section
)
;
}
public
void
addConfiguredAttribute
(
Manifest
.
Attribute
attribute
)
throws
ManifestException
{
nestedManifest
.
addConfiguredAttribute
(
attribute
)
;
}
public
void
setFile
(
File
f
)
{
manifestFile
=
f
;
}
public
void
setEncoding
(
String
encoding
)
{
this
.
encoding
=
encoding
;
}
public
void
setMode
(
Mode
m
)
{
mode
=
m
;
}
public
void
execute
(
)
throws
BuildException
{
if
(
manifestFile
==
null
)
{
throw
new
BuildException
(
"the file attribute is required"
)
;
}
Manifest
toWrite
=
Manifest
.
getDefaultManifest
(
)
;
Manifest
current
=
null
;
BuildException
error
=
null
;
if
(
manifestFile
.
exists
(
)
)
{
FileInputStream
fis
=
null
;
InputStreamReader
isr
=
null
;
try
{
fis
=
new
FileInputStream
(
manifestFile
)
;
if
(
encoding
==
null
)
{
isr
=
new
InputStreamReader
(
fis
,
"UTF-8"
)
;
}
else
{
isr
=
new
InputStreamReader
(
fis
,
encoding
)
;
}
current
=
new
Manifest
(
isr
)
;
}
catch
(
ManifestException
m
)
{
error
=
new
BuildException
(
"Existing manifest "
+
manifestFile
+
" is invalid"
,
m
,
getLocation
(
)
)
;
}
catch
(
IOException
e
)
{
error
=
new
BuildException
(
"Failed to read "
+
manifestFile
,
e
,
getLocation
(
)
)
;
}
finally
{
if
(
isr
!=
null
)
{
try
{
isr
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
}
}
}
try
{
if
(
mode
.
getValue
(
)
.
equals
(
"update"
)
&&
manifestFile
.
exists
(
)
)
{
if
(
current
!=
null
)
{
toWrite
.
merge
(
current
)
;
}
else
if
(
error
!=
null
)
{
throw
error
;
}
}
toWrite
.
merge
(
nestedManifest
)
;
}
catch
(
ManifestException
m
)
{
throw
new
BuildException
(
"Manifest is invalid"
,
m
,
getLocation
(
)
)
;
}
if
(
toWrite
.
equals
(
current
)
)
{
log
(
"Manifest has not changed, do not recreate"
,
Project
.
MSG_VERBOSE
)
;
return
;
}
PrintWriter
w
=
null
;
try
{
FileOutputStream
fos
=
new
FileOutputStream
(
manifestFile
)
;
OutputStreamWriter
osw
=
new
OutputStreamWriter
(
fos
,
"UTF-8"
)
;
w
=
new
PrintWriter
(
osw
)
;
toWrite
.
write
(
w
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
"Failed to write "
+
manifestFile
,
e
,
getLocation
(
)
)
;
}
finally
{
if
(
w
!=
null
)
{
w
.
close
(
)
;
}
}
}
}
