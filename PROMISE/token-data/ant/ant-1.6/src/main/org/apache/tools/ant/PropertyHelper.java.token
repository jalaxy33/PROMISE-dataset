package
org
.
apache
.
tools
.
ant
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Enumeration
;
public
class
PropertyHelper
{
private
Project
project
;
private
PropertyHelper
next
;
private
Hashtable
properties
=
new
Hashtable
(
)
;
private
Hashtable
userProperties
=
new
Hashtable
(
)
;
private
Hashtable
inheritedProperties
=
new
Hashtable
(
)
;
protected
PropertyHelper
(
)
{
}
public
void
setProject
(
Project
p
)
{
this
.
project
=
p
;
}
public
void
setNext
(
PropertyHelper
next
)
{
this
.
next
=
next
;
}
public
PropertyHelper
getNext
(
)
{
return
next
;
}
public
static
synchronized
PropertyHelper
getPropertyHelper
(
Project
project
)
{
PropertyHelper
helper
=
(
PropertyHelper
)
project
.
getReference
(
"ant.PropertyHelper"
)
;
if
(
helper
!=
null
)
{
return
helper
;
}
helper
=
new
PropertyHelper
(
)
;
helper
.
setProject
(
project
)
;
project
.
addReference
(
"ant.PropertyHelper"
,
helper
)
;
return
helper
;
}
public
boolean
setPropertyHook
(
String
ns
,
String
name
,
Object
value
,
boolean
inherited
,
boolean
user
,
boolean
isNew
)
{
if
(
getNext
(
)
!=
null
)
{
boolean
subst
=
getNext
(
)
.
setPropertyHook
(
ns
,
name
,
value
,
inherited
,
user
,
isNew
)
;
if
(
subst
)
{
return
true
;
}
}
return
false
;
}
public
Object
getPropertyHook
(
String
ns
,
String
name
,
boolean
user
)
{
if
(
getNext
(
)
!=
null
)
{
Object
o
=
getNext
(
)
.
getPropertyHook
(
ns
,
name
,
user
)
;
if
(
o
!=
null
)
{
return
o
;
}
}
if
(
name
.
startsWith
(
"toString:"
)
)
{
name
=
name
.
substring
(
"toString:"
.
length
(
)
)
;
Object
v
=
project
.
getReference
(
name
)
;
if
(
v
==
null
)
{
return
null
;
}
return
v
.
toString
(
)
;
}
return
null
;
}
public
void
parsePropertyString
(
String
value
,
Vector
fragments
,
Vector
propertyRefs
)
throws
BuildException
{
parsePropertyStringDefault
(
value
,
fragments
,
propertyRefs
)
;
}
public
String
replaceProperties
(
String
ns
,
String
value
,
Hashtable
keys
)
throws
BuildException
{
if
(
value
==
null
)
{
return
null
;
}
Vector
fragments
=
new
Vector
(
)
;
Vector
propertyRefs
=
new
Vector
(
)
;
parsePropertyString
(
value
,
fragments
,
propertyRefs
)
;
StringBuffer
sb
=
new
StringBuffer
(
)
;
Enumeration
i
=
fragments
.
elements
(
)
;
Enumeration
j
=
propertyRefs
.
elements
(
)
;
while
(
i
.
hasMoreElements
(
)
)
{
String
fragment
=
(
String
)
i
.
nextElement
(
)
;
if
(
fragment
==
null
)
{
String
propertyName
=
(
String
)
j
.
nextElement
(
)
;
Object
replacement
=
null
;
if
(
keys
!=
null
)
{
replacement
=
keys
.
get
(
propertyName
)
;
}
if
(
replacement
==
null
)
{
replacement
=
getProperty
(
ns
,
propertyName
)
;
}
if
(
replacement
==
null
)
{
project
.
log
(
"Property ${"
+
propertyName
+
"} has not been set"
,
Project
.
MSG_VERBOSE
)
;
}
fragment
=
(
replacement
!=
null
)
?
replacement
.
toString
(
)
:
"${"
+
propertyName
+
"}"
;
}
sb
.
append
(
fragment
)
;
}
return
sb
.
toString
(
)
;
}
public
synchronized
boolean
setProperty
(
String
ns
,
String
name
,
Object
value
,
boolean
verbose
)
{
if
(
null
!=
userProperties
.
get
(
name
)
)
{
if
(
verbose
)
{
project
.
log
(
"Override ignored for user property "
+
name
,
Project
.
MSG_VERBOSE
)
;
}
return
false
;
}
boolean
done
=
setPropertyHook
(
ns
,
name
,
value
,
false
,
false
,
false
)
;
if
(
done
)
{
return
true
;
}
if
(
null
!=
properties
.
get
(
name
)
&&
verbose
)
{
project
.
log
(
"Overriding previous definition of property "
+
name
,
Project
.
MSG_VERBOSE
)
;
}
if
(
verbose
)
{
project
.
log
(
"Setting project property: "
+
name
+
" -> "
+
value
,
Project
.
MSG_DEBUG
)
;
}
properties
.
put
(
name
,
value
)
;
return
true
;
}
public
synchronized
void
setNewProperty
(
String
ns
,
String
name
,
Object
value
)
{
if
(
null
!=
properties
.
get
(
name
)
)
{
project
.
log
(
"Override ignored for property "
+
name
,
Project
.
MSG_VERBOSE
)
;
return
;
}
boolean
done
=
setPropertyHook
(
ns
,
name
,
value
,
false
,
false
,
true
)
;
if
(
done
)
{
return
;
}
project
.
log
(
"Setting project property: "
+
name
+
" -> "
+
value
,
Project
.
MSG_DEBUG
)
;
if
(
name
!=
null
&&
value
!=
null
)
{
properties
.
put
(
name
,
value
)
;
}
}
public
synchronized
void
setUserProperty
(
String
ns
,
String
name
,
Object
value
)
{
project
.
log
(
"Setting ro project property: "
+
name
+
" -> "
+
value
,
Project
.
MSG_DEBUG
)
;
userProperties
.
put
(
name
,
value
)
;
boolean
done
=
setPropertyHook
(
ns
,
name
,
value
,
false
,
true
,
false
)
;
if
(
done
)
{
return
;
}
properties
.
put
(
name
,
value
)
;
}
public
synchronized
void
setInheritedProperty
(
String
ns
,
String
name
,
Object
value
)
{
inheritedProperties
.
put
(
name
,
value
)
;
project
.
log
(
"Setting ro project property: "
+
name
+
" -> "
+
value
,
Project
.
MSG_DEBUG
)
;
userProperties
.
put
(
name
,
value
)
;
boolean
done
=
setPropertyHook
(
ns
,
name
,
value
,
true
,
false
,
false
)
;
if
(
done
)
{
return
;
}
properties
.
put
(
name
,
value
)
;
}
public
synchronized
Object
getProperty
(
String
ns
,
String
name
)
{
if
(
name
==
null
)
{
return
null
;
}
Object
o
=
getPropertyHook
(
ns
,
name
,
false
)
;
if
(
o
!=
null
)
{
return
o
;
}
return
properties
.
get
(
name
)
;
}
public
synchronized
Object
getUserProperty
(
String
ns
,
String
name
)
{
if
(
name
==
null
)
{
return
null
;
}
Object
o
=
getPropertyHook
(
ns
,
name
,
true
)
;
if
(
o
!=
null
)
{
return
o
;
}
return
userProperties
.
get
(
name
)
;
}
public
Hashtable
getProperties
(
)
{
Hashtable
propertiesCopy
=
new
Hashtable
(
)
;
Enumeration
e
=
properties
.
keys
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
Object
name
=
e
.
nextElement
(
)
;
Object
value
=
properties
.
get
(
name
)
;
propertiesCopy
.
put
(
name
,
value
)
;
}
return
propertiesCopy
;
}
public
Hashtable
getUserProperties
(
)
{
Hashtable
propertiesCopy
=
new
Hashtable
(
)
;
Enumeration
e
=
userProperties
.
keys
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
Object
name
=
e
.
nextElement
(
)
;
Object
value
=
properties
.
get
(
name
)
;
propertiesCopy
.
put
(
name
,
value
)
;
}
return
propertiesCopy
;
}
public
void
copyInheritedProperties
(
Project
other
)
{
Enumeration
e
=
inheritedProperties
.
keys
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
String
arg
=
e
.
nextElement
(
)
.
toString
(
)
;
if
(
other
.
getUserProperty
(
arg
)
!=
null
)
{
continue
;
}
Object
value
=
inheritedProperties
.
get
(
arg
)
;
other
.
setInheritedProperty
(
arg
,
value
.
toString
(
)
)
;
}
}
public
void
copyUserProperties
(
Project
other
)
{
Enumeration
e
=
userProperties
.
keys
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
Object
arg
=
e
.
nextElement
(
)
;
if
(
inheritedProperties
.
containsKey
(
arg
)
)
{
continue
;
}
Object
value
=
userProperties
.
get
(
arg
)
;
other
.
setUserProperty
(
arg
.
toString
(
)
,
value
.
toString
(
)
)
;
}
}
static
void
parsePropertyStringDefault
(
String
value
,
Vector
fragments
,
Vector
propertyRefs
)
throws
BuildException
{
int
prev
=
0
;
int
pos
;
while
(
(
pos
=
value
.
indexOf
(
"$"
,
prev
)
)
>=
0
)
{
if
(
pos
>
0
)
{
fragments
.
addElement
(
value
.
substring
(
prev
,
pos
)
)
;
}
if
(
pos
==
(
value
.
length
(
)
-
1
)
)
{
fragments
.
addElement
(
"$"
)
;
prev
=
pos
+
1
;
}
else
if
(
value
.
charAt
(
pos
+
1
)
!=
'{'
)
{
if
(
value
.
charAt
(
pos
+
1
)
==
'$'
)
{
fragments
.
addElement
(
"$"
)
;
prev
=
pos
+
2
;
}
else
{
fragments
.
addElement
(
value
.
substring
(
pos
,
pos
+
2
)
)
;
prev
=
pos
+
2
;
}
}
else
{
int
endName
=
value
.
indexOf
(
'}'
,
pos
)
;
if
(
endName
<
0
)
{
throw
new
BuildException
(
"Syntax error in property: "
+
value
)
;
}
String
propertyName
=
value
.
substring
(
pos
+
2
,
endName
)
;
fragments
.
addElement
(
null
)
;
propertyRefs
.
addElement
(
propertyName
)
;
prev
=
endName
+
1
;
}
}
if
(
prev
<
value
.
length
(
)
)
{
fragments
.
addElement
(
value
.
substring
(
prev
)
)
;
}
}
}
