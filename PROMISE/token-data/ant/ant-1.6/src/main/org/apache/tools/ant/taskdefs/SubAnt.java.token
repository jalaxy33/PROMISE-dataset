package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Enumeration
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
types
.
DirSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileList
;
import
org
.
apache
.
tools
.
ant
.
types
.
PropertySet
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
public
class
SubAnt
extends
Task
{
private
Path
buildpath
;
private
String
target
=
null
;
private
String
antfile
=
"build.xml"
;
private
File
genericantfile
=
null
;
private
boolean
inheritAll
=
false
;
private
boolean
inheritRefs
=
false
;
private
boolean
failOnError
=
true
;
private
String
output
=
null
;
private
Vector
properties
=
new
Vector
(
)
;
private
Vector
references
=
new
Vector
(
)
;
private
Vector
propertySets
=
new
Vector
(
)
;
public
void
execute
(
)
{
if
(
buildpath
==
null
)
{
throw
new
BuildException
(
"No buildpath specified"
)
;
}
final
String
[
]
filenames
=
buildpath
.
list
(
)
;
final
int
count
=
filenames
.
length
;
if
(
count
<
1
)
{
log
(
"No sub-builds to iterate on"
,
Project
.
MSG_WARN
)
;
return
;
}
BuildException
buildException
=
null
;
for
(
int
i
=
0
;
i
<
count
;
++
i
)
{
File
file
=
null
;
Throwable
thrownException
=
null
;
try
{
File
directory
=
null
;
file
=
new
File
(
filenames
[
i
]
)
;
if
(
file
.
isDirectory
(
)
)
{
if
(
genericantfile
!=
null
)
{
directory
=
file
;
file
=
genericantfile
;
}
else
{
file
=
new
File
(
file
,
antfile
)
;
}
}
execute
(
file
,
directory
)
;
}
catch
(
RuntimeException
ex
)
{
if
(
!
(
getProject
(
)
.
isKeepGoingMode
(
)
)
)
{
throw
ex
;
}
thrownException
=
ex
;
}
catch
(
Throwable
ex
)
{
if
(
!
(
getProject
(
)
.
isKeepGoingMode
(
)
)
)
{
throw
new
BuildException
(
ex
)
;
}
thrownException
=
ex
;
}
if
(
thrownException
!=
null
)
{
if
(
thrownException
instanceof
BuildException
)
{
log
(
"File '"
+
file
+
"' failed with message '"
+
thrownException
.
getMessage
(
)
+
"'."
,
Project
.
MSG_ERR
)
;
if
(
buildException
==
null
)
{
buildException
=
(
BuildException
)
thrownException
;
}
}
else
{
log
(
"Target '"
+
file
+
"' failed with message '"
+
thrownException
.
getMessage
(
)
+
"'."
,
Project
.
MSG_ERR
)
;
thrownException
.
printStackTrace
(
System
.
err
)
;
if
(
buildException
==
null
)
{
buildException
=
new
BuildException
(
thrownException
)
;
}
}
}
}
if
(
buildException
!=
null
)
{
throw
buildException
;
}
}
private
void
execute
(
File
file
,
File
directory
)
throws
BuildException
{
if
(
!
file
.
exists
(
)
||
file
.
isDirectory
(
)
||
!
file
.
canRead
(
)
)
{
String
msg
=
"Invalid file: "
+
file
;
if
(
failOnError
)
{
throw
new
BuildException
(
msg
)
;
}
log
(
msg
,
Project
.
MSG_WARN
)
;
return
;
}
Ant
ant
=
createAntTask
(
directory
)
;
String
antfilename
=
null
;
try
{
antfilename
=
file
.
getCanonicalPath
(
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
e
)
;
}
ant
.
setAntfile
(
antfilename
)
;
try
{
ant
.
execute
(
)
;
}
catch
(
BuildException
e
)
{
if
(
failOnError
)
{
throw
e
;
}
log
(
"Failure for target '"
+
target
+
"' of: "
+
antfilename
+
"\n"
+
e
.
getMessage
(
)
,
Project
.
MSG_WARN
)
;
}
}
public
void
setAntfile
(
String
antfile
)
{
this
.
antfile
=
antfile
;
}
public
void
setGenericAntfile
(
File
afile
)
{
this
.
genericantfile
=
afile
;
}
public
void
setFailonerror
(
boolean
failOnError
)
{
this
.
failOnError
=
failOnError
;
}
public
void
setTarget
(
String
target
)
{
this
.
target
=
target
;
}
public
void
setOutput
(
String
s
)
{
this
.
output
=
s
;
}
public
void
setInheritall
(
boolean
b
)
{
this
.
inheritAll
=
b
;
}
public
void
setInheritrefs
(
boolean
b
)
{
this
.
inheritRefs
=
b
;
}
public
void
addProperty
(
Property
p
)
{
properties
.
addElement
(
p
)
;
}
public
void
addReference
(
Ant
.
Reference
r
)
{
references
.
addElement
(
r
)
;
}
public
void
addPropertyset
(
PropertySet
ps
)
{
propertySets
.
addElement
(
ps
)
;
}
public
void
addDirset
(
DirSet
set
)
{
getBuildpath
(
)
.
addDirset
(
set
)
;
}
public
void
addFileset
(
FileSet
set
)
{
getBuildpath
(
)
.
addFileset
(
set
)
;
}
public
void
addFilelist
(
FileList
list
)
{
getBuildpath
(
)
.
addFilelist
(
list
)
;
}
public
void
setBuildpath
(
Path
s
)
{
getBuildpath
(
)
.
append
(
s
)
;
}
public
Path
createBuildpath
(
)
{
return
getBuildpath
(
)
.
createPath
(
)
;
}
public
Path
.
PathElement
createBuildpathElement
(
)
{
return
getBuildpath
(
)
.
createPathElement
(
)
;
}
private
Path
getBuildpath
(
)
{
if
(
buildpath
==
null
)
{
buildpath
=
new
Path
(
getProject
(
)
)
;
}
return
buildpath
;
}
public
void
setBuildpathRef
(
Reference
r
)
{
createBuildpath
(
)
.
setRefid
(
r
)
;
}
private
Ant
createAntTask
(
File
directory
)
{
Ant
ant
=
(
Ant
)
getProject
(
)
.
createTask
(
"ant"
)
;
ant
.
setOwningTarget
(
getOwningTarget
(
)
)
;
ant
.
setTaskName
(
getTaskName
(
)
)
;
ant
.
init
(
)
;
if
(
target
!=
null
&&
target
.
length
(
)
>
0
)
{
ant
.
setTarget
(
target
)
;
}
if
(
output
!=
null
)
{
ant
.
setOutput
(
output
)
;
}
if
(
directory
!=
null
)
{
ant
.
setDir
(
directory
)
;
}
ant
.
setInheritAll
(
inheritAll
)
;
for
(
Enumeration
i
=
properties
.
elements
(
)
;
i
.
hasMoreElements
(
)
;
)
{
copyProperty
(
ant
.
createProperty
(
)
,
(
Property
)
i
.
nextElement
(
)
)
;
}
for
(
Enumeration
i
=
propertySets
.
elements
(
)
;
i
.
hasMoreElements
(
)
;
)
{
ant
.
addPropertyset
(
(
PropertySet
)
i
.
nextElement
(
)
)
;
}
ant
.
setInheritRefs
(
inheritRefs
)
;
for
(
Enumeration
i
=
references
.
elements
(
)
;
i
.
hasMoreElements
(
)
;
)
{
ant
.
addReference
(
(
Ant
.
Reference
)
i
.
nextElement
(
)
)
;
}
return
ant
;
}
private
static
void
copyProperty
(
Property
to
,
Property
from
)
{
to
.
setName
(
from
.
getName
(
)
)
;
if
(
from
.
getValue
(
)
!=
null
)
{
to
.
setValue
(
from
.
getValue
(
)
)
;
}
if
(
from
.
getFile
(
)
!=
null
)
{
to
.
setFile
(
from
.
getFile
(
)
)
;
}
if
(
from
.
getResource
(
)
!=
null
)
{
to
.
setResource
(
from
.
getResource
(
)
)
;
}
if
(
from
.
getPrefix
(
)
!=
null
)
{
to
.
setPrefix
(
from
.
getPrefix
(
)
)
;
}
if
(
from
.
getRefid
(
)
!=
null
)
{
to
.
setRefid
(
from
.
getRefid
(
)
)
;
}
if
(
from
.
getEnvironment
(
)
!=
null
)
{
to
.
setEnvironment
(
from
.
getEnvironment
(
)
)
;
}
if
(
from
.
getClasspath
(
)
!=
null
)
{
to
.
setClasspath
(
from
.
getClasspath
(
)
)
;
}
}
}
