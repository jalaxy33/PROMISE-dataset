package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
condition
.
Condition
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
Mapper
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileNameMapper
;
import
org
.
apache
.
tools
.
ant
.
util
.
MergingMapper
;
import
org
.
apache
.
tools
.
ant
.
util
.
SourceFileScanner
;
public
class
UpToDate
extends
Task
implements
Condition
{
private
String
_property
;
private
String
_value
;
private
File
_sourceFile
;
private
File
_targetFile
;
private
Vector
sourceFileSets
=
new
Vector
(
)
;
protected
Mapper
mapperElement
=
null
;
public
void
setProperty
(
String
property
)
{
_property
=
property
;
}
public
void
setValue
(
String
value
)
{
_value
=
value
;
}
private
String
getValue
(
)
{
return
(
_value
!=
null
)
?
_value
:
"true"
;
}
public
void
setTargetFile
(
File
file
)
{
_targetFile
=
file
;
}
public
void
setSrcfile
(
File
file
)
{
_sourceFile
=
file
;
}
public
void
addSrcfiles
(
FileSet
fs
)
{
sourceFileSets
.
addElement
(
fs
)
;
}
public
Mapper
createMapper
(
)
throws
BuildException
{
if
(
mapperElement
!=
null
)
{
throw
new
BuildException
(
"Cannot define more than one mapper"
,
getLocation
(
)
)
;
}
mapperElement
=
new
Mapper
(
getProject
(
)
)
;
return
mapperElement
;
}
public
boolean
eval
(
)
{
if
(
sourceFileSets
.
size
(
)
==
0
&&
_sourceFile
==
null
)
{
throw
new
BuildException
(
"At least one srcfile or a nested "
+
"<srcfiles> element must be set."
)
;
}
if
(
sourceFileSets
.
size
(
)
>
0
&&
_sourceFile
!=
null
)
{
throw
new
BuildException
(
"Cannot specify both the srcfile "
+
"attribute and a nested <srcfiles> "
+
"element."
)
;
}
if
(
_targetFile
==
null
&&
mapperElement
==
null
)
{
throw
new
BuildException
(
"The targetfile attribute or a nested "
+
"mapper element must be set."
)
;
}
if
(
_targetFile
!=
null
&&
!
_targetFile
.
exists
(
)
)
{
log
(
"The targetfile \""
+
_targetFile
.
getAbsolutePath
(
)
+
"\" does not exist."
,
Project
.
MSG_VERBOSE
)
;
return
false
;
}
if
(
_sourceFile
!=
null
&&
!
_sourceFile
.
exists
(
)
)
{
throw
new
BuildException
(
_sourceFile
.
getAbsolutePath
(
)
+
" not found."
)
;
}
Enumeration
e
=
sourceFileSets
.
elements
(
)
;
boolean
upToDate
=
true
;
while
(
upToDate
&&
e
.
hasMoreElements
(
)
)
{
FileSet
fs
=
(
FileSet
)
e
.
nextElement
(
)
;
DirectoryScanner
ds
=
fs
.
getDirectoryScanner
(
getProject
(
)
)
;
upToDate
=
upToDate
&&
scanDir
(
fs
.
getDir
(
getProject
(
)
)
,
ds
.
getIncludedFiles
(
)
)
;
}
if
(
_sourceFile
!=
null
)
{
if
(
mapperElement
==
null
)
{
upToDate
=
upToDate
&&
(
_targetFile
.
lastModified
(
)
>=
_sourceFile
.
lastModified
(
)
)
;
}
else
{
SourceFileScanner
sfs
=
new
SourceFileScanner
(
this
)
;
upToDate
=
upToDate
&&
(
sfs
.
restrict
(
new
String
[
]
{
_sourceFile
.
getAbsolutePath
(
)
}
,
null
,
null
,
mapperElement
.
getImplementation
(
)
)
.
length
==
0
)
;
}
}
return
upToDate
;
}
public
void
execute
(
)
throws
BuildException
{
if
(
_property
==
null
)
{
throw
new
BuildException
(
"property attribute is required."
,
getLocation
(
)
)
;
}
boolean
upToDate
=
eval
(
)
;
if
(
upToDate
)
{
this
.
getProject
(
)
.
setNewProperty
(
_property
,
getValue
(
)
)
;
if
(
mapperElement
==
null
)
{
log
(
"File \""
+
_targetFile
.
getAbsolutePath
(
)
+
"\" is up-to-date."
,
Project
.
MSG_VERBOSE
)
;
}
else
{
log
(
"All target files are up-to-date."
,
Project
.
MSG_VERBOSE
)
;
}
}
}
protected
boolean
scanDir
(
File
srcDir
,
String
[
]
files
)
{
SourceFileScanner
sfs
=
new
SourceFileScanner
(
this
)
;
FileNameMapper
mapper
=
null
;
File
dir
=
srcDir
;
if
(
mapperElement
==
null
)
{
MergingMapper
mm
=
new
MergingMapper
(
)
;
mm
.
setTo
(
_targetFile
.
getAbsolutePath
(
)
)
;
mapper
=
mm
;
dir
=
null
;
}
else
{
mapper
=
mapperElement
.
getImplementation
(
)
;
}
return
sfs
.
restrict
(
files
,
srcDir
,
dir
,
mapper
)
.
length
==
0
;
}
}
