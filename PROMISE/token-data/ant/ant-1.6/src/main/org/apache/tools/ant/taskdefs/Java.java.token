package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
ExitException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
types
.
Commandline
;
import
org
.
apache
.
tools
.
ant
.
types
.
CommandlineJava
;
import
org
.
apache
.
tools
.
ant
.
types
.
Environment
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
types
.
PropertySet
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
import
org
.
apache
.
tools
.
ant
.
types
.
Assertions
;
import
org
.
apache
.
tools
.
ant
.
types
.
Permissions
;
public
class
Java
extends
Task
{
private
CommandlineJava
cmdl
=
new
CommandlineJava
(
)
;
private
Environment
env
=
new
Environment
(
)
;
private
boolean
fork
=
false
;
private
boolean
newEnvironment
=
false
;
private
File
dir
=
null
;
private
boolean
failOnError
=
false
;
private
boolean
append
=
false
;
private
Long
timeout
=
null
;
private
Redirector
redirector
=
new
Redirector
(
this
)
;
private
String
resultProperty
;
private
Permissions
perm
=
null
;
private
boolean
spawn
=
false
;
private
boolean
incompatibleWithSpawn
=
false
;
public
void
execute
(
)
throws
BuildException
{
File
savedDir
=
dir
;
Permissions
savedPermissions
=
perm
;
int
err
=
-
1
;
try
{
err
=
executeJava
(
)
;
if
(
err
!=
0
)
{
if
(
failOnError
)
{
throw
new
BuildException
(
"Java returned: "
+
err
,
getLocation
(
)
)
;
}
else
{
log
(
"Java Result: "
+
err
,
Project
.
MSG_ERR
)
;
}
}
maybeSetResultPropertyValue
(
err
)
;
}
finally
{
dir
=
savedDir
;
perm
=
savedPermissions
;
}
}
public
int
executeJava
(
)
throws
BuildException
{
String
classname
=
cmdl
.
getClassname
(
)
;
if
(
classname
==
null
&&
cmdl
.
getJar
(
)
==
null
)
{
throw
new
BuildException
(
"Classname must not be null."
)
;
}
if
(
!
fork
&&
cmdl
.
getJar
(
)
!=
null
)
{
throw
new
BuildException
(
"Cannot execute a jar in non-forked mode."
+
" Please set fork='true'. "
)
;
}
if
(
spawn
&&
!
fork
)
{
throw
new
BuildException
(
"Cannot spawn a java process in non-forked mode."
+
" Please set fork='true'. "
)
;
}
if
(
spawn
&&
incompatibleWithSpawn
)
{
getProject
(
)
.
log
(
"spawn does not allow attributes related to input, "
+
"output, error, result"
,
Project
.
MSG_ERR
)
;
getProject
(
)
.
log
(
"spawn does not also not allow timeout"
,
Project
.
MSG_ERR
)
;
throw
new
BuildException
(
"You have used an attribute which is "
+
"not compatible with spawn"
)
;
}
if
(
cmdl
.
getAssertions
(
)
!=
null
&&
!
fork
)
{
log
(
"Assertion statements are currently ignored in non-forked mode"
)
;
}
if
(
fork
)
{
if
(
perm
!=
null
)
{
log
(
"Permissions can not be set this way in forked mode."
,
Project
.
MSG_WARN
)
;
}
log
(
cmdl
.
describeCommand
(
)
,
Project
.
MSG_VERBOSE
)
;
}
else
{
if
(
cmdl
.
getVmCommand
(
)
.
size
(
)
>
1
)
{
log
(
"JVM args ignored when same JVM is used."
,
Project
.
MSG_WARN
)
;
}
if
(
dir
!=
null
)
{
log
(
"Working directory ignored when same JVM is used."
,
Project
.
MSG_WARN
)
;
}
if
(
newEnvironment
||
null
!=
env
.
getVariables
(
)
)
{
log
(
"Changes to environment variables are ignored when same "
+
"JVM is used."
,
Project
.
MSG_WARN
)
;
}
if
(
cmdl
.
getBootclasspath
(
)
!=
null
)
{
log
(
"bootclasspath ignored when same JVM is used."
,
Project
.
MSG_WARN
)
;
}
if
(
perm
==
null
&&
failOnError
==
true
)
{
perm
=
new
Permissions
(
true
)
;
log
(
"running "
+
this
.
cmdl
.
getClassname
(
)
+
" with default permissions (exit forbidden)"
,
Project
.
MSG_VERBOSE
)
;
}
log
(
"Running in same VM "
+
cmdl
.
describeJavaCommand
(
)
,
Project
.
MSG_VERBOSE
)
;
}
try
{
if
(
fork
)
{
if
(
!
spawn
)
{
return
fork
(
cmdl
.
getCommandline
(
)
)
;
}
else
{
spawn
(
cmdl
.
getCommandline
(
)
)
;
return
0
;
}
}
else
{
try
{
run
(
cmdl
)
;
return
0
;
}
catch
(
ExitException
ex
)
{
return
ex
.
getStatus
(
)
;
}
}
}
catch
(
BuildException
e
)
{
if
(
failOnError
)
{
throw
e
;
}
else
{
log
(
e
.
getMessage
(
)
,
Project
.
MSG_ERR
)
;
return
0
;
}
}
catch
(
Throwable
t
)
{
if
(
failOnError
)
{
throw
new
BuildException
(
t
)
;
}
else
{
log
(
t
.
getMessage
(
)
,
Project
.
MSG_ERR
)
;
return
0
;
}
}
}
public
void
setSpawn
(
boolean
spawn
)
{
this
.
spawn
=
spawn
;
}
public
void
setClasspath
(
Path
s
)
{
createClasspath
(
)
.
append
(
s
)
;
}
public
Path
createClasspath
(
)
{
return
cmdl
.
createClasspath
(
getProject
(
)
)
.
createPath
(
)
;
}
public
Path
createBootclasspath
(
)
{
return
cmdl
.
createBootclasspath
(
getProject
(
)
)
.
createPath
(
)
;
}
public
Permissions
createPermissions
(
)
{
if
(
perm
==
null
)
{
perm
=
new
Permissions
(
)
;
}
return
perm
;
}
public
void
setClasspathRef
(
Reference
r
)
{
createClasspath
(
)
.
setRefid
(
r
)
;
}
public
void
setJar
(
File
jarfile
)
throws
BuildException
{
if
(
cmdl
.
getClassname
(
)
!=
null
)
{
throw
new
BuildException
(
"Cannot use 'jar' and 'classname' "
+
"attributes in same command."
)
;
}
cmdl
.
setJar
(
jarfile
.
getAbsolutePath
(
)
)
;
}
public
void
setClassname
(
String
s
)
throws
BuildException
{
if
(
cmdl
.
getJar
(
)
!=
null
)
{
throw
new
BuildException
(
"Cannot use 'jar' and 'classname' "
+
"attributes in same command"
)
;
}
cmdl
.
setClassname
(
s
)
;
}
public
void
setArgs
(
String
s
)
{
log
(
"The args attribute is deprecated. "
+
"Please use nested arg elements."
,
Project
.
MSG_WARN
)
;
cmdl
.
createArgument
(
)
.
setLine
(
s
)
;
}
public
Commandline
.
Argument
createArg
(
)
{
return
cmdl
.
createArgument
(
)
;
}
public
void
setResultProperty
(
String
resultProperty
)
{
this
.
resultProperty
=
resultProperty
;
}
protected
void
maybeSetResultPropertyValue
(
int
result
)
{
String
res
=
Integer
.
toString
(
result
)
;
if
(
resultProperty
!=
null
)
{
getProject
(
)
.
setNewProperty
(
resultProperty
,
res
)
;
}
}
public
void
setFork
(
boolean
s
)
{
this
.
fork
=
s
;
}
public
void
setJvmargs
(
String
s
)
{
log
(
"The jvmargs attribute is deprecated. "
+
"Please use nested jvmarg elements."
,
Project
.
MSG_WARN
)
;
cmdl
.
createVmArgument
(
)
.
setLine
(
s
)
;
}
public
Commandline
.
Argument
createJvmarg
(
)
{
return
cmdl
.
createVmArgument
(
)
;
}
public
void
setJvm
(
String
s
)
{
cmdl
.
setVm
(
s
)
;
}
public
void
addSysproperty
(
Environment
.
Variable
sysp
)
{
cmdl
.
addSysproperty
(
sysp
)
;
}
public
void
addSyspropertyset
(
PropertySet
sysp
)
{
cmdl
.
addSyspropertyset
(
sysp
)
;
}
public
void
setFailonerror
(
boolean
fail
)
{
failOnError
=
fail
;
incompatibleWithSpawn
=
true
;
}
public
void
setDir
(
File
d
)
{
this
.
dir
=
d
;
}
public
void
setOutput
(
File
out
)
{
redirector
.
setOutput
(
out
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setInput
(
File
input
)
{
redirector
.
setInput
(
input
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setInputString
(
String
inputString
)
{
redirector
.
setInputString
(
inputString
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setLogError
(
boolean
logError
)
{
redirector
.
setLogError
(
logError
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setError
(
File
error
)
{
redirector
.
setError
(
error
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setOutputproperty
(
String
outputProp
)
{
redirector
.
setOutputProperty
(
outputProp
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setErrorProperty
(
String
errorProperty
)
{
redirector
.
setErrorProperty
(
errorProperty
)
;
incompatibleWithSpawn
=
true
;
}
public
void
setMaxmemory
(
String
max
)
{
cmdl
.
setMaxmemory
(
max
)
;
}
public
void
setJVMVersion
(
String
value
)
{
cmdl
.
setVmversion
(
value
)
;
}
public
void
addEnv
(
Environment
.
Variable
var
)
{
env
.
addVariable
(
var
)
;
}
public
void
setNewenvironment
(
boolean
newenv
)
{
newEnvironment
=
newenv
;
}
public
void
setAppend
(
boolean
append
)
{
this
.
append
=
append
;
incompatibleWithSpawn
=
true
;
}
public
void
setTimeout
(
Long
value
)
{
timeout
=
value
;
incompatibleWithSpawn
=
true
;
}
public
void
addAssertions
(
Assertions
asserts
)
{
if
(
cmdl
.
getAssertions
(
)
!=
null
)
{
throw
new
BuildException
(
"Only one assertion declaration is allowed"
)
;
}
cmdl
.
setAssertions
(
asserts
)
;
}
protected
void
handleOutput
(
String
output
)
{
if
(
redirector
.
getOutputStream
(
)
!=
null
)
{
redirector
.
handleOutput
(
output
)
;
}
else
{
super
.
handleOutput
(
output
)
;
}
}
public
int
handleInput
(
byte
[
]
buffer
,
int
offset
,
int
length
)
throws
IOException
{
if
(
redirector
.
getInputStream
(
)
!=
null
)
{
return
redirector
.
handleInput
(
buffer
,
offset
,
length
)
;
}
else
{
return
super
.
handleInput
(
buffer
,
offset
,
length
)
;
}
}
protected
void
handleFlush
(
String
output
)
{
if
(
redirector
.
getOutputStream
(
)
!=
null
)
{
redirector
.
handleFlush
(
output
)
;
}
else
{
super
.
handleFlush
(
output
)
;
}
}
protected
void
handleErrorOutput
(
String
output
)
{
if
(
redirector
.
getErrorStream
(
)
!=
null
)
{
redirector
.
handleErrorOutput
(
output
)
;
}
else
{
super
.
handleErrorOutput
(
output
)
;
}
}
protected
void
handleErrorFlush
(
String
output
)
{
if
(
redirector
.
getErrorStream
(
)
!=
null
)
{
redirector
.
handleErrorFlush
(
output
)
;
}
else
{
super
.
handleErrorOutput
(
output
)
;
}
}
private
void
run
(
CommandlineJava
command
)
throws
BuildException
{
try
{
ExecuteJava
exe
=
new
ExecuteJava
(
)
;
exe
.
setJavaCommand
(
command
.
getJavaCommand
(
)
)
;
exe
.
setClasspath
(
command
.
getClasspath
(
)
)
;
exe
.
setSystemProperties
(
command
.
getSystemProperties
(
)
)
;
exe
.
setPermissions
(
perm
)
;
exe
.
setTimeout
(
timeout
)
;
redirector
.
createStreams
(
)
;
exe
.
execute
(
getProject
(
)
)
;
redirector
.
complete
(
)
;
if
(
exe
.
killedProcess
(
)
)
{
throw
new
BuildException
(
"Timeout: killed the sub-process"
)
;
}
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
e
)
;
}
}
private
int
fork
(
String
[
]
command
)
throws
BuildException
{
Execute
exe
=
new
Execute
(
redirector
.
createHandler
(
)
,
createWatchdog
(
)
)
;
exe
.
setAntRun
(
getProject
(
)
)
;
if
(
dir
==
null
)
{
dir
=
getProject
(
)
.
getBaseDir
(
)
;
}
else
if
(
!
dir
.
exists
(
)
||
!
dir
.
isDirectory
(
)
)
{
throw
new
BuildException
(
dir
.
getAbsolutePath
(
)
+
" is not a valid directory"
,
getLocation
(
)
)
;
}
exe
.
setWorkingDirectory
(
dir
)
;
String
[
]
environment
=
env
.
getVariables
(
)
;
if
(
environment
!=
null
)
{
for
(
int
i
=
0
;
i
<
environment
.
length
;
i
++
)
{
log
(
"Setting environment variable: "
+
environment
[
i
]
,
Project
.
MSG_VERBOSE
)
;
}
}
exe
.
setNewenvironment
(
newEnvironment
)
;
exe
.
setEnvironment
(
environment
)
;
exe
.
setCommandline
(
command
)
;
try
{
int
rc
=
exe
.
execute
(
)
;
redirector
.
complete
(
)
;
if
(
exe
.
killedProcess
(
)
)
{
throw
new
BuildException
(
"Timeout: killed the sub-process"
)
;
}
return
rc
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
e
,
getLocation
(
)
)
;
}
}
private
void
spawn
(
String
[
]
command
)
throws
BuildException
{
Execute
exe
=
new
Execute
(
)
;
exe
.
setAntRun
(
getProject
(
)
)
;
if
(
dir
==
null
)
{
dir
=
getProject
(
)
.
getBaseDir
(
)
;
}
else
if
(
!
dir
.
exists
(
)
||
!
dir
.
isDirectory
(
)
)
{
throw
new
BuildException
(
dir
.
getAbsolutePath
(
)
+
" is not a valid directory"
,
getLocation
(
)
)
;
}
exe
.
setWorkingDirectory
(
dir
)
;
String
[
]
environment
=
env
.
getVariables
(
)
;
if
(
environment
!=
null
)
{
for
(
int
i
=
0
;
i
<
environment
.
length
;
i
++
)
{
log
(
"Setting environment variable: "
+
environment
[
i
]
,
Project
.
MSG_VERBOSE
)
;
}
}
exe
.
setNewenvironment
(
newEnvironment
)
;
exe
.
setEnvironment
(
environment
)
;
exe
.
setCommandline
(
command
)
;
try
{
exe
.
spawn
(
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
e
,
getLocation
(
)
)
;
}
}
protected
void
run
(
String
classname
,
Vector
args
)
throws
BuildException
{
CommandlineJava
cmdj
=
new
CommandlineJava
(
)
;
cmdj
.
setClassname
(
classname
)
;
for
(
int
i
=
0
;
i
<
args
.
size
(
)
;
i
++
)
{
cmdj
.
createArgument
(
)
.
setValue
(
(
String
)
args
.
elementAt
(
i
)
)
;
}
run
(
cmdj
)
;
}
public
void
clearArgs
(
)
{
cmdl
.
clearJavaArgs
(
)
;
}
protected
ExecuteWatchdog
createWatchdog
(
)
throws
BuildException
{
if
(
timeout
==
null
)
{
return
null
;
}
return
new
ExecuteWatchdog
(
timeout
.
longValue
(
)
)
;
}
}
