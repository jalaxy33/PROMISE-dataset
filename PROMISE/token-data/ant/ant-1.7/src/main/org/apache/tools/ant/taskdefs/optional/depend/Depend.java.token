package
org
.
apache
.
tools
.
ant
.
taskdefs
.
optional
.
depend
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
File
;
import
java
.
io
.
FileReader
;
import
java
.
io
.
FileWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
PrintWriter
;
import
java
.
net
.
URL
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
AntClassLoader
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
MatchingTask
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
rmic
.
DefaultRmicAdapter
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
rmic
.
WLRmic
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
depend
.
DependencyAnalyzer
;
public
class
Depend
extends
MatchingTask
{
private
static
class
ClassFileInfo
{
private
File
absoluteFile
;
private
String
className
;
private
File
sourceFile
;
private
boolean
isUserWarned
=
false
;
}
private
Path
srcPath
;
private
Path
destPath
;
private
File
cache
;
private
String
[
]
srcPathList
;
private
Hashtable
affectedClassMap
;
private
Hashtable
classFileInfoMap
;
private
Hashtable
classpathDependencies
;
private
Hashtable
outOfDateClasses
;
private
boolean
closure
=
false
;
private
boolean
warnOnRmiStubs
=
true
;
private
boolean
dump
=
false
;
private
Path
dependClasspath
;
private
static
final
String
CACHE_FILE_NAME
=
"dependencies.txt"
;
private
static
final
String
CLASSNAME_PREPEND
=
"||:"
;
public
void
setClasspath
(
Path
classpath
)
{
if
(
dependClasspath
==
null
)
{
dependClasspath
=
classpath
;
}
else
{
dependClasspath
.
append
(
classpath
)
;
}
}
public
Path
getClasspath
(
)
{
return
dependClasspath
;
}
public
Path
createClasspath
(
)
{
if
(
dependClasspath
==
null
)
{
dependClasspath
=
new
Path
(
getProject
(
)
)
;
}
return
dependClasspath
.
createPath
(
)
;
}
public
void
setClasspathRef
(
Reference
r
)
{
createClasspath
(
)
.
setRefid
(
r
)
;
}
public
void
setWarnOnRmiStubs
(
boolean
warnOnRmiStubs
)
{
this
.
warnOnRmiStubs
=
warnOnRmiStubs
;
}
private
Hashtable
readCachedDependencies
(
File
depFile
)
throws
IOException
{
Hashtable
dependencyMap
=
new
Hashtable
(
)
;
BufferedReader
in
=
null
;
try
{
in
=
new
BufferedReader
(
new
FileReader
(
depFile
)
)
;
String
line
=
null
;
Vector
dependencyList
=
null
;
String
className
=
null
;
int
prependLength
=
CLASSNAME_PREPEND
.
length
(
)
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
if
(
line
.
startsWith
(
CLASSNAME_PREPEND
)
)
{
dependencyList
=
new
Vector
(
)
;
className
=
line
.
substring
(
prependLength
)
;
dependencyMap
.
put
(
className
,
dependencyList
)
;
}
else
{
dependencyList
.
addElement
(
line
)
;
}
}
}
finally
{
if
(
in
!=
null
)
{
in
.
close
(
)
;
}
}
return
dependencyMap
;
}
private
void
writeCachedDependencies
(
Hashtable
dependencyMap
)
throws
IOException
{
if
(
cache
!=
null
)
{
PrintWriter
pw
=
null
;
try
{
cache
.
mkdirs
(
)
;
File
depFile
=
new
File
(
cache
,
CACHE_FILE_NAME
)
;
pw
=
new
PrintWriter
(
new
FileWriter
(
depFile
)
)
;
Enumeration
e
=
dependencyMap
.
keys
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
String
className
=
(
String
)
e
.
nextElement
(
)
;
pw
.
println
(
CLASSNAME_PREPEND
+
className
)
;
Vector
dependencyList
=
(
Vector
)
dependencyMap
.
get
(
className
)
;
int
size
=
dependencyList
.
size
(
)
;
for
(
int
x
=
0
;
x
<
size
;
x
++
)
{
pw
.
println
(
dependencyList
.
elementAt
(
x
)
)
;
}
}
}
finally
{
if
(
pw
!=
null
)
{
pw
.
close
(
)
;
}
}
}
}
private
Path
getCheckClassPath
(
)
{
if
(
dependClasspath
==
null
)
{
return
null
;
}
String
[
]
destPathElements
=
destPath
.
list
(
)
;
String
[
]
classpathElements
=
dependClasspath
.
list
(
)
;
String
checkPath
=
""
;
for
(
int
i
=
0
;
i
<
classpathElements
.
length
;
++
i
)
{
String
element
=
classpathElements
[
i
]
;
boolean
inDestPath
=
false
;
for
(
int
j
=
0
;
j
<
destPathElements
.
length
&&
!
inDestPath
;
++
j
)
{
inDestPath
=
destPathElements
[
j
]
.
equals
(
element
)
;
}
if
(
!
inDestPath
)
{
if
(
checkPath
.
length
(
)
==
0
)
{
checkPath
=
element
;
}
else
{
checkPath
+=
":"
+
element
;
}
}
}
if
(
checkPath
.
length
(
)
==
0
)
{
return
null
;
}
return
new
Path
(
getProject
(
)
,
checkPath
)
;
}
private
void
determineDependencies
(
)
throws
IOException
{
affectedClassMap
=
new
Hashtable
(
)
;
classFileInfoMap
=
new
Hashtable
(
)
;
boolean
cacheDirty
=
false
;
Hashtable
dependencyMap
=
new
Hashtable
(
)
;
File
cacheFile
=
null
;
boolean
cacheFileExists
=
true
;
long
cacheLastModified
=
Long
.
MAX_VALUE
;
if
(
cache
!=
null
)
{
cacheFile
=
new
File
(
cache
,
CACHE_FILE_NAME
)
;
cacheFileExists
=
cacheFile
.
exists
(
)
;
cacheLastModified
=
cacheFile
.
lastModified
(
)
;
if
(
cacheFileExists
)
{
dependencyMap
=
readCachedDependencies
(
cacheFile
)
;
}
}
Enumeration
classfileEnum
=
getClassFiles
(
destPath
)
.
elements
(
)
;
while
(
classfileEnum
.
hasMoreElements
(
)
)
{
ClassFileInfo
info
=
(
ClassFileInfo
)
classfileEnum
.
nextElement
(
)
;
log
(
"Adding class info for "
+
info
.
className
,
Project
.
MSG_DEBUG
)
;
classFileInfoMap
.
put
(
info
.
className
,
info
)
;
Vector
dependencyList
=
null
;
if
(
cache
!=
null
)
{
if
(
cacheFileExists
&&
cacheLastModified
>
info
.
absoluteFile
.
lastModified
(
)
)
{
dependencyList
=
(
Vector
)
dependencyMap
.
get
(
info
.
className
)
;
}
}
if
(
dependencyList
==
null
)
{
DependencyAnalyzer
analyzer
=
new
AntAnalyzer
(
)
;
analyzer
.
addRootClass
(
info
.
className
)
;
analyzer
.
addClassPath
(
destPath
)
;
analyzer
.
setClosure
(
false
)
;
dependencyList
=
new
Vector
(
)
;
Enumeration
depEnum
=
analyzer
.
getClassDependencies
(
)
;
while
(
depEnum
.
hasMoreElements
(
)
)
{
dependencyList
.
addElement
(
depEnum
.
nextElement
(
)
)
;
}
cacheDirty
=
true
;
dependencyMap
.
put
(
info
.
className
,
dependencyList
)
;
}
Enumeration
depEnum
=
dependencyList
.
elements
(
)
;
while
(
depEnum
.
hasMoreElements
(
)
)
{
String
dependentClass
=
(
String
)
depEnum
.
nextElement
(
)
;
Hashtable
affectedClasses
=
(
Hashtable
)
affectedClassMap
.
get
(
dependentClass
)
;
if
(
affectedClasses
==
null
)
{
affectedClasses
=
new
Hashtable
(
)
;
affectedClassMap
.
put
(
dependentClass
,
affectedClasses
)
;
}
affectedClasses
.
put
(
info
.
className
,
info
)
;
}
}
classpathDependencies
=
null
;
Path
checkPath
=
getCheckClassPath
(
)
;
if
(
checkPath
!=
null
)
{
classpathDependencies
=
new
Hashtable
(
)
;
AntClassLoader
loader
=
getProject
(
)
.
createClassLoader
(
checkPath
)
;
Hashtable
classpathFileCache
=
new
Hashtable
(
)
;
Object
nullFileMarker
=
new
Object
(
)
;
for
(
Enumeration
e
=
dependencyMap
.
keys
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
className
=
(
String
)
e
.
nextElement
(
)
;
Vector
dependencyList
=
(
Vector
)
dependencyMap
.
get
(
className
)
;
Hashtable
dependencies
=
new
Hashtable
(
)
;
classpathDependencies
.
put
(
className
,
dependencies
)
;
Enumeration
e2
=
dependencyList
.
elements
(
)
;
while
(
e2
.
hasMoreElements
(
)
)
{
String
dependency
=
(
String
)
e2
.
nextElement
(
)
;
Object
classpathFileObject
=
classpathFileCache
.
get
(
dependency
)
;
if
(
classpathFileObject
==
null
)
{
classpathFileObject
=
nullFileMarker
;
if
(
!
dependency
.
startsWith
(
"java."
)
&&
!
dependency
.
startsWith
(
"javax."
)
)
{
URL
classURL
=
loader
.
getResource
(
dependency
.
replace
(
'.'
,
'/'
)
+
".class"
)
;
if
(
classURL
!=
null
)
{
if
(
classURL
.
getProtocol
(
)
.
equals
(
"jar"
)
)
{
String
jarFilePath
=
classURL
.
getFile
(
)
;
int
classMarker
=
jarFilePath
.
indexOf
(
'!'
)
;
jarFilePath
=
jarFilePath
.
substring
(
0
,
classMarker
)
;
if
(
jarFilePath
.
startsWith
(
"file:"
)
)
{
classpathFileObject
=
new
File
(
FileUtils
.
getFileUtils
(
)
.
fromURI
(
jarFilePath
)
)
;
}
else
{
throw
new
IOException
(
"Bizarre nested path in jar: protocol: "
+
jarFilePath
)
;
}
}
else
if
(
classURL
.
getProtocol
(
)
.
equals
(
"file"
)
)
{
classpathFileObject
=
new
File
(
FileUtils
.
getFileUtils
(
)
.
fromURI
(
classURL
.
toExternalForm
(
)
)
)
;
}
log
(
"Class "
+
className
+
" depends on "
+
classpathFileObject
+
" due to "
+
dependency
,
Project
.
MSG_DEBUG
)
;
}
}
classpathFileCache
.
put
(
dependency
,
classpathFileObject
)
;
}
if
(
classpathFileObject
!=
null
&&
classpathFileObject
!=
nullFileMarker
)
{
File
jarFile
=
(
File
)
classpathFileObject
;
dependencies
.
put
(
jarFile
,
jarFile
)
;
}
}
}
}
if
(
cache
!=
null
&&
cacheDirty
)
{
writeCachedDependencies
(
dependencyMap
)
;
}
}
private
int
deleteAllAffectedFiles
(
)
{
int
count
=
0
;
for
(
Enumeration
e
=
outOfDateClasses
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
className
=
(
String
)
e
.
nextElement
(
)
;
count
+=
deleteAffectedFiles
(
className
)
;
ClassFileInfo
classInfo
=
(
ClassFileInfo
)
classFileInfoMap
.
get
(
className
)
;
if
(
classInfo
!=
null
&&
classInfo
.
absoluteFile
.
exists
(
)
)
{
classInfo
.
absoluteFile
.
delete
(
)
;
count
++
;
}
}
return
count
;
}
private
int
deleteAffectedFiles
(
String
className
)
{
int
count
=
0
;
Hashtable
affectedClasses
=
(
Hashtable
)
affectedClassMap
.
get
(
className
)
;
if
(
affectedClasses
==
null
)
{
return
count
;
}
for
(
Enumeration
e
=
affectedClasses
.
keys
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
affectedClass
=
(
String
)
e
.
nextElement
(
)
;
ClassFileInfo
affectedClassInfo
=
(
ClassFileInfo
)
affectedClasses
.
get
(
affectedClass
)
;
if
(
!
affectedClassInfo
.
absoluteFile
.
exists
(
)
)
{
continue
;
}
if
(
affectedClassInfo
.
sourceFile
==
null
)
{
warnOutOfDateButNotDeleted
(
affectedClassInfo
,
affectedClass
,
className
)
;
continue
;
}
log
(
"Deleting file "
+
affectedClassInfo
.
absoluteFile
.
getPath
(
)
+
" since "
+
className
+
" out of date"
,
Project
.
MSG_VERBOSE
)
;
affectedClassInfo
.
absoluteFile
.
delete
(
)
;
count
++
;
if
(
closure
)
{
count
+=
deleteAffectedFiles
(
affectedClass
)
;
}
else
{
if
(
affectedClass
.
indexOf
(
"$"
)
==
-
1
)
{
continue
;
}
String
topLevelClassName
=
affectedClass
.
substring
(
0
,
affectedClass
.
indexOf
(
"$"
)
)
;
log
(
"Top level class = "
+
topLevelClassName
,
Project
.
MSG_VERBOSE
)
;
ClassFileInfo
topLevelClassInfo
=
(
ClassFileInfo
)
classFileInfoMap
.
get
(
topLevelClassName
)
;
if
(
topLevelClassInfo
!=
null
&&
topLevelClassInfo
.
absoluteFile
.
exists
(
)
)
{
log
(
"Deleting file "
+
topLevelClassInfo
.
absoluteFile
.
getPath
(
)
+
" since one of its inner classes was removed"
,
Project
.
MSG_VERBOSE
)
;
topLevelClassInfo
.
absoluteFile
.
delete
(
)
;
count
++
;
if
(
closure
)
{
count
+=
deleteAffectedFiles
(
topLevelClassName
)
;
}
}
}
}
return
count
;
}
private
void
warnOutOfDateButNotDeleted
(
ClassFileInfo
affectedClassInfo
,
String
affectedClass
,
String
className
)
{
if
(
affectedClassInfo
.
isUserWarned
)
{
return
;
}
int
level
=
Project
.
MSG_WARN
;
if
(
!
warnOnRmiStubs
)
{
if
(
isRmiStub
(
affectedClass
,
className
)
)
{
level
=
Project
.
MSG_VERBOSE
;
}
}
log
(
"The class "
+
affectedClass
+
" in file "
+
affectedClassInfo
.
absoluteFile
.
getPath
(
)
+
" is out of date due to "
+
className
+
" but has not been deleted because its source file"
+
" could not be determined"
,
level
)
;
affectedClassInfo
.
isUserWarned
=
true
;
}
private
boolean
isRmiStub
(
String
affectedClass
,
String
className
)
{
return
isStub
(
affectedClass
,
className
,
DefaultRmicAdapter
.
RMI_STUB_SUFFIX
)
||
isStub
(
affectedClass
,
className
,
DefaultRmicAdapter
.
RMI_SKEL_SUFFIX
)
||
isStub
(
affectedClass
,
className
,
WLRmic
.
RMI_STUB_SUFFIX
)
||
isStub
(
affectedClass
,
className
,
WLRmic
.
RMI_SKEL_SUFFIX
)
;
}
private
boolean
isStub
(
String
affectedClass
,
String
baseClass
,
String
suffix
)
{
return
(
baseClass
+
suffix
)
.
equals
(
affectedClass
)
;
}
private
void
dumpDependencies
(
)
{
log
(
"Reverse Dependency Dump for "
+
affectedClassMap
.
size
(
)
+
" classes:"
,
Project
.
MSG_DEBUG
)
;
Enumeration
classEnum
=
affectedClassMap
.
keys
(
)
;
while
(
classEnum
.
hasMoreElements
(
)
)
{
String
className
=
(
String
)
classEnum
.
nextElement
(
)
;
log
(
" Class "
+
className
+
" affects:"
,
Project
.
MSG_DEBUG
)
;
Hashtable
affectedClasses
=
(
Hashtable
)
affectedClassMap
.
get
(
className
)
;
Enumeration
affectedClassEnum
=
affectedClasses
.
keys
(
)
;
while
(
affectedClassEnum
.
hasMoreElements
(
)
)
{
String
affectedClass
=
(
String
)
affectedClassEnum
.
nextElement
(
)
;
ClassFileInfo
info
=
(
ClassFileInfo
)
affectedClasses
.
get
(
affectedClass
)
;
log
(
"    "
+
affectedClass
+
" in "
+
info
.
absoluteFile
.
getPath
(
)
,
Project
.
MSG_DEBUG
)
;
}
}
if
(
classpathDependencies
!=
null
)
{
log
(
"Classpath file dependencies (Forward):"
,
Project
.
MSG_DEBUG
)
;
Enumeration
classpathEnum
=
classpathDependencies
.
keys
(
)
;
while
(
classpathEnum
.
hasMoreElements
(
)
)
{
String
className
=
(
String
)
classpathEnum
.
nextElement
(
)
;
log
(
" Class "
+
className
+
" depends on:"
,
Project
.
MSG_DEBUG
)
;
Hashtable
dependencies
=
(
Hashtable
)
classpathDependencies
.
get
(
className
)
;
Enumeration
classpathFileEnum
=
dependencies
.
elements
(
)
;
while
(
classpathFileEnum
.
hasMoreElements
(
)
)
{
File
classpathFile
=
(
File
)
classpathFileEnum
.
nextElement
(
)
;
log
(
"    "
+
classpathFile
.
getPath
(
)
,
Project
.
MSG_DEBUG
)
;
}
}
}
}
private
void
determineOutOfDateClasses
(
)
{
outOfDateClasses
=
new
Hashtable
(
)
;
for
(
int
i
=
0
;
i
<
srcPathList
.
length
;
i
++
)
{
File
srcDir
=
getProject
(
)
.
resolveFile
(
srcPathList
[
i
]
)
;
if
(
srcDir
.
exists
(
)
)
{
DirectoryScanner
ds
=
this
.
getDirectoryScanner
(
srcDir
)
;
String
[
]
files
=
ds
.
getIncludedFiles
(
)
;
scanDir
(
srcDir
,
files
)
;
}
}
if
(
classpathDependencies
==
null
)
{
return
;
}
Enumeration
classpathDepsEnum
=
classpathDependencies
.
keys
(
)
;
while
(
classpathDepsEnum
.
hasMoreElements
(
)
)
{
String
className
=
(
String
)
classpathDepsEnum
.
nextElement
(
)
;
if
(
outOfDateClasses
.
containsKey
(
className
)
)
{
continue
;
}
ClassFileInfo
info
=
(
ClassFileInfo
)
classFileInfoMap
.
get
(
className
)
;
if
(
info
!=
null
)
{
Hashtable
dependencies
=
(
Hashtable
)
classpathDependencies
.
get
(
className
)
;
for
(
Enumeration
e2
=
dependencies
.
elements
(
)
;
e2
.
hasMoreElements
(
)
;
)
{
File
classpathFile
=
(
File
)
e2
.
nextElement
(
)
;
if
(
classpathFile
.
lastModified
(
)
>
info
.
absoluteFile
.
lastModified
(
)
)
{
log
(
"Class "
+
className
+
" is out of date with respect to "
+
classpathFile
,
Project
.
MSG_DEBUG
)
;
outOfDateClasses
.
put
(
className
,
className
)
;
break
;
}
}
}
}
}
public
void
execute
(
)
throws
BuildException
{
try
{
long
start
=
System
.
currentTimeMillis
(
)
;
if
(
srcPath
==
null
)
{
throw
new
BuildException
(
"srcdir attribute must be set"
,
getLocation
(
)
)
;
}
srcPathList
=
srcPath
.
list
(
)
;
if
(
srcPathList
.
length
==
0
)
{
throw
new
BuildException
(
"srcdir attribute must be non-empty"
,
getLocation
(
)
)
;
}
if
(
destPath
==
null
)
{
destPath
=
srcPath
;
}
if
(
cache
!=
null
&&
cache
.
exists
(
)
&&
!
cache
.
isDirectory
(
)
)
{
throw
new
BuildException
(
"The cache, if specified, must "
+
"point to a directory"
)
;
}
if
(
cache
!=
null
&&
!
cache
.
exists
(
)
)
{
cache
.
mkdirs
(
)
;
}
determineDependencies
(
)
;
if
(
dump
)
{
dumpDependencies
(
)
;
}
determineOutOfDateClasses
(
)
;
int
count
=
deleteAllAffectedFiles
(
)
;
long
duration
=
(
System
.
currentTimeMillis
(
)
-
start
)
/
1000
;
final
int
summaryLogLevel
;
if
(
count
>
0
)
{
summaryLogLevel
=
Project
.
MSG_INFO
;
}
else
{
summaryLogLevel
=
Project
.
MSG_DEBUG
;
}
log
(
"Deleted "
+
count
+
" out of date files in "
+
duration
+
" seconds"
,
summaryLogLevel
)
;
}
catch
(
Exception
e
)
{
throw
new
BuildException
(
e
)
;
}
}
protected
void
scanDir
(
File
srcDir
,
String
[
]
files
)
{
for
(
int
i
=
0
;
i
<
files
.
length
;
i
++
)
{
File
srcFile
=
new
File
(
srcDir
,
files
[
i
]
)
;
if
(
files
[
i
]
.
endsWith
(
".java"
)
)
{
String
filePath
=
srcFile
.
getPath
(
)
;
String
className
=
filePath
.
substring
(
srcDir
.
getPath
(
)
.
length
(
)
+
1
,
filePath
.
length
(
)
-
".java"
.
length
(
)
)
;
className
=
ClassFileUtils
.
convertSlashName
(
className
)
;
ClassFileInfo
info
=
(
ClassFileInfo
)
classFileInfoMap
.
get
(
className
)
;
if
(
info
==
null
)
{
outOfDateClasses
.
put
(
className
,
className
)
;
}
else
{
if
(
srcFile
.
lastModified
(
)
>
info
.
absoluteFile
.
lastModified
(
)
)
{
outOfDateClasses
.
put
(
className
,
className
)
;
}
}
}
}
}
private
Vector
getClassFiles
(
Path
classLocations
)
{
String
[
]
classLocationsList
=
classLocations
.
list
(
)
;
Vector
classFileList
=
new
Vector
(
)
;
for
(
int
i
=
0
;
i
<
classLocationsList
.
length
;
++
i
)
{
File
dir
=
new
File
(
classLocationsList
[
i
]
)
;
if
(
dir
.
isDirectory
(
)
)
{
addClassFiles
(
classFileList
,
dir
,
dir
)
;
}
}
return
classFileList
;
}
private
File
findSourceFile
(
String
classname
)
{
String
sourceFilename
=
classname
+
".java"
;
int
innerIndex
=
classname
.
indexOf
(
"$"
)
;
if
(
innerIndex
!=
-
1
)
{
sourceFilename
=
classname
.
substring
(
0
,
innerIndex
)
+
".java"
;
}
for
(
int
i
=
0
;
i
<
srcPathList
.
length
;
++
i
)
{
File
sourceFile
=
new
File
(
srcPathList
[
i
]
,
sourceFilename
)
;
if
(
sourceFile
.
exists
(
)
)
{
return
sourceFile
;
}
}
return
null
;
}
private
void
addClassFiles
(
Vector
classFileList
,
File
dir
,
File
root
)
{
String
[
]
filesInDir
=
dir
.
list
(
)
;
if
(
filesInDir
==
null
)
{
return
;
}
int
length
=
filesInDir
.
length
;
int
rootLength
=
root
.
getPath
(
)
.
length
(
)
;
for
(
int
i
=
0
;
i
<
length
;
++
i
)
{
File
file
=
new
File
(
dir
,
filesInDir
[
i
]
)
;
if
(
file
.
isDirectory
(
)
)
{
addClassFiles
(
classFileList
,
file
,
root
)
;
}
else
if
(
file
.
getName
(
)
.
endsWith
(
".class"
)
)
{
ClassFileInfo
info
=
new
ClassFileInfo
(
)
;
info
.
absoluteFile
=
file
;
String
relativeName
=
file
.
getPath
(
)
.
substring
(
rootLength
+
1
,
file
.
getPath
(
)
.
length
(
)
-
6
)
;
info
.
className
=
ClassFileUtils
.
convertSlashName
(
relativeName
)
;
info
.
sourceFile
=
findSourceFile
(
relativeName
)
;
classFileList
.
addElement
(
info
)
;
}
}
}
public
void
setSrcdir
(
Path
srcPath
)
{
this
.
srcPath
=
srcPath
;
}
public
void
setDestDir
(
Path
destPath
)
{
this
.
destPath
=
destPath
;
}
public
void
setCache
(
File
cache
)
{
this
.
cache
=
cache
;
}
public
void
setClosure
(
boolean
closure
)
{
this
.
closure
=
closure
;
}
public
void
setDump
(
boolean
dump
)
{
this
.
dump
=
dump
;
}
}
