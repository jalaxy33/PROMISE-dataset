package
org
.
apache
.
tools
.
tar
;
import
java
.
io
.
File
;
import
java
.
util
.
Date
;
import
java
.
util
.
Locale
;
public
class
TarEntry
implements
TarConstants
{
private
StringBuffer
name
;
private
int
mode
;
private
int
userId
;
private
int
groupId
;
private
long
size
;
private
long
modTime
;
private
byte
linkFlag
;
private
StringBuffer
linkName
;
private
StringBuffer
magic
;
private
StringBuffer
userName
;
private
StringBuffer
groupName
;
private
int
devMajor
;
private
int
devMinor
;
private
File
file
;
public
static
final
int
MAX_NAMELEN
=
31
;
public
static
final
int
DEFAULT_DIR_MODE
=
040755
;
public
static
final
int
DEFAULT_FILE_MODE
=
0100644
;
public
static
final
int
MILLIS_PER_SECOND
=
1000
;
private
TarEntry
(
)
{
this
.
magic
=
new
StringBuffer
(
TMAGIC
)
;
this
.
name
=
new
StringBuffer
(
)
;
this
.
linkName
=
new
StringBuffer
(
)
;
String
user
=
System
.
getProperty
(
"user.name"
,
""
)
;
if
(
user
.
length
(
)
>
MAX_NAMELEN
)
{
user
=
user
.
substring
(
0
,
MAX_NAMELEN
)
;
}
this
.
userId
=
0
;
this
.
groupId
=
0
;
this
.
userName
=
new
StringBuffer
(
user
)
;
this
.
groupName
=
new
StringBuffer
(
""
)
;
this
.
file
=
null
;
}
public
TarEntry
(
String
name
)
{
this
(
)
;
boolean
isDir
=
name
.
endsWith
(
"/"
)
;
this
.
devMajor
=
0
;
this
.
devMinor
=
0
;
this
.
name
=
new
StringBuffer
(
name
)
;
this
.
mode
=
isDir
?
DEFAULT_DIR_MODE
:
DEFAULT_FILE_MODE
;
this
.
linkFlag
=
isDir
?
LF_DIR
:
LF_NORMAL
;
this
.
userId
=
0
;
this
.
groupId
=
0
;
this
.
size
=
0
;
this
.
modTime
=
(
new
Date
(
)
)
.
getTime
(
)
/
MILLIS_PER_SECOND
;
this
.
linkName
=
new
StringBuffer
(
""
)
;
this
.
userName
=
new
StringBuffer
(
""
)
;
this
.
groupName
=
new
StringBuffer
(
""
)
;
this
.
devMajor
=
0
;
this
.
devMinor
=
0
;
}
public
TarEntry
(
String
name
,
byte
linkFlag
)
{
this
(
name
)
;
this
.
linkFlag
=
linkFlag
;
}
public
TarEntry
(
File
file
)
{
this
(
)
;
this
.
file
=
file
;
String
fileName
=
file
.
getPath
(
)
;
String
osname
=
System
.
getProperty
(
"os.name"
)
.
toLowerCase
(
Locale
.
US
)
;
if
(
osname
!=
null
)
{
if
(
osname
.
startsWith
(
"windows"
)
)
{
if
(
fileName
.
length
(
)
>
2
)
{
char
ch1
=
fileName
.
charAt
(
0
)
;
char
ch2
=
fileName
.
charAt
(
1
)
;
if
(
ch2
==
':'
&&
(
(
ch1
>=
'a'
&&
ch1
<=
'z'
)
||
(
ch1
>=
'A'
&&
ch1
<=
'Z'
)
)
)
{
fileName
=
fileName
.
substring
(
2
)
;
}
}
}
else
if
(
osname
.
indexOf
(
"netware"
)
>
-
1
)
{
int
colon
=
fileName
.
indexOf
(
':'
)
;
if
(
colon
!=
-
1
)
{
fileName
=
fileName
.
substring
(
colon
+
1
)
;
}
}
}
fileName
=
fileName
.
replace
(
File
.
separatorChar
,
'/'
)
;
while
(
fileName
.
startsWith
(
"/"
)
)
{
fileName
=
fileName
.
substring
(
1
)
;
}
this
.
linkName
=
new
StringBuffer
(
""
)
;
this
.
name
=
new
StringBuffer
(
fileName
)
;
if
(
file
.
isDirectory
(
)
)
{
this
.
mode
=
DEFAULT_DIR_MODE
;
this
.
linkFlag
=
LF_DIR
;
if
(
this
.
name
.
charAt
(
this
.
name
.
length
(
)
-
1
)
!=
'/'
)
{
this
.
name
.
append
(
"/"
)
;
}
}
else
{
this
.
mode
=
DEFAULT_FILE_MODE
;
this
.
linkFlag
=
LF_NORMAL
;
}
this
.
size
=
file
.
length
(
)
;
this
.
modTime
=
file
.
lastModified
(
)
/
MILLIS_PER_SECOND
;
this
.
devMajor
=
0
;
this
.
devMinor
=
0
;
}
public
TarEntry
(
byte
[
]
headerBuf
)
{
this
(
)
;
this
.
parseTarHeader
(
headerBuf
)
;
}
public
boolean
equals
(
TarEntry
it
)
{
return
this
.
getName
(
)
.
equals
(
it
.
getName
(
)
)
;
}
public
boolean
equals
(
Object
it
)
{
if
(
it
==
null
||
getClass
(
)
!=
it
.
getClass
(
)
)
{
return
false
;
}
return
equals
(
(
TarEntry
)
it
)
;
}
public
int
hashCode
(
)
{
return
getName
(
)
.
hashCode
(
)
;
}
public
boolean
isDescendent
(
TarEntry
desc
)
{
return
desc
.
getName
(
)
.
startsWith
(
this
.
getName
(
)
)
;
}
public
String
getName
(
)
{
return
this
.
name
.
toString
(
)
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
new
StringBuffer
(
name
)
;
}
public
void
setMode
(
int
mode
)
{
this
.
mode
=
mode
;
}
public
String
getLinkName
(
)
{
return
this
.
linkName
.
toString
(
)
;
}
public
int
getUserId
(
)
{
return
this
.
userId
;
}
public
void
setUserId
(
int
userId
)
{
this
.
userId
=
userId
;
}
public
int
getGroupId
(
)
{
return
this
.
groupId
;
}
public
void
setGroupId
(
int
groupId
)
{
this
.
groupId
=
groupId
;
}
public
String
getUserName
(
)
{
return
this
.
userName
.
toString
(
)
;
}
public
void
setUserName
(
String
userName
)
{
this
.
userName
=
new
StringBuffer
(
userName
)
;
}
public
String
getGroupName
(
)
{
return
this
.
groupName
.
toString
(
)
;
}
public
void
setGroupName
(
String
groupName
)
{
this
.
groupName
=
new
StringBuffer
(
groupName
)
;
}
public
void
setIds
(
int
userId
,
int
groupId
)
{
this
.
setUserId
(
userId
)
;
this
.
setGroupId
(
groupId
)
;
}
public
void
setNames
(
String
userName
,
String
groupName
)
{
this
.
setUserName
(
userName
)
;
this
.
setGroupName
(
groupName
)
;
}
public
void
setModTime
(
long
time
)
{
this
.
modTime
=
time
/
MILLIS_PER_SECOND
;
}
public
void
setModTime
(
Date
time
)
{
this
.
modTime
=
time
.
getTime
(
)
/
MILLIS_PER_SECOND
;
}
public
Date
getModTime
(
)
{
return
new
Date
(
this
.
modTime
*
MILLIS_PER_SECOND
)
;
}
public
File
getFile
(
)
{
return
this
.
file
;
}
public
int
getMode
(
)
{
return
this
.
mode
;
}
public
long
getSize
(
)
{
return
this
.
size
;
}
public
void
setSize
(
long
size
)
{
this
.
size
=
size
;
}
public
boolean
isGNULongNameEntry
(
)
{
return
linkFlag
==
LF_GNUTYPE_LONGNAME
&&
name
.
toString
(
)
.
equals
(
GNU_LONGLINK
)
;
}
public
boolean
isDirectory
(
)
{
if
(
this
.
file
!=
null
)
{
return
this
.
file
.
isDirectory
(
)
;
}
if
(
this
.
linkFlag
==
LF_DIR
)
{
return
true
;
}
if
(
this
.
getName
(
)
.
endsWith
(
"/"
)
)
{
return
true
;
}
return
false
;
}
public
TarEntry
[
]
getDirectoryEntries
(
)
{
if
(
this
.
file
==
null
||
!
this
.
file
.
isDirectory
(
)
)
{
return
new
TarEntry
[
0
]
;
}
String
[
]
list
=
this
.
file
.
list
(
)
;
TarEntry
[
]
result
=
new
TarEntry
[
list
.
length
]
;
for
(
int
i
=
0
;
i
<
list
.
length
;
++
i
)
{
result
[
i
]
=
new
TarEntry
(
new
File
(
this
.
file
,
list
[
i
]
)
)
;
}
return
result
;
}
public
void
writeEntryHeader
(
byte
[
]
outbuf
)
{
int
offset
=
0
;
offset
=
TarUtils
.
getNameBytes
(
this
.
name
,
outbuf
,
offset
,
NAMELEN
)
;
offset
=
TarUtils
.
getOctalBytes
(
this
.
mode
,
outbuf
,
offset
,
MODELEN
)
;
offset
=
TarUtils
.
getOctalBytes
(
this
.
userId
,
outbuf
,
offset
,
UIDLEN
)
;
offset
=
TarUtils
.
getOctalBytes
(
this
.
groupId
,
outbuf
,
offset
,
GIDLEN
)
;
offset
=
TarUtils
.
getLongOctalBytes
(
this
.
size
,
outbuf
,
offset
,
SIZELEN
)
;
offset
=
TarUtils
.
getLongOctalBytes
(
this
.
modTime
,
outbuf
,
offset
,
MODTIMELEN
)
;
int
csOffset
=
offset
;
for
(
int
c
=
0
;
c
<
CHKSUMLEN
;
++
c
)
{
outbuf
[
offset
++
]
=
(
byte
)
' '
;
}
outbuf
[
offset
++
]
=
this
.
linkFlag
;
offset
=
TarUtils
.
getNameBytes
(
this
.
linkName
,
outbuf
,
offset
,
NAMELEN
)
;
offset
=
TarUtils
.
getNameBytes
(
this
.
magic
,
outbuf
,
offset
,
MAGICLEN
)
;
offset
=
TarUtils
.
getNameBytes
(
this
.
userName
,
outbuf
,
offset
,
UNAMELEN
)
;
offset
=
TarUtils
.
getNameBytes
(
this
.
groupName
,
outbuf
,
offset
,
GNAMELEN
)
;
offset
=
TarUtils
.
getOctalBytes
(
this
.
devMajor
,
outbuf
,
offset
,
DEVLEN
)
;
offset
=
TarUtils
.
getOctalBytes
(
this
.
devMinor
,
outbuf
,
offset
,
DEVLEN
)
;
while
(
offset
<
outbuf
.
length
)
{
outbuf
[
offset
++
]
=
0
;
}
long
chk
=
TarUtils
.
computeCheckSum
(
outbuf
)
;
TarUtils
.
getCheckSumOctalBytes
(
chk
,
outbuf
,
csOffset
,
CHKSUMLEN
)
;
}
public
void
parseTarHeader
(
byte
[
]
header
)
{
int
offset
=
0
;
this
.
name
=
TarUtils
.
parseName
(
header
,
offset
,
NAMELEN
)
;
offset
+=
NAMELEN
;
this
.
mode
=
(
int
)
TarUtils
.
parseOctal
(
header
,
offset
,
MODELEN
)
;
offset
+=
MODELEN
;
this
.
userId
=
(
int
)
TarUtils
.
parseOctal
(
header
,
offset
,
UIDLEN
)
;
offset
+=
UIDLEN
;
this
.
groupId
=
(
int
)
TarUtils
.
parseOctal
(
header
,
offset
,
GIDLEN
)
;
offset
+=
GIDLEN
;
this
.
size
=
TarUtils
.
parseOctal
(
header
,
offset
,
SIZELEN
)
;
offset
+=
SIZELEN
;
this
.
modTime
=
TarUtils
.
parseOctal
(
header
,
offset
,
MODTIMELEN
)
;
offset
+=
MODTIMELEN
;
offset
+=
CHKSUMLEN
;
this
.
linkFlag
=
header
[
offset
++
]
;
this
.
linkName
=
TarUtils
.
parseName
(
header
,
offset
,
NAMELEN
)
;
offset
+=
NAMELEN
;
this
.
magic
=
TarUtils
.
parseName
(
header
,
offset
,
MAGICLEN
)
;
offset
+=
MAGICLEN
;
this
.
userName
=
TarUtils
.
parseName
(
header
,
offset
,
UNAMELEN
)
;
offset
+=
UNAMELEN
;
this
.
groupName
=
TarUtils
.
parseName
(
header
,
offset
,
GNAMELEN
)
;
offset
+=
GNAMELEN
;
this
.
devMajor
=
(
int
)
TarUtils
.
parseOctal
(
header
,
offset
,
DEVLEN
)
;
offset
+=
DEVLEN
;
this
.
devMinor
=
(
int
)
TarUtils
.
parseOctal
(
header
,
offset
,
DEVLEN
)
;
}
}
