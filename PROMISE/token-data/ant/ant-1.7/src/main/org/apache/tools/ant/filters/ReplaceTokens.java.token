package
org
.
apache
.
tools
.
ant
.
filters
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Reader
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Properties
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
types
.
Parameter
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
public
final
class
ReplaceTokens
extends
BaseParamFilterReader
implements
ChainableReader
{
private
static
final
char
DEFAULT_BEGIN_TOKEN
=
'@'
;
private
static
final
char
DEFAULT_END_TOKEN
=
'@'
;
private
String
queuedData
=
null
;
private
String
replaceData
=
null
;
private
int
replaceIndex
=
-
1
;
private
int
queueIndex
=
-
1
;
private
Hashtable
hash
=
new
Hashtable
(
)
;
private
char
beginToken
=
DEFAULT_BEGIN_TOKEN
;
private
char
endToken
=
DEFAULT_END_TOKEN
;
public
ReplaceTokens
(
)
{
super
(
)
;
}
public
ReplaceTokens
(
final
Reader
in
)
{
super
(
in
)
;
}
private
int
getNextChar
(
)
throws
IOException
{
if
(
queueIndex
!=
-
1
)
{
final
int
ch
=
queuedData
.
charAt
(
queueIndex
++
)
;
if
(
queueIndex
>=
queuedData
.
length
(
)
)
{
queueIndex
=
-
1
;
}
return
ch
;
}
return
in
.
read
(
)
;
}
public
int
read
(
)
throws
IOException
{
if
(
!
getInitialized
(
)
)
{
initialize
(
)
;
setInitialized
(
true
)
;
}
if
(
replaceIndex
!=
-
1
)
{
final
int
ch
=
replaceData
.
charAt
(
replaceIndex
++
)
;
if
(
replaceIndex
>=
replaceData
.
length
(
)
)
{
replaceIndex
=
-
1
;
}
return
ch
;
}
int
ch
=
getNextChar
(
)
;
if
(
ch
==
beginToken
)
{
final
StringBuffer
key
=
new
StringBuffer
(
""
)
;
do
{
ch
=
getNextChar
(
)
;
if
(
ch
!=
-
1
)
{
key
.
append
(
(
char
)
ch
)
;
}
else
{
break
;
}
}
while
(
ch
!=
endToken
)
;
if
(
ch
==
-
1
)
{
if
(
queuedData
==
null
||
queueIndex
==
-
1
)
{
queuedData
=
key
.
toString
(
)
;
}
else
{
queuedData
=
key
.
toString
(
)
+
queuedData
.
substring
(
queueIndex
)
;
}
queueIndex
=
0
;
return
beginToken
;
}
else
{
key
.
setLength
(
key
.
length
(
)
-
1
)
;
final
String
replaceWith
=
(
String
)
hash
.
get
(
key
.
toString
(
)
)
;
if
(
replaceWith
!=
null
)
{
if
(
replaceWith
.
length
(
)
>
0
)
{
replaceData
=
replaceWith
;
replaceIndex
=
0
;
}
return
read
(
)
;
}
else
{
String
newData
=
key
.
toString
(
)
+
endToken
;
if
(
queuedData
==
null
||
queueIndex
==
-
1
)
{
queuedData
=
newData
;
}
else
{
queuedData
=
newData
+
queuedData
.
substring
(
queueIndex
)
;
}
queueIndex
=
0
;
return
beginToken
;
}
}
}
return
ch
;
}
public
void
setBeginToken
(
final
char
beginToken
)
{
this
.
beginToken
=
beginToken
;
}
private
char
getBeginToken
(
)
{
return
beginToken
;
}
public
void
setEndToken
(
final
char
endToken
)
{
this
.
endToken
=
endToken
;
}
private
char
getEndToken
(
)
{
return
endToken
;
}
public
void
addConfiguredToken
(
final
Token
token
)
{
hash
.
put
(
token
.
getKey
(
)
,
token
.
getValue
(
)
)
;
}
private
Properties
getPropertiesFromFile
(
String
fileName
)
{
FileInputStream
in
=
null
;
Properties
props
=
new
Properties
(
)
;
try
{
in
=
new
FileInputStream
(
fileName
)
;
props
.
load
(
in
)
;
}
catch
(
IOException
ioe
)
{
ioe
.
printStackTrace
(
)
;
}
finally
{
FileUtils
.
close
(
in
)
;
}
return
props
;
}
private
void
setTokens
(
final
Hashtable
hash
)
{
this
.
hash
=
hash
;
}
private
Hashtable
getTokens
(
)
{
return
hash
;
}
public
Reader
chain
(
final
Reader
rdr
)
{
ReplaceTokens
newFilter
=
new
ReplaceTokens
(
rdr
)
;
newFilter
.
setBeginToken
(
getBeginToken
(
)
)
;
newFilter
.
setEndToken
(
getEndToken
(
)
)
;
newFilter
.
setTokens
(
getTokens
(
)
)
;
newFilter
.
setInitialized
(
true
)
;
return
newFilter
;
}
private
void
initialize
(
)
{
Parameter
[
]
params
=
getParameters
(
)
;
if
(
params
!=
null
)
{
for
(
int
i
=
0
;
i
<
params
.
length
;
i
++
)
{
if
(
params
[
i
]
!=
null
)
{
final
String
type
=
params
[
i
]
.
getType
(
)
;
if
(
"tokenchar"
.
equals
(
type
)
)
{
final
String
name
=
params
[
i
]
.
getName
(
)
;
String
value
=
params
[
i
]
.
getValue
(
)
;
if
(
"begintoken"
.
equals
(
name
)
)
{
if
(
value
.
length
(
)
==
0
)
{
throw
new
BuildException
(
"Begin token cannot "
+
"be empty"
)
;
}
beginToken
=
params
[
i
]
.
getValue
(
)
.
charAt
(
0
)
;
}
else
if
(
"endtoken"
.
equals
(
name
)
)
{
if
(
value
.
length
(
)
==
0
)
{
throw
new
BuildException
(
"End token cannot "
+
"be empty"
)
;
}
endToken
=
params
[
i
]
.
getValue
(
)
.
charAt
(
0
)
;
}
}
else
if
(
"token"
.
equals
(
type
)
)
{
final
String
name
=
params
[
i
]
.
getName
(
)
;
final
String
value
=
params
[
i
]
.
getValue
(
)
;
hash
.
put
(
name
,
value
)
;
}
else
if
(
"propertiesfile"
.
equals
(
type
)
)
{
Properties
props
=
getPropertiesFromFile
(
params
[
i
]
.
getValue
(
)
)
;
for
(
Enumeration
e
=
props
.
keys
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
key
=
(
String
)
e
.
nextElement
(
)
;
String
value
=
props
.
getProperty
(
key
)
;
hash
.
put
(
key
,
value
)
;
}
}
}
}
}
}
public
static
class
Token
{
private
String
key
;
private
String
value
;
public
final
void
setKey
(
String
key
)
{
this
.
key
=
key
;
}
public
final
void
setValue
(
String
value
)
{
this
.
value
=
value
;
}
public
final
String
getKey
(
)
{
return
key
;
}
public
final
String
getValue
(
)
{
return
value
;
}
}
}
