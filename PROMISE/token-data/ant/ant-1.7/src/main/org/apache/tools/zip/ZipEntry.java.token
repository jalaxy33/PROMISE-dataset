package
org
.
apache
.
tools
.
zip
;
import
java
.
util
.
Vector
;
import
java
.
util
.
zip
.
ZipException
;
public
class
ZipEntry
extends
java
.
util
.
zip
.
ZipEntry
implements
Cloneable
{
private
static
final
int
PLATFORM_UNIX
=
3
;
private
static
final
int
PLATFORM_FAT
=
0
;
private
int
internalAttributes
=
0
;
private
int
platform
=
PLATFORM_FAT
;
private
long
externalAttributes
=
0
;
private
Vector
extraFields
=
null
;
private
String
name
=
null
;
public
ZipEntry
(
String
name
)
{
super
(
name
)
;
}
public
ZipEntry
(
java
.
util
.
zip
.
ZipEntry
entry
)
throws
ZipException
{
super
(
entry
)
;
byte
[
]
extra
=
entry
.
getExtra
(
)
;
if
(
extra
!=
null
)
{
setExtraFields
(
ExtraFieldUtils
.
parse
(
extra
)
)
;
}
else
{
setExtra
(
)
;
}
}
public
ZipEntry
(
ZipEntry
entry
)
throws
ZipException
{
this
(
(
java
.
util
.
zip
.
ZipEntry
)
entry
)
;
setInternalAttributes
(
entry
.
getInternalAttributes
(
)
)
;
setExternalAttributes
(
entry
.
getExternalAttributes
(
)
)
;
setExtraFields
(
entry
.
getExtraFields
(
)
)
;
}
protected
ZipEntry
(
)
{
super
(
""
)
;
}
public
Object
clone
(
)
{
ZipEntry
e
=
(
ZipEntry
)
super
.
clone
(
)
;
e
.
extraFields
=
extraFields
!=
null
?
(
Vector
)
extraFields
.
clone
(
)
:
null
;
e
.
setInternalAttributes
(
getInternalAttributes
(
)
)
;
e
.
setExternalAttributes
(
getExternalAttributes
(
)
)
;
e
.
setExtraFields
(
getExtraFields
(
)
)
;
return
e
;
}
public
int
getInternalAttributes
(
)
{
return
internalAttributes
;
}
public
void
setInternalAttributes
(
int
value
)
{
internalAttributes
=
value
;
}
public
long
getExternalAttributes
(
)
{
return
externalAttributes
;
}
public
void
setExternalAttributes
(
long
value
)
{
externalAttributes
=
value
;
}
public
void
setUnixMode
(
int
mode
)
{
setExternalAttributes
(
(
mode
<<
16
)
|
(
(
mode
&
0200
)
==
0
?
1
:
0
)
|
(
isDirectory
(
)
?
0x10
:
0
)
)
;
platform
=
PLATFORM_UNIX
;
}
public
int
getUnixMode
(
)
{
return
(
int
)
(
(
getExternalAttributes
(
)
>
>
16
)
&
0xFFFF
)
;
}
public
int
getPlatform
(
)
{
return
platform
;
}
protected
void
setPlatform
(
int
platform
)
{
this
.
platform
=
platform
;
}
public
void
setExtraFields
(
ZipExtraField
[
]
fields
)
{
extraFields
=
new
Vector
(
)
;
for
(
int
i
=
0
;
i
<
fields
.
length
;
i
++
)
{
extraFields
.
addElement
(
fields
[
i
]
)
;
}
setExtra
(
)
;
}
public
ZipExtraField
[
]
getExtraFields
(
)
{
if
(
extraFields
==
null
)
{
return
new
ZipExtraField
[
0
]
;
}
ZipExtraField
[
]
result
=
new
ZipExtraField
[
extraFields
.
size
(
)
]
;
extraFields
.
copyInto
(
result
)
;
return
result
;
}
public
void
addExtraField
(
ZipExtraField
ze
)
{
if
(
extraFields
==
null
)
{
extraFields
=
new
Vector
(
)
;
}
ZipShort
type
=
ze
.
getHeaderId
(
)
;
boolean
done
=
false
;
for
(
int
i
=
0
,
fieldsSize
=
extraFields
.
size
(
)
;
!
done
&&
i
<
fieldsSize
;
i
++
)
{
if
(
(
(
ZipExtraField
)
extraFields
.
elementAt
(
i
)
)
.
getHeaderId
(
)
.
equals
(
type
)
)
{
extraFields
.
setElementAt
(
ze
,
i
)
;
done
=
true
;
}
}
if
(
!
done
)
{
extraFields
.
addElement
(
ze
)
;
}
setExtra
(
)
;
}
public
void
removeExtraField
(
ZipShort
type
)
{
if
(
extraFields
==
null
)
{
extraFields
=
new
Vector
(
)
;
}
boolean
done
=
false
;
for
(
int
i
=
0
,
fieldsSize
=
extraFields
.
size
(
)
;
!
done
&&
i
<
fieldsSize
;
i
++
)
{
if
(
(
(
ZipExtraField
)
extraFields
.
elementAt
(
i
)
)
.
getHeaderId
(
)
.
equals
(
type
)
)
{
extraFields
.
removeElementAt
(
i
)
;
done
=
true
;
}
}
if
(
!
done
)
{
throw
new
java
.
util
.
NoSuchElementException
(
)
;
}
setExtra
(
)
;
}
public
void
setExtra
(
byte
[
]
extra
)
throws
RuntimeException
{
try
{
setExtraFields
(
ExtraFieldUtils
.
parse
(
extra
)
)
;
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
e
.
getMessage
(
)
)
;
}
}
protected
void
setExtra
(
)
{
super
.
setExtra
(
ExtraFieldUtils
.
mergeLocalFileDataData
(
getExtraFields
(
)
)
)
;
}
public
byte
[
]
getLocalFileDataExtra
(
)
{
byte
[
]
extra
=
getExtra
(
)
;
return
extra
!=
null
?
extra
:
new
byte
[
0
]
;
}
public
byte
[
]
getCentralDirectoryExtra
(
)
{
return
ExtraFieldUtils
.
mergeCentralDirectoryData
(
getExtraFields
(
)
)
;
}
public
void
setComprSize
(
long
size
)
{
setCompressedSize
(
size
)
;
}
public
String
getName
(
)
{
return
name
==
null
?
super
.
getName
(
)
:
name
;
}
public
boolean
isDirectory
(
)
{
return
getName
(
)
.
endsWith
(
"/"
)
;
}
protected
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
public
int
hashCode
(
)
{
return
getName
(
)
.
hashCode
(
)
;
}
public
boolean
equals
(
Object
o
)
{
return
(
this
==
o
)
;
}
}
