package
org
.
apache
.
tools
.
ant
.
taskdefs
.
optional
.
dotnet
;
import
java
.
io
.
File
;
public
class
CSharp
extends
DotnetCompile
{
String
definitions
;
private
File
docFile
;
private
int
fileAlign
=
0
;
private
boolean
fullpaths
=
false
;
private
boolean
incremental
;
protected
boolean
unsafe
;
private
boolean
noconfig
=
false
;
public
CSharp
(
)
{
clear
(
)
;
}
public
void
clear
(
)
{
super
.
clear
(
)
;
docFile
=
null
;
fileAlign
=
0
;
fullpaths
=
true
;
incremental
=
false
;
unsafe
=
false
;
noconfig
=
false
;
definitions
=
null
;
setExecutable
(
isWindows
?
"csc"
:
"mcs"
)
;
}
public
void
setDocFile
(
File
f
)
{
docFile
=
f
;
}
protected
String
getDocFileParameter
(
)
{
if
(
docFile
!=
null
)
{
return
"/doc:"
+
docFile
.
toString
(
)
;
}
else
{
return
null
;
}
}
public
void
setFileAlign
(
int
fileAlign
)
{
this
.
fileAlign
=
fileAlign
;
}
protected
String
getFileAlignParameter
(
)
{
if
(
fileAlign
!=
0
&&
!
"mcs"
.
equals
(
getExecutable
(
)
)
)
{
return
"/filealign:"
+
fileAlign
;
}
else
{
return
null
;
}
}
public
void
setFullPaths
(
boolean
enabled
)
{
fullpaths
=
enabled
;
}
protected
String
getFullPathsParameter
(
)
{
return
fullpaths
?
"/fullpaths"
:
null
;
}
public
void
setIncremental
(
boolean
incremental
)
{
this
.
incremental
=
incremental
;
}
public
boolean
getIncremental
(
)
{
return
incremental
;
}
protected
String
getIncrementalParameter
(
)
{
return
"/incremental"
+
(
incremental
?
"+"
:
"-"
)
;
}
public
void
setOutputFile
(
File
params
)
{
setDestFile
(
params
)
;
}
public
void
setUnsafe
(
boolean
unsafe
)
{
this
.
unsafe
=
unsafe
;
}
public
boolean
getUnsafe
(
)
{
return
this
.
unsafe
;
}
protected
String
getUnsafeParameter
(
)
{
return
unsafe
?
"/unsafe"
:
null
;
}
public
void
setNoConfig
(
boolean
enabled
)
{
noconfig
=
enabled
;
}
protected
String
getNoConfigParameter
(
)
{
return
noconfig
?
"/noconfig"
:
null
;
}
public
void
setDefinitions
(
String
params
)
{
definitions
=
params
;
}
protected
String
getDefinitionsParameter
(
)
{
String
predecessors
=
super
.
getDefinitionsParameter
(
)
;
if
(
notEmpty
(
definitions
)
)
{
if
(
predecessors
==
null
)
{
predecessors
=
"/define:"
;
}
return
predecessors
+
definitions
;
}
else
{
return
predecessors
;
}
}
public
void
addCompilerSpecificOptions
(
NetCommand
command
)
{
command
.
addArgument
(
getIncludeDefaultReferencesParameter
(
)
)
;
command
.
addArgument
(
getWarnLevelParameter
(
)
)
;
command
.
addArgument
(
getDocFileParameter
(
)
)
;
command
.
addArgument
(
getFullPathsParameter
(
)
)
;
command
.
addArgument
(
getFileAlignParameter
(
)
)
;
command
.
addArgument
(
getIncrementalParameter
(
)
)
;
command
.
addArgument
(
getNoConfigParameter
(
)
)
;
command
.
addArgument
(
getUnsafeParameter
(
)
)
;
}
public
String
getReferenceDelimiter
(
)
{
return
";"
;
}
public
String
getFileExtension
(
)
{
return
"cs"
;
}
protected
void
createResourceParameter
(
NetCommand
command
,
DotnetResource
resource
)
{
resource
.
getParameters
(
getProject
(
)
,
command
,
true
)
;
}
}
