package
org
.
apache
.
tools
.
ant
.
util
.
regexp
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
MagicNames
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
util
.
ClasspathUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
JavaEnvUtils
;
public
class
RegexpMatcherFactory
{
public
RegexpMatcherFactory
(
)
{
}
public
RegexpMatcher
newRegexpMatcher
(
)
throws
BuildException
{
return
newRegexpMatcher
(
null
)
;
}
public
RegexpMatcher
newRegexpMatcher
(
Project
p
)
throws
BuildException
{
String
systemDefault
=
null
;
if
(
p
==
null
)
{
systemDefault
=
System
.
getProperty
(
MagicNames
.
REGEXP_IMPL
)
;
}
else
{
systemDefault
=
p
.
getProperty
(
MagicNames
.
REGEXP_IMPL
)
;
}
if
(
systemDefault
!=
null
)
{
return
createInstance
(
systemDefault
)
;
}
Throwable
cause
=
null
;
try
{
testAvailability
(
"java.util.regex.Matcher"
)
;
return
createInstance
(
"org.apache.tools.ant.util.regexp.Jdk14RegexpMatcher"
)
;
}
catch
(
BuildException
be
)
{
cause
=
orCause
(
cause
,
be
,
JavaEnvUtils
.
getJavaVersionNumber
(
)
<
14
)
;
}
try
{
testAvailability
(
"org.apache.oro.text.regex.Pattern"
)
;
return
createInstance
(
"org.apache.tools.ant.util.regexp.JakartaOroMatcher"
)
;
}
catch
(
BuildException
be
)
{
cause
=
orCause
(
cause
,
be
,
true
)
;
}
try
{
testAvailability
(
"org.apache.regexp.RE"
)
;
return
createInstance
(
"org.apache.tools.ant.util.regexp.JakartaRegexpMatcher"
)
;
}
catch
(
BuildException
be
)
{
cause
=
orCause
(
cause
,
be
,
true
)
;
}
throw
new
BuildException
(
"No supported regular expression matcher found"
+
(
cause
!=
null
?
": "
+
cause
:
""
)
,
cause
)
;
}
static
Throwable
orCause
(
Throwable
deflt
,
BuildException
be
,
boolean
ignoreCnfe
)
{
if
(
deflt
!=
null
)
{
return
deflt
;
}
Throwable
t
=
be
.
getException
(
)
;
return
ignoreCnfe
&&
t
instanceof
ClassNotFoundException
?
null
:
t
;
}
protected
RegexpMatcher
createInstance
(
String
className
)
throws
BuildException
{
return
(
RegexpMatcher
)
ClasspathUtils
.
newInstance
(
className
,
RegexpMatcherFactory
.
class
.
getClassLoader
(
)
,
RegexpMatcher
.
class
)
;
}
protected
void
testAvailability
(
String
className
)
throws
BuildException
{
try
{
Class
.
forName
(
className
)
;
}
catch
(
Throwable
t
)
{
throw
new
BuildException
(
t
)
;
}
}
}
