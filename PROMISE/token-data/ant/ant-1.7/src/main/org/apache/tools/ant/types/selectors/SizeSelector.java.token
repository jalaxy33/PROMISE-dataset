package
org
.
apache
.
tools
.
ant
.
types
.
selectors
;
import
java
.
io
.
File
;
import
org
.
apache
.
tools
.
ant
.
types
.
Comparison
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
import
org
.
apache
.
tools
.
ant
.
types
.
Parameter
;
public
class
SizeSelector
extends
BaseExtendSelector
{
public
static
final
String
SIZE_KEY
=
"value"
;
public
static
final
String
UNITS_KEY
=
"units"
;
public
static
final
String
WHEN_KEY
=
"when"
;
private
long
size
=
-
1
;
private
long
multiplier
=
1
;
private
long
sizelimit
=
-
1
;
private
Comparison
when
=
Comparison
.
EQUAL
;
public
SizeSelector
(
)
{
}
public
String
toString
(
)
{
StringBuffer
buf
=
new
StringBuffer
(
"{sizeselector value: "
)
;
buf
.
append
(
sizelimit
)
;
buf
.
append
(
"compare: "
)
.
append
(
when
.
getValue
(
)
)
;
buf
.
append
(
"}"
)
;
return
buf
.
toString
(
)
;
}
public
void
setValue
(
long
size
)
{
this
.
size
=
size
;
if
(
multiplier
!=
0
&&
size
>
-
1
)
{
sizelimit
=
size
*
multiplier
;
}
}
public
void
setUnits
(
ByteUnits
units
)
{
int
i
=
units
.
getIndex
(
)
;
multiplier
=
0
;
if
(
i
>
-
1
&&
i
<
4
)
{
multiplier
=
1000
;
}
else
if
(
i
>
3
&&
i
<
9
)
{
multiplier
=
1024
;
}
else
if
(
i
>
8
&&
i
<
13
)
{
multiplier
=
1000000
;
}
else
if
(
i
>
12
&&
i
<
18
)
{
multiplier
=
1048576
;
}
else
if
(
i
>
17
&&
i
<
22
)
{
multiplier
=
1000000000L
;
}
else
if
(
i
>
21
&&
i
<
27
)
{
multiplier
=
1073741824L
;
}
else
if
(
i
>
26
&&
i
<
31
)
{
multiplier
=
1000000000000L
;
}
else
if
(
i
>
30
&&
i
<
36
)
{
multiplier
=
1099511627776L
;
}
if
(
multiplier
>
0
&&
size
>
-
1
)
{
sizelimit
=
size
*
multiplier
;
}
}
public
void
setWhen
(
SizeComparisons
when
)
{
this
.
when
=
when
;
}
public
void
setParameters
(
Parameter
[
]
parameters
)
{
super
.
setParameters
(
parameters
)
;
if
(
parameters
!=
null
)
{
for
(
int
i
=
0
;
i
<
parameters
.
length
;
i
++
)
{
String
paramname
=
parameters
[
i
]
.
getName
(
)
;
if
(
SIZE_KEY
.
equalsIgnoreCase
(
paramname
)
)
{
try
{
setValue
(
new
Long
(
parameters
[
i
]
.
getValue
(
)
)
.
longValue
(
)
)
;
}
catch
(
NumberFormatException
nfe
)
{
setError
(
"Invalid size setting "
+
parameters
[
i
]
.
getValue
(
)
)
;
}
}
else
if
(
UNITS_KEY
.
equalsIgnoreCase
(
paramname
)
)
{
ByteUnits
units
=
new
ByteUnits
(
)
;
units
.
setValue
(
parameters
[
i
]
.
getValue
(
)
)
;
setUnits
(
units
)
;
}
else
if
(
WHEN_KEY
.
equalsIgnoreCase
(
paramname
)
)
{
SizeComparisons
scmp
=
new
SizeComparisons
(
)
;
scmp
.
setValue
(
parameters
[
i
]
.
getValue
(
)
)
;
setWhen
(
scmp
)
;
}
else
{
setError
(
"Invalid parameter "
+
paramname
)
;
}
}
}
}
public
void
verifySettings
(
)
{
if
(
size
<
0
)
{
setError
(
"The value attribute is required, and must be positive"
)
;
}
else
if
(
multiplier
<
1
)
{
setError
(
"Invalid Units supplied, must be K,Ki,M,Mi,G,Gi,T,or Ti"
)
;
}
else
if
(
sizelimit
<
0
)
{
setError
(
"Internal error: Code is not setting sizelimit correctly"
)
;
}
}
public
boolean
isSelected
(
File
basedir
,
String
filename
,
File
file
)
{
validate
(
)
;
if
(
file
.
isDirectory
(
)
)
{
return
true
;
}
long
diff
=
file
.
length
(
)
-
sizelimit
;
return
when
.
evaluate
(
diff
==
0
?
0
:
(
int
)
(
diff
/
Math
.
abs
(
diff
)
)
)
;
}
public
static
class
ByteUnits
extends
EnumeratedAttribute
{
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
"K"
,
"k"
,
"kilo"
,
"KILO"
,
"Ki"
,
"KI"
,
"ki"
,
"kibi"
,
"KIBI"
,
"M"
,
"m"
,
"mega"
,
"MEGA"
,
"Mi"
,
"MI"
,
"mi"
,
"mebi"
,
"MEBI"
,
"G"
,
"g"
,
"giga"
,
"GIGA"
,
"Gi"
,
"GI"
,
"gi"
,
"gibi"
,
"GIBI"
,
"T"
,
"t"
,
"tera"
,
"TERA"
,
"Ti"
,
"TI"
,
"ti"
,
"tebi"
,
"TEBI"
}
;
}
}
public
static
class
SizeComparisons
extends
Comparison
{
}
}
