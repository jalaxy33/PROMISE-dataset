package
org
.
apache
.
tools
.
ant
.
types
.
resources
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
FilterOutputStream
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
io
.
ByteArrayOutputStream
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
types
.
Resource
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
public
class
StringResource
extends
Resource
{
private
static
final
int
STRING_MAGIC
=
Resource
.
getMagicNumber
(
"StringResource"
.
getBytes
(
)
)
;
private
String
encoding
=
null
;
public
StringResource
(
)
{
}
public
StringResource
(
String
value
)
{
setValue
(
value
)
;
}
public
synchronized
void
setName
(
String
s
)
{
if
(
getName
(
)
!=
null
)
{
throw
new
BuildException
(
new
ImmutableResourceException
(
)
)
;
}
super
.
setName
(
s
)
;
}
public
synchronized
void
setValue
(
String
s
)
{
setName
(
s
)
;
}
public
synchronized
String
getName
(
)
{
return
super
.
getName
(
)
;
}
public
synchronized
String
getValue
(
)
{
return
getName
(
)
;
}
public
synchronized
void
setEncoding
(
String
s
)
{
encoding
=
s
;
}
public
synchronized
String
getEncoding
(
)
{
return
encoding
;
}
public
synchronized
long
getSize
(
)
{
return
isReference
(
)
?
(
(
Resource
)
getCheckedRef
(
)
)
.
getSize
(
)
:
(
long
)
getContent
(
)
.
length
(
)
;
}
public
synchronized
int
hashCode
(
)
{
if
(
isReference
(
)
)
{
return
getCheckedRef
(
)
.
hashCode
(
)
;
}
return
super
.
hashCode
(
)
*
STRING_MAGIC
;
}
public
String
toString
(
)
{
if
(
isReference
(
)
)
{
return
getCheckedRef
(
)
.
toString
(
)
;
}
return
String
.
valueOf
(
getContent
(
)
)
;
}
public
synchronized
InputStream
getInputStream
(
)
throws
IOException
{
if
(
isReference
(
)
)
{
return
(
(
Resource
)
getCheckedRef
(
)
)
.
getInputStream
(
)
;
}
return
new
ByteArrayInputStream
(
getContent
(
)
.
getBytes
(
)
)
;
}
public
synchronized
OutputStream
getOutputStream
(
)
throws
IOException
{
if
(
isReference
(
)
)
{
return
(
(
Resource
)
getCheckedRef
(
)
)
.
getOutputStream
(
)
;
}
if
(
getValue
(
)
!=
null
)
{
throw
new
ImmutableResourceException
(
)
;
}
final
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
return
new
FilterOutputStream
(
baos
)
{
public
void
close
(
)
throws
IOException
{
super
.
close
(
)
;
StringResource
.
this
.
setValue
(
encoding
==
null
?
baos
.
toString
(
)
:
baos
.
toString
(
encoding
)
)
;
}
}
;
}
public
void
setRefid
(
Reference
r
)
{
if
(
encoding
!=
null
)
{
throw
tooManyAttributes
(
)
;
}
super
.
setRefid
(
r
)
;
}
protected
synchronized
String
getContent
(
)
{
if
(
isReference
(
)
)
{
return
(
(
StringResource
)
getCheckedRef
(
)
)
.
getContent
(
)
;
}
String
value
=
getValue
(
)
;
if
(
value
==
null
)
{
return
value
;
}
return
getProject
(
)
==
null
?
value
:
getProject
(
)
.
replaceProperties
(
value
)
;
}
}
