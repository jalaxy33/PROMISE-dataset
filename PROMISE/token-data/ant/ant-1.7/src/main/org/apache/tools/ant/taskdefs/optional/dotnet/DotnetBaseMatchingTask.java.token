package
org
.
apache
.
tools
.
ant
.
taskdefs
.
optional
.
dotnet
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
MatchingTask
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
condition
.
Os
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
java
.
io
.
File
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Enumeration
;
public
class
DotnetBaseMatchingTask
extends
MatchingTask
{
protected
File
outputFile
;
protected
Vector
filesets
=
new
Vector
(
)
;
protected
File
srcDir
;
protected
static
final
boolean
isWindows
=
Os
.
isFamily
(
"windows"
)
;
public
File
getSrcDir
(
)
{
return
this
.
srcDir
;
}
public
void
setSrcDir
(
File
srcDirName
)
{
this
.
srcDir
=
srcDirName
;
}
public
void
setDestFile
(
File
file
)
{
outputFile
=
file
;
}
public
void
addSrc
(
FileSet
src
)
{
filesets
.
add
(
src
)
;
}
public
File
getDestFile
(
)
{
return
outputFile
;
}
protected
int
buildFileList
(
NetCommand
command
,
Hashtable
filesToBuild
,
long
outputTimestamp
)
{
int
filesOutOfDate
=
0
;
boolean
scanImplicitFileset
=
getSrcDir
(
)
!=
null
||
filesets
.
size
(
)
==
0
;
if
(
scanImplicitFileset
)
{
if
(
getSrcDir
(
)
==
null
)
{
setSrcDir
(
getProject
(
)
.
resolveFile
(
"."
)
)
;
}
log
(
"working from source directory "
+
getSrcDir
(
)
,
Project
.
MSG_VERBOSE
)
;
DirectoryScanner
scanner
=
getDirectoryScanner
(
getSrcDir
(
)
)
;
filesOutOfDate
=
command
.
scanOneFileset
(
scanner
,
filesToBuild
,
outputTimestamp
)
;
}
for
(
int
i
=
0
;
i
<
filesets
.
size
(
)
;
i
++
)
{
FileSet
fs
=
(
FileSet
)
filesets
.
elementAt
(
i
)
;
filesOutOfDate
+=
command
.
scanOneFileset
(
fs
.
getDirectoryScanner
(
getProject
(
)
)
,
filesToBuild
,
outputTimestamp
)
;
}
return
filesOutOfDate
;
}
protected
void
addFilesToCommand
(
Hashtable
filesToBuild
,
NetCommand
command
)
{
int
count
=
filesToBuild
.
size
(
)
;
log
(
"compiling "
+
count
+
" file"
+
(
(
count
==
1
)
?
""
:
"s"
)
,
Project
.
MSG_VERBOSE
)
;
Enumeration
files
=
filesToBuild
.
elements
(
)
;
while
(
files
.
hasMoreElements
(
)
)
{
File
file
=
(
File
)
files
.
nextElement
(
)
;
command
.
addArgument
(
file
.
toString
(
)
)
;
}
}
protected
long
getOutputFileTimestamp
(
)
{
long
outputTimestamp
;
if
(
getDestFile
(
)
!=
null
&&
getDestFile
(
)
.
exists
(
)
)
{
outputTimestamp
=
getDestFile
(
)
.
lastModified
(
)
;
}
else
{
outputTimestamp
=
0
;
}
return
outputTimestamp
;
}
protected
void
addFilesAndExecute
(
NetCommand
command
,
boolean
ignoreTimestamps
)
{
long
outputTimestamp
=
getOutputFileTimestamp
(
)
;
Hashtable
filesToBuild
=
new
Hashtable
(
)
;
int
filesOutOfDate
=
buildFileList
(
command
,
filesToBuild
,
outputTimestamp
)
;
if
(
filesOutOfDate
>
0
)
{
addFilesToCommand
(
filesToBuild
,
command
)
;
command
.
runCommand
(
)
;
}
else
{
log
(
"output file is up to date"
,
Project
.
MSG_VERBOSE
)
;
}
}
}
