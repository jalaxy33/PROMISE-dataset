package
org
.
apache
.
tools
.
ant
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Locale
;
import
java
.
util
.
Map
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
PreSetDef
;
public
final
class
IntrospectionHelper
{
private
static
final
Map
EMPTY_MAP
=
Collections
.
unmodifiableMap
(
new
HashMap
(
0
)
)
;
private
static
final
Map
HELPERS
=
new
Hashtable
(
)
;
private
static
final
Map
PRIMITIVE_TYPE_MAP
=
new
HashMap
(
8
)
;
static
{
Class
[
]
primitives
=
{
Boolean
.
TYPE
,
Byte
.
TYPE
,
Character
.
TYPE
,
Short
.
TYPE
,
Integer
.
TYPE
,
Long
.
TYPE
,
Float
.
TYPE
,
Double
.
TYPE
}
;
Class
[
]
wrappers
=
{
Boolean
.
class
,
Byte
.
class
,
Character
.
class
,
Short
.
class
,
Integer
.
class
,
Long
.
class
,
Float
.
class
,
Double
.
class
}
;
for
(
int
i
=
0
;
i
<
primitives
.
length
;
i
++
)
{
PRIMITIVE_TYPE_MAP
.
put
(
primitives
[
i
]
,
wrappers
[
i
]
)
;
}
}
private
static
final
int
MAX_REPORT_NESTED_TEXT
=
20
;
private
static
final
String
ELLIPSIS
=
"..."
;
private
Hashtable
attributeTypes
=
new
Hashtable
(
)
;
private
Hashtable
attributeSetters
=
new
Hashtable
(
)
;
private
Hashtable
nestedTypes
=
new
Hashtable
(
)
;
private
Hashtable
nestedCreators
=
new
Hashtable
(
)
;
private
List
addTypeMethods
=
new
ArrayList
(
)
;
private
Method
addText
=
null
;
private
Class
bean
;
private
IntrospectionHelper
(
final
Class
bean
)
{
this
.
bean
=
bean
;
Method
[
]
methods
=
bean
.
getMethods
(
)
;
for
(
int
i
=
0
;
i
<
methods
.
length
;
i
++
)
{
final
Method
m
=
methods
[
i
]
;
final
String
name
=
m
.
getName
(
)
;
Class
returnType
=
m
.
getReturnType
(
)
;
Class
[
]
args
=
m
.
getParameterTypes
(
)
;
if
(
args
.
length
==
1
&&
java
.
lang
.
Void
.
TYPE
.
equals
(
returnType
)
&&
(
"add"
.
equals
(
name
)
||
"addConfigured"
.
equals
(
name
)
)
)
{
insertAddTypeMethod
(
m
)
;
continue
;
}
if
(
org
.
apache
.
tools
.
ant
.
ProjectComponent
.
class
.
isAssignableFrom
(
bean
)
&&
args
.
length
==
1
&&
isHiddenSetMethod
(
name
,
args
[
0
]
)
)
{
continue
;
}
if
(
isContainer
(
)
&&
args
.
length
==
1
&&
"addTask"
.
equals
(
name
)
&&
org
.
apache
.
tools
.
ant
.
Task
.
class
.
equals
(
args
[
0
]
)
)
{
continue
;
}
if
(
"addText"
.
equals
(
name
)
&&
java
.
lang
.
Void
.
TYPE
.
equals
(
returnType
)
&&
args
.
length
==
1
&&
java
.
lang
.
String
.
class
.
equals
(
args
[
0
]
)
)
{
addText
=
methods
[
i
]
;
}
else
if
(
name
.
startsWith
(
"set"
)
&&
java
.
lang
.
Void
.
TYPE
.
equals
(
returnType
)
&&
args
.
length
==
1
&&
!
args
[
0
]
.
isArray
(
)
)
{
String
propName
=
getPropertyName
(
name
,
"set"
)
;
if
(
attributeSetters
.
get
(
propName
)
!=
null
)
{
if
(
java
.
lang
.
String
.
class
.
equals
(
args
[
0
]
)
)
{
continue
;
}
}
AttributeSetter
as
=
createAttributeSetter
(
m
,
args
[
0
]
,
propName
)
;
if
(
as
!=
null
)
{
attributeTypes
.
put
(
propName
,
args
[
0
]
)
;
attributeSetters
.
put
(
propName
,
as
)
;
}
}
else
if
(
name
.
startsWith
(
"create"
)
&&
!
returnType
.
isArray
(
)
&&
!
returnType
.
isPrimitive
(
)
&&
args
.
length
==
0
)
{
String
propName
=
getPropertyName
(
name
,
"create"
)
;
if
(
nestedCreators
.
get
(
propName
)
==
null
)
{
nestedTypes
.
put
(
propName
,
returnType
)
;
nestedCreators
.
put
(
propName
,
new
CreateNestedCreator
(
m
)
)
;
}
}
else
if
(
name
.
startsWith
(
"addConfigured"
)
&&
java
.
lang
.
Void
.
TYPE
.
equals
(
returnType
)
&&
args
.
length
==
1
&&
!
java
.
lang
.
String
.
class
.
equals
(
args
[
0
]
)
&&
!
args
[
0
]
.
isArray
(
)
&&
!
args
[
0
]
.
isPrimitive
(
)
)
{
try
{
Constructor
constructor
=
null
;
try
{
constructor
=
args
[
0
]
.
getConstructor
(
new
Class
[
]
{
}
)
;
}
catch
(
NoSuchMethodException
ex
)
{
constructor
=
args
[
0
]
.
getConstructor
(
new
Class
[
]
{
Project
.
class
}
)
;
}
String
propName
=
getPropertyName
(
name
,
"addConfigured"
)
;
nestedTypes
.
put
(
propName
,
args
[
0
]
)
;
nestedCreators
.
put
(
propName
,
new
AddNestedCreator
(
m
,
constructor
,
AddNestedCreator
.
ADD_CONFIGURED
)
)
;
}
catch
(
NoSuchMethodException
nse
)
{
}
}
else
if
(
name
.
startsWith
(
"add"
)
&&
java
.
lang
.
Void
.
TYPE
.
equals
(
returnType
)
&&
args
.
length
==
1
&&
!
java
.
lang
.
String
.
class
.
equals
(
args
[
0
]
)
&&
!
args
[
0
]
.
isArray
(
)
&&
!
args
[
0
]
.
isPrimitive
(
)
)
{
try
{
Constructor
constructor
=
null
;
try
{
constructor
=
args
[
0
]
.
getConstructor
(
new
Class
[
]
{
}
)
;
}
catch
(
NoSuchMethodException
ex
)
{
constructor
=
args
[
0
]
.
getConstructor
(
new
Class
[
]
{
Project
.
class
}
)
;
}
String
propName
=
getPropertyName
(
name
,
"add"
)
;
if
(
nestedTypes
.
get
(
propName
)
!=
null
)
{
continue
;
}
nestedTypes
.
put
(
propName
,
args
[
0
]
)
;
nestedCreators
.
put
(
propName
,
new
AddNestedCreator
(
m
,
constructor
,
AddNestedCreator
.
ADD
)
)
;
}
catch
(
NoSuchMethodException
nse
)
{
}
}
}
}
private
boolean
isHiddenSetMethod
(
String
name
,
Class
type
)
{
if
(
"setLocation"
.
equals
(
name
)
&&
org
.
apache
.
tools
.
ant
.
Location
.
class
.
equals
(
type
)
)
{
return
true
;
}
if
(
"setTaskType"
.
equals
(
name
)
&&
java
.
lang
.
String
.
class
.
equals
(
type
)
)
{
return
true
;
}
return
false
;
}
public
static
synchronized
IntrospectionHelper
getHelper
(
Class
c
)
{
return
getHelper
(
null
,
c
)
;
}
public
static
IntrospectionHelper
getHelper
(
Project
p
,
Class
c
)
{
IntrospectionHelper
ih
=
(
IntrospectionHelper
)
HELPERS
.
get
(
c
.
getName
(
)
)
;
if
(
ih
==
null
||
ih
.
bean
!=
c
)
{
ih
=
new
IntrospectionHelper
(
c
)
;
if
(
p
!=
null
)
{
HELPERS
.
put
(
c
.
getName
(
)
,
ih
)
;
}
}
return
ih
;
}
public
void
setAttribute
(
Project
p
,
Object
element
,
String
attributeName
,
String
value
)
throws
BuildException
{
AttributeSetter
as
=
(
AttributeSetter
)
attributeSetters
.
get
(
attributeName
.
toLowerCase
(
Locale
.
US
)
)
;
if
(
as
==
null
)
{
if
(
element
instanceof
DynamicAttributeNS
)
{
DynamicAttributeNS
dc
=
(
DynamicAttributeNS
)
element
;
String
uriPlusPrefix
=
ProjectHelper
.
extractUriFromComponentName
(
attributeName
)
;
String
uri
=
ProjectHelper
.
extractUriFromComponentName
(
uriPlusPrefix
)
;
String
localName
=
ProjectHelper
.
extractNameFromComponentName
(
attributeName
)
;
String
qName
=
(
""
.
equals
(
uri
)
?
localName
:
(
uri
+
":"
+
localName
)
)
;
dc
.
setDynamicAttribute
(
uri
,
localName
,
qName
,
value
)
;
return
;
}
else
if
(
element
instanceof
DynamicAttribute
)
{
DynamicAttribute
dc
=
(
DynamicAttribute
)
element
;
dc
.
setDynamicAttribute
(
attributeName
.
toLowerCase
(
Locale
.
US
)
,
value
)
;
return
;
}
else
{
if
(
attributeName
.
indexOf
(
':'
)
!=
-
1
)
{
return
;
}
String
msg
=
getElementName
(
p
,
element
)
+
" doesn't support the \""
+
attributeName
+
"\" attribute."
;
throw
new
UnsupportedAttributeException
(
msg
,
attributeName
)
;
}
}
try
{
as
.
set
(
p
,
element
,
value
)
;
}
catch
(
IllegalAccessException
ie
)
{
throw
new
BuildException
(
ie
)
;
}
catch
(
InvocationTargetException
ite
)
{
Throwable
t
=
ite
.
getTargetException
(
)
;
if
(
t
instanceof
BuildException
)
{
throw
(
BuildException
)
t
;
}
throw
new
BuildException
(
t
)
;
}
}
public
void
addText
(
Project
project
,
Object
element
,
String
text
)
throws
BuildException
{
if
(
addText
==
null
)
{
text
=
text
.
trim
(
)
;
if
(
text
.
length
(
)
==
0
)
{
return
;
}
else
{
String
msg
=
project
.
getElementName
(
element
)
+
" doesn't support nested text data (\""
+
condenseText
(
text
)
+
"\")."
;
throw
new
BuildException
(
msg
)
;
}
}
try
{
addText
.
invoke
(
element
,
new
Object
[
]
{
text
}
)
;
}
catch
(
IllegalAccessException
ie
)
{
throw
new
BuildException
(
ie
)
;
}
catch
(
InvocationTargetException
ite
)
{
Throwable
t
=
ite
.
getTargetException
(
)
;
if
(
t
instanceof
BuildException
)
{
throw
(
BuildException
)
t
;
}
throw
new
BuildException
(
t
)
;
}
}
public
void
throwNotSupported
(
Project
project
,
Object
parent
,
String
elementName
)
{
String
msg
=
project
.
getElementName
(
parent
)
+
" doesn't support the nested \""
+
elementName
+
"\" element."
;
throw
new
UnsupportedElementException
(
msg
,
elementName
)
;
}
private
NestedCreator
getNestedCreator
(
Project
project
,
String
parentUri
,
Object
parent
,
String
elementName
,
UnknownElement
child
)
throws
BuildException
{
String
uri
=
ProjectHelper
.
extractUriFromComponentName
(
elementName
)
;
String
name
=
ProjectHelper
.
extractNameFromComponentName
(
elementName
)
;
if
(
uri
.
equals
(
ProjectHelper
.
ANT_CORE_URI
)
)
{
uri
=
""
;
}
if
(
parentUri
.
equals
(
ProjectHelper
.
ANT_CORE_URI
)
)
{
parentUri
=
""
;
}
NestedCreator
nc
=
null
;
if
(
uri
.
equals
(
parentUri
)
||
uri
.
equals
(
""
)
)
{
nc
=
(
NestedCreator
)
nestedCreators
.
get
(
name
.
toLowerCase
(
Locale
.
US
)
)
;
}
if
(
nc
==
null
)
{
nc
=
createAddTypeCreator
(
project
,
parent
,
elementName
)
;
}
if
(
nc
==
null
&&
parent
instanceof
DynamicElementNS
)
{
DynamicElementNS
dc
=
(
DynamicElementNS
)
parent
;
String
qName
=
(
child
==
null
?
name
:
child
.
getQName
(
)
)
;
final
Object
nestedElement
=
dc
.
createDynamicElement
(
(
child
==
null
?
""
:
child
.
getNamespace
(
)
)
,
name
,
qName
)
;
if
(
nestedElement
!=
null
)
{
nc
=
new
NestedCreator
(
null
)
{
Object
create
(
Project
project
,
Object
parent
,
Object
ignore
)
{
return
nestedElement
;
}
}
;
}
}
if
(
nc
==
null
&&
parent
instanceof
DynamicElement
)
{
DynamicElement
dc
=
(
DynamicElement
)
parent
;
final
Object
nestedElement
=
dc
.
createDynamicElement
(
name
.
toLowerCase
(
Locale
.
US
)
)
;
if
(
nestedElement
!=
null
)
{
nc
=
new
NestedCreator
(
null
)
{
Object
create
(
Project
project
,
Object
parent
,
Object
ignore
)
{
return
nestedElement
;
}
}
;
}
}
if
(
nc
==
null
)
{
throwNotSupported
(
project
,
parent
,
elementName
)
;
}
return
nc
;
}
public
Object
createElement
(
Project
project
,
Object
parent
,
String
elementName
)
throws
BuildException
{
NestedCreator
nc
=
getNestedCreator
(
project
,
""
,
parent
,
elementName
,
null
)
;
try
{
Object
nestedElement
=
nc
.
create
(
project
,
parent
,
null
)
;
if
(
project
!=
null
)
{
project
.
setProjectReference
(
nestedElement
)
;
}
return
nestedElement
;
}
catch
(
IllegalAccessException
ie
)
{
throw
new
BuildException
(
ie
)
;
}
catch
(
InstantiationException
ine
)
{
throw
new
BuildException
(
ine
)
;
}
catch
(
InvocationTargetException
ite
)
{
Throwable
t
=
ite
.
getTargetException
(
)
;
if
(
t
instanceof
BuildException
)
{
throw
(
BuildException
)
t
;
}
throw
new
BuildException
(
t
)
;
}
}
public
Creator
getElementCreator
(
Project
project
,
String
parentUri
,
Object
parent
,
String
elementName
,
UnknownElement
ue
)
{
NestedCreator
nc
=
getNestedCreator
(
project
,
parentUri
,
parent
,
elementName
,
ue
)
;
return
new
Creator
(
project
,
parent
,
nc
)
;
}
public
boolean
isDynamic
(
)
{
return
DynamicElement
.
class
.
isAssignableFrom
(
bean
)
||
DynamicElementNS
.
class
.
isAssignableFrom
(
bean
)
;
}
public
boolean
isContainer
(
)
{
return
TaskContainer
.
class
.
isAssignableFrom
(
bean
)
;
}
public
boolean
supportsNestedElement
(
String
elementName
)
{
return
nestedCreators
.
containsKey
(
elementName
.
toLowerCase
(
Locale
.
US
)
)
||
isDynamic
(
)
||
addTypeMethods
.
size
(
)
!=
0
;
}
public
boolean
supportsNestedElement
(
String
parentUri
,
String
elementName
)
{
if
(
parentUri
.
equals
(
ProjectHelper
.
ANT_CORE_URI
)
)
{
parentUri
=
""
;
}
String
uri
=
ProjectHelper
.
extractUriFromComponentName
(
elementName
)
;
if
(
uri
.
equals
(
ProjectHelper
.
ANT_CORE_URI
)
)
{
uri
=
""
;
}
String
name
=
ProjectHelper
.
extractNameFromComponentName
(
elementName
)
;
return
(
nestedCreators
.
containsKey
(
name
.
toLowerCase
(
Locale
.
US
)
)
&&
(
uri
.
equals
(
parentUri
)
||
""
.
equals
(
uri
)
)
)
||
isDynamic
(
)
||
addTypeMethods
.
size
(
)
!=
0
;
}
public
void
storeElement
(
Project
project
,
Object
parent
,
Object
child
,
String
elementName
)
throws
BuildException
{
if
(
elementName
==
null
)
{
return
;
}
NestedCreator
ns
=
(
NestedCreator
)
nestedCreators
.
get
(
elementName
.
toLowerCase
(
Locale
.
US
)
)
;
if
(
ns
==
null
)
{
return
;
}
try
{
ns
.
store
(
parent
,
child
)
;
}
catch
(
IllegalAccessException
ie
)
{
throw
new
BuildException
(
ie
)
;
}
catch
(
InstantiationException
ine
)
{
throw
new
BuildException
(
ine
)
;
}
catch
(
InvocationTargetException
ite
)
{
Throwable
t
=
ite
.
getTargetException
(
)
;
if
(
t
instanceof
BuildException
)
{
throw
(
BuildException
)
t
;
}
throw
new
BuildException
(
t
)
;
}
}
public
Class
getElementType
(
String
elementName
)
throws
BuildException
{
Class
nt
=
(
Class
)
nestedTypes
.
get
(
elementName
)
;
if
(
nt
==
null
)
{
throw
new
UnsupportedElementException
(
"Class "
+
bean
.
getName
(
)
+
" doesn't support the nested \""
+
elementName
+
"\" element."
,
elementName
)
;
}
return
nt
;
}
public
Class
getAttributeType
(
String
attributeName
)
throws
BuildException
{
Class
at
=
(
Class
)
attributeTypes
.
get
(
attributeName
)
;
if
(
at
==
null
)
{
throw
new
UnsupportedAttributeException
(
"Class "
+
bean
.
getName
(
)
+
" doesn't support the \""
+
attributeName
+
"\" attribute."
,
attributeName
)
;
}
return
at
;
}
public
Method
getAddTextMethod
(
)
throws
BuildException
{
if
(
!
supportsCharacters
(
)
)
{
throw
new
BuildException
(
"Class "
+
bean
.
getName
(
)
+
" doesn't support nested text data."
)
;
}
return
addText
;
}
public
Method
getElementMethod
(
String
elementName
)
throws
BuildException
{
Object
creator
=
nestedCreators
.
get
(
elementName
)
;
if
(
creator
==
null
)
{
throw
new
UnsupportedElementException
(
"Class "
+
bean
.
getName
(
)
+
" doesn't support the nested \""
+
elementName
+
"\" element."
,
elementName
)
;
}
return
(
(
NestedCreator
)
creator
)
.
method
;
}
public
Method
getAttributeMethod
(
String
attributeName
)
throws
BuildException
{
Object
setter
=
attributeSetters
.
get
(
attributeName
)
;
if
(
setter
==
null
)
{
throw
new
UnsupportedAttributeException
(
"Class "
+
bean
.
getName
(
)
+
" doesn't support the \""
+
attributeName
+
"\" attribute."
,
attributeName
)
;
}
return
(
(
AttributeSetter
)
setter
)
.
method
;
}
public
boolean
supportsCharacters
(
)
{
return
addText
!=
null
;
}
public
Enumeration
getAttributes
(
)
{
return
attributeSetters
.
keys
(
)
;
}
public
Map
getAttributeMap
(
)
{
return
(
attributeTypes
.
size
(
)
<
1
)
?
EMPTY_MAP
:
Collections
.
unmodifiableMap
(
attributeTypes
)
;
}
public
Enumeration
getNestedElements
(
)
{
return
nestedTypes
.
keys
(
)
;
}
public
Map
getNestedElementMap
(
)
{
return
(
nestedTypes
.
size
(
)
<
1
)
?
EMPTY_MAP
:
Collections
.
unmodifiableMap
(
nestedTypes
)
;
}
public
List
getExtensionPoints
(
)
{
return
(
addTypeMethods
.
size
(
)
<
1
)
?
Collections
.
EMPTY_LIST
:
Collections
.
unmodifiableList
(
addTypeMethods
)
;
}
private
AttributeSetter
createAttributeSetter
(
final
Method
m
,
Class
arg
,
final
String
attrName
)
{
final
Class
reflectedArg
=
PRIMITIVE_TYPE_MAP
.
containsKey
(
arg
)
?
(
Class
)
PRIMITIVE_TYPE_MAP
.
get
(
arg
)
:
arg
;
if
(
java
.
lang
.
String
.
class
.
equals
(
reflectedArg
)
)
{
return
new
AttributeSetter
(
m
)
{
public
void
set
(
Project
p
,
Object
parent
,
String
value
)
throws
InvocationTargetException
,
IllegalAccessException
{
m
.
invoke
(
parent
,
(
Object
[
]
)
(
new
String
[
]
{
value
}
)
)
;
}
}
;
}
else
if
(
java
.
lang
.
Character
.
class
.
equals
(
reflectedArg
)
)
{
return
new
AttributeSetter
(
m
)
{
public
void
set
(
Project
p
,
Object
parent
,
String
value
)
throws
InvocationTargetException
,
IllegalAccessException
{
if
(
value
.
length
(
)
==
0
)
{
throw
new
BuildException
(
"The value \"\" is not a "
+
"legal value for attribute \""
+
attrName
+
"\""
)
;
}
m
.
invoke
(
parent
,
(
Object
[
]
)
(
new
Character
[
]
{
new
Character
(
value
.
charAt
(
0
)
)
}
)
)
;
}
}
;
}
else
if
(
java
.
lang
.
Boolean
.
class
.
equals
(
reflectedArg
)
)
{
return
new
AttributeSetter
(
m
)
{
public
void
set
(
Project
p
,
Object
parent
,
String
value
)
throws
InvocationTargetException
,
IllegalAccessException
{
m
.
invoke
(
parent
,
(
Object
[
]
)
(
new
Boolean
[
]
{
Project
.
toBoolean
(
value
)
?
Boolean
.
TRUE
:
Boolean
.
FALSE
}
)
)
;
}
}
;
}
else
if
(
java
.
lang
.
Class
.
class
.
equals
(
reflectedArg
)
)
{
return
new
AttributeSetter
(
m
)
{
public
void
set
(
Project
p
,
Object
parent
,
String
value
)
throws
InvocationTargetException
,
IllegalAccessException
,
BuildException
{
try
{
m
.
invoke
(
parent
,
new
Object
[
]
{
Class
.
forName
(
value
)
}
)
;
}
catch
(
ClassNotFoundException
ce
)
{
throw
new
BuildException
(
ce
)
;
}
}
}
;
}
else
if
(
java
.
io
.
File
.
class
.
equals
(
reflectedArg
)
)
{
return
new
AttributeSetter
(
m
)
{
public
void
set
(
Project
p
,
Object
parent
,
String
value
)
throws
InvocationTargetException
,
IllegalAccessException
{
m
.
invoke
(
parent
,
new
Object
[
]
{
p
.
resolveFile
(
value
)
}
)
;
}
}
;
}
else
if
(
EnumeratedAttribute
.
class
.
isAssignableFrom
(
reflectedArg
)
)
{
return
new
AttributeSetter
(
m
)
{
public
void
set
(
Project
p
,
Object
parent
,
String
value
)
throws
InvocationTargetException
,
IllegalAccessException
,
BuildException
{
try
{
EnumeratedAttribute
ea
=
(
EnumeratedAttribute
)
reflectedArg
.
newInstance
(
)
;
ea
.
setValue
(
value
)
;
m
.
invoke
(
parent
,
new
Object
[
]
{
ea
}
)
;
}
catch
(
InstantiationException
ie
)
{
throw
new
BuildException
(
ie
)
;
}
}
}
;
}
else
if
(
reflectedArg
.
getSuperclass
(
)
!=
null
&&
reflectedArg
.
getSuperclass
(
)
.
getName
(
)
.
equals
(
"java.lang.Enum"
)
)
{
return
new
AttributeSetter
(
m
)
{
public
void
set
(
Project
p
,
Object
parent
,
String
value
)
throws
InvocationTargetException
,
IllegalAccessException
,
BuildException
{
try
{
m
.
invoke
(
parent
,
new
Object
[
]
{
reflectedArg
.
getMethod
(
"valueOf"
,
new
Class
[
]
{
String
.
class
}
)
.
invoke
(
null
,
new
Object
[
]
{
value
}
)
}
)
;
}
catch
(
InvocationTargetException
x
)
{
if
(
x
.
getTargetException
(
)
instanceof
IllegalArgumentException
)
{
throw
new
BuildException
(
"'"
+
value
+
"' is not a permitted value for "
+
reflectedArg
.
getName
(
)
)
;
}
else
{
throw
new
BuildException
(
x
.
getTargetException
(
)
)
;
}
}
catch
(
Exception
x
)
{
throw
new
BuildException
(
x
)
;
}
}
}
;
}
else
{
boolean
includeProject
;
Constructor
c
;
try
{
c
=
reflectedArg
.
getConstructor
(
new
Class
[
]
{
Project
.
class
,
String
.
class
}
)
;
includeProject
=
true
;
}
catch
(
NoSuchMethodException
nme
)
{
try
{
c
=
reflectedArg
.
getConstructor
(
new
Class
[
]
{
String
.
class
}
)
;
includeProject
=
false
;
}
catch
(
NoSuchMethodException
nme2
)
{
return
null
;
}
}
final
boolean
finalIncludeProject
=
includeProject
;
final
Constructor
finalConstructor
=
c
;
return
new
AttributeSetter
(
m
)
{
public
void
set
(
Project
p
,
Object
parent
,
String
value
)
throws
InvocationTargetException
,
IllegalAccessException
,
BuildException
{
try
{
Object
[
]
args
=
(
finalIncludeProject
)
?
new
Object
[
]
{
p
,
value
}
:
new
Object
[
]
{
value
}
;
Object
attribute
=
finalConstructor
.
newInstance
(
args
)
;
if
(
p
!=
null
)
{
p
.
setProjectReference
(
attribute
)
;
}
m
.
invoke
(
parent
,
new
Object
[
]
{
attribute
}
)
;
}
catch
(
InstantiationException
ie
)
{
throw
new
BuildException
(
ie
)
;
}
}
}
;
}
}
protected
String
getElementName
(
Project
project
,
Object
element
)
{
return
project
.
getElementName
(
element
)
;
}
private
String
getPropertyName
(
String
methodName
,
String
prefix
)
{
return
methodName
.
substring
(
prefix
.
length
(
)
)
.
toLowerCase
(
Locale
.
US
)
;
}
public
static
final
class
Creator
{
private
NestedCreator
nestedCreator
;
private
Object
parent
;
private
Project
project
;
private
Object
nestedObject
;
private
String
polyType
;
private
Creator
(
Project
project
,
Object
parent
,
NestedCreator
nestedCreator
)
{
this
.
project
=
project
;
this
.
parent
=
parent
;
this
.
nestedCreator
=
nestedCreator
;
}
public
void
setPolyType
(
String
polyType
)
{
this
.
polyType
=
polyType
;
}
public
Object
create
(
)
{
if
(
polyType
!=
null
)
{
if
(
!
nestedCreator
.
isPolyMorphic
(
)
)
{
throw
new
BuildException
(
"Not allowed to use the polymorphic form"
+
" for this element"
)
;
}
ComponentHelper
helper
=
ComponentHelper
.
getComponentHelper
(
project
)
;
nestedObject
=
helper
.
createComponent
(
polyType
)
;
if
(
nestedObject
==
null
)
{
throw
new
BuildException
(
"Unable to create object of type "
+
polyType
)
;
}
}
try
{
nestedObject
=
nestedCreator
.
create
(
project
,
parent
,
nestedObject
)
;
if
(
project
!=
null
)
{
project
.
setProjectReference
(
nestedObject
)
;
}
return
nestedObject
;
}
catch
(
IllegalAccessException
ex
)
{
throw
new
BuildException
(
ex
)
;
}
catch
(
InstantiationException
ex
)
{
throw
new
BuildException
(
ex
)
;
}
catch
(
IllegalArgumentException
ex
)
{
if
(
polyType
!=
null
)
{
throw
new
BuildException
(
"Invalid type used "
+
polyType
)
;
}
throw
ex
;
}
catch
(
InvocationTargetException
ex
)
{
Throwable
t
=
ex
.
getTargetException
(
)
;
if
(
t
instanceof
BuildException
)
{
throw
(
BuildException
)
t
;
}
throw
new
BuildException
(
t
)
;
}
}
public
Object
getRealObject
(
)
{
return
nestedCreator
.
getRealObject
(
)
;
}
public
void
store
(
)
{
try
{
nestedCreator
.
store
(
parent
,
nestedObject
)
;
}
catch
(
IllegalAccessException
ex
)
{
throw
new
BuildException
(
ex
)
;
}
catch
(
InstantiationException
ex
)
{
throw
new
BuildException
(
ex
)
;
}
catch
(
IllegalArgumentException
ex
)
{
if
(
polyType
!=
null
)
{
throw
new
BuildException
(
"Invalid type used "
+
polyType
)
;
}
throw
ex
;
}
catch
(
InvocationTargetException
ex
)
{
Throwable
t
=
ex
.
getTargetException
(
)
;
if
(
t
instanceof
BuildException
)
{
throw
(
BuildException
)
t
;
}
throw
new
BuildException
(
t
)
;
}
}
}
private
abstract
static
class
NestedCreator
{
private
Method
method
;
NestedCreator
(
Method
m
)
{
this
.
method
=
m
;
}
Method
getMethod
(
)
{
return
method
;
}
boolean
isPolyMorphic
(
)
{
return
false
;
}
Object
getRealObject
(
)
{
return
null
;
}
abstract
Object
create
(
Project
project
,
Object
parent
,
Object
child
)
throws
InvocationTargetException
,
IllegalAccessException
,
InstantiationException
;
void
store
(
Object
parent
,
Object
child
)
throws
InvocationTargetException
,
IllegalAccessException
,
InstantiationException
{
}
}
private
class
CreateNestedCreator
extends
NestedCreator
{
CreateNestedCreator
(
Method
m
)
{
super
(
m
)
;
}
Object
create
(
Project
project
,
Object
parent
,
Object
ignore
)
throws
InvocationTargetException
,
IllegalAccessException
{
return
getMethod
(
)
.
invoke
(
parent
,
new
Object
[
]
{
}
)
;
}
}
private
class
AddNestedCreator
extends
NestedCreator
{
static
final
int
ADD
=
1
;
static
final
int
ADD_CONFIGURED
=
2
;
private
Constructor
constructor
;
private
int
behavior
;
AddNestedCreator
(
Method
m
,
Constructor
c
,
int
behavior
)
{
super
(
m
)
;
this
.
constructor
=
c
;
this
.
behavior
=
behavior
;
}
boolean
isPolyMorphic
(
)
{
return
true
;
}
Object
create
(
Project
project
,
Object
parent
,
Object
child
)
throws
InvocationTargetException
,
IllegalAccessException
,
InstantiationException
{
if
(
child
==
null
)
{
child
=
constructor
.
newInstance
(
(
constructor
.
getParameterTypes
(
)
.
length
==
0
)
?
new
Object
[
]
{
}
:
new
Object
[
]
{
project
}
)
;
}
if
(
child
instanceof
PreSetDef
.
PreSetDefinition
)
{
child
=
(
(
PreSetDef
.
PreSetDefinition
)
child
)
.
createObject
(
project
)
;
}
if
(
behavior
==
ADD
)
{
istore
(
parent
,
child
)
;
}
return
child
;
}
void
store
(
Object
parent
,
Object
child
)
throws
InvocationTargetException
,
IllegalAccessException
,
InstantiationException
{
if
(
behavior
==
ADD_CONFIGURED
)
{
istore
(
parent
,
child
)
;
}
}
private
void
istore
(
Object
parent
,
Object
child
)
throws
InvocationTargetException
,
IllegalAccessException
,
InstantiationException
{
getMethod
(
)
.
invoke
(
parent
,
new
Object
[
]
{
child
}
)
;
}
}
private
abstract
static
class
AttributeSetter
{
private
Method
method
;
AttributeSetter
(
Method
m
)
{
this
.
method
=
m
;
}
abstract
void
set
(
Project
p
,
Object
parent
,
String
value
)
throws
InvocationTargetException
,
IllegalAccessException
,
BuildException
;
}
public
static
void
clearCache
(
)
{
HELPERS
.
clear
(
)
;
}
private
NestedCreator
createAddTypeCreator
(
Project
project
,
Object
parent
,
String
elementName
)
throws
BuildException
{
if
(
addTypeMethods
.
size
(
)
==
0
)
{
return
null
;
}
ComponentHelper
helper
=
ComponentHelper
.
getComponentHelper
(
project
)
;
Object
addedObject
=
null
;
Method
addMethod
=
null
;
Class
clazz
=
helper
.
getComponentClass
(
elementName
)
;
if
(
clazz
==
null
)
{
return
null
;
}
addMethod
=
findMatchingMethod
(
clazz
,
addTypeMethods
)
;
if
(
addMethod
==
null
)
{
return
null
;
}
addedObject
=
helper
.
createComponent
(
elementName
)
;
if
(
addedObject
==
null
)
{
return
null
;
}
Object
rObject
=
addedObject
;
if
(
addedObject
instanceof
PreSetDef
.
PreSetDefinition
)
{
rObject
=
(
(
PreSetDef
.
PreSetDefinition
)
addedObject
)
.
createObject
(
project
)
;
}
final
Object
nestedObject
=
addedObject
;
final
Object
realObject
=
rObject
;
return
new
NestedCreator
(
addMethod
)
{
Object
create
(
Project
project
,
Object
parent
,
Object
ignore
)
throws
InvocationTargetException
,
IllegalAccessException
{
if
(
!
getMethod
(
)
.
getName
(
)
.
endsWith
(
"Configured"
)
)
{
getMethod
(
)
.
invoke
(
parent
,
new
Object
[
]
{
realObject
}
)
;
}
return
nestedObject
;
}
Object
getRealObject
(
)
{
return
realObject
;
}
void
store
(
Object
parent
,
Object
child
)
throws
InvocationTargetException
,
IllegalAccessException
,
InstantiationException
{
if
(
getMethod
(
)
.
getName
(
)
.
endsWith
(
"Configured"
)
)
{
getMethod
(
)
.
invoke
(
parent
,
new
Object
[
]
{
realObject
}
)
;
}
}
}
;
}
private
void
insertAddTypeMethod
(
Method
method
)
{
Class
argClass
=
method
.
getParameterTypes
(
)
[
0
]
;
for
(
int
c
=
0
;
c
<
addTypeMethods
.
size
(
)
;
++
c
)
{
Method
current
=
(
Method
)
addTypeMethods
.
get
(
c
)
;
if
(
current
.
getParameterTypes
(
)
[
0
]
.
equals
(
argClass
)
)
{
if
(
method
.
getName
(
)
.
equals
(
"addConfigured"
)
)
{
addTypeMethods
.
set
(
c
,
method
)
;
}
return
;
}
if
(
current
.
getParameterTypes
(
)
[
0
]
.
isAssignableFrom
(
argClass
)
)
{
addTypeMethods
.
add
(
c
,
method
)
;
return
;
}
}
addTypeMethods
.
add
(
method
)
;
}
private
Method
findMatchingMethod
(
Class
paramClass
,
List
methods
)
{
Class
matchedClass
=
null
;
Method
matchedMethod
=
null
;
for
(
int
i
=
0
;
i
<
methods
.
size
(
)
;
++
i
)
{
Method
method
=
(
Method
)
methods
.
get
(
i
)
;
Class
methodClass
=
method
.
getParameterTypes
(
)
[
0
]
;
if
(
methodClass
.
isAssignableFrom
(
paramClass
)
)
{
if
(
matchedClass
==
null
)
{
matchedClass
=
methodClass
;
matchedMethod
=
method
;
}
else
{
if
(
!
methodClass
.
isAssignableFrom
(
matchedClass
)
)
{
throw
new
BuildException
(
"ambiguous: types "
+
matchedClass
.
getName
(
)
+
" and "
+
methodClass
.
getName
(
)
+
" match "
+
paramClass
.
getName
(
)
)
;
}
}
}
}
return
matchedMethod
;
}
private
String
condenseText
(
final
String
text
)
{
if
(
text
.
length
(
)
<=
MAX_REPORT_NESTED_TEXT
)
{
return
text
;
}
int
ends
=
(
MAX_REPORT_NESTED_TEXT
-
ELLIPSIS
.
length
(
)
)
/
2
;
return
new
StringBuffer
(
text
)
.
replace
(
ends
,
text
.
length
(
)
-
ends
,
ELLIPSIS
)
.
toString
(
)
;
}
}
