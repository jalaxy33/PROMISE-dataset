package
org
.
apache
.
tools
.
ant
.
taskdefs
.
optional
.
junit
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
Writer
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Properties
;
import
java
.
util
.
Date
;
import
java
.
net
.
InetAddress
;
import
java
.
net
.
UnknownHostException
;
import
javax
.
xml
.
parsers
.
DocumentBuilder
;
import
javax
.
xml
.
parsers
.
DocumentBuilderFactory
;
import
junit
.
framework
.
AssertionFailedError
;
import
junit
.
framework
.
Test
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
util
.
DOMElementWriter
;
import
org
.
apache
.
tools
.
ant
.
util
.
DateUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
w3c
.
dom
.
Document
;
import
org
.
w3c
.
dom
.
Element
;
import
org
.
w3c
.
dom
.
Text
;
public
class
XMLJUnitResultFormatter
implements
JUnitResultFormatter
,
XMLConstants
{
private
static
final
String
UNKNOWN
=
"unknown"
;
private
static
DocumentBuilder
getDocumentBuilder
(
)
{
try
{
return
DocumentBuilderFactory
.
newInstance
(
)
.
newDocumentBuilder
(
)
;
}
catch
(
Exception
exc
)
{
throw
new
ExceptionInInitializerError
(
exc
)
;
}
}
private
Document
doc
;
private
Element
rootElement
;
private
Hashtable
testElements
=
new
Hashtable
(
)
;
private
Hashtable
failedTests
=
new
Hashtable
(
)
;
private
Hashtable
testStarts
=
new
Hashtable
(
)
;
private
OutputStream
out
;
public
XMLJUnitResultFormatter
(
)
{
}
public
void
setOutput
(
OutputStream
out
)
{
this
.
out
=
out
;
}
public
void
setSystemOutput
(
String
out
)
{
formatOutput
(
SYSTEM_OUT
,
out
)
;
}
public
void
setSystemError
(
String
out
)
{
formatOutput
(
SYSTEM_ERR
,
out
)
;
}
public
void
startTestSuite
(
JUnitTest
suite
)
{
doc
=
getDocumentBuilder
(
)
.
newDocument
(
)
;
rootElement
=
doc
.
createElement
(
TESTSUITE
)
;
String
n
=
suite
.
getName
(
)
;
rootElement
.
setAttribute
(
ATTR_NAME
,
n
==
null
?
UNKNOWN
:
n
)
;
final
String
timestamp
=
DateUtils
.
format
(
new
Date
(
)
,
DateUtils
.
ISO8601_DATETIME_PATTERN
)
;
rootElement
.
setAttribute
(
TIMESTAMP
,
timestamp
)
;
rootElement
.
setAttribute
(
HOSTNAME
,
getHostname
(
)
)
;
Element
propsElement
=
doc
.
createElement
(
PROPERTIES
)
;
rootElement
.
appendChild
(
propsElement
)
;
Properties
props
=
suite
.
getProperties
(
)
;
if
(
props
!=
null
)
{
Enumeration
e
=
props
.
propertyNames
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
String
name
=
(
String
)
e
.
nextElement
(
)
;
Element
propElement
=
doc
.
createElement
(
PROPERTY
)
;
propElement
.
setAttribute
(
ATTR_NAME
,
name
)
;
propElement
.
setAttribute
(
ATTR_VALUE
,
props
.
getProperty
(
name
)
)
;
propsElement
.
appendChild
(
propElement
)
;
}
}
}
private
String
getHostname
(
)
{
try
{
return
InetAddress
.
getLocalHost
(
)
.
getHostName
(
)
;
}
catch
(
UnknownHostException
e
)
{
return
"localhost"
;
}
}
public
void
endTestSuite
(
JUnitTest
suite
)
throws
BuildException
{
rootElement
.
setAttribute
(
ATTR_TESTS
,
""
+
suite
.
runCount
(
)
)
;
rootElement
.
setAttribute
(
ATTR_FAILURES
,
""
+
suite
.
failureCount
(
)
)
;
rootElement
.
setAttribute
(
ATTR_ERRORS
,
""
+
suite
.
errorCount
(
)
)
;
rootElement
.
setAttribute
(
ATTR_TIME
,
""
+
(
suite
.
getRunTime
(
)
/
1000.0
)
)
;
if
(
out
!=
null
)
{
Writer
wri
=
null
;
try
{
wri
=
new
BufferedWriter
(
new
OutputStreamWriter
(
out
,
"UTF8"
)
)
;
wri
.
write
(
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
)
;
(
new
DOMElementWriter
(
)
)
.
write
(
rootElement
,
wri
,
0
,
"  "
)
;
wri
.
flush
(
)
;
}
catch
(
IOException
exc
)
{
throw
new
BuildException
(
"Unable to write log file"
,
exc
)
;
}
finally
{
if
(
out
!=
System
.
out
&&
out
!=
System
.
err
)
{
FileUtils
.
close
(
wri
)
;
}
}
}
}
public
void
startTest
(
Test
t
)
{
testStarts
.
put
(
t
,
new
Long
(
System
.
currentTimeMillis
(
)
)
)
;
}
public
void
endTest
(
Test
test
)
{
if
(
!
testStarts
.
containsKey
(
test
)
)
{
startTest
(
test
)
;
}
Element
currentTest
=
null
;
if
(
!
failedTests
.
containsKey
(
test
)
)
{
currentTest
=
doc
.
createElement
(
TESTCASE
)
;
String
n
=
JUnitVersionHelper
.
getTestCaseName
(
test
)
;
currentTest
.
setAttribute
(
ATTR_NAME
,
n
==
null
?
UNKNOWN
:
n
)
;
currentTest
.
setAttribute
(
ATTR_CLASSNAME
,
JUnitVersionHelper
.
getTestCaseClassName
(
test
)
)
;
rootElement
.
appendChild
(
currentTest
)
;
testElements
.
put
(
test
,
currentTest
)
;
}
else
{
currentTest
=
(
Element
)
testElements
.
get
(
test
)
;
}
Long
l
=
(
Long
)
testStarts
.
get
(
test
)
;
currentTest
.
setAttribute
(
ATTR_TIME
,
""
+
(
(
System
.
currentTimeMillis
(
)
-
l
.
longValue
(
)
)
/
1000.0
)
)
;
}
public
void
addFailure
(
Test
test
,
Throwable
t
)
{
formatError
(
FAILURE
,
test
,
t
)
;
}
public
void
addFailure
(
Test
test
,
AssertionFailedError
t
)
{
addFailure
(
test
,
(
Throwable
)
t
)
;
}
public
void
addError
(
Test
test
,
Throwable
t
)
{
formatError
(
ERROR
,
test
,
t
)
;
}
private
void
formatError
(
String
type
,
Test
test
,
Throwable
t
)
{
if
(
test
!=
null
)
{
endTest
(
test
)
;
failedTests
.
put
(
test
,
test
)
;
}
Element
nested
=
doc
.
createElement
(
type
)
;
Element
currentTest
=
null
;
if
(
test
!=
null
)
{
currentTest
=
(
Element
)
testElements
.
get
(
test
)
;
}
else
{
currentTest
=
rootElement
;
}
currentTest
.
appendChild
(
nested
)
;
String
message
=
t
.
getMessage
(
)
;
if
(
message
!=
null
&&
message
.
length
(
)
>
0
)
{
nested
.
setAttribute
(
ATTR_MESSAGE
,
t
.
getMessage
(
)
)
;
}
nested
.
setAttribute
(
ATTR_TYPE
,
t
.
getClass
(
)
.
getName
(
)
)
;
String
strace
=
JUnitTestRunner
.
getFilteredTrace
(
t
)
;
Text
trace
=
doc
.
createTextNode
(
strace
)
;
nested
.
appendChild
(
trace
)
;
}
private
void
formatOutput
(
String
type
,
String
output
)
{
Element
nested
=
doc
.
createElement
(
type
)
;
rootElement
.
appendChild
(
nested
)
;
nested
.
appendChild
(
doc
.
createCDATASection
(
output
)
)
;
}
}
