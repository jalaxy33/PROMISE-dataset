package
org
.
apache
.
tools
.
ant
.
util
.
regexp
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
util
.
JavaEnvUtils
;
public
class
RegexpFactory
extends
RegexpMatcherFactory
{
public
RegexpFactory
(
)
{
}
public
Regexp
newRegexp
(
)
throws
BuildException
{
return
(
Regexp
)
newRegexp
(
null
)
;
}
public
Regexp
newRegexp
(
Project
p
)
throws
BuildException
{
String
systemDefault
=
null
;
if
(
p
==
null
)
{
systemDefault
=
System
.
getProperty
(
"ant.regexp.regexpimpl"
)
;
}
else
{
systemDefault
=
p
.
getProperty
(
"ant.regexp.regexpimpl"
)
;
}
if
(
systemDefault
!=
null
)
{
return
createRegexpInstance
(
systemDefault
)
;
}
Throwable
cause
=
null
;
try
{
testAvailability
(
"java.util.regex.Matcher"
)
;
return
createRegexpInstance
(
"org.apache.tools.ant.util.regexp.Jdk14RegexpRegexp"
)
;
}
catch
(
BuildException
be
)
{
cause
=
orCause
(
cause
,
be
,
JavaEnvUtils
.
getJavaVersionNumber
(
)
<
14
)
;
}
try
{
testAvailability
(
"org.apache.oro.text.regex.Pattern"
)
;
return
createRegexpInstance
(
"org.apache.tools.ant.util.regexp.JakartaOroRegexp"
)
;
}
catch
(
BuildException
be
)
{
cause
=
orCause
(
cause
,
be
,
true
)
;
}
try
{
testAvailability
(
"org.apache.regexp.RE"
)
;
return
createRegexpInstance
(
"org.apache.tools.ant.util.regexp.JakartaRegexpRegexp"
)
;
}
catch
(
BuildException
be
)
{
cause
=
orCause
(
cause
,
be
,
true
)
;
}
throw
new
BuildException
(
"No supported regular expression matcher found"
+
(
cause
!=
null
?
": "
+
cause
:
""
)
,
cause
)
;
}
protected
Regexp
createRegexpInstance
(
String
classname
)
throws
BuildException
{
RegexpMatcher
m
=
createInstance
(
classname
)
;
if
(
m
instanceof
Regexp
)
{
return
(
Regexp
)
m
;
}
else
{
throw
new
BuildException
(
classname
+
" doesn't implement the Regexp interface"
)
;
}
}
}
