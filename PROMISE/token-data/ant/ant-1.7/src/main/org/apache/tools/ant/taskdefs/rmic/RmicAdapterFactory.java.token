package
org
.
apache
.
tools
.
ant
.
taskdefs
.
rmic
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
util
.
ClasspathUtils
;
import
java
.
util
.
Locale
;
public
final
class
RmicAdapterFactory
{
public
static
final
String
ERROR_UNKNOWN_COMPILER
=
"Class not found: "
;
public
static
final
String
ERROR_NOT_RMIC_ADAPTER
=
"Class of unexpected Type: "
;
public
static
final
String
DEFAULT_COMPILER
=
"default"
;
private
RmicAdapterFactory
(
)
{
}
public
static
RmicAdapter
getRmic
(
String
rmicType
,
Task
task
)
throws
BuildException
{
String
compiler
=
rmicType
.
toLowerCase
(
Locale
.
ENGLISH
)
;
if
(
DEFAULT_COMPILER
.
equals
(
compiler
)
||
compiler
.
length
(
)
==
0
)
{
compiler
=
KaffeRmic
.
isAvailable
(
)
?
KaffeRmic
.
COMPILER_NAME
:
SunRmic
.
COMPILER_NAME
;
}
if
(
SunRmic
.
COMPILER_NAME
.
equals
(
compiler
)
)
{
return
new
SunRmic
(
)
;
}
else
if
(
KaffeRmic
.
COMPILER_NAME
.
equals
(
compiler
)
)
{
return
new
KaffeRmic
(
)
;
}
else
if
(
WLRmic
.
COMPILER_NAME
.
equals
(
compiler
)
)
{
return
new
WLRmic
(
)
;
}
else
if
(
ForkingSunRmic
.
COMPILER_NAME
.
equals
(
compiler
)
)
{
return
new
ForkingSunRmic
(
)
;
}
else
if
(
XNewRmic
.
COMPILER_NAME
.
equals
(
compiler
)
)
{
return
new
XNewRmic
(
)
;
}
return
resolveClassName
(
rmicType
)
;
}
private
static
RmicAdapter
resolveClassName
(
String
className
)
throws
BuildException
{
return
(
RmicAdapter
)
ClasspathUtils
.
newInstance
(
className
,
RmicAdapterFactory
.
class
.
getClassLoader
(
)
,
RmicAdapter
.
class
)
;
}
}
