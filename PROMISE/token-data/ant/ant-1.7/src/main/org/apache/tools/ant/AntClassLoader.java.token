package
org
.
apache
.
tools
.
ant
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
Reader
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
net
.
MalformedURLException
;
import
java
.
net
.
URL
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Map
;
import
java
.
util
.
StringTokenizer
;
import
java
.
util
.
Vector
;
import
java
.
util
.
jar
.
Attributes
;
import
java
.
util
.
jar
.
Attributes
.
Name
;
import
java
.
util
.
jar
.
JarFile
;
import
java
.
util
.
jar
.
Manifest
;
import
java
.
util
.
zip
.
ZipEntry
;
import
java
.
util
.
zip
.
ZipFile
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
util
.
CollectionUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
JavaEnvUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
LoaderUtils
;
import
org
.
apache
.
tools
.
ant
.
launch
.
Locator
;
public
class
AntClassLoader
extends
ClassLoader
implements
SubBuildListener
{
private
static
final
FileUtils
FILE_UTILS
=
FileUtils
.
getFileUtils
(
)
;
private
class
ResourceEnumeration
implements
Enumeration
{
private
String
resourceName
;
private
int
pathElementsIndex
;
private
URL
nextResource
;
ResourceEnumeration
(
String
name
)
{
this
.
resourceName
=
name
;
this
.
pathElementsIndex
=
0
;
findNextResource
(
)
;
}
public
boolean
hasMoreElements
(
)
{
return
(
this
.
nextResource
!=
null
)
;
}
public
Object
nextElement
(
)
{
URL
ret
=
this
.
nextResource
;
findNextResource
(
)
;
return
ret
;
}
private
void
findNextResource
(
)
{
URL
url
=
null
;
while
(
(
pathElementsIndex
<
pathComponents
.
size
(
)
)
&&
(
url
==
null
)
)
{
try
{
File
pathComponent
=
(
File
)
pathComponents
.
elementAt
(
pathElementsIndex
)
;
url
=
getResourceURL
(
pathComponent
,
this
.
resourceName
)
;
pathElementsIndex
++
;
}
catch
(
BuildException
e
)
{
}
}
this
.
nextResource
=
url
;
}
}
private
static
final
int
BUFFER_SIZE
=
8192
;
private
static
final
int
NUMBER_OF_STRINGS
=
256
;
private
Vector
pathComponents
=
new
Vector
(
)
;
private
Project
project
;
private
boolean
parentFirst
=
true
;
private
Vector
systemPackages
=
new
Vector
(
)
;
private
Vector
loaderPackages
=
new
Vector
(
)
;
private
boolean
ignoreBase
=
false
;
private
ClassLoader
parent
=
null
;
private
Hashtable
zipFiles
=
new
Hashtable
(
)
;
private
static
Map
pathMap
=
Collections
.
synchronizedMap
(
new
HashMap
(
)
)
;
private
ClassLoader
savedContextLoader
=
null
;
private
boolean
isContextLoaderSaved
=
false
;
public
AntClassLoader
(
ClassLoader
parent
,
Project
project
,
Path
classpath
)
{
setParent
(
parent
)
;
setClassPath
(
classpath
)
;
setProject
(
project
)
;
}
public
AntClassLoader
(
)
{
setParent
(
null
)
;
}
public
AntClassLoader
(
Project
project
,
Path
classpath
)
{
setParent
(
null
)
;
setProject
(
project
)
;
setClassPath
(
classpath
)
;
}
public
AntClassLoader
(
ClassLoader
parent
,
Project
project
,
Path
classpath
,
boolean
parentFirst
)
{
this
(
project
,
classpath
)
;
if
(
parent
!=
null
)
{
setParent
(
parent
)
;
}
setParentFirst
(
parentFirst
)
;
addJavaLibraries
(
)
;
}
public
AntClassLoader
(
Project
project
,
Path
classpath
,
boolean
parentFirst
)
{
this
(
null
,
project
,
classpath
,
parentFirst
)
;
}
public
AntClassLoader
(
ClassLoader
parent
,
boolean
parentFirst
)
{
setParent
(
parent
)
;
project
=
null
;
this
.
parentFirst
=
parentFirst
;
}
public
void
setProject
(
Project
project
)
{
this
.
project
=
project
;
if
(
project
!=
null
)
{
project
.
addBuildListener
(
this
)
;
}
}
public
void
setClassPath
(
Path
classpath
)
{
pathComponents
.
removeAllElements
(
)
;
if
(
classpath
!=
null
)
{
Path
actualClasspath
=
classpath
.
concatSystemClasspath
(
"ignore"
)
;
String
[
]
pathElements
=
actualClasspath
.
list
(
)
;
for
(
int
i
=
0
;
i
<
pathElements
.
length
;
++
i
)
{
try
{
addPathElement
(
pathElements
[
i
]
)
;
}
catch
(
BuildException
e
)
{
}
}
}
}
public
void
setParent
(
ClassLoader
parent
)
{
if
(
parent
==
null
)
{
this
.
parent
=
AntClassLoader
.
class
.
getClassLoader
(
)
;
}
else
{
this
.
parent
=
parent
;
}
}
public
void
setParentFirst
(
boolean
parentFirst
)
{
this
.
parentFirst
=
parentFirst
;
}
protected
void
log
(
String
message
,
int
priority
)
{
if
(
project
!=
null
)
{
project
.
log
(
message
,
priority
)
;
}
}
public
void
setThreadContextLoader
(
)
{
if
(
isContextLoaderSaved
)
{
throw
new
BuildException
(
"Context loader has not been reset"
)
;
}
if
(
LoaderUtils
.
isContextLoaderAvailable
(
)
)
{
savedContextLoader
=
LoaderUtils
.
getContextClassLoader
(
)
;
ClassLoader
loader
=
this
;
if
(
project
!=
null
&&
"only"
.
equals
(
project
.
getProperty
(
"build.sysclasspath"
)
)
)
{
loader
=
this
.
getClass
(
)
.
getClassLoader
(
)
;
}
LoaderUtils
.
setContextClassLoader
(
loader
)
;
isContextLoaderSaved
=
true
;
}
}
public
void
resetThreadContextLoader
(
)
{
if
(
LoaderUtils
.
isContextLoaderAvailable
(
)
&&
isContextLoaderSaved
)
{
LoaderUtils
.
setContextClassLoader
(
savedContextLoader
)
;
savedContextLoader
=
null
;
isContextLoaderSaved
=
false
;
}
}
public
void
addPathElement
(
String
pathElement
)
throws
BuildException
{
File
pathComponent
=
project
!=
null
?
project
.
resolveFile
(
pathElement
)
:
new
File
(
pathElement
)
;
try
{
addPathFile
(
pathComponent
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
e
)
;
}
}
protected
void
addPathFile
(
File
pathComponent
)
throws
IOException
{
pathComponents
.
addElement
(
pathComponent
)
;
if
(
pathComponent
.
isDirectory
(
)
)
{
return
;
}
String
absPathPlusTimeAndLength
=
pathComponent
.
getAbsolutePath
(
)
+
pathComponent
.
lastModified
(
)
+
"-"
+
pathComponent
.
length
(
)
;
String
classpath
=
(
String
)
pathMap
.
get
(
absPathPlusTimeAndLength
)
;
if
(
classpath
==
null
)
{
ZipFile
jarFile
=
null
;
InputStream
manifestStream
=
null
;
try
{
jarFile
=
new
ZipFile
(
pathComponent
)
;
manifestStream
=
jarFile
.
getInputStream
(
new
ZipEntry
(
"META-INF/MANIFEST.MF"
)
)
;
if
(
manifestStream
==
null
)
{
return
;
}
Reader
manifestReader
=
new
InputStreamReader
(
manifestStream
,
"UTF-8"
)
;
org
.
apache
.
tools
.
ant
.
taskdefs
.
Manifest
manifest
=
new
org
.
apache
.
tools
.
ant
.
taskdefs
.
Manifest
(
manifestReader
)
;
classpath
=
manifest
.
getMainSection
(
)
.
getAttributeValue
(
"Class-Path"
)
;
}
catch
(
org
.
apache
.
tools
.
ant
.
taskdefs
.
ManifestException
e
)
{
}
finally
{
if
(
manifestStream
!=
null
)
{
manifestStream
.
close
(
)
;
}
if
(
jarFile
!=
null
)
{
jarFile
.
close
(
)
;
}
}
if
(
classpath
==
null
)
{
classpath
=
""
;
}
pathMap
.
put
(
absPathPlusTimeAndLength
,
classpath
)
;
}
if
(
!
""
.
equals
(
classpath
)
)
{
URL
baseURL
=
FILE_UTILS
.
getFileURL
(
pathComponent
)
;
StringTokenizer
st
=
new
StringTokenizer
(
classpath
)
;
while
(
st
.
hasMoreTokens
(
)
)
{
String
classpathElement
=
st
.
nextToken
(
)
;
URL
libraryURL
=
new
URL
(
baseURL
,
classpathElement
)
;
if
(
!
libraryURL
.
getProtocol
(
)
.
equals
(
"file"
)
)
{
log
(
"Skipping jar library "
+
classpathElement
+
" since only relative URLs are supported by this"
+
" loader"
,
Project
.
MSG_VERBOSE
)
;
continue
;
}
String
decodedPath
=
Locator
.
decodeUri
(
libraryURL
.
getFile
(
)
)
;
File
libraryFile
=
new
File
(
decodedPath
)
;
if
(
libraryFile
.
exists
(
)
&&
!
isInPath
(
libraryFile
)
)
{
addPathFile
(
libraryFile
)
;
}
}
}
}
public
String
getClasspath
(
)
{
StringBuffer
sb
=
new
StringBuffer
(
)
;
boolean
firstPass
=
true
;
Enumeration
componentEnum
=
pathComponents
.
elements
(
)
;
while
(
componentEnum
.
hasMoreElements
(
)
)
{
if
(
!
firstPass
)
{
sb
.
append
(
System
.
getProperty
(
"path.separator"
)
)
;
}
else
{
firstPass
=
false
;
}
sb
.
append
(
(
(
File
)
componentEnum
.
nextElement
(
)
)
.
getAbsolutePath
(
)
)
;
}
return
sb
.
toString
(
)
;
}
public
synchronized
void
setIsolated
(
boolean
isolated
)
{
ignoreBase
=
isolated
;
}
public
static
void
initializeClass
(
Class
theClass
)
{
final
Constructor
[
]
cons
=
theClass
.
getDeclaredConstructors
(
)
;
if
(
cons
!=
null
)
{
if
(
cons
.
length
>
0
&&
cons
[
0
]
!=
null
)
{
final
String
[
]
strs
=
new
String
[
NUMBER_OF_STRINGS
]
;
try
{
cons
[
0
]
.
newInstance
(
(
Object
[
]
)
strs
)
;
}
catch
(
Exception
e
)
{
}
}
}
}
public
void
addSystemPackageRoot
(
String
packageRoot
)
{
systemPackages
.
addElement
(
packageRoot
+
(
packageRoot
.
endsWith
(
"."
)
?
""
:
"."
)
)
;
}
public
void
addLoaderPackageRoot
(
String
packageRoot
)
{
loaderPackages
.
addElement
(
packageRoot
+
(
packageRoot
.
endsWith
(
"."
)
?
""
:
"."
)
)
;
}
public
Class
forceLoadClass
(
String
classname
)
throws
ClassNotFoundException
{
log
(
"force loading "
+
classname
,
Project
.
MSG_DEBUG
)
;
Class
theClass
=
findLoadedClass
(
classname
)
;
if
(
theClass
==
null
)
{
theClass
=
findClass
(
classname
)
;
}
return
theClass
;
}
public
Class
forceLoadSystemClass
(
String
classname
)
throws
ClassNotFoundException
{
log
(
"force system loading "
+
classname
,
Project
.
MSG_DEBUG
)
;
Class
theClass
=
findLoadedClass
(
classname
)
;
if
(
theClass
==
null
)
{
theClass
=
findBaseClass
(
classname
)
;
}
return
theClass
;
}
public
InputStream
getResourceAsStream
(
String
name
)
{
InputStream
resourceStream
=
null
;
if
(
isParentFirst
(
name
)
)
{
resourceStream
=
loadBaseResource
(
name
)
;
if
(
resourceStream
!=
null
)
{
log
(
"ResourceStream for "
+
name
+
" loaded from parent loader"
,
Project
.
MSG_DEBUG
)
;
}
else
{
resourceStream
=
loadResource
(
name
)
;
if
(
resourceStream
!=
null
)
{
log
(
"ResourceStream for "
+
name
+
" loaded from ant loader"
,
Project
.
MSG_DEBUG
)
;
}
}
}
else
{
resourceStream
=
loadResource
(
name
)
;
if
(
resourceStream
!=
null
)
{
log
(
"ResourceStream for "
+
name
+
" loaded from ant loader"
,
Project
.
MSG_DEBUG
)
;
}
else
{
resourceStream
=
loadBaseResource
(
name
)
;
if
(
resourceStream
!=
null
)
{
log
(
"ResourceStream for "
+
name
+
" loaded from parent loader"
,
Project
.
MSG_DEBUG
)
;
}
}
}
if
(
resourceStream
==
null
)
{
log
(
"Couldn't load ResourceStream for "
+
name
,
Project
.
MSG_DEBUG
)
;
}
return
resourceStream
;
}
private
InputStream
loadResource
(
String
name
)
{
InputStream
stream
=
null
;
Enumeration
e
=
pathComponents
.
elements
(
)
;
while
(
e
.
hasMoreElements
(
)
&&
stream
==
null
)
{
File
pathComponent
=
(
File
)
e
.
nextElement
(
)
;
stream
=
getResourceStream
(
pathComponent
,
name
)
;
}
return
stream
;
}
private
InputStream
loadBaseResource
(
String
name
)
{
if
(
parent
==
null
)
{
return
getSystemResourceAsStream
(
name
)
;
}
else
{
return
parent
.
getResourceAsStream
(
name
)
;
}
}
private
InputStream
getResourceStream
(
File
file
,
String
resourceName
)
{
try
{
if
(
!
file
.
exists
(
)
)
{
return
null
;
}
if
(
file
.
isDirectory
(
)
)
{
File
resource
=
new
File
(
file
,
resourceName
)
;
if
(
resource
.
exists
(
)
)
{
return
new
FileInputStream
(
resource
)
;
}
}
else
{
ZipFile
zipFile
=
(
ZipFile
)
zipFiles
.
get
(
file
)
;
if
(
zipFile
==
null
)
{
zipFile
=
new
ZipFile
(
file
)
;
zipFiles
.
put
(
file
,
zipFile
)
;
}
ZipEntry
entry
=
zipFile
.
getEntry
(
resourceName
)
;
if
(
entry
!=
null
)
{
return
zipFile
.
getInputStream
(
entry
)
;
}
}
}
catch
(
Exception
e
)
{
log
(
"Ignoring Exception "
+
e
.
getClass
(
)
.
getName
(
)
+
": "
+
e
.
getMessage
(
)
+
" reading resource "
+
resourceName
+
" from "
+
file
,
Project
.
MSG_VERBOSE
)
;
}
return
null
;
}
private
boolean
isParentFirst
(
String
resourceName
)
{
boolean
useParentFirst
=
parentFirst
;
for
(
Enumeration
e
=
systemPackages
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
packageName
=
(
String
)
e
.
nextElement
(
)
;
if
(
resourceName
.
startsWith
(
packageName
)
)
{
useParentFirst
=
true
;
break
;
}
}
for
(
Enumeration
e
=
loaderPackages
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
packageName
=
(
String
)
e
.
nextElement
(
)
;
if
(
resourceName
.
startsWith
(
packageName
)
)
{
useParentFirst
=
false
;
break
;
}
}
return
useParentFirst
;
}
private
ClassLoader
getRootLoader
(
)
{
ClassLoader
ret
=
getClass
(
)
.
getClassLoader
(
)
;
while
(
ret
!=
null
&&
ret
.
getParent
(
)
!=
null
)
{
ret
=
ret
.
getParent
(
)
;
}
return
ret
;
}
public
URL
getResource
(
String
name
)
{
URL
url
=
null
;
if
(
isParentFirst
(
name
)
)
{
url
=
(
parent
==
null
)
?
super
.
getResource
(
name
)
:
parent
.
getResource
(
name
)
;
}
if
(
url
!=
null
)
{
log
(
"Resource "
+
name
+
" loaded from parent loader"
,
Project
.
MSG_DEBUG
)
;
}
else
{
Enumeration
e
=
pathComponents
.
elements
(
)
;
while
(
e
.
hasMoreElements
(
)
&&
url
==
null
)
{
File
pathComponent
=
(
File
)
e
.
nextElement
(
)
;
url
=
getResourceURL
(
pathComponent
,
name
)
;
if
(
url
!=
null
)
{
log
(
"Resource "
+
name
+
" loaded from ant loader"
,
Project
.
MSG_DEBUG
)
;
}
}
}
if
(
url
==
null
&&
!
isParentFirst
(
name
)
)
{
if
(
ignoreBase
)
{
url
=
(
getRootLoader
(
)
==
null
)
?
null
:
getRootLoader
(
)
.
getResource
(
name
)
;
}
else
{
url
=
(
parent
==
null
)
?
super
.
getResource
(
name
)
:
parent
.
getResource
(
name
)
;
}
if
(
url
!=
null
)
{
log
(
"Resource "
+
name
+
" loaded from parent loader"
,
Project
.
MSG_DEBUG
)
;
}
}
if
(
url
==
null
)
{
log
(
"Couldn't load Resource "
+
name
,
Project
.
MSG_DEBUG
)
;
}
return
url
;
}
protected
Enumeration
findResources
(
String
name
)
throws
IOException
{
Enumeration
mine
=
new
ResourceEnumeration
(
name
)
;
Enumeration
base
;
if
(
parent
!=
null
&&
parent
!=
getParent
(
)
)
{
base
=
parent
.
getResources
(
name
)
;
}
else
{
base
=
new
CollectionUtils
.
EmptyEnumeration
(
)
;
}
if
(
isParentFirst
(
name
)
)
{
return
CollectionUtils
.
append
(
base
,
mine
)
;
}
else
if
(
ignoreBase
)
{
return
getRootLoader
(
)
==
null
?
mine
:
CollectionUtils
.
append
(
mine
,
getRootLoader
(
)
.
getResources
(
name
)
)
;
}
else
{
return
CollectionUtils
.
append
(
mine
,
base
)
;
}
}
protected
URL
getResourceURL
(
File
file
,
String
resourceName
)
{
try
{
if
(
!
file
.
exists
(
)
)
{
return
null
;
}
if
(
file
.
isDirectory
(
)
)
{
File
resource
=
new
File
(
file
,
resourceName
)
;
if
(
resource
.
exists
(
)
)
{
try
{
return
FILE_UTILS
.
getFileURL
(
resource
)
;
}
catch
(
MalformedURLException
ex
)
{
return
null
;
}
}
}
else
{
ZipFile
zipFile
=
(
ZipFile
)
zipFiles
.
get
(
file
)
;
if
(
zipFile
==
null
)
{
zipFile
=
new
ZipFile
(
file
)
;
zipFiles
.
put
(
file
,
zipFile
)
;
}
ZipEntry
entry
=
zipFile
.
getEntry
(
resourceName
)
;
if
(
entry
!=
null
)
{
try
{
return
new
URL
(
"jar:"
+
FILE_UTILS
.
getFileURL
(
file
)
+
"!/"
+
entry
)
;
}
catch
(
MalformedURLException
ex
)
{
return
null
;
}
}
}
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
return
null
;
}
protected
synchronized
Class
loadClass
(
String
classname
,
boolean
resolve
)
throws
ClassNotFoundException
{
Class
theClass
=
findLoadedClass
(
classname
)
;
if
(
theClass
!=
null
)
{
return
theClass
;
}
if
(
isParentFirst
(
classname
)
)
{
try
{
theClass
=
findBaseClass
(
classname
)
;
log
(
"Class "
+
classname
+
" loaded from parent loader "
+
"(parentFirst)"
,
Project
.
MSG_DEBUG
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
theClass
=
findClass
(
classname
)
;
log
(
"Class "
+
classname
+
" loaded from ant loader "
+
"(parentFirst)"
,
Project
.
MSG_DEBUG
)
;
}
}
else
{
try
{
theClass
=
findClass
(
classname
)
;
log
(
"Class "
+
classname
+
" loaded from ant loader"
,
Project
.
MSG_DEBUG
)
;
}
catch
(
ClassNotFoundException
cnfe
)
{
if
(
ignoreBase
)
{
throw
cnfe
;
}
theClass
=
findBaseClass
(
classname
)
;
log
(
"Class "
+
classname
+
" loaded from parent loader"
,
Project
.
MSG_DEBUG
)
;
}
}
if
(
resolve
)
{
resolveClass
(
theClass
)
;
}
return
theClass
;
}
private
String
getClassFilename
(
String
classname
)
{
return
classname
.
replace
(
'.'
,
'/'
)
+
".class"
;
}
protected
Class
defineClassFromData
(
File
container
,
byte
[
]
classData
,
String
classname
)
throws
IOException
{
definePackage
(
container
,
classname
)
;
return
defineClass
(
classname
,
classData
,
0
,
classData
.
length
,
Project
.
class
.
getProtectionDomain
(
)
)
;
}
protected
void
definePackage
(
File
container
,
String
className
)
throws
IOException
{
int
classIndex
=
className
.
lastIndexOf
(
'.'
)
;
if
(
classIndex
==
-
1
)
{
return
;
}
String
packageName
=
className
.
substring
(
0
,
classIndex
)
;
if
(
getPackage
(
packageName
)
!=
null
)
{
return
;
}
Manifest
manifest
=
getJarManifest
(
container
)
;
if
(
manifest
==
null
)
{
definePackage
(
packageName
,
null
,
null
,
null
,
null
,
null
,
null
,
null
)
;
}
else
{
definePackage
(
container
,
packageName
,
manifest
)
;
}
}
private
Manifest
getJarManifest
(
File
container
)
throws
IOException
{
if
(
container
.
isDirectory
(
)
)
{
return
null
;
}
JarFile
jarFile
=
null
;
try
{
jarFile
=
new
JarFile
(
container
)
;
return
jarFile
.
getManifest
(
)
;
}
finally
{
if
(
jarFile
!=
null
)
{
jarFile
.
close
(
)
;
}
}
}
protected
void
definePackage
(
File
container
,
String
packageName
,
Manifest
manifest
)
{
String
sectionName
=
packageName
.
replace
(
'.'
,
'/'
)
+
"/"
;
String
specificationTitle
=
null
;
String
specificationVendor
=
null
;
String
specificationVersion
=
null
;
String
implementationTitle
=
null
;
String
implementationVendor
=
null
;
String
implementationVersion
=
null
;
String
sealedString
=
null
;
URL
sealBase
=
null
;
Attributes
sectionAttributes
=
manifest
.
getAttributes
(
sectionName
)
;
if
(
sectionAttributes
!=
null
)
{
specificationTitle
=
sectionAttributes
.
getValue
(
Name
.
SPECIFICATION_TITLE
)
;
specificationVendor
=
sectionAttributes
.
getValue
(
Name
.
SPECIFICATION_VENDOR
)
;
specificationVersion
=
sectionAttributes
.
getValue
(
Name
.
SPECIFICATION_VERSION
)
;
implementationTitle
=
sectionAttributes
.
getValue
(
Name
.
IMPLEMENTATION_TITLE
)
;
implementationVendor
=
sectionAttributes
.
getValue
(
Name
.
IMPLEMENTATION_VENDOR
)
;
implementationVersion
=
sectionAttributes
.
getValue
(
Name
.
IMPLEMENTATION_VERSION
)
;
sealedString
=
sectionAttributes
.
getValue
(
Name
.
SEALED
)
;
}
Attributes
mainAttributes
=
manifest
.
getMainAttributes
(
)
;
if
(
mainAttributes
!=
null
)
{
if
(
specificationTitle
==
null
)
{
specificationTitle
=
mainAttributes
.
getValue
(
Name
.
SPECIFICATION_TITLE
)
;
}
if
(
specificationVendor
==
null
)
{
specificationVendor
=
mainAttributes
.
getValue
(
Name
.
SPECIFICATION_VENDOR
)
;
}
if
(
specificationVersion
==
null
)
{
specificationVersion
=
mainAttributes
.
getValue
(
Name
.
SPECIFICATION_VERSION
)
;
}
if
(
implementationTitle
==
null
)
{
implementationTitle
=
mainAttributes
.
getValue
(
Name
.
IMPLEMENTATION_TITLE
)
;
}
if
(
implementationVendor
==
null
)
{
implementationVendor
=
mainAttributes
.
getValue
(
Name
.
IMPLEMENTATION_VENDOR
)
;
}
if
(
implementationVersion
==
null
)
{
implementationVersion
=
mainAttributes
.
getValue
(
Name
.
IMPLEMENTATION_VERSION
)
;
}
if
(
sealedString
==
null
)
{
sealedString
=
mainAttributes
.
getValue
(
Name
.
SEALED
)
;
}
}
if
(
sealedString
!=
null
&&
sealedString
.
equalsIgnoreCase
(
"true"
)
)
{
try
{
sealBase
=
new
URL
(
FileUtils
.
getFileUtils
(
)
.
toURI
(
container
.
getAbsolutePath
(
)
)
)
;
}
catch
(
MalformedURLException
e
)
{
}
}
definePackage
(
packageName
,
specificationTitle
,
specificationVersion
,
specificationVendor
,
implementationTitle
,
implementationVersion
,
implementationVendor
,
sealBase
)
;
}
private
Class
getClassFromStream
(
InputStream
stream
,
String
classname
,
File
container
)
throws
IOException
,
SecurityException
{
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
int
bytesRead
=
-
1
;
byte
[
]
buffer
=
new
byte
[
BUFFER_SIZE
]
;
while
(
(
bytesRead
=
stream
.
read
(
buffer
,
0
,
BUFFER_SIZE
)
)
!=
-
1
)
{
baos
.
write
(
buffer
,
0
,
bytesRead
)
;
}
byte
[
]
classData
=
baos
.
toByteArray
(
)
;
return
defineClassFromData
(
container
,
classData
,
classname
)
;
}
public
Class
findClass
(
String
name
)
throws
ClassNotFoundException
{
log
(
"Finding class "
+
name
,
Project
.
MSG_DEBUG
)
;
return
findClassInComponents
(
name
)
;
}
protected
boolean
isInPath
(
File
component
)
{
for
(
Enumeration
e
=
pathComponents
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
File
pathComponent
=
(
File
)
e
.
nextElement
(
)
;
if
(
pathComponent
.
equals
(
component
)
)
{
return
true
;
}
}
return
false
;
}
private
Class
findClassInComponents
(
String
name
)
throws
ClassNotFoundException
{
InputStream
stream
=
null
;
String
classFilename
=
getClassFilename
(
name
)
;
try
{
Enumeration
e
=
pathComponents
.
elements
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
File
pathComponent
=
(
File
)
e
.
nextElement
(
)
;
try
{
stream
=
getResourceStream
(
pathComponent
,
classFilename
)
;
if
(
stream
!=
null
)
{
log
(
"Loaded from "
+
pathComponent
+
" "
+
classFilename
,
Project
.
MSG_DEBUG
)
;
return
getClassFromStream
(
stream
,
name
,
pathComponent
)
;
}
}
catch
(
SecurityException
se
)
{
throw
se
;
}
catch
(
IOException
ioe
)
{
log
(
"Exception reading component "
+
pathComponent
+
" (reason: "
+
ioe
.
getMessage
(
)
+
")"
,
Project
.
MSG_VERBOSE
)
;
}
}
throw
new
ClassNotFoundException
(
name
)
;
}
finally
{
try
{
if
(
stream
!=
null
)
{
stream
.
close
(
)
;
}
}
catch
(
IOException
e
)
{
}
}
}
private
Class
findBaseClass
(
String
name
)
throws
ClassNotFoundException
{
if
(
parent
==
null
)
{
return
findSystemClass
(
name
)
;
}
else
{
return
parent
.
loadClass
(
name
)
;
}
}
public
synchronized
void
cleanup
(
)
{
for
(
Enumeration
e
=
zipFiles
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
ZipFile
zipFile
=
(
ZipFile
)
e
.
nextElement
(
)
;
try
{
zipFile
.
close
(
)
;
}
catch
(
IOException
ioe
)
{
}
}
zipFiles
=
new
Hashtable
(
)
;
if
(
project
!=
null
)
{
project
.
removeBuildListener
(
this
)
;
}
project
=
null
;
}
public
void
buildStarted
(
BuildEvent
event
)
{
}
public
void
buildFinished
(
BuildEvent
event
)
{
cleanup
(
)
;
}
public
void
subBuildFinished
(
BuildEvent
event
)
{
if
(
event
.
getProject
(
)
==
project
)
{
cleanup
(
)
;
}
}
public
void
subBuildStarted
(
BuildEvent
event
)
{
}
public
void
targetStarted
(
BuildEvent
event
)
{
}
public
void
targetFinished
(
BuildEvent
event
)
{
}
public
void
taskStarted
(
BuildEvent
event
)
{
}
public
void
taskFinished
(
BuildEvent
event
)
{
}
public
void
messageLogged
(
BuildEvent
event
)
{
}
public
void
addJavaLibraries
(
)
{
Vector
packages
=
JavaEnvUtils
.
getJrePackages
(
)
;
Enumeration
e
=
packages
.
elements
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
String
packageName
=
(
String
)
e
.
nextElement
(
)
;
addSystemPackageRoot
(
packageName
)
;
}
}
public
String
toString
(
)
{
return
"AntClassLoader["
+
getClasspath
(
)
+
"]"
;
}
}
