package
org
.
apache
.
tools
.
ant
.
util
.
depend
.
bcel
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
bcel
.
classfile
.
ClassParser
;
import
org
.
apache
.
bcel
.
classfile
.
DescendingVisitor
;
import
org
.
apache
.
bcel
.
classfile
.
JavaClass
;
import
org
.
apache
.
tools
.
ant
.
util
.
depend
.
AbstractAnalyzer
;
public
class
FullAnalyzer
extends
AbstractAnalyzer
{
public
FullAnalyzer
(
)
{
try
{
new
ClassParser
(
"force"
)
;
}
catch
(
IOException
e
)
{
}
}
protected
void
determineDependencies
(
Vector
files
,
Vector
classes
)
{
Hashtable
dependencies
=
new
Hashtable
(
)
;
Hashtable
containers
=
new
Hashtable
(
)
;
Hashtable
toAnalyze
=
new
Hashtable
(
)
;
for
(
Enumeration
e
=
getRootClasses
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
classname
=
(
String
)
e
.
nextElement
(
)
;
toAnalyze
.
put
(
classname
,
classname
)
;
}
int
count
=
0
;
int
maxCount
=
isClosureRequired
(
)
?
MAX_LOOPS
:
2
;
while
(
toAnalyze
.
size
(
)
!=
0
&&
count
++
<
maxCount
)
{
DependencyVisitor
dependencyVisitor
=
new
DependencyVisitor
(
)
;
for
(
Enumeration
e
=
toAnalyze
.
keys
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
classname
=
(
String
)
e
.
nextElement
(
)
;
dependencies
.
put
(
classname
,
classname
)
;
try
{
File
container
=
getClassContainer
(
classname
)
;
if
(
container
==
null
)
{
continue
;
}
containers
.
put
(
container
,
container
)
;
ClassParser
parser
=
null
;
if
(
container
.
getName
(
)
.
endsWith
(
".class"
)
)
{
parser
=
new
ClassParser
(
container
.
getPath
(
)
)
;
}
else
{
parser
=
new
ClassParser
(
container
.
getPath
(
)
,
classname
.
replace
(
'.'
,
'/'
)
+
".class"
)
;
}
JavaClass
javaClass
=
parser
.
parse
(
)
;
DescendingVisitor
traverser
=
new
DescendingVisitor
(
javaClass
,
dependencyVisitor
)
;
traverser
.
visit
(
)
;
}
catch
(
IOException
ioe
)
{
}
}
toAnalyze
.
clear
(
)
;
Enumeration
depsEnum
=
dependencyVisitor
.
getDependencies
(
)
;
while
(
depsEnum
.
hasMoreElements
(
)
)
{
String
className
=
(
String
)
depsEnum
.
nextElement
(
)
;
if
(
!
dependencies
.
containsKey
(
className
)
)
{
toAnalyze
.
put
(
className
,
className
)
;
}
}
}
files
.
removeAllElements
(
)
;
for
(
Enumeration
e
=
containers
.
keys
(
)
;
e
.
hasMoreElements
(
)
;
)
{
files
.
addElement
(
(
File
)
e
.
nextElement
(
)
)
;
}
classes
.
removeAllElements
(
)
;
for
(
Enumeration
e
=
dependencies
.
keys
(
)
;
e
.
hasMoreElements
(
)
;
)
{
classes
.
addElement
(
(
String
)
e
.
nextElement
(
)
)
;
}
}
protected
boolean
supportsFileDependencies
(
)
{
return
true
;
}
}
