package
org
.
apache
.
tools
.
ant
.
types
.
resources
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
types
.
Resource
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
import
org
.
apache
.
tools
.
ant
.
types
.
ResourceCollection
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
public
abstract
class
CompressedResource
extends
Resource
{
private
Resource
resource
;
public
CompressedResource
(
)
{
}
public
CompressedResource
(
ResourceCollection
other
)
{
addConfigured
(
other
)
;
}
public
void
addConfigured
(
ResourceCollection
a
)
{
checkChildrenAllowed
(
)
;
if
(
resource
!=
null
)
{
throw
new
BuildException
(
"you must not specify more than one"
+
" resource"
)
;
}
if
(
a
.
size
(
)
!=
1
)
{
throw
new
BuildException
(
"only single argument resource collections"
+
" are supported"
)
;
}
resource
=
(
Resource
)
a
.
iterator
(
)
.
next
(
)
;
}
public
String
getName
(
)
{
return
getResource
(
)
.
getName
(
)
;
}
public
void
setName
(
String
name
)
throws
BuildException
{
throw
new
BuildException
(
"you can't change the name of a compressed"
+
" resource"
)
;
}
public
boolean
isExists
(
)
{
return
getResource
(
)
.
isExists
(
)
;
}
public
void
setExists
(
boolean
exists
)
{
throw
new
BuildException
(
"you can't change the exists state of a "
+
" compressed resource"
)
;
}
public
long
getLastModified
(
)
{
return
getResource
(
)
.
getLastModified
(
)
;
}
public
void
setLastModified
(
long
lastmodified
)
throws
BuildException
{
throw
new
BuildException
(
"you can't change the timestamp of a "
+
" compressed resource"
)
;
}
public
boolean
isDirectory
(
)
{
return
getResource
(
)
.
isDirectory
(
)
;
}
public
void
setDirectory
(
boolean
directory
)
throws
BuildException
{
throw
new
BuildException
(
"you can't change the directory state of a "
+
" compressed resource"
)
;
}
public
long
getSize
(
)
{
if
(
isExists
(
)
)
{
InputStream
in
=
null
;
try
{
in
=
getInputStream
(
)
;
byte
[
]
buf
=
new
byte
[
8192
]
;
int
size
=
0
;
int
readNow
;
while
(
(
readNow
=
in
.
read
(
buf
,
0
,
buf
.
length
)
)
>
0
)
{
size
+=
readNow
;
}
return
size
;
}
catch
(
IOException
ex
)
{
throw
new
BuildException
(
"caught exception while reading "
+
getName
(
)
,
ex
)
;
}
finally
{
FileUtils
.
close
(
in
)
;
}
}
else
{
return
0
;
}
}
public
void
setSize
(
long
size
)
throws
BuildException
{
throw
new
BuildException
(
"you can't change the size of a "
+
" compressed resource"
)
;
}
public
int
compareTo
(
Object
other
)
{
if
(
other
==
this
)
{
return
0
;
}
if
(
other
instanceof
CompressedResource
)
{
return
getResource
(
)
.
compareTo
(
(
(
CompressedResource
)
other
)
.
getResource
(
)
)
;
}
return
getResource
(
)
.
compareTo
(
other
)
;
}
public
int
hashCode
(
)
{
return
getResource
(
)
.
hashCode
(
)
;
}
public
InputStream
getInputStream
(
)
throws
IOException
{
InputStream
in
=
getResource
(
)
.
getInputStream
(
)
;
if
(
in
!=
null
)
{
in
=
wrapStream
(
in
)
;
}
return
in
;
}
public
OutputStream
getOutputStream
(
)
throws
IOException
{
OutputStream
out
=
getResource
(
)
.
getOutputStream
(
)
;
if
(
out
!=
null
)
{
out
=
wrapStream
(
out
)
;
}
return
out
;
}
public
boolean
isFilesystemOnly
(
)
{
return
false
;
}
public
String
toString
(
)
{
return
getCompressionName
(
)
+
" compressed "
+
getResource
(
)
.
toString
(
)
;
}
public
void
setRefid
(
Reference
r
)
{
if
(
resource
!=
null
)
{
throw
noChildrenAllowed
(
)
;
}
super
.
setRefid
(
r
)
;
}
protected
abstract
InputStream
wrapStream
(
InputStream
in
)
throws
IOException
;
protected
abstract
OutputStream
wrapStream
(
OutputStream
out
)
throws
IOException
;
protected
abstract
String
getCompressionName
(
)
;
private
Resource
getResource
(
)
{
if
(
isReference
(
)
)
{
return
(
Resource
)
getCheckedRef
(
)
;
}
else
if
(
resource
==
null
)
{
throw
new
BuildException
(
"no resource specified"
)
;
}
return
resource
;
}
}
