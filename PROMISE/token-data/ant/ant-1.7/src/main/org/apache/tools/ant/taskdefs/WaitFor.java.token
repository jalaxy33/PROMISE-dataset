package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
condition
.
Condition
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
condition
.
ConditionBase
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
public
class
WaitFor
extends
ConditionBase
{
private
long
maxWaitMillis
=
1000L
*
60L
*
3L
;
private
long
maxWaitMultiplier
=
1L
;
private
long
checkEveryMillis
=
500L
;
private
long
checkEveryMultiplier
=
1L
;
private
String
timeoutProperty
;
public
WaitFor
(
)
{
super
(
"waitfor"
)
;
}
public
void
setMaxWait
(
long
time
)
{
maxWaitMillis
=
time
;
}
public
void
setMaxWaitUnit
(
Unit
unit
)
{
maxWaitMultiplier
=
unit
.
getMultiplier
(
)
;
}
public
void
setCheckEvery
(
long
time
)
{
checkEveryMillis
=
time
;
}
public
void
setCheckEveryUnit
(
Unit
unit
)
{
checkEveryMultiplier
=
unit
.
getMultiplier
(
)
;
}
public
void
setTimeoutProperty
(
String
p
)
{
timeoutProperty
=
p
;
}
public
void
execute
(
)
throws
BuildException
{
if
(
countConditions
(
)
>
1
)
{
throw
new
BuildException
(
"You must not nest more than one "
+
"condition into "
+
getTaskName
(
)
)
;
}
if
(
countConditions
(
)
<
1
)
{
throw
new
BuildException
(
"You must nest a condition into "
+
getTaskName
(
)
)
;
}
Condition
c
=
(
Condition
)
getConditions
(
)
.
nextElement
(
)
;
long
savedMaxWaitMillis
=
maxWaitMillis
;
long
savedCheckEveryMillis
=
checkEveryMillis
;
try
{
maxWaitMillis
*=
maxWaitMultiplier
;
checkEveryMillis
*=
checkEveryMultiplier
;
long
start
=
System
.
currentTimeMillis
(
)
;
long
end
=
start
+
maxWaitMillis
;
while
(
System
.
currentTimeMillis
(
)
<
end
)
{
if
(
c
.
eval
(
)
)
{
processSuccess
(
)
;
return
;
}
try
{
Thread
.
sleep
(
checkEveryMillis
)
;
}
catch
(
InterruptedException
e
)
{
}
}
processTimeout
(
)
;
}
finally
{
maxWaitMillis
=
savedMaxWaitMillis
;
checkEveryMillis
=
savedCheckEveryMillis
;
}
}
protected
void
processSuccess
(
)
{
log
(
getTaskName
(
)
+
": condition was met"
,
Project
.
MSG_VERBOSE
)
;
}
protected
void
processTimeout
(
)
{
log
(
getTaskName
(
)
+
": timeout"
,
Project
.
MSG_VERBOSE
)
;
if
(
timeoutProperty
!=
null
)
{
getProject
(
)
.
setNewProperty
(
timeoutProperty
,
"true"
)
;
}
}
public
static
class
Unit
extends
EnumeratedAttribute
{
public
static
final
String
MILLISECOND
=
"millisecond"
;
public
static
final
String
SECOND
=
"second"
;
public
static
final
String
MINUTE
=
"minute"
;
public
static
final
String
HOUR
=
"hour"
;
public
static
final
String
DAY
=
"day"
;
public
static
final
String
WEEK
=
"week"
;
private
static
final
String
[
]
UNITS
=
{
MILLISECOND
,
SECOND
,
MINUTE
,
HOUR
,
DAY
,
WEEK
}
;
private
Map
timeTable
=
new
HashMap
(
)
;
public
Unit
(
)
{
timeTable
.
put
(
MILLISECOND
,
new
Long
(
1L
)
)
;
timeTable
.
put
(
SECOND
,
new
Long
(
1000L
)
)
;
timeTable
.
put
(
MINUTE
,
new
Long
(
1000L
*
60L
)
)
;
timeTable
.
put
(
HOUR
,
new
Long
(
1000L
*
60L
*
60L
)
)
;
timeTable
.
put
(
DAY
,
new
Long
(
1000L
*
60L
*
60L
*
24L
)
)
;
timeTable
.
put
(
WEEK
,
new
Long
(
1000L
*
60L
*
60L
*
24L
*
7L
)
)
;
}
public
long
getMultiplier
(
)
{
String
key
=
getValue
(
)
.
toLowerCase
(
)
;
Long
l
=
(
Long
)
timeTable
.
get
(
key
)
;
return
l
.
longValue
(
)
;
}
public
String
[
]
getValues
(
)
{
return
UNITS
;
}
}
}
