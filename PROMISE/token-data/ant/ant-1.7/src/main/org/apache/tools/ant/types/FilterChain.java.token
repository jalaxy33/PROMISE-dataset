package
org
.
apache
.
tools
.
ant
.
types
;
import
java
.
util
.
Vector
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
filters
.
ChainableReader
;
import
org
.
apache
.
tools
.
ant
.
filters
.
ClassConstants
;
import
org
.
apache
.
tools
.
ant
.
filters
.
EscapeUnicode
;
import
org
.
apache
.
tools
.
ant
.
filters
.
ExpandProperties
;
import
org
.
apache
.
tools
.
ant
.
filters
.
HeadFilter
;
import
org
.
apache
.
tools
.
ant
.
filters
.
LineContains
;
import
org
.
apache
.
tools
.
ant
.
filters
.
LineContainsRegExp
;
import
org
.
apache
.
tools
.
ant
.
filters
.
PrefixLines
;
import
org
.
apache
.
tools
.
ant
.
filters
.
ReplaceTokens
;
import
org
.
apache
.
tools
.
ant
.
filters
.
StripJavaComments
;
import
org
.
apache
.
tools
.
ant
.
filters
.
StripLineBreaks
;
import
org
.
apache
.
tools
.
ant
.
filters
.
StripLineComments
;
import
org
.
apache
.
tools
.
ant
.
filters
.
TabsToSpaces
;
import
org
.
apache
.
tools
.
ant
.
filters
.
TailFilter
;
import
org
.
apache
.
tools
.
ant
.
filters
.
TokenFilter
;
public
class
FilterChain
extends
DataType
implements
Cloneable
{
private
Vector
filterReaders
=
new
Vector
(
)
;
public
void
addFilterReader
(
final
AntFilterReader
filterReader
)
{
filterReaders
.
addElement
(
filterReader
)
;
}
public
Vector
getFilterReaders
(
)
{
return
filterReaders
;
}
public
void
addClassConstants
(
final
ClassConstants
classConstants
)
{
filterReaders
.
addElement
(
classConstants
)
;
}
public
void
addExpandProperties
(
final
ExpandProperties
expandProperties
)
{
filterReaders
.
addElement
(
expandProperties
)
;
}
public
void
addHeadFilter
(
final
HeadFilter
headFilter
)
{
filterReaders
.
addElement
(
headFilter
)
;
}
public
void
addLineContains
(
final
LineContains
lineContains
)
{
filterReaders
.
addElement
(
lineContains
)
;
}
public
void
addLineContainsRegExp
(
final
LineContainsRegExp
lineContainsRegExp
)
{
filterReaders
.
addElement
(
lineContainsRegExp
)
;
}
public
void
addPrefixLines
(
final
PrefixLines
prefixLines
)
{
filterReaders
.
addElement
(
prefixLines
)
;
}
public
void
addReplaceTokens
(
final
ReplaceTokens
replaceTokens
)
{
filterReaders
.
addElement
(
replaceTokens
)
;
}
public
void
addStripJavaComments
(
final
StripJavaComments
stripJavaComments
)
{
filterReaders
.
addElement
(
stripJavaComments
)
;
}
public
void
addStripLineBreaks
(
final
StripLineBreaks
stripLineBreaks
)
{
filterReaders
.
addElement
(
stripLineBreaks
)
;
}
public
void
addStripLineComments
(
final
StripLineComments
stripLineComments
)
{
filterReaders
.
addElement
(
stripLineComments
)
;
}
public
void
addTabsToSpaces
(
final
TabsToSpaces
tabsToSpaces
)
{
filterReaders
.
addElement
(
tabsToSpaces
)
;
}
public
void
addTailFilter
(
final
TailFilter
tailFilter
)
{
filterReaders
.
addElement
(
tailFilter
)
;
}
public
void
addEscapeUnicode
(
final
EscapeUnicode
escapeUnicode
)
{
filterReaders
.
addElement
(
escapeUnicode
)
;
}
public
void
addTokenFilter
(
final
TokenFilter
tokenFilter
)
{
filterReaders
.
addElement
(
tokenFilter
)
;
}
public
void
addDeleteCharacters
(
TokenFilter
.
DeleteCharacters
filter
)
{
filterReaders
.
addElement
(
filter
)
;
}
public
void
addContainsRegex
(
TokenFilter
.
ContainsRegex
filter
)
{
filterReaders
.
addElement
(
filter
)
;
}
public
void
addReplaceRegex
(
TokenFilter
.
ReplaceRegex
filter
)
{
filterReaders
.
addElement
(
filter
)
;
}
public
void
addTrim
(
TokenFilter
.
Trim
filter
)
{
filterReaders
.
addElement
(
filter
)
;
}
public
void
addReplaceString
(
TokenFilter
.
ReplaceString
filter
)
{
filterReaders
.
addElement
(
filter
)
;
}
public
void
addIgnoreBlank
(
TokenFilter
.
IgnoreBlank
filter
)
{
filterReaders
.
addElement
(
filter
)
;
}
public
void
setRefid
(
Reference
r
)
throws
BuildException
{
if
(
!
filterReaders
.
isEmpty
(
)
)
{
throw
tooManyAttributes
(
)
;
}
Object
o
=
r
.
getReferencedObject
(
getProject
(
)
)
;
if
(
o
instanceof
FilterChain
)
{
FilterChain
fc
=
(
FilterChain
)
o
;
filterReaders
=
fc
.
getFilterReaders
(
)
;
}
else
{
String
msg
=
r
.
getRefId
(
)
+
" doesn\'t refer to a FilterChain"
;
throw
new
BuildException
(
msg
)
;
}
super
.
setRefid
(
r
)
;
}
public
void
add
(
ChainableReader
filter
)
{
filterReaders
.
addElement
(
filter
)
;
}
}
