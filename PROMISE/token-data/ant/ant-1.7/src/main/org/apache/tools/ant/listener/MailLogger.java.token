package
org
.
apache
.
tools
.
ant
.
listener
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
PrintStream
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Properties
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
StringTokenizer
;
import
org
.
apache
.
tools
.
ant
.
BuildEvent
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DefaultLogger
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
email
.
EmailAddress
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
email
.
Message
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
email
.
Mailer
;
import
org
.
apache
.
tools
.
ant
.
util
.
ClasspathUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
DateUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
StringUtils
;
import
org
.
apache
.
tools
.
mail
.
MailMessage
;
public
class
MailLogger
extends
DefaultLogger
{
private
StringBuffer
buffer
=
new
StringBuffer
(
)
;
public
void
buildFinished
(
BuildEvent
event
)
{
super
.
buildFinished
(
event
)
;
Project
project
=
event
.
getProject
(
)
;
Hashtable
properties
=
project
.
getProperties
(
)
;
Properties
fileProperties
=
new
Properties
(
)
;
String
filename
=
(
String
)
properties
.
get
(
"MailLogger.properties.file"
)
;
if
(
filename
!=
null
)
{
InputStream
is
=
null
;
try
{
is
=
new
FileInputStream
(
filename
)
;
fileProperties
.
load
(
is
)
;
}
catch
(
IOException
ioe
)
{
}
finally
{
if
(
is
!=
null
)
{
try
{
is
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
}
}
}
for
(
Enumeration
e
=
fileProperties
.
keys
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
key
=
(
String
)
e
.
nextElement
(
)
;
String
value
=
fileProperties
.
getProperty
(
key
)
;
properties
.
put
(
key
,
project
.
replaceProperties
(
value
)
)
;
}
boolean
success
=
(
event
.
getException
(
)
==
null
)
;
String
prefix
=
success
?
"success"
:
"failure"
;
try
{
boolean
notify
=
Project
.
toBoolean
(
getValue
(
properties
,
prefix
+
".notify"
,
"on"
)
)
;
if
(
!
notify
)
{
return
;
}
String
mailhost
=
getValue
(
properties
,
"mailhost"
,
"localhost"
)
;
int
port
=
Integer
.
parseInt
(
getValue
(
properties
,
"port"
,
String
.
valueOf
(
MailMessage
.
DEFAULT_PORT
)
)
)
;
String
user
=
getValue
(
properties
,
"user"
,
""
)
;
String
password
=
getValue
(
properties
,
"password"
,
""
)
;
boolean
ssl
=
Project
.
toBoolean
(
getValue
(
properties
,
"ssl"
,
"off"
)
)
;
String
from
=
getValue
(
properties
,
"from"
,
null
)
;
String
replytoList
=
getValue
(
properties
,
"replyto"
,
""
)
;
String
toList
=
getValue
(
properties
,
prefix
+
".to"
,
null
)
;
String
subject
=
getValue
(
properties
,
prefix
+
".subject"
,
(
success
)
?
"Build Success"
:
"Build Failure"
)
;
if
(
user
.
equals
(
""
)
&&
password
.
equals
(
""
)
&&
!
ssl
)
{
sendMail
(
mailhost
,
port
,
from
,
replytoList
,
toList
,
subject
,
buffer
.
substring
(
0
)
)
;
}
else
{
sendMimeMail
(
event
.
getProject
(
)
,
mailhost
,
port
,
user
,
password
,
ssl
,
from
,
replytoList
,
toList
,
subject
,
buffer
.
substring
(
0
)
)
;
}
}
catch
(
Exception
e
)
{
System
.
out
.
println
(
"MailLogger failed to send e-mail!"
)
;
e
.
printStackTrace
(
System
.
err
)
;
}
}
protected
void
log
(
String
message
)
{
buffer
.
append
(
message
)
.
append
(
StringUtils
.
LINE_SEP
)
;
}
private
String
getValue
(
Hashtable
properties
,
String
name
,
String
defaultValue
)
throws
Exception
{
String
propertyName
=
"MailLogger."
+
name
;
String
value
=
(
String
)
properties
.
get
(
propertyName
)
;
if
(
value
==
null
)
{
value
=
defaultValue
;
}
if
(
value
==
null
)
{
throw
new
Exception
(
"Missing required parameter: "
+
propertyName
)
;
}
return
value
;
}
private
void
sendMail
(
String
mailhost
,
int
port
,
String
from
,
String
replyToList
,
String
toList
,
String
subject
,
String
message
)
throws
IOException
{
MailMessage
mailMessage
=
new
MailMessage
(
mailhost
,
port
)
;
mailMessage
.
setHeader
(
"Date"
,
DateUtils
.
getDateForHeader
(
)
)
;
mailMessage
.
from
(
from
)
;
if
(
!
replyToList
.
equals
(
""
)
)
{
StringTokenizer
t
=
new
StringTokenizer
(
replyToList
,
", "
,
false
)
;
while
(
t
.
hasMoreTokens
(
)
)
{
mailMessage
.
replyto
(
t
.
nextToken
(
)
)
;
}
}
StringTokenizer
t
=
new
StringTokenizer
(
toList
,
", "
,
false
)
;
while
(
t
.
hasMoreTokens
(
)
)
{
mailMessage
.
to
(
t
.
nextToken
(
)
)
;
}
mailMessage
.
setSubject
(
subject
)
;
PrintStream
ps
=
mailMessage
.
getPrintStream
(
)
;
ps
.
println
(
message
)
;
mailMessage
.
sendAndClose
(
)
;
}
private
void
sendMimeMail
(
Project
project
,
String
host
,
int
port
,
String
user
,
String
password
,
boolean
ssl
,
String
from
,
String
replyToString
,
String
toString
,
String
subject
,
String
message
)
{
Mailer
mailer
=
null
;
try
{
mailer
=
(
Mailer
)
ClasspathUtils
.
newInstance
(
"org.apache.tools.ant.taskdefs.email.MimeMailer"
,
MailLogger
.
class
.
getClassLoader
(
)
,
Mailer
.
class
)
;
}
catch
(
BuildException
e
)
{
Throwable
t
=
e
.
getCause
(
)
==
null
?
e
:
e
.
getCause
(
)
;
log
(
"Failed to initialise MIME mail: "
+
t
.
getMessage
(
)
)
;
return
;
}
Vector
replyToList
=
vectorizeEmailAddresses
(
replyToString
)
;
mailer
.
setHost
(
host
)
;
mailer
.
setPort
(
port
)
;
mailer
.
setUser
(
user
)
;
mailer
.
setPassword
(
password
)
;
mailer
.
setSSL
(
ssl
)
;
Message
mymessage
=
new
Message
(
message
)
;
mymessage
.
setProject
(
project
)
;
mailer
.
setMessage
(
mymessage
)
;
mailer
.
setFrom
(
new
EmailAddress
(
from
)
)
;
mailer
.
setReplyToList
(
replyToList
)
;
Vector
toList
=
vectorizeEmailAddresses
(
toString
)
;
mailer
.
setToList
(
toList
)
;
mailer
.
setCcList
(
new
Vector
(
)
)
;
mailer
.
setBccList
(
new
Vector
(
)
)
;
mailer
.
setFiles
(
new
Vector
(
)
)
;
mailer
.
setSubject
(
subject
)
;
mailer
.
send
(
)
;
}
private
Vector
vectorizeEmailAddresses
(
String
listString
)
{
Vector
emailList
=
new
Vector
(
)
;
StringTokenizer
tokens
=
new
StringTokenizer
(
listString
,
","
)
;
while
(
tokens
.
hasMoreTokens
(
)
)
{
emailList
.
addElement
(
new
EmailAddress
(
tokens
.
nextToken
(
)
)
)
;
}
return
emailList
;
}
}
