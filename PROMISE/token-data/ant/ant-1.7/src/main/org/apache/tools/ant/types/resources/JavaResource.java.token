package
org
.
apache
.
tools
.
ant
.
types
.
resources
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
types
.
Resource
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
public
class
JavaResource
extends
Resource
{
private
Path
classpath
;
private
Reference
loader
;
public
JavaResource
(
)
{
}
public
JavaResource
(
String
name
,
Path
path
)
{
setName
(
name
)
;
classpath
=
path
;
}
public
void
setClasspath
(
Path
classpath
)
{
checkAttributesAllowed
(
)
;
if
(
this
.
classpath
==
null
)
{
this
.
classpath
=
classpath
;
}
else
{
this
.
classpath
.
append
(
classpath
)
;
}
}
public
Path
createClasspath
(
)
{
checkChildrenAllowed
(
)
;
if
(
this
.
classpath
==
null
)
{
this
.
classpath
=
new
Path
(
getProject
(
)
)
;
}
return
this
.
classpath
.
createPath
(
)
;
}
public
void
setClasspathRef
(
Reference
r
)
{
checkAttributesAllowed
(
)
;
createClasspath
(
)
.
setRefid
(
r
)
;
}
public
Path
getClasspath
(
)
{
return
isReference
(
)
?
(
(
JavaResource
)
getCheckedRef
(
)
)
.
getClasspath
(
)
:
classpath
;
}
public
void
setLoaderRef
(
Reference
r
)
{
checkAttributesAllowed
(
)
;
loader
=
r
;
}
public
void
setRefid
(
Reference
r
)
{
if
(
loader
!=
null
||
classpath
!=
null
)
{
throw
tooManyAttributes
(
)
;
}
super
.
setRefid
(
r
)
;
}
public
boolean
isExists
(
)
{
InputStream
is
=
null
;
try
{
return
isReference
(
)
?
(
(
Resource
)
getCheckedRef
(
)
)
.
isExists
(
)
:
(
is
=
getInputStream
(
)
)
!=
null
;
}
catch
(
IOException
ex
)
{
return
false
;
}
finally
{
FileUtils
.
close
(
is
)
;
}
}
public
InputStream
getInputStream
(
)
throws
IOException
{
if
(
isReference
(
)
)
{
return
(
(
Resource
)
getCheckedRef
(
)
)
.
getInputStream
(
)
;
}
ClassLoader
cl
=
null
;
if
(
loader
!=
null
)
{
cl
=
(
ClassLoader
)
loader
.
getReferencedObject
(
)
;
}
if
(
cl
==
null
)
{
if
(
getClasspath
(
)
!=
null
)
{
cl
=
getProject
(
)
.
createClassLoader
(
classpath
)
;
}
else
{
cl
=
JavaResource
.
class
.
getClassLoader
(
)
;
}
if
(
loader
!=
null
&&
cl
!=
null
)
{
getProject
(
)
.
addReference
(
loader
.
getRefId
(
)
,
cl
)
;
}
}
return
cl
==
null
?
ClassLoader
.
getSystemResourceAsStream
(
getName
(
)
)
:
cl
.
getResourceAsStream
(
getName
(
)
)
;
}
public
int
compareTo
(
Object
another
)
{
if
(
isReference
(
)
)
{
return
(
(
Comparable
)
getCheckedRef
(
)
)
.
compareTo
(
another
)
;
}
if
(
another
.
getClass
(
)
.
equals
(
getClass
(
)
)
)
{
JavaResource
otherjr
=
(
JavaResource
)
another
;
if
(
!
getName
(
)
.
equals
(
otherjr
.
getName
(
)
)
)
{
return
getName
(
)
.
compareTo
(
otherjr
.
getName
(
)
)
;
}
if
(
loader
!=
otherjr
.
loader
)
{
if
(
loader
==
null
)
{
return
-
1
;
}
if
(
otherjr
.
loader
==
null
)
{
return
1
;
}
return
loader
.
getRefId
(
)
.
compareTo
(
otherjr
.
loader
.
getRefId
(
)
)
;
}
Path
p
=
getClasspath
(
)
;
Path
op
=
otherjr
.
getClasspath
(
)
;
if
(
p
!=
op
)
{
if
(
p
==
null
)
{
return
-
1
;
}
if
(
op
==
null
)
{
return
1
;
}
return
p
.
toString
(
)
.
compareTo
(
op
.
toString
(
)
)
;
}
return
0
;
}
return
super
.
compareTo
(
another
)
;
}
}
