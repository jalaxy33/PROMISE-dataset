package
org
.
apache
.
tools
.
ant
.
types
;
import
java
.
io
.
File
;
import
java
.
util
.
Stack
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
ArrayList
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
Redirector
;
public
class
RedirectorElement
extends
DataType
{
private
boolean
usingInput
=
false
;
private
boolean
usingOutput
=
false
;
private
boolean
usingError
=
false
;
private
Boolean
logError
;
private
String
outputProperty
;
private
String
errorProperty
;
private
String
inputString
;
private
Boolean
append
;
private
Boolean
alwaysLog
;
private
Boolean
createEmptyFiles
;
private
Mapper
inputMapper
;
private
Mapper
outputMapper
;
private
Mapper
errorMapper
;
private
Vector
inputFilterChains
=
new
Vector
(
)
;
private
Vector
outputFilterChains
=
new
Vector
(
)
;
private
Vector
errorFilterChains
=
new
Vector
(
)
;
private
String
outputEncoding
;
private
String
errorEncoding
;
private
String
inputEncoding
;
private
Boolean
logInputString
;
public
void
addConfiguredInputMapper
(
Mapper
inputMapper
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
if
(
this
.
inputMapper
!=
null
)
{
if
(
usingInput
)
{
throw
new
BuildException
(
"attribute \"input\""
+
" cannot coexist with a nested <inputmapper>"
)
;
}
else
{
throw
new
BuildException
(
"Cannot have > 1 <inputmapper>"
)
;
}
}
this
.
inputMapper
=
inputMapper
;
}
public
void
addConfiguredOutputMapper
(
Mapper
outputMapper
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
if
(
this
.
outputMapper
!=
null
)
{
if
(
usingOutput
)
{
throw
new
BuildException
(
"attribute \"output\""
+
" cannot coexist with a nested <outputmapper>"
)
;
}
else
{
throw
new
BuildException
(
"Cannot have > 1 <outputmapper>"
)
;
}
}
this
.
outputMapper
=
outputMapper
;
}
public
void
addConfiguredErrorMapper
(
Mapper
errorMapper
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
if
(
this
.
errorMapper
!=
null
)
{
if
(
usingError
)
{
throw
new
BuildException
(
"attribute \"error\""
+
" cannot coexist with a nested <errormapper>"
)
;
}
else
{
throw
new
BuildException
(
"Cannot have > 1 <errormapper>"
)
;
}
}
this
.
errorMapper
=
errorMapper
;
}
public
void
setRefid
(
Reference
r
)
throws
BuildException
{
if
(
usingInput
||
usingOutput
||
usingError
||
inputString
!=
null
||
logError
!=
null
||
append
!=
null
||
createEmptyFiles
!=
null
||
inputEncoding
!=
null
||
outputEncoding
!=
null
||
errorEncoding
!=
null
||
outputProperty
!=
null
||
errorProperty
!=
null
||
logInputString
!=
null
)
{
throw
tooManyAttributes
(
)
;
}
super
.
setRefid
(
r
)
;
}
public
void
setInput
(
File
input
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
if
(
inputString
!=
null
)
{
throw
new
BuildException
(
"The \"input\" and \"inputstring\" "
+
"attributes cannot both be specified"
)
;
}
usingInput
=
true
;
inputMapper
=
createMergeMapper
(
input
)
;
}
public
void
setInputString
(
String
inputString
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
if
(
usingInput
)
{
throw
new
BuildException
(
"The \"input\" and \"inputstring\" "
+
"attributes cannot both be specified"
)
;
}
this
.
inputString
=
inputString
;
}
public
void
setLogInputString
(
boolean
logInputString
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
logInputString
=
logInputString
?
Boolean
.
TRUE
:
Boolean
.
FALSE
;
}
public
void
setOutput
(
File
out
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
if
(
out
==
null
)
{
throw
new
IllegalArgumentException
(
"output file specified as null"
)
;
}
usingOutput
=
true
;
outputMapper
=
createMergeMapper
(
out
)
;
}
public
void
setOutputEncoding
(
String
outputEncoding
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
outputEncoding
=
outputEncoding
;
}
public
void
setErrorEncoding
(
String
errorEncoding
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
errorEncoding
=
errorEncoding
;
}
public
void
setInputEncoding
(
String
inputEncoding
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
inputEncoding
=
inputEncoding
;
}
public
void
setLogError
(
boolean
logError
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
logError
=
(
(
logError
)
?
Boolean
.
TRUE
:
Boolean
.
FALSE
)
;
}
public
void
setError
(
File
error
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
if
(
error
==
null
)
{
throw
new
IllegalArgumentException
(
"error file specified as null"
)
;
}
usingError
=
true
;
errorMapper
=
createMergeMapper
(
error
)
;
}
public
void
setOutputProperty
(
String
outputProperty
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
outputProperty
=
outputProperty
;
}
public
void
setAppend
(
boolean
append
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
append
=
(
(
append
)
?
Boolean
.
TRUE
:
Boolean
.
FALSE
)
;
}
public
void
setAlwaysLog
(
boolean
alwaysLog
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
alwaysLog
=
(
(
alwaysLog
)
?
Boolean
.
TRUE
:
Boolean
.
FALSE
)
;
}
public
void
setCreateEmptyFiles
(
boolean
createEmptyFiles
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
createEmptyFiles
=
(
(
createEmptyFiles
)
?
Boolean
.
TRUE
:
Boolean
.
FALSE
)
;
}
public
void
setErrorProperty
(
String
errorProperty
)
{
if
(
isReference
(
)
)
{
throw
tooManyAttributes
(
)
;
}
this
.
errorProperty
=
errorProperty
;
}
public
FilterChain
createInputFilterChain
(
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
FilterChain
result
=
new
FilterChain
(
)
;
result
.
setProject
(
getProject
(
)
)
;
inputFilterChains
.
add
(
result
)
;
return
result
;
}
public
FilterChain
createOutputFilterChain
(
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
FilterChain
result
=
new
FilterChain
(
)
;
result
.
setProject
(
getProject
(
)
)
;
outputFilterChains
.
add
(
result
)
;
return
result
;
}
public
FilterChain
createErrorFilterChain
(
)
{
if
(
isReference
(
)
)
{
throw
noChildrenAllowed
(
)
;
}
FilterChain
result
=
new
FilterChain
(
)
;
result
.
setProject
(
getProject
(
)
)
;
errorFilterChains
.
add
(
result
)
;
return
result
;
}
public
void
configure
(
Redirector
redirector
)
{
configure
(
redirector
,
null
)
;
}
public
void
configure
(
Redirector
redirector
,
String
sourcefile
)
{
if
(
isReference
(
)
)
{
getRef
(
)
.
configure
(
redirector
,
sourcefile
)
;
return
;
}
if
(
alwaysLog
!=
null
)
{
redirector
.
setAlwaysLog
(
alwaysLog
.
booleanValue
(
)
)
;
}
if
(
logError
!=
null
)
{
redirector
.
setLogError
(
logError
.
booleanValue
(
)
)
;
}
if
(
append
!=
null
)
{
redirector
.
setAppend
(
append
.
booleanValue
(
)
)
;
}
if
(
createEmptyFiles
!=
null
)
{
redirector
.
setCreateEmptyFiles
(
createEmptyFiles
.
booleanValue
(
)
)
;
}
if
(
outputProperty
!=
null
)
{
redirector
.
setOutputProperty
(
outputProperty
)
;
}
if
(
errorProperty
!=
null
)
{
redirector
.
setErrorProperty
(
errorProperty
)
;
}
if
(
inputString
!=
null
)
{
redirector
.
setInputString
(
inputString
)
;
}
if
(
logInputString
!=
null
)
{
redirector
.
setLogInputString
(
logInputString
.
booleanValue
(
)
)
;
}
if
(
inputMapper
!=
null
)
{
String
[
]
inputTargets
=
null
;
try
{
inputTargets
=
inputMapper
.
getImplementation
(
)
.
mapFileName
(
sourcefile
)
;
}
catch
(
NullPointerException
enPeaEx
)
{
if
(
sourcefile
!=
null
)
{
throw
enPeaEx
;
}
}
if
(
inputTargets
!=
null
&&
inputTargets
.
length
>
0
)
{
redirector
.
setInput
(
toFileArray
(
inputTargets
)
)
;
}
}
if
(
outputMapper
!=
null
)
{
String
[
]
outputTargets
=
null
;
try
{
outputTargets
=
outputMapper
.
getImplementation
(
)
.
mapFileName
(
sourcefile
)
;
}
catch
(
NullPointerException
enPeaEx
)
{
if
(
sourcefile
!=
null
)
{
throw
enPeaEx
;
}
}
if
(
outputTargets
!=
null
&&
outputTargets
.
length
>
0
)
{
redirector
.
setOutput
(
toFileArray
(
outputTargets
)
)
;
}
}
if
(
errorMapper
!=
null
)
{
String
[
]
errorTargets
=
null
;
try
{
errorTargets
=
errorMapper
.
getImplementation
(
)
.
mapFileName
(
sourcefile
)
;
}
catch
(
NullPointerException
enPeaEx
)
{
if
(
sourcefile
!=
null
)
{
throw
enPeaEx
;
}
}
if
(
errorTargets
!=
null
&&
errorTargets
.
length
>
0
)
{
redirector
.
setError
(
toFileArray
(
errorTargets
)
)
;
}
}
if
(
inputFilterChains
.
size
(
)
>
0
)
{
redirector
.
setInputFilterChains
(
inputFilterChains
)
;
}
if
(
outputFilterChains
.
size
(
)
>
0
)
{
redirector
.
setOutputFilterChains
(
outputFilterChains
)
;
}
if
(
errorFilterChains
.
size
(
)
>
0
)
{
redirector
.
setErrorFilterChains
(
errorFilterChains
)
;
}
if
(
inputEncoding
!=
null
)
{
redirector
.
setInputEncoding
(
inputEncoding
)
;
}
if
(
outputEncoding
!=
null
)
{
redirector
.
setOutputEncoding
(
outputEncoding
)
;
}
if
(
errorEncoding
!=
null
)
{
redirector
.
setErrorEncoding
(
errorEncoding
)
;
}
}
protected
Mapper
createMergeMapper
(
File
destfile
)
{
Mapper
result
=
new
Mapper
(
getProject
(
)
)
;
result
.
setClassname
(
org
.
apache
.
tools
.
ant
.
util
.
MergingMapper
.
class
.
getName
(
)
)
;
result
.
setTo
(
destfile
.
getAbsolutePath
(
)
)
;
return
result
;
}
protected
File
[
]
toFileArray
(
String
[
]
name
)
{
if
(
name
==
null
)
{
return
null
;
}
ArrayList
list
=
new
ArrayList
(
name
.
length
)
;
for
(
int
i
=
0
;
i
<
name
.
length
;
i
++
)
{
if
(
name
[
i
]
!=
null
)
{
list
.
add
(
getProject
(
)
.
resolveFile
(
name
[
i
]
)
)
;
}
}
return
(
File
[
]
)
(
list
.
toArray
(
new
File
[
list
.
size
(
)
]
)
)
;
}
protected
void
dieOnCircularReference
(
Stack
stk
,
Project
p
)
throws
BuildException
{
if
(
isChecked
(
)
)
{
return
;
}
if
(
isReference
(
)
)
{
super
.
dieOnCircularReference
(
stk
,
p
)
;
}
else
{
Mapper
[
]
m
=
new
Mapper
[
]
{
inputMapper
,
outputMapper
,
errorMapper
}
;
for
(
int
i
=
0
;
i
<
m
.
length
;
i
++
)
{
if
(
m
[
i
]
!=
null
)
{
stk
.
push
(
m
[
i
]
)
;
m
[
i
]
.
dieOnCircularReference
(
stk
,
p
)
;
stk
.
pop
(
)
;
}
}
Vector
[
]
v
=
new
Vector
[
]
{
inputFilterChains
,
outputFilterChains
,
errorFilterChains
}
;
for
(
int
i
=
0
;
i
<
v
.
length
;
i
++
)
{
if
(
v
[
i
]
!=
null
)
{
for
(
Iterator
fci
=
v
[
i
]
.
iterator
(
)
;
fci
.
hasNext
(
)
;
)
{
FilterChain
fc
=
(
FilterChain
)
fci
.
next
(
)
;
stk
.
push
(
fc
)
;
fc
.
dieOnCircularReference
(
stk
,
p
)
;
stk
.
pop
(
)
;
}
}
}
setChecked
(
true
)
;
}
}
private
RedirectorElement
getRef
(
)
{
return
(
RedirectorElement
)
getCheckedRef
(
)
;
}
}
