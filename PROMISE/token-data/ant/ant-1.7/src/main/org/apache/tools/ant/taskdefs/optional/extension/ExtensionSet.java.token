package
org
.
apache
.
tools
.
ant
.
taskdefs
.
optional
.
extension
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
types
.
DataType
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
public
class
ExtensionSet
extends
DataType
{
private
final
ArrayList
extensions
=
new
ArrayList
(
)
;
private
final
ArrayList
extensionsFilesets
=
new
ArrayList
(
)
;
public
void
addExtension
(
final
ExtensionAdapter
extensionAdapter
)
{
extensions
.
add
(
extensionAdapter
)
;
}
public
void
addLibfileset
(
final
LibFileSet
fileSet
)
{
extensionsFilesets
.
add
(
fileSet
)
;
}
public
void
addFileset
(
final
FileSet
fileSet
)
{
extensionsFilesets
.
add
(
fileSet
)
;
}
public
Extension
[
]
toExtensions
(
final
Project
proj
)
throws
BuildException
{
final
ArrayList
extensionsList
=
ExtensionUtil
.
toExtensions
(
extensions
)
;
ExtensionUtil
.
extractExtensions
(
proj
,
extensionsList
,
extensionsFilesets
)
;
return
(
Extension
[
]
)
extensionsList
.
toArray
(
new
Extension
[
extensionsList
.
size
(
)
]
)
;
}
public
void
setRefid
(
final
Reference
reference
)
throws
BuildException
{
if
(
!
extensions
.
isEmpty
(
)
||
!
extensionsFilesets
.
isEmpty
(
)
)
{
throw
tooManyAttributes
(
)
;
}
final
Object
object
=
reference
.
getReferencedObject
(
getProject
(
)
)
;
if
(
object
instanceof
ExtensionSet
)
{
final
ExtensionSet
other
=
(
ExtensionSet
)
object
;
extensions
.
addAll
(
other
.
extensions
)
;
extensionsFilesets
.
addAll
(
other
.
extensionsFilesets
)
;
}
else
{
final
String
message
=
reference
.
getRefId
(
)
+
" doesn\'t refer to a ExtensionSet"
;
throw
new
BuildException
(
message
)
;
}
super
.
setRefid
(
reference
)
;
}
public
String
toString
(
)
{
return
"ExtensionSet"
+
Arrays
.
asList
(
toExtensions
(
getProject
(
)
)
)
;
}
}
