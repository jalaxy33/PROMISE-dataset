package
org
.
apache
.
tools
.
ant
.
taskdefs
.
optional
.
junit
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
PrintWriter
;
import
java
.
io
.
StringWriter
;
import
java
.
text
.
NumberFormat
;
import
java
.
util
.
Hashtable
;
import
junit
.
framework
.
AssertionFailedError
;
import
junit
.
framework
.
Test
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
StringUtils
;
public
class
PlainJUnitResultFormatter
implements
JUnitResultFormatter
{
private
NumberFormat
nf
=
NumberFormat
.
getInstance
(
)
;
private
Hashtable
testStarts
=
new
Hashtable
(
)
;
private
OutputStream
out
;
private
StringWriter
inner
;
private
PrintWriter
wri
;
private
Hashtable
failed
=
new
Hashtable
(
)
;
private
String
systemOutput
=
null
;
private
String
systemError
=
null
;
public
PlainJUnitResultFormatter
(
)
{
inner
=
new
StringWriter
(
)
;
wri
=
new
PrintWriter
(
inner
)
;
}
public
void
setOutput
(
OutputStream
out
)
{
this
.
out
=
out
;
}
public
void
setSystemOutput
(
String
out
)
{
systemOutput
=
out
;
}
public
void
setSystemError
(
String
err
)
{
systemError
=
err
;
}
public
void
startTestSuite
(
JUnitTest
suite
)
throws
BuildException
{
if
(
out
==
null
)
{
return
;
}
StringBuffer
sb
=
new
StringBuffer
(
"Testsuite: "
)
;
sb
.
append
(
suite
.
getName
(
)
)
;
sb
.
append
(
StringUtils
.
LINE_SEP
)
;
try
{
out
.
write
(
sb
.
toString
(
)
.
getBytes
(
)
)
;
out
.
flush
(
)
;
}
catch
(
IOException
ex
)
{
throw
new
BuildException
(
"Unable to write output"
,
ex
)
;
}
}
public
void
endTestSuite
(
JUnitTest
suite
)
throws
BuildException
{
StringBuffer
sb
=
new
StringBuffer
(
"Tests run: "
)
;
sb
.
append
(
suite
.
runCount
(
)
)
;
sb
.
append
(
", Failures: "
)
;
sb
.
append
(
suite
.
failureCount
(
)
)
;
sb
.
append
(
", Errors: "
)
;
sb
.
append
(
suite
.
errorCount
(
)
)
;
sb
.
append
(
", Time elapsed: "
)
;
sb
.
append
(
nf
.
format
(
suite
.
getRunTime
(
)
/
1000.0
)
)
;
sb
.
append
(
" sec"
)
;
sb
.
append
(
StringUtils
.
LINE_SEP
)
;
if
(
systemOutput
!=
null
&&
systemOutput
.
length
(
)
>
0
)
{
sb
.
append
(
"------------- Standard Output ---------------"
)
.
append
(
StringUtils
.
LINE_SEP
)
.
append
(
systemOutput
)
.
append
(
"------------- ---------------- ---------------"
)
.
append
(
StringUtils
.
LINE_SEP
)
;
}
if
(
systemError
!=
null
&&
systemError
.
length
(
)
>
0
)
{
sb
.
append
(
"------------- Standard Error -----------------"
)
.
append
(
StringUtils
.
LINE_SEP
)
.
append
(
systemError
)
.
append
(
"------------- ---------------- ---------------"
)
.
append
(
StringUtils
.
LINE_SEP
)
;
}
sb
.
append
(
StringUtils
.
LINE_SEP
)
;
if
(
out
!=
null
)
{
try
{
out
.
write
(
sb
.
toString
(
)
.
getBytes
(
)
)
;
wri
.
close
(
)
;
out
.
write
(
inner
.
toString
(
)
.
getBytes
(
)
)
;
out
.
flush
(
)
;
}
catch
(
IOException
ioex
)
{
throw
new
BuildException
(
"Unable to write output"
,
ioex
)
;
}
finally
{
if
(
out
!=
System
.
out
&&
out
!=
System
.
err
)
{
FileUtils
.
close
(
out
)
;
}
}
}
}
public
void
startTest
(
Test
t
)
{
testStarts
.
put
(
t
,
new
Long
(
System
.
currentTimeMillis
(
)
)
)
;
failed
.
put
(
t
,
Boolean
.
FALSE
)
;
}
public
void
endTest
(
Test
test
)
{
if
(
Boolean
.
TRUE
.
equals
(
failed
.
get
(
test
)
)
)
{
return
;
}
synchronized
(
wri
)
{
wri
.
print
(
"Testcase: "
+
JUnitVersionHelper
.
getTestCaseName
(
test
)
)
;
Long
l
=
(
Long
)
testStarts
.
get
(
test
)
;
double
seconds
=
0
;
if
(
l
!=
null
)
{
seconds
=
(
System
.
currentTimeMillis
(
)
-
l
.
longValue
(
)
)
/
1000.0
;
}
wri
.
println
(
" took "
+
nf
.
format
(
seconds
)
+
" sec"
)
;
}
}
public
void
addFailure
(
Test
test
,
Throwable
t
)
{
formatError
(
"\tFAILED"
,
test
,
t
)
;
}
public
void
addFailure
(
Test
test
,
AssertionFailedError
t
)
{
addFailure
(
test
,
(
Throwable
)
t
)
;
}
public
void
addError
(
Test
test
,
Throwable
t
)
{
formatError
(
"\tCaused an ERROR"
,
test
,
t
)
;
}
private
void
formatError
(
String
type
,
Test
test
,
Throwable
t
)
{
synchronized
(
wri
)
{
if
(
test
!=
null
)
{
endTest
(
test
)
;
failed
.
put
(
test
,
Boolean
.
TRUE
)
;
}
wri
.
println
(
type
)
;
wri
.
println
(
t
.
getMessage
(
)
)
;
String
strace
=
JUnitTestRunner
.
getFilteredTrace
(
t
)
;
wri
.
print
(
strace
)
;
wri
.
println
(
""
)
;
}
}
}
