package
org
.
apache
.
tools
.
ant
.
taskdefs
.
optional
.
junit
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
FileNotFoundException
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
net
.
URL
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Vector
;
import
javax
.
xml
.
parsers
.
DocumentBuilder
;
import
javax
.
xml
.
parsers
.
DocumentBuilderFactory
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
XSLTProcess
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
Delete
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
TempFile
;
import
org
.
apache
.
tools
.
ant
.
util
.
JAXPUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
import
org
.
apache
.
tools
.
ant
.
types
.
Resource
;
import
org
.
apache
.
tools
.
ant
.
types
.
resources
.
URLResource
;
import
org
.
apache
.
tools
.
ant
.
types
.
resources
.
FileResource
;
import
org
.
w3c
.
dom
.
Document
;
public
class
AggregateTransformer
{
public
static
final
String
FRAMES
=
"frames"
;
public
static
final
String
NOFRAMES
=
"noframes"
;
public
static
class
Format
extends
EnumeratedAttribute
{
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
FRAMES
,
NOFRAMES
}
;
}
}
protected
Task
task
;
protected
Document
document
;
protected
File
styleDir
;
protected
File
toDir
;
private
List
params
;
private
static
final
FileUtils
FILE_UTILS
=
FileUtils
.
getFileUtils
(
)
;
private
static
int
counter
=
0
;
protected
String
format
=
FRAMES
;
private
static
DocumentBuilderFactory
privateDBFactory
;
protected
static
DocumentBuilderFactory
dbfactory
;
static
{
privateDBFactory
=
DocumentBuilderFactory
.
newInstance
(
)
;
dbfactory
=
privateDBFactory
;
}
public
AggregateTransformer
(
Task
task
)
{
this
.
task
=
task
;
params
=
new
Vector
(
)
;
}
protected
static
DocumentBuilderFactory
getDocumentBuilderFactory
(
)
{
return
privateDBFactory
;
}
public
void
setFormat
(
Format
format
)
{
this
.
format
=
format
.
getValue
(
)
;
}
public
void
setXmlDocument
(
Document
doc
)
{
this
.
document
=
doc
;
}
protected
void
setXmlfile
(
File
xmlfile
)
throws
BuildException
{
try
{
DocumentBuilder
builder
=
privateDBFactory
.
newDocumentBuilder
(
)
;
InputStream
in
=
new
FileInputStream
(
xmlfile
)
;
try
{
Document
doc
=
builder
.
parse
(
in
)
;
setXmlDocument
(
doc
)
;
}
finally
{
in
.
close
(
)
;
}
}
catch
(
Exception
e
)
{
throw
new
BuildException
(
"Error while parsing document: "
+
xmlfile
,
e
)
;
}
}
public
void
setStyledir
(
File
styledir
)
{
this
.
styleDir
=
styledir
;
}
public
void
setTodir
(
File
todir
)
{
this
.
toDir
=
todir
;
}
public
void
setExtension
(
String
ext
)
{
task
.
log
(
"extension is not used anymore"
,
Project
.
MSG_WARN
)
;
}
public
XSLTProcess
.
Param
createParam
(
)
{
XSLTProcess
.
Param
p
=
new
XSLTProcess
.
Param
(
)
;
params
.
add
(
p
)
;
return
p
;
}
public
void
transform
(
)
throws
BuildException
{
checkOptions
(
)
;
Project
project
=
task
.
getProject
(
)
;
TempFile
tempFileTask
=
new
TempFile
(
)
;
tempFileTask
.
bindToOwner
(
task
)
;
XSLTProcess
xsltTask
=
new
XSLTProcess
(
)
;
xsltTask
.
bindToOwner
(
task
)
;
xsltTask
.
setXslResource
(
getStylesheet
(
)
)
;
xsltTask
.
setIn
(
(
(
XMLResultAggregator
)
task
)
.
getDestinationFile
(
)
)
;
File
outputFile
=
null
;
if
(
format
.
equals
(
FRAMES
)
)
{
String
tempFileProperty
=
getClass
(
)
.
getName
(
)
+
String
.
valueOf
(
counter
++
)
;
File
tmp
=
FILE_UTILS
.
resolveFile
(
project
.
getBaseDir
(
)
,
project
.
getProperty
(
"java.io.tmpdir"
)
)
;
tempFileTask
.
setDestDir
(
tmp
)
;
tempFileTask
.
setProperty
(
tempFileProperty
)
;
tempFileTask
.
execute
(
)
;
outputFile
=
new
File
(
project
.
getProperty
(
tempFileProperty
)
)
;
}
else
{
outputFile
=
new
File
(
toDir
,
"junit-noframes.html"
)
;
}
xsltTask
.
setOut
(
outputFile
)
;
for
(
Iterator
i
=
params
.
iterator
(
)
;
i
.
hasNext
(
)
;
)
{
XSLTProcess
.
Param
param
=
(
XSLTProcess
.
Param
)
i
.
next
(
)
;
XSLTProcess
.
Param
newParam
=
xsltTask
.
createParam
(
)
;
newParam
.
setProject
(
task
.
getProject
(
)
)
;
newParam
.
setName
(
param
.
getName
(
)
)
;
newParam
.
setExpression
(
param
.
getExpression
(
)
)
;
}
XSLTProcess
.
Param
paramx
=
xsltTask
.
createParam
(
)
;
paramx
.
setProject
(
task
.
getProject
(
)
)
;
paramx
.
setName
(
"output.dir"
)
;
paramx
.
setExpression
(
toDir
.
getAbsolutePath
(
)
)
;
final
long
t0
=
System
.
currentTimeMillis
(
)
;
try
{
xsltTask
.
execute
(
)
;
}
catch
(
Exception
e
)
{
throw
new
BuildException
(
"Errors while applying transformations: "
+
e
.
getMessage
(
)
,
e
)
;
}
final
long
dt
=
System
.
currentTimeMillis
(
)
-
t0
;
task
.
log
(
"Transform time: "
+
dt
+
"ms"
)
;
if
(
format
.
equals
(
FRAMES
)
)
{
Delete
delete
=
new
Delete
(
)
;
delete
.
bindToOwner
(
task
)
;
delete
.
setFile
(
outputFile
)
;
delete
.
execute
(
)
;
}
}
protected
Resource
getStylesheet
(
)
{
String
xslname
=
"junit-frames.xsl"
;
if
(
NOFRAMES
.
equals
(
format
)
)
{
xslname
=
"junit-noframes.xsl"
;
}
if
(
styleDir
==
null
)
{
URLResource
stylesheet
=
new
URLResource
(
)
;
URL
stylesheetURL
=
getClass
(
)
.
getClassLoader
(
)
.
getResource
(
"org/apache/tools/ant/taskdefs/optional/junit/xsl/"
+
xslname
)
;
stylesheet
.
setURL
(
stylesheetURL
)
;
return
stylesheet
;
}
FileResource
stylesheet
=
new
FileResource
(
)
;
File
stylesheetFile
=
new
File
(
styleDir
,
xslname
)
;
stylesheet
.
setFile
(
stylesheetFile
)
;
return
stylesheet
;
}
protected
void
checkOptions
(
)
throws
BuildException
{
if
(
toDir
==
null
)
{
toDir
=
task
.
getProject
(
)
.
resolveFile
(
"."
)
;
}
else
if
(
!
toDir
.
isAbsolute
(
)
)
{
toDir
=
task
.
getProject
(
)
.
resolveFile
(
toDir
.
getPath
(
)
)
;
}
}
protected
String
getStylesheetSystemId
(
)
throws
IOException
{
String
xslname
=
"junit-frames.xsl"
;
if
(
NOFRAMES
.
equals
(
format
)
)
{
xslname
=
"junit-noframes.xsl"
;
}
if
(
styleDir
==
null
)
{
URL
url
=
getClass
(
)
.
getResource
(
"xsl/"
+
xslname
)
;
if
(
url
==
null
)
{
throw
new
FileNotFoundException
(
"Could not find jar resource "
+
xslname
)
;
}
return
url
.
toExternalForm
(
)
;
}
File
file
=
new
File
(
styleDir
,
xslname
)
;
if
(
!
file
.
exists
(
)
)
{
throw
new
FileNotFoundException
(
"Could not find file '"
+
file
+
"'"
)
;
}
return
JAXPUtils
.
getSystemId
(
file
)
;
}
}
