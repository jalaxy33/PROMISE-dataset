package
org
.
apache
.
tools
.
ant
.
taskdefs
.
optional
.
dotnet
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
public
class
VisualBasicCompile
extends
DotnetCompile
{
private
boolean
removeIntChecks
=
false
;
private
boolean
optionExplicit
=
false
;
private
boolean
optionStrict
=
false
;
private
String
optionCompare
;
private
String
rootNamespace
;
private
String
imports
;
public
VisualBasicCompile
(
)
{
clear
(
)
;
}
public
void
clear
(
)
{
super
.
clear
(
)
;
imports
=
null
;
rootNamespace
=
null
;
optionCompare
=
null
;
optionExplicit
=
false
;
optionStrict
=
false
;
removeIntChecks
=
false
;
setExecutable
(
"vbc"
)
;
}
protected
String
getWin32ResParameter
(
)
{
if
(
getWin32Res
(
)
!=
null
)
{
return
"/win32resource:"
+
getWin32Res
(
)
.
toString
(
)
;
}
else
{
return
null
;
}
}
public
void
setRemoveIntChecks
(
boolean
flag
)
{
removeIntChecks
=
flag
;
}
public
boolean
getRemoveIntChecks
(
)
{
return
removeIntChecks
;
}
public
String
getRemoveIntChecksParameter
(
)
{
return
"/removeintchecks"
+
(
removeIntChecks
?
"+"
:
"-"
)
;
}
public
void
setOptionExplicit
(
boolean
flag
)
{
optionExplicit
=
flag
;
}
public
boolean
getOptionExplicit
(
)
{
return
optionExplicit
;
}
public
String
getOptionExplicitParameter
(
)
{
return
"/optionexplicit"
+
(
optionExplicit
?
"+"
:
"-"
)
;
}
public
void
setOptionStrict
(
boolean
flag
)
{
optionStrict
=
flag
;
}
public
boolean
getOptionStrict
(
)
{
return
optionStrict
;
}
public
String
getOptionStrictParameter
(
)
{
return
"/optionstrict"
+
(
optionStrict
?
"+"
:
"-"
)
;
}
public
void
setRootNamespace
(
String
rootNamespace
)
{
this
.
rootNamespace
=
rootNamespace
;
}
public
String
getRootNamespace
(
)
{
return
this
.
rootNamespace
;
}
protected
String
getRootNamespaceParameter
(
)
{
if
(
rootNamespace
!=
null
&&
rootNamespace
.
length
(
)
!=
0
)
{
return
"/rootnamespace:"
+
rootNamespace
;
}
else
{
return
null
;
}
}
public
void
setImports
(
String
imports
)
{
this
.
imports
=
imports
;
}
public
String
getImports
(
)
{
return
this
.
imports
;
}
protected
String
getImportsParameter
(
)
{
if
(
imports
!=
null
&&
imports
.
length
(
)
!=
0
)
{
return
"/imports:"
+
imports
;
}
else
{
return
null
;
}
}
public
void
setOptionCompare
(
String
optionCompare
)
{
if
(
"text"
.
equalsIgnoreCase
(
optionCompare
)
)
{
this
.
optionCompare
=
"text"
;
}
else
{
this
.
optionCompare
=
"binary"
;
}
}
public
String
getOptionCompare
(
)
{
return
this
.
optionCompare
;
}
protected
String
getOptionCompareParameter
(
)
{
if
(
optionCompare
!=
null
&&
"text"
.
equalsIgnoreCase
(
optionCompare
)
)
{
return
"/optioncompare:text"
;
}
else
{
return
"/optioncompare:binary"
;
}
}
protected
void
addCompilerSpecificOptions
(
NetCommand
command
)
{
command
.
addArgument
(
getRemoveIntChecksParameter
(
)
)
;
command
.
addArgument
(
getImportsParameter
(
)
)
;
command
.
addArgument
(
getOptionExplicitParameter
(
)
)
;
command
.
addArgument
(
getOptionStrictParameter
(
)
)
;
command
.
addArgument
(
getRootNamespaceParameter
(
)
)
;
command
.
addArgument
(
getOptionCompareParameter
(
)
)
;
}
public
String
getReferenceDelimiter
(
)
{
return
","
;
}
public
String
getFileExtension
(
)
{
return
"vb"
;
}
protected
void
createResourceParameter
(
NetCommand
command
,
DotnetResource
resource
)
{
resource
.
getParameters
(
getProject
(
)
,
command
,
false
)
;
}
protected
void
validate
(
)
throws
BuildException
{
super
.
validate
(
)
;
if
(
getDestFile
(
)
==
null
)
{
throw
new
BuildException
(
"DestFile was not specified"
)
;
}
}
}
