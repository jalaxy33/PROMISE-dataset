package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
compilers
.
AptExternalCompilerAdapter
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
import
org
.
apache
.
tools
.
ant
.
util
.
JavaEnvUtils
;
import
java
.
util
.
Vector
;
import
java
.
io
.
File
;
public
class
Apt
extends
Javac
{
private
boolean
compile
=
true
;
private
String
factory
;
private
Path
factoryPath
;
private
Vector
options
=
new
Vector
(
)
;
private
File
preprocessDir
;
public
static
final
String
EXECUTABLE_NAME
=
"apt"
;
public
static
final
String
ERROR_IGNORING_COMPILER_OPTION
=
"Ignoring compiler attribute for the APT task, as it is fixed"
;
public
static
final
String
ERROR_WRONG_JAVA_VERSION
=
"Apt task requires Java 1.5+"
;
public
static
final
String
WARNING_IGNORING_FORK
=
"Apt only runs in its own JVM; fork=false option ignored"
;
public
static
final
class
Option
{
private
String
name
;
private
String
value
;
public
Option
(
)
{
}
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
public
String
getValue
(
)
{
return
value
;
}
public
void
setValue
(
String
value
)
{
this
.
value
=
value
;
}
}
public
Apt
(
)
{
super
(
)
;
super
.
setCompiler
(
AptExternalCompilerAdapter
.
class
.
getName
(
)
)
;
setFork
(
true
)
;
}
public
String
getAptExecutable
(
)
{
return
JavaEnvUtils
.
getJdkExecutable
(
EXECUTABLE_NAME
)
;
}
public
void
setCompiler
(
String
compiler
)
{
log
(
ERROR_IGNORING_COMPILER_OPTION
,
Project
.
MSG_WARN
)
;
}
public
void
setFork
(
boolean
fork
)
{
if
(
!
fork
)
{
log
(
WARNING_IGNORING_FORK
,
Project
.
MSG_WARN
)
;
}
}
public
String
getCompiler
(
)
{
return
super
.
getCompiler
(
)
;
}
public
boolean
isCompile
(
)
{
return
compile
;
}
public
void
setCompile
(
boolean
compile
)
{
this
.
compile
=
compile
;
}
public
String
getFactory
(
)
{
return
factory
;
}
public
void
setFactory
(
String
factory
)
{
this
.
factory
=
factory
;
}
public
void
setFactoryPathRef
(
Reference
ref
)
{
createFactoryPath
(
)
.
setRefid
(
ref
)
;
}
public
Path
createFactoryPath
(
)
{
if
(
factoryPath
==
null
)
{
factoryPath
=
new
Path
(
getProject
(
)
)
;
}
return
factoryPath
.
createPath
(
)
;
}
public
Path
getFactoryPath
(
)
{
return
factoryPath
;
}
public
Option
createOption
(
)
{
Option
opt
=
new
Option
(
)
;
options
.
add
(
opt
)
;
return
opt
;
}
public
Vector
getOptions
(
)
{
return
options
;
}
public
File
getPreprocessDir
(
)
{
return
preprocessDir
;
}
public
void
setPreprocessDir
(
File
preprocessDir
)
{
this
.
preprocessDir
=
preprocessDir
;
}
public
void
execute
(
)
throws
BuildException
{
super
.
execute
(
)
;
}
}
