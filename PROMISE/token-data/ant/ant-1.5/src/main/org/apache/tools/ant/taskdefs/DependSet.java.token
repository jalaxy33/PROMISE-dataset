package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Date
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
condition
.
Os
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileList
;
public
class
DependSet
extends
MatchingTask
{
private
Vector
sourceFileSets
=
new
Vector
(
)
;
private
Vector
sourceFileLists
=
new
Vector
(
)
;
private
Vector
targetFileSets
=
new
Vector
(
)
;
private
Vector
targetFileLists
=
new
Vector
(
)
;
public
DependSet
(
)
{
}
public
void
addSrcfileset
(
FileSet
fs
)
{
sourceFileSets
.
addElement
(
fs
)
;
}
public
void
addSrcfilelist
(
FileList
fl
)
{
sourceFileLists
.
addElement
(
fl
)
;
}
public
void
addTargetfileset
(
FileSet
fs
)
{
targetFileSets
.
addElement
(
fs
)
;
}
public
void
addTargetfilelist
(
FileList
fl
)
{
targetFileLists
.
addElement
(
fl
)
;
}
public
void
execute
(
)
throws
BuildException
{
if
(
(
sourceFileSets
.
size
(
)
==
0
)
&&
(
sourceFileLists
.
size
(
)
==
0
)
)
{
throw
new
BuildException
(
"At least one <srcfileset> or <srcfilelist>"
+
" element must be set"
)
;
}
if
(
(
targetFileSets
.
size
(
)
==
0
)
&&
(
targetFileLists
.
size
(
)
==
0
)
)
{
throw
new
BuildException
(
"At least one <targetfileset> or"
+
" <targetfilelist> element must be set"
)
;
}
long
now
=
(
new
Date
(
)
)
.
getTime
(
)
;
if
(
Os
.
isFamily
(
"windows"
)
)
{
now
+=
2000
;
}
Vector
allTargets
=
new
Vector
(
)
;
long
oldestTargetTime
=
0
;
File
oldestTarget
=
null
;
Enumeration
enumTargetSets
=
targetFileSets
.
elements
(
)
;
while
(
enumTargetSets
.
hasMoreElements
(
)
)
{
FileSet
targetFS
=
(
FileSet
)
enumTargetSets
.
nextElement
(
)
;
if
(
!
targetFS
.
getDir
(
getProject
(
)
)
.
exists
(
)
)
{
continue
;
}
DirectoryScanner
targetDS
=
targetFS
.
getDirectoryScanner
(
project
)
;
String
[
]
targetFiles
=
targetDS
.
getIncludedFiles
(
)
;
for
(
int
i
=
0
;
i
<
targetFiles
.
length
;
i
++
)
{
File
dest
=
new
File
(
targetFS
.
getDir
(
project
)
,
targetFiles
[
i
]
)
;
allTargets
.
addElement
(
dest
)
;
if
(
dest
.
lastModified
(
)
>
now
)
{
log
(
"Warning: "
+
targetFiles
[
i
]
+
" modified in the future."
,
Project
.
MSG_WARN
)
;
}
if
(
oldestTarget
==
null
||
dest
.
lastModified
(
)
<
oldestTargetTime
)
{
oldestTargetTime
=
dest
.
lastModified
(
)
;
oldestTarget
=
dest
;
}
}
}
boolean
upToDate
=
true
;
Enumeration
enumTargetLists
=
targetFileLists
.
elements
(
)
;
while
(
enumTargetLists
.
hasMoreElements
(
)
)
{
FileList
targetFL
=
(
FileList
)
enumTargetLists
.
nextElement
(
)
;
String
[
]
targetFiles
=
targetFL
.
getFiles
(
project
)
;
for
(
int
i
=
0
;
i
<
targetFiles
.
length
;
i
++
)
{
File
dest
=
new
File
(
targetFL
.
getDir
(
project
)
,
targetFiles
[
i
]
)
;
if
(
!
dest
.
exists
(
)
)
{
log
(
targetFiles
[
i
]
+
" does not exist."
,
Project
.
MSG_VERBOSE
)
;
upToDate
=
false
;
continue
;
}
else
{
allTargets
.
addElement
(
dest
)
;
}
if
(
dest
.
lastModified
(
)
>
now
)
{
log
(
"Warning: "
+
targetFiles
[
i
]
+
" modified in the future."
,
Project
.
MSG_WARN
)
;
}
if
(
oldestTarget
==
null
||
dest
.
lastModified
(
)
<
oldestTargetTime
)
{
oldestTargetTime
=
dest
.
lastModified
(
)
;
oldestTarget
=
dest
;
}
}
}
if
(
oldestTarget
!=
null
)
{
log
(
oldestTarget
+
" is oldest target file"
,
Project
.
MSG_VERBOSE
)
;
}
else
{
upToDate
=
false
;
}
if
(
upToDate
)
{
Enumeration
enumSourceLists
=
sourceFileLists
.
elements
(
)
;
while
(
upToDate
&&
enumSourceLists
.
hasMoreElements
(
)
)
{
FileList
sourceFL
=
(
FileList
)
enumSourceLists
.
nextElement
(
)
;
String
[
]
sourceFiles
=
sourceFL
.
getFiles
(
project
)
;
for
(
int
i
=
0
;
upToDate
&&
i
<
sourceFiles
.
length
;
i
++
)
{
File
src
=
new
File
(
sourceFL
.
getDir
(
project
)
,
sourceFiles
[
i
]
)
;
if
(
src
.
lastModified
(
)
>
now
)
{
log
(
"Warning: "
+
sourceFiles
[
i
]
+
" modified in the future."
,
Project
.
MSG_WARN
)
;
}
if
(
!
src
.
exists
(
)
)
{
log
(
sourceFiles
[
i
]
+
" does not exist."
,
Project
.
MSG_VERBOSE
)
;
upToDate
=
false
;
break
;
}
if
(
src
.
lastModified
(
)
>
oldestTargetTime
)
{
upToDate
=
false
;
log
(
oldestTarget
+
" is out of date with respect to "
+
sourceFiles
[
i
]
,
Project
.
MSG_VERBOSE
)
;
}
}
}
}
if
(
upToDate
)
{
Enumeration
enumSourceSets
=
sourceFileSets
.
elements
(
)
;
while
(
upToDate
&&
enumSourceSets
.
hasMoreElements
(
)
)
{
FileSet
sourceFS
=
(
FileSet
)
enumSourceSets
.
nextElement
(
)
;
DirectoryScanner
sourceDS
=
sourceFS
.
getDirectoryScanner
(
project
)
;
String
[
]
sourceFiles
=
sourceDS
.
getIncludedFiles
(
)
;
for
(
int
i
=
0
;
upToDate
&&
i
<
sourceFiles
.
length
;
i
++
)
{
File
src
=
new
File
(
sourceFS
.
getDir
(
project
)
,
sourceFiles
[
i
]
)
;
if
(
src
.
lastModified
(
)
>
now
)
{
log
(
"Warning: "
+
sourceFiles
[
i
]
+
" modified in the future."
,
Project
.
MSG_WARN
)
;
}
if
(
src
.
lastModified
(
)
>
oldestTargetTime
)
{
upToDate
=
false
;
log
(
oldestTarget
+
" is out of date with respect to "
+
sourceFiles
[
i
]
,
Project
.
MSG_VERBOSE
)
;
}
}
}
}
if
(
!
upToDate
)
{
log
(
"Deleting all target files. "
,
Project
.
MSG_VERBOSE
)
;
for
(
Enumeration
e
=
allTargets
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
File
fileToRemove
=
(
File
)
e
.
nextElement
(
)
;
log
(
"Deleting file "
+
fileToRemove
.
getAbsolutePath
(
)
,
Project
.
MSG_VERBOSE
)
;
fileToRemove
.
delete
(
)
;
}
}
}
}
