package
org
.
apache
.
tools
.
ant
.
util
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
java
.
lang
.
reflect
.
Method
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
public
class
LoaderUtils
{
private
static
Method
getContextClassLoader
;
private
static
Method
setContextClassLoader
;
static
{
try
{
getContextClassLoader
=
Thread
.
class
.
getMethod
(
"getContextClassLoader"
,
new
Class
[
0
]
)
;
Class
[
]
setContextArgs
=
new
Class
[
]
{
ClassLoader
.
class
}
;
setContextClassLoader
=
Thread
.
class
.
getMethod
(
"setContextClassLoader"
,
setContextArgs
)
;
}
catch
(
Exception
e
)
{
}
}
public
static
void
setContextClassLoader
(
ClassLoader
loader
)
{
if
(
setContextClassLoader
==
null
)
{
return
;
}
try
{
Thread
currentThread
=
Thread
.
currentThread
(
)
;
setContextClassLoader
.
invoke
(
currentThread
,
new
Object
[
]
{
loader
}
)
;
}
catch
(
IllegalAccessException
e
)
{
throw
new
BuildException
(
"Unexpected IllegalAccessException"
,
e
)
;
}
catch
(
InvocationTargetException
e
)
{
throw
new
BuildException
(
"Unexpected InvocationTargetException"
,
e
)
;
}
}
public
static
ClassLoader
getContextClassLoader
(
)
{
if
(
getContextClassLoader
==
null
)
{
return
null
;
}
try
{
Thread
currentThread
=
Thread
.
currentThread
(
)
;
return
(
ClassLoader
)
getContextClassLoader
.
invoke
(
currentThread
,
new
Object
[
0
]
)
;
}
catch
(
IllegalAccessException
e
)
{
throw
new
BuildException
(
"Unexpected IllegalAccessException"
,
e
)
;
}
catch
(
InvocationTargetException
e
)
{
throw
new
BuildException
(
"Unexpected InvocationTargetException"
,
e
)
;
}
}
public
static
boolean
isContextLoaderAvailable
(
)
{
return
getContextClassLoader
!=
null
&&
setContextClassLoader
!=
null
;
}
}
