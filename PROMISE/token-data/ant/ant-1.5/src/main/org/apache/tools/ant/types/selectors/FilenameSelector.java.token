package
org
.
apache
.
tools
.
ant
.
types
.
selectors
;
import
java
.
io
.
File
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
types
.
Parameter
;
public
class
FilenameSelector
extends
BaseExtendSelector
{
private
String
pattern
=
null
;
private
boolean
casesensitive
=
true
;
private
boolean
negated
=
false
;
public
final
static
String
NAME_KEY
=
"name"
;
public
final
static
String
CASE_KEY
=
"casesensitive"
;
public
final
static
String
NEGATE_KEY
=
"negate"
;
public
FilenameSelector
(
)
{
}
public
String
toString
(
)
{
StringBuffer
buf
=
new
StringBuffer
(
"{filenameselector name: "
)
;
buf
.
append
(
pattern
)
;
buf
.
append
(
" negate: "
)
;
if
(
negated
)
{
buf
.
append
(
"true"
)
;
}
else
{
buf
.
append
(
"false"
)
;
}
buf
.
append
(
" casesensitive: "
)
;
if
(
casesensitive
)
{
buf
.
append
(
"true"
)
;
}
else
{
buf
.
append
(
"false"
)
;
}
buf
.
append
(
"}"
)
;
return
buf
.
toString
(
)
;
}
public
void
setName
(
String
pattern
)
{
pattern
=
pattern
.
replace
(
'/'
,
File
.
separatorChar
)
.
replace
(
'\\'
,
File
.
separatorChar
)
;
if
(
pattern
.
endsWith
(
File
.
separator
)
)
{
pattern
+=
"**"
;
}
this
.
pattern
=
pattern
;
}
public
void
setCasesensitive
(
boolean
casesensitive
)
{
this
.
casesensitive
=
casesensitive
;
}
public
void
setNegate
(
boolean
negated
)
{
this
.
negated
=
negated
;
}
public
void
setParameters
(
Parameter
[
]
parameters
)
{
super
.
setParameters
(
parameters
)
;
if
(
parameters
!=
null
)
{
for
(
int
i
=
0
;
i
<
parameters
.
length
;
i
++
)
{
String
paramname
=
parameters
[
i
]
.
getName
(
)
;
if
(
NAME_KEY
.
equalsIgnoreCase
(
paramname
)
)
{
setName
(
parameters
[
i
]
.
getValue
(
)
)
;
}
else
if
(
CASE_KEY
.
equalsIgnoreCase
(
paramname
)
)
{
setCasesensitive
(
Project
.
toBoolean
(
parameters
[
i
]
.
getValue
(
)
)
)
;
}
else
if
(
NEGATE_KEY
.
equalsIgnoreCase
(
paramname
)
)
{
setNegate
(
Project
.
toBoolean
(
parameters
[
i
]
.
getValue
(
)
)
)
;
}
else
{
setError
(
"Invalid parameter "
+
paramname
)
;
}
}
}
}
public
void
verifySettings
(
)
{
if
(
pattern
==
null
)
{
setError
(
"The name attribute is required"
)
;
}
}
public
boolean
isSelected
(
File
basedir
,
String
filename
,
File
file
)
{
validate
(
)
;
return
(
SelectorUtils
.
matchPath
(
pattern
,
filename
,
casesensitive
)
==
!
(
negated
)
)
;
}
}
