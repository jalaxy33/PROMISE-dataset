package
org
.
apache
.
tools
.
ant
.
types
.
selectors
;
import
java
.
io
.
File
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
types
.
Mapper
;
import
org
.
apache
.
tools
.
ant
.
util
.
IdentityMapper
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileNameMapper
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
condition
.
Os
;
public
class
DependSelector
extends
BaseSelector
{
private
File
targetdir
=
null
;
private
Mapper
mapperElement
=
null
;
private
FileNameMapper
map
=
null
;
private
int
granularity
=
0
;
public
DependSelector
(
)
{
if
(
Os
.
isFamily
(
"dos"
)
)
{
granularity
=
2000
;
}
}
public
String
toString
(
)
{
StringBuffer
buf
=
new
StringBuffer
(
"{dependselector targetdir: "
)
;
if
(
targetdir
==
null
)
{
buf
.
append
(
"NOT YET SET"
)
;
}
else
{
buf
.
append
(
targetdir
.
getName
(
)
)
;
}
buf
.
append
(
" granularity: "
)
;
buf
.
append
(
granularity
)
;
if
(
map
!=
null
)
{
buf
.
append
(
" mapper: "
)
;
buf
.
append
(
map
.
toString
(
)
)
;
}
else
if
(
mapperElement
!=
null
)
{
buf
.
append
(
" mapper: "
)
;
buf
.
append
(
mapperElement
.
toString
(
)
)
;
}
buf
.
append
(
"}"
)
;
return
buf
.
toString
(
)
;
}
public
void
setTargetdir
(
File
targetdir
)
{
this
.
targetdir
=
targetdir
;
}
public
void
setGranularity
(
int
granularity
)
{
this
.
granularity
=
granularity
;
}
public
Mapper
createMapper
(
)
throws
BuildException
{
if
(
mapperElement
!=
null
)
{
throw
new
BuildException
(
"Cannot define more than one mapper"
)
;
}
mapperElement
=
new
Mapper
(
project
)
;
return
mapperElement
;
}
public
void
verifySettings
(
)
{
if
(
targetdir
==
null
)
{
setError
(
"The targetdir attribute is required."
)
;
}
if
(
mapperElement
==
null
)
{
map
=
new
IdentityMapper
(
)
;
}
else
{
map
=
mapperElement
.
getImplementation
(
)
;
}
if
(
map
==
null
)
{
setError
(
"Could not set <mapper> element."
)
;
}
}
public
boolean
isSelected
(
File
basedir
,
String
filename
,
File
file
)
{
validate
(
)
;
String
[
]
destfiles
=
map
.
mapFileName
(
filename
)
;
if
(
destfiles
==
null
)
{
return
false
;
}
if
(
destfiles
.
length
!=
1
||
destfiles
[
0
]
==
null
)
{
throw
new
BuildException
(
"Invalid destination file results for "
+
targetdir
.
getName
(
)
+
" with filename "
+
filename
)
;
}
String
destname
=
destfiles
[
0
]
;
File
destfile
=
new
File
(
targetdir
,
destname
)
;
return
SelectorUtils
.
isOutOfDate
(
file
,
destfile
,
granularity
)
;
}
}
