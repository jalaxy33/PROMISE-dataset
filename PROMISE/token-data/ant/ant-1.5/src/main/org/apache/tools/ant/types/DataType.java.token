package
org
.
apache
.
tools
.
ant
.
types
;
import
java
.
util
.
Stack
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
ProjectComponent
;
public
abstract
class
DataType
extends
ProjectComponent
{
protected
String
description
=
null
;
protected
Reference
ref
=
null
;
protected
boolean
checked
=
true
;
public
void
setDescription
(
String
desc
)
{
description
=
desc
;
}
public
String
getDescription
(
)
{
return
description
;
}
public
boolean
isReference
(
)
{
return
ref
!=
null
;
}
public
void
setRefid
(
Reference
ref
)
{
this
.
ref
=
ref
;
checked
=
false
;
}
protected
void
dieOnCircularReference
(
Stack
stk
,
Project
p
)
throws
BuildException
{
if
(
checked
||
!
isReference
(
)
)
{
return
;
}
Object
o
=
ref
.
getReferencedObject
(
p
)
;
if
(
o
instanceof
DataType
)
{
if
(
stk
.
contains
(
o
)
)
{
throw
circularReference
(
)
;
}
else
{
stk
.
push
(
o
)
;
(
(
DataType
)
o
)
.
dieOnCircularReference
(
stk
,
p
)
;
stk
.
pop
(
)
;
}
}
checked
=
true
;
}
protected
Object
getCheckedRef
(
Class
requiredClass
,
String
dataTypeName
)
{
if
(
!
checked
)
{
Stack
stk
=
new
Stack
(
)
;
stk
.
push
(
this
)
;
dieOnCircularReference
(
stk
,
getProject
(
)
)
;
}
Object
o
=
ref
.
getReferencedObject
(
getProject
(
)
)
;
if
(
!
(
requiredClass
.
isAssignableFrom
(
o
.
getClass
(
)
)
)
)
{
String
msg
=
ref
.
getRefId
(
)
+
" doesn\'t denote a "
+
dataTypeName
;
throw
new
BuildException
(
msg
)
;
}
else
{
return
o
;
}
}
protected
BuildException
tooManyAttributes
(
)
{
return
new
BuildException
(
"You must not specify more than one "
+
"attribute when using refid"
)
;
}
protected
BuildException
noChildrenAllowed
(
)
{
return
new
BuildException
(
"You must not specify nested elements "
+
"when using refid"
)
;
}
protected
BuildException
circularReference
(
)
{
return
new
BuildException
(
"This data type contains a circular "
+
"reference."
)
;
}
}
