package
org
.
apache
.
tools
.
ant
;
import
java
.
io
.
File
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
InputStreamReader
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Locale
;
import
org
.
xml
.
sax
.
AttributeList
;
import
org
.
apache
.
tools
.
ant
.
helper
.
ProjectHelperImpl
;
import
org
.
apache
.
tools
.
ant
.
util
.
LoaderUtils
;
public
class
ProjectHelper
{
public
static
final
String
HELPER_PROPERTY
=
"org.apache.tools.ant.ProjectHelper"
;
public
static
final
String
SERVICE_ID
=
"META-INF/services/org.apache.tools.ant.ProjectHelper"
;
public
static
void
configureProject
(
Project
project
,
File
buildFile
)
throws
BuildException
{
ProjectHelper
helper
=
ProjectHelper
.
getProjectHelper
(
)
;
helper
.
parse
(
project
,
buildFile
)
;
}
public
ProjectHelper
(
)
{
}
public
void
parse
(
Project
project
,
Object
source
)
throws
BuildException
{
throw
new
BuildException
(
"ProjectHelper.parse() must be implemented "
+
"in a helper plugin "
+
this
.
getClass
(
)
.
getName
(
)
)
;
}
public
static
ProjectHelper
getProjectHelper
(
)
throws
BuildException
{
ProjectHelper
helper
=
null
;
String
helperClass
=
System
.
getProperty
(
HELPER_PROPERTY
)
;
try
{
if
(
helperClass
!=
null
)
{
helper
=
newHelper
(
helperClass
)
;
}
}
catch
(
SecurityException
e
)
{
System
.
out
.
println
(
"Unable to load ProjectHelper class \""
+
helperClass
+
" specified in system property "
+
HELPER_PROPERTY
)
;
}
if
(
helper
==
null
)
{
try
{
ClassLoader
classLoader
=
getContextClassLoader
(
)
;
InputStream
is
=
null
;
if
(
classLoader
!=
null
)
{
is
=
classLoader
.
getResourceAsStream
(
SERVICE_ID
)
;
}
if
(
is
==
null
)
{
is
=
ClassLoader
.
getSystemResourceAsStream
(
SERVICE_ID
)
;
}
if
(
is
!=
null
)
{
InputStreamReader
isr
;
try
{
isr
=
new
InputStreamReader
(
is
,
"UTF-8"
)
;
}
catch
(
java
.
io
.
UnsupportedEncodingException
e
)
{
isr
=
new
InputStreamReader
(
is
)
;
}
BufferedReader
rd
=
new
BufferedReader
(
isr
)
;
String
helperClassName
=
rd
.
readLine
(
)
;
rd
.
close
(
)
;
if
(
helperClassName
!=
null
&&
!
""
.
equals
(
helperClassName
)
)
{
helper
=
newHelper
(
helperClassName
)
;
}
}
}
catch
(
Exception
ex
)
{
System
.
out
.
println
(
"Unable to load ProjectHelper "
+
"from service \""
+
SERVICE_ID
)
;
}
}
if
(
helper
!=
null
)
{
return
helper
;
}
else
{
try
{
return
new
ProjectHelperImpl
(
)
;
}
catch
(
Throwable
e
)
{
String
message
=
"Unable to load default ProjectHelper due to "
+
e
.
getClass
(
)
.
getName
(
)
+
": "
+
e
.
getMessage
(
)
;
throw
new
BuildException
(
message
,
e
)
;
}
}
}
private
static
ProjectHelper
newHelper
(
String
helperClass
)
throws
BuildException
{
ClassLoader
classLoader
=
getContextClassLoader
(
)
;
try
{
Class
clazz
=
null
;
if
(
classLoader
!=
null
)
{
try
{
clazz
=
classLoader
.
loadClass
(
helperClass
)
;
}
catch
(
ClassNotFoundException
ex
)
{
}
}
if
(
clazz
==
null
)
{
clazz
=
Class
.
forName
(
helperClass
)
;
}
return
(
(
ProjectHelper
)
clazz
.
newInstance
(
)
)
;
}
catch
(
Exception
e
)
{
throw
new
BuildException
(
e
)
;
}
}
public
static
ClassLoader
getContextClassLoader
(
)
{
if
(
!
LoaderUtils
.
isContextLoaderAvailable
(
)
)
{
return
null
;
}
return
LoaderUtils
.
getContextClassLoader
(
)
;
}
public
static
void
configure
(
Object
target
,
AttributeList
attrs
,
Project
project
)
throws
BuildException
{
if
(
target
instanceof
TaskAdapter
)
{
target
=
(
(
TaskAdapter
)
target
)
.
getProxy
(
)
;
}
IntrospectionHelper
ih
=
IntrospectionHelper
.
getHelper
(
target
.
getClass
(
)
)
;
project
.
addBuildListener
(
ih
)
;
for
(
int
i
=
0
;
i
<
attrs
.
getLength
(
)
;
i
++
)
{
String
value
=
replaceProperties
(
project
,
attrs
.
getValue
(
i
)
,
project
.
getProperties
(
)
)
;
try
{
ih
.
setAttribute
(
project
,
target
,
attrs
.
getName
(
i
)
.
toLowerCase
(
Locale
.
US
)
,
value
)
;
}
catch
(
BuildException
be
)
{
if
(
!
attrs
.
getName
(
i
)
.
equals
(
"id"
)
)
{
throw
be
;
}
}
}
}
public
static
void
addText
(
Project
project
,
Object
target
,
char
[
]
buf
,
int
start
,
int
count
)
throws
BuildException
{
addText
(
project
,
target
,
new
String
(
buf
,
start
,
count
)
)
;
}
public
static
void
addText
(
Project
project
,
Object
target
,
String
text
)
throws
BuildException
{
if
(
text
==
null
)
{
return
;
}
if
(
target
instanceof
TaskAdapter
)
{
target
=
(
(
TaskAdapter
)
target
)
.
getProxy
(
)
;
}
IntrospectionHelper
.
getHelper
(
target
.
getClass
(
)
)
.
addText
(
project
,
target
,
text
)
;
}
public
static
void
storeChild
(
Project
project
,
Object
parent
,
Object
child
,
String
tag
)
{
IntrospectionHelper
ih
=
IntrospectionHelper
.
getHelper
(
parent
.
getClass
(
)
)
;
ih
.
storeElement
(
project
,
parent
,
child
,
tag
)
;
}
public
static
String
replaceProperties
(
Project
project
,
String
value
)
throws
BuildException
{
return
project
.
replaceProperties
(
value
)
;
}
public
static
String
replaceProperties
(
Project
project
,
String
value
,
Hashtable
keys
)
throws
BuildException
{
if
(
value
==
null
)
{
return
null
;
}
Vector
fragments
=
new
Vector
(
)
;
Vector
propertyRefs
=
new
Vector
(
)
;
parsePropertyString
(
value
,
fragments
,
propertyRefs
)
;
StringBuffer
sb
=
new
StringBuffer
(
)
;
Enumeration
i
=
fragments
.
elements
(
)
;
Enumeration
j
=
propertyRefs
.
elements
(
)
;
while
(
i
.
hasMoreElements
(
)
)
{
String
fragment
=
(
String
)
i
.
nextElement
(
)
;
if
(
fragment
==
null
)
{
String
propertyName
=
(
String
)
j
.
nextElement
(
)
;
if
(
!
keys
.
containsKey
(
propertyName
)
)
{
project
.
log
(
"Property ${"
+
propertyName
+
"} has not been set"
,
Project
.
MSG_VERBOSE
)
;
}
fragment
=
(
keys
.
containsKey
(
propertyName
)
)
?
(
String
)
keys
.
get
(
propertyName
)
:
"${"
+
propertyName
+
"}"
;
}
sb
.
append
(
fragment
)
;
}
return
sb
.
toString
(
)
;
}
public
static
void
parsePropertyString
(
String
value
,
Vector
fragments
,
Vector
propertyRefs
)
throws
BuildException
{
int
prev
=
0
;
int
pos
;
while
(
(
pos
=
value
.
indexOf
(
"$"
,
prev
)
)
>=
0
)
{
if
(
pos
>
0
)
{
fragments
.
addElement
(
value
.
substring
(
prev
,
pos
)
)
;
}
if
(
pos
==
(
value
.
length
(
)
-
1
)
)
{
fragments
.
addElement
(
"$"
)
;
prev
=
pos
+
1
;
}
else
if
(
value
.
charAt
(
pos
+
1
)
!=
'{'
)
{
if
(
value
.
charAt
(
pos
+
1
)
==
'$'
)
{
fragments
.
addElement
(
"$"
)
;
prev
=
pos
+
2
;
}
else
{
fragments
.
addElement
(
value
.
substring
(
pos
,
pos
+
2
)
)
;
prev
=
pos
+
2
;
}
}
else
{
int
endName
=
value
.
indexOf
(
'}'
,
pos
)
;
if
(
endName
<
0
)
{
throw
new
BuildException
(
"Syntax error in property: "
+
value
)
;
}
String
propertyName
=
value
.
substring
(
pos
+
2
,
endName
)
;
fragments
.
addElement
(
null
)
;
propertyRefs
.
addElement
(
propertyName
)
;
prev
=
endName
+
1
;
}
}
if
(
prev
<
value
.
length
(
)
)
{
fragments
.
addElement
(
value
.
substring
(
prev
)
)
;
}
}
}
