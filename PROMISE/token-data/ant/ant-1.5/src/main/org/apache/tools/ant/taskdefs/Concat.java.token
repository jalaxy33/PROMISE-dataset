package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
ProjectHelper
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileList
;
import
org
.
apache
.
tools
.
ant
.
util
.
StringUtils
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
FileWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
io
.
PrintWriter
;
import
java
.
io
.
StringReader
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Enumeration
;
public
class
Concat
extends
Task
{
private
File
destinationFile
=
null
;
private
boolean
append
=
false
;
private
String
encoding
=
null
;
private
StringBuffer
textBuffer
;
private
Vector
fileSets
=
new
Vector
(
)
;
public
Concat
(
)
{
}
public
void
setDestfile
(
File
destinationFile
)
{
this
.
destinationFile
=
destinationFile
;
}
public
void
setAppend
(
boolean
append
)
{
this
.
append
=
append
;
}
public
void
setEncoding
(
String
encoding
)
{
this
.
encoding
=
encoding
;
}
public
void
addFileset
(
FileSet
set
)
{
fileSets
.
addElement
(
set
)
;
}
public
void
addFilelist
(
FileList
list
)
{
fileSets
.
addElement
(
list
)
;
}
public
void
addText
(
String
text
)
{
if
(
textBuffer
==
null
)
{
textBuffer
=
new
StringBuffer
(
text
.
length
(
)
)
;
}
textBuffer
.
append
(
text
)
;
}
public
void
execute
(
)
throws
BuildException
{
sanitizeText
(
)
;
if
(
fileSets
.
size
(
)
==
0
&&
textBuffer
==
null
)
{
throw
new
BuildException
(
"At least one file "
+
"must be provided, or "
+
"some text."
)
;
}
if
(
fileSets
.
size
(
)
>
0
&&
textBuffer
!=
null
)
{
throw
new
BuildException
(
"Cannot include inline text "
+
"when using filesets."
)
;
}
boolean
savedAppend
=
append
;
try
{
for
(
Enumeration
e
=
fileSets
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
File
fileSetBase
=
null
;
String
[
]
srcFiles
=
null
;
Object
next
=
e
.
nextElement
(
)
;
if
(
next
instanceof
FileSet
)
{
FileSet
fileSet
=
(
FileSet
)
next
;
DirectoryScanner
scanner
=
fileSet
.
getDirectoryScanner
(
project
)
;
fileSetBase
=
fileSet
.
getDir
(
project
)
;
srcFiles
=
scanner
.
getIncludedFiles
(
)
;
}
else
if
(
next
instanceof
FileList
)
{
FileList
fileList
=
(
FileList
)
next
;
fileSetBase
=
fileList
.
getDir
(
project
)
;
srcFiles
=
fileList
.
getFiles
(
project
)
;
}
if
(
srcFiles
!=
null
)
{
catFiles
(
fileSetBase
,
srcFiles
)
;
}
}
}
finally
{
append
=
savedAppend
;
}
catText
(
)
;
}
public
void
reset
(
)
{
append
=
false
;
destinationFile
=
null
;
encoding
=
null
;
fileSets
=
new
Vector
(
)
;
}
private
void
catFiles
(
File
base
,
String
[
]
files
)
{
final
int
len
=
files
.
length
;
String
[
]
input
=
new
String
[
len
]
;
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
File
current
=
new
File
(
base
,
files
[
i
]
)
;
if
(
!
current
.
exists
(
)
)
{
log
(
"File "
+
current
+
" does not exist."
,
Project
.
MSG_ERR
)
;
continue
;
}
input
[
i
]
=
current
.
getAbsolutePath
(
)
;
}
if
(
encoding
==
null
)
{
OutputStream
os
=
null
;
InputStream
is
=
null
;
try
{
if
(
destinationFile
==
null
)
{
os
=
new
LogOutputStream
(
this
,
Project
.
MSG_WARN
)
;
}
else
{
os
=
new
FileOutputStream
(
destinationFile
.
getAbsolutePath
(
)
,
append
)
;
append
=
true
;
}
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
if
(
destinationFile
!=
null
&&
destinationFile
.
getAbsolutePath
(
)
.
equals
(
input
[
i
]
)
)
{
log
(
destinationFile
.
getName
(
)
+
": input file is "
+
"output file."
,
Project
.
MSG_WARN
)
;
}
is
=
new
FileInputStream
(
input
[
i
]
)
;
byte
[
]
buffer
=
new
byte
[
8096
]
;
while
(
true
)
{
int
bytesRead
=
is
.
read
(
buffer
)
;
if
(
bytesRead
==
-
1
)
{
break
;
}
os
.
write
(
buffer
,
0
,
bytesRead
)
;
}
os
.
flush
(
)
;
is
.
close
(
)
;
is
=
null
;
}
}
catch
(
IOException
ioex
)
{
throw
new
BuildException
(
"Error while concatenating: "
+
ioex
.
getMessage
(
)
,
ioex
)
;
}
finally
{
if
(
is
!=
null
)
{
try
{
is
.
close
(
)
;
}
catch
(
Exception
ignore
)
{
}
}
if
(
os
!=
null
)
{
try
{
os
.
close
(
)
;
}
catch
(
Exception
ignore
)
{
}
}
}
}
else
{
PrintWriter
out
=
null
;
BufferedReader
in
=
null
;
try
{
if
(
destinationFile
==
null
)
{
out
=
new
PrintWriter
(
new
OutputStreamWriter
(
new
LogOutputStream
(
this
,
Project
.
MSG_WARN
)
)
)
;
}
else
{
out
=
new
PrintWriter
(
new
OutputStreamWriter
(
new
FileOutputStream
(
destinationFile
.
getAbsolutePath
(
)
,
append
)
,
encoding
)
)
;
append
=
true
;
}
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
in
=
new
BufferedReader
(
new
InputStreamReader
(
new
FileInputStream
(
input
[
i
]
)
,
encoding
)
)
;
String
line
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
out
.
println
(
line
)
;
}
in
.
close
(
)
;
in
=
null
;
}
}
catch
(
IOException
ioe
)
{
throw
new
BuildException
(
"Error while concatenating: "
+
ioe
.
getMessage
(
)
,
ioe
)
;
}
finally
{
if
(
in
!=
null
)
{
try
{
in
.
close
(
)
;
}
catch
(
Exception
ignore
)
{
}
}
if
(
out
!=
null
)
{
try
{
out
.
close
(
)
;
}
catch
(
Exception
ignore
)
{
}
}
}
}
}
private
void
catText
(
)
{
if
(
textBuffer
==
null
)
{
return
;
}
String
text
=
textBuffer
.
toString
(
)
;
text
=
ProjectHelper
.
replaceProperties
(
project
,
text
,
project
.
getProperties
(
)
)
;
FileWriter
writer
=
null
;
if
(
destinationFile
!=
null
)
{
try
{
writer
=
new
FileWriter
(
destinationFile
.
getAbsolutePath
(
)
,
append
)
;
}
catch
(
IOException
ioe
)
{
throw
new
BuildException
(
"Error creating destination "
+
"file."
,
ioe
)
;
}
}
BufferedReader
reader
=
null
;
try
{
reader
=
new
BufferedReader
(
new
StringReader
(
text
)
)
;
String
line
;
while
(
(
line
=
reader
.
readLine
(
)
)
!=
null
)
{
if
(
destinationFile
==
null
)
{
log
(
line
,
Project
.
MSG_WARN
)
;
}
else
{
writer
.
write
(
line
)
;
writer
.
write
(
StringUtils
.
LINE_SEP
)
;
writer
.
flush
(
)
;
}
}
}
catch
(
IOException
ioe
)
{
throw
new
BuildException
(
"Error while concatenating "
+
"text."
,
ioe
)
;
}
finally
{
if
(
reader
!=
null
)
{
try
{
reader
.
close
(
)
;
}
catch
(
Exception
ignore
)
{
}
}
if
(
writer
!=
null
)
{
try
{
writer
.
close
(
)
;
}
catch
(
Exception
ignore
)
{
}
}
}
}
private
void
sanitizeText
(
)
{
if
(
textBuffer
!=
null
)
{
if
(
textBuffer
.
toString
(
)
.
trim
(
)
.
length
(
)
==
0
)
{
textBuffer
=
null
;
}
}
}
}
