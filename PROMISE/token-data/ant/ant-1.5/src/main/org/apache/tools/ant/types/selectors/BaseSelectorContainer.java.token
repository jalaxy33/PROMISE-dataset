package
org
.
apache
.
tools
.
ant
.
types
.
selectors
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
import
java
.
io
.
File
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Stack
;
import
java
.
util
.
Vector
;
public
abstract
class
BaseSelectorContainer
extends
BaseSelector
implements
SelectorContainer
{
private
Vector
selectorsList
=
new
Vector
(
)
;
public
BaseSelectorContainer
(
)
{
}
public
boolean
hasSelectors
(
)
{
return
!
(
selectorsList
.
isEmpty
(
)
)
;
}
public
int
selectorCount
(
)
{
return
selectorsList
.
size
(
)
;
}
public
FileSelector
[
]
getSelectors
(
Project
p
)
{
FileSelector
[
]
result
=
new
FileSelector
[
selectorsList
.
size
(
)
]
;
selectorsList
.
copyInto
(
result
)
;
return
result
;
}
public
Enumeration
selectorElements
(
)
{
return
selectorsList
.
elements
(
)
;
}
public
String
toString
(
)
{
StringBuffer
buf
=
new
StringBuffer
(
)
;
Enumeration
e
=
selectorElements
(
)
;
if
(
e
.
hasMoreElements
(
)
)
{
while
(
e
.
hasMoreElements
(
)
)
{
buf
.
append
(
e
.
nextElement
(
)
.
toString
(
)
)
;
if
(
e
.
hasMoreElements
(
)
)
{
buf
.
append
(
", "
)
;
}
}
}
return
buf
.
toString
(
)
;
}
public
void
appendSelector
(
FileSelector
selector
)
{
selectorsList
.
addElement
(
selector
)
;
}
public
void
validate
(
)
{
verifySettings
(
)
;
String
errmsg
=
getError
(
)
;
if
(
errmsg
!=
null
)
{
throw
new
BuildException
(
errmsg
)
;
}
Enumeration
e
=
selectorElements
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
Object
o
=
e
.
nextElement
(
)
;
if
(
o
instanceof
BaseSelector
)
{
(
(
BaseSelector
)
o
)
.
validate
(
)
;
}
}
}
public
abstract
boolean
isSelected
(
File
basedir
,
String
filename
,
File
file
)
;
public
void
addSelector
(
SelectSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addAnd
(
AndSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addOr
(
OrSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addNot
(
NotSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addNone
(
NoneSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addMajority
(
MajoritySelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addDate
(
DateSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addSize
(
SizeSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addFilename
(
FilenameSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addCustom
(
ExtendSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addContains
(
ContainsSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addPresent
(
PresentSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addDepth
(
DepthSelector
selector
)
{
appendSelector
(
selector
)
;
}
public
void
addDepend
(
DependSelector
selector
)
{
appendSelector
(
selector
)
;
}
}
