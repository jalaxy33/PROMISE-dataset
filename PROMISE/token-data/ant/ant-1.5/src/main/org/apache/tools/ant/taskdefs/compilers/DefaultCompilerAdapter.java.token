package
org
.
apache
.
tools
.
ant
.
taskdefs
.
compilers
;
import
org
.
apache
.
tools
.
ant
.
Location
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
Javac
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
Execute
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
LogStreamHandler
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
types
.
Commandline
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
JavaEnvUtils
;
import
java
.
io
.
File
;
import
java
.
io
.
PrintWriter
;
import
java
.
io
.
FileWriter
;
import
java
.
io
.
IOException
;
public
abstract
class
DefaultCompilerAdapter
implements
CompilerAdapter
{
protected
Path
src
;
protected
File
destDir
;
protected
String
encoding
;
protected
boolean
debug
=
false
;
protected
boolean
optimize
=
false
;
protected
boolean
deprecation
=
false
;
protected
boolean
depend
=
false
;
protected
boolean
verbose
=
false
;
protected
String
target
;
protected
Path
bootclasspath
;
protected
Path
extdirs
;
protected
Path
compileClasspath
;
protected
Path
compileSourcepath
;
protected
Project
project
;
protected
Location
location
;
protected
boolean
includeAntRuntime
;
protected
boolean
includeJavaRuntime
;
protected
String
memoryInitialSize
;
protected
String
memoryMaximumSize
;
protected
File
[
]
compileList
;
protected
static
String
lSep
=
System
.
getProperty
(
"line.separator"
)
;
protected
Javac
attributes
;
private
FileUtils
fileUtils
=
FileUtils
.
newFileUtils
(
)
;
public
void
setJavac
(
Javac
attributes
)
{
this
.
attributes
=
attributes
;
src
=
attributes
.
getSrcdir
(
)
;
destDir
=
attributes
.
getDestdir
(
)
;
encoding
=
attributes
.
getEncoding
(
)
;
debug
=
attributes
.
getDebug
(
)
;
optimize
=
attributes
.
getOptimize
(
)
;
deprecation
=
attributes
.
getDeprecation
(
)
;
depend
=
attributes
.
getDepend
(
)
;
verbose
=
attributes
.
getVerbose
(
)
;
target
=
attributes
.
getTarget
(
)
;
bootclasspath
=
attributes
.
getBootclasspath
(
)
;
extdirs
=
attributes
.
getExtdirs
(
)
;
compileList
=
attributes
.
getFileList
(
)
;
compileClasspath
=
attributes
.
getClasspath
(
)
;
compileSourcepath
=
attributes
.
getSourcepath
(
)
;
project
=
attributes
.
getProject
(
)
;
location
=
attributes
.
getLocation
(
)
;
includeAntRuntime
=
attributes
.
getIncludeantruntime
(
)
;
includeJavaRuntime
=
attributes
.
getIncludejavaruntime
(
)
;
memoryInitialSize
=
attributes
.
getMemoryInitialSize
(
)
;
memoryMaximumSize
=
attributes
.
getMemoryMaximumSize
(
)
;
}
public
Javac
getJavac
(
)
{
return
attributes
;
}
protected
Path
getCompileClasspath
(
)
{
Path
classpath
=
new
Path
(
project
)
;
if
(
destDir
!=
null
)
{
classpath
.
setLocation
(
destDir
)
;
}
if
(
compileClasspath
==
null
)
{
if
(
includeAntRuntime
)
{
classpath
.
addExisting
(
Path
.
systemClasspath
)
;
}
}
else
{
if
(
includeAntRuntime
)
{
classpath
.
addExisting
(
compileClasspath
.
concatSystemClasspath
(
"last"
)
)
;
}
else
{
classpath
.
addExisting
(
compileClasspath
.
concatSystemClasspath
(
"ignore"
)
)
;
}
}
if
(
includeJavaRuntime
)
{
classpath
.
addJavaRuntime
(
)
;
}
return
classpath
;
}
protected
Commandline
setupJavacCommandlineSwitches
(
Commandline
cmd
)
{
return
setupJavacCommandlineSwitches
(
cmd
,
false
)
;
}
protected
Commandline
setupJavacCommandlineSwitches
(
Commandline
cmd
,
boolean
useDebugLevel
)
{
Path
classpath
=
getCompileClasspath
(
)
;
Path
sourcepath
=
null
;
if
(
compileSourcepath
!=
null
)
{
sourcepath
=
compileSourcepath
;
}
else
{
sourcepath
=
src
;
}
String
memoryParameterPrefix
=
assumeJava11
(
)
?
"-J-"
:
"-J-X"
;
if
(
memoryInitialSize
!=
null
)
{
if
(
!
attributes
.
isForkedJavac
(
)
)
{
attributes
.
log
(
"Since fork is false, ignoring "
+
"memoryInitialSize setting."
,
Project
.
MSG_WARN
)
;
}
else
{
cmd
.
createArgument
(
)
.
setValue
(
memoryParameterPrefix
+
"ms"
+
memoryInitialSize
)
;
}
}
if
(
memoryMaximumSize
!=
null
)
{
if
(
!
attributes
.
isForkedJavac
(
)
)
{
attributes
.
log
(
"Since fork is false, ignoring "
+
"memoryMaximumSize setting."
,
Project
.
MSG_WARN
)
;
}
else
{
cmd
.
createArgument
(
)
.
setValue
(
memoryParameterPrefix
+
"mx"
+
memoryMaximumSize
)
;
}
}
if
(
attributes
.
getNowarn
(
)
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-nowarn"
)
;
}
if
(
deprecation
==
true
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-deprecation"
)
;
}
if
(
destDir
!=
null
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-d"
)
;
cmd
.
createArgument
(
)
.
setFile
(
destDir
)
;
}
cmd
.
createArgument
(
)
.
setValue
(
"-classpath"
)
;
if
(
assumeJava11
(
)
)
{
Path
cp
=
new
Path
(
project
)
;
if
(
bootclasspath
!=
null
)
{
cp
.
append
(
bootclasspath
)
;
}
if
(
extdirs
!=
null
)
{
cp
.
addExtdirs
(
extdirs
)
;
}
cp
.
append
(
classpath
)
;
cp
.
append
(
sourcepath
)
;
cmd
.
createArgument
(
)
.
setPath
(
cp
)
;
}
else
{
cmd
.
createArgument
(
)
.
setPath
(
classpath
)
;
if
(
sourcepath
.
size
(
)
>
0
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-sourcepath"
)
;
cmd
.
createArgument
(
)
.
setPath
(
sourcepath
)
;
}
if
(
target
!=
null
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-target"
)
;
cmd
.
createArgument
(
)
.
setValue
(
target
)
;
}
if
(
bootclasspath
!=
null
&&
bootclasspath
.
size
(
)
>
0
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-bootclasspath"
)
;
cmd
.
createArgument
(
)
.
setPath
(
bootclasspath
)
;
}
if
(
extdirs
!=
null
&&
extdirs
.
size
(
)
>
0
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-extdirs"
)
;
cmd
.
createArgument
(
)
.
setPath
(
extdirs
)
;
}
}
if
(
encoding
!=
null
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-encoding"
)
;
cmd
.
createArgument
(
)
.
setValue
(
encoding
)
;
}
if
(
debug
)
{
if
(
useDebugLevel
&&
!
assumeJava11
(
)
)
{
String
debugLevel
=
attributes
.
getDebugLevel
(
)
;
if
(
debugLevel
!=
null
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-g:"
+
debugLevel
)
;
}
else
{
cmd
.
createArgument
(
)
.
setValue
(
"-g"
)
;
}
}
else
{
cmd
.
createArgument
(
)
.
setValue
(
"-g"
)
;
}
}
else
if
(
!
assumeJava11
(
)
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-g:none"
)
;
}
if
(
optimize
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-O"
)
;
}
if
(
depend
)
{
if
(
assumeJava11
(
)
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-depend"
)
;
}
else
if
(
assumeJava12
(
)
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-Xdepend"
)
;
}
else
{
attributes
.
log
(
"depend attribute is not supported by the "
+
"modern compiler"
,
Project
.
MSG_WARN
)
;
}
}
if
(
verbose
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-verbose"
)
;
}
addCurrentCompilerArgs
(
cmd
)
;
return
cmd
;
}
protected
Commandline
setupModernJavacCommandlineSwitches
(
Commandline
cmd
)
{
setupJavacCommandlineSwitches
(
cmd
,
true
)
;
if
(
attributes
.
getSource
(
)
!=
null
&&
!
assumeJava13
(
)
)
{
cmd
.
createArgument
(
)
.
setValue
(
"-source"
)
;
cmd
.
createArgument
(
)
.
setValue
(
attributes
.
getSource
(
)
)
;
}
return
cmd
;
}
protected
Commandline
setupModernJavacCommand
(
)
{
Commandline
cmd
=
new
Commandline
(
)
;
setupModernJavacCommandlineSwitches
(
cmd
)
;
logAndAddFilesToCompile
(
cmd
)
;
return
cmd
;
}
protected
Commandline
setupJavacCommand
(
)
{
return
setupJavacCommand
(
false
)
;
}
protected
Commandline
setupJavacCommand
(
boolean
debugLevelCheck
)
{
Commandline
cmd
=
new
Commandline
(
)
;
setupJavacCommandlineSwitches
(
cmd
,
debugLevelCheck
)
;
logAndAddFilesToCompile
(
cmd
)
;
return
cmd
;
}
protected
void
logAndAddFilesToCompile
(
Commandline
cmd
)
{
attributes
.
log
(
"Compilation "
+
cmd
.
describeArguments
(
)
,
Project
.
MSG_VERBOSE
)
;
StringBuffer
niceSourceList
=
new
StringBuffer
(
"File"
)
;
if
(
compileList
.
length
!=
1
)
{
niceSourceList
.
append
(
"s"
)
;
}
niceSourceList
.
append
(
" to be compiled:"
)
;
niceSourceList
.
append
(
lSep
)
;
for
(
int
i
=
0
;
i
<
compileList
.
length
;
i
++
)
{
String
arg
=
compileList
[
i
]
.
getAbsolutePath
(
)
;
cmd
.
createArgument
(
)
.
setValue
(
arg
)
;
niceSourceList
.
append
(
"    "
+
arg
+
lSep
)
;
}
attributes
.
log
(
niceSourceList
.
toString
(
)
,
Project
.
MSG_VERBOSE
)
;
}
protected
int
executeExternalCompile
(
String
[
]
args
,
int
firstFileName
)
{
String
[
]
commandArray
=
null
;
File
tmpFile
=
null
;
try
{
if
(
Commandline
.
toString
(
args
)
.
length
(
)
>
4096
&&
firstFileName
>=
0
)
{
PrintWriter
out
=
null
;
try
{
String
userDirName
=
System
.
getProperty
(
"user.dir"
)
;
File
userDir
=
new
File
(
userDirName
)
;
tmpFile
=
fileUtils
.
createTempFile
(
"files"
,
""
,
userDir
)
;
out
=
new
PrintWriter
(
new
FileWriter
(
tmpFile
)
)
;
for
(
int
i
=
firstFileName
;
i
<
args
.
length
;
i
++
)
{
out
.
println
(
args
[
i
]
)
;
}
out
.
flush
(
)
;
commandArray
=
new
String
[
firstFileName
+
1
]
;
System
.
arraycopy
(
args
,
0
,
commandArray
,
0
,
firstFileName
)
;
commandArray
[
firstFileName
]
=
"@"
+
tmpFile
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
"Error creating temporary file"
,
e
,
location
)
;
}
finally
{
if
(
out
!=
null
)
{
try
{
out
.
close
(
)
;
}
catch
(
Throwable
t
)
{
}
}
}
}
else
{
commandArray
=
args
;
}
try
{
Execute
exe
=
new
Execute
(
new
LogStreamHandler
(
attributes
,
Project
.
MSG_INFO
,
Project
.
MSG_WARN
)
)
;
exe
.
setAntRun
(
project
)
;
exe
.
setWorkingDirectory
(
project
.
getBaseDir
(
)
)
;
exe
.
setCommandline
(
commandArray
)
;
exe
.
execute
(
)
;
return
exe
.
getExitValue
(
)
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
"Error running "
+
args
[
0
]
+
" compiler"
,
e
,
location
)
;
}
}
finally
{
if
(
tmpFile
!=
null
)
{
tmpFile
.
delete
(
)
;
}
}
}
protected
void
addExtdirsToClasspath
(
Path
classpath
)
{
classpath
.
addExtdirs
(
extdirs
)
;
}
protected
void
addCurrentCompilerArgs
(
Commandline
cmd
)
{
cmd
.
addArguments
(
getJavac
(
)
.
getCurrentCompilerArgs
(
)
)
;
}
protected
boolean
assumeJava11
(
)
{
return
"javac1.1"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
||
(
"classic"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
&&
JavaEnvUtils
.
isJavaVersion
(
JavaEnvUtils
.
JAVA_1_1
)
)
||
(
"extJavac"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
&&
JavaEnvUtils
.
isJavaVersion
(
JavaEnvUtils
.
JAVA_1_1
)
)
;
}
protected
boolean
assumeJava12
(
)
{
return
"javac1.2"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
||
(
"classic"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
&&
JavaEnvUtils
.
isJavaVersion
(
JavaEnvUtils
.
JAVA_1_2
)
)
||
(
"extJavac"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
&&
JavaEnvUtils
.
isJavaVersion
(
JavaEnvUtils
.
JAVA_1_2
)
)
;
}
protected
boolean
assumeJava13
(
)
{
return
"javac1.3"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
||
(
"classic"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
&&
JavaEnvUtils
.
isJavaVersion
(
JavaEnvUtils
.
JAVA_1_3
)
)
||
(
"modern"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
&&
JavaEnvUtils
.
isJavaVersion
(
JavaEnvUtils
.
JAVA_1_3
)
)
||
(
"extJavac"
.
equals
(
attributes
.
getCompilerVersion
(
)
)
&&
JavaEnvUtils
.
isJavaVersion
(
JavaEnvUtils
.
JAVA_1_3
)
)
;
}
}
