package
org
.
apache
.
tools
.
ant
.
filters
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Reader
;
import
org
.
apache
.
tools
.
ant
.
types
.
Parameter
;
public
final
class
TailFilter
extends
BaseParamFilterReader
implements
ChainableReader
{
private
static
final
String
LINES_KEY
=
"lines"
;
private
long
linesRead
=
0
;
private
long
lines
=
10
;
private
char
[
]
buffer
=
new
char
[
4096
]
;
private
int
returnedCharPos
=
-
1
;
private
boolean
completedReadAhead
=
false
;
private
int
bufferPos
=
0
;
public
TailFilter
(
)
{
super
(
)
;
}
public
TailFilter
(
final
Reader
in
)
{
super
(
in
)
;
}
public
final
int
read
(
)
throws
IOException
{
if
(
!
getInitialized
(
)
)
{
initialize
(
)
;
setInitialized
(
true
)
;
}
if
(
!
completedReadAhead
)
{
int
ch
=
-
1
;
while
(
(
ch
=
in
.
read
(
)
)
!=
-
1
)
{
if
(
buffer
.
length
==
bufferPos
)
{
if
(
returnedCharPos
!=
-
1
)
{
final
char
[
]
tmpBuffer
=
new
char
[
buffer
.
length
]
;
System
.
arraycopy
(
buffer
,
returnedCharPos
+
1
,
tmpBuffer
,
0
,
buffer
.
length
-
(
returnedCharPos
+
1
)
)
;
buffer
=
tmpBuffer
;
bufferPos
=
bufferPos
-
(
returnedCharPos
+
1
)
;
returnedCharPos
=
-
1
;
}
else
{
final
char
[
]
tmpBuffer
=
new
char
[
buffer
.
length
*
2
]
;
System
.
arraycopy
(
buffer
,
0
,
tmpBuffer
,
0
,
bufferPos
)
;
buffer
=
tmpBuffer
;
}
}
if
(
ch
==
'\n'
||
ch
==
-
1
)
{
++
linesRead
;
if
(
linesRead
==
lines
)
{
int
i
=
0
;
for
(
i
=
returnedCharPos
+
1
;
buffer
[
i
]
!=
0
&&
buffer
[
i
]
!=
'\n'
;
i
++
)
{
}
returnedCharPos
=
i
;
--
linesRead
;
}
}
if
(
ch
==
-
1
)
{
break
;
}
buffer
[
bufferPos
]
=
(
char
)
ch
;
bufferPos
++
;
}
completedReadAhead
=
true
;
}
++
returnedCharPos
;
if
(
returnedCharPos
>=
bufferPos
)
{
return
-
1
;
}
else
{
return
buffer
[
returnedCharPos
]
;
}
}
public
final
void
setLines
(
final
long
lines
)
{
this
.
lines
=
lines
;
}
private
final
long
getLines
(
)
{
return
lines
;
}
public
final
Reader
chain
(
final
Reader
rdr
)
{
TailFilter
newFilter
=
new
TailFilter
(
rdr
)
;
newFilter
.
setLines
(
getLines
(
)
)
;
newFilter
.
setInitialized
(
true
)
;
return
newFilter
;
}
private
final
void
initialize
(
)
{
Parameter
[
]
params
=
getParameters
(
)
;
if
(
params
!=
null
)
{
for
(
int
i
=
0
;
i
<
params
.
length
;
i
++
)
{
if
(
LINES_KEY
.
equals
(
params
[
i
]
.
getName
(
)
)
)
{
setLines
(
new
Long
(
params
[
i
]
.
getValue
(
)
)
.
longValue
(
)
)
;
break
;
}
}
}
}
}
