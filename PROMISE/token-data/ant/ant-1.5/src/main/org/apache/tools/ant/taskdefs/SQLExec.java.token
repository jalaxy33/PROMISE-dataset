package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
DirectoryScanner
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
types
.
EnumeratedAttribute
;
import
org
.
apache
.
tools
.
ant
.
types
.
FileSet
;
import
java
.
io
.
File
;
import
java
.
io
.
PrintStream
;
import
java
.
io
.
BufferedOutputStream
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Reader
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
StringReader
;
import
java
.
io
.
FileReader
;
import
java
.
io
.
InputStreamReader
;
import
java
.
io
.
FileInputStream
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
StringTokenizer
;
import
java
.
util
.
Vector
;
import
java
.
sql
.
Connection
;
import
java
.
sql
.
Statement
;
import
java
.
sql
.
SQLException
;
import
java
.
sql
.
SQLWarning
;
import
java
.
sql
.
ResultSet
;
import
java
.
sql
.
ResultSetMetaData
;
public
class
SQLExec
extends
JDBCTask
{
public
static
class
DelimiterType
extends
EnumeratedAttribute
{
public
static
final
String
NORMAL
=
"normal"
;
public
static
final
String
ROW
=
"row"
;
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
NORMAL
,
ROW
}
;
}
}
private
int
goodSql
=
0
;
private
int
totalSql
=
0
;
private
Connection
conn
=
null
;
private
Vector
filesets
=
new
Vector
(
)
;
private
Statement
statement
=
null
;
private
File
srcFile
=
null
;
private
String
sqlCommand
=
""
;
private
Vector
transactions
=
new
Vector
(
)
;
private
String
delimiter
=
";"
;
private
String
delimiterType
=
DelimiterType
.
NORMAL
;
private
boolean
print
=
false
;
private
boolean
showheaders
=
true
;
private
File
output
=
null
;
private
String
onError
=
"abort"
;
private
String
encoding
=
null
;
private
boolean
append
=
false
;
public
void
setSrc
(
File
srcFile
)
{
this
.
srcFile
=
srcFile
;
}
public
void
addText
(
String
sql
)
{
this
.
sqlCommand
+=
sql
;
}
public
void
addFileset
(
FileSet
set
)
{
filesets
.
addElement
(
set
)
;
}
public
Transaction
createTransaction
(
)
{
Transaction
t
=
new
Transaction
(
)
;
transactions
.
addElement
(
t
)
;
return
t
;
}
public
void
setEncoding
(
String
encoding
)
{
this
.
encoding
=
encoding
;
}
public
void
setDelimiter
(
String
delimiter
)
{
this
.
delimiter
=
delimiter
;
}
public
void
setDelimiterType
(
DelimiterType
delimiterType
)
{
this
.
delimiterType
=
delimiterType
.
getValue
(
)
;
}
public
void
setPrint
(
boolean
print
)
{
this
.
print
=
print
;
}
public
void
setShowheaders
(
boolean
showheaders
)
{
this
.
showheaders
=
showheaders
;
}
public
void
setOutput
(
File
output
)
{
this
.
output
=
output
;
}
public
void
setAppend
(
boolean
append
)
{
this
.
append
=
append
;
}
public
void
setOnerror
(
OnError
action
)
{
this
.
onError
=
action
.
getValue
(
)
;
}
public
void
execute
(
)
throws
BuildException
{
Vector
savedTransaction
=
(
Vector
)
transactions
.
clone
(
)
;
String
savedSqlCommand
=
sqlCommand
;
sqlCommand
=
sqlCommand
.
trim
(
)
;
try
{
if
(
srcFile
==
null
&&
sqlCommand
.
length
(
)
==
0
&&
filesets
.
isEmpty
(
)
)
{
if
(
transactions
.
size
(
)
==
0
)
{
throw
new
BuildException
(
"Source file or fileset, "
+
"transactions or sql statement "
+
"must be set!"
,
location
)
;
}
}
if
(
srcFile
!=
null
&&
!
srcFile
.
exists
(
)
)
{
throw
new
BuildException
(
"Source file does not exist!"
,
location
)
;
}
for
(
int
i
=
0
;
i
<
filesets
.
size
(
)
;
i
++
)
{
FileSet
fs
=
(
FileSet
)
filesets
.
elementAt
(
i
)
;
DirectoryScanner
ds
=
fs
.
getDirectoryScanner
(
project
)
;
File
srcDir
=
fs
.
getDir
(
project
)
;
String
[
]
srcFiles
=
ds
.
getIncludedFiles
(
)
;
for
(
int
j
=
0
;
j
<
srcFiles
.
length
;
j
++
)
{
Transaction
t
=
createTransaction
(
)
;
t
.
setSrc
(
new
File
(
srcDir
,
srcFiles
[
j
]
)
)
;
}
}
Transaction
t
=
createTransaction
(
)
;
t
.
setSrc
(
srcFile
)
;
t
.
addText
(
sqlCommand
)
;
conn
=
getConnection
(
)
;
if
(
!
isValidRdbms
(
conn
)
)
{
return
;
}
try
{
statement
=
conn
.
createStatement
(
)
;
PrintStream
out
=
System
.
out
;
try
{
if
(
output
!=
null
)
{
log
(
"Opening PrintStream to output file "
+
output
,
Project
.
MSG_VERBOSE
)
;
out
=
new
PrintStream
(
new
BufferedOutputStream
(
new
FileOutputStream
(
output
.
getAbsolutePath
(
)
,
append
)
)
)
;
}
for
(
Enumeration
e
=
transactions
.
elements
(
)
;
e
.
hasMoreElements
(
)
;
)
{
(
(
Transaction
)
e
.
nextElement
(
)
)
.
runTransaction
(
out
)
;
if
(
!
isAutocommit
(
)
)
{
log
(
"Commiting transaction"
,
Project
.
MSG_VERBOSE
)
;
conn
.
commit
(
)
;
}
}
}
finally
{
if
(
out
!=
null
&&
out
!=
System
.
out
)
{
out
.
close
(
)
;
}
}
}
catch
(
IOException
e
)
{
if
(
!
isAutocommit
(
)
&&
conn
!=
null
&&
onError
.
equals
(
"abort"
)
)
{
try
{
conn
.
rollback
(
)
;
}
catch
(
SQLException
ex
)
{
}
}
throw
new
BuildException
(
e
,
location
)
;
}
catch
(
SQLException
e
)
{
if
(
!
isAutocommit
(
)
&&
conn
!=
null
&&
onError
.
equals
(
"abort"
)
)
{
try
{
conn
.
rollback
(
)
;
}
catch
(
SQLException
ex
)
{
}
}
throw
new
BuildException
(
e
,
location
)
;
}
finally
{
try
{
if
(
statement
!=
null
)
{
statement
.
close
(
)
;
}
if
(
conn
!=
null
)
{
conn
.
close
(
)
;
}
}
catch
(
SQLException
e
)
{
}
}
log
(
goodSql
+
" of "
+
totalSql
+
" SQL statements executed successfully"
)
;
}
finally
{
transactions
=
savedTransaction
;
sqlCommand
=
savedSqlCommand
;
}
}
protected
void
runStatements
(
Reader
reader
,
PrintStream
out
)
throws
SQLException
,
IOException
{
String
sql
=
""
;
String
line
=
""
;
BufferedReader
in
=
new
BufferedReader
(
reader
)
;
while
(
(
line
=
in
.
readLine
(
)
)
!=
null
)
{
line
=
line
.
trim
(
)
;
line
=
project
.
replaceProperties
(
line
)
;
if
(
line
.
startsWith
(
"//"
)
)
{
continue
;
}
if
(
line
.
startsWith
(
"--"
)
)
{
continue
;
}
StringTokenizer
st
=
new
StringTokenizer
(
line
)
;
if
(
st
.
hasMoreTokens
(
)
)
{
String
token
=
st
.
nextToken
(
)
;
if
(
"REM"
.
equalsIgnoreCase
(
token
)
)
{
continue
;
}
}
sql
+=
" "
+
line
;
sql
=
sql
.
trim
(
)
;
if
(
line
.
indexOf
(
"--"
)
>=
0
)
{
sql
+=
"\n"
;
}
if
(
(
delimiterType
.
equals
(
DelimiterType
.
NORMAL
)
&&
sql
.
endsWith
(
delimiter
)
)
||
(
delimiterType
.
equals
(
DelimiterType
.
ROW
)
&&
line
.
equals
(
delimiter
)
)
)
{
log
(
"SQL: "
+
sql
,
Project
.
MSG_VERBOSE
)
;
execSQL
(
sql
.
substring
(
0
,
sql
.
length
(
)
-
delimiter
.
length
(
)
)
,
out
)
;
sql
=
""
;
}
}
if
(
!
sql
.
equals
(
""
)
)
{
execSQL
(
sql
,
out
)
;
}
}
protected
void
execSQL
(
String
sql
,
PrintStream
out
)
throws
SQLException
{
if
(
""
.
equals
(
sql
.
trim
(
)
)
)
{
return
;
}
try
{
totalSql
++
;
if
(
!
statement
.
execute
(
sql
)
)
{
log
(
statement
.
getUpdateCount
(
)
+
" rows affected"
,
Project
.
MSG_VERBOSE
)
;
}
else
{
if
(
print
)
{
printResults
(
out
)
;
}
}
SQLWarning
warning
=
conn
.
getWarnings
(
)
;
while
(
warning
!=
null
)
{
log
(
warning
+
" sql warning"
,
Project
.
MSG_VERBOSE
)
;
warning
=
warning
.
getNextWarning
(
)
;
}
conn
.
clearWarnings
(
)
;
goodSql
++
;
}
catch
(
SQLException
e
)
{
log
(
"Failed to execute: "
+
sql
,
Project
.
MSG_ERR
)
;
if
(
!
onError
.
equals
(
"continue"
)
)
{
throw
e
;
}
log
(
e
.
toString
(
)
,
Project
.
MSG_ERR
)
;
}
}
protected
void
printResults
(
PrintStream
out
)
throws
java
.
sql
.
SQLException
{
ResultSet
rs
=
null
;
do
{
rs
=
statement
.
getResultSet
(
)
;
if
(
rs
!=
null
)
{
log
(
"Processing new result set."
,
Project
.
MSG_VERBOSE
)
;
ResultSetMetaData
md
=
rs
.
getMetaData
(
)
;
int
columnCount
=
md
.
getColumnCount
(
)
;
StringBuffer
line
=
new
StringBuffer
(
)
;
if
(
showheaders
)
{
for
(
int
col
=
1
;
col
<
columnCount
;
col
++
)
{
line
.
append
(
md
.
getColumnName
(
col
)
)
;
line
.
append
(
","
)
;
}
line
.
append
(
md
.
getColumnName
(
columnCount
)
)
;
out
.
println
(
line
)
;
line
.
setLength
(
0
)
;
}
while
(
rs
.
next
(
)
)
{
boolean
first
=
true
;
for
(
int
col
=
1
;
col
<=
columnCount
;
col
++
)
{
String
columnValue
=
rs
.
getString
(
col
)
;
if
(
columnValue
!=
null
)
{
columnValue
=
columnValue
.
trim
(
)
;
}
if
(
first
)
{
first
=
false
;
}
else
{
line
.
append
(
","
)
;
}
line
.
append
(
columnValue
)
;
}
out
.
println
(
line
)
;
line
.
setLength
(
0
)
;
}
}
}
while
(
statement
.
getMoreResults
(
)
)
;
out
.
println
(
)
;
}
public
static
class
OnError
extends
EnumeratedAttribute
{
public
String
[
]
getValues
(
)
{
return
new
String
[
]
{
"continue"
,
"stop"
,
"abort"
}
;
}
}
public
class
Transaction
{
private
File
tSrcFile
=
null
;
private
String
tSqlCommand
=
""
;
public
void
setSrc
(
File
src
)
{
this
.
tSrcFile
=
src
;
}
public
void
addText
(
String
sql
)
{
this
.
tSqlCommand
+=
sql
;
}
private
void
runTransaction
(
PrintStream
out
)
throws
IOException
,
SQLException
{
if
(
tSqlCommand
.
length
(
)
!=
0
)
{
log
(
"Executing commands"
,
Project
.
MSG_INFO
)
;
runStatements
(
new
StringReader
(
tSqlCommand
)
,
out
)
;
}
if
(
tSrcFile
!=
null
)
{
log
(
"Executing file: "
+
tSrcFile
.
getAbsolutePath
(
)
,
Project
.
MSG_INFO
)
;
Reader
reader
=
(
encoding
==
null
)
?
new
FileReader
(
tSrcFile
)
:
new
InputStreamReader
(
new
FileInputStream
(
tSrcFile
)
,
encoding
)
;
try
{
runStatements
(
reader
,
out
)
;
}
finally
{
reader
.
close
(
)
;
}
}
}
}
}
