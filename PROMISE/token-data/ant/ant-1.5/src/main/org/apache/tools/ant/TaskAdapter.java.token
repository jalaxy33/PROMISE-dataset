package
org
.
apache
.
tools
.
ant
;
import
java
.
lang
.
reflect
.
Method
;
public
class
TaskAdapter
extends
Task
{
private
Object
proxy
;
public
static
void
checkTaskClass
(
final
Class
taskClass
,
final
Project
project
)
{
try
{
final
Method
executeM
=
taskClass
.
getMethod
(
"execute"
,
null
)
;
if
(
!
Void
.
TYPE
.
equals
(
executeM
.
getReturnType
(
)
)
)
{
final
String
message
=
"return type of execute() should be "
+
"void but was \""
+
executeM
.
getReturnType
(
)
+
"\" in "
+
taskClass
;
project
.
log
(
message
,
Project
.
MSG_WARN
)
;
}
}
catch
(
NoSuchMethodException
e
)
{
final
String
message
=
"No public execute() in "
+
taskClass
;
project
.
log
(
message
,
Project
.
MSG_ERR
)
;
throw
new
BuildException
(
message
)
;
}
}
public
void
execute
(
)
throws
BuildException
{
Method
setProjectM
=
null
;
try
{
Class
c
=
proxy
.
getClass
(
)
;
setProjectM
=
c
.
getMethod
(
"setProject"
,
new
Class
[
]
{
Project
.
class
}
)
;
if
(
setProjectM
!=
null
)
{
setProjectM
.
invoke
(
proxy
,
new
Object
[
]
{
project
}
)
;
}
}
catch
(
NoSuchMethodException
e
)
{
}
catch
(
Exception
ex
)
{
log
(
"Error setting project in "
+
proxy
.
getClass
(
)
,
Project
.
MSG_ERR
)
;
throw
new
BuildException
(
ex
)
;
}
Method
executeM
=
null
;
try
{
Class
c
=
proxy
.
getClass
(
)
;
executeM
=
c
.
getMethod
(
"execute"
,
new
Class
[
0
]
)
;
if
(
executeM
==
null
)
{
log
(
"No public execute() in "
+
proxy
.
getClass
(
)
,
Project
.
MSG_ERR
)
;
throw
new
BuildException
(
"No public execute() in "
+
proxy
.
getClass
(
)
)
;
}
executeM
.
invoke
(
proxy
,
null
)
;
return
;
}
catch
(
java
.
lang
.
reflect
.
InvocationTargetException
ie
)
{
log
(
"Error in "
+
proxy
.
getClass
(
)
,
Project
.
MSG_ERR
)
;
Throwable
t
=
ie
.
getTargetException
(
)
;
if
(
t
instanceof
BuildException
)
{
throw
(
(
BuildException
)
t
)
;
}
else
{
throw
new
BuildException
(
t
)
;
}
}
catch
(
Exception
ex
)
{
log
(
"Error in "
+
proxy
.
getClass
(
)
,
Project
.
MSG_ERR
)
;
throw
new
BuildException
(
ex
)
;
}
}
public
void
setProxy
(
Object
o
)
{
this
.
proxy
=
o
;
}
public
Object
getProxy
(
)
{
return
this
.
proxy
;
}
}
