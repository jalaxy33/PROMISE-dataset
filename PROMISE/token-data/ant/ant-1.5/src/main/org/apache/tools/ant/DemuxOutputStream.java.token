package
org
.
apache
.
tools
.
ant
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Hashtable
;
public
class
DemuxOutputStream
extends
OutputStream
{
private
static
class
BufferInfo
{
private
ByteArrayOutputStream
buffer
;
private
boolean
skip
=
false
;
}
private
static
final
int
MAX_SIZE
=
1024
;
private
Hashtable
buffers
=
new
Hashtable
(
)
;
private
Project
project
;
private
boolean
isErrorStream
;
public
DemuxOutputStream
(
Project
project
,
boolean
isErrorStream
)
{
this
.
project
=
project
;
this
.
isErrorStream
=
isErrorStream
;
}
private
BufferInfo
getBufferInfo
(
)
{
Thread
current
=
Thread
.
currentThread
(
)
;
BufferInfo
bufferInfo
=
(
BufferInfo
)
buffers
.
get
(
current
)
;
if
(
bufferInfo
==
null
)
{
bufferInfo
=
new
BufferInfo
(
)
;
bufferInfo
.
buffer
=
new
ByteArrayOutputStream
(
)
;
bufferInfo
.
skip
=
false
;
buffers
.
put
(
current
,
bufferInfo
)
;
}
return
bufferInfo
;
}
private
void
resetBufferInfo
(
)
{
Thread
current
=
Thread
.
currentThread
(
)
;
BufferInfo
bufferInfo
=
(
BufferInfo
)
buffers
.
get
(
current
)
;
try
{
bufferInfo
.
buffer
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
bufferInfo
.
buffer
=
new
ByteArrayOutputStream
(
)
;
bufferInfo
.
skip
=
false
;
}
private
void
removeBuffer
(
)
{
Thread
current
=
Thread
.
currentThread
(
)
;
buffers
.
remove
(
current
)
;
}
public
void
write
(
int
cc
)
throws
IOException
{
final
byte
c
=
(
byte
)
cc
;
BufferInfo
bufferInfo
=
getBufferInfo
(
)
;
if
(
(
c
==
'\n'
)
||
(
c
==
'\r'
)
)
{
if
(
!
bufferInfo
.
skip
)
{
processBuffer
(
bufferInfo
.
buffer
)
;
}
}
else
{
bufferInfo
.
buffer
.
write
(
cc
)
;
if
(
bufferInfo
.
buffer
.
size
(
)
>
MAX_SIZE
)
{
processBuffer
(
bufferInfo
.
buffer
)
;
}
}
bufferInfo
.
skip
=
(
c
==
'\r'
)
;
}
protected
void
processBuffer
(
ByteArrayOutputStream
buffer
)
{
String
output
=
buffer
.
toString
(
)
;
project
.
demuxOutput
(
output
,
isErrorStream
)
;
resetBufferInfo
(
)
;
}
public
void
close
(
)
throws
IOException
{
flush
(
)
;
removeBuffer
(
)
;
}
public
void
flush
(
)
throws
IOException
{
BufferInfo
bufferInfo
=
getBufferInfo
(
)
;
if
(
bufferInfo
.
buffer
.
size
(
)
>
0
)
{
processBuffer
(
bufferInfo
.
buffer
)
;
}
}
}
