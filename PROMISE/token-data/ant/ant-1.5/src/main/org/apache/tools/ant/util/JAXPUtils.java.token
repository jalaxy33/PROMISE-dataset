package
org
.
apache
.
tools
.
ant
.
util
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
xml
.
sax
.
Parser
;
import
org
.
xml
.
sax
.
SAXException
;
import
org
.
xml
.
sax
.
XMLReader
;
import
javax
.
xml
.
parsers
.
SAXParserFactory
;
import
javax
.
xml
.
parsers
.
SAXParser
;
import
javax
.
xml
.
parsers
.
ParserConfigurationException
;
import
javax
.
xml
.
parsers
.
FactoryConfigurationError
;
public
class
JAXPUtils
{
private
static
SAXParserFactory
parserFactory
=
null
;
public
synchronized
static
SAXParserFactory
getParserFactory
(
)
throws
BuildException
{
if
(
parserFactory
==
null
)
{
parserFactory
=
newParserFactory
(
)
;
}
return
parserFactory
;
}
public
static
SAXParserFactory
newParserFactory
(
)
throws
BuildException
{
try
{
return
SAXParserFactory
.
newInstance
(
)
;
}
catch
(
FactoryConfigurationError
e
)
{
throw
new
BuildException
(
"XML parser factory has not been "
+
"configured correctly: "
+
e
.
getMessage
(
)
,
e
)
;
}
}
public
static
Parser
getParser
(
)
throws
BuildException
{
try
{
return
newSAXParser
(
)
.
getParser
(
)
;
}
catch
(
SAXException
e
)
{
throw
convertToBuildException
(
e
)
;
}
}
public
static
XMLReader
getXMLReader
(
)
throws
BuildException
{
try
{
return
newSAXParser
(
)
.
getXMLReader
(
)
;
}
catch
(
SAXException
e
)
{
throw
convertToBuildException
(
e
)
;
}
}
private
static
SAXParser
newSAXParser
(
)
throws
BuildException
{
try
{
return
getParserFactory
(
)
.
newSAXParser
(
)
;
}
catch
(
ParserConfigurationException
e
)
{
throw
new
BuildException
(
"Cannot create parser for the given "
+
"configuration: "
+
e
.
getMessage
(
)
,
e
)
;
}
catch
(
SAXException
e
)
{
throw
convertToBuildException
(
e
)
;
}
}
private
static
BuildException
convertToBuildException
(
SAXException
e
)
{
Exception
nested
=
e
.
getException
(
)
;
if
(
nested
!=
null
)
{
return
new
BuildException
(
nested
)
;
}
else
{
return
new
BuildException
(
e
)
;
}
}
}
