package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
java
.
io
.
File
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Properties
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
util
.
FileUtils
;
public
class
BuildNumber
extends
Task
{
private
static
final
String
DEFAULT_PROPERTY_NAME
=
"build.number"
;
private
static
final
String
DEFAULT_FILENAME
=
DEFAULT_PROPERTY_NAME
;
private
File
m_file
;
public
void
setFile
(
final
File
file
)
{
m_file
=
file
;
}
public
void
execute
(
)
throws
BuildException
{
File
savedFile
=
m_file
;
validate
(
)
;
final
Properties
properties
=
loadProperties
(
)
;
final
int
buildNumber
=
getBuildNumber
(
properties
)
;
properties
.
put
(
DEFAULT_PROPERTY_NAME
,
String
.
valueOf
(
buildNumber
+
1
)
)
;
FileOutputStream
output
=
null
;
try
{
output
=
new
FileOutputStream
(
m_file
)
;
final
String
header
=
"Build Number for ANT. Do not edit!"
;
properties
.
save
(
output
,
header
)
;
}
catch
(
final
IOException
ioe
)
{
final
String
message
=
"Error while writing "
+
m_file
;
throw
new
BuildException
(
message
,
ioe
)
;
}
finally
{
if
(
null
!=
output
)
{
try
{
output
.
close
(
)
;
}
catch
(
final
IOException
ioe
)
{
}
}
m_file
=
savedFile
;
}
getProject
(
)
.
setNewProperty
(
DEFAULT_PROPERTY_NAME
,
String
.
valueOf
(
buildNumber
)
)
;
}
private
int
getBuildNumber
(
final
Properties
properties
)
throws
BuildException
{
final
String
buildNumber
=
properties
.
getProperty
(
DEFAULT_PROPERTY_NAME
,
"0"
)
.
trim
(
)
;
try
{
return
Integer
.
parseInt
(
buildNumber
)
;
}
catch
(
final
NumberFormatException
nfe
)
{
final
String
message
=
m_file
+
" contains a non integer build number: "
+
buildNumber
;
throw
new
BuildException
(
message
,
nfe
)
;
}
}
private
Properties
loadProperties
(
)
throws
BuildException
{
FileInputStream
input
=
null
;
try
{
final
Properties
properties
=
new
Properties
(
)
;
input
=
new
FileInputStream
(
m_file
)
;
properties
.
load
(
input
)
;
return
properties
;
}
catch
(
final
IOException
ioe
)
{
throw
new
BuildException
(
ioe
)
;
}
finally
{
if
(
null
!=
input
)
{
try
{
input
.
close
(
)
;
}
catch
(
final
IOException
ioe
)
{
}
}
}
}
private
void
validate
(
)
throws
BuildException
{
if
(
null
==
m_file
)
{
m_file
=
getProject
(
)
.
resolveFile
(
DEFAULT_FILENAME
)
;
}
if
(
!
m_file
.
exists
(
)
)
{
try
{
FileUtils
.
newFileUtils
(
)
.
createNewFile
(
m_file
)
;
}
catch
(
final
IOException
ioe
)
{
final
String
message
=
m_file
+
" doesn't exist and new file can't be created."
;
throw
new
BuildException
(
message
,
ioe
)
;
}
}
if
(
!
m_file
.
canRead
(
)
)
{
final
String
message
=
"Unable to read from "
+
m_file
+
"."
;
throw
new
BuildException
(
message
)
;
}
if
(
!
m_file
.
canWrite
(
)
)
{
final
String
message
=
"Unable to write to "
+
m_file
+
"."
;
throw
new
BuildException
(
message
)
;
}
}
}
