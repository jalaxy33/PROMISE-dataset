package
org
.
apache
.
tools
.
ant
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
IOException
;
import
java
.
io
.
PrintStream
;
import
java
.
io
.
StringReader
;
import
org
.
apache
.
tools
.
ant
.
util
.
StringUtils
;
import
org
.
apache
.
tools
.
ant
.
util
.
DateUtils
;
public
class
DefaultLogger
implements
BuildLogger
{
public
static
final
int
LEFT_COLUMN_SIZE
=
12
;
protected
PrintStream
out
;
protected
PrintStream
err
;
protected
int
msgOutputLevel
=
Project
.
MSG_ERR
;
private
long
startTime
=
System
.
currentTimeMillis
(
)
;
protected
static
final
String
lSep
=
StringUtils
.
LINE_SEP
;
protected
boolean
emacsMode
=
false
;
public
DefaultLogger
(
)
{
}
public
void
setMessageOutputLevel
(
int
level
)
{
this
.
msgOutputLevel
=
level
;
}
public
void
setOutputPrintStream
(
PrintStream
output
)
{
this
.
out
=
new
PrintStream
(
output
,
true
)
;
}
public
void
setErrorPrintStream
(
PrintStream
err
)
{
this
.
err
=
new
PrintStream
(
err
,
true
)
;
}
public
void
setEmacsMode
(
boolean
emacsMode
)
{
this
.
emacsMode
=
emacsMode
;
}
public
void
buildStarted
(
BuildEvent
event
)
{
startTime
=
System
.
currentTimeMillis
(
)
;
}
public
void
buildFinished
(
BuildEvent
event
)
{
Throwable
error
=
event
.
getException
(
)
;
StringBuffer
message
=
new
StringBuffer
(
)
;
if
(
error
==
null
)
{
message
.
append
(
StringUtils
.
LINE_SEP
)
;
message
.
append
(
"BUILD SUCCESSFUL"
)
;
}
else
{
message
.
append
(
StringUtils
.
LINE_SEP
)
;
message
.
append
(
"BUILD FAILED"
)
;
message
.
append
(
StringUtils
.
LINE_SEP
)
;
if
(
Project
.
MSG_VERBOSE
<=
msgOutputLevel
||
!
(
error
instanceof
BuildException
)
)
{
message
.
append
(
StringUtils
.
getStackTrace
(
error
)
)
;
}
else
{
if
(
error
instanceof
BuildException
)
{
message
.
append
(
error
.
toString
(
)
)
.
append
(
lSep
)
;
}
else
{
message
.
append
(
error
.
getMessage
(
)
)
.
append
(
lSep
)
;
}
}
}
message
.
append
(
StringUtils
.
LINE_SEP
)
;
message
.
append
(
"Total time: "
)
;
message
.
append
(
formatTime
(
System
.
currentTimeMillis
(
)
-
startTime
)
)
;
String
msg
=
message
.
toString
(
)
;
if
(
error
==
null
)
{
printMessage
(
msg
,
out
,
Project
.
MSG_VERBOSE
)
;
}
else
{
printMessage
(
msg
,
err
,
Project
.
MSG_ERR
)
;
}
log
(
msg
)
;
}
public
void
targetStarted
(
BuildEvent
event
)
{
if
(
Project
.
MSG_INFO
<=
msgOutputLevel
)
{
String
msg
=
StringUtils
.
LINE_SEP
+
event
.
getTarget
(
)
.
getName
(
)
+
":"
;
printMessage
(
msg
,
out
,
event
.
getPriority
(
)
)
;
log
(
msg
)
;
}
}
public
void
targetFinished
(
BuildEvent
event
)
{
}
public
void
taskStarted
(
BuildEvent
event
)
{
}
public
void
taskFinished
(
BuildEvent
event
)
{
}
public
void
messageLogged
(
BuildEvent
event
)
{
int
priority
=
event
.
getPriority
(
)
;
if
(
priority
<=
msgOutputLevel
)
{
StringBuffer
message
=
new
StringBuffer
(
)
;
if
(
event
.
getTask
(
)
!=
null
&&
!
emacsMode
)
{
String
name
=
event
.
getTask
(
)
.
getTaskName
(
)
;
String
label
=
"["
+
name
+
"] "
;
int
size
=
LEFT_COLUMN_SIZE
-
label
.
length
(
)
;
StringBuffer
tmp
=
new
StringBuffer
(
)
;
for
(
int
i
=
0
;
i
<
size
;
i
++
)
{
tmp
.
append
(
" "
)
;
}
tmp
.
append
(
label
)
;
label
=
tmp
.
toString
(
)
;
try
{
BufferedReader
r
=
new
BufferedReader
(
new
StringReader
(
event
.
getMessage
(
)
)
)
;
String
line
=
r
.
readLine
(
)
;
boolean
first
=
true
;
while
(
line
!=
null
)
{
if
(
!
first
)
{
message
.
append
(
StringUtils
.
LINE_SEP
)
;
}
first
=
false
;
message
.
append
(
label
)
.
append
(
line
)
;
line
=
r
.
readLine
(
)
;
}
}
catch
(
IOException
e
)
{
message
.
append
(
label
)
.
append
(
event
.
getMessage
(
)
)
;
}
}
else
{
message
.
append
(
event
.
getMessage
(
)
)
;
}
String
msg
=
message
.
toString
(
)
;
if
(
priority
!=
Project
.
MSG_ERR
)
{
printMessage
(
msg
,
out
,
priority
)
;
}
else
{
printMessage
(
msg
,
err
,
priority
)
;
}
log
(
msg
)
;
}
}
protected
static
String
formatTime
(
final
long
millis
)
{
return
DateUtils
.
formatElapsedTime
(
millis
)
;
}
protected
void
printMessage
(
final
String
message
,
final
PrintStream
stream
,
final
int
priority
)
{
stream
.
println
(
message
)
;
}
protected
void
log
(
String
message
)
{
}
}
