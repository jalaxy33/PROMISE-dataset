package
org
.
apache
.
tools
.
ant
.
listener
;
import
org
.
apache
.
tools
.
ant
.
BuildEvent
;
import
org
.
apache
.
tools
.
ant
.
DefaultLogger
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
util
.
StringUtils
;
import
org
.
apache
.
tools
.
mail
.
MailMessage
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
PrintStream
;
import
java
.
util
.
Enumeration
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Properties
;
import
java
.
util
.
StringTokenizer
;
public
class
MailLogger
extends
DefaultLogger
{
private
StringBuffer
buffer
=
new
StringBuffer
(
)
;
public
void
buildFinished
(
BuildEvent
event
)
{
super
.
buildFinished
(
event
)
;
Project
project
=
event
.
getProject
(
)
;
Hashtable
properties
=
project
.
getProperties
(
)
;
Properties
fileProperties
=
new
Properties
(
)
;
String
filename
=
(
String
)
properties
.
get
(
"MailLogger.properties.file"
)
;
if
(
filename
!=
null
)
{
InputStream
is
=
null
;
try
{
is
=
new
FileInputStream
(
filename
)
;
fileProperties
.
load
(
is
)
;
}
catch
(
IOException
ioe
)
{
}
finally
{
if
(
is
!=
null
)
{
try
{
is
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
}
}
}
for
(
Enumeration
e
=
fileProperties
.
keys
(
)
;
e
.
hasMoreElements
(
)
;
)
{
String
key
=
(
String
)
e
.
nextElement
(
)
;
String
value
=
fileProperties
.
getProperty
(
key
)
;
properties
.
put
(
key
,
project
.
replaceProperties
(
value
)
)
;
}
boolean
success
=
(
event
.
getException
(
)
==
null
)
;
String
prefix
=
success
?
"success"
:
"failure"
;
try
{
boolean
notify
=
Project
.
toBoolean
(
getValue
(
properties
,
prefix
+
".notify"
,
"on"
)
)
;
if
(
!
notify
)
{
return
;
}
String
mailhost
=
getValue
(
properties
,
"mailhost"
,
"localhost"
)
;
String
from
=
getValue
(
properties
,
"from"
,
null
)
;
String
toList
=
getValue
(
properties
,
prefix
+
".to"
,
null
)
;
String
subject
=
getValue
(
properties
,
prefix
+
".subject"
,
(
success
)
?
"Build Success"
:
"Build Failure"
)
;
sendMail
(
mailhost
,
from
,
toList
,
subject
,
buffer
.
toString
(
)
)
;
}
catch
(
Exception
e
)
{
System
.
out
.
println
(
"MailLogger failed to send e-mail!"
)
;
e
.
printStackTrace
(
System
.
err
)
;
}
}
protected
void
log
(
String
message
)
{
buffer
.
append
(
message
)
.
append
(
StringUtils
.
LINE_SEP
)
;
}
private
String
getValue
(
Hashtable
properties
,
String
name
,
String
defaultValue
)
throws
Exception
{
String
propertyName
=
"MailLogger."
+
name
;
String
value
=
(
String
)
properties
.
get
(
propertyName
)
;
if
(
value
==
null
)
{
value
=
defaultValue
;
}
if
(
value
==
null
)
{
throw
new
Exception
(
"Missing required parameter: "
+
propertyName
)
;
}
return
value
;
}
private
void
sendMail
(
String
mailhost
,
String
from
,
String
toList
,
String
subject
,
String
message
)
throws
IOException
{
MailMessage
mailMessage
=
new
MailMessage
(
mailhost
)
;
mailMessage
.
from
(
from
)
;
StringTokenizer
t
=
new
StringTokenizer
(
toList
,
", "
,
false
)
;
while
(
t
.
hasMoreTokens
(
)
)
{
mailMessage
.
to
(
t
.
nextToken
(
)
)
;
}
mailMessage
.
setSubject
(
subject
)
;
PrintStream
ps
=
mailMessage
.
getPrintStream
(
)
;
ps
.
println
(
message
)
;
mailMessage
.
sendAndClose
(
)
;
}
}
