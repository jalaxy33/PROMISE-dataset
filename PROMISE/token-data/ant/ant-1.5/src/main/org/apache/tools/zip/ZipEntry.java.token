package
org
.
apache
.
tools
.
zip
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
util
.
Vector
;
import
java
.
util
.
zip
.
ZipException
;
public
class
ZipEntry
extends
java
.
util
.
zip
.
ZipEntry
{
private
int
internalAttributes
=
0
;
private
long
externalAttributes
=
0
;
private
Vector
extraFields
=
new
Vector
(
)
;
public
ZipEntry
(
String
name
)
{
super
(
name
)
;
}
public
ZipEntry
(
java
.
util
.
zip
.
ZipEntry
entry
)
throws
ZipException
{
super
(
entry
.
getName
(
)
)
;
setComment
(
entry
.
getComment
(
)
)
;
setMethod
(
entry
.
getMethod
(
)
)
;
setTime
(
entry
.
getTime
(
)
)
;
long
size
=
entry
.
getSize
(
)
;
if
(
size
>
0
)
{
setSize
(
size
)
;
}
long
cSize
=
entry
.
getCompressedSize
(
)
;
if
(
cSize
>
0
)
{
setComprSize
(
cSize
)
;
}
long
crc
=
entry
.
getCrc
(
)
;
if
(
crc
>
0
)
{
setCrc
(
crc
)
;
}
byte
[
]
extra
=
entry
.
getExtra
(
)
;
if
(
extra
!=
null
)
{
setExtraFields
(
ExtraFieldUtils
.
parse
(
extra
)
)
;
}
else
{
setExtra
(
)
;
}
}
public
ZipEntry
(
ZipEntry
entry
)
throws
ZipException
{
this
(
(
java
.
util
.
zip
.
ZipEntry
)
entry
)
;
setInternalAttributes
(
entry
.
getInternalAttributes
(
)
)
;
setExternalAttributes
(
entry
.
getExternalAttributes
(
)
)
;
setExtraFields
(
entry
.
getExtraFields
(
)
)
;
}
public
Object
clone
(
)
{
ZipEntry
e
=
null
;
try
{
e
=
new
ZipEntry
(
(
java
.
util
.
zip
.
ZipEntry
)
super
.
clone
(
)
)
;
}
catch
(
Exception
ex
)
{
ex
.
printStackTrace
(
)
;
}
e
.
setInternalAttributes
(
getInternalAttributes
(
)
)
;
e
.
setExternalAttributes
(
getExternalAttributes
(
)
)
;
e
.
setExtraFields
(
getExtraFields
(
)
)
;
return
e
;
}
public
int
getInternalAttributes
(
)
{
return
internalAttributes
;
}
public
void
setInternalAttributes
(
int
value
)
{
internalAttributes
=
value
;
}
public
long
getExternalAttributes
(
)
{
return
externalAttributes
;
}
public
void
setExternalAttributes
(
long
value
)
{
externalAttributes
=
value
;
}
public
void
setExtraFields
(
ZipExtraField
[
]
fields
)
{
extraFields
.
removeAllElements
(
)
;
for
(
int
i
=
0
;
i
<
fields
.
length
;
i
++
)
{
extraFields
.
addElement
(
fields
[
i
]
)
;
}
setExtra
(
)
;
}
public
ZipExtraField
[
]
getExtraFields
(
)
{
ZipExtraField
[
]
result
=
new
ZipExtraField
[
extraFields
.
size
(
)
]
;
extraFields
.
copyInto
(
result
)
;
return
result
;
}
public
void
addExtraField
(
ZipExtraField
ze
)
{
ZipShort
type
=
ze
.
getHeaderId
(
)
;
boolean
done
=
false
;
for
(
int
i
=
0
;
!
done
&&
i
<
extraFields
.
size
(
)
;
i
++
)
{
if
(
(
(
ZipExtraField
)
extraFields
.
elementAt
(
i
)
)
.
getHeaderId
(
)
.
equals
(
type
)
)
{
extraFields
.
setElementAt
(
ze
,
i
)
;
done
=
true
;
}
}
if
(
!
done
)
{
extraFields
.
addElement
(
ze
)
;
}
setExtra
(
)
;
}
public
void
removeExtraField
(
ZipShort
type
)
{
boolean
done
=
false
;
for
(
int
i
=
0
;
!
done
&&
i
<
extraFields
.
size
(
)
;
i
++
)
{
if
(
(
(
ZipExtraField
)
extraFields
.
elementAt
(
i
)
)
.
getHeaderId
(
)
.
equals
(
type
)
)
{
extraFields
.
removeElementAt
(
i
)
;
done
=
true
;
}
}
if
(
!
done
)
{
throw
new
java
.
util
.
NoSuchElementException
(
)
;
}
setExtra
(
)
;
}
public
void
setExtra
(
byte
[
]
extra
)
throws
RuntimeException
{
try
{
setExtraFields
(
ExtraFieldUtils
.
parse
(
extra
)
)
;
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
e
.
getMessage
(
)
)
;
}
}
protected
void
setExtra
(
)
{
super
.
setExtra
(
ExtraFieldUtils
.
mergeLocalFileDataData
(
getExtraFields
(
)
)
)
;
}
public
byte
[
]
getLocalFileDataExtra
(
)
{
byte
[
]
extra
=
getExtra
(
)
;
return
extra
!=
null
?
extra
:
new
byte
[
0
]
;
}
public
byte
[
]
getCentralDirectoryExtra
(
)
{
return
ExtraFieldUtils
.
mergeCentralDirectoryData
(
getExtraFields
(
)
)
;
}
private
Long
compressedSize
=
null
;
public
void
setComprSize
(
long
size
)
{
if
(
haveSetCompressedSize
(
)
)
{
performSetCompressedSize
(
this
,
size
)
;
}
else
{
compressedSize
=
new
Long
(
size
)
;
}
}
public
long
getCompressedSize
(
)
{
if
(
compressedSize
!=
null
)
{
return
compressedSize
.
longValue
(
)
;
}
return
super
.
getCompressedSize
(
)
;
}
private
static
Method
setCompressedSizeMethod
=
null
;
private
static
Object
lockReflection
=
new
Object
(
)
;
private
static
boolean
triedToGetMethod
=
false
;
private
static
boolean
haveSetCompressedSize
(
)
{
checkSCS
(
)
;
return
setCompressedSizeMethod
!=
null
;
}
private
static
void
performSetCompressedSize
(
ZipEntry
ze
,
long
size
)
{
Long
[
]
s
=
{
new
Long
(
size
)
}
;
try
{
setCompressedSizeMethod
.
invoke
(
ze
,
s
)
;
}
catch
(
InvocationTargetException
ite
)
{
Throwable
nested
=
ite
.
getTargetException
(
)
;
throw
new
RuntimeException
(
"Exception setting the compressed size "
+
"of "
+
ze
+
": "
+
nested
.
getMessage
(
)
)
;
}
catch
(
Throwable
other
)
{
throw
new
RuntimeException
(
"Exception setting the compressed size "
+
"of "
+
ze
+
": "
+
other
.
getMessage
(
)
)
;
}
}
private
static
void
checkSCS
(
)
{
if
(
!
triedToGetMethod
)
{
synchronized
(
lockReflection
)
{
triedToGetMethod
=
true
;
try
{
setCompressedSizeMethod
=
java
.
util
.
zip
.
ZipEntry
.
class
.
getMethod
(
"setCompressedSize"
,
new
Class
[
]
{
Long
.
TYPE
}
)
;
}
catch
(
NoSuchMethodException
nse
)
{
}
}
}
}
}
