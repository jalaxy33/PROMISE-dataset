package
org
.
apache
.
tools
.
mail
;
import
java
.
io
.
IOException
;
import
java
.
io
.
PrintStream
;
import
java
.
io
.
BufferedOutputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
net
.
Socket
;
import
java
.
net
.
InetAddress
;
import
java
.
util
.
Vector
;
import
java
.
util
.
Hashtable
;
import
java
.
util
.
Enumeration
;
public
class
MailMessage
{
public
static
final
int
DEFAULT_PORT
=
25
;
private
String
host
;
private
int
port
=
DEFAULT_PORT
;
private
String
from
;
private
Vector
to
;
private
Vector
cc
;
private
Hashtable
headers
;
private
MailPrintStream
out
;
private
SmtpResponseReader
in
;
private
Socket
socket
;
public
MailMessage
(
)
throws
IOException
{
this
(
"localhost"
,
DEFAULT_PORT
)
;
}
public
MailMessage
(
String
host
)
throws
IOException
{
this
(
host
,
DEFAULT_PORT
)
;
}
public
MailMessage
(
String
host
,
int
port
)
throws
IOException
{
this
.
port
=
port
;
this
.
host
=
host
;
to
=
new
Vector
(
)
;
cc
=
new
Vector
(
)
;
headers
=
new
Hashtable
(
)
;
setHeader
(
"X-Mailer"
,
"org.apache.tools.mail.MailMessage (jakarta.apache.org)"
)
;
connect
(
)
;
sendHelo
(
)
;
}
public
void
setPort
(
int
port
)
{
this
.
port
=
port
;
}
public
void
from
(
String
from
)
throws
IOException
{
sendFrom
(
from
)
;
this
.
from
=
from
;
}
public
void
to
(
String
to
)
throws
IOException
{
sendRcpt
(
to
)
;
this
.
to
.
addElement
(
to
)
;
}
public
void
cc
(
String
cc
)
throws
IOException
{
sendRcpt
(
cc
)
;
this
.
cc
.
addElement
(
cc
)
;
}
public
void
bcc
(
String
bcc
)
throws
IOException
{
sendRcpt
(
bcc
)
;
}
public
void
setSubject
(
String
subj
)
{
headers
.
put
(
"Subject"
,
subj
)
;
}
public
void
setHeader
(
String
name
,
String
value
)
{
headers
.
put
(
name
,
value
)
;
}
public
PrintStream
getPrintStream
(
)
throws
IOException
{
setFromHeader
(
)
;
setToHeader
(
)
;
setCcHeader
(
)
;
sendData
(
)
;
flushHeaders
(
)
;
return
out
;
}
void
setFromHeader
(
)
{
setHeader
(
"From"
,
from
)
;
}
void
setToHeader
(
)
{
setHeader
(
"To"
,
vectorToList
(
to
)
)
;
}
void
setCcHeader
(
)
{
setHeader
(
"Cc"
,
vectorToList
(
cc
)
)
;
}
String
vectorToList
(
Vector
v
)
{
StringBuffer
buf
=
new
StringBuffer
(
)
;
Enumeration
e
=
v
.
elements
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
buf
.
append
(
e
.
nextElement
(
)
)
;
if
(
e
.
hasMoreElements
(
)
)
{
buf
.
append
(
", "
)
;
}
}
return
buf
.
toString
(
)
;
}
void
flushHeaders
(
)
throws
IOException
{
Enumeration
e
=
headers
.
keys
(
)
;
while
(
e
.
hasMoreElements
(
)
)
{
String
name
=
(
String
)
e
.
nextElement
(
)
;
String
value
=
(
String
)
headers
.
get
(
name
)
;
out
.
println
(
name
+
": "
+
value
)
;
}
out
.
println
(
)
;
out
.
flush
(
)
;
}
public
void
sendAndClose
(
)
throws
IOException
{
try
{
sendDot
(
)
;
sendQuit
(
)
;
}
finally
{
disconnect
(
)
;
}
}
static
String
sanitizeAddress
(
String
s
)
{
int
paramDepth
=
0
;
int
start
=
0
;
int
end
=
0
;
int
len
=
s
.
length
(
)
;
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
char
c
=
s
.
charAt
(
i
)
;
if
(
c
==
'('
)
{
paramDepth
++
;
if
(
start
==
0
)
{
end
=
i
;
}
}
else
if
(
c
==
')'
)
{
paramDepth
--
;
if
(
end
==
0
)
{
start
=
i
+
1
;
}
}
else
if
(
paramDepth
==
0
&&
c
==
'<'
)
{
start
=
i
+
1
;
}
else
if
(
paramDepth
==
0
&&
c
==
'>'
)
{
end
=
i
;
}
}
if
(
end
==
0
)
{
end
=
len
;
}
return
s
.
substring
(
start
,
end
)
;
}
void
connect
(
)
throws
IOException
{
socket
=
new
Socket
(
host
,
port
)
;
out
=
new
MailPrintStream
(
new
BufferedOutputStream
(
socket
.
getOutputStream
(
)
)
)
;
in
=
new
SmtpResponseReader
(
socket
.
getInputStream
(
)
)
;
getReady
(
)
;
}
void
getReady
(
)
throws
IOException
{
String
response
=
in
.
getResponse
(
)
;
int
[
]
ok
=
{
220
}
;
if
(
!
isResponseOK
(
response
,
ok
)
)
{
throw
new
IOException
(
"Didn't get introduction from server: "
+
response
)
;
}
}
void
sendHelo
(
)
throws
IOException
{
String
local
=
InetAddress
.
getLocalHost
(
)
.
getHostName
(
)
;
int
[
]
ok
=
{
250
}
;
send
(
"HELO "
+
local
,
ok
)
;
}
void
sendFrom
(
String
from
)
throws
IOException
{
int
[
]
ok
=
{
250
}
;
send
(
"MAIL FROM: "
+
"<"
+
sanitizeAddress
(
from
)
+
">"
,
ok
)
;
}
void
sendRcpt
(
String
rcpt
)
throws
IOException
{
int
[
]
ok
=
{
250
,
251
}
;
send
(
"RCPT TO: "
+
"<"
+
sanitizeAddress
(
rcpt
)
+
">"
,
ok
)
;
}
void
sendData
(
)
throws
IOException
{
int
[
]
ok
=
{
354
}
;
send
(
"DATA"
,
ok
)
;
}
void
sendDot
(
)
throws
IOException
{
int
[
]
ok
=
{
250
}
;
send
(
"\r\n."
,
ok
)
;
}
void
sendQuit
(
)
throws
IOException
{
int
[
]
ok
=
{
221
}
;
try
{
send
(
"QUIT"
,
ok
)
;
}
catch
(
IOException
e
)
{
throw
new
ErrorInQuitException
(
e
)
;
}
}
void
send
(
String
msg
,
int
[
]
ok
)
throws
IOException
{
out
.
rawPrint
(
msg
+
"\r\n"
)
;
String
response
=
in
.
getResponse
(
)
;
if
(
!
isResponseOK
(
response
,
ok
)
)
{
throw
new
IOException
(
"Unexpected reply to command: "
+
msg
+
": "
+
response
)
;
}
}
boolean
isResponseOK
(
String
response
,
int
[
]
ok
)
{
for
(
int
i
=
0
;
i
<
ok
.
length
;
i
++
)
{
if
(
response
.
startsWith
(
""
+
ok
[
i
]
)
)
{
return
true
;
}
}
return
false
;
}
void
disconnect
(
)
throws
IOException
{
if
(
out
!=
null
)
{
out
.
close
(
)
;
}
if
(
in
!=
null
)
{
try
{
in
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
}
if
(
socket
!=
null
)
{
try
{
socket
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
}
}
}
class
MailPrintStream
extends
PrintStream
{
int
lastChar
;
public
MailPrintStream
(
OutputStream
out
)
{
super
(
out
,
true
)
;
}
public
void
write
(
int
b
)
{
if
(
b
==
'\n'
&&
lastChar
!=
'\r'
)
{
rawWrite
(
'\r'
)
;
rawWrite
(
b
)
;
}
else
if
(
b
==
'.'
&&
lastChar
==
'\n'
)
{
rawWrite
(
'.'
)
;
rawWrite
(
b
)
;
}
else
{
rawWrite
(
b
)
;
}
lastChar
=
b
;
}
public
void
write
(
byte
[
]
buf
,
int
off
,
int
len
)
{
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
write
(
buf
[
off
+
i
]
)
;
}
}
void
rawWrite
(
int
b
)
{
super
.
write
(
b
)
;
}
void
rawPrint
(
String
s
)
{
int
len
=
s
.
length
(
)
;
for
(
int
i
=
0
;
i
<
len
;
i
++
)
{
rawWrite
(
s
.
charAt
(
i
)
)
;
}
}
}
