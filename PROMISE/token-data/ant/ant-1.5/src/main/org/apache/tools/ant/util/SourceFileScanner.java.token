package
org
.
apache
.
tools
.
ant
.
util
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
taskdefs
.
condition
.
Os
;
import
java
.
io
.
File
;
import
java
.
util
.
Vector
;
public
class
SourceFileScanner
{
protected
Task
task
;
private
FileUtils
fileUtils
;
public
SourceFileScanner
(
Task
task
)
{
this
.
task
=
task
;
fileUtils
=
FileUtils
.
newFileUtils
(
)
;
}
public
String
[
]
restrict
(
String
[
]
files
,
File
srcDir
,
File
destDir
,
FileNameMapper
mapper
)
{
long
now
=
(
new
java
.
util
.
Date
(
)
)
.
getTime
(
)
;
StringBuffer
targetList
=
new
StringBuffer
(
)
;
if
(
Os
.
isFamily
(
"windows"
)
)
{
now
+=
2000
;
}
Vector
v
=
new
Vector
(
)
;
for
(
int
i
=
0
;
i
<
files
.
length
;
i
++
)
{
String
[
]
targets
=
mapper
.
mapFileName
(
files
[
i
]
)
;
if
(
targets
==
null
||
targets
.
length
==
0
)
{
task
.
log
(
files
[
i
]
+
" skipped - don\'t know how to handle it"
,
Project
.
MSG_VERBOSE
)
;
continue
;
}
File
src
=
fileUtils
.
resolveFile
(
srcDir
,
files
[
i
]
)
;
if
(
src
.
lastModified
(
)
>
now
)
{
task
.
log
(
"Warning: "
+
files
[
i
]
+
" modified in the future."
,
Project
.
MSG_WARN
)
;
}
boolean
added
=
false
;
targetList
.
setLength
(
0
)
;
for
(
int
j
=
0
;
!
added
&&
j
<
targets
.
length
;
j
++
)
{
File
dest
=
fileUtils
.
resolveFile
(
destDir
,
targets
[
j
]
)
;
if
(
!
dest
.
exists
(
)
)
{
task
.
log
(
files
[
i
]
+
" added as "
+
dest
.
getAbsolutePath
(
)
+
" doesn\'t exist."
,
Project
.
MSG_VERBOSE
)
;
v
.
addElement
(
files
[
i
]
)
;
added
=
true
;
}
else
if
(
src
.
lastModified
(
)
>
dest
.
lastModified
(
)
)
{
task
.
log
(
files
[
i
]
+
" added as "
+
dest
.
getAbsolutePath
(
)
+
" is outdated."
,
Project
.
MSG_VERBOSE
)
;
v
.
addElement
(
files
[
i
]
)
;
added
=
true
;
}
else
{
if
(
targetList
.
length
(
)
>
0
)
{
targetList
.
append
(
", "
)
;
}
targetList
.
append
(
dest
.
getAbsolutePath
(
)
)
;
}
}
if
(
!
added
)
{
task
.
log
(
files
[
i
]
+
" omitted as "
+
targetList
.
toString
(
)
+
(
targets
.
length
==
1
?
" is"
:
" are "
)
+
" up to date."
,
Project
.
MSG_VERBOSE
)
;
}
}
String
[
]
result
=
new
String
[
v
.
size
(
)
]
;
v
.
copyInto
(
result
)
;
return
result
;
}
public
File
[
]
restrictAsFiles
(
String
[
]
files
,
File
srcDir
,
File
destDir
,
FileNameMapper
mapper
)
{
String
[
]
res
=
restrict
(
files
,
srcDir
,
destDir
,
mapper
)
;
File
[
]
result
=
new
File
[
res
.
length
]
;
for
(
int
i
=
0
;
i
<
res
.
length
;
i
++
)
{
result
[
i
]
=
new
File
(
srcDir
,
res
[
i
]
)
;
}
return
result
;
}
}
