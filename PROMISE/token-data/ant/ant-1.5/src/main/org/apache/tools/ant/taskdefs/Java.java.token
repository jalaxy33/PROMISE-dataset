package
org
.
apache
.
tools
.
ant
.
taskdefs
;
import
org
.
apache
.
tools
.
ant
.
BuildException
;
import
org
.
apache
.
tools
.
ant
.
ExitException
;
import
org
.
apache
.
tools
.
ant
.
Project
;
import
org
.
apache
.
tools
.
ant
.
Task
;
import
org
.
apache
.
tools
.
ant
.
types
.
Commandline
;
import
org
.
apache
.
tools
.
ant
.
types
.
Path
;
import
org
.
apache
.
tools
.
ant
.
types
.
CommandlineJava
;
import
org
.
apache
.
tools
.
ant
.
types
.
Reference
;
import
org
.
apache
.
tools
.
ant
.
types
.
Environment
;
import
java
.
io
.
File
;
import
java
.
io
.
PrintStream
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Vector
;
public
class
Java
extends
Task
{
private
CommandlineJava
cmdl
=
new
CommandlineJava
(
)
;
private
Environment
env
=
new
Environment
(
)
;
private
boolean
fork
=
false
;
private
boolean
newEnvironment
=
false
;
private
File
dir
=
null
;
private
File
out
;
private
PrintStream
outStream
=
null
;
private
boolean
failOnError
=
false
;
private
boolean
append
=
false
;
private
Long
timeout
=
null
;
public
void
execute
(
)
throws
BuildException
{
File
savedDir
=
dir
;
int
err
=
-
1
;
try
{
if
(
(
err
=
executeJava
(
)
)
!=
0
)
{
if
(
failOnError
)
{
throw
new
BuildException
(
"Java returned: "
+
err
,
location
)
;
}
else
{
log
(
"Java Result: "
+
err
,
Project
.
MSG_ERR
)
;
}
}
}
finally
{
dir
=
savedDir
;
}
}
public
int
executeJava
(
)
throws
BuildException
{
String
classname
=
cmdl
.
getClassname
(
)
;
if
(
classname
==
null
&&
cmdl
.
getJar
(
)
==
null
)
{
throw
new
BuildException
(
"Classname must not be null."
)
;
}
if
(
!
fork
&&
cmdl
.
getJar
(
)
!=
null
)
{
throw
new
BuildException
(
"Cannot execute a jar in non-forked mode."
+
" Please set fork='true'. "
)
;
}
if
(
fork
)
{
log
(
cmdl
.
describeCommand
(
)
,
Project
.
MSG_VERBOSE
)
;
}
else
{
if
(
cmdl
.
getVmCommand
(
)
.
size
(
)
>
1
)
{
log
(
"JVM args ignored when same JVM is used."
,
Project
.
MSG_WARN
)
;
}
if
(
dir
!=
null
)
{
log
(
"Working directory ignored when same JVM is used."
,
Project
.
MSG_WARN
)
;
}
if
(
newEnvironment
||
null
!=
env
.
getVariables
(
)
)
{
log
(
"Changes to environment variables are ignored when same "
+
"JVM is used."
,
Project
.
MSG_WARN
)
;
}
log
(
"Running in same VM "
+
cmdl
.
describeJavaCommand
(
)
,
Project
.
MSG_VERBOSE
)
;
}
try
{
if
(
fork
)
{
return
run
(
cmdl
.
getCommandline
(
)
)
;
}
else
{
try
{
run
(
cmdl
)
;
return
0
;
}
catch
(
ExitException
ex
)
{
return
ex
.
getStatus
(
)
;
}
}
}
catch
(
BuildException
e
)
{
if
(
failOnError
)
{
throw
e
;
}
else
{
log
(
e
.
getMessage
(
)
,
Project
.
MSG_ERR
)
;
return
0
;
}
}
catch
(
Throwable
t
)
{
if
(
failOnError
)
{
throw
new
BuildException
(
t
)
;
}
else
{
log
(
t
.
getMessage
(
)
,
Project
.
MSG_ERR
)
;
return
0
;
}
}
}
public
void
setClasspath
(
Path
s
)
{
createClasspath
(
)
.
append
(
s
)
;
}
public
Path
createClasspath
(
)
{
return
cmdl
.
createClasspath
(
project
)
.
createPath
(
)
;
}
public
void
setClasspathRef
(
Reference
r
)
{
createClasspath
(
)
.
setRefid
(
r
)
;
}
public
void
setJar
(
File
jarfile
)
throws
BuildException
{
if
(
cmdl
.
getClassname
(
)
!=
null
)
{
throw
new
BuildException
(
"Cannot use 'jar' and 'classname' "
+
"attributes in same command."
)
;
}
cmdl
.
setJar
(
jarfile
.
getAbsolutePath
(
)
)
;
}
public
void
setClassname
(
String
s
)
throws
BuildException
{
if
(
cmdl
.
getJar
(
)
!=
null
)
{
throw
new
BuildException
(
"Cannot use 'jar' and 'classname' "
+
"attributes in same command"
)
;
}
cmdl
.
setClassname
(
s
)
;
}
public
void
setArgs
(
String
s
)
{
log
(
"The args attribute is deprecated. "
+
"Please use nested arg elements."
,
Project
.
MSG_WARN
)
;
cmdl
.
createArgument
(
)
.
setLine
(
s
)
;
}
public
Commandline
.
Argument
createArg
(
)
{
return
cmdl
.
createArgument
(
)
;
}
public
void
setFork
(
boolean
s
)
{
this
.
fork
=
s
;
}
public
void
setJvmargs
(
String
s
)
{
log
(
"The jvmargs attribute is deprecated. "
+
"Please use nested jvmarg elements."
,
Project
.
MSG_WARN
)
;
cmdl
.
createVmArgument
(
)
.
setLine
(
s
)
;
}
public
Commandline
.
Argument
createJvmarg
(
)
{
return
cmdl
.
createVmArgument
(
)
;
}
public
void
setJvm
(
String
s
)
{
cmdl
.
setVm
(
s
)
;
}
public
void
addSysproperty
(
Environment
.
Variable
sysp
)
{
cmdl
.
addSysproperty
(
sysp
)
;
}
public
void
setFailonerror
(
boolean
fail
)
{
failOnError
=
fail
;
}
public
void
setDir
(
File
d
)
{
this
.
dir
=
d
;
}
public
void
setOutput
(
File
out
)
{
this
.
out
=
out
;
}
public
void
setMaxmemory
(
String
max
)
{
cmdl
.
setMaxmemory
(
max
)
;
}
public
void
setJVMVersion
(
String
value
)
{
cmdl
.
setVmversion
(
value
)
;
}
public
void
addEnv
(
Environment
.
Variable
var
)
{
env
.
addVariable
(
var
)
;
}
public
void
setNewenvironment
(
boolean
newenv
)
{
newEnvironment
=
newenv
;
}
public
void
setAppend
(
boolean
append
)
{
this
.
append
=
append
;
}
public
void
setTimeout
(
Long
value
)
{
timeout
=
value
;
}
protected
void
handleOutput
(
String
line
)
{
if
(
outStream
!=
null
)
{
outStream
.
println
(
line
)
;
}
else
{
super
.
handleOutput
(
line
)
;
}
}
protected
void
handleErrorOutput
(
String
line
)
{
if
(
outStream
!=
null
)
{
outStream
.
println
(
line
)
;
}
else
{
super
.
handleErrorOutput
(
line
)
;
}
}
private
void
run
(
CommandlineJava
command
)
throws
BuildException
{
ExecuteJava
exe
=
new
ExecuteJava
(
)
;
exe
.
setJavaCommand
(
command
.
getJavaCommand
(
)
)
;
exe
.
setClasspath
(
command
.
getClasspath
(
)
)
;
exe
.
setSystemProperties
(
command
.
getSystemProperties
(
)
)
;
exe
.
setTimeout
(
timeout
)
;
if
(
out
!=
null
)
{
try
{
outStream
=
new
PrintStream
(
new
FileOutputStream
(
out
.
getAbsolutePath
(
)
,
append
)
)
;
exe
.
execute
(
project
)
;
}
catch
(
IOException
io
)
{
throw
new
BuildException
(
io
,
location
)
;
}
finally
{
if
(
outStream
!=
null
)
{
outStream
.
close
(
)
;
}
}
}
else
{
exe
.
execute
(
project
)
;
}
}
private
int
run
(
String
[
]
command
)
throws
BuildException
{
FileOutputStream
fos
=
null
;
try
{
Execute
exe
=
null
;
if
(
out
==
null
)
{
exe
=
new
Execute
(
new
LogStreamHandler
(
this
,
Project
.
MSG_INFO
,
Project
.
MSG_WARN
)
,
createWatchdog
(
)
)
;
}
else
{
fos
=
new
FileOutputStream
(
out
.
getAbsolutePath
(
)
,
append
)
;
exe
=
new
Execute
(
new
PumpStreamHandler
(
fos
)
,
createWatchdog
(
)
)
;
}
exe
.
setAntRun
(
project
)
;
if
(
dir
==
null
)
{
dir
=
project
.
getBaseDir
(
)
;
}
else
if
(
!
dir
.
exists
(
)
||
!
dir
.
isDirectory
(
)
)
{
throw
new
BuildException
(
dir
.
getAbsolutePath
(
)
+
" is not a valid directory"
,
location
)
;
}
exe
.
setWorkingDirectory
(
dir
)
;
String
[
]
environment
=
env
.
getVariables
(
)
;
if
(
environment
!=
null
)
{
for
(
int
i
=
0
;
i
<
environment
.
length
;
i
++
)
{
log
(
"Setting environment variable: "
+
environment
[
i
]
,
Project
.
MSG_VERBOSE
)
;
}
}
exe
.
setNewenvironment
(
newEnvironment
)
;
exe
.
setEnvironment
(
environment
)
;
exe
.
setCommandline
(
command
)
;
try
{
int
rc
=
exe
.
execute
(
)
;
if
(
exe
.
killedProcess
(
)
)
{
log
(
"Timeout: killed the sub-process"
,
Project
.
MSG_WARN
)
;
}
return
rc
;
}
catch
(
IOException
e
)
{
throw
new
BuildException
(
e
,
location
)
;
}
}
catch
(
IOException
io
)
{
throw
new
BuildException
(
io
,
location
)
;
}
finally
{
if
(
fos
!=
null
)
{
try
{
fos
.
close
(
)
;
}
catch
(
IOException
io
)
{
}
}
}
}
protected
void
run
(
String
classname
,
Vector
args
)
throws
BuildException
{
CommandlineJava
cmdj
=
new
CommandlineJava
(
)
;
cmdj
.
setClassname
(
classname
)
;
for
(
int
i
=
0
;
i
<
args
.
size
(
)
;
i
++
)
{
cmdj
.
createArgument
(
)
.
setValue
(
(
String
)
args
.
elementAt
(
i
)
)
;
}
run
(
cmdj
)
;
}
public
void
clearArgs
(
)
{
cmdl
.
clearJavaArgs
(
)
;
}
protected
ExecuteWatchdog
createWatchdog
(
)
throws
BuildException
{
if
(
timeout
==
null
)
{
return
null
;
}
return
new
ExecuteWatchdog
(
timeout
.
longValue
(
)
)
;
}
}
